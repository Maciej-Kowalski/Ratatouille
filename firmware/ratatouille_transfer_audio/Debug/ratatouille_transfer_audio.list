
ratatouille_transfer_audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010f90  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e8  080110d0  080110d0  000120d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080115b8  080115b8  000125b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080115c0  080115c0  000125c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080115c4  080115c4  000125c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002e4  20000008  080115c8  00013008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001d8c  200002ec  080118ac  000132ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20002078  080118ac  00014078  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000132ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   000284d9  00000000  00000000  0001331c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005114  00000000  00000000  0003b7f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002668  00000000  00000000  00040910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001d85  00000000  00000000  00042f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000078ea  00000000  00000000  00044cfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002a415  00000000  00000000  0004c5e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000fedfa  00000000  00000000  000769fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001757f6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b4ac  00000000  00000000  0017583c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008b  00000000  00000000  00180ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002ec 	.word	0x200002ec
 800015c:	00000000 	.word	0x00000000
 8000160:	080110b8 	.word	0x080110b8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002f0 	.word	0x200002f0
 800017c:	080110b8 	.word	0x080110b8

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b96a 	b.w	8000e44 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	460c      	mov	r4, r1
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d14e      	bne.n	8000c32 <__udivmoddi4+0xaa>
 8000b94:	4694      	mov	ip, r2
 8000b96:	458c      	cmp	ip, r1
 8000b98:	4686      	mov	lr, r0
 8000b9a:	fab2 f282 	clz	r2, r2
 8000b9e:	d962      	bls.n	8000c66 <__udivmoddi4+0xde>
 8000ba0:	b14a      	cbz	r2, 8000bb6 <__udivmoddi4+0x2e>
 8000ba2:	f1c2 0320 	rsb	r3, r2, #32
 8000ba6:	4091      	lsls	r1, r2
 8000ba8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb0:	4319      	orrs	r1, r3
 8000bb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bba:	fa1f f68c 	uxth.w	r6, ip
 8000bbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000bca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bce:	fb04 f106 	mul.w	r1, r4, r6
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	d90a      	bls.n	8000bec <__udivmoddi4+0x64>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bde:	f080 8112 	bcs.w	8000e06 <__udivmoddi4+0x27e>
 8000be2:	4299      	cmp	r1, r3
 8000be4:	f240 810f 	bls.w	8000e06 <__udivmoddi4+0x27e>
 8000be8:	3c02      	subs	r4, #2
 8000bea:	4463      	add	r3, ip
 8000bec:	1a59      	subs	r1, r3, r1
 8000bee:	fa1f f38e 	uxth.w	r3, lr
 8000bf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000bfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfe:	fb00 f606 	mul.w	r6, r0, r6
 8000c02:	429e      	cmp	r6, r3
 8000c04:	d90a      	bls.n	8000c1c <__udivmoddi4+0x94>
 8000c06:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c0e:	f080 80fc 	bcs.w	8000e0a <__udivmoddi4+0x282>
 8000c12:	429e      	cmp	r6, r3
 8000c14:	f240 80f9 	bls.w	8000e0a <__udivmoddi4+0x282>
 8000c18:	4463      	add	r3, ip
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	1b9b      	subs	r3, r3, r6
 8000c1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11d      	cbz	r5, 8000c2e <__udivmoddi4+0xa6>
 8000c26:	40d3      	lsrs	r3, r2
 8000c28:	2200      	movs	r2, #0
 8000c2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d905      	bls.n	8000c42 <__udivmoddi4+0xba>
 8000c36:	b10d      	cbz	r5, 8000c3c <__udivmoddi4+0xb4>
 8000c38:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4608      	mov	r0, r1
 8000c40:	e7f5      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000c42:	fab3 f183 	clz	r1, r3
 8000c46:	2900      	cmp	r1, #0
 8000c48:	d146      	bne.n	8000cd8 <__udivmoddi4+0x150>
 8000c4a:	42a3      	cmp	r3, r4
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xcc>
 8000c4e:	4290      	cmp	r0, r2
 8000c50:	f0c0 80f0 	bcc.w	8000e34 <__udivmoddi4+0x2ac>
 8000c54:	1a86      	subs	r6, r0, r2
 8000c56:	eb64 0303 	sbc.w	r3, r4, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	2d00      	cmp	r5, #0
 8000c5e:	d0e6      	beq.n	8000c2e <__udivmoddi4+0xa6>
 8000c60:	e9c5 6300 	strd	r6, r3, [r5]
 8000c64:	e7e3      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	f040 8090 	bne.w	8000d8c <__udivmoddi4+0x204>
 8000c6c:	eba1 040c 	sub.w	r4, r1, ip
 8000c70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c74:	fa1f f78c 	uxth.w	r7, ip
 8000c78:	2101      	movs	r1, #1
 8000c7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c82:	fb08 4416 	mls	r4, r8, r6, r4
 8000c86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c8a:	fb07 f006 	mul.w	r0, r7, r6
 8000c8e:	4298      	cmp	r0, r3
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x11c>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x11a>
 8000c9c:	4298      	cmp	r0, r3
 8000c9e:	f200 80cd 	bhi.w	8000e3c <__udivmoddi4+0x2b4>
 8000ca2:	4626      	mov	r6, r4
 8000ca4:	1a1c      	subs	r4, r3, r0
 8000ca6:	fa1f f38e 	uxth.w	r3, lr
 8000caa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cae:	fb08 4410 	mls	r4, r8, r0, r4
 8000cb2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cb6:	fb00 f707 	mul.w	r7, r0, r7
 8000cba:	429f      	cmp	r7, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x148>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x146>
 8000cc8:	429f      	cmp	r7, r3
 8000cca:	f200 80b0 	bhi.w	8000e2e <__udivmoddi4+0x2a6>
 8000cce:	4620      	mov	r0, r4
 8000cd0:	1bdb      	subs	r3, r3, r7
 8000cd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd6:	e7a5      	b.n	8000c24 <__udivmoddi4+0x9c>
 8000cd8:	f1c1 0620 	rsb	r6, r1, #32
 8000cdc:	408b      	lsls	r3, r1
 8000cde:	fa22 f706 	lsr.w	r7, r2, r6
 8000ce2:	431f      	orrs	r7, r3
 8000ce4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ce8:	fa04 f301 	lsl.w	r3, r4, r1
 8000cec:	ea43 030c 	orr.w	r3, r3, ip
 8000cf0:	40f4      	lsrs	r4, r6
 8000cf2:	fa00 f801 	lsl.w	r8, r0, r1
 8000cf6:	0c38      	lsrs	r0, r7, #16
 8000cf8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000d00:	fa1f fc87 	uxth.w	ip, r7
 8000d04:	fb00 441e 	mls	r4, r0, lr, r4
 8000d08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d10:	45a1      	cmp	r9, r4
 8000d12:	fa02 f201 	lsl.w	r2, r2, r1
 8000d16:	d90a      	bls.n	8000d2e <__udivmoddi4+0x1a6>
 8000d18:	193c      	adds	r4, r7, r4
 8000d1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d1e:	f080 8084 	bcs.w	8000e2a <__udivmoddi4+0x2a2>
 8000d22:	45a1      	cmp	r9, r4
 8000d24:	f240 8081 	bls.w	8000e2a <__udivmoddi4+0x2a2>
 8000d28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d2c:	443c      	add	r4, r7
 8000d2e:	eba4 0409 	sub.w	r4, r4, r9
 8000d32:	fa1f f983 	uxth.w	r9, r3
 8000d36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d46:	45a4      	cmp	ip, r4
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x1d2>
 8000d4a:	193c      	adds	r4, r7, r4
 8000d4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d50:	d267      	bcs.n	8000e22 <__udivmoddi4+0x29a>
 8000d52:	45a4      	cmp	ip, r4
 8000d54:	d965      	bls.n	8000e22 <__udivmoddi4+0x29a>
 8000d56:	3b02      	subs	r3, #2
 8000d58:	443c      	add	r4, r7
 8000d5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000d62:	eba4 040c 	sub.w	r4, r4, ip
 8000d66:	429c      	cmp	r4, r3
 8000d68:	46ce      	mov	lr, r9
 8000d6a:	469c      	mov	ip, r3
 8000d6c:	d351      	bcc.n	8000e12 <__udivmoddi4+0x28a>
 8000d6e:	d04e      	beq.n	8000e0e <__udivmoddi4+0x286>
 8000d70:	b155      	cbz	r5, 8000d88 <__udivmoddi4+0x200>
 8000d72:	ebb8 030e 	subs.w	r3, r8, lr
 8000d76:	eb64 040c 	sbc.w	r4, r4, ip
 8000d7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d7e:	40cb      	lsrs	r3, r1
 8000d80:	431e      	orrs	r6, r3
 8000d82:	40cc      	lsrs	r4, r1
 8000d84:	e9c5 6400 	strd	r6, r4, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	e750      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000d8c:	f1c2 0320 	rsb	r3, r2, #32
 8000d90:	fa20 f103 	lsr.w	r1, r0, r3
 8000d94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d98:	fa24 f303 	lsr.w	r3, r4, r3
 8000d9c:	4094      	lsls	r4, r2
 8000d9e:	430c      	orrs	r4, r1
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da8:	fa1f f78c 	uxth.w	r7, ip
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3110 	mls	r1, r8, r0, r3
 8000db4:	0c23      	lsrs	r3, r4, #16
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f107 	mul.w	r1, r0, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x24c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dca:	d22c      	bcs.n	8000e26 <__udivmoddi4+0x29e>
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	d92a      	bls.n	8000e26 <__udivmoddi4+0x29e>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ddc:	fb08 3311 	mls	r3, r8, r1, r3
 8000de0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de4:	fb01 f307 	mul.w	r3, r1, r7
 8000de8:	42a3      	cmp	r3, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x276>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000df4:	d213      	bcs.n	8000e1e <__udivmoddi4+0x296>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d911      	bls.n	8000e1e <__udivmoddi4+0x296>
 8000dfa:	3902      	subs	r1, #2
 8000dfc:	4464      	add	r4, ip
 8000dfe:	1ae4      	subs	r4, r4, r3
 8000e00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e04:	e739      	b.n	8000c7a <__udivmoddi4+0xf2>
 8000e06:	4604      	mov	r4, r0
 8000e08:	e6f0      	b.n	8000bec <__udivmoddi4+0x64>
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e706      	b.n	8000c1c <__udivmoddi4+0x94>
 8000e0e:	45c8      	cmp	r8, r9
 8000e10:	d2ae      	bcs.n	8000d70 <__udivmoddi4+0x1e8>
 8000e12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e1a:	3801      	subs	r0, #1
 8000e1c:	e7a8      	b.n	8000d70 <__udivmoddi4+0x1e8>
 8000e1e:	4631      	mov	r1, r6
 8000e20:	e7ed      	b.n	8000dfe <__udivmoddi4+0x276>
 8000e22:	4603      	mov	r3, r0
 8000e24:	e799      	b.n	8000d5a <__udivmoddi4+0x1d2>
 8000e26:	4630      	mov	r0, r6
 8000e28:	e7d4      	b.n	8000dd4 <__udivmoddi4+0x24c>
 8000e2a:	46d6      	mov	lr, sl
 8000e2c:	e77f      	b.n	8000d2e <__udivmoddi4+0x1a6>
 8000e2e:	4463      	add	r3, ip
 8000e30:	3802      	subs	r0, #2
 8000e32:	e74d      	b.n	8000cd0 <__udivmoddi4+0x148>
 8000e34:	4606      	mov	r6, r0
 8000e36:	4623      	mov	r3, r4
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e70f      	b.n	8000c5c <__udivmoddi4+0xd4>
 8000e3c:	3e02      	subs	r6, #2
 8000e3e:	4463      	add	r3, ip
 8000e40:	e730      	b.n	8000ca4 <__udivmoddi4+0x11c>
 8000e42:	bf00      	nop

08000e44 <__aeabi_idiv0>:
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop

08000e48 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000e50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e54:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000e56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000e60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e64:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e6c:	68fb      	ldr	r3, [r7, #12]
}
 8000e6e:	bf00      	nop
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	b085      	sub	sp, #20
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e82:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e86:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e88:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000e92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2)
  {
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	////this updates the X and Y axes of my joystick
	  for(uint8_t i = 0; i<hadc1.Init.NbrOfConversion; i++){
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	73fb      	strb	r3, [r7, #15]
 8000eb8:	e00a      	b.n	8000ed0 <HAL_TIM_PeriodElapsedCallback+0x24>
		  mic = (uint16_t) rawValues[0];
 8000eba:	4b0c      	ldr	r3, [pc, #48]	@ (8000eec <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000ebc:	881a      	ldrh	r2, [r3, #0]
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000ec0:	801a      	strh	r2, [r3, #0]
		  mic2 = mic;
 8000ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000ec4:	881a      	ldrh	r2, [r3, #0]
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000ec8:	801a      	strh	r2, [r3, #0]
	  for(uint8_t i = 0; i<hadc1.Init.NbrOfConversion; i++){
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
 8000ecc:	3301      	adds	r3, #1
 8000ece:	73fb      	strb	r3, [r7, #15]
 8000ed0:	7bfa      	ldrb	r2, [r7, #15]
 8000ed2:	4b09      	ldr	r3, [pc, #36]	@ (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d3ef      	bcc.n	8000eba <HAL_TIM_PeriodElapsedCallback+0xe>
	  }
	  flag = 1;
 8000eda:	4b08      	ldr	r3, [pc, #32]	@ (8000efc <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000edc:	2201      	movs	r2, #1
 8000ede:	701a      	strb	r2, [r3, #0]
	  sprintf(msg, "X axis: %hu, Y axis: %hu \r\n", Xaxis, Yaxis);
	  status = CDC_Transmit_FS(msg, strlen((char*)msg));
	  if (status == USBD_OK) {
	  	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin); // Example: Toggle LED on success
	  }*/
  }
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	20000484 	.word	0x20000484
 8000ef0:	2000047e 	.word	0x2000047e
 8000ef4:	20000480 	.word	0x20000480
 8000ef8:	20000318 	.word	0x20000318
 8000efc:	20000488 	.word	0x20000488

08000f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f04:	f000 ff12 	bl	8001d2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f08:	f000 f88a 	bl	8001020 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f0c:	f000 f8ec 	bl	80010e8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f10:	f000 fa30 	bl	8001374 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f14:	f000 fa1c 	bl	8001350 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f18:	f000 f918 	bl	800114c <MX_ADC1_Init>
  MX_TIM2_Init();
 8000f1c:	f000 f9ca 	bl	80012b4 <MX_TIM2_Init>
  MX_USB_Device_Init();
 8000f20:	f00c feb8 	bl	800dc94 <MX_USB_Device_Init>
  MX_I2C1_Init();
 8000f24:	f000 f986 	bl	8001234 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ////This begins the process of storing our ADC readings into the DMA. The DMA can be thought of a temporary storage location.
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) rawValues, 2);
 8000f28:	2202      	movs	r2, #2
 8000f2a:	4935      	ldr	r1, [pc, #212]	@ (8001000 <main+0x100>)
 8000f2c:	4835      	ldr	r0, [pc, #212]	@ (8001004 <main+0x104>)
 8000f2e:	f001 fadb 	bl	80024e8 <HAL_ADC_Start_DMA>
    ////This begins our timer 2
  HAL_TIM_Base_Start_IT(&htim2);
 8000f32:	4835      	ldr	r0, [pc, #212]	@ (8001008 <main+0x108>)
 8000f34:	f007 fa8e 	bl	8008454 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 8000f38:	2000      	movs	r0, #0
 8000f3a:	f000 fd85 	bl	8001a48 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8000f3e:	2001      	movs	r0, #1
 8000f40:	f000 fd82 	bl	8001a48 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000f44:	2002      	movs	r0, #2
 8000f46:	f000 fd7f 	bl	8001a48 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8000f4a:	2101      	movs	r1, #1
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f000 fdcf 	bl	8001af0 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8000f52:	2101      	movs	r1, #1
 8000f54:	2001      	movs	r0, #1
 8000f56:	f000 fdcb 	bl	8001af0 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	2002      	movs	r0, #2
 8000f5e:	f000 fdc7 	bl	8001af0 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000f62:	4b2a      	ldr	r3, [pc, #168]	@ (800100c <main+0x10c>)
 8000f64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f68:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000f6a:	4b28      	ldr	r3, [pc, #160]	@ (800100c <main+0x10c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000f70:	4b26      	ldr	r3, [pc, #152]	@ (800100c <main+0x10c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000f76:	4b25      	ldr	r3, [pc, #148]	@ (800100c <main+0x10c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000f7c:	4b23      	ldr	r3, [pc, #140]	@ (800100c <main+0x10c>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000f82:	4922      	ldr	r1, [pc, #136]	@ (800100c <main+0x10c>)
 8000f84:	2000      	movs	r0, #0
 8000f86:	f000 fe23 	bl	8001bd0 <BSP_COM_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <main+0x94>
  {
    Error_Handler();
 8000f90:	f000 fa38 	bl	8001404 <Error_Handler>
  /*                                                                          ********************************************************************* */
  while (1)
  {
	  //bmi160ReadAccelGyro(&imu_t);

	  if (flag == 1){
 8000f94:	4b1e      	ldr	r3, [pc, #120]	@ (8001010 <main+0x110>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d1fb      	bne.n	8000f94 <main+0x94>
		  HAL_GPIO_WritePin(TIMING_GPIO_Port, TIMING_Pin,GPIO_PIN_SET);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fa4:	f002 ff6a 	bl	8003e7c <HAL_GPIO_WritePin>
		  if (counter == 32000){
 8000fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8001014 <main+0x114>)
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8000fb0:	d103      	bne.n	8000fba <main+0xba>
			  counter = 0;
 8000fb2:	4b18      	ldr	r3, [pc, #96]	@ (8001014 <main+0x114>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	801a      	strh	r2, [r3, #0]
 8000fb8:	e005      	b.n	8000fc6 <main+0xc6>
		  }
		  else{
			  counter++;
 8000fba:	4b16      	ldr	r3, [pc, #88]	@ (8001014 <main+0x114>)
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	4b14      	ldr	r3, [pc, #80]	@ (8001014 <main+0x114>)
 8000fc4:	801a      	strh	r2, [r3, #0]
		  }
		  prepare_data_packet_audio(counter, counter,USB_buffer,&packet_length);
 8000fc6:	4b13      	ldr	r3, [pc, #76]	@ (8001014 <main+0x114>)
 8000fc8:	8818      	ldrh	r0, [r3, #0]
 8000fca:	4b12      	ldr	r3, [pc, #72]	@ (8001014 <main+0x114>)
 8000fcc:	8819      	ldrh	r1, [r3, #0]
 8000fce:	4b12      	ldr	r3, [pc, #72]	@ (8001018 <main+0x118>)
 8000fd0:	4a12      	ldr	r2, [pc, #72]	@ (800101c <main+0x11c>)
 8000fd2:	f000 f9fa 	bl	80013ca <prepare_data_packet_audio>
		  //prepare_data_packet_audio(mic, mic2,USB_buffer,&packet_length);

		  CDC_Transmit_FS(USB_buffer, packet_length);
 8000fd6:	4b10      	ldr	r3, [pc, #64]	@ (8001018 <main+0x118>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	b29b      	uxth	r3, r3
 8000fdc:	4619      	mov	r1, r3
 8000fde:	480f      	ldr	r0, [pc, #60]	@ (800101c <main+0x11c>)
 8000fe0:	f00c ff16 	bl	800de10 <CDC_Transmit_FS>

		  BSP_LED_Toggle(LED_GREEN);
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f000 fd69 	bl	8001abc <BSP_LED_Toggle>
		  //snprintf(msg, sizeof(msg), "counter: %d \r\n", counter);
		  //CDC_Transmit_FS((uint8_t *)msg, strlen(msg));
		  HAL_GPIO_WritePin(TIMING_GPIO_Port, TIMING_Pin,GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2101      	movs	r1, #1
 8000fee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ff2:	f002 ff43 	bl	8003e7c <HAL_GPIO_WritePin>

		  flag = 0;
 8000ff6:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <main+0x110>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
	  if (flag == 1){
 8000ffc:	e7ca      	b.n	8000f94 <main+0x94>
 8000ffe:	bf00      	nop
 8001000:	20000484 	.word	0x20000484
 8001004:	20000318 	.word	0x20000318
 8001008:	20000430 	.word	0x20000430
 800100c:	20000308 	.word	0x20000308
 8001010:	20000488 	.word	0x20000488
 8001014:	2000047c 	.word	0x2000047c
 8001018:	200004ac 	.word	0x200004ac
 800101c:	2000048c 	.word	0x2000048c

08001020 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b09a      	sub	sp, #104	@ 0x68
 8001024:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001026:	f107 0320 	add.w	r3, r7, #32
 800102a:	2248      	movs	r2, #72	@ 0x48
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f00e f8e9 	bl	800f206 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]
 8001042:	615a      	str	r2, [r3, #20]
 8001044:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001046:	4b27      	ldr	r3, [pc, #156]	@ (80010e4 <SystemClock_Config+0xc4>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800104e:	4a25      	ldr	r2, [pc, #148]	@ (80010e4 <SystemClock_Config+0xc4>)
 8001050:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001054:	6013      	str	r3, [r2, #0]
 8001056:	4b23      	ldr	r3, [pc, #140]	@ (80010e4 <SystemClock_Config+0xc4>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001062:	2303      	movs	r3, #3
 8001064:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001066:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800106a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800106c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001070:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001072:	2340      	movs	r3, #64	@ 0x40
 8001074:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001076:	2302      	movs	r3, #2
 8001078:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800107a:	2303      	movs	r3, #3
 800107c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800107e:	2310      	movs	r3, #16
 8001080:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001082:	2308      	movs	r3, #8
 8001084:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001086:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800108a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800108c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001090:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001092:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001096:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001098:	f107 0320 	add.w	r3, r7, #32
 800109c:	4618      	mov	r0, r3
 800109e:	f005 ff49 	bl	8006f34 <HAL_RCC_OscConfig>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80010a8:	f000 f9ac 	bl	8001404 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80010ac:	236f      	movs	r3, #111	@ 0x6f
 80010ae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010b0:	2303      	movs	r3, #3
 80010b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80010c0:	2380      	movs	r3, #128	@ 0x80
 80010c2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80010c8:	1d3b      	adds	r3, r7, #4
 80010ca:	2103      	movs	r1, #3
 80010cc:	4618      	mov	r0, r3
 80010ce:	f006 faa5 	bl	800761c <HAL_RCC_ClockConfig>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80010d8:	f000 f994 	bl	8001404 <Error_Handler>
  }
}
 80010dc:	bf00      	nop
 80010de:	3768      	adds	r7, #104	@ 0x68
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	58000400 	.word	0x58000400

080010e8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b094      	sub	sp, #80	@ 0x50
 80010ec:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010ee:	463b      	mov	r3, r7
 80010f0:	2250      	movs	r2, #80	@ 0x50
 80010f2:	2100      	movs	r1, #0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f00e f886 	bl	800f206 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 80010fa:	f44f 5314 	mov.w	r3, #9472	@ 0x2500
 80010fe:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8001100:	2306      	movs	r3, #6
 8001102:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001104:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001108:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800110a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800110e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8001110:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001114:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8001116:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 800111a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800111c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001120:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001122:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001126:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001128:	2300      	movs	r3, #0
 800112a:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800112c:	2300      	movs	r3, #0
 800112e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001130:	463b      	mov	r3, r7
 8001132:	4618      	mov	r0, r3
 8001134:	f006 feaf 	bl	8007e96 <HAL_RCCEx_PeriphCLKConfig>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 800113e:	f000 f961 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001142:	bf00      	nop
 8001144:	3750      	adds	r7, #80	@ 0x50
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001152:	463b      	mov	r3, r7
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
 8001160:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001162:	4b30      	ldr	r3, [pc, #192]	@ (8001224 <MX_ADC1_Init+0xd8>)
 8001164:	4a30      	ldr	r2, [pc, #192]	@ (8001228 <MX_ADC1_Init+0xdc>)
 8001166:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8001168:	4b2e      	ldr	r3, [pc, #184]	@ (8001224 <MX_ADC1_Init+0xd8>)
 800116a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800116e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001170:	4b2c      	ldr	r3, [pc, #176]	@ (8001224 <MX_ADC1_Init+0xd8>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001176:	4b2b      	ldr	r3, [pc, #172]	@ (8001224 <MX_ADC1_Init+0xd8>)
 8001178:	2200      	movs	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800117c:	4b29      	ldr	r3, [pc, #164]	@ (8001224 <MX_ADC1_Init+0xd8>)
 800117e:	2201      	movs	r2, #1
 8001180:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001182:	4b28      	ldr	r3, [pc, #160]	@ (8001224 <MX_ADC1_Init+0xd8>)
 8001184:	2204      	movs	r2, #4
 8001186:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001188:	4b26      	ldr	r3, [pc, #152]	@ (8001224 <MX_ADC1_Init+0xd8>)
 800118a:	2200      	movs	r2, #0
 800118c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800118e:	4b25      	ldr	r3, [pc, #148]	@ (8001224 <MX_ADC1_Init+0xd8>)
 8001190:	2201      	movs	r2, #1
 8001192:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8001194:	4b23      	ldr	r3, [pc, #140]	@ (8001224 <MX_ADC1_Init+0xd8>)
 8001196:	2202      	movs	r2, #2
 8001198:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800119a:	4b22      	ldr	r3, [pc, #136]	@ (8001224 <MX_ADC1_Init+0xd8>)
 800119c:	2200      	movs	r2, #0
 800119e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011a2:	4b20      	ldr	r3, [pc, #128]	@ (8001224 <MX_ADC1_Init+0xd8>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001224 <MX_ADC1_Init+0xd8>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001224 <MX_ADC1_Init+0xd8>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001224 <MX_ADC1_Init+0xd8>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011bc:	4b19      	ldr	r3, [pc, #100]	@ (8001224 <MX_ADC1_Init+0xd8>)
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011c4:	4817      	ldr	r0, [pc, #92]	@ (8001224 <MX_ADC1_Init+0xd8>)
 80011c6:	f001 f843 	bl	8002250 <HAL_ADC_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80011d0:	f000 f918 	bl	8001404 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011d4:	4b15      	ldr	r3, [pc, #84]	@ (800122c <MX_ADC1_Init+0xe0>)
 80011d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011d8:	2306      	movs	r3, #6
 80011da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80011dc:	2306      	movs	r3, #6
 80011de:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011e0:	237f      	movs	r3, #127	@ 0x7f
 80011e2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011e4:	2304      	movs	r3, #4
 80011e6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ec:	463b      	mov	r3, r7
 80011ee:	4619      	mov	r1, r3
 80011f0:	480c      	ldr	r0, [pc, #48]	@ (8001224 <MX_ADC1_Init+0xd8>)
 80011f2:	f001 fbdb 	bl	80029ac <HAL_ADC_ConfigChannel>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80011fc:	f000 f902 	bl	8001404 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001200:	4b0b      	ldr	r3, [pc, #44]	@ (8001230 <MX_ADC1_Init+0xe4>)
 8001202:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001204:	230c      	movs	r3, #12
 8001206:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001208:	463b      	mov	r3, r7
 800120a:	4619      	mov	r1, r3
 800120c:	4805      	ldr	r0, [pc, #20]	@ (8001224 <MX_ADC1_Init+0xd8>)
 800120e:	f001 fbcd 	bl	80029ac <HAL_ADC_ConfigChannel>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8001218:	f000 f8f4 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	3718      	adds	r7, #24
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000318 	.word	0x20000318
 8001228:	50040000 	.word	0x50040000
 800122c:	04300002 	.word	0x04300002
 8001230:	08600004 	.word	0x08600004

08001234 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001238:	4b1b      	ldr	r3, [pc, #108]	@ (80012a8 <MX_I2C1_Init+0x74>)
 800123a:	4a1c      	ldr	r2, [pc, #112]	@ (80012ac <MX_I2C1_Init+0x78>)
 800123c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 800123e:	4b1a      	ldr	r3, [pc, #104]	@ (80012a8 <MX_I2C1_Init+0x74>)
 8001240:	4a1b      	ldr	r2, [pc, #108]	@ (80012b0 <MX_I2C1_Init+0x7c>)
 8001242:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001244:	4b18      	ldr	r3, [pc, #96]	@ (80012a8 <MX_I2C1_Init+0x74>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800124a:	4b17      	ldr	r3, [pc, #92]	@ (80012a8 <MX_I2C1_Init+0x74>)
 800124c:	2201      	movs	r2, #1
 800124e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001250:	4b15      	ldr	r3, [pc, #84]	@ (80012a8 <MX_I2C1_Init+0x74>)
 8001252:	2200      	movs	r2, #0
 8001254:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001256:	4b14      	ldr	r3, [pc, #80]	@ (80012a8 <MX_I2C1_Init+0x74>)
 8001258:	2200      	movs	r2, #0
 800125a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800125c:	4b12      	ldr	r3, [pc, #72]	@ (80012a8 <MX_I2C1_Init+0x74>)
 800125e:	2200      	movs	r2, #0
 8001260:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001262:	4b11      	ldr	r3, [pc, #68]	@ (80012a8 <MX_I2C1_Init+0x74>)
 8001264:	2200      	movs	r2, #0
 8001266:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001268:	4b0f      	ldr	r3, [pc, #60]	@ (80012a8 <MX_I2C1_Init+0x74>)
 800126a:	2200      	movs	r2, #0
 800126c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800126e:	480e      	ldr	r0, [pc, #56]	@ (80012a8 <MX_I2C1_Init+0x74>)
 8001270:	f002 fe59 	bl	8003f26 <HAL_I2C_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800127a:	f000 f8c3 	bl	8001404 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800127e:	2100      	movs	r1, #0
 8001280:	4809      	ldr	r0, [pc, #36]	@ (80012a8 <MX_I2C1_Init+0x74>)
 8001282:	f003 fce8 	bl	8004c56 <HAL_I2CEx_ConfigAnalogFilter>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800128c:	f000 f8ba 	bl	8001404 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001290:	2100      	movs	r1, #0
 8001292:	4805      	ldr	r0, [pc, #20]	@ (80012a8 <MX_I2C1_Init+0x74>)
 8001294:	f003 fd2a 	bl	8004cec <HAL_I2CEx_ConfigDigitalFilter>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800129e:	f000 f8b1 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200003dc 	.word	0x200003dc
 80012ac:	40005400 	.word	0x40005400
 80012b0:	10b17db5 	.word	0x10b17db5

080012b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b088      	sub	sp, #32
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ba:	f107 0310 	add.w	r3, r7, #16
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001348 <MX_TIM2_Init+0x94>)
 80012d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 80012da:	4b1b      	ldr	r3, [pc, #108]	@ (8001348 <MX_TIM2_Init+0x94>)
 80012dc:	220a      	movs	r2, #10
 80012de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e0:	4b19      	ldr	r3, [pc, #100]	@ (8001348 <MX_TIM2_Init+0x94>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 256000-1;
 80012e6:	4b18      	ldr	r3, [pc, #96]	@ (8001348 <MX_TIM2_Init+0x94>)
 80012e8:	4a18      	ldr	r2, [pc, #96]	@ (800134c <MX_TIM2_Init+0x98>)
 80012ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ec:	4b16      	ldr	r3, [pc, #88]	@ (8001348 <MX_TIM2_Init+0x94>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012f2:	4b15      	ldr	r3, [pc, #84]	@ (8001348 <MX_TIM2_Init+0x94>)
 80012f4:	2280      	movs	r2, #128	@ 0x80
 80012f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012f8:	4813      	ldr	r0, [pc, #76]	@ (8001348 <MX_TIM2_Init+0x94>)
 80012fa:	f007 f853 	bl	80083a4 <HAL_TIM_Base_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001304:	f000 f87e 	bl	8001404 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001308:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800130c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	4619      	mov	r1, r3
 8001314:	480c      	ldr	r0, [pc, #48]	@ (8001348 <MX_TIM2_Init+0x94>)
 8001316:	f007 f9f2 	bl	80086fe <HAL_TIM_ConfigClockSource>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001320:	f000 f870 	bl	8001404 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001324:	2320      	movs	r3, #32
 8001326:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	4619      	mov	r1, r3
 8001330:	4805      	ldr	r0, [pc, #20]	@ (8001348 <MX_TIM2_Init+0x94>)
 8001332:	f007 fbe1 	bl	8008af8 <HAL_TIMEx_MasterConfigSynchronization>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800133c:	f000 f862 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	3720      	adds	r7, #32
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000430 	.word	0x20000430
 800134c:	0003e7ff 	.word	0x0003e7ff

08001350 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001354:	2004      	movs	r0, #4
 8001356:	f7ff fd77 	bl	8000e48 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800135a:	2001      	movs	r0, #1
 800135c:	f7ff fd74 	bl	8000e48 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001360:	2200      	movs	r2, #0
 8001362:	2100      	movs	r1, #0
 8001364:	200b      	movs	r0, #11
 8001366:	f002 f902 	bl	800356e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800136a:	200b      	movs	r0, #11
 800136c:	f002 f919 	bl	80035a2 <HAL_NVIC_EnableIRQ>

}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}

08001374 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001388:	2004      	movs	r0, #4
 800138a:	f7ff fd76 	bl	8000e7a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800138e:	2002      	movs	r0, #2
 8001390:	f7ff fd73 	bl	8000e7a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001394:	2001      	movs	r0, #1
 8001396:	f7ff fd70 	bl	8000e7a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TIMING_GPIO_Port, TIMING_Pin, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	2101      	movs	r1, #1
 800139e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013a2:	f002 fd6b 	bl	8003e7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TIMING_Pin */
  GPIO_InitStruct.Pin = TIMING_Pin;
 80013a6:	2301      	movs	r3, #1
 80013a8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80013b2:	2301      	movs	r3, #1
 80013b4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(TIMING_GPIO_Port, &GPIO_InitStruct);
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	4619      	mov	r1, r3
 80013ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013be:	f002 fbed 	bl	8003b9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013c2:	bf00      	nop
 80013c4:	3718      	adds	r7, #24
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <prepare_data_packet_audio>:
    buffer[1 + 2 * sizeof(float) * 3 + sizeof(uint16_t)] = (uint16_t)var2;*/

    // Set the total length of the packet
    *length = 1 + 2 * sizeof(float) * 3 + 2*sizeof(uint16_t);
}
void prepare_data_packet_audio(uint16_t var1, uint16_t var2, uint8_t *buffer, size_t *length) {
 80013ca:	b480      	push	{r7}
 80013cc:	b085      	sub	sp, #20
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	60ba      	str	r2, [r7, #8]
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	4603      	mov	r3, r0
 80013d6:	81fb      	strh	r3, [r7, #14]
 80013d8:	460b      	mov	r3, r1
 80013da:	81bb      	strh	r3, [r7, #12]
    // Define the start byte
    buffer[0] = (uint8_t)-128;
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	2280      	movs	r2, #128	@ 0x80
 80013e0:	701a      	strb	r2, [r3, #0]
    memcpy(&buffer[1], &var1, sizeof(uint16_t));
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	3301      	adds	r3, #1
 80013e6:	89fa      	ldrh	r2, [r7, #14]
 80013e8:	801a      	strh	r2, [r3, #0]
    memcpy(&buffer[1 + sizeof(uint16_t)], &var2, sizeof(uint16_t));
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	3303      	adds	r3, #3
 80013ee:	89ba      	ldrh	r2, [r7, #12]
 80013f0:	801a      	strh	r2, [r3, #0]

    // Set the total length of the packet
    *length = 1 + 2*sizeof(uint16_t);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2205      	movs	r2, #5
 80013f6:	601a      	str	r2, [r3, #0]
}
 80013f8:	bf00      	nop
 80013fa:	3714      	adds	r7, #20
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001408:	b672      	cpsid	i
}
 800140a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <Error_Handler+0x8>

08001410 <LL_AHB2_GRP1_EnableClock>:
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001418:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800141c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800141e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4313      	orrs	r3, r2
 8001426:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001428:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800142c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4013      	ands	r3, r2
 8001432:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001434:	68fb      	ldr	r3, [r7, #12]
}
 8001436:	bf00      	nop
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001442:	b480      	push	{r7}
 8001444:	b085      	sub	sp, #20
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800144a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800144e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001450:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4313      	orrs	r3, r2
 8001458:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800145a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800145e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4013      	ands	r3, r2
 8001464:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001466:	68fb      	ldr	r3, [r7, #12]
}
 8001468:	bf00      	nop
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
	...

08001484 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b088      	sub	sp, #32
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 030c 	add.w	r3, r7, #12
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a26      	ldr	r2, [pc, #152]	@ (800153c <HAL_ADC_MspInit+0xb8>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d145      	bne.n	8001532 <HAL_ADC_MspInit+0xae>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80014a6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80014aa:	f7ff ffb1 	bl	8001410 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ae:	2004      	movs	r0, #4
 80014b0:	f7ff ffae 	bl	8001410 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014b4:	2303      	movs	r3, #3
 80014b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014b8:	2303      	movs	r3, #3
 80014ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c0:	f107 030c 	add.w	r3, r7, #12
 80014c4:	4619      	mov	r1, r3
 80014c6:	481e      	ldr	r0, [pc, #120]	@ (8001540 <HAL_ADC_MspInit+0xbc>)
 80014c8:	f002 fb68 	bl	8003b9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80014cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001544 <HAL_ADC_MspInit+0xc0>)
 80014ce:	4a1e      	ldr	r2, [pc, #120]	@ (8001548 <HAL_ADC_MspInit+0xc4>)
 80014d0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80014d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001544 <HAL_ADC_MspInit+0xc0>)
 80014d4:	2205      	movs	r2, #5
 80014d6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001544 <HAL_ADC_MspInit+0xc0>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014de:	4b19      	ldr	r3, [pc, #100]	@ (8001544 <HAL_ADC_MspInit+0xc0>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014e4:	4b17      	ldr	r3, [pc, #92]	@ (8001544 <HAL_ADC_MspInit+0xc0>)
 80014e6:	2280      	movs	r2, #128	@ 0x80
 80014e8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014ea:	4b16      	ldr	r3, [pc, #88]	@ (8001544 <HAL_ADC_MspInit+0xc0>)
 80014ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014f0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014f2:	4b14      	ldr	r3, [pc, #80]	@ (8001544 <HAL_ADC_MspInit+0xc0>)
 80014f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014f8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014fa:	4b12      	ldr	r3, [pc, #72]	@ (8001544 <HAL_ADC_MspInit+0xc0>)
 80014fc:	2220      	movs	r2, #32
 80014fe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001500:	4b10      	ldr	r3, [pc, #64]	@ (8001544 <HAL_ADC_MspInit+0xc0>)
 8001502:	2200      	movs	r2, #0
 8001504:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001506:	480f      	ldr	r0, [pc, #60]	@ (8001544 <HAL_ADC_MspInit+0xc0>)
 8001508:	f002 f866 	bl	80035d8 <HAL_DMA_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_ADC_MspInit+0x92>
    {
      Error_Handler();
 8001512:	f7ff ff77 	bl	8001404 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a0a      	ldr	r2, [pc, #40]	@ (8001544 <HAL_ADC_MspInit+0xc0>)
 800151a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800151c:	4a09      	ldr	r2, [pc, #36]	@ (8001544 <HAL_ADC_MspInit+0xc0>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 2, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	2102      	movs	r1, #2
 8001526:	2012      	movs	r0, #18
 8001528:	f002 f821 	bl	800356e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800152c:	2012      	movs	r0, #18
 800152e:	f002 f838 	bl	80035a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001532:	bf00      	nop
 8001534:	3720      	adds	r7, #32
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	50040000 	.word	0x50040000
 8001540:	48000800 	.word	0x48000800
 8001544:	2000037c 	.word	0x2000037c
 8001548:	40020008 	.word	0x40020008

0800154c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b09c      	sub	sp, #112	@ 0x70
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001558:	2200      	movs	r2, #0
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	605a      	str	r2, [r3, #4]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	60da      	str	r2, [r3, #12]
 8001562:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001564:	f107 030c 	add.w	r3, r7, #12
 8001568:	2250      	movs	r2, #80	@ 0x50
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f00d fe4a 	bl	800f206 <memset>
  if(hi2c->Instance==I2C1)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a1f      	ldr	r2, [pc, #124]	@ (80015f4 <HAL_I2C_MspInit+0xa8>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d136      	bne.n	80015ea <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800157c:	2304      	movs	r3, #4
 800157e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001580:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8001584:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001586:	f107 030c 	add.w	r3, r7, #12
 800158a:	4618      	mov	r0, r3
 800158c:	f006 fc83 	bl	8007e96 <HAL_RCCEx_PeriphCLKConfig>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001596:	f7ff ff35 	bl	8001404 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800159a:	2002      	movs	r0, #2
 800159c:	f7ff ff38 	bl	8001410 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015a0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015a6:	2312      	movs	r3, #18
 80015a8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ae:	2300      	movs	r3, #0
 80015b0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015b2:	2304      	movs	r3, #4
 80015b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80015ba:	4619      	mov	r1, r3
 80015bc:	480e      	ldr	r0, [pc, #56]	@ (80015f8 <HAL_I2C_MspInit+0xac>)
 80015be:	f002 faed 	bl	8003b9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015c2:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80015c6:	f7ff ff3c 	bl	8001442 <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2100      	movs	r1, #0
 80015ce:	201e      	movs	r0, #30
 80015d0:	f001 ffcd 	bl	800356e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80015d4:	201e      	movs	r0, #30
 80015d6:	f001 ffe4 	bl	80035a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80015da:	2200      	movs	r2, #0
 80015dc:	2100      	movs	r1, #0
 80015de:	201f      	movs	r0, #31
 80015e0:	f001 ffc5 	bl	800356e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80015e4:	201f      	movs	r0, #31
 80015e6:	f001 ffdc 	bl	80035a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80015ea:	bf00      	nop
 80015ec:	3770      	adds	r7, #112	@ 0x70
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40005400 	.word	0x40005400
 80015f8:	48000400 	.word	0x48000400

080015fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800160c:	d10a      	bne.n	8001624 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800160e:	2001      	movs	r0, #1
 8001610:	f7ff ff17 	bl	8001442 <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001614:	2200      	movs	r2, #0
 8001616:	2100      	movs	r1, #0
 8001618:	201c      	movs	r0, #28
 800161a:	f001 ffa8 	bl	800356e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800161e:	201c      	movs	r0, #28
 8001620:	f001 ffbf 	bl	80035a2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <NMI_Handler+0x4>

08001634 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <HardFault_Handler+0x4>

0800163c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <MemManage_Handler+0x4>

08001644 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <BusFault_Handler+0x4>

0800164c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <UsageFault_Handler+0x4>

08001654 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001682:	f000 fbad 	bl	8001de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}

0800168a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 800168e:	2001      	movs	r0, #1
 8001690:	f002 fc26 	bl	8003ee0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}

08001698 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 800169c:	2002      	movs	r0, #2
 800169e:	f002 fc1f 	bl	8003ee0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 80016aa:	2010      	movs	r0, #16
 80016ac:	f002 fc18 	bl	8003ee0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016b8:	4802      	ldr	r0, [pc, #8]	@ (80016c4 <DMA1_Channel1_IRQHandler+0x10>)
 80016ba:	f002 f90f 	bl	80038dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	2000037c 	.word	0x2000037c

080016c8 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80016cc:	4802      	ldr	r0, [pc, #8]	@ (80016d8 <ADC1_IRQHandler+0x10>)
 80016ce:	f000 ff8f 	bl	80025f0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000318 	.word	0x20000318

080016dc <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt.
  */
void USB_HP_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80016e0:	4802      	ldr	r0, [pc, #8]	@ (80016ec <USB_HP_IRQHandler+0x10>)
 80016e2:	f003 fc3f 	bl	8004f64 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20001a30 	.word	0x20001a30

080016f0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80016f4:	4802      	ldr	r0, [pc, #8]	@ (8001700 <USB_LP_IRQHandler+0x10>)
 80016f6:	f003 fc35 	bl	8004f64 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20001a30 	.word	0x20001a30

08001704 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001708:	4802      	ldr	r0, [pc, #8]	@ (8001714 <TIM2_IRQHandler+0x10>)
 800170a:	f006 fef1 	bl	80084f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000430 	.word	0x20000430

08001718 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800171c:	4802      	ldr	r0, [pc, #8]	@ (8001728 <I2C1_EV_IRQHandler+0x10>)
 800171e:	f002 fc9d 	bl	800405c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	200003dc 	.word	0x200003dc

0800172c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001730:	4802      	ldr	r0, [pc, #8]	@ (800173c <I2C1_ER_IRQHandler+0x10>)
 8001732:	f002 fcad 	bl	8004090 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	200003dc 	.word	0x200003dc

08001740 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  return 1;
 8001744:	2301      	movs	r3, #1
}
 8001746:	4618      	mov	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <_kill>:

int _kill(int pid, int sig)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800175a:	f00d fda7 	bl	800f2ac <__errno>
 800175e:	4603      	mov	r3, r0
 8001760:	2216      	movs	r2, #22
 8001762:	601a      	str	r2, [r3, #0]
  return -1;
 8001764:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001768:	4618      	mov	r0, r3
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <_exit>:

void _exit (int status)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001778:	f04f 31ff 	mov.w	r1, #4294967295
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ffe7 	bl	8001750 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001782:	bf00      	nop
 8001784:	e7fd      	b.n	8001782 <_exit+0x12>

08001786 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b086      	sub	sp, #24
 800178a:	af00      	add	r7, sp, #0
 800178c:	60f8      	str	r0, [r7, #12]
 800178e:	60b9      	str	r1, [r7, #8]
 8001790:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	e00a      	b.n	80017ae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001798:	f3af 8000 	nop.w
 800179c:	4601      	mov	r1, r0
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	1c5a      	adds	r2, r3, #1
 80017a2:	60ba      	str	r2, [r7, #8]
 80017a4:	b2ca      	uxtb	r2, r1
 80017a6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	3301      	adds	r3, #1
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	429a      	cmp	r2, r3
 80017b4:	dbf0      	blt.n	8001798 <_read+0x12>
  }

  return len;
 80017b6:	687b      	ldr	r3, [r7, #4]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3718      	adds	r7, #24
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	e009      	b.n	80017e6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	1c5a      	adds	r2, r3, #1
 80017d6:	60ba      	str	r2, [r7, #8]
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 fa5a 	bl	8001c94 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	3301      	adds	r3, #1
 80017e4:	617b      	str	r3, [r7, #20]
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	dbf1      	blt.n	80017d2 <_write+0x12>
  }
  return len;
 80017ee:	687b      	ldr	r3, [r7, #4]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <_close>:

int _close(int file)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001800:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001804:	4618      	mov	r0, r3
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001820:	605a      	str	r2, [r3, #4]
  return 0;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <_isatty>:

int _isatty(int file)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001838:	2301      	movs	r3, #1
}
 800183a:	4618      	mov	r0, r3
 800183c:	370c      	adds	r7, #12
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001846:	b480      	push	{r7}
 8001848:	b085      	sub	sp, #20
 800184a:	af00      	add	r7, sp, #0
 800184c:	60f8      	str	r0, [r7, #12]
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001852:	2300      	movs	r3, #0
}
 8001854:	4618      	mov	r0, r3
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001868:	4a14      	ldr	r2, [pc, #80]	@ (80018bc <_sbrk+0x5c>)
 800186a:	4b15      	ldr	r3, [pc, #84]	@ (80018c0 <_sbrk+0x60>)
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001874:	4b13      	ldr	r3, [pc, #76]	@ (80018c4 <_sbrk+0x64>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d102      	bne.n	8001882 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800187c:	4b11      	ldr	r3, [pc, #68]	@ (80018c4 <_sbrk+0x64>)
 800187e:	4a12      	ldr	r2, [pc, #72]	@ (80018c8 <_sbrk+0x68>)
 8001880:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001882:	4b10      	ldr	r3, [pc, #64]	@ (80018c4 <_sbrk+0x64>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	429a      	cmp	r2, r3
 800188e:	d207      	bcs.n	80018a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001890:	f00d fd0c 	bl	800f2ac <__errno>
 8001894:	4603      	mov	r3, r0
 8001896:	220c      	movs	r2, #12
 8001898:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800189a:	f04f 33ff 	mov.w	r3, #4294967295
 800189e:	e009      	b.n	80018b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018a0:	4b08      	ldr	r3, [pc, #32]	@ (80018c4 <_sbrk+0x64>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018a6:	4b07      	ldr	r3, [pc, #28]	@ (80018c4 <_sbrk+0x64>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4413      	add	r3, r2
 80018ae:	4a05      	ldr	r2, [pc, #20]	@ (80018c4 <_sbrk+0x64>)
 80018b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018b2:	68fb      	ldr	r3, [r7, #12]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20030000 	.word	0x20030000
 80018c0:	00000400 	.word	0x00000400
 80018c4:	200004b0 	.word	0x200004b0
 80018c8:	20002078 	.word	0x20002078

080018cc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80018d0:	4b24      	ldr	r3, [pc, #144]	@ (8001964 <SystemInit+0x98>)
 80018d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018d6:	4a23      	ldr	r2, [pc, #140]	@ (8001964 <SystemInit+0x98>)
 80018d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80018e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80018f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018f4:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80018f8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80018fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001904:	4b18      	ldr	r3, [pc, #96]	@ (8001968 <SystemInit+0x9c>)
 8001906:	4013      	ands	r3, r2
 8001908:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800190a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800190e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001912:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001916:	f023 0305 	bic.w	r3, r3, #5
 800191a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800191e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001922:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001926:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800192a:	f023 0301 	bic.w	r3, r3, #1
 800192e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001932:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001936:	4a0d      	ldr	r2, [pc, #52]	@ (800196c <SystemInit+0xa0>)
 8001938:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800193a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800193e:	4a0b      	ldr	r2, [pc, #44]	@ (800196c <SystemInit+0xa0>)
 8001940:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001942:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800194c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001950:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001952:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001956:	2200      	movs	r2, #0
 8001958:	619a      	str	r2, [r3, #24]
}
 800195a:	bf00      	nop
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	e000ed00 	.word	0xe000ed00
 8001968:	faf6fefb 	.word	0xfaf6fefb
 800196c:	22041000 	.word	0x22041000

08001970 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001970:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001972:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001974:	3304      	adds	r3, #4

08001976 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001976:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001978:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800197a:	d3f9      	bcc.n	8001970 <CopyDataInit>
  bx lr
 800197c:	4770      	bx	lr

0800197e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800197e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001980:	3004      	adds	r0, #4

08001982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001982:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001984:	d3fb      	bcc.n	800197e <FillZerobss>
  bx lr
 8001986:	4770      	bx	lr

08001988 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001988:	480c      	ldr	r0, [pc, #48]	@ (80019bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800198a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800198c:	f7ff ff9e 	bl	80018cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001990:	480b      	ldr	r0, [pc, #44]	@ (80019c0 <LoopForever+0x6>)
 8001992:	490c      	ldr	r1, [pc, #48]	@ (80019c4 <LoopForever+0xa>)
 8001994:	4a0c      	ldr	r2, [pc, #48]	@ (80019c8 <LoopForever+0xe>)
 8001996:	2300      	movs	r3, #0
 8001998:	f7ff ffed 	bl	8001976 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800199c:	480b      	ldr	r0, [pc, #44]	@ (80019cc <LoopForever+0x12>)
 800199e:	490c      	ldr	r1, [pc, #48]	@ (80019d0 <LoopForever+0x16>)
 80019a0:	4a0c      	ldr	r2, [pc, #48]	@ (80019d4 <LoopForever+0x1a>)
 80019a2:	2300      	movs	r3, #0
 80019a4:	f7ff ffe7 	bl	8001976 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80019a8:	480b      	ldr	r0, [pc, #44]	@ (80019d8 <LoopForever+0x1e>)
 80019aa:	490c      	ldr	r1, [pc, #48]	@ (80019dc <LoopForever+0x22>)
 80019ac:	2300      	movs	r3, #0
 80019ae:	f7ff ffe8 	bl	8001982 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80019b2:	f00d fc81 	bl	800f2b8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80019b6:	f7ff faa3 	bl	8000f00 <main>

080019ba <LoopForever>:

LoopForever:
  b LoopForever
 80019ba:	e7fe      	b.n	80019ba <LoopForever>
  ldr   r0, =_estack
 80019bc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80019c0:	20000008 	.word	0x20000008
 80019c4:	200002ec 	.word	0x200002ec
 80019c8:	080115c8 	.word	0x080115c8
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80019cc:	20030000 	.word	0x20030000
 80019d0:	20030000 	.word	0x20030000
 80019d4:	080118ac 	.word	0x080118ac
  INIT_BSS _sbss, _ebss
 80019d8:	200002ec 	.word	0x200002ec
 80019dc:	20002078 	.word	0x20002078

080019e0 <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019e0:	e7fe      	b.n	80019e0 <AES1_IRQHandler>

080019e2 <LL_AHB2_GRP1_EnableClock>:
{
 80019e2:	b480      	push	{r7}
 80019e4:	b085      	sub	sp, #20
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80019ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80019f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80019fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4013      	ands	r3, r2
 8001a04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a06:	68fb      	ldr	r3, [r7, #12]
}
 8001a08:	bf00      	nop
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001a1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a20:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001a2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a30:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4013      	ands	r3, r2
 8001a36:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a38:	68fb      	ldr	r3, [r7, #12]
}
 8001a3a:	bf00      	nop
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
	...

08001a48 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8001a52:	f107 030c 	add.w	r3, r7, #12
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]
 8001a5e:	60da      	str	r2, [r3, #12]
 8001a60:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001a62:	2002      	movs	r0, #2
 8001a64:	f7ff ffbd 	bl	80019e2 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	4a12      	ldr	r2, [pc, #72]	@ (8001ab4 <BSP_LED_Init+0x6c>)
 8001a6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a70:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a72:	2301      	movs	r3, #1
 8001a74:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab8 <BSP_LED_Init+0x70>)
 8001a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a86:	f107 020c 	add.w	r2, r7, #12
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f002 f885 	bl	8003b9c <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	4a08      	ldr	r2, [pc, #32]	@ (8001ab8 <BSP_LED_Init+0x70>)
 8001a96:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	4a05      	ldr	r2, [pc, #20]	@ (8001ab4 <BSP_LED_Init+0x6c>)
 8001a9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	f002 f9e9 	bl	8003e7c <HAL_GPIO_WritePin>
}
 8001aaa:	bf00      	nop
 8001aac:	3720      	adds	r7, #32
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	0801121c 	.word	0x0801121c
 8001ab8:	2000000c 	.word	0x2000000c

08001abc <BSP_LED_Toggle>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	4a07      	ldr	r2, [pc, #28]	@ (8001ae8 <BSP_LED_Toggle+0x2c>)
 8001aca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	4906      	ldr	r1, [pc, #24]	@ (8001aec <BSP_LED_Toggle+0x30>)
 8001ad2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4610      	mov	r0, r2
 8001ada:	f002 f9e7 	bl	8003eac <HAL_GPIO_TogglePin>
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	2000000c 	.word	0x2000000c
 8001aec:	0801121c 	.word	0x0801121c

08001af0 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b088      	sub	sp, #32
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	460a      	mov	r2, r1
 8001afa:	71fb      	strb	r3, [r7, #7]
 8001afc:	4613      	mov	r3, r2
 8001afe:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8001b00:	f107 030c 	add.w	r3, r7, #12
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d103      	bne.n	8001b1e <BSP_PB_Init+0x2e>
 8001b16:	2004      	movs	r0, #4
 8001b18:	f7ff ff63 	bl	80019e2 <LL_AHB2_GRP1_EnableClock>
 8001b1c:	e00c      	b.n	8001b38 <BSP_PB_Init+0x48>
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d103      	bne.n	8001b2c <BSP_PB_Init+0x3c>
 8001b24:	2008      	movs	r0, #8
 8001b26:	f7ff ff5c 	bl	80019e2 <LL_AHB2_GRP1_EnableClock>
 8001b2a:	e005      	b.n	8001b38 <BSP_PB_Init+0x48>
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d102      	bne.n	8001b38 <BSP_PB_Init+0x48>
 8001b32:	2008      	movs	r0, #8
 8001b34:	f7ff ff55 	bl	80019e2 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8001b38:	79bb      	ldrb	r3, [r7, #6]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d117      	bne.n	8001b6e <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	4a20      	ldr	r2, [pc, #128]	@ (8001bc4 <BSP_PB_Init+0xd4>)
 8001b42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b46:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b50:	2302      	movs	r3, #2
 8001b52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	4a1c      	ldr	r2, [pc, #112]	@ (8001bc8 <BSP_PB_Init+0xd8>)
 8001b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b5c:	f107 020c 	add.w	r2, r7, #12
 8001b60:	4611      	mov	r1, r2
 8001b62:	4618      	mov	r0, r3
 8001b64:	f002 f81a 	bl	8003b9c <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8001b68:	2001      	movs	r0, #1
 8001b6a:	f000 f965 	bl	8001e38 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8001b6e:	79bb      	ldrb	r3, [r7, #6]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d123      	bne.n	8001bbc <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	4a13      	ldr	r2, [pc, #76]	@ (8001bc4 <BSP_PB_Init+0xd4>)
 8001b78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b7c:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8001b82:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001b86:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8001b88:	79fb      	ldrb	r3, [r7, #7]
 8001b8a:	4a0f      	ldr	r2, [pc, #60]	@ (8001bc8 <BSP_PB_Init+0xd8>)
 8001b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b90:	f107 020c 	add.w	r2, r7, #12
 8001b94:	4611      	mov	r1, r2
 8001b96:	4618      	mov	r0, r3
 8001b98:	f002 f800 	bl	8003b9c <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	4a0b      	ldr	r2, [pc, #44]	@ (8001bcc <BSP_PB_Init+0xdc>)
 8001ba0:	5cd3      	ldrb	r3, [r2, r3]
 8001ba2:	b25b      	sxtb	r3, r3
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	210f      	movs	r1, #15
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f001 fce0 	bl	800356e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001bae:	79fb      	ldrb	r3, [r7, #7]
 8001bb0:	4a06      	ldr	r2, [pc, #24]	@ (8001bcc <BSP_PB_Init+0xdc>)
 8001bb2:	5cd3      	ldrb	r3, [r2, r3]
 8001bb4:	b25b      	sxtb	r3, r3
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f001 fcf3 	bl	80035a2 <HAL_NVIC_EnableIRQ>
  }
}
 8001bbc:	bf00      	nop
 8001bbe:	3720      	adds	r7, #32
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	08011224 	.word	0x08011224
 8001bc8:	20000018 	.word	0x20000018
 8001bcc:	0801122c 	.word	0x0801122c

08001bd0 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	6039      	str	r1, [r7, #0]
 8001bda:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d903      	bls.n	8001bee <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001be6:	f06f 0301 	mvn.w	r3, #1
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	e018      	b.n	8001c20 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001bee:	79fb      	ldrb	r3, [r7, #7]
 8001bf0:	2294      	movs	r2, #148	@ 0x94
 8001bf2:	fb02 f303 	mul.w	r3, r2, r3
 8001bf6:	4a0d      	ldr	r2, [pc, #52]	@ (8001c2c <BSP_COM_Init+0x5c>)
 8001bf8:	4413      	add	r3, r2
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 f866 	bl	8001ccc <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	2294      	movs	r2, #148	@ 0x94
 8001c04:	fb02 f303 	mul.w	r3, r2, r3
 8001c08:	4a08      	ldr	r2, [pc, #32]	@ (8001c2c <BSP_COM_Init+0x5c>)
 8001c0a:	4413      	add	r3, r2
 8001c0c:	6839      	ldr	r1, [r7, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 f80e 	bl	8001c30 <MX_LPUART1_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d002      	beq.n	8001c20 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8001c1a:	f06f 0303 	mvn.w	r3, #3
 8001c1e:	e000      	b.n	8001c22 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8001c20:	68fb      	ldr	r3, [r7, #12]
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	200004b4 	.word	0x200004b4

08001c30 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001c3a:	4b15      	ldr	r3, [pc, #84]	@ (8001c90 <MX_LPUART1_Init+0x60>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	220c      	movs	r2, #12
 8001c4e:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	895b      	ldrh	r3, [r3, #10]
 8001c54:	461a      	mov	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	891b      	ldrh	r3, [r3, #8]
 8001c66:	461a      	mov	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	899b      	ldrh	r3, [r3, #12]
 8001c70:	461a      	mov	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001c7c:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f006 ffd8 	bl	8008c34 <HAL_UART_Init>
 8001c84:	4603      	mov	r3, r0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000024 	.word	0x20000024

08001c94 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001c9c:	4b09      	ldr	r3, [pc, #36]	@ (8001cc4 <__io_putchar+0x30>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	2394      	movs	r3, #148	@ 0x94
 8001ca4:	fb02 f303 	mul.w	r3, r2, r3
 8001ca8:	4a07      	ldr	r2, [pc, #28]	@ (8001cc8 <__io_putchar+0x34>)
 8001caa:	1898      	adds	r0, r3, r2
 8001cac:	1d39      	adds	r1, r7, #4
 8001cae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f007 f818 	bl	8008ce8 <HAL_UART_Transmit>
  return ch;
 8001cb8:	687b      	ldr	r3, [r7, #4]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000548 	.word	0x20000548
 8001cc8:	200004b4 	.word	0x200004b4

08001ccc <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001cd4:	2002      	movs	r0, #2
 8001cd6:	f7ff fe84 	bl	80019e2 <LL_AHB2_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
 8001cda:	2002      	movs	r0, #2
 8001cdc:	f7ff fe81 	bl	80019e2 <LL_AHB2_GRP1_EnableClock>

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001ce0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001ce4:	f7ff fe96 	bl	8001a14 <LL_APB2_GRP1_EnableClock>

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001ce8:	2340      	movs	r3, #64	@ 0x40
 8001cea:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001cec:	2302      	movs	r3, #2
 8001cee:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001cf8:	2307      	movs	r3, #7
 8001cfa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001cfc:	f107 030c 	add.w	r3, r7, #12
 8001d00:	4619      	mov	r1, r3
 8001d02:	4809      	ldr	r0, [pc, #36]	@ (8001d28 <COM1_MspInit+0x5c>)
 8001d04:	f001 ff4a 	bl	8003b9c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001d08:	2380      	movs	r3, #128	@ 0x80
 8001d0a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001d10:	2307      	movs	r3, #7
 8001d12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001d14:	f107 030c 	add.w	r3, r7, #12
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4803      	ldr	r0, [pc, #12]	@ (8001d28 <COM1_MspInit+0x5c>)
 8001d1c:	f001 ff3e 	bl	8003b9c <HAL_GPIO_Init>
}
 8001d20:	bf00      	nop
 8001d22:	3720      	adds	r7, #32
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	48000400 	.word	0x48000400

08001d2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d32:	2300      	movs	r3, #0
 8001d34:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d36:	4b0c      	ldr	r3, [pc, #48]	@ (8001d68 <HAL_Init+0x3c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a0b      	ldr	r2, [pc, #44]	@ (8001d68 <HAL_Init+0x3c>)
 8001d3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d40:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d42:	2003      	movs	r0, #3
 8001d44:	f001 fc08 	bl	8003558 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f000 f80f 	bl	8001d6c <HAL_InitTick>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d002      	beq.n	8001d5a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	71fb      	strb	r3, [r7, #7]
 8001d58:	e001      	b.n	8001d5e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d5a:	f7ff fb8b 	bl	8001474 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d5e:	79fb      	ldrb	r3, [r7, #7]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	58004000 	.word	0x58004000

08001d6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d74:	2300      	movs	r3, #0
 8001d76:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001d78:	4b17      	ldr	r3, [pc, #92]	@ (8001dd8 <HAL_InitTick+0x6c>)
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d024      	beq.n	8001dca <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d80:	f005 fdf8 	bl	8007974 <HAL_RCC_GetHCLKFreq>
 8001d84:	4602      	mov	r2, r0
 8001d86:	4b14      	ldr	r3, [pc, #80]	@ (8001dd8 <HAL_InitTick+0x6c>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d90:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f001 fc10 	bl	80035be <HAL_SYSTICK_Config>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d10f      	bne.n	8001dc4 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b0f      	cmp	r3, #15
 8001da8:	d809      	bhi.n	8001dbe <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001daa:	2200      	movs	r2, #0
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	f04f 30ff 	mov.w	r0, #4294967295
 8001db2:	f001 fbdc 	bl	800356e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001db6:	4a09      	ldr	r2, [pc, #36]	@ (8001ddc <HAL_InitTick+0x70>)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6013      	str	r3, [r2, #0]
 8001dbc:	e007      	b.n	8001dce <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	73fb      	strb	r3, [r7, #15]
 8001dc2:	e004      	b.n	8001dce <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	73fb      	strb	r3, [r7, #15]
 8001dc8:	e001      	b.n	8001dce <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	2000002c 	.word	0x2000002c
 8001ddc:	20000028 	.word	0x20000028

08001de0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001de4:	4b06      	ldr	r3, [pc, #24]	@ (8001e00 <HAL_IncTick+0x20>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	461a      	mov	r2, r3
 8001dea:	4b06      	ldr	r3, [pc, #24]	@ (8001e04 <HAL_IncTick+0x24>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4413      	add	r3, r2
 8001df0:	4a04      	ldr	r2, [pc, #16]	@ (8001e04 <HAL_IncTick+0x24>)
 8001df2:	6013      	str	r3, [r2, #0]
}
 8001df4:	bf00      	nop
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	2000002c 	.word	0x2000002c
 8001e04:	2000054c 	.word	0x2000054c

08001e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e0c:	4b03      	ldr	r3, [pc, #12]	@ (8001e1c <HAL_GetTick+0x14>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	2000054c 	.word	0x2000054c

08001e20 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001e24:	4b03      	ldr	r3, [pc, #12]	@ (8001e34 <HAL_GetTickPrio+0x14>)
 8001e26:	681b      	ldr	r3, [r3, #0]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	20000028 	.word	0x20000028

08001e38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e40:	f7ff ffe2 	bl	8001e08 <HAL_GetTick>
 8001e44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e50:	d005      	beq.n	8001e5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e52:	4b0a      	ldr	r3, [pc, #40]	@ (8001e7c <HAL_Delay+0x44>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	461a      	mov	r2, r3
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e5e:	bf00      	nop
 8001e60:	f7ff ffd2 	bl	8001e08 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d8f7      	bhi.n	8001e60 <HAL_Delay+0x28>
  {
  }
}
 8001e70:	bf00      	nop
 8001e72:	bf00      	nop
 8001e74:	3710      	adds	r7, #16
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	2000002c 	.word	0x2000002c

08001e80 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	431a      	orrs	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
 8001eae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	370c      	adds	r7, #12
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee6:	4770      	bx	lr

08001ee8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b087      	sub	sp, #28
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	60f8      	str	r0, [r7, #12]
 8001ef0:	60b9      	str	r1, [r7, #8]
 8001ef2:	607a      	str	r2, [r7, #4]
 8001ef4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	3360      	adds	r3, #96	@ 0x60
 8001efa:	461a      	mov	r2, r3
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4b08      	ldr	r3, [pc, #32]	@ (8001f2c <LL_ADC_SetOffset+0x44>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001f12:	683a      	ldr	r2, [r7, #0]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	4313      	orrs	r3, r2
 8001f18:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f20:	bf00      	nop
 8001f22:	371c      	adds	r7, #28
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	03fff000 	.word	0x03fff000

08001f30 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	3360      	adds	r3, #96	@ 0x60
 8001f3e:	461a      	mov	r2, r3
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	3714      	adds	r7, #20
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b087      	sub	sp, #28
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	3360      	adds	r3, #96	@ 0x60
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	431a      	orrs	r2, r3
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f86:	bf00      	nop
 8001f88:	371c      	adds	r7, #28
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e000      	b.n	8001fac <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001faa:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b087      	sub	sp, #28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	3330      	adds	r3, #48	@ 0x30
 8001fc8:	461a      	mov	r2, r3
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	0a1b      	lsrs	r3, r3, #8
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	f003 030c 	and.w	r3, r3, #12
 8001fd4:	4413      	add	r3, r2
 8001fd6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	f003 031f 	and.w	r3, r3, #31
 8001fe2:	211f      	movs	r1, #31
 8001fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	401a      	ands	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	0e9b      	lsrs	r3, r3, #26
 8001ff0:	f003 011f 	and.w	r1, r3, #31
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	f003 031f 	and.w	r3, r3, #31
 8001ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffe:	431a      	orrs	r2, r3
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002004:	bf00      	nop
 8002006:	371c      	adds	r7, #28
 8002008:	46bd      	mov	sp, r7
 800200a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200e:	4770      	bx	lr

08002010 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	f003 0303 	and.w	r3, r3, #3
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002020:	4618      	mov	r0, r3
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002038:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002040:	2301      	movs	r3, #1
 8002042:	e000      	b.n	8002046 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002052:	b480      	push	{r7}
 8002054:	b087      	sub	sp, #28
 8002056:	af00      	add	r7, sp, #0
 8002058:	60f8      	str	r0, [r7, #12]
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	3314      	adds	r3, #20
 8002062:	461a      	mov	r2, r3
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	0e5b      	lsrs	r3, r3, #25
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	f003 0304 	and.w	r3, r3, #4
 800206e:	4413      	add	r3, r2
 8002070:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	0d1b      	lsrs	r3, r3, #20
 800207a:	f003 031f 	and.w	r3, r3, #31
 800207e:	2107      	movs	r1, #7
 8002080:	fa01 f303 	lsl.w	r3, r1, r3
 8002084:	43db      	mvns	r3, r3
 8002086:	401a      	ands	r2, r3
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	0d1b      	lsrs	r3, r3, #20
 800208c:	f003 031f 	and.w	r3, r3, #31
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	fa01 f303 	lsl.w	r3, r1, r3
 8002096:	431a      	orrs	r2, r3
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800209c:	bf00      	nop
 800209e:	371c      	adds	r7, #28
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c0:	43db      	mvns	r3, r3
 80020c2:	401a      	ands	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f003 0318 	and.w	r3, r3, #24
 80020ca:	4908      	ldr	r1, [pc, #32]	@ (80020ec <LL_ADC_SetChannelSingleDiff+0x44>)
 80020cc:	40d9      	lsrs	r1, r3
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	400b      	ands	r3, r1
 80020d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d6:	431a      	orrs	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80020de:	bf00      	nop
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	0007ffff 	.word	0x0007ffff

080020f0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002100:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	6093      	str	r3, [r2, #8]
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002124:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002128:	d101      	bne.n	800212e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800214c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002150:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002174:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002178:	d101      	bne.n	800217e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800217a:	2301      	movs	r3, #1
 800217c:	e000      	b.n	8002180 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr

0800218c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800218c:	b480      	push	{r7}
 800218e:	b083      	sub	sp, #12
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800219c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021a0:	f043 0201 	orr.w	r2, r3, #1
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d101      	bne.n	80021cc <LL_ADC_IsEnabled+0x18>
 80021c8:	2301      	movs	r3, #1
 80021ca:	e000      	b.n	80021ce <LL_ADC_IsEnabled+0x1a>
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	370c      	adds	r7, #12
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80021ea:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021ee:	f043 0204 	orr.w	r2, r3, #4
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002202:	b480      	push	{r7}
 8002204:	b083      	sub	sp, #12
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 0304 	and.w	r3, r3, #4
 8002212:	2b04      	cmp	r3, #4
 8002214:	d101      	bne.n	800221a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 0308 	and.w	r3, r3, #8
 8002238:	2b08      	cmp	r3, #8
 800223a:	d101      	bne.n	8002240 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800223c:	2301      	movs	r3, #1
 800223e:	e000      	b.n	8002242 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b088      	sub	sp, #32
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002258:	2300      	movs	r3, #0
 800225a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 800225c:	2300      	movs	r3, #0
 800225e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002260:	2300      	movs	r3, #0
 8002262:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e12e      	b.n	80024cc <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002278:	2b00      	cmp	r3, #0
 800227a:	d109      	bne.n	8002290 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f7ff f901 	bl	8001484 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4618      	mov	r0, r3
 8002296:	f7ff ff3d 	bl	8002114 <LL_ADC_IsDeepPowerDownEnabled>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d004      	beq.n	80022aa <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7ff ff23 	bl	80020f0 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff ff58 	bl	8002164 <LL_ADC_IsInternalRegulatorEnabled>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d115      	bne.n	80022e6 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f7ff ff3c 	bl	800213c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022c4:	4b83      	ldr	r3, [pc, #524]	@ (80024d4 <HAL_ADC_Init+0x284>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	099b      	lsrs	r3, r3, #6
 80022ca:	4a83      	ldr	r2, [pc, #524]	@ (80024d8 <HAL_ADC_Init+0x288>)
 80022cc:	fba2 2303 	umull	r2, r3, r2, r3
 80022d0:	099b      	lsrs	r3, r3, #6
 80022d2:	3301      	adds	r3, #1
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022d8:	e002      	b.n	80022e0 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	3b01      	subs	r3, #1
 80022de:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f9      	bne.n	80022da <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff ff3a 	bl	8002164 <LL_ADC_IsInternalRegulatorEnabled>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10d      	bne.n	8002312 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022fa:	f043 0210 	orr.w	r2, r3, #16
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002306:	f043 0201 	orr.w	r2, r3, #1
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff ff73 	bl	8002202 <LL_ADC_REG_IsConversionOngoing>
 800231c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002322:	f003 0310 	and.w	r3, r3, #16
 8002326:	2b00      	cmp	r3, #0
 8002328:	f040 80c7 	bne.w	80024ba <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	2b00      	cmp	r3, #0
 8002330:	f040 80c3 	bne.w	80024ba <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002338:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800233c:	f043 0202 	orr.w	r2, r3, #2
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff ff33 	bl	80021b4 <LL_ADC_IsEnabled>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10b      	bne.n	800236c <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002354:	4861      	ldr	r0, [pc, #388]	@ (80024dc <HAL_ADC_Init+0x28c>)
 8002356:	f7ff ff2d 	bl	80021b4 <LL_ADC_IsEnabled>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d105      	bne.n	800236c <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	4619      	mov	r1, r3
 8002366:	485e      	ldr	r0, [pc, #376]	@ (80024e0 <HAL_ADC_Init+0x290>)
 8002368:	f7ff fd8a 	bl	8001e80 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	7e5b      	ldrb	r3, [r3, #25]
 8002370:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002376:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800237c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002382:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 3020 	ldrb.w	r3, [r3, #32]
 800238a:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 800238c:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4313      	orrs	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 3020 	ldrb.w	r3, [r3, #32]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d106      	bne.n	80023ac <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a2:	3b01      	subs	r3, #1
 80023a4:	045b      	lsls	r3, r3, #17
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d009      	beq.n	80023c8 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	4b45      	ldr	r3, [pc, #276]	@ (80024e4 <HAL_ADC_Init+0x294>)
 80023d0:	4013      	ands	r3, r2
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	6812      	ldr	r2, [r2, #0]
 80023d6:	69b9      	ldr	r1, [r7, #24]
 80023d8:	430b      	orrs	r3, r1
 80023da:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff ff0e 	bl	8002202 <LL_ADC_REG_IsConversionOngoing>
 80023e6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff ff1b 	bl	8002228 <LL_ADC_INJ_IsConversionOngoing>
 80023f2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d13d      	bne.n	8002476 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d13a      	bne.n	8002476 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002404:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800240c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800240e:	4313      	orrs	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800241c:	f023 0302 	bic.w	r3, r3, #2
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6812      	ldr	r2, [r2, #0]
 8002424:	69b9      	ldr	r1, [r7, #24]
 8002426:	430b      	orrs	r3, r1
 8002428:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002430:	2b01      	cmp	r3, #1
 8002432:	d118      	bne.n	8002466 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800243e:	f023 0304 	bic.w	r3, r3, #4
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800244a:	4311      	orrs	r1, r2
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002450:	4311      	orrs	r1, r2
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002456:	430a      	orrs	r2, r1
 8002458:	431a      	orrs	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0201 	orr.w	r2, r2, #1
 8002462:	611a      	str	r2, [r3, #16]
 8002464:	e007      	b.n	8002476 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	691a      	ldr	r2, [r3, #16]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0201 	bic.w	r2, r2, #1
 8002474:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d10c      	bne.n	8002498 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002484:	f023 010f 	bic.w	r1, r3, #15
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	1e5a      	subs	r2, r3, #1
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	631a      	str	r2, [r3, #48]	@ 0x30
 8002496:	e007      	b.n	80024a8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f022 020f 	bic.w	r2, r2, #15
 80024a6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ac:	f023 0303 	bic.w	r3, r3, #3
 80024b0:	f043 0201 	orr.w	r2, r3, #1
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	655a      	str	r2, [r3, #84]	@ 0x54
 80024b8:	e007      	b.n	80024ca <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024be:	f043 0210 	orr.w	r2, r3, #16
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80024ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3720      	adds	r7, #32
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	20000008 	.word	0x20000008
 80024d8:	053e2d63 	.word	0x053e2d63
 80024dc:	50040000 	.word	0x50040000
 80024e0:	50040300 	.word	0x50040300
 80024e4:	fff0c007 	.word	0xfff0c007

080024e8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff fe82 	bl	8002202 <LL_ADC_REG_IsConversionOngoing>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d167      	bne.n	80025d4 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800250a:	2b01      	cmp	r3, #1
 800250c:	d101      	bne.n	8002512 <HAL_ADC_Start_DMA+0x2a>
 800250e:	2302      	movs	r3, #2
 8002510:	e063      	b.n	80025da <HAL_ADC_Start_DMA+0xf2>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2201      	movs	r2, #1
 8002516:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 fe0c 	bl	8003138 <ADC_Enable>
 8002520:	4603      	mov	r3, r0
 8002522:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002524:	7dfb      	ldrb	r3, [r7, #23]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d14f      	bne.n	80025ca <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800252e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002532:	f023 0301 	bic.w	r3, r3, #1
 8002536:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002542:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d006      	beq.n	8002558 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800254e:	f023 0206 	bic.w	r2, r3, #6
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	659a      	str	r2, [r3, #88]	@ 0x58
 8002556:	e002      	b.n	800255e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2200      	movs	r2, #0
 800255c:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002562:	4a20      	ldr	r2, [pc, #128]	@ (80025e4 <HAL_ADC_Start_DMA+0xfc>)
 8002564:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800256a:	4a1f      	ldr	r2, [pc, #124]	@ (80025e8 <HAL_ADC_Start_DMA+0x100>)
 800256c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002572:	4a1e      	ldr	r2, [pc, #120]	@ (80025ec <HAL_ADC_Start_DMA+0x104>)
 8002574:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	221c      	movs	r2, #28
 800257c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	685a      	ldr	r2, [r3, #4]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f042 0210 	orr.w	r2, r2, #16
 8002594:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f042 0201 	orr.w	r2, r2, #1
 80025a4:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	3340      	adds	r3, #64	@ 0x40
 80025b0:	4619      	mov	r1, r3
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f001 f8b7 	bl	8003728 <HAL_DMA_Start_IT>
 80025ba:	4603      	mov	r3, r0
 80025bc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff fe09 	bl	80021da <LL_ADC_REG_StartConversion>
 80025c8:	e006      	b.n	80025d8 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80025d2:	e001      	b.n	80025d8 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80025d4:	2302      	movs	r3, #2
 80025d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80025d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	0800322d 	.word	0x0800322d
 80025e8:	08003305 	.word	0x08003305
 80025ec:	08003321 	.word	0x08003321

080025f0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b088      	sub	sp, #32
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80025f8:	2300      	movs	r3, #0
 80025fa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d017      	beq.n	8002646 <HAL_ADC_IRQHandler+0x56>
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d012      	beq.n	8002646 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002624:	f003 0310 	and.w	r3, r3, #16
 8002628:	2b00      	cmp	r3, #0
 800262a:	d105      	bne.n	8002638 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002630:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 feb3 	bl	80033a4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2202      	movs	r2, #2
 8002644:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b00      	cmp	r3, #0
 800264e:	d004      	beq.n	800265a <HAL_ADC_IRQHandler+0x6a>
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	f003 0304 	and.w	r3, r3, #4
 8002656:	2b00      	cmp	r3, #0
 8002658:	d109      	bne.n	800266e <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002660:	2b00      	cmp	r3, #0
 8002662:	d05d      	beq.n	8002720 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d058      	beq.n	8002720 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002672:	f003 0310 	and.w	r3, r3, #16
 8002676:	2b00      	cmp	r3, #0
 8002678:	d105      	bne.n	8002686 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800267e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff fc81 	bl	8001f92 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d03d      	beq.n	8002712 <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026a4:	d035      	beq.n	8002712 <HAL_ADC_IRQHandler+0x122>
#endif /* ADC_SUPPORT_2_5_MSPS */
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0308 	and.w	r3, r3, #8
 80026b0:	2b08      	cmp	r3, #8
 80026b2:	d12e      	bne.n	8002712 <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f7ff fda2 	bl	8002202 <LL_ADC_REG_IsConversionOngoing>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d11a      	bne.n	80026fa <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f022 020c 	bic.w	r2, r2, #12
 80026d2:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d112      	bne.n	8002712 <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026f0:	f043 0201 	orr.w	r2, r3, #1
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	655a      	str	r2, [r3, #84]	@ 0x54
 80026f8:	e00b      	b.n	8002712 <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026fe:	f043 0210 	orr.w	r2, r3, #16
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800270a:	f043 0201 	orr.w	r2, r3, #1
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f922 	bl	800295c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	220c      	movs	r2, #12
 800271e:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	f003 0320 	and.w	r3, r3, #32
 8002726:	2b00      	cmp	r3, #0
 8002728:	d004      	beq.n	8002734 <HAL_ADC_IRQHandler+0x144>
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f003 0320 	and.w	r3, r3, #32
 8002730:	2b00      	cmp	r3, #0
 8002732:	d109      	bne.n	8002748 <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800273a:	2b00      	cmp	r3, #0
 800273c:	d074      	beq.n	8002828 <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002744:	2b00      	cmp	r3, #0
 8002746:	d06f      	beq.n	8002828 <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800274c:	f003 0310 	and.w	r3, r3, #16
 8002750:	2b00      	cmp	r3, #0
 8002752:	d105      	bne.n	8002760 <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002758:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff fc61 	bl	800202c <LL_ADC_INJ_IsTriggerSourceSWStart>
 800276a:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff fc0e 	bl	8001f92 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002776:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d049      	beq.n	800281a <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d007      	beq.n	80027a0 <HAL_ADC_IRQHandler+0x1b0>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d041      	beq.n	800281a <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800279c:	2b00      	cmp	r3, #0
 800279e:	d13c      	bne.n	800281a <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027aa:	2b40      	cmp	r3, #64	@ 0x40
 80027ac:	d135      	bne.n	800281a <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d12e      	bne.n	800281a <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff fd31 	bl	8002228 <LL_ADC_INJ_IsConversionOngoing>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d11a      	bne.n	8002802 <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	685a      	ldr	r2, [r3, #4]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80027da:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d112      	bne.n	800281a <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80027f8:	f043 0201 	orr.w	r2, r3, #1
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	655a      	str	r2, [r3, #84]	@ 0x54
 8002800:	e00b      	b.n	800281a <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002806:	f043 0210 	orr.w	r2, r3, #16
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002812:	f043 0201 	orr.w	r2, r3, #1
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 fd9a 	bl	8003354 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2260      	movs	r2, #96	@ 0x60
 8002826:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800282e:	2b00      	cmp	r3, #0
 8002830:	d011      	beq.n	8002856 <HAL_ADC_IRQHandler+0x266>
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002838:	2b00      	cmp	r3, #0
 800283a:	d00c      	beq.n	8002856 <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002840:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 f89b 	bl	8002984 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2280      	movs	r2, #128	@ 0x80
 8002854:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800285c:	2b00      	cmp	r3, #0
 800285e:	d012      	beq.n	8002886 <HAL_ADC_IRQHandler+0x296>
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00d      	beq.n	8002886 <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800286e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 fd80 	bl	800337c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002884:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800288c:	2b00      	cmp	r3, #0
 800288e:	d012      	beq.n	80028b6 <HAL_ADC_IRQHandler+0x2c6>
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00d      	beq.n	80028b6 <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800289e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fd72 	bl	8003390 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028b4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	f003 0310 	and.w	r3, r3, #16
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d02b      	beq.n	8002918 <HAL_ADC_IRQHandler+0x328>
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	f003 0310 	and.w	r3, r3, #16
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d026      	beq.n	8002918 <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d102      	bne.n	80028d8 <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 80028d2:	2301      	movs	r3, #1
 80028d4:	61fb      	str	r3, [r7, #28]
 80028d6:	e009      	b.n	80028ec <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff fb97 	bl	8002010 <LL_ADC_REG_GetDMATransfer>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 80028e8:	2301      	movs	r3, #1
 80028ea:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	d10e      	bne.n	8002910 <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028f6:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002902:	f043 0202 	orr.w	r2, r3, #2
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f844 	bl	8002998 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2210      	movs	r2, #16
 8002916:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800291e:	2b00      	cmp	r3, #0
 8002920:	d018      	beq.n	8002954 <HAL_ADC_IRQHandler+0x364>
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002928:	2b00      	cmp	r3, #0
 800292a:	d013      	beq.n	8002954 <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002930:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800293c:	f043 0208 	orr.w	r2, r3, #8
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800294c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 fd0a 	bl	8003368 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 8002954:	bf00      	nop
 8002956:	3720      	adds	r7, #32
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b0b6      	sub	sp, #216	@ 0xd8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029b6:	2300      	movs	r3, #0
 80029b8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80029bc:	2300      	movs	r3, #0
 80029be:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d101      	bne.n	80029ce <HAL_ADC_ConfigChannel+0x22>
 80029ca:	2302      	movs	r3, #2
 80029cc:	e39f      	b.n	800310e <HAL_ADC_ConfigChannel+0x762>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2201      	movs	r2, #1
 80029d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7ff fc11 	bl	8002202 <LL_ADC_REG_IsConversionOngoing>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f040 8384 	bne.w	80030f0 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6818      	ldr	r0, [r3, #0]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	6859      	ldr	r1, [r3, #4]
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	461a      	mov	r2, r3
 80029f6:	f7ff fadf 	bl	8001fb8 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff fbff 	bl	8002202 <LL_ADC_REG_IsConversionOngoing>
 8002a04:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff fc0b 	bl	8002228 <LL_ADC_INJ_IsConversionOngoing>
 8002a12:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a16:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f040 81a6 	bne.w	8002d6c <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a20:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f040 81a1 	bne.w	8002d6c <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6818      	ldr	r0, [r3, #0]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	6819      	ldr	r1, [r3, #0]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	461a      	mov	r2, r3
 8002a38:	f7ff fb0b 	bl	8002052 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	695a      	ldr	r2, [r3, #20]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	08db      	lsrs	r3, r3, #3
 8002a48:	f003 0303 	and.w	r3, r3, #3
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d00a      	beq.n	8002a74 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6818      	ldr	r0, [r3, #0]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	6919      	ldr	r1, [r3, #16]
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002a6e:	f7ff fa3b 	bl	8001ee8 <LL_ADC_SetOffset>
 8002a72:	e17b      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2100      	movs	r1, #0
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7ff fa58 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 8002a80:	4603      	mov	r3, r0
 8002a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10a      	bne.n	8002aa0 <HAL_ADC_ConfigChannel+0xf4>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2100      	movs	r1, #0
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff fa4d 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 8002a96:	4603      	mov	r3, r0
 8002a98:	0e9b      	lsrs	r3, r3, #26
 8002a9a:	f003 021f 	and.w	r2, r3, #31
 8002a9e:	e01e      	b.n	8002ade <HAL_ADC_ConfigChannel+0x132>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f7ff fa42 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 8002aac:	4603      	mov	r3, r0
 8002aae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002ab6:	fa93 f3a3 	rbit	r3, r3
 8002aba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002abe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ac2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ac6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8002ace:	2320      	movs	r3, #32
 8002ad0:	e004      	b.n	8002adc <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8002ad2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002ad6:	fab3 f383 	clz	r3, r3
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	461a      	mov	r2, r3
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d105      	bne.n	8002af6 <HAL_ADC_ConfigChannel+0x14a>
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	0e9b      	lsrs	r3, r3, #26
 8002af0:	f003 031f 	and.w	r3, r3, #31
 8002af4:	e018      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x17c>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b02:	fa93 f3a3 	rbit	r3, r3
 8002b06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002b0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b0e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002b12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8002b1a:	2320      	movs	r3, #32
 8002b1c:	e004      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8002b1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b22:	fab3 f383 	clz	r3, r3
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d106      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2200      	movs	r2, #0
 8002b32:	2100      	movs	r1, #0
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff fa11 	bl	8001f5c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2101      	movs	r1, #1
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff f9f5 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 8002b46:	4603      	mov	r3, r0
 8002b48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d10a      	bne.n	8002b66 <HAL_ADC_ConfigChannel+0x1ba>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2101      	movs	r1, #1
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff f9ea 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	0e9b      	lsrs	r3, r3, #26
 8002b60:	f003 021f 	and.w	r2, r3, #31
 8002b64:	e01e      	b.n	8002ba4 <HAL_ADC_ConfigChannel+0x1f8>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff f9df 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 8002b72:	4603      	mov	r3, r0
 8002b74:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002b7c:	fa93 f3a3 	rbit	r3, r3
 8002b80:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002b84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002b8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d101      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8002b94:	2320      	movs	r3, #32
 8002b96:	e004      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8002b98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002b9c:	fab3 f383 	clz	r3, r3
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d105      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x210>
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	0e9b      	lsrs	r3, r3, #26
 8002bb6:	f003 031f 	and.w	r3, r3, #31
 8002bba:	e018      	b.n	8002bee <HAL_ADC_ConfigChannel+0x242>
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002bc8:	fa93 f3a3 	rbit	r3, r3
 8002bcc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002bd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002bd4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002bd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8002be0:	2320      	movs	r3, #32
 8002be2:	e004      	b.n	8002bee <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8002be4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002be8:	fab3 f383 	clz	r3, r3
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d106      	bne.n	8002c00 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	2101      	movs	r1, #1
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff f9ae 	bl	8001f5c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2102      	movs	r1, #2
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff f992 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10a      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x280>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2102      	movs	r1, #2
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff f987 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 8002c22:	4603      	mov	r3, r0
 8002c24:	0e9b      	lsrs	r3, r3, #26
 8002c26:	f003 021f 	and.w	r2, r3, #31
 8002c2a:	e01e      	b.n	8002c6a <HAL_ADC_ConfigChannel+0x2be>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2102      	movs	r1, #2
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff f97c 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c42:	fa93 f3a3 	rbit	r3, r3
 8002c46:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002c4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002c52:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8002c5a:	2320      	movs	r3, #32
 8002c5c:	e004      	b.n	8002c68 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002c5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c62:	fab3 f383 	clz	r3, r3
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	461a      	mov	r2, r3
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d105      	bne.n	8002c82 <HAL_ADC_ConfigChannel+0x2d6>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	0e9b      	lsrs	r3, r3, #26
 8002c7c:	f003 031f 	and.w	r3, r3, #31
 8002c80:	e016      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x304>
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c8e:	fa93 f3a3 	rbit	r3, r3
 8002c92:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002c94:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002c96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002c9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8002ca2:	2320      	movs	r3, #32
 8002ca4:	e004      	b.n	8002cb0 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8002ca6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002caa:	fab3 f383 	clz	r3, r3
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d106      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	2102      	movs	r1, #2
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff f94d 	bl	8001f5c <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2103      	movs	r1, #3
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff f931 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10a      	bne.n	8002cee <HAL_ADC_ConfigChannel+0x342>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2103      	movs	r1, #3
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff f926 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	0e9b      	lsrs	r3, r3, #26
 8002ce8:	f003 021f 	and.w	r2, r3, #31
 8002cec:	e017      	b.n	8002d1e <HAL_ADC_ConfigChannel+0x372>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2103      	movs	r1, #3
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff f91b 	bl	8001f30 <LL_ADC_GetOffsetChannel>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d00:	fa93 f3a3 	rbit	r3, r3
 8002d04:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002d06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d08:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002d0a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d101      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8002d10:	2320      	movs	r3, #32
 8002d12:	e003      	b.n	8002d1c <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8002d14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d16:	fab3 f383 	clz	r3, r3
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d105      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x38a>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	0e9b      	lsrs	r3, r3, #26
 8002d30:	f003 031f 	and.w	r3, r3, #31
 8002d34:	e011      	b.n	8002d5a <HAL_ADC_ConfigChannel+0x3ae>
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d3e:	fa93 f3a3 	rbit	r3, r3
 8002d42:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002d44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d46:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002d48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8002d4e:	2320      	movs	r3, #32
 8002d50:	e003      	b.n	8002d5a <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8002d52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d54:	fab3 f383 	clz	r3, r3
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d106      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2200      	movs	r2, #0
 8002d64:	2103      	movs	r1, #3
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff f8f8 	bl	8001f5c <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff fa1f 	bl	80021b4 <LL_ADC_IsEnabled>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f040 81c2 	bne.w	8003102 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6818      	ldr	r0, [r3, #0]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	6819      	ldr	r1, [r3, #0]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	f7ff f98c 	bl	80020a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	4a8e      	ldr	r2, [pc, #568]	@ (8002fd0 <HAL_ADC_ConfigChannel+0x624>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	f040 8130 	bne.w	8002ffc <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10b      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x418>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	0e9b      	lsrs	r3, r3, #26
 8002db2:	3301      	adds	r3, #1
 8002db4:	f003 031f 	and.w	r3, r3, #31
 8002db8:	2b09      	cmp	r3, #9
 8002dba:	bf94      	ite	ls
 8002dbc:	2301      	movls	r3, #1
 8002dbe:	2300      	movhi	r3, #0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	e019      	b.n	8002df8 <HAL_ADC_ConfigChannel+0x44c>
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002dcc:	fa93 f3a3 	rbit	r3, r3
 8002dd0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002dd2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002dd4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002dd6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8002ddc:	2320      	movs	r3, #32
 8002dde:	e003      	b.n	8002de8 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8002de0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002de2:	fab3 f383 	clz	r3, r3
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	3301      	adds	r3, #1
 8002dea:	f003 031f 	and.w	r3, r3, #31
 8002dee:	2b09      	cmp	r3, #9
 8002df0:	bf94      	ite	ls
 8002df2:	2301      	movls	r3, #1
 8002df4:	2300      	movhi	r3, #0
 8002df6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d079      	beq.n	8002ef0 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d107      	bne.n	8002e18 <HAL_ADC_ConfigChannel+0x46c>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	0e9b      	lsrs	r3, r3, #26
 8002e0e:	3301      	adds	r3, #1
 8002e10:	069b      	lsls	r3, r3, #26
 8002e12:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e16:	e015      	b.n	8002e44 <HAL_ADC_ConfigChannel+0x498>
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e20:	fa93 f3a3 	rbit	r3, r3
 8002e24:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002e26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e28:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002e2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002e30:	2320      	movs	r3, #32
 8002e32:	e003      	b.n	8002e3c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002e34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e36:	fab3 f383 	clz	r3, r3
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	069b      	lsls	r3, r3, #26
 8002e40:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d109      	bne.n	8002e64 <HAL_ADC_ConfigChannel+0x4b8>
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	0e9b      	lsrs	r3, r3, #26
 8002e56:	3301      	adds	r3, #1
 8002e58:	f003 031f 	and.w	r3, r3, #31
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e62:	e017      	b.n	8002e94 <HAL_ADC_ConfigChannel+0x4e8>
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e6c:	fa93 f3a3 	rbit	r3, r3
 8002e70:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002e72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e74:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002e76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002e7c:	2320      	movs	r3, #32
 8002e7e:	e003      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002e80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e82:	fab3 f383 	clz	r3, r3
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	3301      	adds	r3, #1
 8002e8a:	f003 031f 	and.w	r3, r3, #31
 8002e8e:	2101      	movs	r1, #1
 8002e90:	fa01 f303 	lsl.w	r3, r1, r3
 8002e94:	ea42 0103 	orr.w	r1, r2, r3
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d10a      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x50e>
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	0e9b      	lsrs	r3, r3, #26
 8002eaa:	3301      	adds	r3, #1
 8002eac:	f003 021f 	and.w	r2, r3, #31
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	4413      	add	r3, r2
 8002eb6:	051b      	lsls	r3, r3, #20
 8002eb8:	e018      	b.n	8002eec <HAL_ADC_ConfigChannel+0x540>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ec2:	fa93 f3a3 	rbit	r3, r3
 8002ec6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002ec8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002ecc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002ed2:	2320      	movs	r3, #32
 8002ed4:	e003      	b.n	8002ede <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002ed6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ed8:	fab3 f383 	clz	r3, r3
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	3301      	adds	r3, #1
 8002ee0:	f003 021f 	and.w	r2, r3, #31
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	4413      	add	r3, r2
 8002eea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002eec:	430b      	orrs	r3, r1
 8002eee:	e080      	b.n	8002ff2 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d107      	bne.n	8002f0c <HAL_ADC_ConfigChannel+0x560>
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	0e9b      	lsrs	r3, r3, #26
 8002f02:	3301      	adds	r3, #1
 8002f04:	069b      	lsls	r3, r3, #26
 8002f06:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f0a:	e015      	b.n	8002f38 <HAL_ADC_ConfigChannel+0x58c>
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f14:	fa93 f3a3 	rbit	r3, r3
 8002f18:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f1c:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8002f24:	2320      	movs	r3, #32
 8002f26:	e003      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8002f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f2a:	fab3 f383 	clz	r3, r3
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	3301      	adds	r3, #1
 8002f32:	069b      	lsls	r3, r3, #26
 8002f34:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d109      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x5ac>
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	0e9b      	lsrs	r3, r3, #26
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	f003 031f 	and.w	r3, r3, #31
 8002f50:	2101      	movs	r1, #1
 8002f52:	fa01 f303 	lsl.w	r3, r1, r3
 8002f56:	e017      	b.n	8002f88 <HAL_ADC_ConfigChannel+0x5dc>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5e:	6a3b      	ldr	r3, [r7, #32]
 8002f60:	fa93 f3a3 	rbit	r3, r3
 8002f64:	61fb      	str	r3, [r7, #28]
  return result;
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8002f70:	2320      	movs	r3, #32
 8002f72:	e003      	b.n	8002f7c <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8002f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f76:	fab3 f383 	clz	r3, r3
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	f003 031f 	and.w	r3, r3, #31
 8002f82:	2101      	movs	r1, #1
 8002f84:	fa01 f303 	lsl.w	r3, r1, r3
 8002f88:	ea42 0103 	orr.w	r1, r2, r3
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10d      	bne.n	8002fb4 <HAL_ADC_ConfigChannel+0x608>
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	0e9b      	lsrs	r3, r3, #26
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	f003 021f 	and.w	r2, r3, #31
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	4413      	add	r3, r2
 8002faa:	3b1e      	subs	r3, #30
 8002fac:	051b      	lsls	r3, r3, #20
 8002fae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002fb2:	e01d      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x644>
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	fa93 f3a3 	rbit	r3, r3
 8002fc0:	613b      	str	r3, [r7, #16]
  return result;
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d103      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8002fcc:	2320      	movs	r3, #32
 8002fce:	e005      	b.n	8002fdc <HAL_ADC_ConfigChannel+0x630>
 8002fd0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	fab3 f383 	clz	r3, r3
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	3301      	adds	r3, #1
 8002fde:	f003 021f 	and.w	r2, r3, #31
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	4413      	add	r3, r2
 8002fe8:	3b1e      	subs	r3, #30
 8002fea:	051b      	lsls	r3, r3, #20
 8002fec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ff0:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	f7ff f82b 	bl	8002052 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	4b45      	ldr	r3, [pc, #276]	@ (8003118 <HAL_ADC_ConfigChannel+0x76c>)
 8003002:	4013      	ands	r3, r2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d07c      	beq.n	8003102 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003008:	4844      	ldr	r0, [pc, #272]	@ (800311c <HAL_ADC_ConfigChannel+0x770>)
 800300a:	f7fe ff5f 	bl	8001ecc <LL_ADC_GetCommonPathInternalCh>
 800300e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003012:	4843      	ldr	r0, [pc, #268]	@ (8003120 <HAL_ADC_ConfigChannel+0x774>)
 8003014:	f7ff f8ce 	bl	80021b4 <LL_ADC_IsEnabled>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d15e      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a40      	ldr	r2, [pc, #256]	@ (8003124 <HAL_ADC_ConfigChannel+0x778>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d127      	bne.n	8003078 <HAL_ADC_ConfigChannel+0x6cc>
 8003028:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800302c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d121      	bne.n	8003078 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a39      	ldr	r2, [pc, #228]	@ (8003120 <HAL_ADC_ConfigChannel+0x774>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d161      	bne.n	8003102 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800303e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003042:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003046:	4619      	mov	r1, r3
 8003048:	4834      	ldr	r0, [pc, #208]	@ (800311c <HAL_ADC_ConfigChannel+0x770>)
 800304a:	f7fe ff2c 	bl	8001ea6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800304e:	4b36      	ldr	r3, [pc, #216]	@ (8003128 <HAL_ADC_ConfigChannel+0x77c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	099b      	lsrs	r3, r3, #6
 8003054:	4a35      	ldr	r2, [pc, #212]	@ (800312c <HAL_ADC_ConfigChannel+0x780>)
 8003056:	fba2 2303 	umull	r2, r3, r2, r3
 800305a:	099b      	lsrs	r3, r3, #6
 800305c:	1c5a      	adds	r2, r3, #1
 800305e:	4613      	mov	r3, r2
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	4413      	add	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003068:	e002      	b.n	8003070 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	3b01      	subs	r3, #1
 800306e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f9      	bne.n	800306a <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003076:	e044      	b.n	8003102 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a2c      	ldr	r2, [pc, #176]	@ (8003130 <HAL_ADC_ConfigChannel+0x784>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d113      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x6fe>
 8003082:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003086:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10d      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a23      	ldr	r2, [pc, #140]	@ (8003120 <HAL_ADC_ConfigChannel+0x774>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d134      	bne.n	8003102 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003098:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800309c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030a0:	4619      	mov	r1, r3
 80030a2:	481e      	ldr	r0, [pc, #120]	@ (800311c <HAL_ADC_ConfigChannel+0x770>)
 80030a4:	f7fe feff 	bl	8001ea6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030a8:	e02b      	b.n	8003102 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a21      	ldr	r2, [pc, #132]	@ (8003134 <HAL_ADC_ConfigChannel+0x788>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d126      	bne.n	8003102 <HAL_ADC_ConfigChannel+0x756>
 80030b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d120      	bne.n	8003102 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a16      	ldr	r2, [pc, #88]	@ (8003120 <HAL_ADC_ConfigChannel+0x774>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d11b      	bne.n	8003102 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80030ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030ce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80030d2:	4619      	mov	r1, r3
 80030d4:	4811      	ldr	r0, [pc, #68]	@ (800311c <HAL_ADC_ConfigChannel+0x770>)
 80030d6:	f7fe fee6 	bl	8001ea6 <LL_ADC_SetCommonPathInternalCh>
 80030da:	e012      	b.n	8003102 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e0:	f043 0220 	orr.w	r2, r3, #32
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80030ee:	e008      	b.n	8003102 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030f4:	f043 0220 	orr.w	r2, r3, #32
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 800310a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800310e:	4618      	mov	r0, r3
 8003110:	37d8      	adds	r7, #216	@ 0xd8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	80080000 	.word	0x80080000
 800311c:	50040300 	.word	0x50040300
 8003120:	50040000 	.word	0x50040000
 8003124:	c7520000 	.word	0xc7520000
 8003128:	20000008 	.word	0x20000008
 800312c:	053e2d63 	.word	0x053e2d63
 8003130:	cb840000 	.word	0xcb840000
 8003134:	80000001 	.word	0x80000001

08003138 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003140:	2300      	movs	r3, #0
 8003142:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff f833 	bl	80021b4 <LL_ADC_IsEnabled>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d15e      	bne.n	8003212 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	4b30      	ldr	r3, [pc, #192]	@ (800321c <ADC_Enable+0xe4>)
 800315c:	4013      	ands	r3, r2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00d      	beq.n	800317e <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003166:	f043 0210 	orr.w	r2, r3, #16
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003172:	f043 0201 	orr.w	r2, r3, #1
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e04a      	b.n	8003214 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff f802 	bl	800218c <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003188:	4825      	ldr	r0, [pc, #148]	@ (8003220 <ADC_Enable+0xe8>)
 800318a:	f7fe fe9f 	bl	8001ecc <LL_ADC_GetCommonPathInternalCh>
 800318e:	4603      	mov	r3, r0
 8003190:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00f      	beq.n	80031b8 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003198:	4b22      	ldr	r3, [pc, #136]	@ (8003224 <ADC_Enable+0xec>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	099b      	lsrs	r3, r3, #6
 800319e:	4a22      	ldr	r2, [pc, #136]	@ (8003228 <ADC_Enable+0xf0>)
 80031a0:	fba2 2303 	umull	r2, r3, r2, r3
 80031a4:	099b      	lsrs	r3, r3, #6
 80031a6:	3301      	adds	r3, #1
 80031a8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80031aa:	e002      	b.n	80031b2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1f9      	bne.n	80031ac <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80031b8:	f7fe fe26 	bl	8001e08 <HAL_GetTick>
 80031bc:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031be:	e021      	b.n	8003204 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4618      	mov	r0, r3
 80031c6:	f7fe fff5 	bl	80021b4 <LL_ADC_IsEnabled>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d104      	bne.n	80031da <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7fe ffd9 	bl	800218c <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031da:	f7fe fe15 	bl	8001e08 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d90d      	bls.n	8003204 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ec:	f043 0210 	orr.w	r2, r3, #16
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031f8:	f043 0201 	orr.w	r2, r3, #1
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e007      	b.n	8003214 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b01      	cmp	r3, #1
 8003210:	d1d6      	bne.n	80031c0 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	8000003f 	.word	0x8000003f
 8003220:	50040300 	.word	0x50040300
 8003224:	20000008 	.word	0x20000008
 8003228:	053e2d63 	.word	0x053e2d63

0800322c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003238:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800323e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003242:	2b00      	cmp	r3, #0
 8003244:	d14b      	bne.n	80032de <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800324a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	2b00      	cmp	r3, #0
 800325e:	d021      	beq.n	80032a4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4618      	mov	r0, r3
 8003266:	f7fe fe94 	bl	8001f92 <LL_ADC_REG_IsTriggerSourceSWStart>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d032      	beq.n	80032d6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d12b      	bne.n	80032d6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003282:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800328e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d11f      	bne.n	80032d6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800329a:	f043 0201 	orr.w	r2, r3, #1
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	655a      	str	r2, [r3, #84]	@ 0x54
 80032a2:	e018      	b.n	80032d6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d111      	bne.n	80032d6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032b6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d105      	bne.n	80032d6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ce:	f043 0201 	orr.w	r2, r3, #1
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f7ff fb40 	bl	800295c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80032dc:	e00e      	b.n	80032fc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032e2:	f003 0310 	and.w	r3, r3, #16
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d003      	beq.n	80032f2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f7ff fb54 	bl	8002998 <HAL_ADC_ErrorCallback>
}
 80032f0:	e004      	b.n	80032fc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	4798      	blx	r3
}
 80032fc:	bf00      	nop
 80032fe:	3710      	adds	r7, #16
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003310:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f7ff fb2c 	bl	8002970 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003318:	bf00      	nop
 800331a:	3710      	adds	r7, #16
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800332c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003332:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800333e:	f043 0204 	orr.w	r2, r3, #4
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f7ff fb26 	bl	8002998 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800334c:	bf00      	nop
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033c8:	4b0c      	ldr	r3, [pc, #48]	@ (80033fc <__NVIC_SetPriorityGrouping+0x44>)
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033d4:	4013      	ands	r3, r2
 80033d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033ea:	4a04      	ldr	r2, [pc, #16]	@ (80033fc <__NVIC_SetPriorityGrouping+0x44>)
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	60d3      	str	r3, [r2, #12]
}
 80033f0:	bf00      	nop
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	e000ed00 	.word	0xe000ed00

08003400 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003404:	4b04      	ldr	r3, [pc, #16]	@ (8003418 <__NVIC_GetPriorityGrouping+0x18>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	0a1b      	lsrs	r3, r3, #8
 800340a:	f003 0307 	and.w	r3, r3, #7
}
 800340e:	4618      	mov	r0, r3
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	e000ed00 	.word	0xe000ed00

0800341c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	4603      	mov	r3, r0
 8003424:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342a:	2b00      	cmp	r3, #0
 800342c:	db0b      	blt.n	8003446 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800342e:	79fb      	ldrb	r3, [r7, #7]
 8003430:	f003 021f 	and.w	r2, r3, #31
 8003434:	4907      	ldr	r1, [pc, #28]	@ (8003454 <__NVIC_EnableIRQ+0x38>)
 8003436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343a:	095b      	lsrs	r3, r3, #5
 800343c:	2001      	movs	r0, #1
 800343e:	fa00 f202 	lsl.w	r2, r0, r2
 8003442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003446:	bf00      	nop
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	e000e100 	.word	0xe000e100

08003458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	4603      	mov	r3, r0
 8003460:	6039      	str	r1, [r7, #0]
 8003462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003468:	2b00      	cmp	r3, #0
 800346a:	db0a      	blt.n	8003482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	b2da      	uxtb	r2, r3
 8003470:	490c      	ldr	r1, [pc, #48]	@ (80034a4 <__NVIC_SetPriority+0x4c>)
 8003472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003476:	0112      	lsls	r2, r2, #4
 8003478:	b2d2      	uxtb	r2, r2
 800347a:	440b      	add	r3, r1
 800347c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003480:	e00a      	b.n	8003498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	b2da      	uxtb	r2, r3
 8003486:	4908      	ldr	r1, [pc, #32]	@ (80034a8 <__NVIC_SetPriority+0x50>)
 8003488:	79fb      	ldrb	r3, [r7, #7]
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	3b04      	subs	r3, #4
 8003490:	0112      	lsls	r2, r2, #4
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	440b      	add	r3, r1
 8003496:	761a      	strb	r2, [r3, #24]
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	e000e100 	.word	0xe000e100
 80034a8:	e000ed00 	.word	0xe000ed00

080034ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b089      	sub	sp, #36	@ 0x24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	f1c3 0307 	rsb	r3, r3, #7
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	bf28      	it	cs
 80034ca:	2304      	movcs	r3, #4
 80034cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	3304      	adds	r3, #4
 80034d2:	2b06      	cmp	r3, #6
 80034d4:	d902      	bls.n	80034dc <NVIC_EncodePriority+0x30>
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	3b03      	subs	r3, #3
 80034da:	e000      	b.n	80034de <NVIC_EncodePriority+0x32>
 80034dc:	2300      	movs	r3, #0
 80034de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e0:	f04f 32ff 	mov.w	r2, #4294967295
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	43da      	mvns	r2, r3
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	401a      	ands	r2, r3
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034f4:	f04f 31ff 	mov.w	r1, #4294967295
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	fa01 f303 	lsl.w	r3, r1, r3
 80034fe:	43d9      	mvns	r1, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003504:	4313      	orrs	r3, r2
         );
}
 8003506:	4618      	mov	r0, r3
 8003508:	3724      	adds	r7, #36	@ 0x24
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
	...

08003514 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3b01      	subs	r3, #1
 8003520:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003524:	d301      	bcc.n	800352a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003526:	2301      	movs	r3, #1
 8003528:	e00f      	b.n	800354a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800352a:	4a0a      	ldr	r2, [pc, #40]	@ (8003554 <SysTick_Config+0x40>)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	3b01      	subs	r3, #1
 8003530:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003532:	210f      	movs	r1, #15
 8003534:	f04f 30ff 	mov.w	r0, #4294967295
 8003538:	f7ff ff8e 	bl	8003458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800353c:	4b05      	ldr	r3, [pc, #20]	@ (8003554 <SysTick_Config+0x40>)
 800353e:	2200      	movs	r2, #0
 8003540:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003542:	4b04      	ldr	r3, [pc, #16]	@ (8003554 <SysTick_Config+0x40>)
 8003544:	2207      	movs	r2, #7
 8003546:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	e000e010 	.word	0xe000e010

08003558 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f7ff ff29 	bl	80033b8 <__NVIC_SetPriorityGrouping>
}
 8003566:	bf00      	nop
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800356e:	b580      	push	{r7, lr}
 8003570:	b086      	sub	sp, #24
 8003572:	af00      	add	r7, sp, #0
 8003574:	4603      	mov	r3, r0
 8003576:	60b9      	str	r1, [r7, #8]
 8003578:	607a      	str	r2, [r7, #4]
 800357a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800357c:	f7ff ff40 	bl	8003400 <__NVIC_GetPriorityGrouping>
 8003580:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	68b9      	ldr	r1, [r7, #8]
 8003586:	6978      	ldr	r0, [r7, #20]
 8003588:	f7ff ff90 	bl	80034ac <NVIC_EncodePriority>
 800358c:	4602      	mov	r2, r0
 800358e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003592:	4611      	mov	r1, r2
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff ff5f 	bl	8003458 <__NVIC_SetPriority>
}
 800359a:	bf00      	nop
 800359c:	3718      	adds	r7, #24
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b082      	sub	sp, #8
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	4603      	mov	r3, r0
 80035aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7ff ff33 	bl	800341c <__NVIC_EnableIRQ>
}
 80035b6:	bf00      	nop
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b082      	sub	sp, #8
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7ff ffa4 	bl	8003514 <SysTick_Config>
 80035cc:	4603      	mov	r3, r0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
	...

080035d8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e08e      	b.n	8003708 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	4b47      	ldr	r3, [pc, #284]	@ (8003710 <HAL_DMA_Init+0x138>)
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d80f      	bhi.n	8003616 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	461a      	mov	r2, r3
 80035fc:	4b45      	ldr	r3, [pc, #276]	@ (8003714 <HAL_DMA_Init+0x13c>)
 80035fe:	4413      	add	r3, r2
 8003600:	4a45      	ldr	r2, [pc, #276]	@ (8003718 <HAL_DMA_Init+0x140>)
 8003602:	fba2 2303 	umull	r2, r3, r2, r3
 8003606:	091b      	lsrs	r3, r3, #4
 8003608:	009a      	lsls	r2, r3, #2
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a42      	ldr	r2, [pc, #264]	@ (800371c <HAL_DMA_Init+0x144>)
 8003612:	641a      	str	r2, [r3, #64]	@ 0x40
 8003614:	e00e      	b.n	8003634 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	4b40      	ldr	r3, [pc, #256]	@ (8003720 <HAL_DMA_Init+0x148>)
 800361e:	4413      	add	r3, r2
 8003620:	4a3d      	ldr	r2, [pc, #244]	@ (8003718 <HAL_DMA_Init+0x140>)
 8003622:	fba2 2303 	umull	r2, r3, r2, r3
 8003626:	091b      	lsrs	r3, r3, #4
 8003628:	009a      	lsls	r2, r3, #2
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a3c      	ldr	r2, [pc, #240]	@ (8003724 <HAL_DMA_Init+0x14c>)
 8003632:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800364a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800364e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003658:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003664:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003670:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	4313      	orrs	r3, r2
 800367c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 fa24 	bl	8003ad4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003694:	d102      	bne.n	800369c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036a4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80036a8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80036b2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d010      	beq.n	80036de <HAL_DMA_Init+0x106>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d80c      	bhi.n	80036de <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 fa43 	bl	8003b50 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ce:	2200      	movs	r2, #0
 80036d0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80036da:	605a      	str	r2, [r3, #4]
 80036dc:	e008      	b.n	80036f0 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40020407 	.word	0x40020407
 8003714:	bffdfff8 	.word	0xbffdfff8
 8003718:	cccccccd 	.word	0xcccccccd
 800371c:	40020000 	.word	0x40020000
 8003720:	bffdfbf8 	.word	0xbffdfbf8
 8003724:	40020400 	.word	0x40020400

08003728 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
 8003734:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003736:	2300      	movs	r3, #0
 8003738:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003740:	2b01      	cmp	r3, #1
 8003742:	d101      	bne.n	8003748 <HAL_DMA_Start_IT+0x20>
 8003744:	2302      	movs	r3, #2
 8003746:	e066      	b.n	8003816 <HAL_DMA_Start_IT+0xee>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b01      	cmp	r3, #1
 800375a:	d155      	bne.n	8003808 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2202      	movs	r2, #2
 8003760:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 0201 	bic.w	r2, r2, #1
 8003778:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	68b9      	ldr	r1, [r7, #8]
 8003780:	68f8      	ldr	r0, [r7, #12]
 8003782:	f000 f968 	bl	8003a56 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378a:	2b00      	cmp	r3, #0
 800378c:	d008      	beq.n	80037a0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f042 020e 	orr.w	r2, r2, #14
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	e00f      	b.n	80037c0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0204 	bic.w	r2, r2, #4
 80037ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f042 020a 	orr.w	r2, r2, #10
 80037be:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d007      	beq.n	80037de <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037dc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d007      	beq.n	80037f6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037f4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f042 0201 	orr.w	r2, r2, #1
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	e005      	b.n	8003814 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003810:	2302      	movs	r3, #2
 8003812:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003814:	7dfb      	ldrb	r3, [r7, #23]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3718      	adds	r7, #24
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b084      	sub	sp, #16
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003826:	2300      	movs	r3, #0
 8003828:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d005      	beq.n	8003842 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2204      	movs	r2, #4
 800383a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	73fb      	strb	r3, [r7, #15]
 8003840:	e047      	b.n	80038d2 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 020e 	bic.w	r2, r2, #14
 8003850:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0201 	bic.w	r2, r2, #1
 8003860:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800386c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003870:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003876:	f003 021c 	and.w	r2, r3, #28
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387e:	2101      	movs	r1, #1
 8003880:	fa01 f202 	lsl.w	r2, r1, r2
 8003884:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800388e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003894:	2b00      	cmp	r3, #0
 8003896:	d00c      	beq.n	80038b2 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038a6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80038b0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	4798      	blx	r3
    }
  }
  return status;
 80038d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038f8:	f003 031c 	and.w	r3, r3, #28
 80038fc:	2204      	movs	r2, #4
 80038fe:	409a      	lsls	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4013      	ands	r3, r2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d026      	beq.n	8003956 <HAL_DMA_IRQHandler+0x7a>
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	f003 0304 	and.w	r3, r3, #4
 800390e:	2b00      	cmp	r3, #0
 8003910:	d021      	beq.n	8003956 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0320 	and.w	r3, r3, #32
 800391c:	2b00      	cmp	r3, #0
 800391e:	d107      	bne.n	8003930 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0204 	bic.w	r2, r2, #4
 800392e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003934:	f003 021c 	and.w	r2, r3, #28
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800393c:	2104      	movs	r1, #4
 800393e:	fa01 f202 	lsl.w	r2, r1, r2
 8003942:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003948:	2b00      	cmp	r3, #0
 800394a:	d071      	beq.n	8003a30 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003954:	e06c      	b.n	8003a30 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800395a:	f003 031c 	and.w	r3, r3, #28
 800395e:	2202      	movs	r2, #2
 8003960:	409a      	lsls	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	4013      	ands	r3, r2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d02e      	beq.n	80039c8 <HAL_DMA_IRQHandler+0xec>
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	2b00      	cmp	r3, #0
 8003972:	d029      	beq.n	80039c8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0320 	and.w	r3, r3, #32
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10b      	bne.n	800399a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 020a 	bic.w	r2, r2, #10
 8003990:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800399e:	f003 021c 	and.w	r2, r3, #28
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039a6:	2102      	movs	r1, #2
 80039a8:	fa01 f202 	lsl.w	r2, r1, r2
 80039ac:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d038      	beq.n	8003a30 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80039c6:	e033      	b.n	8003a30 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039cc:	f003 031c 	and.w	r3, r3, #28
 80039d0:	2208      	movs	r2, #8
 80039d2:	409a      	lsls	r2, r3
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	4013      	ands	r3, r2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d02a      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x156>
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	f003 0308 	and.w	r3, r3, #8
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d025      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 020e 	bic.w	r2, r2, #14
 80039f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039fa:	f003 021c 	and.w	r2, r3, #28
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a02:	2101      	movs	r1, #1
 8003a04:	fa01 f202 	lsl.w	r2, r1, r2
 8003a08:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d004      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a2c:	6878      	ldr	r0, [r7, #4]
 8003a2e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003a30:	bf00      	nop
 8003a32:	bf00      	nop
}
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a48:	b2db      	uxtb	r3, r3
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b085      	sub	sp, #20
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	60f8      	str	r0, [r7, #12]
 8003a5e:	60b9      	str	r1, [r7, #8]
 8003a60:	607a      	str	r2, [r7, #4]
 8003a62:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a6c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d004      	beq.n	8003a80 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003a7e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a84:	f003 021c 	and.w	r2, r3, #28
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a92:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	2b10      	cmp	r3, #16
 8003aa2:	d108      	bne.n	8003ab6 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003ab4:	e007      	b.n	8003ac6 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68ba      	ldr	r2, [r7, #8]
 8003abc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	60da      	str	r2, [r3, #12]
}
 8003ac6:	bf00      	nop
 8003ac8:	3714      	adds	r7, #20
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
	...

08003ad4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	4b17      	ldr	r3, [pc, #92]	@ (8003b40 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d80a      	bhi.n	8003afe <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aec:	089b      	lsrs	r3, r3, #2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003af4:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6493      	str	r3, [r2, #72]	@ 0x48
 8003afc:	e007      	b.n	8003b0e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b02:	089b      	lsrs	r3, r3, #2
 8003b04:	009a      	lsls	r2, r3, #2
 8003b06:	4b0f      	ldr	r3, [pc, #60]	@ (8003b44 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003b08:	4413      	add	r3, r2
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	3b08      	subs	r3, #8
 8003b16:	4a0c      	ldr	r2, [pc, #48]	@ (8003b48 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003b18:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1c:	091b      	lsrs	r3, r3, #4
 8003b1e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a0a      	ldr	r2, [pc, #40]	@ (8003b4c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003b24:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f003 031f 	and.w	r3, r3, #31
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	409a      	lsls	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003b34:	bf00      	nop
 8003b36:	3714      	adds	r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	40020407 	.word	0x40020407
 8003b44:	4002081c 	.word	0x4002081c
 8003b48:	cccccccd 	.word	0xcccccccd
 8003b4c:	40020880 	.word	0x40020880

08003b50 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b60:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	4b0b      	ldr	r3, [pc, #44]	@ (8003b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003b66:	4413      	add	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a09      	ldr	r2, [pc, #36]	@ (8003b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003b74:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	f003 0303 	and.w	r3, r3, #3
 8003b7e:	2201      	movs	r2, #1
 8003b80:	409a      	lsls	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003b86:	bf00      	nop
 8003b88:	3714      	adds	r7, #20
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	1000823f 	.word	0x1000823f
 8003b98:	40020940 	.word	0x40020940

08003b9c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003baa:	e14c      	b.n	8003e46 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb8:	4013      	ands	r3, r2
 8003bba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 813e 	beq.w	8003e40 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f003 0303 	and.w	r3, r3, #3
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d005      	beq.n	8003bdc <HAL_GPIO_Init+0x40>
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f003 0303 	and.w	r3, r3, #3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d130      	bne.n	8003c3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	2203      	movs	r2, #3
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	43db      	mvns	r3, r3
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	68da      	ldr	r2, [r3, #12]
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c12:	2201      	movs	r2, #1
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	091b      	lsrs	r3, r3, #4
 8003c28:	f003 0201 	and.w	r2, r3, #1
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	2b03      	cmp	r3, #3
 8003c48:	d017      	beq.n	8003c7a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	2203      	movs	r2, #3
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d123      	bne.n	8003cce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	08da      	lsrs	r2, r3, #3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	3208      	adds	r2, #8
 8003c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	220f      	movs	r2, #15
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	691a      	ldr	r2, [r3, #16]
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	08da      	lsrs	r2, r3, #3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3208      	adds	r2, #8
 8003cc8:	6939      	ldr	r1, [r7, #16]
 8003cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	005b      	lsls	r3, r3, #1
 8003cd8:	2203      	movs	r2, #3
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	43db      	mvns	r3, r3
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f003 0203 	and.w	r2, r3, #3
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	f000 8098 	beq.w	8003e40 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003d10:	4a54      	ldr	r2, [pc, #336]	@ (8003e64 <HAL_GPIO_Init+0x2c8>)
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	089b      	lsrs	r3, r3, #2
 8003d16:	3302      	adds	r3, #2
 8003d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f003 0303 	and.w	r3, r3, #3
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	220f      	movs	r2, #15
 8003d28:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	4013      	ands	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003d3a:	d019      	beq.n	8003d70 <HAL_GPIO_Init+0x1d4>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a4a      	ldr	r2, [pc, #296]	@ (8003e68 <HAL_GPIO_Init+0x2cc>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d013      	beq.n	8003d6c <HAL_GPIO_Init+0x1d0>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a49      	ldr	r2, [pc, #292]	@ (8003e6c <HAL_GPIO_Init+0x2d0>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d00d      	beq.n	8003d68 <HAL_GPIO_Init+0x1cc>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a48      	ldr	r2, [pc, #288]	@ (8003e70 <HAL_GPIO_Init+0x2d4>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d007      	beq.n	8003d64 <HAL_GPIO_Init+0x1c8>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a47      	ldr	r2, [pc, #284]	@ (8003e74 <HAL_GPIO_Init+0x2d8>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d101      	bne.n	8003d60 <HAL_GPIO_Init+0x1c4>
 8003d5c:	2304      	movs	r3, #4
 8003d5e:	e008      	b.n	8003d72 <HAL_GPIO_Init+0x1d6>
 8003d60:	2307      	movs	r3, #7
 8003d62:	e006      	b.n	8003d72 <HAL_GPIO_Init+0x1d6>
 8003d64:	2303      	movs	r3, #3
 8003d66:	e004      	b.n	8003d72 <HAL_GPIO_Init+0x1d6>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e002      	b.n	8003d72 <HAL_GPIO_Init+0x1d6>
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e000      	b.n	8003d72 <HAL_GPIO_Init+0x1d6>
 8003d70:	2300      	movs	r3, #0
 8003d72:	697a      	ldr	r2, [r7, #20]
 8003d74:	f002 0203 	and.w	r2, r2, #3
 8003d78:	0092      	lsls	r2, r2, #2
 8003d7a:	4093      	lsls	r3, r2
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d82:	4938      	ldr	r1, [pc, #224]	@ (8003e64 <HAL_GPIO_Init+0x2c8>)
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	089b      	lsrs	r3, r3, #2
 8003d88:	3302      	adds	r3, #2
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d90:	4b39      	ldr	r3, [pc, #228]	@ (8003e78 <HAL_GPIO_Init+0x2dc>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	43db      	mvns	r3, r3
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d003      	beq.n	8003db4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003db4:	4a30      	ldr	r2, [pc, #192]	@ (8003e78 <HAL_GPIO_Init+0x2dc>)
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003dba:	4b2f      	ldr	r3, [pc, #188]	@ (8003e78 <HAL_GPIO_Init+0x2dc>)
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	43db      	mvns	r3, r3
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d003      	beq.n	8003dde <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003dde:	4a26      	ldr	r2, [pc, #152]	@ (8003e78 <HAL_GPIO_Init+0x2dc>)
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003de4:	4b24      	ldr	r3, [pc, #144]	@ (8003e78 <HAL_GPIO_Init+0x2dc>)
 8003de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	43db      	mvns	r3, r3
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	4013      	ands	r3, r2
 8003df4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e0a:	4a1b      	ldr	r2, [pc, #108]	@ (8003e78 <HAL_GPIO_Init+0x2dc>)
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8003e12:	4b19      	ldr	r3, [pc, #100]	@ (8003e78 <HAL_GPIO_Init+0x2dc>)
 8003e14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	43db      	mvns	r3, r3
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	4013      	ands	r3, r2
 8003e22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d003      	beq.n	8003e38 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e38:	4a0f      	ldr	r2, [pc, #60]	@ (8003e78 <HAL_GPIO_Init+0x2dc>)
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	3301      	adds	r3, #1
 8003e44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f47f aeab 	bne.w	8003bac <HAL_GPIO_Init+0x10>
  }
}
 8003e56:	bf00      	nop
 8003e58:	bf00      	nop
 8003e5a:	371c      	adds	r7, #28
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	40010000 	.word	0x40010000
 8003e68:	48000400 	.word	0x48000400
 8003e6c:	48000800 	.word	0x48000800
 8003e70:	48000c00 	.word	0x48000c00
 8003e74:	48001000 	.word	0x48001000
 8003e78:	58000800 	.word	0x58000800

08003e7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	460b      	mov	r3, r1
 8003e86:	807b      	strh	r3, [r7, #2]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e8c:	787b      	ldrb	r3, [r7, #1]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e92:	887a      	ldrh	r2, [r7, #2]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e98:	e002      	b.n	8003ea0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e9a:	887a      	ldrh	r2, [r7, #2]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	695b      	ldr	r3, [r3, #20]
 8003ebc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ebe:	887a      	ldrh	r2, [r7, #2]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	041a      	lsls	r2, r3, #16
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	43d9      	mvns	r1, r3
 8003eca:	887b      	ldrh	r3, [r7, #2]
 8003ecc:	400b      	ands	r3, r1
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	619a      	str	r2, [r3, #24]
}
 8003ed4:	bf00      	nop
 8003ed6:	3714      	adds	r7, #20
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr

08003ee0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003eea:	4b08      	ldr	r3, [pc, #32]	@ (8003f0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003eec:	68da      	ldr	r2, [r3, #12]
 8003eee:	88fb      	ldrh	r3, [r7, #6]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d006      	beq.n	8003f04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ef6:	4a05      	ldr	r2, [pc, #20]	@ (8003f0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ef8:	88fb      	ldrh	r3, [r7, #6]
 8003efa:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003efc:	88fb      	ldrh	r3, [r7, #6]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 f806 	bl	8003f10 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f04:	bf00      	nop
 8003f06:	3708      	adds	r7, #8
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	58000800 	.word	0x58000800

08003f10 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	4603      	mov	r3, r0
 8003f18:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f26:	b580      	push	{r7, lr}
 8003f28:	b082      	sub	sp, #8
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d101      	bne.n	8003f38 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e08d      	b.n	8004054 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d106      	bne.n	8003f52 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f7fd fafd 	bl	800154c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2224      	movs	r2, #36	@ 0x24
 8003f56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 0201 	bic.w	r2, r2, #1
 8003f68:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f76:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f86:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d107      	bne.n	8003fa0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f9c:	609a      	str	r2, [r3, #8]
 8003f9e:	e006      	b.n	8003fae <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003fac:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d108      	bne.n	8003fc8 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fc4:	605a      	str	r2, [r3, #4]
 8003fc6:	e007      	b.n	8003fd8 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003fd6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	6812      	ldr	r2, [r2, #0]
 8003fe2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003fe6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fea:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68da      	ldr	r2, [r3, #12]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ffa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	691a      	ldr	r2, [r3, #16]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69d9      	ldr	r1, [r3, #28]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a1a      	ldr	r2, [r3, #32]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f042 0201 	orr.w	r2, r2, #1
 8004034:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2220      	movs	r2, #32
 8004040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004052:	2300      	movs	r3, #0
}
 8004054:	4618      	mov	r0, r3
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004078:	2b00      	cmp	r3, #0
 800407a:	d005      	beq.n	8004088 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	68f9      	ldr	r1, [r7, #12]
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	4798      	blx	r3
  }
}
 8004088:	bf00      	nop
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00f      	beq.n	80040d2 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00a      	beq.n	80040d2 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c0:	f043 0201 	orr.w	r2, r3, #1
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80040d0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00f      	beq.n	80040fc <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00a      	beq.n	80040fc <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ea:	f043 0208 	orr.w	r2, r3, #8
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80040fa:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00f      	beq.n	8004126 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00a      	beq.n	8004126 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004114:	f043 0202 	orr.w	r2, r3, #2
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004124:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800412a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f003 030b 	and.w	r3, r3, #11
 8004132:	2b00      	cmp	r3, #0
 8004134:	d003      	beq.n	800413e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8004136:	68f9      	ldr	r1, [r7, #12]
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 fbd5 	bl	80048e8 <I2C_ITError>
  }
}
 800413e:	bf00      	nop
 8004140:	3718      	adds	r7, #24
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004146:	b480      	push	{r7}
 8004148:	b083      	sub	sp, #12
 800414a:	af00      	add	r7, sp, #0
 800414c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800414e:	bf00      	nop
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr

0800415a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800415a:	b480      	push	{r7}
 800415c:	b083      	sub	sp, #12
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004162:	bf00      	nop
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800416e:	b480      	push	{r7}
 8004170:	b083      	sub	sp, #12
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
 8004176:	460b      	mov	r3, r1
 8004178:	70fb      	strb	r3, [r7, #3]
 800417a:	4613      	mov	r3, r2
 800417c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800417e:	bf00      	nop
 8004180:	370c      	adds	r7, #12
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr

0800418a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800418a:	b480      	push	{r7}
 800418c:	b083      	sub	sp, #12
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b083      	sub	sp, #12
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80041c6:	b580      	push	{r7, lr}
 80041c8:	b086      	sub	sp, #24
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	60f8      	str	r0, [r7, #12]
 80041ce:	60b9      	str	r1, [r7, #8]
 80041d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d101      	bne.n	80041ea <I2C_Slave_ISR_IT+0x24>
 80041e6:	2302      	movs	r3, #2
 80041e8:	e0e2      	b.n	80043b0 <I2C_Slave_ISR_IT+0x1ea>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f003 0320 	and.w	r3, r3, #32
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d009      	beq.n	8004210 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004202:	2b00      	cmp	r3, #0
 8004204:	d004      	beq.n	8004210 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004206:	6939      	ldr	r1, [r7, #16]
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 f9b5 	bl	8004578 <I2C_ITSlaveCplt>
 800420e:	e0ca      	b.n	80043a6 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	f003 0310 	and.w	r3, r3, #16
 8004216:	2b00      	cmp	r3, #0
 8004218:	d04b      	beq.n	80042b2 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004220:	2b00      	cmp	r3, #0
 8004222:	d046      	beq.n	80042b2 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004228:	b29b      	uxth	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d128      	bne.n	8004280 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b28      	cmp	r3, #40	@ 0x28
 8004238:	d108      	bne.n	800424c <I2C_Slave_ISR_IT+0x86>
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004240:	d104      	bne.n	800424c <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004242:	6939      	ldr	r1, [r7, #16]
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f000 fafb 	bl	8004840 <I2C_ITListenCplt>
 800424a:	e031      	b.n	80042b0 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b29      	cmp	r3, #41	@ 0x29
 8004256:	d10e      	bne.n	8004276 <I2C_Slave_ISR_IT+0xb0>
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800425e:	d00a      	beq.n	8004276 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2210      	movs	r2, #16
 8004266:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 fc54 	bl	8004b16 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f000 f926 	bl	80044c0 <I2C_ITSlaveSeqCplt>
 8004274:	e01c      	b.n	80042b0 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2210      	movs	r2, #16
 800427c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800427e:	e08f      	b.n	80043a0 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	2210      	movs	r2, #16
 8004286:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800428c:	f043 0204 	orr.w	r2, r3, #4
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d003      	beq.n	80042a2 <I2C_Slave_ISR_IT+0xdc>
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042a0:	d17e      	bne.n	80043a0 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042a6:	4619      	mov	r1, r3
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f000 fb1d 	bl	80048e8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80042ae:	e077      	b.n	80043a0 <I2C_Slave_ISR_IT+0x1da>
 80042b0:	e076      	b.n	80043a0 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	f003 0304 	and.w	r3, r3, #4
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d02f      	beq.n	800431c <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d02a      	beq.n	800431c <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d018      	beq.n	8004302 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042da:	b2d2      	uxtb	r2, r2
 80042dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ec:	3b01      	subs	r3, #1
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	3b01      	subs	r3, #1
 80042fc:	b29a      	uxth	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004306:	b29b      	uxth	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	d14b      	bne.n	80043a4 <I2C_Slave_ISR_IT+0x1de>
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004312:	d047      	beq.n	80043a4 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 f8d3 	bl	80044c0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800431a:	e043      	b.n	80043a4 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	f003 0308 	and.w	r3, r3, #8
 8004322:	2b00      	cmp	r3, #0
 8004324:	d009      	beq.n	800433a <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800432c:	2b00      	cmp	r3, #0
 800432e:	d004      	beq.n	800433a <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004330:	6939      	ldr	r1, [r7, #16]
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 f840 	bl	80043b8 <I2C_ITAddrCplt>
 8004338:	e035      	b.n	80043a6 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d030      	beq.n	80043a6 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800434a:	2b00      	cmp	r3, #0
 800434c:	d02b      	beq.n	80043a6 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004352:	b29b      	uxth	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d018      	beq.n	800438a <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435c:	781a      	ldrb	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004368:	1c5a      	adds	r2, r3, #1
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004372:	b29b      	uxth	r3, r3
 8004374:	3b01      	subs	r3, #1
 8004376:	b29a      	uxth	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004380:	3b01      	subs	r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004388:	e00d      	b.n	80043a6 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004390:	d002      	beq.n	8004398 <I2C_Slave_ISR_IT+0x1d2>
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d106      	bne.n	80043a6 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	f000 f891 	bl	80044c0 <I2C_ITSlaveSeqCplt>
 800439e:	e002      	b.n	80043a6 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80043a0:	bf00      	nop
 80043a2:	e000      	b.n	80043a6 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80043a4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80043ae:	2300      	movs	r3, #0
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3718      	adds	r7, #24
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80043ce:	2b28      	cmp	r3, #40	@ 0x28
 80043d0:	d16a      	bne.n	80044a8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	0c1b      	lsrs	r3, r3, #16
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	0c1b      	lsrs	r3, r3, #16
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80043f0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	b29b      	uxth	r3, r3
 80043fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043fe:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	b29b      	uxth	r3, r3
 8004408:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800440c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	2b02      	cmp	r3, #2
 8004414:	d138      	bne.n	8004488 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004416:	897b      	ldrh	r3, [r7, #10]
 8004418:	09db      	lsrs	r3, r3, #7
 800441a:	b29a      	uxth	r2, r3
 800441c:	89bb      	ldrh	r3, [r7, #12]
 800441e:	4053      	eors	r3, r2
 8004420:	b29b      	uxth	r3, r3
 8004422:	f003 0306 	and.w	r3, r3, #6
 8004426:	2b00      	cmp	r3, #0
 8004428:	d11c      	bne.n	8004464 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800442a:	897b      	ldrh	r3, [r7, #10]
 800442c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004432:	1c5a      	adds	r2, r3, #1
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800443c:	2b02      	cmp	r3, #2
 800443e:	d13b      	bne.n	80044b8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2208      	movs	r2, #8
 800444c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004456:	89ba      	ldrh	r2, [r7, #12]
 8004458:	7bfb      	ldrb	r3, [r7, #15]
 800445a:	4619      	mov	r1, r3
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f7ff fe86 	bl	800416e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004462:	e029      	b.n	80044b8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004464:	893b      	ldrh	r3, [r7, #8]
 8004466:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004468:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f000 fb94 	bl	8004b9a <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800447a:	89ba      	ldrh	r2, [r7, #12]
 800447c:	7bfb      	ldrb	r3, [r7, #15]
 800447e:	4619      	mov	r1, r3
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f7ff fe74 	bl	800416e <HAL_I2C_AddrCallback>
}
 8004486:	e017      	b.n	80044b8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004488:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 fb84 	bl	8004b9a <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800449a:	89ba      	ldrh	r2, [r7, #12]
 800449c:	7bfb      	ldrb	r3, [r7, #15]
 800449e:	4619      	mov	r1, r3
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7ff fe64 	bl	800416e <HAL_I2C_AddrCallback>
}
 80044a6:	e007      	b.n	80044b8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2208      	movs	r2, #8
 80044ae:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80044b8:	bf00      	nop
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d008      	beq.n	80044f4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	e00c      	b.n	800450e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d007      	beq.n	800450e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800450c:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b29      	cmp	r3, #41	@ 0x29
 8004518:	d112      	bne.n	8004540 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2228      	movs	r2, #40	@ 0x28
 800451e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2221      	movs	r2, #33	@ 0x21
 8004526:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004528:	2101      	movs	r1, #1
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 fb35 	bl	8004b9a <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f7ff fe04 	bl	8004146 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800453e:	e017      	b.n	8004570 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b2a      	cmp	r3, #42	@ 0x2a
 800454a:	d111      	bne.n	8004570 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2228      	movs	r2, #40	@ 0x28
 8004550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2222      	movs	r2, #34	@ 0x22
 8004558:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800455a:	2102      	movs	r1, #2
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 fb1c 	bl	8004b9a <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7ff fdf5 	bl	800415a <HAL_I2C_SlaveRxCpltCallback>
}
 8004570:	bf00      	nop
 8004572:	3710      	adds	r7, #16
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b086      	sub	sp, #24
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004592:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800459a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2220      	movs	r2, #32
 80045a2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80045a4:	7afb      	ldrb	r3, [r7, #11]
 80045a6:	2b21      	cmp	r3, #33	@ 0x21
 80045a8:	d002      	beq.n	80045b0 <I2C_ITSlaveCplt+0x38>
 80045aa:	7afb      	ldrb	r3, [r7, #11]
 80045ac:	2b29      	cmp	r3, #41	@ 0x29
 80045ae:	d108      	bne.n	80045c2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80045b0:	f248 0101 	movw	r1, #32769	@ 0x8001
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 faf0 	bl	8004b9a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2221      	movs	r2, #33	@ 0x21
 80045be:	631a      	str	r2, [r3, #48]	@ 0x30
 80045c0:	e019      	b.n	80045f6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80045c2:	7afb      	ldrb	r3, [r7, #11]
 80045c4:	2b22      	cmp	r3, #34	@ 0x22
 80045c6:	d002      	beq.n	80045ce <I2C_ITSlaveCplt+0x56>
 80045c8:	7afb      	ldrb	r3, [r7, #11]
 80045ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80045cc:	d108      	bne.n	80045e0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80045ce:	f248 0102 	movw	r1, #32770	@ 0x8002
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 fae1 	bl	8004b9a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2222      	movs	r2, #34	@ 0x22
 80045dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80045de:	e00a      	b.n	80045f6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80045e0:	7afb      	ldrb	r3, [r7, #11]
 80045e2:	2b28      	cmp	r3, #40	@ 0x28
 80045e4:	d107      	bne.n	80045f6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80045e6:	f248 0103 	movw	r1, #32771	@ 0x8003
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 fad5 	bl	8004b9a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	685a      	ldr	r2, [r3, #4]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004604:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6859      	ldr	r1, [r3, #4]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	4b89      	ldr	r3, [pc, #548]	@ (8004838 <I2C_ITSlaveCplt+0x2c0>)
 8004612:	400b      	ands	r3, r1
 8004614:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 fa7d 	bl	8004b16 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d013      	beq.n	800464e <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004634:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800463a:	2b00      	cmp	r3, #0
 800463c:	d01f      	beq.n	800467e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	b29a      	uxth	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800464c:	e017      	b.n	800467e <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d012      	beq.n	800467e <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004666:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800466c:	2b00      	cmp	r3, #0
 800466e:	d006      	beq.n	800467e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	b29a      	uxth	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b00      	cmp	r3, #0
 8004686:	d020      	beq.n	80046ca <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f023 0304 	bic.w	r3, r3, #4
 800468e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800469a:	b2d2      	uxtb	r2, r2
 800469c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a2:	1c5a      	adds	r2, r3, #1
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00c      	beq.n	80046ca <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046b4:	3b01      	subs	r3, #1
 80046b6:	b29a      	uxth	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	3b01      	subs	r3, #1
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d005      	beq.n	80046e0 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046d8:	f043 0204 	orr.w	r2, r3, #4
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f003 0310 	and.w	r3, r3, #16
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d049      	beq.n	800477e <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d044      	beq.n	800477e <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d128      	bne.n	8004750 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b28      	cmp	r3, #40	@ 0x28
 8004708:	d108      	bne.n	800471c <I2C_ITSlaveCplt+0x1a4>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004710:	d104      	bne.n	800471c <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004712:	6979      	ldr	r1, [r7, #20]
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 f893 	bl	8004840 <I2C_ITListenCplt>
 800471a:	e030      	b.n	800477e <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b29      	cmp	r3, #41	@ 0x29
 8004726:	d10e      	bne.n	8004746 <I2C_ITSlaveCplt+0x1ce>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800472e:	d00a      	beq.n	8004746 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2210      	movs	r2, #16
 8004736:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 f9ec 	bl	8004b16 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f7ff febe 	bl	80044c0 <I2C_ITSlaveSeqCplt>
 8004744:	e01b      	b.n	800477e <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2210      	movs	r2, #16
 800474c:	61da      	str	r2, [r3, #28]
 800474e:	e016      	b.n	800477e <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2210      	movs	r2, #16
 8004756:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800475c:	f043 0204 	orr.w	r2, r3, #4
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <I2C_ITSlaveCplt+0x1fa>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004770:	d105      	bne.n	800477e <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004776:	4619      	mov	r1, r3
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 f8b5 	bl	80048e8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004790:	2b00      	cmp	r3, #0
 8004792:	d010      	beq.n	80047b6 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004798:	4619      	mov	r1, r3
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f8a4 	bl	80048e8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b28      	cmp	r3, #40	@ 0x28
 80047aa:	d141      	bne.n	8004830 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80047ac:	6979      	ldr	r1, [r7, #20]
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f846 	bl	8004840 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80047b4:	e03c      	b.n	8004830 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ba:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80047be:	d014      	beq.n	80047ea <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f7ff fe7d 	bl	80044c0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a1c      	ldr	r2, [pc, #112]	@ (800483c <I2C_ITSlaveCplt+0x2c4>)
 80047ca:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2220      	movs	r2, #32
 80047d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7ff fcd1 	bl	800418a <HAL_I2C_ListenCpltCallback>
}
 80047e8:	e022      	b.n	8004830 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b22      	cmp	r3, #34	@ 0x22
 80047f4:	d10e      	bne.n	8004814 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2220      	movs	r2, #32
 80047fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800480c:	6878      	ldr	r0, [r7, #4]
 800480e:	f7ff fca4 	bl	800415a <HAL_I2C_SlaveRxCpltCallback>
}
 8004812:	e00d      	b.n	8004830 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2220      	movs	r2, #32
 8004818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f7ff fc8b 	bl	8004146 <HAL_I2C_SlaveTxCpltCallback>
}
 8004830:	bf00      	nop
 8004832:	3718      	adds	r7, #24
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	fe00e800 	.word	0xfe00e800
 800483c:	ffff0000 	.word	0xffff0000

08004840 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a25      	ldr	r2, [pc, #148]	@ (80048e4 <I2C_ITListenCplt+0xa4>)
 800484e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2220      	movs	r2, #32
 800485a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	f003 0304 	and.w	r3, r3, #4
 8004872:	2b00      	cmp	r3, #0
 8004874:	d022      	beq.n	80048bc <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004880:	b2d2      	uxtb	r2, r2
 8004882:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004888:	1c5a      	adds	r2, r3, #1
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004892:	2b00      	cmp	r3, #0
 8004894:	d012      	beq.n	80048bc <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800489a:	3b01      	subs	r3, #1
 800489c:	b29a      	uxth	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	3b01      	subs	r3, #1
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b4:	f043 0204 	orr.w	r2, r3, #4
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80048bc:	f248 0103 	movw	r1, #32771	@ 0x8003
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 f96a 	bl	8004b9a <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2210      	movs	r2, #16
 80048cc:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7ff fc57 	bl	800418a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80048dc:	bf00      	nop
 80048de:	3708      	adds	r7, #8
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	ffff0000 	.word	0xffff0000

080048e8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048f8:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a6d      	ldr	r2, [pc, #436]	@ (8004abc <I2C_ITError+0x1d4>)
 8004906:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	431a      	orrs	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800491a:	7bfb      	ldrb	r3, [r7, #15]
 800491c:	2b28      	cmp	r3, #40	@ 0x28
 800491e:	d005      	beq.n	800492c <I2C_ITError+0x44>
 8004920:	7bfb      	ldrb	r3, [r7, #15]
 8004922:	2b29      	cmp	r3, #41	@ 0x29
 8004924:	d002      	beq.n	800492c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004926:	7bfb      	ldrb	r3, [r7, #15]
 8004928:	2b2a      	cmp	r3, #42	@ 0x2a
 800492a:	d10b      	bne.n	8004944 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800492c:	2103      	movs	r1, #3
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f933 	bl	8004b9a <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2228      	movs	r2, #40	@ 0x28
 8004938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a60      	ldr	r2, [pc, #384]	@ (8004ac0 <I2C_ITError+0x1d8>)
 8004940:	635a      	str	r2, [r3, #52]	@ 0x34
 8004942:	e030      	b.n	80049a6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004944:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 f926 	bl	8004b9a <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f8e1 	bl	8004b16 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800495a:	b2db      	uxtb	r3, r3
 800495c:	2b60      	cmp	r3, #96	@ 0x60
 800495e:	d01f      	beq.n	80049a0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2220      	movs	r2, #32
 8004964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	699b      	ldr	r3, [r3, #24]
 800496e:	f003 0320 	and.w	r3, r3, #32
 8004972:	2b20      	cmp	r3, #32
 8004974:	d114      	bne.n	80049a0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	f003 0310 	and.w	r3, r3, #16
 8004980:	2b10      	cmp	r3, #16
 8004982:	d109      	bne.n	8004998 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2210      	movs	r2, #16
 800498a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004990:	f043 0204 	orr.w	r2, r3, #4
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2220      	movs	r2, #32
 800499e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049aa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d039      	beq.n	8004a28 <I2C_ITError+0x140>
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	2b11      	cmp	r3, #17
 80049b8:	d002      	beq.n	80049c0 <I2C_ITError+0xd8>
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	2b21      	cmp	r3, #33	@ 0x21
 80049be:	d133      	bne.n	8004a28 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049ce:	d107      	bne.n	80049e0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80049de:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7ff f828 	bl	8003a3a <HAL_DMA_GetState>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d017      	beq.n	8004a20 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049f4:	4a33      	ldr	r2, [pc, #204]	@ (8004ac4 <I2C_ITError+0x1dc>)
 80049f6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a04:	4618      	mov	r0, r3
 8004a06:	f7fe ff0a 	bl	800381e <HAL_DMA_Abort_IT>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d04d      	beq.n	8004aac <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004a1a:	4610      	mov	r0, r2
 8004a1c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a1e:	e045      	b.n	8004aac <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f851 	bl	8004ac8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a26:	e041      	b.n	8004aac <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d039      	beq.n	8004aa4 <I2C_ITError+0x1bc>
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	2b12      	cmp	r3, #18
 8004a34:	d002      	beq.n	8004a3c <I2C_ITError+0x154>
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	2b22      	cmp	r3, #34	@ 0x22
 8004a3a:	d133      	bne.n	8004aa4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a4a:	d107      	bne.n	8004a5c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a5a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7fe ffea 	bl	8003a3a <HAL_DMA_GetState>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d017      	beq.n	8004a9c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a70:	4a14      	ldr	r2, [pc, #80]	@ (8004ac4 <I2C_ITError+0x1dc>)
 8004a72:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7fe fecc 	bl	800381e <HAL_DMA_Abort_IT>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d011      	beq.n	8004ab0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004a96:	4610      	mov	r0, r2
 8004a98:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a9a:	e009      	b.n	8004ab0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	f000 f813 	bl	8004ac8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004aa2:	e005      	b.n	8004ab0 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 f80f 	bl	8004ac8 <I2C_TreatErrorCallback>
  }
}
 8004aaa:	e002      	b.n	8004ab2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004aac:	bf00      	nop
 8004aae:	e000      	b.n	8004ab2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ab0:	bf00      	nop
}
 8004ab2:	bf00      	nop
 8004ab4:	3710      	adds	r7, #16
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	ffff0000 	.word	0xffff0000
 8004ac0:	080041c7 	.word	0x080041c7
 8004ac4:	08004b5f 	.word	0x08004b5f

08004ac8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	2b60      	cmp	r3, #96	@ 0x60
 8004ada:	d10e      	bne.n	8004afa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7ff fb5d 	bl	80041b2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004af8:	e009      	b.n	8004b0e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f7ff fb48 	bl	800419e <HAL_I2C_ErrorCallback>
}
 8004b0e:	bf00      	nop
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d103      	bne.n	8004b34 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2200      	movs	r2, #0
 8004b32:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d007      	beq.n	8004b52 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	699a      	ldr	r2, [r3, #24]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f042 0201 	orr.w	r2, r2, #1
 8004b50:	619a      	str	r2, [r3, #24]
  }
}
 8004b52:	bf00      	nop
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b084      	sub	sp, #16
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d003      	beq.n	8004b7c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b78:	2200      	movs	r2, #0
 8004b7a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d003      	beq.n	8004b8c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b88:	2200      	movs	r2, #0
 8004b8a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f7ff ff9b 	bl	8004ac8 <I2C_TreatErrorCallback>
}
 8004b92:	bf00      	nop
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b085      	sub	sp, #20
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004baa:	887b      	ldrh	r3, [r7, #2]
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00f      	beq.n	8004bd4 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8004bba:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004bc8:	2b28      	cmp	r3, #40	@ 0x28
 8004bca:	d003      	beq.n	8004bd4 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004bd2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004bd4:	887b      	ldrh	r3, [r7, #2]
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00f      	beq.n	8004bfe <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8004be4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004bf2:	2b28      	cmp	r3, #40	@ 0x28
 8004bf4:	d003      	beq.n	8004bfe <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004bfc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004bfe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	da03      	bge.n	8004c0e <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004c0c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004c0e:	887b      	ldrh	r3, [r7, #2]
 8004c10:	2b10      	cmp	r3, #16
 8004c12:	d103      	bne.n	8004c1c <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004c1a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004c1c:	887b      	ldrh	r3, [r7, #2]
 8004c1e:	2b20      	cmp	r3, #32
 8004c20:	d103      	bne.n	8004c2a <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f043 0320 	orr.w	r3, r3, #32
 8004c28:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004c2a:	887b      	ldrh	r3, [r7, #2]
 8004c2c:	2b40      	cmp	r3, #64	@ 0x40
 8004c2e:	d103      	bne.n	8004c38 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c36:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6819      	ldr	r1, [r3, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	43da      	mvns	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	400a      	ands	r2, r1
 8004c48:	601a      	str	r2, [r3, #0]
}
 8004c4a:	bf00      	nop
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b20      	cmp	r3, #32
 8004c6a:	d138      	bne.n	8004cde <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d101      	bne.n	8004c7a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004c76:	2302      	movs	r3, #2
 8004c78:	e032      	b.n	8004ce0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2224      	movs	r2, #36	@ 0x24
 8004c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 0201 	bic.w	r2, r2, #1
 8004c98:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004ca8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	6819      	ldr	r1, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f042 0201 	orr.w	r2, r2, #1
 8004cc8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	e000      	b.n	8004ce0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004cde:	2302      	movs	r3, #2
  }
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b20      	cmp	r3, #32
 8004d00:	d139      	bne.n	8004d76 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d101      	bne.n	8004d10 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	e033      	b.n	8004d78 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2224      	movs	r2, #36	@ 0x24
 8004d1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 0201 	bic.w	r2, r2, #1
 8004d2e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004d3e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	021b      	lsls	r3, r3, #8
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f042 0201 	orr.w	r2, r2, #1
 8004d60:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2220      	movs	r2, #32
 8004d66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d72:	2300      	movs	r3, #0
 8004d74:	e000      	b.n	8004d78 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004d76:	2302      	movs	r3, #2
  }
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3714      	adds	r7, #20
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e0c0      	b.n	8004f18 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d106      	bne.n	8004db0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f009 f9aa 	bl	800e104 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2203      	movs	r2, #3
 8004db4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f004 fc7f 	bl	80096c0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	73fb      	strb	r3, [r7, #15]
 8004dc6:	e03e      	b.n	8004e46 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004dc8:	7bfa      	ldrb	r2, [r7, #15]
 8004dca:	6879      	ldr	r1, [r7, #4]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	00db      	lsls	r3, r3, #3
 8004dd4:	440b      	add	r3, r1
 8004dd6:	3311      	adds	r3, #17
 8004dd8:	2201      	movs	r2, #1
 8004dda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004ddc:	7bfa      	ldrb	r2, [r7, #15]
 8004dde:	6879      	ldr	r1, [r7, #4]
 8004de0:	4613      	mov	r3, r2
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	4413      	add	r3, r2
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	440b      	add	r3, r1
 8004dea:	3310      	adds	r3, #16
 8004dec:	7bfa      	ldrb	r2, [r7, #15]
 8004dee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004df0:	7bfa      	ldrb	r2, [r7, #15]
 8004df2:	6879      	ldr	r1, [r7, #4]
 8004df4:	4613      	mov	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4413      	add	r3, r2
 8004dfa:	00db      	lsls	r3, r3, #3
 8004dfc:	440b      	add	r3, r1
 8004dfe:	3313      	adds	r3, #19
 8004e00:	2200      	movs	r2, #0
 8004e02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004e04:	7bfa      	ldrb	r2, [r7, #15]
 8004e06:	6879      	ldr	r1, [r7, #4]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4413      	add	r3, r2
 8004e0e:	00db      	lsls	r3, r3, #3
 8004e10:	440b      	add	r3, r1
 8004e12:	3320      	adds	r3, #32
 8004e14:	2200      	movs	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004e18:	7bfa      	ldrb	r2, [r7, #15]
 8004e1a:	6879      	ldr	r1, [r7, #4]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	00db      	lsls	r3, r3, #3
 8004e24:	440b      	add	r3, r1
 8004e26:	3324      	adds	r3, #36	@ 0x24
 8004e28:	2200      	movs	r2, #0
 8004e2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004e2c:	7bfb      	ldrb	r3, [r7, #15]
 8004e2e:	6879      	ldr	r1, [r7, #4]
 8004e30:	1c5a      	adds	r2, r3, #1
 8004e32:	4613      	mov	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	4413      	add	r3, r2
 8004e38:	00db      	lsls	r3, r3, #3
 8004e3a:	440b      	add	r3, r1
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e40:	7bfb      	ldrb	r3, [r7, #15]
 8004e42:	3301      	adds	r3, #1
 8004e44:	73fb      	strb	r3, [r7, #15]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	791b      	ldrb	r3, [r3, #4]
 8004e4a:	7bfa      	ldrb	r2, [r7, #15]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d3bb      	bcc.n	8004dc8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e50:	2300      	movs	r3, #0
 8004e52:	73fb      	strb	r3, [r7, #15]
 8004e54:	e044      	b.n	8004ee0 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004e56:	7bfa      	ldrb	r2, [r7, #15]
 8004e58:	6879      	ldr	r1, [r7, #4]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	4413      	add	r3, r2
 8004e60:	00db      	lsls	r3, r3, #3
 8004e62:	440b      	add	r3, r1
 8004e64:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8004e68:	2200      	movs	r2, #0
 8004e6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004e6c:	7bfa      	ldrb	r2, [r7, #15]
 8004e6e:	6879      	ldr	r1, [r7, #4]
 8004e70:	4613      	mov	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	440b      	add	r3, r1
 8004e7a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004e7e:	7bfa      	ldrb	r2, [r7, #15]
 8004e80:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004e82:	7bfa      	ldrb	r2, [r7, #15]
 8004e84:	6879      	ldr	r1, [r7, #4]
 8004e86:	4613      	mov	r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	4413      	add	r3, r2
 8004e8c:	00db      	lsls	r3, r3, #3
 8004e8e:	440b      	add	r3, r1
 8004e90:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004e94:	2200      	movs	r2, #0
 8004e96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004e98:	7bfa      	ldrb	r2, [r7, #15]
 8004e9a:	6879      	ldr	r1, [r7, #4]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4413      	add	r3, r2
 8004ea2:	00db      	lsls	r3, r3, #3
 8004ea4:	440b      	add	r3, r1
 8004ea6:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004eaa:	2200      	movs	r2, #0
 8004eac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004eae:	7bfa      	ldrb	r2, [r7, #15]
 8004eb0:	6879      	ldr	r1, [r7, #4]
 8004eb2:	4613      	mov	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	4413      	add	r3, r2
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	440b      	add	r3, r1
 8004ebc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004ec4:	7bfa      	ldrb	r2, [r7, #15]
 8004ec6:	6879      	ldr	r1, [r7, #4]
 8004ec8:	4613      	mov	r3, r2
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	4413      	add	r3, r2
 8004ece:	00db      	lsls	r3, r3, #3
 8004ed0:	440b      	add	r3, r1
 8004ed2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004eda:	7bfb      	ldrb	r3, [r7, #15]
 8004edc:	3301      	adds	r3, #1
 8004ede:	73fb      	strb	r3, [r7, #15]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	791b      	ldrb	r3, [r3, #4]
 8004ee4:	7bfa      	ldrb	r2, [r7, #15]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d3b5      	bcc.n	8004e56 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6818      	ldr	r0, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004ef6:	f004 fbfe 	bl	80096f6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	7a9b      	ldrb	r3, [r3, #10]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d102      	bne.n	8004f16 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f001 fc40 	bl	8006796 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004f16:	2300      	movs	r3, #0
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3710      	adds	r7, #16
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d101      	bne.n	8004f36 <HAL_PCD_Start+0x16>
 8004f32:	2302      	movs	r3, #2
 8004f34:	e012      	b.n	8004f5c <HAL_PCD_Start+0x3c>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f004 fba5 	bl	8009692 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f006 fe66 	bl	800bc1e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3708      	adds	r7, #8
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f006 fe6b 	bl	800bc4c <USB_ReadInterrupts>
 8004f76:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d003      	beq.n	8004f8a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f000 fb04 	bl	8005590 <PCD_EP_ISR_Handler>

    return;
 8004f88:	e110      	b.n	80051ac <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d013      	beq.n	8004fbc <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fa6:	b292      	uxth	r2, r2
 8004fa8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f009 f93e 	bl	800e22e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f8fc 	bl	80051b2 <HAL_PCD_SetAddress>

    return;
 8004fba:	e0f7      	b.n	80051ac <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00c      	beq.n	8004fe0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004fd8:	b292      	uxth	r2, r2
 8004fda:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004fde:	e0e5      	b.n	80051ac <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00c      	beq.n	8005004 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ffc:	b292      	uxth	r2, r2
 8004ffe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005002:	e0d3      	b.n	80051ac <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d034      	beq.n	8005078 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005016:	b29a      	uxth	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 0204 	bic.w	r2, r2, #4
 8005020:	b292      	uxth	r2, r2
 8005022:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800502e:	b29a      	uxth	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f022 0208 	bic.w	r2, r2, #8
 8005038:	b292      	uxth	r2, r2
 800503a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8005044:	2b01      	cmp	r3, #1
 8005046:	d107      	bne.n	8005058 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005050:	2100      	movs	r1, #0
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f009 fae0 	bl	800e618 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f009 f921 	bl	800e2a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005066:	b29a      	uxth	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005070:	b292      	uxth	r2, r2
 8005072:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005076:	e099      	b.n	80051ac <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800507e:	2b00      	cmp	r3, #0
 8005080:	d027      	beq.n	80050d2 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800508a:	b29a      	uxth	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f042 0208 	orr.w	r2, r2, #8
 8005094:	b292      	uxth	r2, r2
 8005096:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050ac:	b292      	uxth	r2, r2
 80050ae:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80050ba:	b29a      	uxth	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f042 0204 	orr.w	r2, r2, #4
 80050c4:	b292      	uxth	r2, r2
 80050c6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f009 f8ce 	bl	800e26c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80050d0:	e06c      	b.n	80051ac <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d040      	beq.n	800515e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80050e4:	b29a      	uxth	r2, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80050ee:	b292      	uxth	r2, r2
 80050f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d12b      	bne.n	8005156 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005106:	b29a      	uxth	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f042 0204 	orr.w	r2, r2, #4
 8005110:	b292      	uxth	r2, r2
 8005112:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800511e:	b29a      	uxth	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f042 0208 	orr.w	r2, r2, #8
 8005128:	b292      	uxth	r2, r2
 800512a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2201      	movs	r2, #1
 8005132:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800513e:	b29b      	uxth	r3, r3
 8005140:	089b      	lsrs	r3, r3, #2
 8005142:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800514c:	2101      	movs	r1, #1
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f009 fa62 	bl	800e618 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8005154:	e02a      	b.n	80051ac <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f009 f888 	bl	800e26c <HAL_PCD_SuspendCallback>
    return;
 800515c:	e026      	b.n	80051ac <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00f      	beq.n	8005188 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005170:	b29a      	uxth	r2, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800517a:	b292      	uxth	r2, r2
 800517c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f009 f846 	bl	800e212 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005186:	e011      	b.n	80051ac <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00c      	beq.n	80051ac <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800519a:	b29a      	uxth	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051a4:	b292      	uxth	r2, r2
 80051a6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80051aa:	bf00      	nop
  }
}
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b082      	sub	sp, #8
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	460b      	mov	r3, r1
 80051bc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d101      	bne.n	80051cc <HAL_PCD_SetAddress+0x1a>
 80051c8:	2302      	movs	r3, #2
 80051ca:	e012      	b.n	80051f2 <HAL_PCD_SetAddress+0x40>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	78fa      	ldrb	r2, [r7, #3]
 80051d8:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	78fa      	ldrb	r2, [r7, #3]
 80051e0:	4611      	mov	r1, r2
 80051e2:	4618      	mov	r0, r3
 80051e4:	f006 fd07 	bl	800bbf6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}

080051fa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b084      	sub	sp, #16
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
 8005202:	4608      	mov	r0, r1
 8005204:	4611      	mov	r1, r2
 8005206:	461a      	mov	r2, r3
 8005208:	4603      	mov	r3, r0
 800520a:	70fb      	strb	r3, [r7, #3]
 800520c:	460b      	mov	r3, r1
 800520e:	803b      	strh	r3, [r7, #0]
 8005210:	4613      	mov	r3, r2
 8005212:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005214:	2300      	movs	r3, #0
 8005216:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005218:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800521c:	2b00      	cmp	r3, #0
 800521e:	da0e      	bge.n	800523e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005220:	78fb      	ldrb	r3, [r7, #3]
 8005222:	f003 0207 	and.w	r2, r3, #7
 8005226:	4613      	mov	r3, r2
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	4413      	add	r3, r2
 800522c:	00db      	lsls	r3, r3, #3
 800522e:	3310      	adds	r3, #16
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	4413      	add	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2201      	movs	r2, #1
 800523a:	705a      	strb	r2, [r3, #1]
 800523c:	e00e      	b.n	800525c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800523e:	78fb      	ldrb	r3, [r7, #3]
 8005240:	f003 0207 	and.w	r2, r3, #7
 8005244:	4613      	mov	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	4413      	add	r3, r2
 800524a:	00db      	lsls	r3, r3, #3
 800524c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	4413      	add	r3, r2
 8005254:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800525c:	78fb      	ldrb	r3, [r7, #3]
 800525e:	f003 0307 	and.w	r3, r3, #7
 8005262:	b2da      	uxtb	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005268:	883a      	ldrh	r2, [r7, #0]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	78ba      	ldrb	r2, [r7, #2]
 8005272:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005274:	78bb      	ldrb	r3, [r7, #2]
 8005276:	2b02      	cmp	r3, #2
 8005278:	d102      	bne.n	8005280 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005286:	2b01      	cmp	r3, #1
 8005288:	d101      	bne.n	800528e <HAL_PCD_EP_Open+0x94>
 800528a:	2302      	movs	r3, #2
 800528c:	e00e      	b.n	80052ac <HAL_PCD_EP_Open+0xb2>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68f9      	ldr	r1, [r7, #12]
 800529c:	4618      	mov	r0, r3
 800529e:	f004 fa49 	bl	8009734 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 80052aa:	7afb      	ldrb	r3, [r7, #11]
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3710      	adds	r7, #16
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	460b      	mov	r3, r1
 80052be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80052c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	da0e      	bge.n	80052e6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052c8:	78fb      	ldrb	r3, [r7, #3]
 80052ca:	f003 0207 	and.w	r2, r3, #7
 80052ce:	4613      	mov	r3, r2
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	4413      	add	r3, r2
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	3310      	adds	r3, #16
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	4413      	add	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2201      	movs	r2, #1
 80052e2:	705a      	strb	r2, [r3, #1]
 80052e4:	e00e      	b.n	8005304 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052e6:	78fb      	ldrb	r3, [r7, #3]
 80052e8:	f003 0207 	and.w	r2, r3, #7
 80052ec:	4613      	mov	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	4413      	add	r3, r2
 80052f2:	00db      	lsls	r3, r3, #3
 80052f4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	4413      	add	r3, r2
 80052fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005304:	78fb      	ldrb	r3, [r7, #3]
 8005306:	f003 0307 	and.w	r3, r3, #7
 800530a:	b2da      	uxtb	r2, r3
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005316:	2b01      	cmp	r3, #1
 8005318:	d101      	bne.n	800531e <HAL_PCD_EP_Close+0x6a>
 800531a:	2302      	movs	r3, #2
 800531c:	e00e      	b.n	800533c <HAL_PCD_EP_Close+0x88>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68f9      	ldr	r1, [r7, #12]
 800532c:	4618      	mov	r0, r3
 800532e:	f004 fdc5 	bl	8009ebc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3710      	adds	r7, #16
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	607a      	str	r2, [r7, #4]
 800534e:	603b      	str	r3, [r7, #0]
 8005350:	460b      	mov	r3, r1
 8005352:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005354:	7afb      	ldrb	r3, [r7, #11]
 8005356:	f003 0207 	and.w	r2, r3, #7
 800535a:	4613      	mov	r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	4413      	add	r3, r2
 8005360:	00db      	lsls	r3, r3, #3
 8005362:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	4413      	add	r3, r2
 800536a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	2200      	movs	r2, #0
 800537c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	2200      	movs	r2, #0
 8005382:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005384:	7afb      	ldrb	r3, [r7, #11]
 8005386:	f003 0307 	and.w	r3, r3, #7
 800538a:	b2da      	uxtb	r2, r3
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6979      	ldr	r1, [r7, #20]
 8005396:	4618      	mov	r0, r3
 8005398:	f004 ff7d 	bl	800a296 <USB_EPStartXfer>

  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3718      	adds	r7, #24
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80053a6:	b480      	push	{r7}
 80053a8:	b083      	sub	sp, #12
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
 80053ae:	460b      	mov	r3, r1
 80053b0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80053b2:	78fb      	ldrb	r3, [r7, #3]
 80053b4:	f003 0207 	and.w	r2, r3, #7
 80053b8:	6879      	ldr	r1, [r7, #4]
 80053ba:	4613      	mov	r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4413      	add	r3, r2
 80053c0:	00db      	lsls	r3, r3, #3
 80053c2:	440b      	add	r3, r1
 80053c4:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 80053c8:	681b      	ldr	r3, [r3, #0]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b086      	sub	sp, #24
 80053da:	af00      	add	r7, sp, #0
 80053dc:	60f8      	str	r0, [r7, #12]
 80053de:	607a      	str	r2, [r7, #4]
 80053e0:	603b      	str	r3, [r7, #0]
 80053e2:	460b      	mov	r3, r1
 80053e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80053e6:	7afb      	ldrb	r3, [r7, #11]
 80053e8:	f003 0207 	and.w	r2, r3, #7
 80053ec:	4613      	mov	r3, r2
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	4413      	add	r3, r2
 80053f2:	00db      	lsls	r3, r3, #3
 80053f4:	3310      	adds	r3, #16
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	4413      	add	r3, r2
 80053fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	683a      	ldr	r2, [r7, #0]
 8005414:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	2200      	movs	r2, #0
 800541a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	2201      	movs	r2, #1
 8005420:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005422:	7afb      	ldrb	r3, [r7, #11]
 8005424:	f003 0307 	and.w	r3, r3, #7
 8005428:	b2da      	uxtb	r2, r3
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	6979      	ldr	r1, [r7, #20]
 8005434:	4618      	mov	r0, r3
 8005436:	f004 ff2e 	bl	800a296 <USB_EPStartXfer>

  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3718      	adds	r7, #24
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	460b      	mov	r3, r1
 800544e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005450:	78fb      	ldrb	r3, [r7, #3]
 8005452:	f003 0307 	and.w	r3, r3, #7
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	7912      	ldrb	r2, [r2, #4]
 800545a:	4293      	cmp	r3, r2
 800545c:	d901      	bls.n	8005462 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e03e      	b.n	80054e0 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005462:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005466:	2b00      	cmp	r3, #0
 8005468:	da0e      	bge.n	8005488 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800546a:	78fb      	ldrb	r3, [r7, #3]
 800546c:	f003 0207 	and.w	r2, r3, #7
 8005470:	4613      	mov	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4413      	add	r3, r2
 8005476:	00db      	lsls	r3, r3, #3
 8005478:	3310      	adds	r3, #16
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	4413      	add	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2201      	movs	r2, #1
 8005484:	705a      	strb	r2, [r3, #1]
 8005486:	e00c      	b.n	80054a2 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005488:	78fa      	ldrb	r2, [r7, #3]
 800548a:	4613      	mov	r3, r2
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	4413      	add	r3, r2
 8005490:	00db      	lsls	r3, r3, #3
 8005492:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	4413      	add	r3, r2
 800549a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2201      	movs	r2, #1
 80054a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054a8:	78fb      	ldrb	r3, [r7, #3]
 80054aa:	f003 0307 	and.w	r3, r3, #7
 80054ae:	b2da      	uxtb	r2, r3
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d101      	bne.n	80054c2 <HAL_PCD_EP_SetStall+0x7e>
 80054be:	2302      	movs	r3, #2
 80054c0:	e00e      	b.n	80054e0 <HAL_PCD_EP_SetStall+0x9c>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68f9      	ldr	r1, [r7, #12]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f006 fa91 	bl	800b9f8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	460b      	mov	r3, r1
 80054f2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80054f4:	78fb      	ldrb	r3, [r7, #3]
 80054f6:	f003 030f 	and.w	r3, r3, #15
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	7912      	ldrb	r2, [r2, #4]
 80054fe:	4293      	cmp	r3, r2
 8005500:	d901      	bls.n	8005506 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e040      	b.n	8005588 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005506:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800550a:	2b00      	cmp	r3, #0
 800550c:	da0e      	bge.n	800552c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800550e:	78fb      	ldrb	r3, [r7, #3]
 8005510:	f003 0207 	and.w	r2, r3, #7
 8005514:	4613      	mov	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	3310      	adds	r3, #16
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	4413      	add	r3, r2
 8005522:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2201      	movs	r2, #1
 8005528:	705a      	strb	r2, [r3, #1]
 800552a:	e00e      	b.n	800554a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800552c:	78fb      	ldrb	r3, [r7, #3]
 800552e:	f003 0207 	and.w	r2, r3, #7
 8005532:	4613      	mov	r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	4413      	add	r3, r2
 8005538:	00db      	lsls	r3, r3, #3
 800553a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	4413      	add	r3, r2
 8005542:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005550:	78fb      	ldrb	r3, [r7, #3]
 8005552:	f003 0307 	and.w	r3, r3, #7
 8005556:	b2da      	uxtb	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005562:	2b01      	cmp	r3, #1
 8005564:	d101      	bne.n	800556a <HAL_PCD_EP_ClrStall+0x82>
 8005566:	2302      	movs	r3, #2
 8005568:	e00e      	b.n	8005588 <HAL_PCD_EP_ClrStall+0xa0>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2201      	movs	r2, #1
 800556e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	68f9      	ldr	r1, [r7, #12]
 8005578:	4618      	mov	r0, r3
 800557a:	f006 fa8e 	bl	800ba9a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2200      	movs	r2, #0
 8005582:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005586:	2300      	movs	r3, #0
}
 8005588:	4618      	mov	r0, r3
 800558a:	3710      	adds	r7, #16
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b096      	sub	sp, #88	@ 0x58
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005598:	e3ad      	b.n	8005cf6 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80055a2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80055a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	f003 030f 	and.w	r3, r3, #15
 80055b0:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80055b4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	f040 816f 	bne.w	800589c <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80055be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80055c2:	f003 0310 	and.w	r3, r3, #16
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d14c      	bne.n	8005664 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	881b      	ldrh	r3, [r3, #0]
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80055d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055da:	81fb      	strh	r3, [r7, #14]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	89fb      	ldrh	r3, [r7, #14]
 80055e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	3310      	adds	r3, #16
 80055f2:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	461a      	mov	r2, r3
 8005600:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	00db      	lsls	r3, r3, #3
 8005606:	4413      	add	r3, r2
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	6812      	ldr	r2, [r2, #0]
 800560c:	4413      	add	r3, r2
 800560e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005612:	881b      	ldrh	r3, [r3, #0]
 8005614:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005618:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800561a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800561c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800561e:	695a      	ldr	r2, [r3, #20]
 8005620:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005622:	69db      	ldr	r3, [r3, #28]
 8005624:	441a      	add	r2, r3
 8005626:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005628:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800562a:	2100      	movs	r1, #0
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f008 fdd6 	bl	800e1de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	7b1b      	ldrb	r3, [r3, #12]
 8005636:	b2db      	uxtb	r3, r3
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 835c 	beq.w	8005cf6 <PCD_EP_ISR_Handler+0x766>
 800563e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005640:	699b      	ldr	r3, [r3, #24]
 8005642:	2b00      	cmp	r3, #0
 8005644:	f040 8357 	bne.w	8005cf6 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	7b1b      	ldrb	r3, [r3, #12]
 800564c:	b2db      	uxtb	r3, r3
 800564e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005652:	b2da      	uxtb	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	731a      	strb	r2, [r3, #12]
 8005662:	e348      	b.n	8005cf6 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800566a:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	881b      	ldrh	r3, [r3, #0]
 8005672:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005676:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800567a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800567e:	2b00      	cmp	r3, #0
 8005680:	d032      	beq.n	80056e8 <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800568a:	b29b      	uxth	r3, r3
 800568c:	461a      	mov	r2, r3
 800568e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	00db      	lsls	r3, r3, #3
 8005694:	4413      	add	r3, r2
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	6812      	ldr	r2, [r2, #0]
 800569a:	4413      	add	r3, r2
 800569c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80056a0:	881b      	ldrh	r3, [r3, #0]
 80056a2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80056a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056a8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6818      	ldr	r0, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80056b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056b6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80056b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056ba:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80056bc:	b29b      	uxth	r3, r3
 80056be:	f006 fb17 	bl	800bcf0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	881b      	ldrh	r3, [r3, #0]
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80056ce:	4013      	ands	r3, r2
 80056d0:	823b      	strh	r3, [r7, #16]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	8a3a      	ldrh	r2, [r7, #16]
 80056d8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80056dc:	b292      	uxth	r2, r2
 80056de:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f008 fd4f 	bl	800e184 <HAL_PCD_SetupStageCallback>
 80056e6:	e306      	b.n	8005cf6 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80056e8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f280 8302 	bge.w	8005cf6 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	881b      	ldrh	r3, [r3, #0]
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80056fe:	4013      	ands	r3, r2
 8005700:	83fb      	strh	r3, [r7, #30]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	8bfa      	ldrh	r2, [r7, #30]
 8005708:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800570c:	b292      	uxth	r2, r2
 800570e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005718:	b29b      	uxth	r3, r3
 800571a:	461a      	mov	r2, r3
 800571c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	00db      	lsls	r3, r3, #3
 8005722:	4413      	add	r3, r2
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	6812      	ldr	r2, [r2, #0]
 8005728:	4413      	add	r3, r2
 800572a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800572e:	881b      	ldrh	r3, [r3, #0]
 8005730:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005734:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005736:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005738:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800573a:	69db      	ldr	r3, [r3, #28]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d019      	beq.n	8005774 <PCD_EP_ISR_Handler+0x1e4>
 8005740:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005742:	695b      	ldr	r3, [r3, #20]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d015      	beq.n	8005774 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6818      	ldr	r0, [r3, #0]
 800574c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800574e:	6959      	ldr	r1, [r3, #20]
 8005750:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005752:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005754:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005756:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005758:	b29b      	uxth	r3, r3
 800575a:	f006 fac9 	bl	800bcf0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800575e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005760:	695a      	ldr	r2, [r3, #20]
 8005762:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005764:	69db      	ldr	r3, [r3, #28]
 8005766:	441a      	add	r2, r3
 8005768:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800576a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800576c:	2100      	movs	r1, #0
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f008 fd1a 	bl	800e1a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	881b      	ldrh	r3, [r3, #0]
 800577a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800577e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005782:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005786:	2b00      	cmp	r3, #0
 8005788:	f040 82b5 	bne.w	8005cf6 <PCD_EP_ISR_Handler+0x766>
 800578c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005790:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005794:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005798:	f000 82ad 	beq.w	8005cf6 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	61bb      	str	r3, [r7, #24]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	461a      	mov	r2, r3
 80057ae:	69bb      	ldr	r3, [r7, #24]
 80057b0:	4413      	add	r3, r2
 80057b2:	61bb      	str	r3, [r7, #24]
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80057ba:	617b      	str	r3, [r7, #20]
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	881b      	ldrh	r3, [r3, #0]
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	801a      	strh	r2, [r3, #0]
 80057cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057ce:	691b      	ldr	r3, [r3, #16]
 80057d0:	2b3e      	cmp	r3, #62	@ 0x3e
 80057d2:	d91d      	bls.n	8005810 <PCD_EP_ISR_Handler+0x280>
 80057d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	095b      	lsrs	r3, r3, #5
 80057da:	647b      	str	r3, [r7, #68]	@ 0x44
 80057dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	f003 031f 	and.w	r3, r3, #31
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d102      	bne.n	80057ee <PCD_EP_ISR_Handler+0x25e>
 80057e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057ea:	3b01      	subs	r3, #1
 80057ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	881b      	ldrh	r3, [r3, #0]
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	029b      	lsls	r3, r3, #10
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	4313      	orrs	r3, r2
 80057fe:	b29b      	uxth	r3, r3
 8005800:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005804:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005808:	b29a      	uxth	r2, r3
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	801a      	strh	r2, [r3, #0]
 800580e:	e026      	b.n	800585e <PCD_EP_ISR_Handler+0x2ce>
 8005810:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10a      	bne.n	800582e <PCD_EP_ISR_Handler+0x29e>
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	881b      	ldrh	r3, [r3, #0]
 800581c:	b29b      	uxth	r3, r3
 800581e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005822:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005826:	b29a      	uxth	r2, r3
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	801a      	strh	r2, [r3, #0]
 800582c:	e017      	b.n	800585e <PCD_EP_ISR_Handler+0x2ce>
 800582e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	085b      	lsrs	r3, r3, #1
 8005834:	647b      	str	r3, [r7, #68]	@ 0x44
 8005836:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	f003 0301 	and.w	r3, r3, #1
 800583e:	2b00      	cmp	r3, #0
 8005840:	d002      	beq.n	8005848 <PCD_EP_ISR_Handler+0x2b8>
 8005842:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005844:	3301      	adds	r3, #1
 8005846:	647b      	str	r3, [r7, #68]	@ 0x44
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	881b      	ldrh	r3, [r3, #0]
 800584c:	b29a      	uxth	r2, r3
 800584e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005850:	b29b      	uxth	r3, r3
 8005852:	029b      	lsls	r3, r3, #10
 8005854:	b29b      	uxth	r3, r3
 8005856:	4313      	orrs	r3, r2
 8005858:	b29a      	uxth	r2, r3
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	881b      	ldrh	r3, [r3, #0]
 8005864:	b29b      	uxth	r3, r3
 8005866:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800586a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800586e:	827b      	strh	r3, [r7, #18]
 8005870:	8a7b      	ldrh	r3, [r7, #18]
 8005872:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005876:	827b      	strh	r3, [r7, #18]
 8005878:	8a7b      	ldrh	r3, [r7, #18]
 800587a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800587e:	827b      	strh	r3, [r7, #18]
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	8a7b      	ldrh	r3, [r7, #18]
 8005886:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800588a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800588e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005892:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005896:	b29b      	uxth	r3, r3
 8005898:	8013      	strh	r3, [r2, #0]
 800589a:	e22c      	b.n	8005cf6 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	461a      	mov	r2, r3
 80058a2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80058a6:	009b      	lsls	r3, r3, #2
 80058a8:	4413      	add	r3, r2
 80058aa:	881b      	ldrh	r3, [r3, #0]
 80058ac:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80058b0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f280 80f6 	bge.w	8005aa6 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	461a      	mov	r2, r3
 80058c0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4413      	add	r3, r2
 80058c8:	881b      	ldrh	r3, [r3, #0]
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80058d0:	4013      	ands	r3, r2
 80058d2:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	461a      	mov	r2, r3
 80058dc:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	4413      	add	r3, r2
 80058e4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80058e8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80058ec:	b292      	uxth	r2, r2
 80058ee:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80058f0:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80058f4:	4613      	mov	r3, r2
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	4413      	add	r3, r2
 80058fa:	00db      	lsls	r3, r3, #3
 80058fc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	4413      	add	r3, r2
 8005904:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005906:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005908:	7b1b      	ldrb	r3, [r3, #12]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d123      	bne.n	8005956 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005916:	b29b      	uxth	r3, r3
 8005918:	461a      	mov	r2, r3
 800591a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	00db      	lsls	r3, r3, #3
 8005920:	4413      	add	r3, r2
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	6812      	ldr	r2, [r2, #0]
 8005926:	4413      	add	r3, r2
 8005928:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800592c:	881b      	ldrh	r3, [r3, #0]
 800592e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005932:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8005936:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800593a:	2b00      	cmp	r3, #0
 800593c:	f000 808e 	beq.w	8005a5c <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6818      	ldr	r0, [r3, #0]
 8005944:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005946:	6959      	ldr	r1, [r3, #20]
 8005948:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800594a:	88da      	ldrh	r2, [r3, #6]
 800594c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005950:	f006 f9ce 	bl	800bcf0 <USB_ReadPMA>
 8005954:	e082      	b.n	8005a5c <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005956:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005958:	78db      	ldrb	r3, [r3, #3]
 800595a:	2b02      	cmp	r3, #2
 800595c:	d10a      	bne.n	8005974 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800595e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005962:	461a      	mov	r2, r3
 8005964:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f9d3 	bl	8005d12 <HAL_PCD_EP_DB_Receive>
 800596c:	4603      	mov	r3, r0
 800596e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8005972:	e073      	b.n	8005a5c <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	461a      	mov	r2, r3
 800597a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	4413      	add	r3, r2
 8005982:	881b      	ldrh	r3, [r3, #0]
 8005984:	b29b      	uxth	r3, r3
 8005986:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800598a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800598e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	461a      	mov	r2, r3
 8005998:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	441a      	add	r2, r3
 80059a0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80059a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059b0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	461a      	mov	r2, r3
 80059be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4413      	add	r3, r2
 80059c6:	881b      	ldrh	r3, [r3, #0]
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d022      	beq.n	8005a18 <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80059da:	b29b      	uxth	r3, r3
 80059dc:	461a      	mov	r2, r3
 80059de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	00db      	lsls	r3, r3, #3
 80059e4:	4413      	add	r3, r2
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	6812      	ldr	r2, [r2, #0]
 80059ea:	4413      	add	r3, r2
 80059ec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80059f0:	881b      	ldrh	r3, [r3, #0]
 80059f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059f6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80059fa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d02c      	beq.n	8005a5c <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6818      	ldr	r0, [r3, #0]
 8005a06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a08:	6959      	ldr	r1, [r3, #20]
 8005a0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a0c:	891a      	ldrh	r2, [r3, #8]
 8005a0e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005a12:	f006 f96d 	bl	800bcf0 <USB_ReadPMA>
 8005a16:	e021      	b.n	8005a5c <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	461a      	mov	r2, r3
 8005a24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	00db      	lsls	r3, r3, #3
 8005a2a:	4413      	add	r3, r2
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	6812      	ldr	r2, [r2, #0]
 8005a30:	4413      	add	r3, r2
 8005a32:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a3c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8005a40:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d009      	beq.n	8005a5c <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6818      	ldr	r0, [r3, #0]
 8005a4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a4e:	6959      	ldr	r1, [r3, #20]
 8005a50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a52:	895a      	ldrh	r2, [r3, #10]
 8005a54:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005a58:	f006 f94a 	bl	800bcf0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005a5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a5e:	69da      	ldr	r2, [r3, #28]
 8005a60:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005a64:	441a      	add	r2, r3
 8005a66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a68:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005a6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a6c:	695a      	ldr	r2, [r3, #20]
 8005a6e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005a72:	441a      	add	r2, r3
 8005a74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a76:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005a78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d005      	beq.n	8005a8c <PCD_EP_ISR_Handler+0x4fc>
 8005a80:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8005a84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a86:	691b      	ldr	r3, [r3, #16]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d206      	bcs.n	8005a9a <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005a8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	4619      	mov	r1, r3
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f008 fb88 	bl	800e1a8 <HAL_PCD_DataOutStageCallback>
 8005a98:	e005      	b.n	8005aa6 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f004 fbf8 	bl	800a296 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005aa6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005aaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	f000 8121 	beq.w	8005cf6 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8005ab4:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8005ab8:	4613      	mov	r3, r2
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4413      	add	r3, r2
 8005abe:	00db      	lsls	r3, r3, #3
 8005ac0:	3310      	adds	r3, #16
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	461a      	mov	r2, r3
 8005ace:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4413      	add	r3, r2
 8005ad6:	881b      	ldrh	r3, [r3, #0]
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005ade:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ae2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	461a      	mov	r2, r3
 8005aec:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	441a      	add	r2, r3
 8005af4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005af8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005afc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005b04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b06:	78db      	ldrb	r3, [r3, #3]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	f040 80a2 	bne.w	8005c52 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8005b0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b10:	2200      	movs	r2, #0
 8005b12:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005b14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b16:	7b1b      	ldrb	r3, [r3, #12]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 8093 	beq.w	8005c44 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005b1e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005b22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d046      	beq.n	8005bb8 <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b2c:	785b      	ldrb	r3, [r3, #1]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d126      	bne.n	8005b80 <PCD_EP_ISR_Handler+0x5f0>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	461a      	mov	r2, r3
 8005b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b46:	4413      	add	r3, r2
 8005b48:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	00da      	lsls	r2, r3, #3
 8005b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b52:	4413      	add	r3, r2
 8005b54:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005b58:	623b      	str	r3, [r7, #32]
 8005b5a:	6a3b      	ldr	r3, [r7, #32]
 8005b5c:	881b      	ldrh	r3, [r3, #0]
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b64:	b29a      	uxth	r2, r3
 8005b66:	6a3b      	ldr	r3, [r7, #32]
 8005b68:	801a      	strh	r2, [r3, #0]
 8005b6a:	6a3b      	ldr	r3, [r7, #32]
 8005b6c:	881b      	ldrh	r3, [r3, #0]
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b78:	b29a      	uxth	r2, r3
 8005b7a:	6a3b      	ldr	r3, [r7, #32]
 8005b7c:	801a      	strh	r2, [r3, #0]
 8005b7e:	e061      	b.n	8005c44 <PCD_EP_ISR_Handler+0x6b4>
 8005b80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b82:	785b      	ldrb	r3, [r3, #1]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d15d      	bne.n	8005c44 <PCD_EP_ISR_Handler+0x6b4>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	461a      	mov	r2, r3
 8005b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b9c:	4413      	add	r3, r2
 8005b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ba0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ba2:	781b      	ldrb	r3, [r3, #0]
 8005ba4:	00da      	lsls	r2, r3, #3
 8005ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ba8:	4413      	add	r3, r2
 8005baa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005bae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	801a      	strh	r2, [r3, #0]
 8005bb6:	e045      	b.n	8005c44 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bc0:	785b      	ldrb	r3, [r3, #1]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d126      	bne.n	8005c14 <PCD_EP_ISR_Handler+0x684>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bda:	4413      	add	r3, r2
 8005bdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	00da      	lsls	r2, r3, #3
 8005be4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005be6:	4413      	add	r3, r2
 8005be8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005bec:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf0:	881b      	ldrh	r3, [r3, #0]
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bf8:	b29a      	uxth	r2, r3
 8005bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bfc:	801a      	strh	r2, [r3, #0]
 8005bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c00:	881b      	ldrh	r3, [r3, #0]
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c10:	801a      	strh	r2, [r3, #0]
 8005c12:	e017      	b.n	8005c44 <PCD_EP_ISR_Handler+0x6b4>
 8005c14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c16:	785b      	ldrb	r3, [r3, #1]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d113      	bne.n	8005c44 <PCD_EP_ISR_Handler+0x6b4>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	461a      	mov	r2, r3
 8005c28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c2a:	4413      	add	r3, r2
 8005c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	00da      	lsls	r2, r3, #3
 8005c34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c36:	4413      	add	r3, r2
 8005c38:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005c3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c40:	2200      	movs	r2, #0
 8005c42:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	4619      	mov	r1, r3
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f008 fac7 	bl	800e1de <HAL_PCD_DataInStageCallback>
 8005c50:	e051      	b.n	8005cf6 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005c52:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005c56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d144      	bne.n	8005ce8 <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	461a      	mov	r2, r3
 8005c6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	00db      	lsls	r3, r3, #3
 8005c70:	4413      	add	r3, r2
 8005c72:	687a      	ldr	r2, [r7, #4]
 8005c74:	6812      	ldr	r2, [r2, #0]
 8005c76:	4413      	add	r3, r2
 8005c78:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c82:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8005c86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c88:	699a      	ldr	r2, [r3, #24]
 8005c8a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d907      	bls.n	8005ca2 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8005c92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c94:	699a      	ldr	r2, [r3, #24]
 8005c96:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005c9a:	1ad2      	subs	r2, r2, r3
 8005c9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c9e:	619a      	str	r2, [r3, #24]
 8005ca0:	e002      	b.n	8005ca8 <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8005ca2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005ca8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d106      	bne.n	8005cbe <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005cb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f008 fa91 	bl	800e1de <HAL_PCD_DataInStageCallback>
 8005cbc:	e01b      	b.n	8005cf6 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005cbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cc0:	695a      	ldr	r2, [r3, #20]
 8005cc2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005cc6:	441a      	add	r2, r3
 8005cc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cca:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005ccc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cce:	69da      	ldr	r2, [r3, #28]
 8005cd0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005cd4:	441a      	add	r2, r3
 8005cd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cd8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f004 fad8 	bl	800a296 <USB_EPStartXfer>
 8005ce6:	e006      	b.n	8005cf6 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005ce8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005cec:	461a      	mov	r2, r3
 8005cee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 f917 	bl	8005f24 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	b21b      	sxth	r3, r3
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f6ff ac49 	blt.w	800559a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3758      	adds	r7, #88	@ 0x58
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b088      	sub	sp, #32
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	60f8      	str	r0, [r7, #12]
 8005d1a:	60b9      	str	r1, [r7, #8]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005d20:	88fb      	ldrh	r3, [r7, #6]
 8005d22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d07c      	beq.n	8005e24 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	461a      	mov	r2, r3
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	00db      	lsls	r3, r3, #3
 8005d3c:	4413      	add	r3, r2
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	6812      	ldr	r2, [r2, #0]
 8005d42:	4413      	add	r3, r2
 8005d44:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005d48:	881b      	ldrh	r3, [r3, #0]
 8005d4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d4e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	699a      	ldr	r2, [r3, #24]
 8005d54:	8b7b      	ldrh	r3, [r7, #26]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d306      	bcc.n	8005d68 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	699a      	ldr	r2, [r3, #24]
 8005d5e:	8b7b      	ldrh	r3, [r7, #26]
 8005d60:	1ad2      	subs	r2, r2, r3
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	619a      	str	r2, [r3, #24]
 8005d66:	e002      	b.n	8005d6e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	699b      	ldr	r3, [r3, #24]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d123      	bne.n	8005dbe <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	461a      	mov	r2, r3
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4413      	add	r3, r2
 8005d84:	881b      	ldrh	r3, [r3, #0]
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005d8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d90:	833b      	strh	r3, [r7, #24]
 8005d92:	8b3b      	ldrh	r3, [r7, #24]
 8005d94:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005d98:	833b      	strh	r3, [r7, #24]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	441a      	add	r2, r3
 8005da8:	8b3b      	ldrh	r3, [r7, #24]
 8005daa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005db2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005db6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005dbe:	88fb      	ldrh	r3, [r7, #6]
 8005dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d01f      	beq.n	8005e08 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	461a      	mov	r2, r3
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	4413      	add	r3, r2
 8005dd6:	881b      	ldrh	r3, [r3, #0]
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005de2:	82fb      	strh	r3, [r7, #22]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	461a      	mov	r2, r3
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	441a      	add	r2, r3
 8005df2:	8afb      	ldrh	r3, [r7, #22]
 8005df4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005df8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e00:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005e08:	8b7b      	ldrh	r3, [r7, #26]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f000 8085 	beq.w	8005f1a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6818      	ldr	r0, [r3, #0]
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	6959      	ldr	r1, [r3, #20]
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	891a      	ldrh	r2, [r3, #8]
 8005e1c:	8b7b      	ldrh	r3, [r7, #26]
 8005e1e:	f005 ff67 	bl	800bcf0 <USB_ReadPMA>
 8005e22:	e07a      	b.n	8005f1a <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	461a      	mov	r2, r3
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	00db      	lsls	r3, r3, #3
 8005e36:	4413      	add	r3, r2
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	6812      	ldr	r2, [r2, #0]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e48:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	699a      	ldr	r2, [r3, #24]
 8005e4e:	8b7b      	ldrh	r3, [r7, #26]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d306      	bcc.n	8005e62 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	699a      	ldr	r2, [r3, #24]
 8005e58:	8b7b      	ldrh	r3, [r7, #26]
 8005e5a:	1ad2      	subs	r2, r2, r3
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	619a      	str	r2, [r3, #24]
 8005e60:	e002      	b.n	8005e68 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	2200      	movs	r2, #0
 8005e66:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d123      	bne.n	8005eb8 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	461a      	mov	r2, r3
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4413      	add	r3, r2
 8005e7e:	881b      	ldrh	r3, [r3, #0]
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e8a:	83fb      	strh	r3, [r7, #30]
 8005e8c:	8bfb      	ldrh	r3, [r7, #30]
 8005e8e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005e92:	83fb      	strh	r3, [r7, #30]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	461a      	mov	r2, r3
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	441a      	add	r2, r3
 8005ea2:	8bfb      	ldrh	r3, [r7, #30]
 8005ea4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ea8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005eac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005eb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005eb8:	88fb      	ldrh	r3, [r7, #6]
 8005eba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d11f      	bne.n	8005f02 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	4413      	add	r3, r2
 8005ed0:	881b      	ldrh	r3, [r3, #0]
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ed8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005edc:	83bb      	strh	r3, [r7, #28]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	441a      	add	r2, r3
 8005eec:	8bbb      	ldrh	r3, [r7, #28]
 8005eee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ef2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ef6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005efa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005f02:	8b7b      	ldrh	r3, [r7, #26]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d008      	beq.n	8005f1a <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6818      	ldr	r0, [r3, #0]
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	6959      	ldr	r1, [r3, #20]
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	895a      	ldrh	r2, [r3, #10]
 8005f14:	8b7b      	ldrh	r3, [r7, #26]
 8005f16:	f005 feeb 	bl	800bcf0 <USB_ReadPMA>
    }
  }

  return count;
 8005f1a:	8b7b      	ldrh	r3, [r7, #26]
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3720      	adds	r7, #32
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}

08005f24 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b0a4      	sub	sp, #144	@ 0x90
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005f32:	88fb      	ldrh	r3, [r7, #6]
 8005f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f000 81db 	beq.w	80062f4 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	461a      	mov	r2, r3
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	00db      	lsls	r3, r3, #3
 8005f50:	4413      	add	r3, r2
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	6812      	ldr	r2, [r2, #0]
 8005f56:	4413      	add	r3, r2
 8005f58:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005f5c:	881b      	ldrh	r3, [r3, #0]
 8005f5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f62:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	699a      	ldr	r2, [r3, #24]
 8005f6a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d907      	bls.n	8005f82 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	699a      	ldr	r2, [r3, #24]
 8005f76:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005f7a:	1ad2      	subs	r2, r2, r3
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	619a      	str	r2, [r3, #24]
 8005f80:	e002      	b.n	8005f88 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	2200      	movs	r2, #0
 8005f86:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	699b      	ldr	r3, [r3, #24]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f040 80b9 	bne.w	8006104 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	785b      	ldrb	r3, [r3, #1]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d126      	bne.n	8005fe8 <HAL_PCD_EP_DB_Transmit+0xc4>
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	461a      	mov	r2, r3
 8005fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fae:	4413      	add	r3, r2
 8005fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	00da      	lsls	r2, r3, #3
 8005fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fba:	4413      	add	r3, r2
 8005fbc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc4:	881b      	ldrh	r3, [r3, #0]
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd0:	801a      	strh	r2, [r3, #0]
 8005fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd4:	881b      	ldrh	r3, [r3, #0]
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fe4:	801a      	strh	r2, [r3, #0]
 8005fe6:	e01a      	b.n	800601e <HAL_PCD_EP_DB_Transmit+0xfa>
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	785b      	ldrb	r3, [r3, #1]
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d116      	bne.n	800601e <HAL_PCD_EP_DB_Transmit+0xfa>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	461a      	mov	r2, r3
 8006002:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006004:	4413      	add	r3, r2
 8006006:	637b      	str	r3, [r7, #52]	@ 0x34
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	00da      	lsls	r2, r3, #3
 800600e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006010:	4413      	add	r3, r2
 8006012:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006016:	633b      	str	r3, [r7, #48]	@ 0x30
 8006018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800601a:	2200      	movs	r2, #0
 800601c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	627b      	str	r3, [r7, #36]	@ 0x24
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	785b      	ldrb	r3, [r3, #1]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d126      	bne.n	800607a <HAL_PCD_EP_DB_Transmit+0x156>
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	61fb      	str	r3, [r7, #28]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800603a:	b29b      	uxth	r3, r3
 800603c:	461a      	mov	r2, r3
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	4413      	add	r3, r2
 8006042:	61fb      	str	r3, [r7, #28]
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	00da      	lsls	r2, r3, #3
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	4413      	add	r3, r2
 800604e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006052:	61bb      	str	r3, [r7, #24]
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	881b      	ldrh	r3, [r3, #0]
 8006058:	b29b      	uxth	r3, r3
 800605a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800605e:	b29a      	uxth	r2, r3
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	801a      	strh	r2, [r3, #0]
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	881b      	ldrh	r3, [r3, #0]
 8006068:	b29b      	uxth	r3, r3
 800606a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800606e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006072:	b29a      	uxth	r2, r3
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	801a      	strh	r2, [r3, #0]
 8006078:	e017      	b.n	80060aa <HAL_PCD_EP_DB_Transmit+0x186>
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	785b      	ldrb	r3, [r3, #1]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d113      	bne.n	80060aa <HAL_PCD_EP_DB_Transmit+0x186>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800608a:	b29b      	uxth	r3, r3
 800608c:	461a      	mov	r2, r3
 800608e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006090:	4413      	add	r3, r2
 8006092:	627b      	str	r3, [r7, #36]	@ 0x24
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	00da      	lsls	r2, r3, #3
 800609a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609c:	4413      	add	r3, r2
 800609e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80060a2:	623b      	str	r3, [r7, #32]
 80060a4:	6a3b      	ldr	r3, [r7, #32]
 80060a6:	2200      	movs	r2, #0
 80060a8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	4619      	mov	r1, r3
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f008 f894 	bl	800e1de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80060b6:	88fb      	ldrh	r3, [r7, #6]
 80060b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f000 82fa 	beq.w	80066b6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	461a      	mov	r2, r3
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	4413      	add	r3, r2
 80060d0:	881b      	ldrh	r3, [r3, #0]
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060dc:	82fb      	strh	r3, [r7, #22]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	461a      	mov	r2, r3
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	441a      	add	r2, r3
 80060ec:	8afb      	ldrh	r3, [r7, #22]
 80060ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060f6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80060fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060fe:	b29b      	uxth	r3, r3
 8006100:	8013      	strh	r3, [r2, #0]
 8006102:	e2d8      	b.n	80066b6 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006104:	88fb      	ldrh	r3, [r7, #6]
 8006106:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d021      	beq.n	8006152 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	461a      	mov	r2, r3
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	4413      	add	r3, r2
 800611c:	881b      	ldrh	r3, [r3, #0]
 800611e:	b29b      	uxth	r3, r3
 8006120:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006124:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006128:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	461a      	mov	r2, r3
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	441a      	add	r2, r3
 800613a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800613e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006142:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006146:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800614a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800614e:	b29b      	uxth	r3, r3
 8006150:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006158:	2b01      	cmp	r3, #1
 800615a:	f040 82ac 	bne.w	80066b6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	695a      	ldr	r2, [r3, #20]
 8006162:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006166:	441a      	add	r2, r3
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	69da      	ldr	r2, [r3, #28]
 8006170:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006174:	441a      	add	r2, r3
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	6a1a      	ldr	r2, [r3, #32]
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	429a      	cmp	r2, r3
 8006184:	d30b      	bcc.n	800619e <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	6a1a      	ldr	r2, [r3, #32]
 8006192:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006196:	1ad2      	subs	r2, r2, r3
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	621a      	str	r2, [r3, #32]
 800619c:	e017      	b.n	80061ce <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	6a1b      	ldr	r3, [r3, #32]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d108      	bne.n	80061b8 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80061a6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80061aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80061b6:	e00a      	b.n	80061ce <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	6a1b      	ldr	r3, [r3, #32]
 80061c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	2200      	movs	r2, #0
 80061cc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	785b      	ldrb	r3, [r3, #1]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d165      	bne.n	80062a2 <HAL_PCD_EP_DB_Transmit+0x37e>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	461a      	mov	r2, r3
 80061e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061ea:	4413      	add	r3, r2
 80061ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	00da      	lsls	r2, r3, #3
 80061f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061f6:	4413      	add	r3, r2
 80061f8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80061fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80061fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006200:	881b      	ldrh	r3, [r3, #0]
 8006202:	b29b      	uxth	r3, r3
 8006204:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006208:	b29a      	uxth	r2, r3
 800620a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800620c:	801a      	strh	r2, [r3, #0]
 800620e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006212:	2b3e      	cmp	r3, #62	@ 0x3e
 8006214:	d91d      	bls.n	8006252 <HAL_PCD_EP_DB_Transmit+0x32e>
 8006216:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800621a:	095b      	lsrs	r3, r3, #5
 800621c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800621e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006222:	f003 031f 	and.w	r3, r3, #31
 8006226:	2b00      	cmp	r3, #0
 8006228:	d102      	bne.n	8006230 <HAL_PCD_EP_DB_Transmit+0x30c>
 800622a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800622c:	3b01      	subs	r3, #1
 800622e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006232:	881b      	ldrh	r3, [r3, #0]
 8006234:	b29a      	uxth	r2, r3
 8006236:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006238:	b29b      	uxth	r3, r3
 800623a:	029b      	lsls	r3, r3, #10
 800623c:	b29b      	uxth	r3, r3
 800623e:	4313      	orrs	r3, r2
 8006240:	b29b      	uxth	r3, r3
 8006242:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006246:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800624a:	b29a      	uxth	r2, r3
 800624c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800624e:	801a      	strh	r2, [r3, #0]
 8006250:	e044      	b.n	80062dc <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006252:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006256:	2b00      	cmp	r3, #0
 8006258:	d10a      	bne.n	8006270 <HAL_PCD_EP_DB_Transmit+0x34c>
 800625a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800625c:	881b      	ldrh	r3, [r3, #0]
 800625e:	b29b      	uxth	r3, r3
 8006260:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006264:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006268:	b29a      	uxth	r2, r3
 800626a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800626c:	801a      	strh	r2, [r3, #0]
 800626e:	e035      	b.n	80062dc <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006270:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006274:	085b      	lsrs	r3, r3, #1
 8006276:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006278:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800627c:	f003 0301 	and.w	r3, r3, #1
 8006280:	2b00      	cmp	r3, #0
 8006282:	d002      	beq.n	800628a <HAL_PCD_EP_DB_Transmit+0x366>
 8006284:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006286:	3301      	adds	r3, #1
 8006288:	64bb      	str	r3, [r7, #72]	@ 0x48
 800628a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800628c:	881b      	ldrh	r3, [r3, #0]
 800628e:	b29a      	uxth	r2, r3
 8006290:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006292:	b29b      	uxth	r3, r3
 8006294:	029b      	lsls	r3, r3, #10
 8006296:	b29b      	uxth	r3, r3
 8006298:	4313      	orrs	r3, r2
 800629a:	b29a      	uxth	r2, r3
 800629c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800629e:	801a      	strh	r2, [r3, #0]
 80062a0:	e01c      	b.n	80062dc <HAL_PCD_EP_DB_Transmit+0x3b8>
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	785b      	ldrb	r3, [r3, #1]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d118      	bne.n	80062dc <HAL_PCD_EP_DB_Transmit+0x3b8>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	461a      	mov	r2, r3
 80062bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062be:	4413      	add	r3, r2
 80062c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	00da      	lsls	r2, r3, #3
 80062c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062ca:	4413      	add	r3, r2
 80062cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80062d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80062d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062d6:	b29a      	uxth	r2, r3
 80062d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062da:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6818      	ldr	r0, [r3, #0]
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	6959      	ldr	r1, [r3, #20]
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	891a      	ldrh	r2, [r3, #8]
 80062e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	f005 fcbd 	bl	800bc6c <USB_WritePMA>
 80062f2:	e1e0      	b.n	80066b6 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	461a      	mov	r2, r3
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	00db      	lsls	r3, r3, #3
 8006306:	4413      	add	r3, r2
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	6812      	ldr	r2, [r2, #0]
 800630c:	4413      	add	r3, r2
 800630e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006312:	881b      	ldrh	r3, [r3, #0]
 8006314:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006318:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	699a      	ldr	r2, [r3, #24]
 8006320:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006324:	429a      	cmp	r2, r3
 8006326:	d307      	bcc.n	8006338 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	699a      	ldr	r2, [r3, #24]
 800632c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006330:	1ad2      	subs	r2, r2, r3
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	619a      	str	r2, [r3, #24]
 8006336:	e002      	b.n	800633e <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	2200      	movs	r2, #0
 800633c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	2b00      	cmp	r3, #0
 8006344:	f040 80c0 	bne.w	80064c8 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	785b      	ldrb	r3, [r3, #1]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d126      	bne.n	800639e <HAL_PCD_EP_DB_Transmit+0x47a>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800635e:	b29b      	uxth	r3, r3
 8006360:	461a      	mov	r2, r3
 8006362:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006364:	4413      	add	r3, r2
 8006366:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	00da      	lsls	r2, r3, #3
 800636e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006370:	4413      	add	r3, r2
 8006372:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006376:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006378:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800637a:	881b      	ldrh	r3, [r3, #0]
 800637c:	b29b      	uxth	r3, r3
 800637e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006382:	b29a      	uxth	r2, r3
 8006384:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006386:	801a      	strh	r2, [r3, #0]
 8006388:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800638a:	881b      	ldrh	r3, [r3, #0]
 800638c:	b29b      	uxth	r3, r3
 800638e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006392:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006396:	b29a      	uxth	r2, r3
 8006398:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800639a:	801a      	strh	r2, [r3, #0]
 800639c:	e01a      	b.n	80063d4 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	785b      	ldrb	r3, [r3, #1]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d116      	bne.n	80063d4 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	461a      	mov	r2, r3
 80063b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063ba:	4413      	add	r3, r2
 80063bc:	667b      	str	r3, [r7, #100]	@ 0x64
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	00da      	lsls	r2, r3, #3
 80063c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80063c6:	4413      	add	r3, r2
 80063c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80063cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80063ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80063d0:	2200      	movs	r2, #0
 80063d2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	677b      	str	r3, [r7, #116]	@ 0x74
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	785b      	ldrb	r3, [r3, #1]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d12b      	bne.n	800643a <HAL_PCD_EP_DB_Transmit+0x516>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	461a      	mov	r2, r3
 80063f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063f6:	4413      	add	r3, r2
 80063f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	00da      	lsls	r2, r3, #3
 8006400:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006402:	4413      	add	r3, r2
 8006404:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006408:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800640c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006410:	881b      	ldrh	r3, [r3, #0]
 8006412:	b29b      	uxth	r3, r3
 8006414:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006418:	b29a      	uxth	r2, r3
 800641a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800641e:	801a      	strh	r2, [r3, #0]
 8006420:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	b29b      	uxth	r3, r3
 8006428:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800642c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006430:	b29a      	uxth	r2, r3
 8006432:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006436:	801a      	strh	r2, [r3, #0]
 8006438:	e017      	b.n	800646a <HAL_PCD_EP_DB_Transmit+0x546>
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	785b      	ldrb	r3, [r3, #1]
 800643e:	2b01      	cmp	r3, #1
 8006440:	d113      	bne.n	800646a <HAL_PCD_EP_DB_Transmit+0x546>
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800644a:	b29b      	uxth	r3, r3
 800644c:	461a      	mov	r2, r3
 800644e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006450:	4413      	add	r3, r2
 8006452:	677b      	str	r3, [r7, #116]	@ 0x74
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	00da      	lsls	r2, r3, #3
 800645a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800645c:	4413      	add	r3, r2
 800645e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006462:	673b      	str	r3, [r7, #112]	@ 0x70
 8006464:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006466:	2200      	movs	r2, #0
 8006468:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	4619      	mov	r1, r3
 8006470:	68f8      	ldr	r0, [r7, #12]
 8006472:	f007 feb4 	bl	800e1de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8006476:	88fb      	ldrh	r3, [r7, #6]
 8006478:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800647c:	2b00      	cmp	r3, #0
 800647e:	f040 811a 	bne.w	80066b6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	461a      	mov	r2, r3
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	4413      	add	r3, r2
 8006490:	881b      	ldrh	r3, [r3, #0]
 8006492:	b29b      	uxth	r3, r3
 8006494:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006498:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800649c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	461a      	mov	r2, r3
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	441a      	add	r2, r3
 80064ae:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80064b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80064be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	8013      	strh	r3, [r2, #0]
 80064c6:	e0f6      	b.n	80066b6 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80064c8:	88fb      	ldrh	r3, [r7, #6]
 80064ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d121      	bne.n	8006516 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	461a      	mov	r2, r3
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	4413      	add	r3, r2
 80064e0:	881b      	ldrh	r3, [r3, #0]
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ec:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	461a      	mov	r2, r3
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	441a      	add	r2, r3
 80064fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006502:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006506:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800650a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800650e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006512:	b29b      	uxth	r3, r3
 8006514:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800651c:	2b01      	cmp	r3, #1
 800651e:	f040 80ca 	bne.w	80066b6 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	695a      	ldr	r2, [r3, #20]
 8006526:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800652a:	441a      	add	r2, r3
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	69da      	ldr	r2, [r3, #28]
 8006534:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006538:	441a      	add	r2, r3
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	6a1a      	ldr	r2, [r3, #32]
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	429a      	cmp	r2, r3
 8006548:	d30b      	bcc.n	8006562 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	6a1a      	ldr	r2, [r3, #32]
 8006556:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800655a:	1ad2      	subs	r2, r2, r3
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	621a      	str	r2, [r3, #32]
 8006560:	e017      	b.n	8006592 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	6a1b      	ldr	r3, [r3, #32]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d108      	bne.n	800657c <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800656a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800656e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	2200      	movs	r2, #0
 8006576:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800657a:	e00a      	b.n	8006592 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	6a1b      	ldr	r3, [r3, #32]
 8006580:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	2200      	movs	r2, #0
 8006588:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	657b      	str	r3, [r7, #84]	@ 0x54
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	785b      	ldrb	r3, [r3, #1]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d165      	bne.n	800666c <HAL_PCD_EP_DB_Transmit+0x748>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	461a      	mov	r2, r3
 80065b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065b4:	4413      	add	r3, r2
 80065b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	00da      	lsls	r2, r3, #3
 80065be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065c0:	4413      	add	r3, r2
 80065c2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80065c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80065c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80065ca:	881b      	ldrh	r3, [r3, #0]
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065d2:	b29a      	uxth	r2, r3
 80065d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80065d6:	801a      	strh	r2, [r3, #0]
 80065d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065dc:	2b3e      	cmp	r3, #62	@ 0x3e
 80065de:	d91d      	bls.n	800661c <HAL_PCD_EP_DB_Transmit+0x6f8>
 80065e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065e4:	095b      	lsrs	r3, r3, #5
 80065e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065ec:	f003 031f 	and.w	r3, r3, #31
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d102      	bne.n	80065fa <HAL_PCD_EP_DB_Transmit+0x6d6>
 80065f4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80065f6:	3b01      	subs	r3, #1
 80065f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065fa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80065fc:	881b      	ldrh	r3, [r3, #0]
 80065fe:	b29a      	uxth	r2, r3
 8006600:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006602:	b29b      	uxth	r3, r3
 8006604:	029b      	lsls	r3, r3, #10
 8006606:	b29b      	uxth	r3, r3
 8006608:	4313      	orrs	r3, r2
 800660a:	b29b      	uxth	r3, r3
 800660c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006610:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006614:	b29a      	uxth	r2, r3
 8006616:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006618:	801a      	strh	r2, [r3, #0]
 800661a:	e041      	b.n	80066a0 <HAL_PCD_EP_DB_Transmit+0x77c>
 800661c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006620:	2b00      	cmp	r3, #0
 8006622:	d10a      	bne.n	800663a <HAL_PCD_EP_DB_Transmit+0x716>
 8006624:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006626:	881b      	ldrh	r3, [r3, #0]
 8006628:	b29b      	uxth	r3, r3
 800662a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800662e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006632:	b29a      	uxth	r2, r3
 8006634:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006636:	801a      	strh	r2, [r3, #0]
 8006638:	e032      	b.n	80066a0 <HAL_PCD_EP_DB_Transmit+0x77c>
 800663a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800663e:	085b      	lsrs	r3, r3, #1
 8006640:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006642:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	2b00      	cmp	r3, #0
 800664c:	d002      	beq.n	8006654 <HAL_PCD_EP_DB_Transmit+0x730>
 800664e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006650:	3301      	adds	r3, #1
 8006652:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006654:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006656:	881b      	ldrh	r3, [r3, #0]
 8006658:	b29a      	uxth	r2, r3
 800665a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800665c:	b29b      	uxth	r3, r3
 800665e:	029b      	lsls	r3, r3, #10
 8006660:	b29b      	uxth	r3, r3
 8006662:	4313      	orrs	r3, r2
 8006664:	b29a      	uxth	r2, r3
 8006666:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006668:	801a      	strh	r2, [r3, #0]
 800666a:	e019      	b.n	80066a0 <HAL_PCD_EP_DB_Transmit+0x77c>
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	785b      	ldrb	r3, [r3, #1]
 8006670:	2b01      	cmp	r3, #1
 8006672:	d115      	bne.n	80066a0 <HAL_PCD_EP_DB_Transmit+0x77c>
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800667c:	b29b      	uxth	r3, r3
 800667e:	461a      	mov	r2, r3
 8006680:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006682:	4413      	add	r3, r2
 8006684:	657b      	str	r3, [r7, #84]	@ 0x54
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	781b      	ldrb	r3, [r3, #0]
 800668a:	00da      	lsls	r2, r3, #3
 800668c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800668e:	4413      	add	r3, r2
 8006690:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006694:	653b      	str	r3, [r7, #80]	@ 0x50
 8006696:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800669a:	b29a      	uxth	r2, r3
 800669c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800669e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6818      	ldr	r0, [r3, #0]
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	6959      	ldr	r1, [r3, #20]
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	895a      	ldrh	r2, [r3, #10]
 80066ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066b0:	b29b      	uxth	r3, r3
 80066b2:	f005 fadb 	bl	800bc6c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	461a      	mov	r2, r3
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	4413      	add	r3, r2
 80066c4:	881b      	ldrh	r3, [r3, #0]
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80066d0:	82bb      	strh	r3, [r7, #20]
 80066d2:	8abb      	ldrh	r3, [r7, #20]
 80066d4:	f083 0310 	eor.w	r3, r3, #16
 80066d8:	82bb      	strh	r3, [r7, #20]
 80066da:	8abb      	ldrh	r3, [r7, #20]
 80066dc:	f083 0320 	eor.w	r3, r3, #32
 80066e0:	82bb      	strh	r3, [r7, #20]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	461a      	mov	r2, r3
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	441a      	add	r2, r3
 80066f0:	8abb      	ldrh	r3, [r7, #20]
 80066f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006702:	b29b      	uxth	r3, r3
 8006704:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3790      	adds	r7, #144	@ 0x90
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006710:	b480      	push	{r7}
 8006712:	b087      	sub	sp, #28
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	607b      	str	r3, [r7, #4]
 800671a:	460b      	mov	r3, r1
 800671c:	817b      	strh	r3, [r7, #10]
 800671e:	4613      	mov	r3, r2
 8006720:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006722:	897b      	ldrh	r3, [r7, #10]
 8006724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006728:	b29b      	uxth	r3, r3
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00b      	beq.n	8006746 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800672e:	897b      	ldrh	r3, [r7, #10]
 8006730:	f003 0207 	and.w	r2, r3, #7
 8006734:	4613      	mov	r3, r2
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	4413      	add	r3, r2
 800673a:	00db      	lsls	r3, r3, #3
 800673c:	3310      	adds	r3, #16
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	4413      	add	r3, r2
 8006742:	617b      	str	r3, [r7, #20]
 8006744:	e009      	b.n	800675a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006746:	897a      	ldrh	r2, [r7, #10]
 8006748:	4613      	mov	r3, r2
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	4413      	add	r3, r2
 800674e:	00db      	lsls	r3, r3, #3
 8006750:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	4413      	add	r3, r2
 8006758:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800675a:	893b      	ldrh	r3, [r7, #8]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d107      	bne.n	8006770 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	2200      	movs	r2, #0
 8006764:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	b29a      	uxth	r2, r3
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	80da      	strh	r2, [r3, #6]
 800676e:	e00b      	b.n	8006788 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	2201      	movs	r2, #1
 8006774:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	b29a      	uxth	r2, r3
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	0c1b      	lsrs	r3, r3, #16
 8006782:	b29a      	uxth	r2, r3
 8006784:	697b      	ldr	r3, [r7, #20]
 8006786:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	371c      	adds	r7, #28
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr

08006796 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006796:	b480      	push	{r7}
 8006798:	b085      	sub	sp, #20
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80067ba:	b29b      	uxth	r3, r3
 80067bc:	f043 0301 	orr.w	r3, r3, #1
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	f043 0302 	orr.w	r3, r3, #2
 80067d4:	b29a      	uxth	r2, r3
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3714      	adds	r7, #20
 80067e2:	46bd      	mov	sp, r7
 80067e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e8:	4770      	bx	lr
	...

080067ec <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80067ec:	b480      	push	{r7}
 80067ee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067f0:	4b05      	ldr	r3, [pc, #20]	@ (8006808 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a04      	ldr	r2, [pc, #16]	@ (8006808 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80067f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067fa:	6013      	str	r3, [r2, #0]
}
 80067fc:	bf00      	nop
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	58000400 	.word	0x58000400

0800680c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800680c:	b480      	push	{r7}
 800680e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8006810:	4b04      	ldr	r3, [pc, #16]	@ (8006824 <HAL_PWREx_GetVoltageRange+0x18>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8006818:	4618      	mov	r0, r3
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	58000400 	.word	0x58000400

08006828 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006828:	b480      	push	{r7}
 800682a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800682c:	4b05      	ldr	r3, [pc, #20]	@ (8006844 <HAL_PWREx_EnableVddUSB+0x1c>)
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	4a04      	ldr	r2, [pc, #16]	@ (8006844 <HAL_PWREx_EnableVddUSB+0x1c>)
 8006832:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006836:	6053      	str	r3, [r2, #4]
}
 8006838:	bf00      	nop
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	58000400 	.word	0x58000400

08006848 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8006848:	b480      	push	{r7}
 800684a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800684c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006856:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800685a:	d101      	bne.n	8006860 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800685c:	2301      	movs	r3, #1
 800685e:	e000      	b.n	8006862 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800686c:	b480      	push	{r7}
 800686e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8006870:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800687a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800687e:	6013      	str	r3, [r2, #0]
}
 8006880:	bf00      	nop
 8006882:	46bd      	mov	sp, r7
 8006884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006888:	4770      	bx	lr

0800688a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800688a:	b480      	push	{r7}
 800688c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800688e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006898:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800689c:	6013      	str	r3, [r2, #0]
}
 800689e:	bf00      	nop
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80068a8:	b480      	push	{r7}
 80068aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80068ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80068ba:	d101      	bne.n	80068c0 <LL_RCC_HSE_IsReady+0x18>
 80068bc:	2301      	movs	r3, #1
 80068be:	e000      	b.n	80068c2 <LL_RCC_HSE_IsReady+0x1a>
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80068cc:	b480      	push	{r7}
 80068ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80068d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80068da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068de:	6013      	str	r3, [r2, #0]
}
 80068e0:	bf00      	nop
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80068ea:	b480      	push	{r7}
 80068ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80068ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80068f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068fc:	6013      	str	r3, [r2, #0]
}
 80068fe:	bf00      	nop
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8006908:	b480      	push	{r7}
 800690a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800690c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006916:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800691a:	d101      	bne.n	8006920 <LL_RCC_HSI_IsReady+0x18>
 800691c:	2301      	movs	r3, #1
 800691e:	e000      	b.n	8006922 <LL_RCC_HSI_IsReady+0x1a>
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8006934:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	061b      	lsls	r3, r3, #24
 8006942:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006946:	4313      	orrs	r3, r2
 8006948:	604b      	str	r3, [r1, #4]
}
 800694a:	bf00      	nop
 800694c:	370c      	adds	r7, #12
 800694e:	46bd      	mov	sp, r7
 8006950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006954:	4770      	bx	lr

08006956 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8006956:	b480      	push	{r7}
 8006958:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800695a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800695e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006962:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006966:	f043 0301 	orr.w	r3, r3, #1
 800696a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800696e:	bf00      	nop
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr

08006978 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8006978:	b480      	push	{r7}
 800697a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800697c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006980:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006984:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006988:	f023 0301 	bic.w	r3, r3, #1
 800698c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8006990:	bf00      	nop
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr

0800699a <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800699a:	b480      	push	{r7}
 800699c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800699e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80069a6:	f003 0302 	and.w	r3, r3, #2
 80069aa:	2b02      	cmp	r3, #2
 80069ac:	d101      	bne.n	80069b2 <LL_RCC_HSI48_IsReady+0x18>
 80069ae:	2301      	movs	r3, #1
 80069b0:	e000      	b.n	80069b4 <LL_RCC_HSI48_IsReady+0x1a>
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr

080069be <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80069be:	b480      	push	{r7}
 80069c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80069c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80069ce:	f043 0301 	orr.w	r3, r3, #1
 80069d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80069d6:	bf00      	nop
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80069e0:	b480      	push	{r7}
 80069e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80069e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80069f0:	f023 0301 	bic.w	r3, r3, #1
 80069f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80069f8:	bf00      	nop
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr

08006a02 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8006a02:	b480      	push	{r7}
 8006a04:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006a06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a12:	f043 0304 	orr.w	r3, r3, #4
 8006a16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006a1a:	bf00      	nop
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8006a24:	b480      	push	{r7}
 8006a26:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006a28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a34:	f023 0304 	bic.w	r3, r3, #4
 8006a38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006a3c:	bf00      	nop
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8006a46:	b480      	push	{r7}
 8006a48:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006a4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a52:	f003 0302 	and.w	r3, r3, #2
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d101      	bne.n	8006a5e <LL_RCC_LSE_IsReady+0x18>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e000      	b.n	8006a60 <LL_RCC_LSE_IsReady+0x1a>
 8006a5e:	2300      	movs	r3, #0
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006a6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a76:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a7a:	f043 0301 	orr.w	r3, r3, #1
 8006a7e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006a82:	bf00      	nop
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006a90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006a98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a9c:	f023 0301 	bic.w	r3, r3, #1
 8006aa0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006aa4:	bf00      	nop
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr

08006aae <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8006aae:	b480      	push	{r7}
 8006ab0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8006ab2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ab6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006aba:	f003 0302 	and.w	r3, r3, #2
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d101      	bne.n	8006ac6 <LL_RCC_LSI1_IsReady+0x18>
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	e000      	b.n	8006ac8 <LL_RCC_LSI1_IsReady+0x1a>
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr

08006ad2 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006ad6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ada:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ade:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ae2:	f043 0304 	orr.w	r3, r3, #4
 8006ae6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006aea:	bf00      	nop
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8006af4:	b480      	push	{r7}
 8006af6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006af8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006afc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b04:	f023 0304 	bic.w	r3, r3, #4
 8006b08:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006b0c:	bf00      	nop
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr

08006b16 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8006b16:	b480      	push	{r7}
 8006b18:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8006b1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b22:	f003 0308 	and.w	r3, r3, #8
 8006b26:	2b08      	cmp	r3, #8
 8006b28:	d101      	bne.n	8006b2e <LL_RCC_LSI2_IsReady+0x18>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e000      	b.n	8006b30 <LL_RCC_LSI2_IsReady+0x1a>
 8006b2e:	2300      	movs	r3, #0
}
 8006b30:	4618      	mov	r0, r3
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr

08006b3a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	b083      	sub	sp, #12
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8006b42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b4a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	021b      	lsls	r3, r3, #8
 8006b52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b56:	4313      	orrs	r3, r2
 8006b58:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006b6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b76:	f043 0301 	orr.w	r3, r3, #1
 8006b7a:	6013      	str	r3, [r2, #0]
}
 8006b7c:	bf00      	nop
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr

08006b86 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8006b86:	b480      	push	{r7}
 8006b88:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006b8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b94:	f023 0301 	bic.w	r3, r3, #1
 8006b98:	6013      	str	r3, [r2, #0]
}
 8006b9a:	bf00      	nop
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006ba8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0302 	and.w	r3, r3, #2
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d101      	bne.n	8006bba <LL_RCC_MSI_IsReady+0x16>
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e000      	b.n	8006bbc <LL_RCC_MSI_IsReady+0x18>
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr

08006bc6 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8006bc6:	b480      	push	{r7}
 8006bc8:	b083      	sub	sp, #12
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8006bce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006bd8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4313      	orrs	r3, r2
 8006be0:	600b      	str	r3, [r1, #0]
}
 8006be2:	bf00      	nop
 8006be4:	370c      	adds	r7, #12
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr

08006bee <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b083      	sub	sp, #12
 8006bf2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8006bf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006bfe:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2bb0      	cmp	r3, #176	@ 0xb0
 8006c04:	d901      	bls.n	8006c0a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8006c06:	23b0      	movs	r3, #176	@ 0xb0
 8006c08:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8006c0a:	687b      	ldr	r3, [r7, #4]
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b083      	sub	sp, #12
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006c20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	021b      	lsls	r3, r3, #8
 8006c2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c32:	4313      	orrs	r3, r2
 8006c34:	604b      	str	r3, [r1, #4]
}
 8006c36:	bf00      	nop
 8006c38:	370c      	adds	r7, #12
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr

08006c42 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8006c42:	b480      	push	{r7}
 8006c44:	b083      	sub	sp, #12
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006c4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c4e:	689b      	ldr	r3, [r3, #8]
 8006c50:	f023 0203 	bic.w	r2, r3, #3
 8006c54:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	608b      	str	r3, [r1, #8]
}
 8006c5e:	bf00      	nop
 8006c60:	370c      	adds	r7, #12
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr

08006c6a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006c6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	f003 030c 	and.w	r3, r3, #12
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr

08006c82 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8006c82:	b480      	push	{r7}
 8006c84:	b083      	sub	sp, #12
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006c8a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	608b      	str	r3, [r1, #8]
}
 8006c9e:	bf00      	nop
 8006ca0:	370c      	adds	r7, #12
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr

08006caa <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8006caa:	b480      	push	{r7}
 8006cac:	b083      	sub	sp, #12
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8006cb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cb6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006cba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006cbe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8006cca:	bf00      	nop
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b083      	sub	sp, #12
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006cde:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ce2:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006ce6:	f023 020f 	bic.w	r2, r3, #15
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	091b      	lsrs	r3, r3, #4
 8006cee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8006cf8:	bf00      	nop
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b083      	sub	sp, #12
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006d0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d10:	689b      	ldr	r3, [r3, #8]
 8006d12:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006d16:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	608b      	str	r3, [r1, #8]
}
 8006d20:	bf00      	nop
 8006d22:	370c      	adds	r7, #12
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr

08006d2c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006d34:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006d3e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	608b      	str	r3, [r1, #8]
}
 8006d48:	bf00      	nop
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8006d54:	b480      	push	{r7}
 8006d56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006d58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006d70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d74:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006d78:	011b      	lsls	r3, r3, #4
 8006d7a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006d8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8006da0:	b480      	push	{r7}
 8006da2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006da4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006db8:	b480      	push	{r7}
 8006dba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006dbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006dc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006dca:	6013      	str	r3, [r2, #0]
}
 8006dcc:	bf00      	nop
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr

08006dd6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8006dd6:	b480      	push	{r7}
 8006dd8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006dda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006de4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006de8:	6013      	str	r3, [r2, #0]
}
 8006dea:	bf00      	nop
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8006df4:	b480      	push	{r7}
 8006df6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006df8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e02:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e06:	d101      	bne.n	8006e0c <LL_RCC_PLL_IsReady+0x18>
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e000      	b.n	8006e0e <LL_RCC_PLL_IsReady+0x1a>
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006e1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	0a1b      	lsrs	r3, r3, #8
 8006e24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr

08006e32 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006e32:	b480      	push	{r7}
 8006e34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006e36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr

08006e4a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006e4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr

08006e62 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006e62:	b480      	push	{r7}
 8006e64:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006e66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	f003 0303 	and.w	r3, r3, #3
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8006e7a:	b480      	push	{r7}
 8006e7c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006e7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006e88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e8c:	d101      	bne.n	8006e92 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e000      	b.n	8006e94 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr

08006e9e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8006e9e:	b480      	push	{r7}
 8006ea0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8006ea2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ea6:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006eae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006eb2:	d101      	bne.n	8006eb8 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e000      	b.n	8006eba <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec2:	4770      	bx	lr

08006ec4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006ec8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ecc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006ed0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ed4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ed8:	d101      	bne.n	8006ede <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006eda:	2301      	movs	r3, #1
 8006edc:	e000      	b.n	8006ee0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr

08006eea <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006eea:	b480      	push	{r7}
 8006eec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006eee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ef8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006efc:	d101      	bne.n	8006f02 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006efe:	2301      	movs	r3, #1
 8006f00:	e000      	b.n	8006f04 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr

08006f0e <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8006f0e:	b480      	push	{r7}
 8006f10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006f12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f1c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f20:	d101      	bne.n	8006f26 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006f22:	2301      	movs	r3, #1
 8006f24:	e000      	b.n	8006f28 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
	...

08006f34 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f34:	b590      	push	{r4, r7, lr}
 8006f36:	b08d      	sub	sp, #52	@ 0x34
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d101      	bne.n	8006f46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e363      	b.n	800760e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 0320 	and.w	r3, r3, #32
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f000 808d 	beq.w	800706e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f54:	f7ff fe89 	bl	8006c6a <LL_RCC_GetSysClkSource>
 8006f58:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006f5a:	f7ff ff82 	bl	8006e62 <LL_RCC_PLL_GetMainSource>
 8006f5e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d005      	beq.n	8006f72 <HAL_RCC_OscConfig+0x3e>
 8006f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f68:	2b0c      	cmp	r3, #12
 8006f6a:	d147      	bne.n	8006ffc <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8006f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d144      	bne.n	8006ffc <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	69db      	ldr	r3, [r3, #28]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d101      	bne.n	8006f7e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e347      	b.n	800760e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8006f82:	f7ff fe34 	bl	8006bee <LL_RCC_MSI_GetRange>
 8006f86:	4603      	mov	r3, r0
 8006f88:	429c      	cmp	r4, r3
 8006f8a:	d914      	bls.n	8006fb6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f90:	4618      	mov	r0, r3
 8006f92:	f000 fd2f 	bl	80079f4 <RCC_SetFlashLatencyFromMSIRange>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d001      	beq.n	8006fa0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e336      	b.n	800760e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7ff fe0e 	bl	8006bc6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a1b      	ldr	r3, [r3, #32]
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7ff fe32 	bl	8006c18 <LL_RCC_MSI_SetCalibTrimming>
 8006fb4:	e013      	b.n	8006fde <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7ff fe03 	bl	8006bc6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6a1b      	ldr	r3, [r3, #32]
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f7ff fe27 	bl	8006c18 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f000 fd10 	bl	80079f4 <RCC_SetFlashLatencyFromMSIRange>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d001      	beq.n	8006fde <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e317      	b.n	800760e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8006fde:	f000 fcc9 	bl	8007974 <HAL_RCC_GetHCLKFreq>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	4aa4      	ldr	r2, [pc, #656]	@ (8007278 <HAL_RCC_OscConfig+0x344>)
 8006fe6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006fe8:	4ba4      	ldr	r3, [pc, #656]	@ (800727c <HAL_RCC_OscConfig+0x348>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7fa febd 	bl	8001d6c <HAL_InitTick>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d039      	beq.n	800706c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e308      	b.n	800760e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	69db      	ldr	r3, [r3, #28]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d01e      	beq.n	8007042 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007004:	f7ff fdb0 	bl	8006b68 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007008:	f7fa fefe 	bl	8001e08 <HAL_GetTick>
 800700c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800700e:	e008      	b.n	8007022 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007010:	f7fa fefa 	bl	8001e08 <HAL_GetTick>
 8007014:	4602      	mov	r2, r0
 8007016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007018:	1ad3      	subs	r3, r2, r3
 800701a:	2b02      	cmp	r3, #2
 800701c:	d901      	bls.n	8007022 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800701e:	2303      	movs	r3, #3
 8007020:	e2f5      	b.n	800760e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8007022:	f7ff fdbf 	bl	8006ba4 <LL_RCC_MSI_IsReady>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d0f1      	beq.n	8007010 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007030:	4618      	mov	r0, r3
 8007032:	f7ff fdc8 	bl	8006bc6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	4618      	mov	r0, r3
 800703c:	f7ff fdec 	bl	8006c18 <LL_RCC_MSI_SetCalibTrimming>
 8007040:	e015      	b.n	800706e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007042:	f7ff fda0 	bl	8006b86 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007046:	f7fa fedf 	bl	8001e08 <HAL_GetTick>
 800704a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800704c:	e008      	b.n	8007060 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800704e:	f7fa fedb 	bl	8001e08 <HAL_GetTick>
 8007052:	4602      	mov	r2, r0
 8007054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	2b02      	cmp	r3, #2
 800705a:	d901      	bls.n	8007060 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800705c:	2303      	movs	r3, #3
 800705e:	e2d6      	b.n	800760e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8007060:	f7ff fda0 	bl	8006ba4 <LL_RCC_MSI_IsReady>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1f1      	bne.n	800704e <HAL_RCC_OscConfig+0x11a>
 800706a:	e000      	b.n	800706e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800706c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 0301 	and.w	r3, r3, #1
 8007076:	2b00      	cmp	r3, #0
 8007078:	d047      	beq.n	800710a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800707a:	f7ff fdf6 	bl	8006c6a <LL_RCC_GetSysClkSource>
 800707e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007080:	f7ff feef 	bl	8006e62 <LL_RCC_PLL_GetMainSource>
 8007084:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007086:	6a3b      	ldr	r3, [r7, #32]
 8007088:	2b08      	cmp	r3, #8
 800708a:	d005      	beq.n	8007098 <HAL_RCC_OscConfig+0x164>
 800708c:	6a3b      	ldr	r3, [r7, #32]
 800708e:	2b0c      	cmp	r3, #12
 8007090:	d108      	bne.n	80070a4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	2b03      	cmp	r3, #3
 8007096:	d105      	bne.n	80070a4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d134      	bne.n	800710a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	e2b4      	b.n	800760e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070ac:	d102      	bne.n	80070b4 <HAL_RCC_OscConfig+0x180>
 80070ae:	f7ff fbdd 	bl	800686c <LL_RCC_HSE_Enable>
 80070b2:	e001      	b.n	80070b8 <HAL_RCC_OscConfig+0x184>
 80070b4:	f7ff fbe9 	bl	800688a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d012      	beq.n	80070e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070c0:	f7fa fea2 	bl	8001e08 <HAL_GetTick>
 80070c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80070c6:	e008      	b.n	80070da <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070c8:	f7fa fe9e 	bl	8001e08 <HAL_GetTick>
 80070cc:	4602      	mov	r2, r0
 80070ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d0:	1ad3      	subs	r3, r2, r3
 80070d2:	2b64      	cmp	r3, #100	@ 0x64
 80070d4:	d901      	bls.n	80070da <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	e299      	b.n	800760e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 80070da:	f7ff fbe5 	bl	80068a8 <LL_RCC_HSE_IsReady>
 80070de:	4603      	mov	r3, r0
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d0f1      	beq.n	80070c8 <HAL_RCC_OscConfig+0x194>
 80070e4:	e011      	b.n	800710a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070e6:	f7fa fe8f 	bl	8001e08 <HAL_GetTick>
 80070ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80070ec:	e008      	b.n	8007100 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070ee:	f7fa fe8b 	bl	8001e08 <HAL_GetTick>
 80070f2:	4602      	mov	r2, r0
 80070f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070f6:	1ad3      	subs	r3, r2, r3
 80070f8:	2b64      	cmp	r3, #100	@ 0x64
 80070fa:	d901      	bls.n	8007100 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80070fc:	2303      	movs	r3, #3
 80070fe:	e286      	b.n	800760e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8007100:	f7ff fbd2 	bl	80068a8 <LL_RCC_HSE_IsReady>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1f1      	bne.n	80070ee <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 0302 	and.w	r3, r3, #2
 8007112:	2b00      	cmp	r3, #0
 8007114:	d04c      	beq.n	80071b0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007116:	f7ff fda8 	bl	8006c6a <LL_RCC_GetSysClkSource>
 800711a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800711c:	f7ff fea1 	bl	8006e62 <LL_RCC_PLL_GetMainSource>
 8007120:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	2b04      	cmp	r3, #4
 8007126:	d005      	beq.n	8007134 <HAL_RCC_OscConfig+0x200>
 8007128:	69bb      	ldr	r3, [r7, #24]
 800712a:	2b0c      	cmp	r3, #12
 800712c:	d10e      	bne.n	800714c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	2b02      	cmp	r3, #2
 8007132:	d10b      	bne.n	800714c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d101      	bne.n	8007140 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e266      	b.n	800760e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	4618      	mov	r0, r3
 8007146:	f7ff fbf1 	bl	800692c <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800714a:	e031      	b.n	80071b0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d019      	beq.n	8007188 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007154:	f7ff fbba 	bl	80068cc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007158:	f7fa fe56 	bl	8001e08 <HAL_GetTick>
 800715c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800715e:	e008      	b.n	8007172 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007160:	f7fa fe52 	bl	8001e08 <HAL_GetTick>
 8007164:	4602      	mov	r2, r0
 8007166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007168:	1ad3      	subs	r3, r2, r3
 800716a:	2b02      	cmp	r3, #2
 800716c:	d901      	bls.n	8007172 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800716e:	2303      	movs	r3, #3
 8007170:	e24d      	b.n	800760e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8007172:	f7ff fbc9 	bl	8006908 <LL_RCC_HSI_IsReady>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d0f1      	beq.n	8007160 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	4618      	mov	r0, r3
 8007182:	f7ff fbd3 	bl	800692c <LL_RCC_HSI_SetCalibTrimming>
 8007186:	e013      	b.n	80071b0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007188:	f7ff fbaf 	bl	80068ea <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800718c:	f7fa fe3c 	bl	8001e08 <HAL_GetTick>
 8007190:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8007192:	e008      	b.n	80071a6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007194:	f7fa fe38 	bl	8001e08 <HAL_GetTick>
 8007198:	4602      	mov	r2, r0
 800719a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800719c:	1ad3      	subs	r3, r2, r3
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d901      	bls.n	80071a6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80071a2:	2303      	movs	r3, #3
 80071a4:	e233      	b.n	800760e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 80071a6:	f7ff fbaf 	bl	8006908 <LL_RCC_HSI_IsReady>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1f1      	bne.n	8007194 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 0308 	and.w	r3, r3, #8
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d106      	bne.n	80071ca <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	f000 80a3 	beq.w	8007310 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	695b      	ldr	r3, [r3, #20]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d076      	beq.n	80072c0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 0310 	and.w	r3, r3, #16
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d046      	beq.n	800726c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 80071de:	f7ff fc66 	bl	8006aae <LL_RCC_LSI1_IsReady>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d113      	bne.n	8007210 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 80071e8:	f7ff fc3f 	bl	8006a6a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80071ec:	f7fa fe0c 	bl	8001e08 <HAL_GetTick>
 80071f0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 80071f2:	e008      	b.n	8007206 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80071f4:	f7fa fe08 	bl	8001e08 <HAL_GetTick>
 80071f8:	4602      	mov	r2, r0
 80071fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071fc:	1ad3      	subs	r3, r2, r3
 80071fe:	2b02      	cmp	r3, #2
 8007200:	d901      	bls.n	8007206 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8007202:	2303      	movs	r3, #3
 8007204:	e203      	b.n	800760e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007206:	f7ff fc52 	bl	8006aae <LL_RCC_LSI1_IsReady>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d0f1      	beq.n	80071f4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8007210:	f7ff fc5f 	bl	8006ad2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007214:	f7fa fdf8 	bl	8001e08 <HAL_GetTick>
 8007218:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800721a:	e008      	b.n	800722e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800721c:	f7fa fdf4 	bl	8001e08 <HAL_GetTick>
 8007220:	4602      	mov	r2, r0
 8007222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	2b03      	cmp	r3, #3
 8007228:	d901      	bls.n	800722e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800722a:	2303      	movs	r3, #3
 800722c:	e1ef      	b.n	800760e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800722e:	f7ff fc72 	bl	8006b16 <LL_RCC_LSI2_IsReady>
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d0f1      	beq.n	800721c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	4618      	mov	r0, r3
 800723e:	f7ff fc7c 	bl	8006b3a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8007242:	f7ff fc23 	bl	8006a8c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007246:	f7fa fddf 	bl	8001e08 <HAL_GetTick>
 800724a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800724c:	e008      	b.n	8007260 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800724e:	f7fa fddb 	bl	8001e08 <HAL_GetTick>
 8007252:	4602      	mov	r2, r0
 8007254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	2b02      	cmp	r3, #2
 800725a:	d901      	bls.n	8007260 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	e1d6      	b.n	800760e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007260:	f7ff fc25 	bl	8006aae <LL_RCC_LSI1_IsReady>
 8007264:	4603      	mov	r3, r0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1f1      	bne.n	800724e <HAL_RCC_OscConfig+0x31a>
 800726a:	e051      	b.n	8007310 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800726c:	f7ff fbfd 	bl	8006a6a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007270:	f7fa fdca 	bl	8001e08 <HAL_GetTick>
 8007274:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8007276:	e00c      	b.n	8007292 <HAL_RCC_OscConfig+0x35e>
 8007278:	20000008 	.word	0x20000008
 800727c:	20000028 	.word	0x20000028
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007280:	f7fa fdc2 	bl	8001e08 <HAL_GetTick>
 8007284:	4602      	mov	r2, r0
 8007286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	2b02      	cmp	r3, #2
 800728c:	d901      	bls.n	8007292 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800728e:	2303      	movs	r3, #3
 8007290:	e1bd      	b.n	800760e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8007292:	f7ff fc0c 	bl	8006aae <LL_RCC_LSI1_IsReady>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d0f1      	beq.n	8007280 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800729c:	f7ff fc2a 	bl	8006af4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80072a0:	e008      	b.n	80072b4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80072a2:	f7fa fdb1 	bl	8001e08 <HAL_GetTick>
 80072a6:	4602      	mov	r2, r0
 80072a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072aa:	1ad3      	subs	r3, r2, r3
 80072ac:	2b03      	cmp	r3, #3
 80072ae:	d901      	bls.n	80072b4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 80072b0:	2303      	movs	r3, #3
 80072b2:	e1ac      	b.n	800760e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80072b4:	f7ff fc2f 	bl	8006b16 <LL_RCC_LSI2_IsReady>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d1f1      	bne.n	80072a2 <HAL_RCC_OscConfig+0x36e>
 80072be:	e027      	b.n	8007310 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 80072c0:	f7ff fc18 	bl	8006af4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072c4:	f7fa fda0 	bl	8001e08 <HAL_GetTick>
 80072c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 80072ca:	e008      	b.n	80072de <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80072cc:	f7fa fd9c 	bl	8001e08 <HAL_GetTick>
 80072d0:	4602      	mov	r2, r0
 80072d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	2b03      	cmp	r3, #3
 80072d8:	d901      	bls.n	80072de <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80072da:	2303      	movs	r3, #3
 80072dc:	e197      	b.n	800760e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 80072de:	f7ff fc1a 	bl	8006b16 <LL_RCC_LSI2_IsReady>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d1f1      	bne.n	80072cc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 80072e8:	f7ff fbd0 	bl	8006a8c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072ec:	f7fa fd8c 	bl	8001e08 <HAL_GetTick>
 80072f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 80072f2:	e008      	b.n	8007306 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80072f4:	f7fa fd88 	bl	8001e08 <HAL_GetTick>
 80072f8:	4602      	mov	r2, r0
 80072fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d901      	bls.n	8007306 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8007302:	2303      	movs	r3, #3
 8007304:	e183      	b.n	800760e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007306:	f7ff fbd2 	bl	8006aae <LL_RCC_LSI1_IsReady>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d1f1      	bne.n	80072f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 0304 	and.w	r3, r3, #4
 8007318:	2b00      	cmp	r3, #0
 800731a:	d05b      	beq.n	80073d4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800731c:	4ba7      	ldr	r3, [pc, #668]	@ (80075bc <HAL_RCC_OscConfig+0x688>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007324:	2b00      	cmp	r3, #0
 8007326:	d114      	bne.n	8007352 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007328:	f7ff fa60 	bl	80067ec <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800732c:	f7fa fd6c 	bl	8001e08 <HAL_GetTick>
 8007330:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007332:	e008      	b.n	8007346 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007334:	f7fa fd68 	bl	8001e08 <HAL_GetTick>
 8007338:	4602      	mov	r2, r0
 800733a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	2b02      	cmp	r3, #2
 8007340:	d901      	bls.n	8007346 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8007342:	2303      	movs	r3, #3
 8007344:	e163      	b.n	800760e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007346:	4b9d      	ldr	r3, [pc, #628]	@ (80075bc <HAL_RCC_OscConfig+0x688>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800734e:	2b00      	cmp	r3, #0
 8007350:	d0f0      	beq.n	8007334 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	689b      	ldr	r3, [r3, #8]
 8007356:	2b01      	cmp	r3, #1
 8007358:	d102      	bne.n	8007360 <HAL_RCC_OscConfig+0x42c>
 800735a:	f7ff fb30 	bl	80069be <LL_RCC_LSE_Enable>
 800735e:	e00c      	b.n	800737a <HAL_RCC_OscConfig+0x446>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	2b05      	cmp	r3, #5
 8007366:	d104      	bne.n	8007372 <HAL_RCC_OscConfig+0x43e>
 8007368:	f7ff fb4b 	bl	8006a02 <LL_RCC_LSE_EnableBypass>
 800736c:	f7ff fb27 	bl	80069be <LL_RCC_LSE_Enable>
 8007370:	e003      	b.n	800737a <HAL_RCC_OscConfig+0x446>
 8007372:	f7ff fb35 	bl	80069e0 <LL_RCC_LSE_Disable>
 8007376:	f7ff fb55 	bl	8006a24 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d014      	beq.n	80073ac <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007382:	f7fa fd41 	bl	8001e08 <HAL_GetTick>
 8007386:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8007388:	e00a      	b.n	80073a0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800738a:	f7fa fd3d 	bl	8001e08 <HAL_GetTick>
 800738e:	4602      	mov	r2, r0
 8007390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007398:	4293      	cmp	r3, r2
 800739a:	d901      	bls.n	80073a0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800739c:	2303      	movs	r3, #3
 800739e:	e136      	b.n	800760e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 80073a0:	f7ff fb51 	bl	8006a46 <LL_RCC_LSE_IsReady>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d0ef      	beq.n	800738a <HAL_RCC_OscConfig+0x456>
 80073aa:	e013      	b.n	80073d4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073ac:	f7fa fd2c 	bl	8001e08 <HAL_GetTick>
 80073b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80073b2:	e00a      	b.n	80073ca <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073b4:	f7fa fd28 	bl	8001e08 <HAL_GetTick>
 80073b8:	4602      	mov	r2, r0
 80073ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d901      	bls.n	80073ca <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80073c6:	2303      	movs	r3, #3
 80073c8:	e121      	b.n	800760e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80073ca:	f7ff fb3c 	bl	8006a46 <LL_RCC_LSE_IsReady>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d1ef      	bne.n	80073b4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d02c      	beq.n	800743a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d014      	beq.n	8007412 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80073e8:	f7ff fab5 	bl	8006956 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073ec:	f7fa fd0c 	bl	8001e08 <HAL_GetTick>
 80073f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80073f2:	e008      	b.n	8007406 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80073f4:	f7fa fd08 	bl	8001e08 <HAL_GetTick>
 80073f8:	4602      	mov	r2, r0
 80073fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073fc:	1ad3      	subs	r3, r2, r3
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d901      	bls.n	8007406 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8007402:	2303      	movs	r3, #3
 8007404:	e103      	b.n	800760e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007406:	f7ff fac8 	bl	800699a <LL_RCC_HSI48_IsReady>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d0f1      	beq.n	80073f4 <HAL_RCC_OscConfig+0x4c0>
 8007410:	e013      	b.n	800743a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007412:	f7ff fab1 	bl	8006978 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007416:	f7fa fcf7 	bl	8001e08 <HAL_GetTick>
 800741a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800741c:	e008      	b.n	8007430 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800741e:	f7fa fcf3 	bl	8001e08 <HAL_GetTick>
 8007422:	4602      	mov	r2, r0
 8007424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	2b02      	cmp	r3, #2
 800742a:	d901      	bls.n	8007430 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800742c:	2303      	movs	r3, #3
 800742e:	e0ee      	b.n	800760e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007430:	f7ff fab3 	bl	800699a <LL_RCC_HSI48_IsReady>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1f1      	bne.n	800741e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800743e:	2b00      	cmp	r3, #0
 8007440:	f000 80e4 	beq.w	800760c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007444:	f7ff fc11 	bl	8006c6a <LL_RCC_GetSysClkSource>
 8007448:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800744a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800744e:	68db      	ldr	r3, [r3, #12]
 8007450:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007456:	2b02      	cmp	r3, #2
 8007458:	f040 80b4 	bne.w	80075c4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f003 0203 	and.w	r2, r3, #3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007466:	429a      	cmp	r2, r3
 8007468:	d123      	bne.n	80074b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007474:	429a      	cmp	r2, r3
 8007476:	d11c      	bne.n	80074b2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	0a1b      	lsrs	r3, r3, #8
 800747c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007484:	429a      	cmp	r2, r3
 8007486:	d114      	bne.n	80074b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007492:	429a      	cmp	r2, r3
 8007494:	d10d      	bne.n	80074b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d106      	bne.n	80074b2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d05d      	beq.n	800756e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	2b0c      	cmp	r3, #12
 80074b6:	d058      	beq.n	800756a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80074b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d001      	beq.n	80074ca <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e0a1      	b.n	800760e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80074ca:	f7ff fc84 	bl	8006dd6 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80074ce:	f7fa fc9b 	bl	8001e08 <HAL_GetTick>
 80074d2:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074d4:	e008      	b.n	80074e8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074d6:	f7fa fc97 	bl	8001e08 <HAL_GetTick>
 80074da:	4602      	mov	r2, r0
 80074dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	d901      	bls.n	80074e8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80074e4:	2303      	movs	r3, #3
 80074e6:	e092      	b.n	800760e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1ef      	bne.n	80074d6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80074f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074fa:	68da      	ldr	r2, [r3, #12]
 80074fc:	4b30      	ldr	r3, [pc, #192]	@ (80075c0 <HAL_RCC_OscConfig+0x68c>)
 80074fe:	4013      	ands	r3, r2
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007508:	4311      	orrs	r1, r2
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800750e:	0212      	lsls	r2, r2, #8
 8007510:	4311      	orrs	r1, r2
 8007512:	687a      	ldr	r2, [r7, #4]
 8007514:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007516:	4311      	orrs	r1, r2
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800751c:	4311      	orrs	r1, r2
 800751e:	687a      	ldr	r2, [r7, #4]
 8007520:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007522:	430a      	orrs	r2, r1
 8007524:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007528:	4313      	orrs	r3, r2
 800752a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800752c:	f7ff fc44 	bl	8006db8 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007530:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800753a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800753e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007540:	f7fa fc62 	bl	8001e08 <HAL_GetTick>
 8007544:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007546:	e008      	b.n	800755a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007548:	f7fa fc5e 	bl	8001e08 <HAL_GetTick>
 800754c:	4602      	mov	r2, r0
 800754e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007550:	1ad3      	subs	r3, r2, r3
 8007552:	2b02      	cmp	r3, #2
 8007554:	d901      	bls.n	800755a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8007556:	2303      	movs	r3, #3
 8007558:	e059      	b.n	800760e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800755a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007564:	2b00      	cmp	r3, #0
 8007566:	d0ef      	beq.n	8007548 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007568:	e050      	b.n	800760c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	e04f      	b.n	800760e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800756e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007578:	2b00      	cmp	r3, #0
 800757a:	d147      	bne.n	800760c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800757c:	f7ff fc1c 	bl	8006db8 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007580:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007584:	68db      	ldr	r3, [r3, #12]
 8007586:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800758a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800758e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007590:	f7fa fc3a 	bl	8001e08 <HAL_GetTick>
 8007594:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007596:	e008      	b.n	80075aa <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007598:	f7fa fc36 	bl	8001e08 <HAL_GetTick>
 800759c:	4602      	mov	r2, r0
 800759e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d901      	bls.n	80075aa <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80075a6:	2303      	movs	r3, #3
 80075a8:	e031      	b.n	800760e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d0ef      	beq.n	8007598 <HAL_RCC_OscConfig+0x664>
 80075b8:	e028      	b.n	800760c <HAL_RCC_OscConfig+0x6d8>
 80075ba:	bf00      	nop
 80075bc:	58000400 	.word	0x58000400
 80075c0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	2b0c      	cmp	r3, #12
 80075c8:	d01e      	beq.n	8007608 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80075ca:	f7ff fc04 	bl	8006dd6 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075ce:	f7fa fc1b 	bl	8001e08 <HAL_GetTick>
 80075d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075d4:	e008      	b.n	80075e8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075d6:	f7fa fc17 	bl	8001e08 <HAL_GetTick>
 80075da:	4602      	mov	r2, r0
 80075dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d901      	bls.n	80075e8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80075e4:	2303      	movs	r3, #3
 80075e6:	e012      	b.n	800760e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80075e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d1ef      	bne.n	80075d6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80075f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075fa:	68da      	ldr	r2, [r3, #12]
 80075fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007600:	4b05      	ldr	r3, [pc, #20]	@ (8007618 <HAL_RCC_OscConfig+0x6e4>)
 8007602:	4013      	ands	r3, r2
 8007604:	60cb      	str	r3, [r1, #12]
 8007606:	e001      	b.n	800760c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	e000      	b.n	800760e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800760c:	2300      	movs	r3, #0
}
 800760e:	4618      	mov	r0, r3
 8007610:	3734      	adds	r7, #52	@ 0x34
 8007612:	46bd      	mov	sp, r7
 8007614:	bd90      	pop	{r4, r7, pc}
 8007616:	bf00      	nop
 8007618:	eefefffc 	.word	0xeefefffc

0800761c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d101      	bne.n	8007630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	e12d      	b.n	800788c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007630:	4b98      	ldr	r3, [pc, #608]	@ (8007894 <HAL_RCC_ClockConfig+0x278>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f003 0307 	and.w	r3, r3, #7
 8007638:	683a      	ldr	r2, [r7, #0]
 800763a:	429a      	cmp	r2, r3
 800763c:	d91b      	bls.n	8007676 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800763e:	4b95      	ldr	r3, [pc, #596]	@ (8007894 <HAL_RCC_ClockConfig+0x278>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f023 0207 	bic.w	r2, r3, #7
 8007646:	4993      	ldr	r1, [pc, #588]	@ (8007894 <HAL_RCC_ClockConfig+0x278>)
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	4313      	orrs	r3, r2
 800764c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800764e:	f7fa fbdb 	bl	8001e08 <HAL_GetTick>
 8007652:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007654:	e008      	b.n	8007668 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007656:	f7fa fbd7 	bl	8001e08 <HAL_GetTick>
 800765a:	4602      	mov	r2, r0
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	1ad3      	subs	r3, r2, r3
 8007660:	2b02      	cmp	r3, #2
 8007662:	d901      	bls.n	8007668 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8007664:	2303      	movs	r3, #3
 8007666:	e111      	b.n	800788c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007668:	4b8a      	ldr	r3, [pc, #552]	@ (8007894 <HAL_RCC_ClockConfig+0x278>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f003 0307 	and.w	r3, r3, #7
 8007670:	683a      	ldr	r2, [r7, #0]
 8007672:	429a      	cmp	r2, r3
 8007674:	d1ef      	bne.n	8007656 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 0302 	and.w	r3, r3, #2
 800767e:	2b00      	cmp	r3, #0
 8007680:	d016      	beq.n	80076b0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	4618      	mov	r0, r3
 8007688:	f7ff fafb 	bl	8006c82 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800768c:	f7fa fbbc 	bl	8001e08 <HAL_GetTick>
 8007690:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007692:	e008      	b.n	80076a6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007694:	f7fa fbb8 	bl	8001e08 <HAL_GetTick>
 8007698:	4602      	mov	r2, r0
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	1ad3      	subs	r3, r2, r3
 800769e:	2b02      	cmp	r3, #2
 80076a0:	d901      	bls.n	80076a6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80076a2:	2303      	movs	r3, #3
 80076a4:	e0f2      	b.n	800788c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80076a6:	f7ff fbe8 	bl	8006e7a <LL_RCC_IsActiveFlag_HPRE>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d0f1      	beq.n	8007694 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f003 0320 	and.w	r3, r3, #32
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d016      	beq.n	80076ea <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	695b      	ldr	r3, [r3, #20]
 80076c0:	4618      	mov	r0, r3
 80076c2:	f7ff faf2 	bl	8006caa <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80076c6:	f7fa fb9f 	bl	8001e08 <HAL_GetTick>
 80076ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80076cc:	e008      	b.n	80076e0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80076ce:	f7fa fb9b 	bl	8001e08 <HAL_GetTick>
 80076d2:	4602      	mov	r2, r0
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	1ad3      	subs	r3, r2, r3
 80076d8:	2b02      	cmp	r3, #2
 80076da:	d901      	bls.n	80076e0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80076dc:	2303      	movs	r3, #3
 80076de:	e0d5      	b.n	800788c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80076e0:	f7ff fbdd 	bl	8006e9e <LL_RCC_IsActiveFlag_C2HPRE>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d0f1      	beq.n	80076ce <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d016      	beq.n	8007724 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	699b      	ldr	r3, [r3, #24]
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7ff faeb 	bl	8006cd6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007700:	f7fa fb82 	bl	8001e08 <HAL_GetTick>
 8007704:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8007706:	e008      	b.n	800771a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007708:	f7fa fb7e 	bl	8001e08 <HAL_GetTick>
 800770c:	4602      	mov	r2, r0
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	1ad3      	subs	r3, r2, r3
 8007712:	2b02      	cmp	r3, #2
 8007714:	d901      	bls.n	800771a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	e0b8      	b.n	800788c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800771a:	f7ff fbd3 	bl	8006ec4 <LL_RCC_IsActiveFlag_SHDHPRE>
 800771e:	4603      	mov	r3, r0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d0f1      	beq.n	8007708 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 0304 	and.w	r3, r3, #4
 800772c:	2b00      	cmp	r3, #0
 800772e:	d016      	beq.n	800775e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	4618      	mov	r0, r3
 8007736:	f7ff fae5 	bl	8006d04 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800773a:	f7fa fb65 	bl	8001e08 <HAL_GetTick>
 800773e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007740:	e008      	b.n	8007754 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007742:	f7fa fb61 	bl	8001e08 <HAL_GetTick>
 8007746:	4602      	mov	r2, r0
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	1ad3      	subs	r3, r2, r3
 800774c:	2b02      	cmp	r3, #2
 800774e:	d901      	bls.n	8007754 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8007750:	2303      	movs	r3, #3
 8007752:	e09b      	b.n	800788c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8007754:	f7ff fbc9 	bl	8006eea <LL_RCC_IsActiveFlag_PPRE1>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d0f1      	beq.n	8007742 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f003 0308 	and.w	r3, r3, #8
 8007766:	2b00      	cmp	r3, #0
 8007768:	d017      	beq.n	800779a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	691b      	ldr	r3, [r3, #16]
 800776e:	00db      	lsls	r3, r3, #3
 8007770:	4618      	mov	r0, r3
 8007772:	f7ff fadb 	bl	8006d2c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007776:	f7fa fb47 	bl	8001e08 <HAL_GetTick>
 800777a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800777c:	e008      	b.n	8007790 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800777e:	f7fa fb43 	bl	8001e08 <HAL_GetTick>
 8007782:	4602      	mov	r2, r0
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	2b02      	cmp	r3, #2
 800778a:	d901      	bls.n	8007790 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800778c:	2303      	movs	r3, #3
 800778e:	e07d      	b.n	800788c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007790:	f7ff fbbd 	bl	8006f0e <LL_RCC_IsActiveFlag_PPRE2>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d0f1      	beq.n	800777e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f003 0301 	and.w	r3, r3, #1
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d043      	beq.n	800782e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	2b02      	cmp	r3, #2
 80077ac:	d106      	bne.n	80077bc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80077ae:	f7ff f87b 	bl	80068a8 <LL_RCC_HSE_IsReady>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d11e      	bne.n	80077f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80077b8:	2301      	movs	r3, #1
 80077ba:	e067      	b.n	800788c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	2b03      	cmp	r3, #3
 80077c2:	d106      	bne.n	80077d2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80077c4:	f7ff fb16 	bl	8006df4 <LL_RCC_PLL_IsReady>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d113      	bne.n	80077f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e05c      	b.n	800788c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d106      	bne.n	80077e8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80077da:	f7ff f9e3 	bl	8006ba4 <LL_RCC_MSI_IsReady>
 80077de:	4603      	mov	r3, r0
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d108      	bne.n	80077f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80077e4:	2301      	movs	r3, #1
 80077e6:	e051      	b.n	800788c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80077e8:	f7ff f88e 	bl	8006908 <LL_RCC_HSI_IsReady>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d101      	bne.n	80077f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	e04a      	b.n	800788c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7ff fa21 	bl	8006c42 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007800:	f7fa fb02 	bl	8001e08 <HAL_GetTick>
 8007804:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007806:	e00a      	b.n	800781e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007808:	f7fa fafe 	bl	8001e08 <HAL_GetTick>
 800780c:	4602      	mov	r2, r0
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007816:	4293      	cmp	r3, r2
 8007818:	d901      	bls.n	800781e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800781a:	2303      	movs	r3, #3
 800781c:	e036      	b.n	800788c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800781e:	f7ff fa24 	bl	8006c6a <LL_RCC_GetSysClkSource>
 8007822:	4602      	mov	r2, r0
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	429a      	cmp	r2, r3
 800782c:	d1ec      	bne.n	8007808 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800782e:	4b19      	ldr	r3, [pc, #100]	@ (8007894 <HAL_RCC_ClockConfig+0x278>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f003 0307 	and.w	r3, r3, #7
 8007836:	683a      	ldr	r2, [r7, #0]
 8007838:	429a      	cmp	r2, r3
 800783a:	d21b      	bcs.n	8007874 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800783c:	4b15      	ldr	r3, [pc, #84]	@ (8007894 <HAL_RCC_ClockConfig+0x278>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f023 0207 	bic.w	r2, r3, #7
 8007844:	4913      	ldr	r1, [pc, #76]	@ (8007894 <HAL_RCC_ClockConfig+0x278>)
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	4313      	orrs	r3, r2
 800784a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800784c:	f7fa fadc 	bl	8001e08 <HAL_GetTick>
 8007850:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007852:	e008      	b.n	8007866 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007854:	f7fa fad8 	bl	8001e08 <HAL_GetTick>
 8007858:	4602      	mov	r2, r0
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	1ad3      	subs	r3, r2, r3
 800785e:	2b02      	cmp	r3, #2
 8007860:	d901      	bls.n	8007866 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e012      	b.n	800788c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007866:	4b0b      	ldr	r3, [pc, #44]	@ (8007894 <HAL_RCC_ClockConfig+0x278>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f003 0307 	and.w	r3, r3, #7
 800786e:	683a      	ldr	r2, [r7, #0]
 8007870:	429a      	cmp	r2, r3
 8007872:	d1ef      	bne.n	8007854 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007874:	f000 f87e 	bl	8007974 <HAL_RCC_GetHCLKFreq>
 8007878:	4603      	mov	r3, r0
 800787a:	4a07      	ldr	r2, [pc, #28]	@ (8007898 <HAL_RCC_ClockConfig+0x27c>)
 800787c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800787e:	f7fa facf 	bl	8001e20 <HAL_GetTickPrio>
 8007882:	4603      	mov	r3, r0
 8007884:	4618      	mov	r0, r3
 8007886:	f7fa fa71 	bl	8001d6c <HAL_InitTick>
 800788a:	4603      	mov	r3, r0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3710      	adds	r7, #16
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	58004000 	.word	0x58004000
 8007898:	20000008 	.word	0x20000008

0800789c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800789c:	b590      	push	{r4, r7, lr}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80078a2:	f7ff f9e2 	bl	8006c6a <LL_RCC_GetSysClkSource>
 80078a6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d10a      	bne.n	80078c4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80078ae:	f7ff f99e 	bl	8006bee <LL_RCC_MSI_GetRange>
 80078b2:	4603      	mov	r3, r0
 80078b4:	091b      	lsrs	r3, r3, #4
 80078b6:	f003 030f 	and.w	r3, r3, #15
 80078ba:	4a2b      	ldr	r2, [pc, #172]	@ (8007968 <HAL_RCC_GetSysClockFreq+0xcc>)
 80078bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078c0:	60fb      	str	r3, [r7, #12]
 80078c2:	e04b      	b.n	800795c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2b04      	cmp	r3, #4
 80078c8:	d102      	bne.n	80078d0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80078ca:	4b28      	ldr	r3, [pc, #160]	@ (800796c <HAL_RCC_GetSysClockFreq+0xd0>)
 80078cc:	60fb      	str	r3, [r7, #12]
 80078ce:	e045      	b.n	800795c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2b08      	cmp	r3, #8
 80078d4:	d10a      	bne.n	80078ec <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80078d6:	f7fe ffb7 	bl	8006848 <LL_RCC_HSE_IsEnabledDiv2>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d102      	bne.n	80078e6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80078e0:	4b22      	ldr	r3, [pc, #136]	@ (800796c <HAL_RCC_GetSysClockFreq+0xd0>)
 80078e2:	60fb      	str	r3, [r7, #12]
 80078e4:	e03a      	b.n	800795c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80078e6:	4b22      	ldr	r3, [pc, #136]	@ (8007970 <HAL_RCC_GetSysClockFreq+0xd4>)
 80078e8:	60fb      	str	r3, [r7, #12]
 80078ea:	e037      	b.n	800795c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80078ec:	f7ff fab9 	bl	8006e62 <LL_RCC_PLL_GetMainSource>
 80078f0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	d003      	beq.n	8007900 <HAL_RCC_GetSysClockFreq+0x64>
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	2b03      	cmp	r3, #3
 80078fc:	d003      	beq.n	8007906 <HAL_RCC_GetSysClockFreq+0x6a>
 80078fe:	e00d      	b.n	800791c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8007900:	4b1a      	ldr	r3, [pc, #104]	@ (800796c <HAL_RCC_GetSysClockFreq+0xd0>)
 8007902:	60bb      	str	r3, [r7, #8]
        break;
 8007904:	e015      	b.n	8007932 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8007906:	f7fe ff9f 	bl	8006848 <LL_RCC_HSE_IsEnabledDiv2>
 800790a:	4603      	mov	r3, r0
 800790c:	2b01      	cmp	r3, #1
 800790e:	d102      	bne.n	8007916 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8007910:	4b16      	ldr	r3, [pc, #88]	@ (800796c <HAL_RCC_GetSysClockFreq+0xd0>)
 8007912:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8007914:	e00d      	b.n	8007932 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8007916:	4b16      	ldr	r3, [pc, #88]	@ (8007970 <HAL_RCC_GetSysClockFreq+0xd4>)
 8007918:	60bb      	str	r3, [r7, #8]
        break;
 800791a:	e00a      	b.n	8007932 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800791c:	f7ff f967 	bl	8006bee <LL_RCC_MSI_GetRange>
 8007920:	4603      	mov	r3, r0
 8007922:	091b      	lsrs	r3, r3, #4
 8007924:	f003 030f 	and.w	r3, r3, #15
 8007928:	4a0f      	ldr	r2, [pc, #60]	@ (8007968 <HAL_RCC_GetSysClockFreq+0xcc>)
 800792a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800792e:	60bb      	str	r3, [r7, #8]
        break;
 8007930:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 8007932:	f7ff fa71 	bl	8006e18 <LL_RCC_PLL_GetN>
 8007936:	4602      	mov	r2, r0
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	fb03 f402 	mul.w	r4, r3, r2
 800793e:	f7ff fa84 	bl	8006e4a <LL_RCC_PLL_GetDivider>
 8007942:	4603      	mov	r3, r0
 8007944:	091b      	lsrs	r3, r3, #4
 8007946:	3301      	adds	r3, #1
 8007948:	fbb4 f4f3 	udiv	r4, r4, r3
 800794c:	f7ff fa71 	bl	8006e32 <LL_RCC_PLL_GetR>
 8007950:	4603      	mov	r3, r0
 8007952:	0f5b      	lsrs	r3, r3, #29
 8007954:	3301      	adds	r3, #1
 8007956:	fbb4 f3f3 	udiv	r3, r4, r3
 800795a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800795c:	68fb      	ldr	r3, [r7, #12]
}
 800795e:	4618      	mov	r0, r3
 8007960:	3714      	adds	r7, #20
 8007962:	46bd      	mov	sp, r7
 8007964:	bd90      	pop	{r4, r7, pc}
 8007966:	bf00      	nop
 8007968:	080111dc 	.word	0x080111dc
 800796c:	00f42400 	.word	0x00f42400
 8007970:	01e84800 	.word	0x01e84800

08007974 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007974:	b598      	push	{r3, r4, r7, lr}
 8007976:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8007978:	f7ff ff90 	bl	800789c <HAL_RCC_GetSysClockFreq>
 800797c:	4604      	mov	r4, r0
 800797e:	f7ff f9e9 	bl	8006d54 <LL_RCC_GetAHBPrescaler>
 8007982:	4603      	mov	r3, r0
 8007984:	091b      	lsrs	r3, r3, #4
 8007986:	f003 030f 	and.w	r3, r3, #15
 800798a:	4a03      	ldr	r2, [pc, #12]	@ (8007998 <HAL_RCC_GetHCLKFreq+0x24>)
 800798c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007990:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007994:	4618      	mov	r0, r3
 8007996:	bd98      	pop	{r3, r4, r7, pc}
 8007998:	0801117c 	.word	0x0801117c

0800799c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800799c:	b598      	push	{r3, r4, r7, lr}
 800799e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80079a0:	f7ff ffe8 	bl	8007974 <HAL_RCC_GetHCLKFreq>
 80079a4:	4604      	mov	r4, r0
 80079a6:	f7ff f9ef 	bl	8006d88 <LL_RCC_GetAPB1Prescaler>
 80079aa:	4603      	mov	r3, r0
 80079ac:	0a1b      	lsrs	r3, r3, #8
 80079ae:	f003 0307 	and.w	r3, r3, #7
 80079b2:	4a04      	ldr	r2, [pc, #16]	@ (80079c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80079b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079b8:	f003 031f 	and.w	r3, r3, #31
 80079bc:	fa24 f303 	lsr.w	r3, r4, r3
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	bd98      	pop	{r3, r4, r7, pc}
 80079c4:	080111bc 	.word	0x080111bc

080079c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079c8:	b598      	push	{r3, r4, r7, lr}
 80079ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80079cc:	f7ff ffd2 	bl	8007974 <HAL_RCC_GetHCLKFreq>
 80079d0:	4604      	mov	r4, r0
 80079d2:	f7ff f9e5 	bl	8006da0 <LL_RCC_GetAPB2Prescaler>
 80079d6:	4603      	mov	r3, r0
 80079d8:	0adb      	lsrs	r3, r3, #11
 80079da:	f003 0307 	and.w	r3, r3, #7
 80079de:	4a04      	ldr	r2, [pc, #16]	@ (80079f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80079e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079e4:	f003 031f 	and.w	r3, r3, #31
 80079e8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80079ec:	4618      	mov	r0, r3
 80079ee:	bd98      	pop	{r3, r4, r7, pc}
 80079f0:	080111bc 	.word	0x080111bc

080079f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80079f4:	b590      	push	{r4, r7, lr}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2bb0      	cmp	r3, #176	@ 0xb0
 8007a00:	d903      	bls.n	8007a0a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8007a02:	4b15      	ldr	r3, [pc, #84]	@ (8007a58 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a06:	60fb      	str	r3, [r7, #12]
 8007a08:	e007      	b.n	8007a1a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	091b      	lsrs	r3, r3, #4
 8007a0e:	f003 030f 	and.w	r3, r3, #15
 8007a12:	4a11      	ldr	r2, [pc, #68]	@ (8007a58 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007a14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a18:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8007a1a:	f7ff f9a7 	bl	8006d6c <LL_RCC_GetAHB4Prescaler>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	091b      	lsrs	r3, r3, #4
 8007a22:	f003 030f 	and.w	r3, r3, #15
 8007a26:	4a0d      	ldr	r2, [pc, #52]	@ (8007a5c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8007a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a32:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	4a0a      	ldr	r2, [pc, #40]	@ (8007a60 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8007a38:	fba2 2303 	umull	r2, r3, r2, r3
 8007a3c:	0c9c      	lsrs	r4, r3, #18
 8007a3e:	f7fe fee5 	bl	800680c <HAL_PWREx_GetVoltageRange>
 8007a42:	4603      	mov	r3, r0
 8007a44:	4619      	mov	r1, r3
 8007a46:	4620      	mov	r0, r4
 8007a48:	f000 f80c 	bl	8007a64 <RCC_SetFlashLatency>
 8007a4c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3714      	adds	r7, #20
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd90      	pop	{r4, r7, pc}
 8007a56:	bf00      	nop
 8007a58:	080111dc 	.word	0x080111dc
 8007a5c:	0801117c 	.word	0x0801117c
 8007a60:	431bde83 	.word	0x431bde83

08007a64 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007a64:	b590      	push	{r4, r7, lr}
 8007a66:	b093      	sub	sp, #76	@ 0x4c
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8007a6e:	4b37      	ldr	r3, [pc, #220]	@ (8007b4c <RCC_SetFlashLatency+0xe8>)
 8007a70:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8007a74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007a76:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8007a7a:	4a35      	ldr	r2, [pc, #212]	@ (8007b50 <RCC_SetFlashLatency+0xec>)
 8007a7c:	f107 031c 	add.w	r3, r7, #28
 8007a80:	ca07      	ldmia	r2, {r0, r1, r2}
 8007a82:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8007a86:	4b33      	ldr	r3, [pc, #204]	@ (8007b54 <RCC_SetFlashLatency+0xf0>)
 8007a88:	f107 040c 	add.w	r4, r7, #12
 8007a8c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007a8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007a92:	2300      	movs	r3, #0
 8007a94:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a9c:	d11a      	bne.n	8007ad4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	643b      	str	r3, [r7, #64]	@ 0x40
 8007aa2:	e013      	b.n	8007acc <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007aa4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	3348      	adds	r3, #72	@ 0x48
 8007aaa:	443b      	add	r3, r7
 8007aac:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d807      	bhi.n	8007ac6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007ab6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	3348      	adds	r3, #72	@ 0x48
 8007abc:	443b      	add	r3, r7
 8007abe:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007ac2:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8007ac4:	e020      	b.n	8007b08 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007ac6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ac8:	3301      	adds	r3, #1
 8007aca:	643b      	str	r3, [r7, #64]	@ 0x40
 8007acc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ace:	2b03      	cmp	r3, #3
 8007ad0:	d9e8      	bls.n	8007aa4 <RCC_SetFlashLatency+0x40>
 8007ad2:	e019      	b.n	8007b08 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ad8:	e013      	b.n	8007b02 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007ada:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	3348      	adds	r3, #72	@ 0x48
 8007ae0:	443b      	add	r3, r7
 8007ae2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007ae6:	687a      	ldr	r2, [r7, #4]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d807      	bhi.n	8007afc <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007aec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007aee:	009b      	lsls	r3, r3, #2
 8007af0:	3348      	adds	r3, #72	@ 0x48
 8007af2:	443b      	add	r3, r7
 8007af4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007af8:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8007afa:	e005      	b.n	8007b08 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007afc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007afe:	3301      	adds	r3, #1
 8007b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d9e8      	bls.n	8007ada <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8007b08:	4b13      	ldr	r3, [pc, #76]	@ (8007b58 <RCC_SetFlashLatency+0xf4>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f023 0207 	bic.w	r2, r3, #7
 8007b10:	4911      	ldr	r1, [pc, #68]	@ (8007b58 <RCC_SetFlashLatency+0xf4>)
 8007b12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b14:	4313      	orrs	r3, r2
 8007b16:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007b18:	f7fa f976 	bl	8001e08 <HAL_GetTick>
 8007b1c:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007b1e:	e008      	b.n	8007b32 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007b20:	f7fa f972 	bl	8001e08 <HAL_GetTick>
 8007b24:	4602      	mov	r2, r0
 8007b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b28:	1ad3      	subs	r3, r2, r3
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d901      	bls.n	8007b32 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	e007      	b.n	8007b42 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007b32:	4b09      	ldr	r3, [pc, #36]	@ (8007b58 <RCC_SetFlashLatency+0xf4>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 0307 	and.w	r3, r3, #7
 8007b3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d1ef      	bne.n	8007b20 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	374c      	adds	r7, #76	@ 0x4c
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd90      	pop	{r4, r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	080110d0 	.word	0x080110d0
 8007b50:	080110e0 	.word	0x080110e0
 8007b54:	080110ec 	.word	0x080110ec
 8007b58:	58004000 	.word	0x58004000

08007b5c <LL_RCC_LSE_IsEnabled>:
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8007b60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b68:	f003 0301 	and.w	r3, r3, #1
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d101      	bne.n	8007b74 <LL_RCC_LSE_IsEnabled+0x18>
 8007b70:	2301      	movs	r3, #1
 8007b72:	e000      	b.n	8007b76 <LL_RCC_LSE_IsEnabled+0x1a>
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <LL_RCC_LSE_IsReady>:
{
 8007b80:	b480      	push	{r7}
 8007b82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007b84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b8c:	f003 0302 	and.w	r3, r3, #2
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d101      	bne.n	8007b98 <LL_RCC_LSE_IsReady+0x18>
 8007b94:	2301      	movs	r3, #1
 8007b96:	e000      	b.n	8007b9a <LL_RCC_LSE_IsReady+0x1a>
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba2:	4770      	bx	lr

08007ba4 <LL_RCC_SetRFWKPClockSource>:
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8007bac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007bb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007bb4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007bb8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8007bc4:	bf00      	nop
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <LL_RCC_SetSMPSClockSource>:
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8007bd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bde:	f023 0203 	bic.w	r2, r3, #3
 8007be2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4313      	orrs	r3, r2
 8007bea:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8007bec:	bf00      	nop
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <LL_RCC_SetSMPSPrescaler>:
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8007c00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c06:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007c0a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8007c14:	bf00      	nop
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <LL_RCC_SetUSARTClockSource>:
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8007c28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c30:	f023 0203 	bic.w	r2, r3, #3
 8007c34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <LL_RCC_SetLPUARTClockSource>:
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007c54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c5c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007c60:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007c6c:	bf00      	nop
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <LL_RCC_SetI2CClockSource>:
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007c80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c84:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	091b      	lsrs	r3, r3, #4
 8007c8c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007c90:	43db      	mvns	r3, r3
 8007c92:	401a      	ands	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	011b      	lsls	r3, r3, #4
 8007c98:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007c9c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007ca0:	4313      	orrs	r3, r2
 8007ca2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007ca6:	bf00      	nop
 8007ca8:	370c      	adds	r7, #12
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr

08007cb2 <LL_RCC_SetLPTIMClockSource>:
{
 8007cb2:	b480      	push	{r7}
 8007cb4:	b083      	sub	sp, #12
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007cba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cbe:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	0c1b      	lsrs	r3, r3, #16
 8007cc6:	041b      	lsls	r3, r3, #16
 8007cc8:	43db      	mvns	r3, r3
 8007cca:	401a      	ands	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	041b      	lsls	r3, r3, #16
 8007cd0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007cda:	bf00      	nop
 8007cdc:	370c      	adds	r7, #12
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <LL_RCC_SetSAIClockSource>:
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b083      	sub	sp, #12
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8007cee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cf6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007cfa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	4313      	orrs	r3, r2
 8007d02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007d06:	bf00      	nop
 8007d08:	370c      	adds	r7, #12
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr

08007d12 <LL_RCC_SetRNGClockSource>:
{
 8007d12:	b480      	push	{r7}
 8007d14:	b083      	sub	sp, #12
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007d1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d22:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007d26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007d32:	bf00      	nop
 8007d34:	370c      	adds	r7, #12
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr

08007d3e <LL_RCC_SetCLK48ClockSource>:
{
 8007d3e:	b480      	push	{r7}
 8007d40:	b083      	sub	sp, #12
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8007d46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d4e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007d52:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	4313      	orrs	r3, r2
 8007d5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007d5e:	bf00      	nop
 8007d60:	370c      	adds	r7, #12
 8007d62:	46bd      	mov	sp, r7
 8007d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d68:	4770      	bx	lr

08007d6a <LL_RCC_SetUSBClockSource>:
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b082      	sub	sp, #8
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f7ff ffe3 	bl	8007d3e <LL_RCC_SetCLK48ClockSource>
}
 8007d78:	bf00      	nop
 8007d7a:	3708      	adds	r7, #8
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <LL_RCC_SetADCClockSource>:
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007d88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d90:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007d94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007da0:	bf00      	nop
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <LL_RCC_SetRTCClockSource>:
{
 8007dac:	b480      	push	{r7}
 8007dae:	b083      	sub	sp, #12
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007db4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007dc0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8007dcc:	bf00      	nop
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <LL_RCC_GetRTCClockSource>:
{
 8007dd8:	b480      	push	{r7}
 8007dda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007ddc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007de4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <LL_RCC_ForceBackupDomainReset>:
{
 8007df2:	b480      	push	{r7}
 8007df4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007df6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007dfe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007e02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007e0a:	bf00      	nop
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <LL_RCC_ReleaseBackupDomainReset>:
{
 8007e14:	b480      	push	{r7}
 8007e16:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007e18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e20:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007e24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007e2c:	bf00      	nop
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr

08007e36 <LL_RCC_PLLSAI1_Enable>:
{
 8007e36:	b480      	push	{r7}
 8007e38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007e3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007e44:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007e48:	6013      	str	r3, [r2, #0]
}
 8007e4a:	bf00      	nop
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <LL_RCC_PLLSAI1_Disable>:
{
 8007e54:	b480      	push	{r7}
 8007e56:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007e58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007e62:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007e66:	6013      	str	r3, [r2, #0]
}
 8007e68:	bf00      	nop
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr

08007e72 <LL_RCC_PLLSAI1_IsReady>:
{
 8007e72:	b480      	push	{r7}
 8007e74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8007e76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007e80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007e84:	d101      	bne.n	8007e8a <LL_RCC_PLLSAI1_IsReady+0x18>
 8007e86:	2301      	movs	r3, #1
 8007e88:	e000      	b.n	8007e8c <LL_RCC_PLLSAI1_IsReady+0x1a>
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr

08007e96 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b088      	sub	sp, #32
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d034      	beq.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eb6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007eba:	d021      	beq.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8007ebc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007ec0:	d81b      	bhi.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007ec2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007ec6:	d01d      	beq.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8007ec8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007ecc:	d815      	bhi.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00b      	beq.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x54>
 8007ed2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ed6:	d110      	bne.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8007ed8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007ee2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ee6:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8007ee8:	e00d      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	3304      	adds	r3, #4
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f000 f947 	bl	8008182 <RCCEx_PLLSAI1_ConfigNP>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007ef8:	e005      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	77fb      	strb	r3, [r7, #31]
        break;
 8007efe:	e002      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007f00:	bf00      	nop
 8007f02:	e000      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007f04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f06:	7ffb      	ldrb	r3, [r7, #31]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d105      	bne.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7ff fee8 	bl	8007ce6 <LL_RCC_SetSAIClockSource>
 8007f16:	e001      	b.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f18:	7ffb      	ldrb	r3, [r7, #31]
 8007f1a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d046      	beq.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8007f28:	f7ff ff56 	bl	8007dd8 <LL_RCC_GetRTCClockSource>
 8007f2c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f32:	69ba      	ldr	r2, [r7, #24]
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d03c      	beq.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007f38:	f7fe fc58 	bl	80067ec <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d105      	bne.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7ff ff30 	bl	8007dac <LL_RCC_SetRTCClockSource>
 8007f4c:	e02e      	b.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8007f4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f56:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8007f58:	f7ff ff4b 	bl	8007df2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8007f5c:	f7ff ff5a 	bl	8007e14 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8007f6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8007f78:	f7ff fdf0 	bl	8007b5c <LL_RCC_LSE_IsEnabled>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d114      	bne.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007f82:	f7f9 ff41 	bl	8001e08 <HAL_GetTick>
 8007f86:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8007f88:	e00b      	b.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f8a:	f7f9 ff3d 	bl	8001e08 <HAL_GetTick>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	1ad3      	subs	r3, r2, r3
 8007f94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d902      	bls.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8007f9c:	2303      	movs	r3, #3
 8007f9e:	77fb      	strb	r3, [r7, #31]
              break;
 8007fa0:	e004      	b.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8007fa2:	f7ff fded 	bl	8007b80 <LL_RCC_LSE_IsReady>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b01      	cmp	r3, #1
 8007faa:	d1ee      	bne.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8007fac:	7ffb      	ldrb	r3, [r7, #31]
 8007fae:	77bb      	strb	r3, [r7, #30]
 8007fb0:	e001      	b.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fb2:	7ffb      	ldrb	r3, [r7, #31]
 8007fb4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 0301 	and.w	r3, r3, #1
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d004      	beq.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	699b      	ldr	r3, [r3, #24]
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7ff fe2a 	bl	8007c20 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f003 0302 	and.w	r3, r3, #2
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d004      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	69db      	ldr	r3, [r3, #28]
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7ff fe35 	bl	8007c4c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f003 0310 	and.w	r3, r3, #16
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d004      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7ff fe5d 	bl	8007cb2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f003 0320 	and.w	r3, r3, #32
 8008000:	2b00      	cmp	r3, #0
 8008002:	d004      	beq.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008008:	4618      	mov	r0, r3
 800800a:	f7ff fe52 	bl	8007cb2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f003 0304 	and.w	r3, r3, #4
 8008016:	2b00      	cmp	r3, #0
 8008018:	d004      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6a1b      	ldr	r3, [r3, #32]
 800801e:	4618      	mov	r0, r3
 8008020:	f7ff fe2a 	bl	8007c78 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 0308 	and.w	r3, r3, #8
 800802c:	2b00      	cmp	r3, #0
 800802e:	d004      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008034:	4618      	mov	r0, r3
 8008036:	f7ff fe1f 	bl	8007c78 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008042:	2b00      	cmp	r3, #0
 8008044:	d022      	beq.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800804a:	4618      	mov	r0, r3
 800804c:	f7ff fe8d 	bl	8007d6a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008054:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008058:	d107      	bne.n	800806a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800805a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008064:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008068:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800806e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008072:	d10b      	bne.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	3304      	adds	r3, #4
 8008078:	4618      	mov	r0, r3
 800807a:	f000 f8dd 	bl	8008238 <RCCEx_PLLSAI1_ConfigNQ>
 800807e:	4603      	mov	r3, r0
 8008080:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008082:	7ffb      	ldrb	r3, [r7, #31]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d001      	beq.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8008088:	7ffb      	ldrb	r3, [r7, #31]
 800808a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008094:	2b00      	cmp	r3, #0
 8008096:	d02b      	beq.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800809c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080a0:	d008      	beq.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080aa:	d003      	beq.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d105      	bne.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080b8:	4618      	mov	r0, r3
 80080ba:	f7ff fe2a 	bl	8007d12 <LL_RCC_SetRNGClockSource>
 80080be:	e00a      	b.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80080c8:	60fb      	str	r3, [r7, #12]
 80080ca:	2000      	movs	r0, #0
 80080cc:	f7ff fe21 	bl	8007d12 <LL_RCC_SetRNGClockSource>
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f7ff fe34 	bl	8007d3e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080da:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 80080de:	d107      	bne.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80080e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080e4:	68db      	ldr	r3, [r3, #12]
 80080e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80080ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80080ee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d022      	beq.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008100:	4618      	mov	r0, r3
 8008102:	f7ff fe3d 	bl	8007d80 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800810a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800810e:	d107      	bne.n	8008120 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008110:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800811a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800811e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008124:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008128:	d10b      	bne.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	3304      	adds	r3, #4
 800812e:	4618      	mov	r0, r3
 8008130:	f000 f8dd 	bl	80082ee <RCCEx_PLLSAI1_ConfigNR>
 8008134:	4603      	mov	r3, r0
 8008136:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008138:	7ffb      	ldrb	r3, [r7, #31]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d001      	beq.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800813e:	7ffb      	ldrb	r3, [r7, #31]
 8008140:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800814a:	2b00      	cmp	r3, #0
 800814c:	d004      	beq.n	8008158 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008152:	4618      	mov	r0, r3
 8008154:	f7ff fd26 	bl	8007ba4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008160:	2b00      	cmp	r3, #0
 8008162:	d009      	beq.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008168:	4618      	mov	r0, r3
 800816a:	f7ff fd45 	bl	8007bf8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008172:	4618      	mov	r0, r3
 8008174:	f7ff fd2c 	bl	8007bd0 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8008178:	7fbb      	ldrb	r3, [r7, #30]
}
 800817a:	4618      	mov	r0, r3
 800817c:	3720      	adds	r7, #32
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}

08008182 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008182:	b580      	push	{r7, lr}
 8008184:	b084      	sub	sp, #16
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800818a:	2300      	movs	r3, #0
 800818c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800818e:	f7ff fe61 	bl	8007e54 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008192:	f7f9 fe39 	bl	8001e08 <HAL_GetTick>
 8008196:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008198:	e009      	b.n	80081ae <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800819a:	f7f9 fe35 	bl	8001e08 <HAL_GetTick>
 800819e:	4602      	mov	r2, r0
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	1ad3      	subs	r3, r2, r3
 80081a4:	2b02      	cmp	r3, #2
 80081a6:	d902      	bls.n	80081ae <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80081a8:	2303      	movs	r3, #3
 80081aa:	73fb      	strb	r3, [r7, #15]
      break;
 80081ac:	e004      	b.n	80081b8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80081ae:	f7ff fe60 	bl	8007e72 <LL_RCC_PLLSAI1_IsReady>
 80081b2:	4603      	mov	r3, r0
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d1f0      	bne.n	800819a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 80081b8:	7bfb      	ldrb	r3, [r7, #15]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d137      	bne.n	800822e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80081be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081c2:	691b      	ldr	r3, [r3, #16]
 80081c4:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	021b      	lsls	r3, r3, #8
 80081ce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80081d2:	4313      	orrs	r3, r2
 80081d4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 80081d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081da:	691b      	ldr	r3, [r3, #16]
 80081dc:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80081e8:	4313      	orrs	r3, r2
 80081ea:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80081ec:	f7ff fe23 	bl	8007e36 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081f0:	f7f9 fe0a 	bl	8001e08 <HAL_GetTick>
 80081f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80081f6:	e009      	b.n	800820c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80081f8:	f7f9 fe06 	bl	8001e08 <HAL_GetTick>
 80081fc:	4602      	mov	r2, r0
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	2b02      	cmp	r3, #2
 8008204:	d902      	bls.n	800820c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8008206:	2303      	movs	r3, #3
 8008208:	73fb      	strb	r3, [r7, #15]
        break;
 800820a:	e004      	b.n	8008216 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800820c:	f7ff fe31 	bl	8007e72 <LL_RCC_PLLSAI1_IsReady>
 8008210:	4603      	mov	r3, r0
 8008212:	2b01      	cmp	r3, #1
 8008214:	d1f0      	bne.n	80081f8 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8008216:	7bfb      	ldrb	r3, [r7, #15]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d108      	bne.n	800822e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800821c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008220:	691a      	ldr	r2, [r3, #16]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	691b      	ldr	r3, [r3, #16]
 8008226:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800822a:	4313      	orrs	r3, r2
 800822c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800822e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008230:	4618      	mov	r0, r3
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008240:	2300      	movs	r3, #0
 8008242:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008244:	f7ff fe06 	bl	8007e54 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008248:	f7f9 fdde 	bl	8001e08 <HAL_GetTick>
 800824c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800824e:	e009      	b.n	8008264 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008250:	f7f9 fdda 	bl	8001e08 <HAL_GetTick>
 8008254:	4602      	mov	r2, r0
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	1ad3      	subs	r3, r2, r3
 800825a:	2b02      	cmp	r3, #2
 800825c:	d902      	bls.n	8008264 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800825e:	2303      	movs	r3, #3
 8008260:	73fb      	strb	r3, [r7, #15]
      break;
 8008262:	e004      	b.n	800826e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008264:	f7ff fe05 	bl	8007e72 <LL_RCC_PLLSAI1_IsReady>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d1f0      	bne.n	8008250 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800826e:	7bfb      	ldrb	r3, [r7, #15]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d137      	bne.n	80082e4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008274:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	021b      	lsls	r3, r3, #8
 8008284:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008288:	4313      	orrs	r3, r2
 800828a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800828c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008290:	691b      	ldr	r3, [r3, #16]
 8008292:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	689b      	ldr	r3, [r3, #8]
 800829a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800829e:	4313      	orrs	r3, r2
 80082a0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80082a2:	f7ff fdc8 	bl	8007e36 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082a6:	f7f9 fdaf 	bl	8001e08 <HAL_GetTick>
 80082aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80082ac:	e009      	b.n	80082c2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80082ae:	f7f9 fdab 	bl	8001e08 <HAL_GetTick>
 80082b2:	4602      	mov	r2, r0
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	1ad3      	subs	r3, r2, r3
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	d902      	bls.n	80082c2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 80082bc:	2303      	movs	r3, #3
 80082be:	73fb      	strb	r3, [r7, #15]
        break;
 80082c0:	e004      	b.n	80082cc <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80082c2:	f7ff fdd6 	bl	8007e72 <LL_RCC_PLLSAI1_IsReady>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b01      	cmp	r3, #1
 80082ca:	d1f0      	bne.n	80082ae <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 80082cc:	7bfb      	ldrb	r3, [r7, #15]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d108      	bne.n	80082e4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80082d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082d6:	691a      	ldr	r2, [r3, #16]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	691b      	ldr	r3, [r3, #16]
 80082dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80082e0:	4313      	orrs	r3, r2
 80082e2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80082e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3710      	adds	r7, #16
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}

080082ee <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80082ee:	b580      	push	{r7, lr}
 80082f0:	b084      	sub	sp, #16
 80082f2:	af00      	add	r7, sp, #0
 80082f4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80082f6:	2300      	movs	r3, #0
 80082f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80082fa:	f7ff fdab 	bl	8007e54 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80082fe:	f7f9 fd83 	bl	8001e08 <HAL_GetTick>
 8008302:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008304:	e009      	b.n	800831a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008306:	f7f9 fd7f 	bl	8001e08 <HAL_GetTick>
 800830a:	4602      	mov	r2, r0
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	1ad3      	subs	r3, r2, r3
 8008310:	2b02      	cmp	r3, #2
 8008312:	d902      	bls.n	800831a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8008314:	2303      	movs	r3, #3
 8008316:	73fb      	strb	r3, [r7, #15]
      break;
 8008318:	e004      	b.n	8008324 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800831a:	f7ff fdaa 	bl	8007e72 <LL_RCC_PLLSAI1_IsReady>
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d1f0      	bne.n	8008306 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8008324:	7bfb      	ldrb	r3, [r7, #15]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d137      	bne.n	800839a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800832a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800832e:	691b      	ldr	r3, [r3, #16]
 8008330:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	021b      	lsls	r3, r3, #8
 800833a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800833e:	4313      	orrs	r3, r2
 8008340:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8008342:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008346:	691b      	ldr	r3, [r3, #16]
 8008348:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	68db      	ldr	r3, [r3, #12]
 8008350:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008354:	4313      	orrs	r3, r2
 8008356:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008358:	f7ff fd6d 	bl	8007e36 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800835c:	f7f9 fd54 	bl	8001e08 <HAL_GetTick>
 8008360:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008362:	e009      	b.n	8008378 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008364:	f7f9 fd50 	bl	8001e08 <HAL_GetTick>
 8008368:	4602      	mov	r2, r0
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	2b02      	cmp	r3, #2
 8008370:	d902      	bls.n	8008378 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8008372:	2303      	movs	r3, #3
 8008374:	73fb      	strb	r3, [r7, #15]
        break;
 8008376:	e004      	b.n	8008382 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008378:	f7ff fd7b 	bl	8007e72 <LL_RCC_PLLSAI1_IsReady>
 800837c:	4603      	mov	r3, r0
 800837e:	2b01      	cmp	r3, #1
 8008380:	d1f0      	bne.n	8008364 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8008382:	7bfb      	ldrb	r3, [r7, #15]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d108      	bne.n	800839a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008388:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800838c:	691a      	ldr	r2, [r3, #16]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008396:	4313      	orrs	r3, r2
 8008398:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800839a:	7bfb      	ldrb	r3, [r7, #15]
}
 800839c:	4618      	mov	r0, r3
 800839e:	3710      	adds	r7, #16
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d101      	bne.n	80083b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	e049      	b.n	800844a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d106      	bne.n	80083d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f7f9 f916 	bl	80015fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2202      	movs	r2, #2
 80083d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	3304      	adds	r3, #4
 80083e0:	4619      	mov	r1, r3
 80083e2:	4610      	mov	r0, r2
 80083e4:	f000 fa7c 	bl	80088e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2201      	movs	r2, #1
 8008404:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2201      	movs	r2, #1
 800840c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2201      	movs	r2, #1
 8008414:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2201      	movs	r2, #1
 800841c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2201      	movs	r2, #1
 800842c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2201      	movs	r2, #1
 8008444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3708      	adds	r7, #8
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}
	...

08008454 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008454:	b480      	push	{r7}
 8008456:	b085      	sub	sp, #20
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008462:	b2db      	uxtb	r3, r3
 8008464:	2b01      	cmp	r3, #1
 8008466:	d001      	beq.n	800846c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	e036      	b.n	80084da <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2202      	movs	r2, #2
 8008470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68da      	ldr	r2, [r3, #12]
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f042 0201 	orr.w	r2, r2, #1
 8008482:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a17      	ldr	r2, [pc, #92]	@ (80084e8 <HAL_TIM_Base_Start_IT+0x94>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d004      	beq.n	8008498 <HAL_TIM_Base_Start_IT+0x44>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008496:	d115      	bne.n	80084c4 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	689a      	ldr	r2, [r3, #8]
 800849e:	4b13      	ldr	r3, [pc, #76]	@ (80084ec <HAL_TIM_Base_Start_IT+0x98>)
 80084a0:	4013      	ands	r3, r2
 80084a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2b06      	cmp	r3, #6
 80084a8:	d015      	beq.n	80084d6 <HAL_TIM_Base_Start_IT+0x82>
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084b0:	d011      	beq.n	80084d6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f042 0201 	orr.w	r2, r2, #1
 80084c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084c2:	e008      	b.n	80084d6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f042 0201 	orr.w	r2, r2, #1
 80084d2:	601a      	str	r2, [r3, #0]
 80084d4:	e000      	b.n	80084d8 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80084d8:	2300      	movs	r3, #0
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3714      	adds	r7, #20
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr
 80084e6:	bf00      	nop
 80084e8:	40012c00 	.word	0x40012c00
 80084ec:	00010007 	.word	0x00010007

080084f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	68db      	ldr	r3, [r3, #12]
 80084fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	691b      	ldr	r3, [r3, #16]
 8008506:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	f003 0302 	and.w	r3, r3, #2
 800850e:	2b00      	cmp	r3, #0
 8008510:	d020      	beq.n	8008554 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f003 0302 	and.w	r3, r3, #2
 8008518:	2b00      	cmp	r3, #0
 800851a:	d01b      	beq.n	8008554 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f06f 0202 	mvn.w	r2, #2
 8008524:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2201      	movs	r2, #1
 800852a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	699b      	ldr	r3, [r3, #24]
 8008532:	f003 0303 	and.w	r3, r3, #3
 8008536:	2b00      	cmp	r3, #0
 8008538:	d003      	beq.n	8008542 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 f9b2 	bl	80088a4 <HAL_TIM_IC_CaptureCallback>
 8008540:	e005      	b.n	800854e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 f9a4 	bl	8008890 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 f9b5 	bl	80088b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	f003 0304 	and.w	r3, r3, #4
 800855a:	2b00      	cmp	r3, #0
 800855c:	d020      	beq.n	80085a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	f003 0304 	and.w	r3, r3, #4
 8008564:	2b00      	cmp	r3, #0
 8008566:	d01b      	beq.n	80085a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f06f 0204 	mvn.w	r2, #4
 8008570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2202      	movs	r2, #2
 8008576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	699b      	ldr	r3, [r3, #24]
 800857e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008582:	2b00      	cmp	r3, #0
 8008584:	d003      	beq.n	800858e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 f98c 	bl	80088a4 <HAL_TIM_IC_CaptureCallback>
 800858c:	e005      	b.n	800859a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 f97e 	bl	8008890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 f98f 	bl	80088b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	f003 0308 	and.w	r3, r3, #8
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d020      	beq.n	80085ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f003 0308 	and.w	r3, r3, #8
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d01b      	beq.n	80085ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f06f 0208 	mvn.w	r2, #8
 80085bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2204      	movs	r2, #4
 80085c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	69db      	ldr	r3, [r3, #28]
 80085ca:	f003 0303 	and.w	r3, r3, #3
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d003      	beq.n	80085da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f000 f966 	bl	80088a4 <HAL_TIM_IC_CaptureCallback>
 80085d8:	e005      	b.n	80085e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 f958 	bl	8008890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 f969 	bl	80088b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2200      	movs	r2, #0
 80085ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	f003 0310 	and.w	r3, r3, #16
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d020      	beq.n	8008638 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	f003 0310 	and.w	r3, r3, #16
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d01b      	beq.n	8008638 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f06f 0210 	mvn.w	r2, #16
 8008608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2208      	movs	r2, #8
 800860e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	69db      	ldr	r3, [r3, #28]
 8008616:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800861a:	2b00      	cmp	r3, #0
 800861c:	d003      	beq.n	8008626 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 f940 	bl	80088a4 <HAL_TIM_IC_CaptureCallback>
 8008624:	e005      	b.n	8008632 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 f932 	bl	8008890 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f000 f943 	bl	80088b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	f003 0301 	and.w	r3, r3, #1
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00c      	beq.n	800865c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f003 0301 	and.w	r3, r3, #1
 8008648:	2b00      	cmp	r3, #0
 800864a:	d007      	beq.n	800865c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f06f 0201 	mvn.w	r2, #1
 8008654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f7f8 fc28 	bl	8000eac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008662:	2b00      	cmp	r3, #0
 8008664:	d104      	bne.n	8008670 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00c      	beq.n	800868a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008676:	2b00      	cmp	r3, #0
 8008678:	d007      	beq.n	800868a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 faa1 	bl	8008bcc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00c      	beq.n	80086ae <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800869a:	2b00      	cmp	r3, #0
 800869c:	d007      	beq.n	80086ae <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80086a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 fa99 	bl	8008be0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d00c      	beq.n	80086d2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d007      	beq.n	80086d2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80086ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 f8fd 	bl	80088cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	f003 0320 	and.w	r3, r3, #32
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d00c      	beq.n	80086f6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f003 0320 	and.w	r3, r3, #32
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d007      	beq.n	80086f6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f06f 0220 	mvn.w	r2, #32
 80086ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 fa61 	bl	8008bb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80086f6:	bf00      	nop
 80086f8:	3710      	adds	r7, #16
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b084      	sub	sp, #16
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
 8008706:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008708:	2300      	movs	r3, #0
 800870a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008712:	2b01      	cmp	r3, #1
 8008714:	d101      	bne.n	800871a <HAL_TIM_ConfigClockSource+0x1c>
 8008716:	2302      	movs	r3, #2
 8008718:	e0b6      	b.n	8008888 <HAL_TIM_ConfigClockSource+0x18a>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2201      	movs	r2, #1
 800871e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2202      	movs	r2, #2
 8008726:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008738:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800873c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008744:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	68ba      	ldr	r2, [r7, #8]
 800874c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008756:	d03e      	beq.n	80087d6 <HAL_TIM_ConfigClockSource+0xd8>
 8008758:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800875c:	f200 8087 	bhi.w	800886e <HAL_TIM_ConfigClockSource+0x170>
 8008760:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008764:	f000 8086 	beq.w	8008874 <HAL_TIM_ConfigClockSource+0x176>
 8008768:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800876c:	d87f      	bhi.n	800886e <HAL_TIM_ConfigClockSource+0x170>
 800876e:	2b70      	cmp	r3, #112	@ 0x70
 8008770:	d01a      	beq.n	80087a8 <HAL_TIM_ConfigClockSource+0xaa>
 8008772:	2b70      	cmp	r3, #112	@ 0x70
 8008774:	d87b      	bhi.n	800886e <HAL_TIM_ConfigClockSource+0x170>
 8008776:	2b60      	cmp	r3, #96	@ 0x60
 8008778:	d050      	beq.n	800881c <HAL_TIM_ConfigClockSource+0x11e>
 800877a:	2b60      	cmp	r3, #96	@ 0x60
 800877c:	d877      	bhi.n	800886e <HAL_TIM_ConfigClockSource+0x170>
 800877e:	2b50      	cmp	r3, #80	@ 0x50
 8008780:	d03c      	beq.n	80087fc <HAL_TIM_ConfigClockSource+0xfe>
 8008782:	2b50      	cmp	r3, #80	@ 0x50
 8008784:	d873      	bhi.n	800886e <HAL_TIM_ConfigClockSource+0x170>
 8008786:	2b40      	cmp	r3, #64	@ 0x40
 8008788:	d058      	beq.n	800883c <HAL_TIM_ConfigClockSource+0x13e>
 800878a:	2b40      	cmp	r3, #64	@ 0x40
 800878c:	d86f      	bhi.n	800886e <HAL_TIM_ConfigClockSource+0x170>
 800878e:	2b30      	cmp	r3, #48	@ 0x30
 8008790:	d064      	beq.n	800885c <HAL_TIM_ConfigClockSource+0x15e>
 8008792:	2b30      	cmp	r3, #48	@ 0x30
 8008794:	d86b      	bhi.n	800886e <HAL_TIM_ConfigClockSource+0x170>
 8008796:	2b20      	cmp	r3, #32
 8008798:	d060      	beq.n	800885c <HAL_TIM_ConfigClockSource+0x15e>
 800879a:	2b20      	cmp	r3, #32
 800879c:	d867      	bhi.n	800886e <HAL_TIM_ConfigClockSource+0x170>
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d05c      	beq.n	800885c <HAL_TIM_ConfigClockSource+0x15e>
 80087a2:	2b10      	cmp	r3, #16
 80087a4:	d05a      	beq.n	800885c <HAL_TIM_ConfigClockSource+0x15e>
 80087a6:	e062      	b.n	800886e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80087b8:	f000 f97e 	bl	8008ab8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80087ca:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	68ba      	ldr	r2, [r7, #8]
 80087d2:	609a      	str	r2, [r3, #8]
      break;
 80087d4:	e04f      	b.n	8008876 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80087e6:	f000 f967 	bl	8008ab8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	689a      	ldr	r2, [r3, #8]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80087f8:	609a      	str	r2, [r3, #8]
      break;
 80087fa:	e03c      	b.n	8008876 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008808:	461a      	mov	r2, r3
 800880a:	f000 f8d9 	bl	80089c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	2150      	movs	r1, #80	@ 0x50
 8008814:	4618      	mov	r0, r3
 8008816:	f000 f932 	bl	8008a7e <TIM_ITRx_SetConfig>
      break;
 800881a:	e02c      	b.n	8008876 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008828:	461a      	mov	r2, r3
 800882a:	f000 f8f8 	bl	8008a1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	2160      	movs	r1, #96	@ 0x60
 8008834:	4618      	mov	r0, r3
 8008836:	f000 f922 	bl	8008a7e <TIM_ITRx_SetConfig>
      break;
 800883a:	e01c      	b.n	8008876 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008848:	461a      	mov	r2, r3
 800884a:	f000 f8b9 	bl	80089c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2140      	movs	r1, #64	@ 0x40
 8008854:	4618      	mov	r0, r3
 8008856:	f000 f912 	bl	8008a7e <TIM_ITRx_SetConfig>
      break;
 800885a:	e00c      	b.n	8008876 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4619      	mov	r1, r3
 8008866:	4610      	mov	r0, r2
 8008868:	f000 f909 	bl	8008a7e <TIM_ITRx_SetConfig>
      break;
 800886c:	e003      	b.n	8008876 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800886e:	2301      	movs	r3, #1
 8008870:	73fb      	strb	r3, [r7, #15]
      break;
 8008872:	e000      	b.n	8008876 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008874:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2201      	movs	r2, #1
 800887a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008886:	7bfb      	ldrb	r3, [r7, #15]
}
 8008888:	4618      	mov	r0, r3
 800888a:	3710      	adds	r7, #16
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008890:	b480      	push	{r7}
 8008892:	b083      	sub	sp, #12
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008898:	bf00      	nop
 800889a:	370c      	adds	r7, #12
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b083      	sub	sp, #12
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80088ac:	bf00      	nop
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b083      	sub	sp, #12
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80088c0:	bf00      	nop
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80088d4:	bf00      	nop
 80088d6:	370c      	adds	r7, #12
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a30      	ldr	r2, [pc, #192]	@ (80089b4 <TIM_Base_SetConfig+0xd4>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d003      	beq.n	8008900 <TIM_Base_SetConfig+0x20>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088fe:	d108      	bne.n	8008912 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008906:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	68fa      	ldr	r2, [r7, #12]
 800890e:	4313      	orrs	r3, r2
 8008910:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	4a27      	ldr	r2, [pc, #156]	@ (80089b4 <TIM_Base_SetConfig+0xd4>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d00b      	beq.n	8008932 <TIM_Base_SetConfig+0x52>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008920:	d007      	beq.n	8008932 <TIM_Base_SetConfig+0x52>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	4a24      	ldr	r2, [pc, #144]	@ (80089b8 <TIM_Base_SetConfig+0xd8>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d003      	beq.n	8008932 <TIM_Base_SetConfig+0x52>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4a23      	ldr	r2, [pc, #140]	@ (80089bc <TIM_Base_SetConfig+0xdc>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d108      	bne.n	8008944 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008938:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	68fa      	ldr	r2, [r7, #12]
 8008940:	4313      	orrs	r3, r2
 8008942:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	695b      	ldr	r3, [r3, #20]
 800894e:	4313      	orrs	r3, r2
 8008950:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	68fa      	ldr	r2, [r7, #12]
 8008956:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	689a      	ldr	r2, [r3, #8]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	681a      	ldr	r2, [r3, #0]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	4a12      	ldr	r2, [pc, #72]	@ (80089b4 <TIM_Base_SetConfig+0xd4>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d007      	beq.n	8008980 <TIM_Base_SetConfig+0xa0>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	4a11      	ldr	r2, [pc, #68]	@ (80089b8 <TIM_Base_SetConfig+0xd8>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d003      	beq.n	8008980 <TIM_Base_SetConfig+0xa0>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4a10      	ldr	r2, [pc, #64]	@ (80089bc <TIM_Base_SetConfig+0xdc>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d103      	bne.n	8008988 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	691a      	ldr	r2, [r3, #16]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2201      	movs	r2, #1
 800898c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	691b      	ldr	r3, [r3, #16]
 8008992:	f003 0301 	and.w	r3, r3, #1
 8008996:	2b01      	cmp	r3, #1
 8008998:	d105      	bne.n	80089a6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	691b      	ldr	r3, [r3, #16]
 800899e:	f023 0201 	bic.w	r2, r3, #1
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	611a      	str	r2, [r3, #16]
  }
}
 80089a6:	bf00      	nop
 80089a8:	3714      	adds	r7, #20
 80089aa:	46bd      	mov	sp, r7
 80089ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b0:	4770      	bx	lr
 80089b2:	bf00      	nop
 80089b4:	40012c00 	.word	0x40012c00
 80089b8:	40014400 	.word	0x40014400
 80089bc:	40014800 	.word	0x40014800

080089c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b087      	sub	sp, #28
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6a1b      	ldr	r3, [r3, #32]
 80089d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	6a1b      	ldr	r3, [r3, #32]
 80089d6:	f023 0201 	bic.w	r2, r3, #1
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	699b      	ldr	r3, [r3, #24]
 80089e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80089e4:	693b      	ldr	r3, [r7, #16]
 80089e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80089ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	011b      	lsls	r3, r3, #4
 80089f0:	693a      	ldr	r2, [r7, #16]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	f023 030a 	bic.w	r3, r3, #10
 80089fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80089fe:	697a      	ldr	r2, [r7, #20]
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	4313      	orrs	r3, r2
 8008a04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	693a      	ldr	r2, [r7, #16]
 8008a0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	697a      	ldr	r2, [r7, #20]
 8008a10:	621a      	str	r2, [r3, #32]
}
 8008a12:	bf00      	nop
 8008a14:	371c      	adds	r7, #28
 8008a16:	46bd      	mov	sp, r7
 8008a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1c:	4770      	bx	lr

08008a1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a1e:	b480      	push	{r7}
 8008a20:	b087      	sub	sp, #28
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	60f8      	str	r0, [r7, #12]
 8008a26:	60b9      	str	r1, [r7, #8]
 8008a28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	6a1b      	ldr	r3, [r3, #32]
 8008a2e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	6a1b      	ldr	r3, [r3, #32]
 8008a34:	f023 0210 	bic.w	r2, r3, #16
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	699b      	ldr	r3, [r3, #24]
 8008a40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008a48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	031b      	lsls	r3, r3, #12
 8008a4e:	693a      	ldr	r2, [r7, #16]
 8008a50:	4313      	orrs	r3, r2
 8008a52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008a5a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	011b      	lsls	r3, r3, #4
 8008a60:	697a      	ldr	r2, [r7, #20]
 8008a62:	4313      	orrs	r3, r2
 8008a64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	693a      	ldr	r2, [r7, #16]
 8008a6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	697a      	ldr	r2, [r7, #20]
 8008a70:	621a      	str	r2, [r3, #32]
}
 8008a72:	bf00      	nop
 8008a74:	371c      	adds	r7, #28
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr

08008a7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008a7e:	b480      	push	{r7}
 8008a80:	b085      	sub	sp, #20
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
 8008a86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008a94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008a9a:	683a      	ldr	r2, [r7, #0]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	f043 0307 	orr.w	r3, r3, #7
 8008aa4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	68fa      	ldr	r2, [r7, #12]
 8008aaa:	609a      	str	r2, [r3, #8]
}
 8008aac:	bf00      	nop
 8008aae:	3714      	adds	r7, #20
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b087      	sub	sp, #28
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	607a      	str	r2, [r7, #4]
 8008ac4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008ad2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	021a      	lsls	r2, r3, #8
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	431a      	orrs	r2, r3
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	4313      	orrs	r3, r2
 8008ae0:	697a      	ldr	r2, [r7, #20]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	697a      	ldr	r2, [r7, #20]
 8008aea:	609a      	str	r2, [r3, #8]
}
 8008aec:	bf00      	nop
 8008aee:	371c      	adds	r7, #28
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b085      	sub	sp, #20
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d101      	bne.n	8008b10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b0c:	2302      	movs	r3, #2
 8008b0e:	e04a      	b.n	8008ba6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2201      	movs	r2, #1
 8008b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2202      	movs	r2, #2
 8008b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	4a1f      	ldr	r2, [pc, #124]	@ (8008bb4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d108      	bne.n	8008b4c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008b40:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	68fa      	ldr	r2, [r7, #12]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	68fa      	ldr	r2, [r7, #12]
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	68fa      	ldr	r2, [r7, #12]
 8008b64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a12      	ldr	r2, [pc, #72]	@ (8008bb4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d004      	beq.n	8008b7a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b78:	d10c      	bne.n	8008b94 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	689b      	ldr	r3, [r3, #8]
 8008b86:	68ba      	ldr	r2, [r7, #8]
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68ba      	ldr	r2, [r7, #8]
 8008b92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008ba4:	2300      	movs	r3, #0
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3714      	adds	r7, #20
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr
 8008bb2:	bf00      	nop
 8008bb4:	40012c00 	.word	0x40012c00

08008bb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b083      	sub	sp, #12
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008bc0:	bf00      	nop
 8008bc2:	370c      	adds	r7, #12
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr

08008bcc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008bd4:	bf00      	nop
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr

08008be0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008be8:	bf00      	nop
 8008bea:	370c      	adds	r7, #12
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <LL_RCC_GetUSARTClockSource>:
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8008bfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c00:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4013      	ands	r3, r2
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	370c      	adds	r7, #12
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <LL_RCC_GetLPUARTClockSource>:
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008c1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c20:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	4013      	ands	r3, r2
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d101      	bne.n	8008c46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	e042      	b.n	8008ccc <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d106      	bne.n	8008c5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 f83b 	bl	8008cd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2224      	movs	r2, #36	@ 0x24
 8008c62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	681a      	ldr	r2, [r3, #0]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f022 0201 	bic.w	r2, r2, #1
 8008c74:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d002      	beq.n	8008c84 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 fae8 	bl	8009254 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 f8bd 	bl	8008e04 <UART_SetConfig>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b01      	cmp	r3, #1
 8008c8e:	d101      	bne.n	8008c94 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	e01b      	b.n	8008ccc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	685a      	ldr	r2, [r3, #4]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008ca2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	689a      	ldr	r2, [r3, #8]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008cb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f042 0201 	orr.w	r2, r2, #1
 8008cc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 fb67 	bl	8009398 <UART_CheckIdleState>
 8008cca:	4603      	mov	r3, r0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3708      	adds	r7, #8
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8008cdc:	bf00      	nop
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b08a      	sub	sp, #40	@ 0x28
 8008cec:	af02      	add	r7, sp, #8
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	603b      	str	r3, [r7, #0]
 8008cf4:	4613      	mov	r3, r2
 8008cf6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cfe:	2b20      	cmp	r3, #32
 8008d00:	d17b      	bne.n	8008dfa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d002      	beq.n	8008d0e <HAL_UART_Transmit+0x26>
 8008d08:	88fb      	ldrh	r3, [r7, #6]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d101      	bne.n	8008d12 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e074      	b.n	8008dfc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2200      	movs	r2, #0
 8008d16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2221      	movs	r2, #33	@ 0x21
 8008d1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008d22:	f7f9 f871 	bl	8001e08 <HAL_GetTick>
 8008d26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	88fa      	ldrh	r2, [r7, #6]
 8008d2c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	88fa      	ldrh	r2, [r7, #6]
 8008d34:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d40:	d108      	bne.n	8008d54 <HAL_UART_Transmit+0x6c>
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	691b      	ldr	r3, [r3, #16]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d104      	bne.n	8008d54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	61bb      	str	r3, [r7, #24]
 8008d52:	e003      	b.n	8008d5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008d5c:	e030      	b.n	8008dc0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	9300      	str	r3, [sp, #0]
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	2200      	movs	r2, #0
 8008d66:	2180      	movs	r1, #128	@ 0x80
 8008d68:	68f8      	ldr	r0, [r7, #12]
 8008d6a:	f000 fbbf 	bl	80094ec <UART_WaitOnFlagUntilTimeout>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d005      	beq.n	8008d80 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2220      	movs	r2, #32
 8008d78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	e03d      	b.n	8008dfc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d10b      	bne.n	8008d9e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d86:	69bb      	ldr	r3, [r7, #24]
 8008d88:	881b      	ldrh	r3, [r3, #0]
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d94:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008d96:	69bb      	ldr	r3, [r7, #24]
 8008d98:	3302      	adds	r3, #2
 8008d9a:	61bb      	str	r3, [r7, #24]
 8008d9c:	e007      	b.n	8008dae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d9e:	69fb      	ldr	r3, [r7, #28]
 8008da0:	781a      	ldrb	r2, [r3, #0]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008da8:	69fb      	ldr	r3, [r7, #28]
 8008daa:	3301      	adds	r3, #1
 8008dac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	3b01      	subs	r3, #1
 8008db8:	b29a      	uxth	r2, r3
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d1c8      	bne.n	8008d5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	9300      	str	r3, [sp, #0]
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	2140      	movs	r1, #64	@ 0x40
 8008dd6:	68f8      	ldr	r0, [r7, #12]
 8008dd8:	f000 fb88 	bl	80094ec <UART_WaitOnFlagUntilTimeout>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d005      	beq.n	8008dee <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2220      	movs	r2, #32
 8008de6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008dea:	2303      	movs	r3, #3
 8008dec:	e006      	b.n	8008dfc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2220      	movs	r2, #32
 8008df2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008df6:	2300      	movs	r3, #0
 8008df8:	e000      	b.n	8008dfc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008dfa:	2302      	movs	r3, #2
  }
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3720      	adds	r7, #32
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e08:	b08c      	sub	sp, #48	@ 0x30
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	689a      	ldr	r2, [r3, #8]
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	691b      	ldr	r3, [r3, #16]
 8008e1c:	431a      	orrs	r2, r3
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	695b      	ldr	r3, [r3, #20]
 8008e22:	431a      	orrs	r2, r3
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	69db      	ldr	r3, [r3, #28]
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008e2c:	697b      	ldr	r3, [r7, #20]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	681a      	ldr	r2, [r3, #0]
 8008e32:	4baf      	ldr	r3, [pc, #700]	@ (80090f0 <UART_SetConfig+0x2ec>)
 8008e34:	4013      	ands	r3, r2
 8008e36:	697a      	ldr	r2, [r7, #20]
 8008e38:	6812      	ldr	r2, [r2, #0]
 8008e3a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e3c:	430b      	orrs	r3, r1
 8008e3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	68da      	ldr	r2, [r3, #12]
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	430a      	orrs	r2, r1
 8008e54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	699b      	ldr	r3, [r3, #24]
 8008e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4aa4      	ldr	r2, [pc, #656]	@ (80090f4 <UART_SetConfig+0x2f0>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d004      	beq.n	8008e70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	6a1b      	ldr	r3, [r3, #32]
 8008e6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008e7a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008e7e:	697a      	ldr	r2, [r7, #20]
 8008e80:	6812      	ldr	r2, [r2, #0]
 8008e82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e84:	430b      	orrs	r3, r1
 8008e86:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e8e:	f023 010f 	bic.w	r1, r3, #15
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	430a      	orrs	r2, r1
 8008e9c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a95      	ldr	r2, [pc, #596]	@ (80090f8 <UART_SetConfig+0x2f4>)
 8008ea4:	4293      	cmp	r3, r2
 8008ea6:	d125      	bne.n	8008ef4 <UART_SetConfig+0xf0>
 8008ea8:	2003      	movs	r0, #3
 8008eaa:	f7ff fea3 	bl	8008bf4 <LL_RCC_GetUSARTClockSource>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b03      	cmp	r3, #3
 8008eb2:	d81b      	bhi.n	8008eec <UART_SetConfig+0xe8>
 8008eb4:	a201      	add	r2, pc, #4	@ (adr r2, 8008ebc <UART_SetConfig+0xb8>)
 8008eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eba:	bf00      	nop
 8008ebc:	08008ecd 	.word	0x08008ecd
 8008ec0:	08008edd 	.word	0x08008edd
 8008ec4:	08008ed5 	.word	0x08008ed5
 8008ec8:	08008ee5 	.word	0x08008ee5
 8008ecc:	2301      	movs	r3, #1
 8008ece:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ed2:	e042      	b.n	8008f5a <UART_SetConfig+0x156>
 8008ed4:	2302      	movs	r3, #2
 8008ed6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008eda:	e03e      	b.n	8008f5a <UART_SetConfig+0x156>
 8008edc:	2304      	movs	r3, #4
 8008ede:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ee2:	e03a      	b.n	8008f5a <UART_SetConfig+0x156>
 8008ee4:	2308      	movs	r3, #8
 8008ee6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008eea:	e036      	b.n	8008f5a <UART_SetConfig+0x156>
 8008eec:	2310      	movs	r3, #16
 8008eee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ef2:	e032      	b.n	8008f5a <UART_SetConfig+0x156>
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a7e      	ldr	r2, [pc, #504]	@ (80090f4 <UART_SetConfig+0x2f0>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d12a      	bne.n	8008f54 <UART_SetConfig+0x150>
 8008efe:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8008f02:	f7ff fe87 	bl	8008c14 <LL_RCC_GetLPUARTClockSource>
 8008f06:	4603      	mov	r3, r0
 8008f08:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008f0c:	d01a      	beq.n	8008f44 <UART_SetConfig+0x140>
 8008f0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008f12:	d81b      	bhi.n	8008f4c <UART_SetConfig+0x148>
 8008f14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f18:	d00c      	beq.n	8008f34 <UART_SetConfig+0x130>
 8008f1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f1e:	d815      	bhi.n	8008f4c <UART_SetConfig+0x148>
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d003      	beq.n	8008f2c <UART_SetConfig+0x128>
 8008f24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f28:	d008      	beq.n	8008f3c <UART_SetConfig+0x138>
 8008f2a:	e00f      	b.n	8008f4c <UART_SetConfig+0x148>
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f32:	e012      	b.n	8008f5a <UART_SetConfig+0x156>
 8008f34:	2302      	movs	r3, #2
 8008f36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f3a:	e00e      	b.n	8008f5a <UART_SetConfig+0x156>
 8008f3c:	2304      	movs	r3, #4
 8008f3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f42:	e00a      	b.n	8008f5a <UART_SetConfig+0x156>
 8008f44:	2308      	movs	r3, #8
 8008f46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f4a:	e006      	b.n	8008f5a <UART_SetConfig+0x156>
 8008f4c:	2310      	movs	r3, #16
 8008f4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f52:	e002      	b.n	8008f5a <UART_SetConfig+0x156>
 8008f54:	2310      	movs	r3, #16
 8008f56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4a65      	ldr	r2, [pc, #404]	@ (80090f4 <UART_SetConfig+0x2f0>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	f040 8097 	bne.w	8009094 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008f66:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008f6a:	2b08      	cmp	r3, #8
 8008f6c:	d823      	bhi.n	8008fb6 <UART_SetConfig+0x1b2>
 8008f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8008f74 <UART_SetConfig+0x170>)
 8008f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f74:	08008f99 	.word	0x08008f99
 8008f78:	08008fb7 	.word	0x08008fb7
 8008f7c:	08008fa1 	.word	0x08008fa1
 8008f80:	08008fb7 	.word	0x08008fb7
 8008f84:	08008fa7 	.word	0x08008fa7
 8008f88:	08008fb7 	.word	0x08008fb7
 8008f8c:	08008fb7 	.word	0x08008fb7
 8008f90:	08008fb7 	.word	0x08008fb7
 8008f94:	08008faf 	.word	0x08008faf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f98:	f7fe fd00 	bl	800799c <HAL_RCC_GetPCLK1Freq>
 8008f9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008f9e:	e010      	b.n	8008fc2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008fa0:	4b56      	ldr	r3, [pc, #344]	@ (80090fc <UART_SetConfig+0x2f8>)
 8008fa2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008fa4:	e00d      	b.n	8008fc2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008fa6:	f7fe fc79 	bl	800789c <HAL_RCC_GetSysClockFreq>
 8008faa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008fac:	e009      	b.n	8008fc2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008fae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008fb2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008fb4:	e005      	b.n	8008fc2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008fc0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	f000 812b 	beq.w	8009220 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fce:	4a4c      	ldr	r2, [pc, #304]	@ (8009100 <UART_SetConfig+0x2fc>)
 8008fd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fd8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008fdc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	685a      	ldr	r2, [r3, #4]
 8008fe2:	4613      	mov	r3, r2
 8008fe4:	005b      	lsls	r3, r3, #1
 8008fe6:	4413      	add	r3, r2
 8008fe8:	69ba      	ldr	r2, [r7, #24]
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d305      	bcc.n	8008ffa <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008ff4:	69ba      	ldr	r2, [r7, #24]
 8008ff6:	429a      	cmp	r2, r3
 8008ff8:	d903      	bls.n	8009002 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009000:	e10e      	b.n	8009220 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009004:	2200      	movs	r2, #0
 8009006:	60bb      	str	r3, [r7, #8]
 8009008:	60fa      	str	r2, [r7, #12]
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800900e:	4a3c      	ldr	r2, [pc, #240]	@ (8009100 <UART_SetConfig+0x2fc>)
 8009010:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009014:	b29b      	uxth	r3, r3
 8009016:	2200      	movs	r2, #0
 8009018:	603b      	str	r3, [r7, #0]
 800901a:	607a      	str	r2, [r7, #4]
 800901c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009020:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009024:	f7f7 fd98 	bl	8000b58 <__aeabi_uldivmod>
 8009028:	4602      	mov	r2, r0
 800902a:	460b      	mov	r3, r1
 800902c:	4610      	mov	r0, r2
 800902e:	4619      	mov	r1, r3
 8009030:	f04f 0200 	mov.w	r2, #0
 8009034:	f04f 0300 	mov.w	r3, #0
 8009038:	020b      	lsls	r3, r1, #8
 800903a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800903e:	0202      	lsls	r2, r0, #8
 8009040:	6979      	ldr	r1, [r7, #20]
 8009042:	6849      	ldr	r1, [r1, #4]
 8009044:	0849      	lsrs	r1, r1, #1
 8009046:	2000      	movs	r0, #0
 8009048:	460c      	mov	r4, r1
 800904a:	4605      	mov	r5, r0
 800904c:	eb12 0804 	adds.w	r8, r2, r4
 8009050:	eb43 0905 	adc.w	r9, r3, r5
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	2200      	movs	r2, #0
 800905a:	469a      	mov	sl, r3
 800905c:	4693      	mov	fp, r2
 800905e:	4652      	mov	r2, sl
 8009060:	465b      	mov	r3, fp
 8009062:	4640      	mov	r0, r8
 8009064:	4649      	mov	r1, r9
 8009066:	f7f7 fd77 	bl	8000b58 <__aeabi_uldivmod>
 800906a:	4602      	mov	r2, r0
 800906c:	460b      	mov	r3, r1
 800906e:	4613      	mov	r3, r2
 8009070:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009072:	6a3b      	ldr	r3, [r7, #32]
 8009074:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009078:	d308      	bcc.n	800908c <UART_SetConfig+0x288>
 800907a:	6a3b      	ldr	r3, [r7, #32]
 800907c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009080:	d204      	bcs.n	800908c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	6a3a      	ldr	r2, [r7, #32]
 8009088:	60da      	str	r2, [r3, #12]
 800908a:	e0c9      	b.n	8009220 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800908c:	2301      	movs	r3, #1
 800908e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009092:	e0c5      	b.n	8009220 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	69db      	ldr	r3, [r3, #28]
 8009098:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800909c:	d16d      	bne.n	800917a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800909e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80090a2:	3b01      	subs	r3, #1
 80090a4:	2b07      	cmp	r3, #7
 80090a6:	d82d      	bhi.n	8009104 <UART_SetConfig+0x300>
 80090a8:	a201      	add	r2, pc, #4	@ (adr r2, 80090b0 <UART_SetConfig+0x2ac>)
 80090aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ae:	bf00      	nop
 80090b0:	080090d1 	.word	0x080090d1
 80090b4:	080090d9 	.word	0x080090d9
 80090b8:	08009105 	.word	0x08009105
 80090bc:	080090df 	.word	0x080090df
 80090c0:	08009105 	.word	0x08009105
 80090c4:	08009105 	.word	0x08009105
 80090c8:	08009105 	.word	0x08009105
 80090cc:	080090e7 	.word	0x080090e7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090d0:	f7fe fc7a 	bl	80079c8 <HAL_RCC_GetPCLK2Freq>
 80090d4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80090d6:	e01b      	b.n	8009110 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80090d8:	4b08      	ldr	r3, [pc, #32]	@ (80090fc <UART_SetConfig+0x2f8>)
 80090da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80090dc:	e018      	b.n	8009110 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80090de:	f7fe fbdd 	bl	800789c <HAL_RCC_GetSysClockFreq>
 80090e2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80090e4:	e014      	b.n	8009110 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80090ea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80090ec:	e010      	b.n	8009110 <UART_SetConfig+0x30c>
 80090ee:	bf00      	nop
 80090f0:	cfff69f3 	.word	0xcfff69f3
 80090f4:	40008000 	.word	0x40008000
 80090f8:	40013800 	.word	0x40013800
 80090fc:	00f42400 	.word	0x00f42400
 8009100:	08011230 	.word	0x08011230
      default:
        pclk = 0U;
 8009104:	2300      	movs	r3, #0
 8009106:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009108:	2301      	movs	r3, #1
 800910a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800910e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009112:	2b00      	cmp	r3, #0
 8009114:	f000 8084 	beq.w	8009220 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009118:	697b      	ldr	r3, [r7, #20]
 800911a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800911c:	4a4b      	ldr	r2, [pc, #300]	@ (800924c <UART_SetConfig+0x448>)
 800911e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009122:	461a      	mov	r2, r3
 8009124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009126:	fbb3 f3f2 	udiv	r3, r3, r2
 800912a:	005a      	lsls	r2, r3, #1
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	085b      	lsrs	r3, r3, #1
 8009132:	441a      	add	r2, r3
 8009134:	697b      	ldr	r3, [r7, #20]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	fbb2 f3f3 	udiv	r3, r2, r3
 800913c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800913e:	6a3b      	ldr	r3, [r7, #32]
 8009140:	2b0f      	cmp	r3, #15
 8009142:	d916      	bls.n	8009172 <UART_SetConfig+0x36e>
 8009144:	6a3b      	ldr	r3, [r7, #32]
 8009146:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800914a:	d212      	bcs.n	8009172 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800914c:	6a3b      	ldr	r3, [r7, #32]
 800914e:	b29b      	uxth	r3, r3
 8009150:	f023 030f 	bic.w	r3, r3, #15
 8009154:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009156:	6a3b      	ldr	r3, [r7, #32]
 8009158:	085b      	lsrs	r3, r3, #1
 800915a:	b29b      	uxth	r3, r3
 800915c:	f003 0307 	and.w	r3, r3, #7
 8009160:	b29a      	uxth	r2, r3
 8009162:	8bfb      	ldrh	r3, [r7, #30]
 8009164:	4313      	orrs	r3, r2
 8009166:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	8bfa      	ldrh	r2, [r7, #30]
 800916e:	60da      	str	r2, [r3, #12]
 8009170:	e056      	b.n	8009220 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8009172:	2301      	movs	r3, #1
 8009174:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009178:	e052      	b.n	8009220 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800917a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800917e:	3b01      	subs	r3, #1
 8009180:	2b07      	cmp	r3, #7
 8009182:	d822      	bhi.n	80091ca <UART_SetConfig+0x3c6>
 8009184:	a201      	add	r2, pc, #4	@ (adr r2, 800918c <UART_SetConfig+0x388>)
 8009186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800918a:	bf00      	nop
 800918c:	080091ad 	.word	0x080091ad
 8009190:	080091b5 	.word	0x080091b5
 8009194:	080091cb 	.word	0x080091cb
 8009198:	080091bb 	.word	0x080091bb
 800919c:	080091cb 	.word	0x080091cb
 80091a0:	080091cb 	.word	0x080091cb
 80091a4:	080091cb 	.word	0x080091cb
 80091a8:	080091c3 	.word	0x080091c3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091ac:	f7fe fc0c 	bl	80079c8 <HAL_RCC_GetPCLK2Freq>
 80091b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80091b2:	e010      	b.n	80091d6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80091b4:	4b26      	ldr	r3, [pc, #152]	@ (8009250 <UART_SetConfig+0x44c>)
 80091b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80091b8:	e00d      	b.n	80091d6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80091ba:	f7fe fb6f 	bl	800789c <HAL_RCC_GetSysClockFreq>
 80091be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80091c0:	e009      	b.n	80091d6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80091c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80091c8:	e005      	b.n	80091d6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 80091ca:	2300      	movs	r3, #0
 80091cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80091ce:	2301      	movs	r3, #1
 80091d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80091d4:	bf00      	nop
    }

    if (pclk != 0U)
 80091d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d021      	beq.n	8009220 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091e0:	4a1a      	ldr	r2, [pc, #104]	@ (800924c <UART_SetConfig+0x448>)
 80091e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091e6:	461a      	mov	r2, r3
 80091e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	085b      	lsrs	r3, r3, #1
 80091f4:	441a      	add	r2, r3
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80091fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009200:	6a3b      	ldr	r3, [r7, #32]
 8009202:	2b0f      	cmp	r3, #15
 8009204:	d909      	bls.n	800921a <UART_SetConfig+0x416>
 8009206:	6a3b      	ldr	r3, [r7, #32]
 8009208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800920c:	d205      	bcs.n	800921a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800920e:	6a3b      	ldr	r3, [r7, #32]
 8009210:	b29a      	uxth	r2, r3
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	60da      	str	r2, [r3, #12]
 8009218:	e002      	b.n	8009220 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800921a:	2301      	movs	r3, #1
 800921c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	2201      	movs	r2, #1
 8009224:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	2201      	movs	r2, #1
 800922c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	2200      	movs	r2, #0
 8009234:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	2200      	movs	r2, #0
 800923a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800923c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009240:	4618      	mov	r0, r3
 8009242:	3730      	adds	r7, #48	@ 0x30
 8009244:	46bd      	mov	sp, r7
 8009246:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800924a:	bf00      	nop
 800924c:	08011230 	.word	0x08011230
 8009250:	00f42400 	.word	0x00f42400

08009254 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009254:	b480      	push	{r7}
 8009256:	b083      	sub	sp, #12
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009260:	f003 0308 	and.w	r3, r3, #8
 8009264:	2b00      	cmp	r3, #0
 8009266:	d00a      	beq.n	800927e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	430a      	orrs	r2, r1
 800927c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009282:	f003 0301 	and.w	r3, r3, #1
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00a      	beq.n	80092a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	430a      	orrs	r2, r1
 800929e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092a4:	f003 0302 	and.w	r3, r3, #2
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d00a      	beq.n	80092c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	430a      	orrs	r2, r1
 80092c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092c6:	f003 0304 	and.w	r3, r3, #4
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d00a      	beq.n	80092e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	430a      	orrs	r2, r1
 80092e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092e8:	f003 0310 	and.w	r3, r3, #16
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d00a      	beq.n	8009306 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	689b      	ldr	r3, [r3, #8]
 80092f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	430a      	orrs	r2, r1
 8009304:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800930a:	f003 0320 	and.w	r3, r3, #32
 800930e:	2b00      	cmp	r3, #0
 8009310:	d00a      	beq.n	8009328 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	689b      	ldr	r3, [r3, #8]
 8009318:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	430a      	orrs	r2, r1
 8009326:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800932c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009330:	2b00      	cmp	r3, #0
 8009332:	d01a      	beq.n	800936a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	430a      	orrs	r2, r1
 8009348:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800934e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009352:	d10a      	bne.n	800936a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	430a      	orrs	r2, r1
 8009368:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800936e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009372:	2b00      	cmp	r3, #0
 8009374:	d00a      	beq.n	800938c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	430a      	orrs	r2, r1
 800938a:	605a      	str	r2, [r3, #4]
  }
}
 800938c:	bf00      	nop
 800938e:	370c      	adds	r7, #12
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b098      	sub	sp, #96	@ 0x60
 800939c:	af02      	add	r7, sp, #8
 800939e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80093a8:	f7f8 fd2e 	bl	8001e08 <HAL_GetTick>
 80093ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f003 0308 	and.w	r3, r3, #8
 80093b8:	2b08      	cmp	r3, #8
 80093ba:	d12f      	bne.n	800941c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80093c0:	9300      	str	r3, [sp, #0]
 80093c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80093c4:	2200      	movs	r2, #0
 80093c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 f88e 	bl	80094ec <UART_WaitOnFlagUntilTimeout>
 80093d0:	4603      	mov	r3, r0
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d022      	beq.n	800941c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093de:	e853 3f00 	ldrex	r3, [r3]
 80093e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80093e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80093ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	461a      	mov	r2, r3
 80093f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80093f6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80093fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093fc:	e841 2300 	strex	r3, r2, [r1]
 8009400:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009402:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009404:	2b00      	cmp	r3, #0
 8009406:	d1e6      	bne.n	80093d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2220      	movs	r2, #32
 800940c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009418:	2303      	movs	r3, #3
 800941a:	e063      	b.n	80094e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f003 0304 	and.w	r3, r3, #4
 8009426:	2b04      	cmp	r3, #4
 8009428:	d149      	bne.n	80094be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800942a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800942e:	9300      	str	r3, [sp, #0]
 8009430:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009432:	2200      	movs	r2, #0
 8009434:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f000 f857 	bl	80094ec <UART_WaitOnFlagUntilTimeout>
 800943e:	4603      	mov	r3, r0
 8009440:	2b00      	cmp	r3, #0
 8009442:	d03c      	beq.n	80094be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800944a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800944c:	e853 3f00 	ldrex	r3, [r3]
 8009450:	623b      	str	r3, [r7, #32]
   return(result);
 8009452:	6a3b      	ldr	r3, [r7, #32]
 8009454:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009458:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	461a      	mov	r2, r3
 8009460:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009462:	633b      	str	r3, [r7, #48]	@ 0x30
 8009464:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009466:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009468:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800946a:	e841 2300 	strex	r3, r2, [r1]
 800946e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009472:	2b00      	cmp	r3, #0
 8009474:	d1e6      	bne.n	8009444 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	3308      	adds	r3, #8
 800947c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	e853 3f00 	ldrex	r3, [r3]
 8009484:	60fb      	str	r3, [r7, #12]
   return(result);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	f023 0301 	bic.w	r3, r3, #1
 800948c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	3308      	adds	r3, #8
 8009494:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009496:	61fa      	str	r2, [r7, #28]
 8009498:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800949a:	69b9      	ldr	r1, [r7, #24]
 800949c:	69fa      	ldr	r2, [r7, #28]
 800949e:	e841 2300 	strex	r3, r2, [r1]
 80094a2:	617b      	str	r3, [r7, #20]
   return(result);
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d1e5      	bne.n	8009476 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2220      	movs	r2, #32
 80094ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094ba:	2303      	movs	r3, #3
 80094bc:	e012      	b.n	80094e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2220      	movs	r2, #32
 80094c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2220      	movs	r2, #32
 80094ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2200      	movs	r2, #0
 80094d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2200      	movs	r2, #0
 80094d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80094e2:	2300      	movs	r3, #0
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3758      	adds	r7, #88	@ 0x58
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b084      	sub	sp, #16
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	60b9      	str	r1, [r7, #8]
 80094f6:	603b      	str	r3, [r7, #0]
 80094f8:	4613      	mov	r3, r2
 80094fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094fc:	e04f      	b.n	800959e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094fe:	69bb      	ldr	r3, [r7, #24]
 8009500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009504:	d04b      	beq.n	800959e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009506:	f7f8 fc7f 	bl	8001e08 <HAL_GetTick>
 800950a:	4602      	mov	r2, r0
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	1ad3      	subs	r3, r2, r3
 8009510:	69ba      	ldr	r2, [r7, #24]
 8009512:	429a      	cmp	r2, r3
 8009514:	d302      	bcc.n	800951c <UART_WaitOnFlagUntilTimeout+0x30>
 8009516:	69bb      	ldr	r3, [r7, #24]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d101      	bne.n	8009520 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800951c:	2303      	movs	r3, #3
 800951e:	e04e      	b.n	80095be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f003 0304 	and.w	r3, r3, #4
 800952a:	2b00      	cmp	r3, #0
 800952c:	d037      	beq.n	800959e <UART_WaitOnFlagUntilTimeout+0xb2>
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	2b80      	cmp	r3, #128	@ 0x80
 8009532:	d034      	beq.n	800959e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	2b40      	cmp	r3, #64	@ 0x40
 8009538:	d031      	beq.n	800959e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	69db      	ldr	r3, [r3, #28]
 8009540:	f003 0308 	and.w	r3, r3, #8
 8009544:	2b08      	cmp	r3, #8
 8009546:	d110      	bne.n	800956a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	2208      	movs	r2, #8
 800954e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009550:	68f8      	ldr	r0, [r7, #12]
 8009552:	f000 f838 	bl	80095c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2208      	movs	r2, #8
 800955a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2200      	movs	r2, #0
 8009562:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009566:	2301      	movs	r3, #1
 8009568:	e029      	b.n	80095be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	69db      	ldr	r3, [r3, #28]
 8009570:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009574:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009578:	d111      	bne.n	800959e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009582:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009584:	68f8      	ldr	r0, [r7, #12]
 8009586:	f000 f81e 	bl	80095c6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2220      	movs	r2, #32
 800958e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	2200      	movs	r2, #0
 8009596:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800959a:	2303      	movs	r3, #3
 800959c:	e00f      	b.n	80095be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	69da      	ldr	r2, [r3, #28]
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	4013      	ands	r3, r2
 80095a8:	68ba      	ldr	r2, [r7, #8]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	bf0c      	ite	eq
 80095ae:	2301      	moveq	r3, #1
 80095b0:	2300      	movne	r3, #0
 80095b2:	b2db      	uxtb	r3, r3
 80095b4:	461a      	mov	r2, r3
 80095b6:	79fb      	ldrb	r3, [r7, #7]
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d0a0      	beq.n	80094fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095bc:	2300      	movs	r3, #0
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3710      	adds	r7, #16
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80095c6:	b480      	push	{r7}
 80095c8:	b095      	sub	sp, #84	@ 0x54
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095d6:	e853 3f00 	ldrex	r3, [r3]
 80095da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80095dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80095e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	461a      	mov	r2, r3
 80095ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80095ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80095ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80095f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80095f4:	e841 2300 	strex	r3, r2, [r1]
 80095f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80095fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d1e6      	bne.n	80095ce <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	3308      	adds	r3, #8
 8009606:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009608:	6a3b      	ldr	r3, [r7, #32]
 800960a:	e853 3f00 	ldrex	r3, [r3]
 800960e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009610:	69fb      	ldr	r3, [r7, #28]
 8009612:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009616:	f023 0301 	bic.w	r3, r3, #1
 800961a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	3308      	adds	r3, #8
 8009622:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009624:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009626:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009628:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800962a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800962c:	e841 2300 	strex	r3, r2, [r1]
 8009630:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009634:	2b00      	cmp	r3, #0
 8009636:	d1e3      	bne.n	8009600 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800963c:	2b01      	cmp	r3, #1
 800963e:	d118      	bne.n	8009672 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	e853 3f00 	ldrex	r3, [r3]
 800964c:	60bb      	str	r3, [r7, #8]
   return(result);
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	f023 0310 	bic.w	r3, r3, #16
 8009654:	647b      	str	r3, [r7, #68]	@ 0x44
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	461a      	mov	r2, r3
 800965c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800965e:	61bb      	str	r3, [r7, #24]
 8009660:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009662:	6979      	ldr	r1, [r7, #20]
 8009664:	69ba      	ldr	r2, [r7, #24]
 8009666:	e841 2300 	strex	r3, r2, [r1]
 800966a:	613b      	str	r3, [r7, #16]
   return(result);
 800966c:	693b      	ldr	r3, [r7, #16]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d1e6      	bne.n	8009640 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2220      	movs	r2, #32
 8009676:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	2200      	movs	r2, #0
 800967e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2200      	movs	r2, #0
 8009684:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009686:	bf00      	nop
 8009688:	3754      	adds	r7, #84	@ 0x54
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr

08009692 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009692:	b480      	push	{r7}
 8009694:	b085      	sub	sp, #20
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2200      	movs	r2, #0
 800969e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80096a2:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80096a6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	b29a      	uxth	r2, r3
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80096b2:	2300      	movs	r3, #0
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3714      	adds	r7, #20
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr

080096c0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b085      	sub	sp, #20
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80096c8:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 80096cc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80096d4:	b29a      	uxth	r2, r3
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	b29b      	uxth	r3, r3
 80096da:	43db      	mvns	r3, r3
 80096dc:	b29b      	uxth	r3, r3
 80096de:	4013      	ands	r3, r2
 80096e0:	b29a      	uxth	r2, r3
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80096e8:	2300      	movs	r3, #0
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3714      	adds	r7, #20
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr

080096f6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80096f6:	b480      	push	{r7}
 80096f8:	b085      	sub	sp, #20
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	60f8      	str	r0, [r7, #12]
 80096fe:	1d3b      	adds	r3, r7, #4
 8009700:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2201      	movs	r2, #1
 8009708:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2200      	movs	r2, #0
 8009710:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2200      	movs	r2, #0
 8009718:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	2200      	movs	r2, #0
 8009720:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8009724:	2300      	movs	r3, #0
}
 8009726:	4618      	mov	r0, r3
 8009728:	3714      	adds	r7, #20
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr
	...

08009734 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009734:	b480      	push	{r7}
 8009736:	b09d      	sub	sp, #116	@ 0x74
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
 800973c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800973e:	2300      	movs	r3, #0
 8009740:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009744:	687a      	ldr	r2, [r7, #4]
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	781b      	ldrb	r3, [r3, #0]
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	4413      	add	r3, r2
 800974e:	881b      	ldrh	r3, [r3, #0]
 8009750:	b29b      	uxth	r3, r3
 8009752:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8009756:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800975a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	78db      	ldrb	r3, [r3, #3]
 8009762:	2b03      	cmp	r3, #3
 8009764:	d81f      	bhi.n	80097a6 <USB_ActivateEndpoint+0x72>
 8009766:	a201      	add	r2, pc, #4	@ (adr r2, 800976c <USB_ActivateEndpoint+0x38>)
 8009768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800976c:	0800977d 	.word	0x0800977d
 8009770:	08009799 	.word	0x08009799
 8009774:	080097af 	.word	0x080097af
 8009778:	0800978b 	.word	0x0800978b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800977c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009780:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009784:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8009788:	e012      	b.n	80097b0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800978a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800978e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8009792:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8009796:	e00b      	b.n	80097b0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009798:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800979c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80097a0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80097a4:	e004      	b.n	80097b0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80097a6:	2301      	movs	r3, #1
 80097a8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 80097ac:	e000      	b.n	80097b0 <USB_ActivateEndpoint+0x7c>
      break;
 80097ae:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	441a      	add	r2, r3
 80097ba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80097be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80097c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80097c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80097ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80097d2:	687a      	ldr	r2, [r7, #4]
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	009b      	lsls	r3, r3, #2
 80097da:	4413      	add	r3, r2
 80097dc:	881b      	ldrh	r3, [r3, #0]
 80097de:	b29b      	uxth	r3, r3
 80097e0:	b21b      	sxth	r3, r3
 80097e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80097e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097ea:	b21a      	sxth	r2, r3
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	781b      	ldrb	r3, [r3, #0]
 80097f0:	b21b      	sxth	r3, r3
 80097f2:	4313      	orrs	r3, r2
 80097f4:	b21b      	sxth	r3, r3
 80097f6:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80097fa:	687a      	ldr	r2, [r7, #4]
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	009b      	lsls	r3, r3, #2
 8009802:	441a      	add	r2, r3
 8009804:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009808:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800980c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009810:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009814:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009818:	b29b      	uxth	r3, r3
 800981a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	7b1b      	ldrb	r3, [r3, #12]
 8009820:	2b00      	cmp	r3, #0
 8009822:	f040 8178 	bne.w	8009b16 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	785b      	ldrb	r3, [r3, #1]
 800982a:	2b00      	cmp	r3, #0
 800982c:	f000 8084 	beq.w	8009938 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	61bb      	str	r3, [r7, #24]
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800983a:	b29b      	uxth	r3, r3
 800983c:	461a      	mov	r2, r3
 800983e:	69bb      	ldr	r3, [r7, #24]
 8009840:	4413      	add	r3, r2
 8009842:	61bb      	str	r3, [r7, #24]
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	00da      	lsls	r2, r3, #3
 800984a:	69bb      	ldr	r3, [r7, #24]
 800984c:	4413      	add	r3, r2
 800984e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009852:	617b      	str	r3, [r7, #20]
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	88db      	ldrh	r3, [r3, #6]
 8009858:	085b      	lsrs	r3, r3, #1
 800985a:	b29b      	uxth	r3, r3
 800985c:	005b      	lsls	r3, r3, #1
 800985e:	b29a      	uxth	r2, r3
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	4413      	add	r3, r2
 800986e:	881b      	ldrh	r3, [r3, #0]
 8009870:	827b      	strh	r3, [r7, #18]
 8009872:	8a7b      	ldrh	r3, [r7, #18]
 8009874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009878:	2b00      	cmp	r3, #0
 800987a:	d01b      	beq.n	80098b4 <USB_ActivateEndpoint+0x180>
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	009b      	lsls	r3, r3, #2
 8009884:	4413      	add	r3, r2
 8009886:	881b      	ldrh	r3, [r3, #0]
 8009888:	b29b      	uxth	r3, r3
 800988a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800988e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009892:	823b      	strh	r3, [r7, #16]
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	441a      	add	r2, r3
 800989e:	8a3b      	ldrh	r3, [r7, #16]
 80098a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80098a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80098a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80098ac:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80098b0:	b29b      	uxth	r3, r3
 80098b2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	78db      	ldrb	r3, [r3, #3]
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d020      	beq.n	80098fe <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	4413      	add	r3, r2
 80098c6:	881b      	ldrh	r3, [r3, #0]
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80098ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098d2:	81bb      	strh	r3, [r7, #12]
 80098d4:	89bb      	ldrh	r3, [r7, #12]
 80098d6:	f083 0320 	eor.w	r3, r3, #32
 80098da:	81bb      	strh	r3, [r7, #12]
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	781b      	ldrb	r3, [r3, #0]
 80098e2:	009b      	lsls	r3, r3, #2
 80098e4:	441a      	add	r2, r3
 80098e6:	89bb      	ldrh	r3, [r7, #12]
 80098e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80098ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80098f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80098f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	8013      	strh	r3, [r2, #0]
 80098fc:	e2d5      	b.n	8009eaa <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	4413      	add	r3, r2
 8009908:	881b      	ldrh	r3, [r3, #0]
 800990a:	b29b      	uxth	r3, r3
 800990c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009910:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009914:	81fb      	strh	r3, [r7, #14]
 8009916:	687a      	ldr	r2, [r7, #4]
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	781b      	ldrb	r3, [r3, #0]
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	441a      	add	r2, r3
 8009920:	89fb      	ldrh	r3, [r7, #14]
 8009922:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009926:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800992a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800992e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009932:	b29b      	uxth	r3, r3
 8009934:	8013      	strh	r3, [r2, #0]
 8009936:	e2b8      	b.n	8009eaa <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	633b      	str	r3, [r7, #48]	@ 0x30
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009942:	b29b      	uxth	r3, r3
 8009944:	461a      	mov	r2, r3
 8009946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009948:	4413      	add	r3, r2
 800994a:	633b      	str	r3, [r7, #48]	@ 0x30
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	00da      	lsls	r2, r3, #3
 8009952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009954:	4413      	add	r3, r2
 8009956:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800995a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	88db      	ldrh	r3, [r3, #6]
 8009960:	085b      	lsrs	r3, r3, #1
 8009962:	b29b      	uxth	r3, r3
 8009964:	005b      	lsls	r3, r3, #1
 8009966:	b29a      	uxth	r2, r3
 8009968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800996a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009976:	b29b      	uxth	r3, r3
 8009978:	461a      	mov	r2, r3
 800997a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800997c:	4413      	add	r3, r2
 800997e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	781b      	ldrb	r3, [r3, #0]
 8009984:	00da      	lsls	r2, r3, #3
 8009986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009988:	4413      	add	r3, r2
 800998a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800998e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009992:	881b      	ldrh	r3, [r3, #0]
 8009994:	b29b      	uxth	r3, r3
 8009996:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800999a:	b29a      	uxth	r2, r3
 800999c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800999e:	801a      	strh	r2, [r3, #0]
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	691b      	ldr	r3, [r3, #16]
 80099a4:	2b3e      	cmp	r3, #62	@ 0x3e
 80099a6:	d91d      	bls.n	80099e4 <USB_ActivateEndpoint+0x2b0>
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	691b      	ldr	r3, [r3, #16]
 80099ac:	095b      	lsrs	r3, r3, #5
 80099ae:	66bb      	str	r3, [r7, #104]	@ 0x68
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	691b      	ldr	r3, [r3, #16]
 80099b4:	f003 031f 	and.w	r3, r3, #31
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d102      	bne.n	80099c2 <USB_ActivateEndpoint+0x28e>
 80099bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80099be:	3b01      	subs	r3, #1
 80099c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80099c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099c4:	881b      	ldrh	r3, [r3, #0]
 80099c6:	b29a      	uxth	r2, r3
 80099c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80099ca:	b29b      	uxth	r3, r3
 80099cc:	029b      	lsls	r3, r3, #10
 80099ce:	b29b      	uxth	r3, r3
 80099d0:	4313      	orrs	r3, r2
 80099d2:	b29b      	uxth	r3, r3
 80099d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099dc:	b29a      	uxth	r2, r3
 80099de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099e0:	801a      	strh	r2, [r3, #0]
 80099e2:	e026      	b.n	8009a32 <USB_ActivateEndpoint+0x2fe>
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	691b      	ldr	r3, [r3, #16]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d10a      	bne.n	8009a02 <USB_ActivateEndpoint+0x2ce>
 80099ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ee:	881b      	ldrh	r3, [r3, #0]
 80099f0:	b29b      	uxth	r3, r3
 80099f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099fa:	b29a      	uxth	r2, r3
 80099fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099fe:	801a      	strh	r2, [r3, #0]
 8009a00:	e017      	b.n	8009a32 <USB_ActivateEndpoint+0x2fe>
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	691b      	ldr	r3, [r3, #16]
 8009a06:	085b      	lsrs	r3, r3, #1
 8009a08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	691b      	ldr	r3, [r3, #16]
 8009a0e:	f003 0301 	and.w	r3, r3, #1
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d002      	beq.n	8009a1c <USB_ActivateEndpoint+0x2e8>
 8009a16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009a18:	3301      	adds	r3, #1
 8009a1a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a1e:	881b      	ldrh	r3, [r3, #0]
 8009a20:	b29a      	uxth	r2, r3
 8009a22:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	029b      	lsls	r3, r3, #10
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	b29a      	uxth	r2, r3
 8009a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a30:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009a32:	687a      	ldr	r2, [r7, #4]
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	4413      	add	r3, r2
 8009a3c:	881b      	ldrh	r3, [r3, #0]
 8009a3e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009a40:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009a42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d01b      	beq.n	8009a82 <USB_ActivateEndpoint+0x34e>
 8009a4a:	687a      	ldr	r2, [r7, #4]
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	781b      	ldrb	r3, [r3, #0]
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	4413      	add	r3, r2
 8009a54:	881b      	ldrh	r3, [r3, #0]
 8009a56:	b29b      	uxth	r3, r3
 8009a58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009a5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a60:	843b      	strh	r3, [r7, #32]
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	441a      	add	r2, r3
 8009a6c:	8c3b      	ldrh	r3, [r7, #32]
 8009a6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009a72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009a76:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009a7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d124      	bne.n	8009ad4 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009a8a:	687a      	ldr	r2, [r7, #4]
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	781b      	ldrb	r3, [r3, #0]
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	4413      	add	r3, r2
 8009a94:	881b      	ldrh	r3, [r3, #0]
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009a9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009aa0:	83bb      	strh	r3, [r7, #28]
 8009aa2:	8bbb      	ldrh	r3, [r7, #28]
 8009aa4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009aa8:	83bb      	strh	r3, [r7, #28]
 8009aaa:	8bbb      	ldrh	r3, [r7, #28]
 8009aac:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009ab0:	83bb      	strh	r3, [r7, #28]
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	009b      	lsls	r3, r3, #2
 8009aba:	441a      	add	r2, r3
 8009abc:	8bbb      	ldrh	r3, [r7, #28]
 8009abe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ac2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ac6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009aca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ace:	b29b      	uxth	r3, r3
 8009ad0:	8013      	strh	r3, [r2, #0]
 8009ad2:	e1ea      	b.n	8009eaa <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	4413      	add	r3, r2
 8009ade:	881b      	ldrh	r3, [r3, #0]
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009ae6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009aea:	83fb      	strh	r3, [r7, #30]
 8009aec:	8bfb      	ldrh	r3, [r7, #30]
 8009aee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009af2:	83fb      	strh	r3, [r7, #30]
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	009b      	lsls	r3, r3, #2
 8009afc:	441a      	add	r2, r3
 8009afe:	8bfb      	ldrh	r3, [r7, #30]
 8009b00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	8013      	strh	r3, [r2, #0]
 8009b14:	e1c9      	b.n	8009eaa <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	78db      	ldrb	r3, [r3, #3]
 8009b1a:	2b02      	cmp	r3, #2
 8009b1c:	d11e      	bne.n	8009b5c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	009b      	lsls	r3, r3, #2
 8009b26:	4413      	add	r3, r2
 8009b28:	881b      	ldrh	r3, [r3, #0]
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009b30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b34:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009b38:	687a      	ldr	r2, [r7, #4]
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	009b      	lsls	r3, r3, #2
 8009b40:	441a      	add	r2, r3
 8009b42:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009b46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b4e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009b52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	8013      	strh	r3, [r2, #0]
 8009b5a:	e01d      	b.n	8009b98 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	009b      	lsls	r3, r3, #2
 8009b64:	4413      	add	r3, r2
 8009b66:	881b      	ldrh	r3, [r3, #0]
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009b6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b72:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	781b      	ldrb	r3, [r3, #0]
 8009b7c:	009b      	lsls	r3, r3, #2
 8009b7e:	441a      	add	r2, r3
 8009b80:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8009b84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ba8:	4413      	add	r3, r2
 8009baa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	00da      	lsls	r2, r3, #3
 8009bb2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009bb4:	4413      	add	r3, r2
 8009bb6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009bba:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	891b      	ldrh	r3, [r3, #8]
 8009bc0:	085b      	lsrs	r3, r3, #1
 8009bc2:	b29b      	uxth	r3, r3
 8009bc4:	005b      	lsls	r3, r3, #1
 8009bc6:	b29a      	uxth	r2, r3
 8009bc8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009bca:	801a      	strh	r2, [r3, #0]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	657b      	str	r3, [r7, #84]	@ 0x54
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	461a      	mov	r2, r3
 8009bda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009bdc:	4413      	add	r3, r2
 8009bde:	657b      	str	r3, [r7, #84]	@ 0x54
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	00da      	lsls	r2, r3, #3
 8009be6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009be8:	4413      	add	r3, r2
 8009bea:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009bee:	653b      	str	r3, [r7, #80]	@ 0x50
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	895b      	ldrh	r3, [r3, #10]
 8009bf4:	085b      	lsrs	r3, r3, #1
 8009bf6:	b29b      	uxth	r3, r3
 8009bf8:	005b      	lsls	r3, r3, #1
 8009bfa:	b29a      	uxth	r2, r3
 8009bfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009bfe:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	785b      	ldrb	r3, [r3, #1]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	f040 8093 	bne.w	8009d30 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	781b      	ldrb	r3, [r3, #0]
 8009c10:	009b      	lsls	r3, r3, #2
 8009c12:	4413      	add	r3, r2
 8009c14:	881b      	ldrh	r3, [r3, #0]
 8009c16:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8009c1a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009c1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d01b      	beq.n	8009c5e <USB_ActivateEndpoint+0x52a>
 8009c26:	687a      	ldr	r2, [r7, #4]
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	4413      	add	r3, r2
 8009c30:	881b      	ldrh	r3, [r3, #0]
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c3c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	441a      	add	r2, r3
 8009c48:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009c4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c52:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009c56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c5a:	b29b      	uxth	r3, r3
 8009c5c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	4413      	add	r3, r2
 8009c68:	881b      	ldrh	r3, [r3, #0]
 8009c6a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8009c6c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009c6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d01b      	beq.n	8009cae <USB_ActivateEndpoint+0x57a>
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	4413      	add	r3, r2
 8009c80:	881b      	ldrh	r3, [r3, #0]
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c8c:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	441a      	add	r2, r3
 8009c98:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009c9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ca2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ca6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	009b      	lsls	r3, r3, #2
 8009cb6:	4413      	add	r3, r2
 8009cb8:	881b      	ldrh	r3, [r3, #0]
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009cc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cc4:	873b      	strh	r3, [r7, #56]	@ 0x38
 8009cc6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8009cc8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009ccc:	873b      	strh	r3, [r7, #56]	@ 0x38
 8009cce:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8009cd0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009cd4:	873b      	strh	r3, [r7, #56]	@ 0x38
 8009cd6:	687a      	ldr	r2, [r7, #4]
 8009cd8:	683b      	ldr	r3, [r7, #0]
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	009b      	lsls	r3, r3, #2
 8009cde:	441a      	add	r2, r3
 8009ce0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8009ce2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ce6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009cea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009cee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009cf6:	687a      	ldr	r2, [r7, #4]
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	781b      	ldrb	r3, [r3, #0]
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	4413      	add	r3, r2
 8009d00:	881b      	ldrh	r3, [r3, #0]
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d0c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009d0e:	687a      	ldr	r2, [r7, #4]
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	009b      	lsls	r3, r3, #2
 8009d16:	441a      	add	r2, r3
 8009d18:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009d1a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d1e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d2a:	b29b      	uxth	r3, r3
 8009d2c:	8013      	strh	r3, [r2, #0]
 8009d2e:	e0bc      	b.n	8009eaa <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	4413      	add	r3, r2
 8009d3a:	881b      	ldrh	r3, [r3, #0]
 8009d3c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8009d40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009d44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d01d      	beq.n	8009d88 <USB_ActivateEndpoint+0x654>
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	781b      	ldrb	r3, [r3, #0]
 8009d52:	009b      	lsls	r3, r3, #2
 8009d54:	4413      	add	r3, r2
 8009d56:	881b      	ldrh	r3, [r3, #0]
 8009d58:	b29b      	uxth	r3, r3
 8009d5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d62:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	009b      	lsls	r3, r3, #2
 8009d6e:	441a      	add	r2, r3
 8009d70:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8009d74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d7c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009d80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	009b      	lsls	r3, r3, #2
 8009d90:	4413      	add	r3, r2
 8009d92:	881b      	ldrh	r3, [r3, #0]
 8009d94:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8009d98:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009d9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d01d      	beq.n	8009de0 <USB_ActivateEndpoint+0x6ac>
 8009da4:	687a      	ldr	r2, [r7, #4]
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	4413      	add	r3, r2
 8009dae:	881b      	ldrh	r3, [r3, #0]
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009db6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009dba:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	441a      	add	r2, r3
 8009dc8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8009dcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009dd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009dd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009dd8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	78db      	ldrb	r3, [r3, #3]
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	d024      	beq.n	8009e32 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	009b      	lsls	r3, r3, #2
 8009df0:	4413      	add	r3, r2
 8009df2:	881b      	ldrh	r3, [r3, #0]
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009dfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009dfe:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8009e02:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8009e06:	f083 0320 	eor.w	r3, r3, #32
 8009e0a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	441a      	add	r2, r3
 8009e18:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8009e1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	8013      	strh	r3, [r2, #0]
 8009e30:	e01d      	b.n	8009e6e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	009b      	lsls	r3, r3, #2
 8009e3a:	4413      	add	r3, r2
 8009e3c:	881b      	ldrh	r3, [r3, #0]
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e48:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8009e4c:	687a      	ldr	r2, [r7, #4]
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	009b      	lsls	r3, r3, #2
 8009e54:	441a      	add	r2, r3
 8009e56:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009e5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e6a:	b29b      	uxth	r3, r3
 8009e6c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	781b      	ldrb	r3, [r3, #0]
 8009e74:	009b      	lsls	r3, r3, #2
 8009e76:	4413      	add	r3, r2
 8009e78:	881b      	ldrh	r3, [r3, #0]
 8009e7a:	b29b      	uxth	r3, r3
 8009e7c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009e80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e84:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	781b      	ldrb	r3, [r3, #0]
 8009e8e:	009b      	lsls	r3, r3, #2
 8009e90:	441a      	add	r2, r3
 8009e92:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009e96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ea2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ea6:	b29b      	uxth	r3, r3
 8009ea8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009eaa:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3774      	adds	r7, #116	@ 0x74
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr
 8009eba:	bf00      	nop

08009ebc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b08d      	sub	sp, #52	@ 0x34
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	7b1b      	ldrb	r3, [r3, #12]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	f040 808e 	bne.w	8009fec <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	785b      	ldrb	r3, [r3, #1]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d044      	beq.n	8009f62 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009ed8:	687a      	ldr	r2, [r7, #4]
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	009b      	lsls	r3, r3, #2
 8009ee0:	4413      	add	r3, r2
 8009ee2:	881b      	ldrh	r3, [r3, #0]
 8009ee4:	81bb      	strh	r3, [r7, #12]
 8009ee6:	89bb      	ldrh	r3, [r7, #12]
 8009ee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d01b      	beq.n	8009f28 <USB_DeactivateEndpoint+0x6c>
 8009ef0:	687a      	ldr	r2, [r7, #4]
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	781b      	ldrb	r3, [r3, #0]
 8009ef6:	009b      	lsls	r3, r3, #2
 8009ef8:	4413      	add	r3, r2
 8009efa:	881b      	ldrh	r3, [r3, #0]
 8009efc:	b29b      	uxth	r3, r3
 8009efe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f06:	817b      	strh	r3, [r7, #10]
 8009f08:	687a      	ldr	r2, [r7, #4]
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	009b      	lsls	r3, r3, #2
 8009f10:	441a      	add	r2, r3
 8009f12:	897b      	ldrh	r3, [r7, #10]
 8009f14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f1c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f20:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	683b      	ldr	r3, [r7, #0]
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	009b      	lsls	r3, r3, #2
 8009f30:	4413      	add	r3, r2
 8009f32:	881b      	ldrh	r3, [r3, #0]
 8009f34:	b29b      	uxth	r3, r3
 8009f36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f3e:	813b      	strh	r3, [r7, #8]
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	009b      	lsls	r3, r3, #2
 8009f48:	441a      	add	r2, r3
 8009f4a:	893b      	ldrh	r3, [r7, #8]
 8009f4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f5c:	b29b      	uxth	r3, r3
 8009f5e:	8013      	strh	r3, [r2, #0]
 8009f60:	e192      	b.n	800a288 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	683b      	ldr	r3, [r7, #0]
 8009f66:	781b      	ldrb	r3, [r3, #0]
 8009f68:	009b      	lsls	r3, r3, #2
 8009f6a:	4413      	add	r3, r2
 8009f6c:	881b      	ldrh	r3, [r3, #0]
 8009f6e:	827b      	strh	r3, [r7, #18]
 8009f70:	8a7b      	ldrh	r3, [r7, #18]
 8009f72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d01b      	beq.n	8009fb2 <USB_DeactivateEndpoint+0xf6>
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	781b      	ldrb	r3, [r3, #0]
 8009f80:	009b      	lsls	r3, r3, #2
 8009f82:	4413      	add	r3, r2
 8009f84:	881b      	ldrh	r3, [r3, #0]
 8009f86:	b29b      	uxth	r3, r3
 8009f88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f90:	823b      	strh	r3, [r7, #16]
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	441a      	add	r2, r3
 8009f9c:	8a3b      	ldrh	r3, [r7, #16]
 8009f9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009fa2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009fa6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009faa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fae:	b29b      	uxth	r3, r3
 8009fb0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009fb2:	687a      	ldr	r2, [r7, #4]
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	4413      	add	r3, r2
 8009fbc:	881b      	ldrh	r3, [r3, #0]
 8009fbe:	b29b      	uxth	r3, r3
 8009fc0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009fc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fc8:	81fb      	strh	r3, [r7, #14]
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	781b      	ldrb	r3, [r3, #0]
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	441a      	add	r2, r3
 8009fd4:	89fb      	ldrh	r3, [r7, #14]
 8009fd6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009fda:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009fde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009fe2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	8013      	strh	r3, [r2, #0]
 8009fea:	e14d      	b.n	800a288 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	785b      	ldrb	r3, [r3, #1]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	f040 80a5 	bne.w	800a140 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ff6:	687a      	ldr	r2, [r7, #4]
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	4413      	add	r3, r2
 800a000:	881b      	ldrh	r3, [r3, #0]
 800a002:	843b      	strh	r3, [r7, #32]
 800a004:	8c3b      	ldrh	r3, [r7, #32]
 800a006:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d01b      	beq.n	800a046 <USB_DeactivateEndpoint+0x18a>
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	781b      	ldrb	r3, [r3, #0]
 800a014:	009b      	lsls	r3, r3, #2
 800a016:	4413      	add	r3, r2
 800a018:	881b      	ldrh	r3, [r3, #0]
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a020:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a024:	83fb      	strh	r3, [r7, #30]
 800a026:	687a      	ldr	r2, [r7, #4]
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	009b      	lsls	r3, r3, #2
 800a02e:	441a      	add	r2, r3
 800a030:	8bfb      	ldrh	r3, [r7, #30]
 800a032:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a036:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a03a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a03e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a042:	b29b      	uxth	r3, r3
 800a044:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a046:	687a      	ldr	r2, [r7, #4]
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	009b      	lsls	r3, r3, #2
 800a04e:	4413      	add	r3, r2
 800a050:	881b      	ldrh	r3, [r3, #0]
 800a052:	83bb      	strh	r3, [r7, #28]
 800a054:	8bbb      	ldrh	r3, [r7, #28]
 800a056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d01b      	beq.n	800a096 <USB_DeactivateEndpoint+0x1da>
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	4413      	add	r3, r2
 800a068:	881b      	ldrh	r3, [r3, #0]
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a070:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a074:	837b      	strh	r3, [r7, #26]
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	781b      	ldrb	r3, [r3, #0]
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	441a      	add	r2, r3
 800a080:	8b7b      	ldrh	r3, [r7, #26]
 800a082:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a086:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a08a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a08e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a092:	b29b      	uxth	r3, r3
 800a094:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a096:	687a      	ldr	r2, [r7, #4]
 800a098:	683b      	ldr	r3, [r7, #0]
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	009b      	lsls	r3, r3, #2
 800a09e:	4413      	add	r3, r2
 800a0a0:	881b      	ldrh	r3, [r3, #0]
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a0a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0ac:	833b      	strh	r3, [r7, #24]
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	781b      	ldrb	r3, [r3, #0]
 800a0b4:	009b      	lsls	r3, r3, #2
 800a0b6:	441a      	add	r2, r3
 800a0b8:	8b3b      	ldrh	r3, [r7, #24]
 800a0ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a0be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a0c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a0c6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a0ce:	687a      	ldr	r2, [r7, #4]
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	781b      	ldrb	r3, [r3, #0]
 800a0d4:	009b      	lsls	r3, r3, #2
 800a0d6:	4413      	add	r3, r2
 800a0d8:	881b      	ldrh	r3, [r3, #0]
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a0e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0e4:	82fb      	strh	r3, [r7, #22]
 800a0e6:	687a      	ldr	r2, [r7, #4]
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	441a      	add	r2, r3
 800a0f0:	8afb      	ldrh	r3, [r7, #22]
 800a0f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a0f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a0fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a0fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a102:	b29b      	uxth	r3, r3
 800a104:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	781b      	ldrb	r3, [r3, #0]
 800a10c:	009b      	lsls	r3, r3, #2
 800a10e:	4413      	add	r3, r2
 800a110:	881b      	ldrh	r3, [r3, #0]
 800a112:	b29b      	uxth	r3, r3
 800a114:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a118:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a11c:	82bb      	strh	r3, [r7, #20]
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	781b      	ldrb	r3, [r3, #0]
 800a124:	009b      	lsls	r3, r3, #2
 800a126:	441a      	add	r2, r3
 800a128:	8abb      	ldrh	r3, [r7, #20]
 800a12a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a12e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a132:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a136:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a13a:	b29b      	uxth	r3, r3
 800a13c:	8013      	strh	r3, [r2, #0]
 800a13e:	e0a3      	b.n	800a288 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	781b      	ldrb	r3, [r3, #0]
 800a146:	009b      	lsls	r3, r3, #2
 800a148:	4413      	add	r3, r2
 800a14a:	881b      	ldrh	r3, [r3, #0]
 800a14c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800a14e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a150:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a154:	2b00      	cmp	r3, #0
 800a156:	d01b      	beq.n	800a190 <USB_DeactivateEndpoint+0x2d4>
 800a158:	687a      	ldr	r2, [r7, #4]
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	781b      	ldrb	r3, [r3, #0]
 800a15e:	009b      	lsls	r3, r3, #2
 800a160:	4413      	add	r3, r2
 800a162:	881b      	ldrh	r3, [r3, #0]
 800a164:	b29b      	uxth	r3, r3
 800a166:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a16a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a16e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	441a      	add	r2, r3
 800a17a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a17c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a180:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a184:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a188:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a18c:	b29b      	uxth	r3, r3
 800a18e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	781b      	ldrb	r3, [r3, #0]
 800a196:	009b      	lsls	r3, r3, #2
 800a198:	4413      	add	r3, r2
 800a19a:	881b      	ldrh	r3, [r3, #0]
 800a19c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800a19e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a1a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d01b      	beq.n	800a1e0 <USB_DeactivateEndpoint+0x324>
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	781b      	ldrb	r3, [r3, #0]
 800a1ae:	009b      	lsls	r3, r3, #2
 800a1b0:	4413      	add	r3, r2
 800a1b2:	881b      	ldrh	r3, [r3, #0]
 800a1b4:	b29b      	uxth	r3, r3
 800a1b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a1ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1be:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a1c0:	687a      	ldr	r2, [r7, #4]
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	781b      	ldrb	r3, [r3, #0]
 800a1c6:	009b      	lsls	r3, r3, #2
 800a1c8:	441a      	add	r2, r3
 800a1ca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a1cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a1d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a1d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a1d8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a1e0:	687a      	ldr	r2, [r7, #4]
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	781b      	ldrb	r3, [r3, #0]
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	4413      	add	r3, r2
 800a1ea:	881b      	ldrh	r3, [r3, #0]
 800a1ec:	b29b      	uxth	r3, r3
 800a1ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a1f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1f6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800a1f8:	687a      	ldr	r2, [r7, #4]
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	781b      	ldrb	r3, [r3, #0]
 800a1fe:	009b      	lsls	r3, r3, #2
 800a200:	441a      	add	r2, r3
 800a202:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a204:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a208:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a20c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a210:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a214:	b29b      	uxth	r3, r3
 800a216:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a218:	687a      	ldr	r2, [r7, #4]
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	781b      	ldrb	r3, [r3, #0]
 800a21e:	009b      	lsls	r3, r3, #2
 800a220:	4413      	add	r3, r2
 800a222:	881b      	ldrh	r3, [r3, #0]
 800a224:	b29b      	uxth	r3, r3
 800a226:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a22a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a22e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a230:	687a      	ldr	r2, [r7, #4]
 800a232:	683b      	ldr	r3, [r7, #0]
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	009b      	lsls	r3, r3, #2
 800a238:	441a      	add	r2, r3
 800a23a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a23c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a240:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a244:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a248:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a24c:	b29b      	uxth	r3, r3
 800a24e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	4413      	add	r3, r2
 800a25a:	881b      	ldrh	r3, [r3, #0]
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a262:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a266:	847b      	strh	r3, [r7, #34]	@ 0x22
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	781b      	ldrb	r3, [r3, #0]
 800a26e:	009b      	lsls	r3, r3, #2
 800a270:	441a      	add	r2, r3
 800a272:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a274:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a278:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a27c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a280:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a284:	b29b      	uxth	r3, r3
 800a286:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a288:	2300      	movs	r3, #0
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3734      	adds	r7, #52	@ 0x34
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr

0800a296 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a296:	b580      	push	{r7, lr}
 800a298:	b0c2      	sub	sp, #264	@ 0x108
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a2a4:	6018      	str	r0, [r3, #0]
 800a2a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2ae:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a2b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	785b      	ldrb	r3, [r3, #1]
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	f040 86b7 	bne.w	800b030 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a2c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	699a      	ldr	r2, [r3, #24]
 800a2ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	691b      	ldr	r3, [r3, #16]
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d908      	bls.n	800a2f0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800a2de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	691b      	ldr	r3, [r3, #16]
 800a2ea:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a2ee:	e007      	b.n	800a300 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a2f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a2f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	699b      	ldr	r3, [r3, #24]
 800a2fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a300:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a304:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	7b1b      	ldrb	r3, [r3, #12]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d13a      	bne.n	800a386 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a310:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a314:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	6959      	ldr	r1, [r3, #20]
 800a31c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a320:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	88da      	ldrh	r2, [r3, #6]
 800a328:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a32c:	b29b      	uxth	r3, r3
 800a32e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a332:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a336:	6800      	ldr	r0, [r0, #0]
 800a338:	f001 fc98 	bl	800bc6c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a33c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a340:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	613b      	str	r3, [r7, #16]
 800a348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a34c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a356:	b29b      	uxth	r3, r3
 800a358:	461a      	mov	r2, r3
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	4413      	add	r3, r2
 800a35e:	613b      	str	r3, [r7, #16]
 800a360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a364:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	781b      	ldrb	r3, [r3, #0]
 800a36c:	00da      	lsls	r2, r3, #3
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	4413      	add	r3, r2
 800a372:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a376:	60fb      	str	r3, [r7, #12]
 800a378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a37c:	b29a      	uxth	r2, r3
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	801a      	strh	r2, [r3, #0]
 800a382:	f000 be1f 	b.w	800afc4 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a386:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a38a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	78db      	ldrb	r3, [r3, #3]
 800a392:	2b02      	cmp	r3, #2
 800a394:	f040 8462 	bne.w	800ac5c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a398:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a39c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	6a1a      	ldr	r2, [r3, #32]
 800a3a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	691b      	ldr	r3, [r3, #16]
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	f240 83df 	bls.w	800ab74 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a3b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a3be:	681a      	ldr	r2, [r3, #0]
 800a3c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	781b      	ldrb	r3, [r3, #0]
 800a3cc:	009b      	lsls	r3, r3, #2
 800a3ce:	4413      	add	r3, r2
 800a3d0:	881b      	ldrh	r3, [r3, #0]
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a3d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3dc:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800a3e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a3e8:	681a      	ldr	r2, [r3, #0]
 800a3ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	781b      	ldrb	r3, [r3, #0]
 800a3f6:	009b      	lsls	r3, r3, #2
 800a3f8:	441a      	add	r2, r3
 800a3fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a3fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a402:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a406:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a40a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a40e:	b29b      	uxth	r3, r3
 800a410:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a412:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a416:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	6a1a      	ldr	r2, [r3, #32]
 800a41e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a422:	1ad2      	subs	r2, r2, r3
 800a424:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a428:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a430:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a434:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a438:	681a      	ldr	r2, [r3, #0]
 800a43a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a43e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	781b      	ldrb	r3, [r3, #0]
 800a446:	009b      	lsls	r3, r3, #2
 800a448:	4413      	add	r3, r2
 800a44a:	881b      	ldrh	r3, [r3, #0]
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a452:	2b00      	cmp	r3, #0
 800a454:	f000 81c7 	beq.w	800a7e6 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a458:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a45c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	633b      	str	r3, [r7, #48]	@ 0x30
 800a464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	785b      	ldrb	r3, [r3, #1]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d177      	bne.n	800a564 <USB_EPStartXfer+0x2ce>
 800a474:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a478:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a480:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a484:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a48e:	b29b      	uxth	r3, r3
 800a490:	461a      	mov	r2, r3
 800a492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a494:	4413      	add	r3, r2
 800a496:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a498:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a49c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	00da      	lsls	r2, r3, #3
 800a4a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4a8:	4413      	add	r3, r2
 800a4aa:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a4ae:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4b2:	881b      	ldrh	r3, [r3, #0]
 800a4b4:	b29b      	uxth	r3, r3
 800a4b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a4ba:	b29a      	uxth	r2, r3
 800a4bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4be:	801a      	strh	r2, [r3, #0]
 800a4c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4c4:	2b3e      	cmp	r3, #62	@ 0x3e
 800a4c6:	d921      	bls.n	800a50c <USB_EPStartXfer+0x276>
 800a4c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4cc:	095b      	lsrs	r3, r3, #5
 800a4ce:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a4d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a4d6:	f003 031f 	and.w	r3, r3, #31
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d104      	bne.n	800a4e8 <USB_EPStartXfer+0x252>
 800a4de:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a4e2:	3b01      	subs	r3, #1
 800a4e4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a4e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ea:	881b      	ldrh	r3, [r3, #0]
 800a4ec:	b29a      	uxth	r2, r3
 800a4ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a4f2:	b29b      	uxth	r3, r3
 800a4f4:	029b      	lsls	r3, r3, #10
 800a4f6:	b29b      	uxth	r3, r3
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	b29b      	uxth	r3, r3
 800a4fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a500:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a504:	b29a      	uxth	r2, r3
 800a506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a508:	801a      	strh	r2, [r3, #0]
 800a50a:	e050      	b.n	800a5ae <USB_EPStartXfer+0x318>
 800a50c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a510:	2b00      	cmp	r3, #0
 800a512:	d10a      	bne.n	800a52a <USB_EPStartXfer+0x294>
 800a514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a516:	881b      	ldrh	r3, [r3, #0]
 800a518:	b29b      	uxth	r3, r3
 800a51a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a51e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a522:	b29a      	uxth	r2, r3
 800a524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a526:	801a      	strh	r2, [r3, #0]
 800a528:	e041      	b.n	800a5ae <USB_EPStartXfer+0x318>
 800a52a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a52e:	085b      	lsrs	r3, r3, #1
 800a530:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a538:	f003 0301 	and.w	r3, r3, #1
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d004      	beq.n	800a54a <USB_EPStartXfer+0x2b4>
 800a540:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a544:	3301      	adds	r3, #1
 800a546:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a54c:	881b      	ldrh	r3, [r3, #0]
 800a54e:	b29a      	uxth	r2, r3
 800a550:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a554:	b29b      	uxth	r3, r3
 800a556:	029b      	lsls	r3, r3, #10
 800a558:	b29b      	uxth	r3, r3
 800a55a:	4313      	orrs	r3, r2
 800a55c:	b29a      	uxth	r2, r3
 800a55e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a560:	801a      	strh	r2, [r3, #0]
 800a562:	e024      	b.n	800a5ae <USB_EPStartXfer+0x318>
 800a564:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a568:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	785b      	ldrb	r3, [r3, #1]
 800a570:	2b01      	cmp	r3, #1
 800a572:	d11c      	bne.n	800a5ae <USB_EPStartXfer+0x318>
 800a574:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a578:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a582:	b29b      	uxth	r3, r3
 800a584:	461a      	mov	r2, r3
 800a586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a588:	4413      	add	r3, r2
 800a58a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a58c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a590:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	781b      	ldrb	r3, [r3, #0]
 800a598:	00da      	lsls	r2, r3, #3
 800a59a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a59c:	4413      	add	r3, r2
 800a59e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a5a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a5a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5a8:	b29a      	uxth	r2, r3
 800a5aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a5ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	895b      	ldrh	r3, [r3, #10]
 800a5ba:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a5be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	6959      	ldr	r1, [r3, #20]
 800a5ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a5d4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a5d8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a5dc:	6800      	ldr	r0, [r0, #0]
 800a5de:	f001 fb45 	bl	800bc6c <USB_WritePMA>
            ep->xfer_buff += len;
 800a5e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	695a      	ldr	r2, [r3, #20]
 800a5ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5f2:	441a      	add	r2, r3
 800a5f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a600:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a604:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	6a1a      	ldr	r2, [r3, #32]
 800a60c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a610:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	691b      	ldr	r3, [r3, #16]
 800a618:	429a      	cmp	r2, r3
 800a61a:	d90f      	bls.n	800a63c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800a61c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a620:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	6a1a      	ldr	r2, [r3, #32]
 800a628:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a62c:	1ad2      	subs	r2, r2, r3
 800a62e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a632:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	621a      	str	r2, [r3, #32]
 800a63a:	e00e      	b.n	800a65a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800a63c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a640:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	6a1b      	ldr	r3, [r3, #32]
 800a648:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800a64c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a650:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	2200      	movs	r2, #0
 800a658:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a65a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a65e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	785b      	ldrb	r3, [r3, #1]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d177      	bne.n	800a75a <USB_EPStartXfer+0x4c4>
 800a66a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a66e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	61bb      	str	r3, [r7, #24]
 800a676:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a67a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a684:	b29b      	uxth	r3, r3
 800a686:	461a      	mov	r2, r3
 800a688:	69bb      	ldr	r3, [r7, #24]
 800a68a:	4413      	add	r3, r2
 800a68c:	61bb      	str	r3, [r7, #24]
 800a68e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a692:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	781b      	ldrb	r3, [r3, #0]
 800a69a:	00da      	lsls	r2, r3, #3
 800a69c:	69bb      	ldr	r3, [r7, #24]
 800a69e:	4413      	add	r3, r2
 800a6a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a6a4:	617b      	str	r3, [r7, #20]
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	881b      	ldrh	r3, [r3, #0]
 800a6aa:	b29b      	uxth	r3, r3
 800a6ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a6b0:	b29a      	uxth	r2, r3
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	801a      	strh	r2, [r3, #0]
 800a6b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6ba:	2b3e      	cmp	r3, #62	@ 0x3e
 800a6bc:	d921      	bls.n	800a702 <USB_EPStartXfer+0x46c>
 800a6be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6c2:	095b      	lsrs	r3, r3, #5
 800a6c4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a6c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6cc:	f003 031f 	and.w	r3, r3, #31
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d104      	bne.n	800a6de <USB_EPStartXfer+0x448>
 800a6d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a6d8:	3b01      	subs	r3, #1
 800a6da:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	881b      	ldrh	r3, [r3, #0]
 800a6e2:	b29a      	uxth	r2, r3
 800a6e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a6e8:	b29b      	uxth	r3, r3
 800a6ea:	029b      	lsls	r3, r3, #10
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	b29b      	uxth	r3, r3
 800a6f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6fa:	b29a      	uxth	r2, r3
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	801a      	strh	r2, [r3, #0]
 800a700:	e056      	b.n	800a7b0 <USB_EPStartXfer+0x51a>
 800a702:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a706:	2b00      	cmp	r3, #0
 800a708:	d10a      	bne.n	800a720 <USB_EPStartXfer+0x48a>
 800a70a:	697b      	ldr	r3, [r7, #20]
 800a70c:	881b      	ldrh	r3, [r3, #0]
 800a70e:	b29b      	uxth	r3, r3
 800a710:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a714:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a718:	b29a      	uxth	r2, r3
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	801a      	strh	r2, [r3, #0]
 800a71e:	e047      	b.n	800a7b0 <USB_EPStartXfer+0x51a>
 800a720:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a724:	085b      	lsrs	r3, r3, #1
 800a726:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a72a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a72e:	f003 0301 	and.w	r3, r3, #1
 800a732:	2b00      	cmp	r3, #0
 800a734:	d004      	beq.n	800a740 <USB_EPStartXfer+0x4aa>
 800a736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a73a:	3301      	adds	r3, #1
 800a73c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	881b      	ldrh	r3, [r3, #0]
 800a744:	b29a      	uxth	r2, r3
 800a746:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	029b      	lsls	r3, r3, #10
 800a74e:	b29b      	uxth	r3, r3
 800a750:	4313      	orrs	r3, r2
 800a752:	b29a      	uxth	r2, r3
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	801a      	strh	r2, [r3, #0]
 800a758:	e02a      	b.n	800a7b0 <USB_EPStartXfer+0x51a>
 800a75a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a75e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	785b      	ldrb	r3, [r3, #1]
 800a766:	2b01      	cmp	r3, #1
 800a768:	d122      	bne.n	800a7b0 <USB_EPStartXfer+0x51a>
 800a76a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a76e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	623b      	str	r3, [r7, #32]
 800a776:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a77a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a784:	b29b      	uxth	r3, r3
 800a786:	461a      	mov	r2, r3
 800a788:	6a3b      	ldr	r3, [r7, #32]
 800a78a:	4413      	add	r3, r2
 800a78c:	623b      	str	r3, [r7, #32]
 800a78e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a792:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	781b      	ldrb	r3, [r3, #0]
 800a79a:	00da      	lsls	r2, r3, #3
 800a79c:	6a3b      	ldr	r3, [r7, #32]
 800a79e:	4413      	add	r3, r2
 800a7a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a7a4:	61fb      	str	r3, [r7, #28]
 800a7a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7aa:	b29a      	uxth	r2, r3
 800a7ac:	69fb      	ldr	r3, [r7, #28]
 800a7ae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a7b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	891b      	ldrh	r3, [r3, #8]
 800a7bc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a7c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	6959      	ldr	r1, [r3, #20]
 800a7cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7d0:	b29b      	uxth	r3, r3
 800a7d2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a7d6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a7da:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a7de:	6800      	ldr	r0, [r0, #0]
 800a7e0:	f001 fa44 	bl	800bc6c <USB_WritePMA>
 800a7e4:	e3ee      	b.n	800afc4 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a7e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	785b      	ldrb	r3, [r3, #1]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d177      	bne.n	800a8e6 <USB_EPStartXfer+0x650>
 800a7f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a802:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a806:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a810:	b29b      	uxth	r3, r3
 800a812:	461a      	mov	r2, r3
 800a814:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a816:	4413      	add	r3, r2
 800a818:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a81a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a81e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	781b      	ldrb	r3, [r3, #0]
 800a826:	00da      	lsls	r2, r3, #3
 800a828:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a82a:	4413      	add	r3, r2
 800a82c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a830:	647b      	str	r3, [r7, #68]	@ 0x44
 800a832:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a834:	881b      	ldrh	r3, [r3, #0]
 800a836:	b29b      	uxth	r3, r3
 800a838:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a83c:	b29a      	uxth	r2, r3
 800a83e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a840:	801a      	strh	r2, [r3, #0]
 800a842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a846:	2b3e      	cmp	r3, #62	@ 0x3e
 800a848:	d921      	bls.n	800a88e <USB_EPStartXfer+0x5f8>
 800a84a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a84e:	095b      	lsrs	r3, r3, #5
 800a850:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a854:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a858:	f003 031f 	and.w	r3, r3, #31
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d104      	bne.n	800a86a <USB_EPStartXfer+0x5d4>
 800a860:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a864:	3b01      	subs	r3, #1
 800a866:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a86a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a86c:	881b      	ldrh	r3, [r3, #0]
 800a86e:	b29a      	uxth	r2, r3
 800a870:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a874:	b29b      	uxth	r3, r3
 800a876:	029b      	lsls	r3, r3, #10
 800a878:	b29b      	uxth	r3, r3
 800a87a:	4313      	orrs	r3, r2
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a882:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a886:	b29a      	uxth	r2, r3
 800a888:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a88a:	801a      	strh	r2, [r3, #0]
 800a88c:	e056      	b.n	800a93c <USB_EPStartXfer+0x6a6>
 800a88e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a892:	2b00      	cmp	r3, #0
 800a894:	d10a      	bne.n	800a8ac <USB_EPStartXfer+0x616>
 800a896:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a898:	881b      	ldrh	r3, [r3, #0]
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8a4:	b29a      	uxth	r2, r3
 800a8a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8a8:	801a      	strh	r2, [r3, #0]
 800a8aa:	e047      	b.n	800a93c <USB_EPStartXfer+0x6a6>
 800a8ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8b0:	085b      	lsrs	r3, r3, #1
 800a8b2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a8b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8ba:	f003 0301 	and.w	r3, r3, #1
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d004      	beq.n	800a8cc <USB_EPStartXfer+0x636>
 800a8c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a8cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8ce:	881b      	ldrh	r3, [r3, #0]
 800a8d0:	b29a      	uxth	r2, r3
 800a8d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	029b      	lsls	r3, r3, #10
 800a8da:	b29b      	uxth	r3, r3
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	b29a      	uxth	r2, r3
 800a8e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8e2:	801a      	strh	r2, [r3, #0]
 800a8e4:	e02a      	b.n	800a93c <USB_EPStartXfer+0x6a6>
 800a8e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	785b      	ldrb	r3, [r3, #1]
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d122      	bne.n	800a93c <USB_EPStartXfer+0x6a6>
 800a8f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a8fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	653b      	str	r3, [r7, #80]	@ 0x50
 800a902:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a906:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a910:	b29b      	uxth	r3, r3
 800a912:	461a      	mov	r2, r3
 800a914:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a916:	4413      	add	r3, r2
 800a918:	653b      	str	r3, [r7, #80]	@ 0x50
 800a91a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a91e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	00da      	lsls	r2, r3, #3
 800a928:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a92a:	4413      	add	r3, r2
 800a92c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a930:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a932:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a936:	b29a      	uxth	r2, r3
 800a938:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a93a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a93c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a940:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	891b      	ldrh	r3, [r3, #8]
 800a948:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a94c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a950:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	6959      	ldr	r1, [r3, #20]
 800a958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a95c:	b29b      	uxth	r3, r3
 800a95e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a962:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a966:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a96a:	6800      	ldr	r0, [r0, #0]
 800a96c:	f001 f97e 	bl	800bc6c <USB_WritePMA>
            ep->xfer_buff += len;
 800a970:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a974:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	695a      	ldr	r2, [r3, #20]
 800a97c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a980:	441a      	add	r2, r3
 800a982:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a986:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a98e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a992:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	6a1a      	ldr	r2, [r3, #32]
 800a99a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a99e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	691b      	ldr	r3, [r3, #16]
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d90f      	bls.n	800a9ca <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800a9aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	6a1a      	ldr	r2, [r3, #32]
 800a9b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9ba:	1ad2      	subs	r2, r2, r3
 800a9bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	621a      	str	r2, [r3, #32]
 800a9c8:	e00e      	b.n	800a9e8 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800a9ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	6a1b      	ldr	r3, [r3, #32]
 800a9d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800a9da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a9e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	643b      	str	r3, [r7, #64]	@ 0x40
 800a9f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	785b      	ldrb	r3, [r3, #1]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d177      	bne.n	800aaf4 <USB_EPStartXfer+0x85e>
 800aa04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800aa10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa14:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa1e:	b29b      	uxth	r3, r3
 800aa20:	461a      	mov	r2, r3
 800aa22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa24:	4413      	add	r3, r2
 800aa26:	63bb      	str	r3, [r7, #56]	@ 0x38
 800aa28:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa2c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	781b      	ldrb	r3, [r3, #0]
 800aa34:	00da      	lsls	r2, r3, #3
 800aa36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa38:	4413      	add	r3, r2
 800aa3a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800aa3e:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa42:	881b      	ldrh	r3, [r3, #0]
 800aa44:	b29b      	uxth	r3, r3
 800aa46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa4a:	b29a      	uxth	r2, r3
 800aa4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa4e:	801a      	strh	r2, [r3, #0]
 800aa50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa54:	2b3e      	cmp	r3, #62	@ 0x3e
 800aa56:	d921      	bls.n	800aa9c <USB_EPStartXfer+0x806>
 800aa58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa5c:	095b      	lsrs	r3, r3, #5
 800aa5e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800aa62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa66:	f003 031f 	and.w	r3, r3, #31
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d104      	bne.n	800aa78 <USB_EPStartXfer+0x7e2>
 800aa6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa72:	3b01      	subs	r3, #1
 800aa74:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800aa78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa7a:	881b      	ldrh	r3, [r3, #0]
 800aa7c:	b29a      	uxth	r2, r3
 800aa7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	029b      	lsls	r3, r3, #10
 800aa86:	b29b      	uxth	r3, r3
 800aa88:	4313      	orrs	r3, r2
 800aa8a:	b29b      	uxth	r3, r3
 800aa8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa94:	b29a      	uxth	r2, r3
 800aa96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa98:	801a      	strh	r2, [r3, #0]
 800aa9a:	e050      	b.n	800ab3e <USB_EPStartXfer+0x8a8>
 800aa9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d10a      	bne.n	800aaba <USB_EPStartXfer+0x824>
 800aaa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaa6:	881b      	ldrh	r3, [r3, #0]
 800aaa8:	b29b      	uxth	r3, r3
 800aaaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aaae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aab2:	b29a      	uxth	r2, r3
 800aab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aab6:	801a      	strh	r2, [r3, #0]
 800aab8:	e041      	b.n	800ab3e <USB_EPStartXfer+0x8a8>
 800aaba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aabe:	085b      	lsrs	r3, r3, #1
 800aac0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800aac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aac8:	f003 0301 	and.w	r3, r3, #1
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d004      	beq.n	800aada <USB_EPStartXfer+0x844>
 800aad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aad4:	3301      	adds	r3, #1
 800aad6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800aada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aadc:	881b      	ldrh	r3, [r3, #0]
 800aade:	b29a      	uxth	r2, r3
 800aae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aae4:	b29b      	uxth	r3, r3
 800aae6:	029b      	lsls	r3, r3, #10
 800aae8:	b29b      	uxth	r3, r3
 800aaea:	4313      	orrs	r3, r2
 800aaec:	b29a      	uxth	r2, r3
 800aaee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaf0:	801a      	strh	r2, [r3, #0]
 800aaf2:	e024      	b.n	800ab3e <USB_EPStartXfer+0x8a8>
 800aaf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aaf8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	785b      	ldrb	r3, [r3, #1]
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d11c      	bne.n	800ab3e <USB_EPStartXfer+0x8a8>
 800ab04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab08:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ab12:	b29b      	uxth	r3, r3
 800ab14:	461a      	mov	r2, r3
 800ab16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab18:	4413      	add	r3, r2
 800ab1a:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	781b      	ldrb	r3, [r3, #0]
 800ab28:	00da      	lsls	r2, r3, #3
 800ab2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab2c:	4413      	add	r3, r2
 800ab2e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ab32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab38:	b29a      	uxth	r2, r3
 800ab3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab3c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ab3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	895b      	ldrh	r3, [r3, #10]
 800ab4a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ab4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	6959      	ldr	r1, [r3, #20]
 800ab5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab5e:	b29b      	uxth	r3, r3
 800ab60:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ab64:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ab68:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ab6c:	6800      	ldr	r0, [r0, #0]
 800ab6e:	f001 f87d 	bl	800bc6c <USB_WritePMA>
 800ab72:	e227      	b.n	800afc4 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800ab74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	6a1b      	ldr	r3, [r3, #32]
 800ab80:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800ab84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab8c:	681a      	ldr	r2, [r3, #0]
 800ab8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	781b      	ldrb	r3, [r3, #0]
 800ab9a:	009b      	lsls	r3, r3, #2
 800ab9c:	4413      	add	r3, r2
 800ab9e:	881b      	ldrh	r3, [r3, #0]
 800aba0:	b29b      	uxth	r3, r3
 800aba2:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800aba6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800abaa:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800abae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abb2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800abb6:	681a      	ldr	r2, [r3, #0]
 800abb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	009b      	lsls	r3, r3, #2
 800abc6:	441a      	add	r2, r3
 800abc8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800abcc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800abd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800abd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800abd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abdc:	b29b      	uxth	r3, r3
 800abde:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800abe0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abe4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800abec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abf0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800abfa:	b29b      	uxth	r3, r3
 800abfc:	461a      	mov	r2, r3
 800abfe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac00:	4413      	add	r3, r2
 800ac02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ac04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	00da      	lsls	r2, r3, #3
 800ac12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac14:	4413      	add	r3, r2
 800ac16:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ac1a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ac1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac20:	b29a      	uxth	r2, r3
 800ac22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ac24:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ac26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	891b      	ldrh	r3, [r3, #8]
 800ac32:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ac36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	6959      	ldr	r1, [r3, #20]
 800ac42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac46:	b29b      	uxth	r3, r3
 800ac48:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ac4c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ac50:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ac54:	6800      	ldr	r0, [r0, #0]
 800ac56:	f001 f809 	bl	800bc6c <USB_WritePMA>
 800ac5a:	e1b3      	b.n	800afc4 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ac5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	6a1a      	ldr	r2, [r3, #32]
 800ac68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac6c:	1ad2      	subs	r2, r2, r3
 800ac6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ac7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac82:	681a      	ldr	r2, [r3, #0]
 800ac84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	781b      	ldrb	r3, [r3, #0]
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	4413      	add	r3, r2
 800ac94:	881b      	ldrh	r3, [r3, #0]
 800ac96:	b29b      	uxth	r3, r3
 800ac98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	f000 80c6 	beq.w	800ae2e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800aca2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aca6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	673b      	str	r3, [r7, #112]	@ 0x70
 800acae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	785b      	ldrb	r3, [r3, #1]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d177      	bne.n	800adae <USB_EPStartXfer+0xb18>
 800acbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800acca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800acd8:	b29b      	uxth	r3, r3
 800acda:	461a      	mov	r2, r3
 800acdc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800acde:	4413      	add	r3, r2
 800ace0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ace2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ace6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	00da      	lsls	r2, r3, #3
 800acf0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800acf2:	4413      	add	r3, r2
 800acf4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800acf8:	667b      	str	r3, [r7, #100]	@ 0x64
 800acfa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800acfc:	881b      	ldrh	r3, [r3, #0]
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad04:	b29a      	uxth	r2, r3
 800ad06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad08:	801a      	strh	r2, [r3, #0]
 800ad0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad0e:	2b3e      	cmp	r3, #62	@ 0x3e
 800ad10:	d921      	bls.n	800ad56 <USB_EPStartXfer+0xac0>
 800ad12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad16:	095b      	lsrs	r3, r3, #5
 800ad18:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ad1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad20:	f003 031f 	and.w	r3, r3, #31
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d104      	bne.n	800ad32 <USB_EPStartXfer+0xa9c>
 800ad28:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ad2c:	3b01      	subs	r3, #1
 800ad2e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ad32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad34:	881b      	ldrh	r3, [r3, #0]
 800ad36:	b29a      	uxth	r2, r3
 800ad38:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ad3c:	b29b      	uxth	r3, r3
 800ad3e:	029b      	lsls	r3, r3, #10
 800ad40:	b29b      	uxth	r3, r3
 800ad42:	4313      	orrs	r3, r2
 800ad44:	b29b      	uxth	r3, r3
 800ad46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad4e:	b29a      	uxth	r2, r3
 800ad50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad52:	801a      	strh	r2, [r3, #0]
 800ad54:	e050      	b.n	800adf8 <USB_EPStartXfer+0xb62>
 800ad56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d10a      	bne.n	800ad74 <USB_EPStartXfer+0xade>
 800ad5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad60:	881b      	ldrh	r3, [r3, #0]
 800ad62:	b29b      	uxth	r3, r3
 800ad64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad6c:	b29a      	uxth	r2, r3
 800ad6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad70:	801a      	strh	r2, [r3, #0]
 800ad72:	e041      	b.n	800adf8 <USB_EPStartXfer+0xb62>
 800ad74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad78:	085b      	lsrs	r3, r3, #1
 800ad7a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ad7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad82:	f003 0301 	and.w	r3, r3, #1
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d004      	beq.n	800ad94 <USB_EPStartXfer+0xafe>
 800ad8a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ad8e:	3301      	adds	r3, #1
 800ad90:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ad94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad96:	881b      	ldrh	r3, [r3, #0]
 800ad98:	b29a      	uxth	r2, r3
 800ad9a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ad9e:	b29b      	uxth	r3, r3
 800ada0:	029b      	lsls	r3, r3, #10
 800ada2:	b29b      	uxth	r3, r3
 800ada4:	4313      	orrs	r3, r2
 800ada6:	b29a      	uxth	r2, r3
 800ada8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800adaa:	801a      	strh	r2, [r3, #0]
 800adac:	e024      	b.n	800adf8 <USB_EPStartXfer+0xb62>
 800adae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	785b      	ldrb	r3, [r3, #1]
 800adba:	2b01      	cmp	r3, #1
 800adbc:	d11c      	bne.n	800adf8 <USB_EPStartXfer+0xb62>
 800adbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800adcc:	b29b      	uxth	r3, r3
 800adce:	461a      	mov	r2, r3
 800add0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800add2:	4413      	add	r3, r2
 800add4:	673b      	str	r3, [r7, #112]	@ 0x70
 800add6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	781b      	ldrb	r3, [r3, #0]
 800ade2:	00da      	lsls	r2, r3, #3
 800ade4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ade6:	4413      	add	r3, r2
 800ade8:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800adec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800adee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adf2:	b29a      	uxth	r2, r3
 800adf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800adf6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800adf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800adfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	895b      	ldrh	r3, [r3, #10]
 800ae04:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ae08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	6959      	ldr	r1, [r3, #20]
 800ae14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae18:	b29b      	uxth	r3, r3
 800ae1a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ae1e:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ae22:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ae26:	6800      	ldr	r0, [r0, #0]
 800ae28:	f000 ff20 	bl	800bc6c <USB_WritePMA>
 800ae2c:	e0ca      	b.n	800afc4 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ae2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	785b      	ldrb	r3, [r3, #1]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d177      	bne.n	800af2e <USB_EPStartXfer+0xc98>
 800ae3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ae4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae58:	b29b      	uxth	r3, r3
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ae5e:	4413      	add	r3, r2
 800ae60:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ae62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae66:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	781b      	ldrb	r3, [r3, #0]
 800ae6e:	00da      	lsls	r2, r3, #3
 800ae70:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ae72:	4413      	add	r3, r2
 800ae74:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ae78:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ae7a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ae7c:	881b      	ldrh	r3, [r3, #0]
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae84:	b29a      	uxth	r2, r3
 800ae86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ae88:	801a      	strh	r2, [r3, #0]
 800ae8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae8e:	2b3e      	cmp	r3, #62	@ 0x3e
 800ae90:	d921      	bls.n	800aed6 <USB_EPStartXfer+0xc40>
 800ae92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae96:	095b      	lsrs	r3, r3, #5
 800ae98:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800ae9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aea0:	f003 031f 	and.w	r3, r3, #31
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d104      	bne.n	800aeb2 <USB_EPStartXfer+0xc1c>
 800aea8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800aeac:	3b01      	subs	r3, #1
 800aeae:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800aeb2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aeb4:	881b      	ldrh	r3, [r3, #0]
 800aeb6:	b29a      	uxth	r2, r3
 800aeb8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800aebc:	b29b      	uxth	r3, r3
 800aebe:	029b      	lsls	r3, r3, #10
 800aec0:	b29b      	uxth	r3, r3
 800aec2:	4313      	orrs	r3, r2
 800aec4:	b29b      	uxth	r3, r3
 800aec6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aeca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aece:	b29a      	uxth	r2, r3
 800aed0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aed2:	801a      	strh	r2, [r3, #0]
 800aed4:	e05c      	b.n	800af90 <USB_EPStartXfer+0xcfa>
 800aed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d10a      	bne.n	800aef4 <USB_EPStartXfer+0xc5e>
 800aede:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aee0:	881b      	ldrh	r3, [r3, #0]
 800aee2:	b29b      	uxth	r3, r3
 800aee4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aee8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aeec:	b29a      	uxth	r2, r3
 800aeee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aef0:	801a      	strh	r2, [r3, #0]
 800aef2:	e04d      	b.n	800af90 <USB_EPStartXfer+0xcfa>
 800aef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aef8:	085b      	lsrs	r3, r3, #1
 800aefa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800aefe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af02:	f003 0301 	and.w	r3, r3, #1
 800af06:	2b00      	cmp	r3, #0
 800af08:	d004      	beq.n	800af14 <USB_EPStartXfer+0xc7e>
 800af0a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800af0e:	3301      	adds	r3, #1
 800af10:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800af14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af16:	881b      	ldrh	r3, [r3, #0]
 800af18:	b29a      	uxth	r2, r3
 800af1a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800af1e:	b29b      	uxth	r3, r3
 800af20:	029b      	lsls	r3, r3, #10
 800af22:	b29b      	uxth	r3, r3
 800af24:	4313      	orrs	r3, r2
 800af26:	b29a      	uxth	r2, r3
 800af28:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af2a:	801a      	strh	r2, [r3, #0]
 800af2c:	e030      	b.n	800af90 <USB_EPStartXfer+0xcfa>
 800af2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	785b      	ldrb	r3, [r3, #1]
 800af3a:	2b01      	cmp	r3, #1
 800af3c:	d128      	bne.n	800af90 <USB_EPStartXfer+0xcfa>
 800af3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800af4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800af5a:	b29b      	uxth	r3, r3
 800af5c:	461a      	mov	r2, r3
 800af5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800af62:	4413      	add	r3, r2
 800af64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800af68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	781b      	ldrb	r3, [r3, #0]
 800af74:	00da      	lsls	r2, r3, #3
 800af76:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800af7a:	4413      	add	r3, r2
 800af7c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800af80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800af84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af88:	b29a      	uxth	r2, r3
 800af8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800af8e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800af90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800af94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	891b      	ldrh	r3, [r3, #8]
 800af9c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800afa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afa4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	6959      	ldr	r1, [r3, #20]
 800afac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800afb0:	b29b      	uxth	r3, r3
 800afb2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800afb6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800afba:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800afbe:	6800      	ldr	r0, [r0, #0]
 800afc0:	f000 fe54 	bl	800bc6c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800afc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800afcc:	681a      	ldr	r2, [r3, #0]
 800afce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	781b      	ldrb	r3, [r3, #0]
 800afda:	009b      	lsls	r3, r3, #2
 800afdc:	4413      	add	r3, r2
 800afde:	881b      	ldrh	r3, [r3, #0]
 800afe0:	b29b      	uxth	r3, r3
 800afe2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800afe6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800afea:	817b      	strh	r3, [r7, #10]
 800afec:	897b      	ldrh	r3, [r7, #10]
 800afee:	f083 0310 	eor.w	r3, r3, #16
 800aff2:	817b      	strh	r3, [r7, #10]
 800aff4:	897b      	ldrh	r3, [r7, #10]
 800aff6:	f083 0320 	eor.w	r3, r3, #32
 800affa:	817b      	strh	r3, [r7, #10]
 800affc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b000:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b004:	681a      	ldr	r2, [r3, #0]
 800b006:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b00a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	781b      	ldrb	r3, [r3, #0]
 800b012:	009b      	lsls	r3, r3, #2
 800b014:	441a      	add	r2, r3
 800b016:	897b      	ldrh	r3, [r7, #10]
 800b018:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b01c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b020:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b024:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b028:	b29b      	uxth	r3, r3
 800b02a:	8013      	strh	r3, [r2, #0]
 800b02c:	f000 bcde 	b.w	800b9ec <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b030:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b034:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	7b1b      	ldrb	r3, [r3, #12]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	f040 80bb 	bne.w	800b1b8 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b042:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b046:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	699a      	ldr	r2, [r3, #24]
 800b04e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b052:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	691b      	ldr	r3, [r3, #16]
 800b05a:	429a      	cmp	r2, r3
 800b05c:	d917      	bls.n	800b08e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800b05e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b062:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	691b      	ldr	r3, [r3, #16]
 800b06a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800b06e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b072:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	699a      	ldr	r2, [r3, #24]
 800b07a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b07e:	1ad2      	subs	r2, r2, r3
 800b080:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b084:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	619a      	str	r2, [r3, #24]
 800b08c:	e00e      	b.n	800b0ac <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800b08e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b092:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	699b      	ldr	r3, [r3, #24]
 800b09a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800b09e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b0ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b0ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b0c8:	b29b      	uxth	r3, r3
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b0d0:	4413      	add	r3, r2
 800b0d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b0d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	00da      	lsls	r2, r3, #3
 800b0e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b0e8:	4413      	add	r3, r2
 800b0ea:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b0ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b0f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b0f6:	881b      	ldrh	r3, [r3, #0]
 800b0f8:	b29b      	uxth	r3, r3
 800b0fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b0fe:	b29a      	uxth	r2, r3
 800b100:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b104:	801a      	strh	r2, [r3, #0]
 800b106:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b10a:	2b3e      	cmp	r3, #62	@ 0x3e
 800b10c:	d924      	bls.n	800b158 <USB_EPStartXfer+0xec2>
 800b10e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b112:	095b      	lsrs	r3, r3, #5
 800b114:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b118:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b11c:	f003 031f 	and.w	r3, r3, #31
 800b120:	2b00      	cmp	r3, #0
 800b122:	d104      	bne.n	800b12e <USB_EPStartXfer+0xe98>
 800b124:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b128:	3b01      	subs	r3, #1
 800b12a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b12e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b132:	881b      	ldrh	r3, [r3, #0]
 800b134:	b29a      	uxth	r2, r3
 800b136:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b13a:	b29b      	uxth	r3, r3
 800b13c:	029b      	lsls	r3, r3, #10
 800b13e:	b29b      	uxth	r3, r3
 800b140:	4313      	orrs	r3, r2
 800b142:	b29b      	uxth	r3, r3
 800b144:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b148:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b14c:	b29a      	uxth	r2, r3
 800b14e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b152:	801a      	strh	r2, [r3, #0]
 800b154:	f000 bc10 	b.w	800b978 <USB_EPStartXfer+0x16e2>
 800b158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d10c      	bne.n	800b17a <USB_EPStartXfer+0xee4>
 800b160:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b164:	881b      	ldrh	r3, [r3, #0]
 800b166:	b29b      	uxth	r3, r3
 800b168:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b16c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b170:	b29a      	uxth	r2, r3
 800b172:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b176:	801a      	strh	r2, [r3, #0]
 800b178:	e3fe      	b.n	800b978 <USB_EPStartXfer+0x16e2>
 800b17a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b17e:	085b      	lsrs	r3, r3, #1
 800b180:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b184:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b188:	f003 0301 	and.w	r3, r3, #1
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d004      	beq.n	800b19a <USB_EPStartXfer+0xf04>
 800b190:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b194:	3301      	adds	r3, #1
 800b196:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b19a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b19e:	881b      	ldrh	r3, [r3, #0]
 800b1a0:	b29a      	uxth	r2, r3
 800b1a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b1a6:	b29b      	uxth	r3, r3
 800b1a8:	029b      	lsls	r3, r3, #10
 800b1aa:	b29b      	uxth	r3, r3
 800b1ac:	4313      	orrs	r3, r2
 800b1ae:	b29a      	uxth	r2, r3
 800b1b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b1b4:	801a      	strh	r2, [r3, #0]
 800b1b6:	e3df      	b.n	800b978 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b1b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	78db      	ldrb	r3, [r3, #3]
 800b1c4:	2b02      	cmp	r3, #2
 800b1c6:	f040 8218 	bne.w	800b5fa <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b1ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	785b      	ldrb	r3, [r3, #1]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	f040 809d 	bne.w	800b316 <USB_EPStartXfer+0x1080>
 800b1dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b1ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b1ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b1f8:	b29b      	uxth	r3, r3
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b200:	4413      	add	r3, r2
 800b202:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b206:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b20a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	781b      	ldrb	r3, [r3, #0]
 800b212:	00da      	lsls	r2, r3, #3
 800b214:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b218:	4413      	add	r3, r2
 800b21a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b21e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b222:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b226:	881b      	ldrh	r3, [r3, #0]
 800b228:	b29b      	uxth	r3, r3
 800b22a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b22e:	b29a      	uxth	r2, r3
 800b230:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b234:	801a      	strh	r2, [r3, #0]
 800b236:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b23a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	691b      	ldr	r3, [r3, #16]
 800b242:	2b3e      	cmp	r3, #62	@ 0x3e
 800b244:	d92b      	bls.n	800b29e <USB_EPStartXfer+0x1008>
 800b246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b24a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	691b      	ldr	r3, [r3, #16]
 800b252:	095b      	lsrs	r3, r3, #5
 800b254:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b258:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b25c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	691b      	ldr	r3, [r3, #16]
 800b264:	f003 031f 	and.w	r3, r3, #31
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d104      	bne.n	800b276 <USB_EPStartXfer+0xfe0>
 800b26c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b270:	3b01      	subs	r3, #1
 800b272:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b276:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b27a:	881b      	ldrh	r3, [r3, #0]
 800b27c:	b29a      	uxth	r2, r3
 800b27e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b282:	b29b      	uxth	r3, r3
 800b284:	029b      	lsls	r3, r3, #10
 800b286:	b29b      	uxth	r3, r3
 800b288:	4313      	orrs	r3, r2
 800b28a:	b29b      	uxth	r3, r3
 800b28c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b290:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b294:	b29a      	uxth	r2, r3
 800b296:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b29a:	801a      	strh	r2, [r3, #0]
 800b29c:	e070      	b.n	800b380 <USB_EPStartXfer+0x10ea>
 800b29e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	691b      	ldr	r3, [r3, #16]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d10c      	bne.n	800b2c8 <USB_EPStartXfer+0x1032>
 800b2ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b2b2:	881b      	ldrh	r3, [r3, #0]
 800b2b4:	b29b      	uxth	r3, r3
 800b2b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2be:	b29a      	uxth	r2, r3
 800b2c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b2c4:	801a      	strh	r2, [r3, #0]
 800b2c6:	e05b      	b.n	800b380 <USB_EPStartXfer+0x10ea>
 800b2c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	691b      	ldr	r3, [r3, #16]
 800b2d4:	085b      	lsrs	r3, r3, #1
 800b2d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b2da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	691b      	ldr	r3, [r3, #16]
 800b2e6:	f003 0301 	and.w	r3, r3, #1
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d004      	beq.n	800b2f8 <USB_EPStartXfer+0x1062>
 800b2ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b2f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b2fc:	881b      	ldrh	r3, [r3, #0]
 800b2fe:	b29a      	uxth	r2, r3
 800b300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b304:	b29b      	uxth	r3, r3
 800b306:	029b      	lsls	r3, r3, #10
 800b308:	b29b      	uxth	r3, r3
 800b30a:	4313      	orrs	r3, r2
 800b30c:	b29a      	uxth	r2, r3
 800b30e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b312:	801a      	strh	r2, [r3, #0]
 800b314:	e034      	b.n	800b380 <USB_EPStartXfer+0x10ea>
 800b316:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b31a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	785b      	ldrb	r3, [r3, #1]
 800b322:	2b01      	cmp	r3, #1
 800b324:	d12c      	bne.n	800b380 <USB_EPStartXfer+0x10ea>
 800b326:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b32a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b334:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b338:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b342:	b29b      	uxth	r3, r3
 800b344:	461a      	mov	r2, r3
 800b346:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b34a:	4413      	add	r3, r2
 800b34c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b354:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	781b      	ldrb	r3, [r3, #0]
 800b35c:	00da      	lsls	r2, r3, #3
 800b35e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b362:	4413      	add	r3, r2
 800b364:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b368:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b36c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b370:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	691b      	ldr	r3, [r3, #16]
 800b378:	b29a      	uxth	r2, r3
 800b37a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b37e:	801a      	strh	r2, [r3, #0]
 800b380:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b384:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b38e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b392:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	785b      	ldrb	r3, [r3, #1]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	f040 809d 	bne.w	800b4da <USB_EPStartXfer+0x1244>
 800b3a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b3ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b3bc:	b29b      	uxth	r3, r3
 800b3be:	461a      	mov	r2, r3
 800b3c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b3c4:	4413      	add	r3, r2
 800b3c6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b3ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	781b      	ldrb	r3, [r3, #0]
 800b3d6:	00da      	lsls	r2, r3, #3
 800b3d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b3dc:	4413      	add	r3, r2
 800b3de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b3e2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b3e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b3ea:	881b      	ldrh	r3, [r3, #0]
 800b3ec:	b29b      	uxth	r3, r3
 800b3ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b3f2:	b29a      	uxth	r2, r3
 800b3f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b3f8:	801a      	strh	r2, [r3, #0]
 800b3fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	691b      	ldr	r3, [r3, #16]
 800b406:	2b3e      	cmp	r3, #62	@ 0x3e
 800b408:	d92b      	bls.n	800b462 <USB_EPStartXfer+0x11cc>
 800b40a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b40e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	691b      	ldr	r3, [r3, #16]
 800b416:	095b      	lsrs	r3, r3, #5
 800b418:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b41c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b420:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	691b      	ldr	r3, [r3, #16]
 800b428:	f003 031f 	and.w	r3, r3, #31
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d104      	bne.n	800b43a <USB_EPStartXfer+0x11a4>
 800b430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b434:	3b01      	subs	r3, #1
 800b436:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b43a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b43e:	881b      	ldrh	r3, [r3, #0]
 800b440:	b29a      	uxth	r2, r3
 800b442:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b446:	b29b      	uxth	r3, r3
 800b448:	029b      	lsls	r3, r3, #10
 800b44a:	b29b      	uxth	r3, r3
 800b44c:	4313      	orrs	r3, r2
 800b44e:	b29b      	uxth	r3, r3
 800b450:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b454:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b458:	b29a      	uxth	r2, r3
 800b45a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b45e:	801a      	strh	r2, [r3, #0]
 800b460:	e069      	b.n	800b536 <USB_EPStartXfer+0x12a0>
 800b462:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b466:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	691b      	ldr	r3, [r3, #16]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d10c      	bne.n	800b48c <USB_EPStartXfer+0x11f6>
 800b472:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b476:	881b      	ldrh	r3, [r3, #0]
 800b478:	b29b      	uxth	r3, r3
 800b47a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b47e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b482:	b29a      	uxth	r2, r3
 800b484:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b488:	801a      	strh	r2, [r3, #0]
 800b48a:	e054      	b.n	800b536 <USB_EPStartXfer+0x12a0>
 800b48c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b490:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	691b      	ldr	r3, [r3, #16]
 800b498:	085b      	lsrs	r3, r3, #1
 800b49a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b49e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	691b      	ldr	r3, [r3, #16]
 800b4aa:	f003 0301 	and.w	r3, r3, #1
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d004      	beq.n	800b4bc <USB_EPStartXfer+0x1226>
 800b4b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b4bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b4c0:	881b      	ldrh	r3, [r3, #0]
 800b4c2:	b29a      	uxth	r2, r3
 800b4c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b4c8:	b29b      	uxth	r3, r3
 800b4ca:	029b      	lsls	r3, r3, #10
 800b4cc:	b29b      	uxth	r3, r3
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	b29a      	uxth	r2, r3
 800b4d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b4d6:	801a      	strh	r2, [r3, #0]
 800b4d8:	e02d      	b.n	800b536 <USB_EPStartXfer+0x12a0>
 800b4da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	785b      	ldrb	r3, [r3, #1]
 800b4e6:	2b01      	cmp	r3, #1
 800b4e8:	d125      	bne.n	800b536 <USB_EPStartXfer+0x12a0>
 800b4ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b4f8:	b29b      	uxth	r3, r3
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b500:	4413      	add	r3, r2
 800b502:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b506:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b50a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	781b      	ldrb	r3, [r3, #0]
 800b512:	00da      	lsls	r2, r3, #3
 800b514:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b518:	4413      	add	r3, r2
 800b51a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b51e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b522:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b526:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	691b      	ldr	r3, [r3, #16]
 800b52e:	b29a      	uxth	r2, r3
 800b530:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b534:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b536:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b53a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	69db      	ldr	r3, [r3, #28]
 800b542:	2b00      	cmp	r3, #0
 800b544:	f000 8218 	beq.w	800b978 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b548:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b54c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b550:	681a      	ldr	r2, [r3, #0]
 800b552:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b556:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	781b      	ldrb	r3, [r3, #0]
 800b55e:	009b      	lsls	r3, r3, #2
 800b560:	4413      	add	r3, r2
 800b562:	881b      	ldrh	r3, [r3, #0]
 800b564:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b568:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b56c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b570:	2b00      	cmp	r3, #0
 800b572:	d005      	beq.n	800b580 <USB_EPStartXfer+0x12ea>
 800b574:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b578:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d10d      	bne.n	800b59c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b580:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b584:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b588:	2b00      	cmp	r3, #0
 800b58a:	f040 81f5 	bne.w	800b978 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b58e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b592:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b596:	2b00      	cmp	r3, #0
 800b598:	f040 81ee 	bne.w	800b978 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b59c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b5a4:	681a      	ldr	r2, [r3, #0]
 800b5a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	781b      	ldrb	r3, [r3, #0]
 800b5b2:	009b      	lsls	r3, r3, #2
 800b5b4:	4413      	add	r3, r2
 800b5b6:	881b      	ldrh	r3, [r3, #0]
 800b5b8:	b29b      	uxth	r3, r3
 800b5ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b5be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b5c2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800b5c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b5ce:	681a      	ldr	r2, [r3, #0]
 800b5d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	781b      	ldrb	r3, [r3, #0]
 800b5dc:	009b      	lsls	r3, r3, #2
 800b5de:	441a      	add	r2, r3
 800b5e0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b5e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b5e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b5ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b5f0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b5f4:	b29b      	uxth	r3, r3
 800b5f6:	8013      	strh	r3, [r2, #0]
 800b5f8:	e1be      	b.n	800b978 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b5fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	78db      	ldrb	r3, [r3, #3]
 800b606:	2b01      	cmp	r3, #1
 800b608:	f040 81b4 	bne.w	800b974 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b60c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b610:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	699a      	ldr	r2, [r3, #24]
 800b618:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b61c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	691b      	ldr	r3, [r3, #16]
 800b624:	429a      	cmp	r2, r3
 800b626:	d917      	bls.n	800b658 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800b628:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b62c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	691b      	ldr	r3, [r3, #16]
 800b634:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800b638:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b63c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	699a      	ldr	r2, [r3, #24]
 800b644:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b648:	1ad2      	subs	r2, r2, r3
 800b64a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b64e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	619a      	str	r2, [r3, #24]
 800b656:	e00e      	b.n	800b676 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800b658:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b65c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	699b      	ldr	r3, [r3, #24]
 800b664:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800b668:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b66c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	2200      	movs	r2, #0
 800b674:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b676:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b67a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	785b      	ldrb	r3, [r3, #1]
 800b682:	2b00      	cmp	r3, #0
 800b684:	f040 8085 	bne.w	800b792 <USB_EPStartXfer+0x14fc>
 800b688:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b68c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b696:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b69a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b6a4:	b29b      	uxth	r3, r3
 800b6a6:	461a      	mov	r2, r3
 800b6a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b6ac:	4413      	add	r3, r2
 800b6ae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b6b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	781b      	ldrb	r3, [r3, #0]
 800b6be:	00da      	lsls	r2, r3, #3
 800b6c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b6c4:	4413      	add	r3, r2
 800b6c6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b6ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b6ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b6d2:	881b      	ldrh	r3, [r3, #0]
 800b6d4:	b29b      	uxth	r3, r3
 800b6d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b6da:	b29a      	uxth	r2, r3
 800b6dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b6e0:	801a      	strh	r2, [r3, #0]
 800b6e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6e6:	2b3e      	cmp	r3, #62	@ 0x3e
 800b6e8:	d923      	bls.n	800b732 <USB_EPStartXfer+0x149c>
 800b6ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6ee:	095b      	lsrs	r3, r3, #5
 800b6f0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b6f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6f8:	f003 031f 	and.w	r3, r3, #31
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d104      	bne.n	800b70a <USB_EPStartXfer+0x1474>
 800b700:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b704:	3b01      	subs	r3, #1
 800b706:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b70a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b70e:	881b      	ldrh	r3, [r3, #0]
 800b710:	b29a      	uxth	r2, r3
 800b712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b716:	b29b      	uxth	r3, r3
 800b718:	029b      	lsls	r3, r3, #10
 800b71a:	b29b      	uxth	r3, r3
 800b71c:	4313      	orrs	r3, r2
 800b71e:	b29b      	uxth	r3, r3
 800b720:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b724:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b728:	b29a      	uxth	r2, r3
 800b72a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b72e:	801a      	strh	r2, [r3, #0]
 800b730:	e060      	b.n	800b7f4 <USB_EPStartXfer+0x155e>
 800b732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b736:	2b00      	cmp	r3, #0
 800b738:	d10c      	bne.n	800b754 <USB_EPStartXfer+0x14be>
 800b73a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b73e:	881b      	ldrh	r3, [r3, #0]
 800b740:	b29b      	uxth	r3, r3
 800b742:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b746:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b74a:	b29a      	uxth	r2, r3
 800b74c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b750:	801a      	strh	r2, [r3, #0]
 800b752:	e04f      	b.n	800b7f4 <USB_EPStartXfer+0x155e>
 800b754:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b758:	085b      	lsrs	r3, r3, #1
 800b75a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b75e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b762:	f003 0301 	and.w	r3, r3, #1
 800b766:	2b00      	cmp	r3, #0
 800b768:	d004      	beq.n	800b774 <USB_EPStartXfer+0x14de>
 800b76a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b76e:	3301      	adds	r3, #1
 800b770:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b774:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b778:	881b      	ldrh	r3, [r3, #0]
 800b77a:	b29a      	uxth	r2, r3
 800b77c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b780:	b29b      	uxth	r3, r3
 800b782:	029b      	lsls	r3, r3, #10
 800b784:	b29b      	uxth	r3, r3
 800b786:	4313      	orrs	r3, r2
 800b788:	b29a      	uxth	r2, r3
 800b78a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b78e:	801a      	strh	r2, [r3, #0]
 800b790:	e030      	b.n	800b7f4 <USB_EPStartXfer+0x155e>
 800b792:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b796:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	785b      	ldrb	r3, [r3, #1]
 800b79e:	2b01      	cmp	r3, #1
 800b7a0:	d128      	bne.n	800b7f4 <USB_EPStartXfer+0x155e>
 800b7a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b7b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b7be:	b29b      	uxth	r3, r3
 800b7c0:	461a      	mov	r2, r3
 800b7c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b7c6:	4413      	add	r3, r2
 800b7c8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b7cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	00da      	lsls	r2, r3, #3
 800b7da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b7de:	4413      	add	r3, r2
 800b7e0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b7e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b7e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7ec:	b29a      	uxth	r2, r3
 800b7ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800b7f2:	801a      	strh	r2, [r3, #0]
 800b7f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b7f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b802:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b806:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	785b      	ldrb	r3, [r3, #1]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	f040 8085 	bne.w	800b91e <USB_EPStartXfer+0x1688>
 800b814:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b818:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b822:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b826:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b830:	b29b      	uxth	r3, r3
 800b832:	461a      	mov	r2, r3
 800b834:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b838:	4413      	add	r3, r2
 800b83a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b83e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b842:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	781b      	ldrb	r3, [r3, #0]
 800b84a:	00da      	lsls	r2, r3, #3
 800b84c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b850:	4413      	add	r3, r2
 800b852:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b856:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b85a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b85e:	881b      	ldrh	r3, [r3, #0]
 800b860:	b29b      	uxth	r3, r3
 800b862:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b866:	b29a      	uxth	r2, r3
 800b868:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b86c:	801a      	strh	r2, [r3, #0]
 800b86e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b872:	2b3e      	cmp	r3, #62	@ 0x3e
 800b874:	d923      	bls.n	800b8be <USB_EPStartXfer+0x1628>
 800b876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b87a:	095b      	lsrs	r3, r3, #5
 800b87c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b884:	f003 031f 	and.w	r3, r3, #31
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d104      	bne.n	800b896 <USB_EPStartXfer+0x1600>
 800b88c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b890:	3b01      	subs	r3, #1
 800b892:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b896:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b89a:	881b      	ldrh	r3, [r3, #0]
 800b89c:	b29a      	uxth	r2, r3
 800b89e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b8a2:	b29b      	uxth	r3, r3
 800b8a4:	029b      	lsls	r3, r3, #10
 800b8a6:	b29b      	uxth	r3, r3
 800b8a8:	4313      	orrs	r3, r2
 800b8aa:	b29b      	uxth	r3, r3
 800b8ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8b4:	b29a      	uxth	r2, r3
 800b8b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b8ba:	801a      	strh	r2, [r3, #0]
 800b8bc:	e05c      	b.n	800b978 <USB_EPStartXfer+0x16e2>
 800b8be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d10c      	bne.n	800b8e0 <USB_EPStartXfer+0x164a>
 800b8c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b8ca:	881b      	ldrh	r3, [r3, #0]
 800b8cc:	b29b      	uxth	r3, r3
 800b8ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8d6:	b29a      	uxth	r2, r3
 800b8d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b8dc:	801a      	strh	r2, [r3, #0]
 800b8de:	e04b      	b.n	800b978 <USB_EPStartXfer+0x16e2>
 800b8e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8e4:	085b      	lsrs	r3, r3, #1
 800b8e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b8ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8ee:	f003 0301 	and.w	r3, r3, #1
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d004      	beq.n	800b900 <USB_EPStartXfer+0x166a>
 800b8f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b8fa:	3301      	adds	r3, #1
 800b8fc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b900:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b904:	881b      	ldrh	r3, [r3, #0]
 800b906:	b29a      	uxth	r2, r3
 800b908:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b90c:	b29b      	uxth	r3, r3
 800b90e:	029b      	lsls	r3, r3, #10
 800b910:	b29b      	uxth	r3, r3
 800b912:	4313      	orrs	r3, r2
 800b914:	b29a      	uxth	r2, r3
 800b916:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b91a:	801a      	strh	r2, [r3, #0]
 800b91c:	e02c      	b.n	800b978 <USB_EPStartXfer+0x16e2>
 800b91e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b922:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	785b      	ldrb	r3, [r3, #1]
 800b92a:	2b01      	cmp	r3, #1
 800b92c:	d124      	bne.n	800b978 <USB_EPStartXfer+0x16e2>
 800b92e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b932:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b93c:	b29b      	uxth	r3, r3
 800b93e:	461a      	mov	r2, r3
 800b940:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b944:	4413      	add	r3, r2
 800b946:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b94a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b94e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	781b      	ldrb	r3, [r3, #0]
 800b956:	00da      	lsls	r2, r3, #3
 800b958:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b95c:	4413      	add	r3, r2
 800b95e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b962:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b966:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b96a:	b29a      	uxth	r2, r3
 800b96c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b970:	801a      	strh	r2, [r3, #0]
 800b972:	e001      	b.n	800b978 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800b974:	2301      	movs	r3, #1
 800b976:	e03a      	b.n	800b9ee <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b978:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b97c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b980:	681a      	ldr	r2, [r3, #0]
 800b982:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b986:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	781b      	ldrb	r3, [r3, #0]
 800b98e:	009b      	lsls	r3, r3, #2
 800b990:	4413      	add	r3, r2
 800b992:	881b      	ldrh	r3, [r3, #0]
 800b994:	b29b      	uxth	r3, r3
 800b996:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b99a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b99e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800b9a2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b9a6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800b9aa:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800b9ae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b9b2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800b9b6:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800b9ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b9c2:	681a      	ldr	r2, [r3, #0]
 800b9c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	009b      	lsls	r3, r3, #2
 800b9d2:	441a      	add	r2, r3
 800b9d4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800b9d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b9dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b9e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b9e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9e8:	b29b      	uxth	r3, r3
 800b9ea:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b9ec:	2300      	movs	r3, #0
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}

0800b9f8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	b085      	sub	sp, #20
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	785b      	ldrb	r3, [r3, #1]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d020      	beq.n	800ba4c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ba0a:	687a      	ldr	r2, [r7, #4]
 800ba0c:	683b      	ldr	r3, [r7, #0]
 800ba0e:	781b      	ldrb	r3, [r3, #0]
 800ba10:	009b      	lsls	r3, r3, #2
 800ba12:	4413      	add	r3, r2
 800ba14:	881b      	ldrh	r3, [r3, #0]
 800ba16:	b29b      	uxth	r3, r3
 800ba18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ba1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba20:	81bb      	strh	r3, [r7, #12]
 800ba22:	89bb      	ldrh	r3, [r7, #12]
 800ba24:	f083 0310 	eor.w	r3, r3, #16
 800ba28:	81bb      	strh	r3, [r7, #12]
 800ba2a:	687a      	ldr	r2, [r7, #4]
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	781b      	ldrb	r3, [r3, #0]
 800ba30:	009b      	lsls	r3, r3, #2
 800ba32:	441a      	add	r2, r3
 800ba34:	89bb      	ldrh	r3, [r7, #12]
 800ba36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ba3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ba3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ba42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba46:	b29b      	uxth	r3, r3
 800ba48:	8013      	strh	r3, [r2, #0]
 800ba4a:	e01f      	b.n	800ba8c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800ba4c:	687a      	ldr	r2, [r7, #4]
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	781b      	ldrb	r3, [r3, #0]
 800ba52:	009b      	lsls	r3, r3, #2
 800ba54:	4413      	add	r3, r2
 800ba56:	881b      	ldrh	r3, [r3, #0]
 800ba58:	b29b      	uxth	r3, r3
 800ba5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ba5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba62:	81fb      	strh	r3, [r7, #14]
 800ba64:	89fb      	ldrh	r3, [r7, #14]
 800ba66:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ba6a:	81fb      	strh	r3, [r7, #14]
 800ba6c:	687a      	ldr	r2, [r7, #4]
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	781b      	ldrb	r3, [r3, #0]
 800ba72:	009b      	lsls	r3, r3, #2
 800ba74:	441a      	add	r2, r3
 800ba76:	89fb      	ldrh	r3, [r7, #14]
 800ba78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ba7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ba80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ba84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba88:	b29b      	uxth	r3, r3
 800ba8a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ba8c:	2300      	movs	r3, #0
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3714      	adds	r7, #20
 800ba92:	46bd      	mov	sp, r7
 800ba94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba98:	4770      	bx	lr

0800ba9a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ba9a:	b480      	push	{r7}
 800ba9c:	b087      	sub	sp, #28
 800ba9e:	af00      	add	r7, sp, #0
 800baa0:	6078      	str	r0, [r7, #4]
 800baa2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	7b1b      	ldrb	r3, [r3, #12]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	f040 809d 	bne.w	800bbe8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	785b      	ldrb	r3, [r3, #1]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d04c      	beq.n	800bb50 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bab6:	687a      	ldr	r2, [r7, #4]
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	781b      	ldrb	r3, [r3, #0]
 800babc:	009b      	lsls	r3, r3, #2
 800babe:	4413      	add	r3, r2
 800bac0:	881b      	ldrh	r3, [r3, #0]
 800bac2:	823b      	strh	r3, [r7, #16]
 800bac4:	8a3b      	ldrh	r3, [r7, #16]
 800bac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d01b      	beq.n	800bb06 <USB_EPClearStall+0x6c>
 800bace:	687a      	ldr	r2, [r7, #4]
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	781b      	ldrb	r3, [r3, #0]
 800bad4:	009b      	lsls	r3, r3, #2
 800bad6:	4413      	add	r3, r2
 800bad8:	881b      	ldrh	r3, [r3, #0]
 800bada:	b29b      	uxth	r3, r3
 800badc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bae0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bae4:	81fb      	strh	r3, [r7, #14]
 800bae6:	687a      	ldr	r2, [r7, #4]
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	781b      	ldrb	r3, [r3, #0]
 800baec:	009b      	lsls	r3, r3, #2
 800baee:	441a      	add	r2, r3
 800baf0:	89fb      	ldrh	r3, [r7, #14]
 800baf2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800baf6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bafa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bafe:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bb02:	b29b      	uxth	r3, r3
 800bb04:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bb06:	683b      	ldr	r3, [r7, #0]
 800bb08:	78db      	ldrb	r3, [r3, #3]
 800bb0a:	2b01      	cmp	r3, #1
 800bb0c:	d06c      	beq.n	800bbe8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bb0e:	687a      	ldr	r2, [r7, #4]
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	781b      	ldrb	r3, [r3, #0]
 800bb14:	009b      	lsls	r3, r3, #2
 800bb16:	4413      	add	r3, r2
 800bb18:	881b      	ldrh	r3, [r3, #0]
 800bb1a:	b29b      	uxth	r3, r3
 800bb1c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bb20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bb24:	81bb      	strh	r3, [r7, #12]
 800bb26:	89bb      	ldrh	r3, [r7, #12]
 800bb28:	f083 0320 	eor.w	r3, r3, #32
 800bb2c:	81bb      	strh	r3, [r7, #12]
 800bb2e:	687a      	ldr	r2, [r7, #4]
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	781b      	ldrb	r3, [r3, #0]
 800bb34:	009b      	lsls	r3, r3, #2
 800bb36:	441a      	add	r2, r3
 800bb38:	89bb      	ldrh	r3, [r7, #12]
 800bb3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bb3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bb42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bb46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb4a:	b29b      	uxth	r3, r3
 800bb4c:	8013      	strh	r3, [r2, #0]
 800bb4e:	e04b      	b.n	800bbe8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bb50:	687a      	ldr	r2, [r7, #4]
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	781b      	ldrb	r3, [r3, #0]
 800bb56:	009b      	lsls	r3, r3, #2
 800bb58:	4413      	add	r3, r2
 800bb5a:	881b      	ldrh	r3, [r3, #0]
 800bb5c:	82fb      	strh	r3, [r7, #22]
 800bb5e:	8afb      	ldrh	r3, [r7, #22]
 800bb60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d01b      	beq.n	800bba0 <USB_EPClearStall+0x106>
 800bb68:	687a      	ldr	r2, [r7, #4]
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	781b      	ldrb	r3, [r3, #0]
 800bb6e:	009b      	lsls	r3, r3, #2
 800bb70:	4413      	add	r3, r2
 800bb72:	881b      	ldrh	r3, [r3, #0]
 800bb74:	b29b      	uxth	r3, r3
 800bb76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bb7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb7e:	82bb      	strh	r3, [r7, #20]
 800bb80:	687a      	ldr	r2, [r7, #4]
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	781b      	ldrb	r3, [r3, #0]
 800bb86:	009b      	lsls	r3, r3, #2
 800bb88:	441a      	add	r2, r3
 800bb8a:	8abb      	ldrh	r3, [r7, #20]
 800bb8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bb90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bb94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bb98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb9c:	b29b      	uxth	r3, r3
 800bb9e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bba0:	687a      	ldr	r2, [r7, #4]
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	781b      	ldrb	r3, [r3, #0]
 800bba6:	009b      	lsls	r3, r3, #2
 800bba8:	4413      	add	r3, r2
 800bbaa:	881b      	ldrh	r3, [r3, #0]
 800bbac:	b29b      	uxth	r3, r3
 800bbae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bbb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bbb6:	827b      	strh	r3, [r7, #18]
 800bbb8:	8a7b      	ldrh	r3, [r7, #18]
 800bbba:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800bbbe:	827b      	strh	r3, [r7, #18]
 800bbc0:	8a7b      	ldrh	r3, [r7, #18]
 800bbc2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800bbc6:	827b      	strh	r3, [r7, #18]
 800bbc8:	687a      	ldr	r2, [r7, #4]
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	781b      	ldrb	r3, [r3, #0]
 800bbce:	009b      	lsls	r3, r3, #2
 800bbd0:	441a      	add	r2, r3
 800bbd2:	8a7b      	ldrh	r3, [r7, #18]
 800bbd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bbd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bbdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bbe0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbe4:	b29b      	uxth	r3, r3
 800bbe6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800bbe8:	2300      	movs	r3, #0
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	371c      	adds	r7, #28
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf4:	4770      	bx	lr

0800bbf6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800bbf6:	b480      	push	{r7}
 800bbf8:	b083      	sub	sp, #12
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	6078      	str	r0, [r7, #4]
 800bbfe:	460b      	mov	r3, r1
 800bc00:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800bc02:	78fb      	ldrb	r3, [r7, #3]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d103      	bne.n	800bc10 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2280      	movs	r2, #128	@ 0x80
 800bc0c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800bc10:	2300      	movs	r3, #0
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	370c      	adds	r7, #12
 800bc16:	46bd      	mov	sp, r7
 800bc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1c:	4770      	bx	lr

0800bc1e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800bc1e:	b480      	push	{r7}
 800bc20:	b083      	sub	sp, #12
 800bc22:	af00      	add	r7, sp, #0
 800bc24:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bc2c:	b29b      	uxth	r3, r3
 800bc2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc36:	b29a      	uxth	r2, r3
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800bc3e:	2300      	movs	r3, #0
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	370c      	adds	r7, #12
 800bc44:	46bd      	mov	sp, r7
 800bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4a:	4770      	bx	lr

0800bc4c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	b085      	sub	sp, #20
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800bc5a:	b29b      	uxth	r3, r3
 800bc5c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3714      	adds	r7, #20
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr

0800bc6c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b08b      	sub	sp, #44	@ 0x2c
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	60f8      	str	r0, [r7, #12]
 800bc74:	60b9      	str	r1, [r7, #8]
 800bc76:	4611      	mov	r1, r2
 800bc78:	461a      	mov	r2, r3
 800bc7a:	460b      	mov	r3, r1
 800bc7c:	80fb      	strh	r3, [r7, #6]
 800bc7e:	4613      	mov	r3, r2
 800bc80:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bc82:	88bb      	ldrh	r3, [r7, #4]
 800bc84:	3301      	adds	r3, #1
 800bc86:	085b      	lsrs	r3, r3, #1
 800bc88:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bc8e:	68bb      	ldr	r3, [r7, #8]
 800bc90:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bc92:	88fa      	ldrh	r2, [r7, #6]
 800bc94:	697b      	ldr	r3, [r7, #20]
 800bc96:	4413      	add	r3, r2
 800bc98:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bc9c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800bc9e:	69bb      	ldr	r3, [r7, #24]
 800bca0:	627b      	str	r3, [r7, #36]	@ 0x24
 800bca2:	e01b      	b.n	800bcdc <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800bca4:	69fb      	ldr	r3, [r7, #28]
 800bca6:	781b      	ldrb	r3, [r3, #0]
 800bca8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800bcaa:	69fb      	ldr	r3, [r7, #28]
 800bcac:	3301      	adds	r3, #1
 800bcae:	781b      	ldrb	r3, [r3, #0]
 800bcb0:	021b      	lsls	r3, r3, #8
 800bcb2:	b21a      	sxth	r2, r3
 800bcb4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bcb8:	4313      	orrs	r3, r2
 800bcba:	b21b      	sxth	r3, r3
 800bcbc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800bcbe:	6a3b      	ldr	r3, [r7, #32]
 800bcc0:	8a7a      	ldrh	r2, [r7, #18]
 800bcc2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800bcc4:	6a3b      	ldr	r3, [r7, #32]
 800bcc6:	3302      	adds	r3, #2
 800bcc8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800bcca:	69fb      	ldr	r3, [r7, #28]
 800bccc:	3301      	adds	r3, #1
 800bcce:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800bcd0:	69fb      	ldr	r3, [r7, #28]
 800bcd2:	3301      	adds	r3, #1
 800bcd4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800bcd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcd8:	3b01      	subs	r3, #1
 800bcda:	627b      	str	r3, [r7, #36]	@ 0x24
 800bcdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d1e0      	bne.n	800bca4 <USB_WritePMA+0x38>
  }
}
 800bce2:	bf00      	nop
 800bce4:	bf00      	nop
 800bce6:	372c      	adds	r7, #44	@ 0x2c
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr

0800bcf0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b08b      	sub	sp, #44	@ 0x2c
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	60f8      	str	r0, [r7, #12]
 800bcf8:	60b9      	str	r1, [r7, #8]
 800bcfa:	4611      	mov	r1, r2
 800bcfc:	461a      	mov	r2, r3
 800bcfe:	460b      	mov	r3, r1
 800bd00:	80fb      	strh	r3, [r7, #6]
 800bd02:	4613      	mov	r3, r2
 800bd04:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800bd06:	88bb      	ldrh	r3, [r7, #4]
 800bd08:	085b      	lsrs	r3, r3, #1
 800bd0a:	b29b      	uxth	r3, r3
 800bd0c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bd16:	88fa      	ldrh	r2, [r7, #6]
 800bd18:	697b      	ldr	r3, [r7, #20]
 800bd1a:	4413      	add	r3, r2
 800bd1c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bd20:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800bd22:	69bb      	ldr	r3, [r7, #24]
 800bd24:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd26:	e018      	b.n	800bd5a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800bd28:	6a3b      	ldr	r3, [r7, #32]
 800bd2a:	881b      	ldrh	r3, [r3, #0]
 800bd2c:	b29b      	uxth	r3, r3
 800bd2e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800bd30:	6a3b      	ldr	r3, [r7, #32]
 800bd32:	3302      	adds	r3, #2
 800bd34:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	b2da      	uxtb	r2, r3
 800bd3a:	69fb      	ldr	r3, [r7, #28]
 800bd3c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bd3e:	69fb      	ldr	r3, [r7, #28]
 800bd40:	3301      	adds	r3, #1
 800bd42:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800bd44:	693b      	ldr	r3, [r7, #16]
 800bd46:	0a1b      	lsrs	r3, r3, #8
 800bd48:	b2da      	uxtb	r2, r3
 800bd4a:	69fb      	ldr	r3, [r7, #28]
 800bd4c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bd4e:	69fb      	ldr	r3, [r7, #28]
 800bd50:	3301      	adds	r3, #1
 800bd52:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800bd54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd56:	3b01      	subs	r3, #1
 800bd58:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d1e3      	bne.n	800bd28 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800bd60:	88bb      	ldrh	r3, [r7, #4]
 800bd62:	f003 0301 	and.w	r3, r3, #1
 800bd66:	b29b      	uxth	r3, r3
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d007      	beq.n	800bd7c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800bd6c:	6a3b      	ldr	r3, [r7, #32]
 800bd6e:	881b      	ldrh	r3, [r3, #0]
 800bd70:	b29b      	uxth	r3, r3
 800bd72:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	b2da      	uxtb	r2, r3
 800bd78:	69fb      	ldr	r3, [r7, #28]
 800bd7a:	701a      	strb	r2, [r3, #0]
  }
}
 800bd7c:	bf00      	nop
 800bd7e:	372c      	adds	r7, #44	@ 0x2c
 800bd80:	46bd      	mov	sp, r7
 800bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd86:	4770      	bx	lr

0800bd88 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b084      	sub	sp, #16
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	460b      	mov	r3, r1
 800bd92:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bd94:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800bd98:	f002 fc74 	bl	800e684 <USBD_static_malloc>
 800bd9c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d109      	bne.n	800bdb8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	32b0      	adds	r2, #176	@ 0xb0
 800bdae:	2100      	movs	r1, #0
 800bdb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bdb4:	2302      	movs	r3, #2
 800bdb6:	e0d4      	b.n	800bf62 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800bdb8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800bdbc:	2100      	movs	r1, #0
 800bdbe:	68f8      	ldr	r0, [r7, #12]
 800bdc0:	f003 fa21 	bl	800f206 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	32b0      	adds	r2, #176	@ 0xb0
 800bdce:	68f9      	ldr	r1, [r7, #12]
 800bdd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	32b0      	adds	r2, #176	@ 0xb0
 800bdde:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	7c1b      	ldrb	r3, [r3, #16]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d138      	bne.n	800be62 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bdf0:	4b5e      	ldr	r3, [pc, #376]	@ (800bf6c <USBD_CDC_Init+0x1e4>)
 800bdf2:	7819      	ldrb	r1, [r3, #0]
 800bdf4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bdf8:	2202      	movs	r2, #2
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f002 fae9 	bl	800e3d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800be00:	4b5a      	ldr	r3, [pc, #360]	@ (800bf6c <USBD_CDC_Init+0x1e4>)
 800be02:	781b      	ldrb	r3, [r3, #0]
 800be04:	f003 020f 	and.w	r2, r3, #15
 800be08:	6879      	ldr	r1, [r7, #4]
 800be0a:	4613      	mov	r3, r2
 800be0c:	009b      	lsls	r3, r3, #2
 800be0e:	4413      	add	r3, r2
 800be10:	009b      	lsls	r3, r3, #2
 800be12:	440b      	add	r3, r1
 800be14:	3324      	adds	r3, #36	@ 0x24
 800be16:	2201      	movs	r2, #1
 800be18:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800be1a:	4b55      	ldr	r3, [pc, #340]	@ (800bf70 <USBD_CDC_Init+0x1e8>)
 800be1c:	7819      	ldrb	r1, [r3, #0]
 800be1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800be22:	2202      	movs	r2, #2
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f002 fad4 	bl	800e3d2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800be2a:	4b51      	ldr	r3, [pc, #324]	@ (800bf70 <USBD_CDC_Init+0x1e8>)
 800be2c:	781b      	ldrb	r3, [r3, #0]
 800be2e:	f003 020f 	and.w	r2, r3, #15
 800be32:	6879      	ldr	r1, [r7, #4]
 800be34:	4613      	mov	r3, r2
 800be36:	009b      	lsls	r3, r3, #2
 800be38:	4413      	add	r3, r2
 800be3a:	009b      	lsls	r3, r3, #2
 800be3c:	440b      	add	r3, r1
 800be3e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800be42:	2201      	movs	r2, #1
 800be44:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800be46:	4b4b      	ldr	r3, [pc, #300]	@ (800bf74 <USBD_CDC_Init+0x1ec>)
 800be48:	781b      	ldrb	r3, [r3, #0]
 800be4a:	f003 020f 	and.w	r2, r3, #15
 800be4e:	6879      	ldr	r1, [r7, #4]
 800be50:	4613      	mov	r3, r2
 800be52:	009b      	lsls	r3, r3, #2
 800be54:	4413      	add	r3, r2
 800be56:	009b      	lsls	r3, r3, #2
 800be58:	440b      	add	r3, r1
 800be5a:	3326      	adds	r3, #38	@ 0x26
 800be5c:	2210      	movs	r2, #16
 800be5e:	801a      	strh	r2, [r3, #0]
 800be60:	e035      	b.n	800bece <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800be62:	4b42      	ldr	r3, [pc, #264]	@ (800bf6c <USBD_CDC_Init+0x1e4>)
 800be64:	7819      	ldrb	r1, [r3, #0]
 800be66:	2340      	movs	r3, #64	@ 0x40
 800be68:	2202      	movs	r2, #2
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f002 fab1 	bl	800e3d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800be70:	4b3e      	ldr	r3, [pc, #248]	@ (800bf6c <USBD_CDC_Init+0x1e4>)
 800be72:	781b      	ldrb	r3, [r3, #0]
 800be74:	f003 020f 	and.w	r2, r3, #15
 800be78:	6879      	ldr	r1, [r7, #4]
 800be7a:	4613      	mov	r3, r2
 800be7c:	009b      	lsls	r3, r3, #2
 800be7e:	4413      	add	r3, r2
 800be80:	009b      	lsls	r3, r3, #2
 800be82:	440b      	add	r3, r1
 800be84:	3324      	adds	r3, #36	@ 0x24
 800be86:	2201      	movs	r2, #1
 800be88:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800be8a:	4b39      	ldr	r3, [pc, #228]	@ (800bf70 <USBD_CDC_Init+0x1e8>)
 800be8c:	7819      	ldrb	r1, [r3, #0]
 800be8e:	2340      	movs	r3, #64	@ 0x40
 800be90:	2202      	movs	r2, #2
 800be92:	6878      	ldr	r0, [r7, #4]
 800be94:	f002 fa9d 	bl	800e3d2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800be98:	4b35      	ldr	r3, [pc, #212]	@ (800bf70 <USBD_CDC_Init+0x1e8>)
 800be9a:	781b      	ldrb	r3, [r3, #0]
 800be9c:	f003 020f 	and.w	r2, r3, #15
 800bea0:	6879      	ldr	r1, [r7, #4]
 800bea2:	4613      	mov	r3, r2
 800bea4:	009b      	lsls	r3, r3, #2
 800bea6:	4413      	add	r3, r2
 800bea8:	009b      	lsls	r3, r3, #2
 800beaa:	440b      	add	r3, r1
 800beac:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800beb0:	2201      	movs	r2, #1
 800beb2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800beb4:	4b2f      	ldr	r3, [pc, #188]	@ (800bf74 <USBD_CDC_Init+0x1ec>)
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	f003 020f 	and.w	r2, r3, #15
 800bebc:	6879      	ldr	r1, [r7, #4]
 800bebe:	4613      	mov	r3, r2
 800bec0:	009b      	lsls	r3, r3, #2
 800bec2:	4413      	add	r3, r2
 800bec4:	009b      	lsls	r3, r3, #2
 800bec6:	440b      	add	r3, r1
 800bec8:	3326      	adds	r3, #38	@ 0x26
 800beca:	2210      	movs	r2, #16
 800becc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bece:	4b29      	ldr	r3, [pc, #164]	@ (800bf74 <USBD_CDC_Init+0x1ec>)
 800bed0:	7819      	ldrb	r1, [r3, #0]
 800bed2:	2308      	movs	r3, #8
 800bed4:	2203      	movs	r2, #3
 800bed6:	6878      	ldr	r0, [r7, #4]
 800bed8:	f002 fa7b 	bl	800e3d2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bedc:	4b25      	ldr	r3, [pc, #148]	@ (800bf74 <USBD_CDC_Init+0x1ec>)
 800bede:	781b      	ldrb	r3, [r3, #0]
 800bee0:	f003 020f 	and.w	r2, r3, #15
 800bee4:	6879      	ldr	r1, [r7, #4]
 800bee6:	4613      	mov	r3, r2
 800bee8:	009b      	lsls	r3, r3, #2
 800beea:	4413      	add	r3, r2
 800beec:	009b      	lsls	r3, r3, #2
 800beee:	440b      	add	r3, r1
 800bef0:	3324      	adds	r3, #36	@ 0x24
 800bef2:	2201      	movs	r2, #1
 800bef4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	2200      	movs	r2, #0
 800befa:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bf04:	687a      	ldr	r2, [r7, #4]
 800bf06:	33b0      	adds	r3, #176	@ 0xb0
 800bf08:	009b      	lsls	r3, r3, #2
 800bf0a:	4413      	add	r3, r2
 800bf0c:	685b      	ldr	r3, [r3, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	2200      	movs	r2, #0
 800bf16:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d101      	bne.n	800bf30 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800bf2c:	2302      	movs	r3, #2
 800bf2e:	e018      	b.n	800bf62 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	7c1b      	ldrb	r3, [r3, #16]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d10a      	bne.n	800bf4e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bf38:	4b0d      	ldr	r3, [pc, #52]	@ (800bf70 <USBD_CDC_Init+0x1e8>)
 800bf3a:	7819      	ldrb	r1, [r3, #0]
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bf42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f002 fb32 	bl	800e5b0 <USBD_LL_PrepareReceive>
 800bf4c:	e008      	b.n	800bf60 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bf4e:	4b08      	ldr	r3, [pc, #32]	@ (800bf70 <USBD_CDC_Init+0x1e8>)
 800bf50:	7819      	ldrb	r1, [r3, #0]
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bf58:	2340      	movs	r3, #64	@ 0x40
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f002 fb28 	bl	800e5b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bf60:	2300      	movs	r3, #0
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	3710      	adds	r7, #16
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}
 800bf6a:	bf00      	nop
 800bf6c:	200000b7 	.word	0x200000b7
 800bf70:	200000b8 	.word	0x200000b8
 800bf74:	200000b9 	.word	0x200000b9

0800bf78 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b082      	sub	sp, #8
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	460b      	mov	r3, r1
 800bf82:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800bf84:	4b3a      	ldr	r3, [pc, #232]	@ (800c070 <USBD_CDC_DeInit+0xf8>)
 800bf86:	781b      	ldrb	r3, [r3, #0]
 800bf88:	4619      	mov	r1, r3
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f002 fa47 	bl	800e41e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800bf90:	4b37      	ldr	r3, [pc, #220]	@ (800c070 <USBD_CDC_DeInit+0xf8>)
 800bf92:	781b      	ldrb	r3, [r3, #0]
 800bf94:	f003 020f 	and.w	r2, r3, #15
 800bf98:	6879      	ldr	r1, [r7, #4]
 800bf9a:	4613      	mov	r3, r2
 800bf9c:	009b      	lsls	r3, r3, #2
 800bf9e:	4413      	add	r3, r2
 800bfa0:	009b      	lsls	r3, r3, #2
 800bfa2:	440b      	add	r3, r1
 800bfa4:	3324      	adds	r3, #36	@ 0x24
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800bfaa:	4b32      	ldr	r3, [pc, #200]	@ (800c074 <USBD_CDC_DeInit+0xfc>)
 800bfac:	781b      	ldrb	r3, [r3, #0]
 800bfae:	4619      	mov	r1, r3
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f002 fa34 	bl	800e41e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800bfb6:	4b2f      	ldr	r3, [pc, #188]	@ (800c074 <USBD_CDC_DeInit+0xfc>)
 800bfb8:	781b      	ldrb	r3, [r3, #0]
 800bfba:	f003 020f 	and.w	r2, r3, #15
 800bfbe:	6879      	ldr	r1, [r7, #4]
 800bfc0:	4613      	mov	r3, r2
 800bfc2:	009b      	lsls	r3, r3, #2
 800bfc4:	4413      	add	r3, r2
 800bfc6:	009b      	lsls	r3, r3, #2
 800bfc8:	440b      	add	r3, r1
 800bfca:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bfce:	2200      	movs	r2, #0
 800bfd0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800bfd2:	4b29      	ldr	r3, [pc, #164]	@ (800c078 <USBD_CDC_DeInit+0x100>)
 800bfd4:	781b      	ldrb	r3, [r3, #0]
 800bfd6:	4619      	mov	r1, r3
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f002 fa20 	bl	800e41e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800bfde:	4b26      	ldr	r3, [pc, #152]	@ (800c078 <USBD_CDC_DeInit+0x100>)
 800bfe0:	781b      	ldrb	r3, [r3, #0]
 800bfe2:	f003 020f 	and.w	r2, r3, #15
 800bfe6:	6879      	ldr	r1, [r7, #4]
 800bfe8:	4613      	mov	r3, r2
 800bfea:	009b      	lsls	r3, r3, #2
 800bfec:	4413      	add	r3, r2
 800bfee:	009b      	lsls	r3, r3, #2
 800bff0:	440b      	add	r3, r1
 800bff2:	3324      	adds	r3, #36	@ 0x24
 800bff4:	2200      	movs	r2, #0
 800bff6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800bff8:	4b1f      	ldr	r3, [pc, #124]	@ (800c078 <USBD_CDC_DeInit+0x100>)
 800bffa:	781b      	ldrb	r3, [r3, #0]
 800bffc:	f003 020f 	and.w	r2, r3, #15
 800c000:	6879      	ldr	r1, [r7, #4]
 800c002:	4613      	mov	r3, r2
 800c004:	009b      	lsls	r3, r3, #2
 800c006:	4413      	add	r3, r2
 800c008:	009b      	lsls	r3, r3, #2
 800c00a:	440b      	add	r3, r1
 800c00c:	3326      	adds	r3, #38	@ 0x26
 800c00e:	2200      	movs	r2, #0
 800c010:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	32b0      	adds	r2, #176	@ 0xb0
 800c01c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d01f      	beq.n	800c064 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c02a:	687a      	ldr	r2, [r7, #4]
 800c02c:	33b0      	adds	r3, #176	@ 0xb0
 800c02e:	009b      	lsls	r3, r3, #2
 800c030:	4413      	add	r3, r2
 800c032:	685b      	ldr	r3, [r3, #4]
 800c034:	685b      	ldr	r3, [r3, #4]
 800c036:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	32b0      	adds	r2, #176	@ 0xb0
 800c042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c046:	4618      	mov	r0, r3
 800c048:	f002 fb2a 	bl	800e6a0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	32b0      	adds	r2, #176	@ 0xb0
 800c056:	2100      	movs	r1, #0
 800c058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2200      	movs	r2, #0
 800c060:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c064:	2300      	movs	r3, #0
}
 800c066:	4618      	mov	r0, r3
 800c068:	3708      	adds	r7, #8
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
 800c06e:	bf00      	nop
 800c070:	200000b7 	.word	0x200000b7
 800c074:	200000b8 	.word	0x200000b8
 800c078:	200000b9 	.word	0x200000b9

0800c07c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b086      	sub	sp, #24
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
 800c084:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	32b0      	adds	r2, #176	@ 0xb0
 800c090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c094:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c096:	2300      	movs	r3, #0
 800c098:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c09a:	2300      	movs	r3, #0
 800c09c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c0a2:	693b      	ldr	r3, [r7, #16]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d101      	bne.n	800c0ac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c0a8:	2303      	movs	r3, #3
 800c0aa:	e0bf      	b.n	800c22c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	781b      	ldrb	r3, [r3, #0]
 800c0b0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d050      	beq.n	800c15a <USBD_CDC_Setup+0xde>
 800c0b8:	2b20      	cmp	r3, #32
 800c0ba:	f040 80af 	bne.w	800c21c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	88db      	ldrh	r3, [r3, #6]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d03a      	beq.n	800c13c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	781b      	ldrb	r3, [r3, #0]
 800c0ca:	b25b      	sxtb	r3, r3
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	da1b      	bge.n	800c108 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c0d6:	687a      	ldr	r2, [r7, #4]
 800c0d8:	33b0      	adds	r3, #176	@ 0xb0
 800c0da:	009b      	lsls	r3, r3, #2
 800c0dc:	4413      	add	r3, r2
 800c0de:	685b      	ldr	r3, [r3, #4]
 800c0e0:	689b      	ldr	r3, [r3, #8]
 800c0e2:	683a      	ldr	r2, [r7, #0]
 800c0e4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c0e6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c0e8:	683a      	ldr	r2, [r7, #0]
 800c0ea:	88d2      	ldrh	r2, [r2, #6]
 800c0ec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	88db      	ldrh	r3, [r3, #6]
 800c0f2:	2b07      	cmp	r3, #7
 800c0f4:	bf28      	it	cs
 800c0f6:	2307      	movcs	r3, #7
 800c0f8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	89fa      	ldrh	r2, [r7, #14]
 800c0fe:	4619      	mov	r1, r3
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f001 fd47 	bl	800db94 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c106:	e090      	b.n	800c22a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	785a      	ldrb	r2, [r3, #1]
 800c10c:	693b      	ldr	r3, [r7, #16]
 800c10e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	88db      	ldrh	r3, [r3, #6]
 800c116:	2b3f      	cmp	r3, #63	@ 0x3f
 800c118:	d803      	bhi.n	800c122 <USBD_CDC_Setup+0xa6>
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	88db      	ldrh	r3, [r3, #6]
 800c11e:	b2da      	uxtb	r2, r3
 800c120:	e000      	b.n	800c124 <USBD_CDC_Setup+0xa8>
 800c122:	2240      	movs	r2, #64	@ 0x40
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c12a:	6939      	ldr	r1, [r7, #16]
 800c12c:	693b      	ldr	r3, [r7, #16]
 800c12e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800c132:	461a      	mov	r2, r3
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	f001 fd59 	bl	800dbec <USBD_CtlPrepareRx>
      break;
 800c13a:	e076      	b.n	800c22a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c142:	687a      	ldr	r2, [r7, #4]
 800c144:	33b0      	adds	r3, #176	@ 0xb0
 800c146:	009b      	lsls	r3, r3, #2
 800c148:	4413      	add	r3, r2
 800c14a:	685b      	ldr	r3, [r3, #4]
 800c14c:	689b      	ldr	r3, [r3, #8]
 800c14e:	683a      	ldr	r2, [r7, #0]
 800c150:	7850      	ldrb	r0, [r2, #1]
 800c152:	2200      	movs	r2, #0
 800c154:	6839      	ldr	r1, [r7, #0]
 800c156:	4798      	blx	r3
      break;
 800c158:	e067      	b.n	800c22a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	785b      	ldrb	r3, [r3, #1]
 800c15e:	2b0b      	cmp	r3, #11
 800c160:	d851      	bhi.n	800c206 <USBD_CDC_Setup+0x18a>
 800c162:	a201      	add	r2, pc, #4	@ (adr r2, 800c168 <USBD_CDC_Setup+0xec>)
 800c164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c168:	0800c199 	.word	0x0800c199
 800c16c:	0800c215 	.word	0x0800c215
 800c170:	0800c207 	.word	0x0800c207
 800c174:	0800c207 	.word	0x0800c207
 800c178:	0800c207 	.word	0x0800c207
 800c17c:	0800c207 	.word	0x0800c207
 800c180:	0800c207 	.word	0x0800c207
 800c184:	0800c207 	.word	0x0800c207
 800c188:	0800c207 	.word	0x0800c207
 800c18c:	0800c207 	.word	0x0800c207
 800c190:	0800c1c3 	.word	0x0800c1c3
 800c194:	0800c1ed 	.word	0x0800c1ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c19e:	b2db      	uxtb	r3, r3
 800c1a0:	2b03      	cmp	r3, #3
 800c1a2:	d107      	bne.n	800c1b4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c1a4:	f107 030a 	add.w	r3, r7, #10
 800c1a8:	2202      	movs	r2, #2
 800c1aa:	4619      	mov	r1, r3
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f001 fcf1 	bl	800db94 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c1b2:	e032      	b.n	800c21a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c1b4:	6839      	ldr	r1, [r7, #0]
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f001 fc6f 	bl	800da9a <USBD_CtlError>
            ret = USBD_FAIL;
 800c1bc:	2303      	movs	r3, #3
 800c1be:	75fb      	strb	r3, [r7, #23]
          break;
 800c1c0:	e02b      	b.n	800c21a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1c8:	b2db      	uxtb	r3, r3
 800c1ca:	2b03      	cmp	r3, #3
 800c1cc:	d107      	bne.n	800c1de <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c1ce:	f107 030d 	add.w	r3, r7, #13
 800c1d2:	2201      	movs	r2, #1
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f001 fcdc 	bl	800db94 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c1dc:	e01d      	b.n	800c21a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c1de:	6839      	ldr	r1, [r7, #0]
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f001 fc5a 	bl	800da9a <USBD_CtlError>
            ret = USBD_FAIL;
 800c1e6:	2303      	movs	r3, #3
 800c1e8:	75fb      	strb	r3, [r7, #23]
          break;
 800c1ea:	e016      	b.n	800c21a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1f2:	b2db      	uxtb	r3, r3
 800c1f4:	2b03      	cmp	r3, #3
 800c1f6:	d00f      	beq.n	800c218 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c1f8:	6839      	ldr	r1, [r7, #0]
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f001 fc4d 	bl	800da9a <USBD_CtlError>
            ret = USBD_FAIL;
 800c200:	2303      	movs	r3, #3
 800c202:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c204:	e008      	b.n	800c218 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c206:	6839      	ldr	r1, [r7, #0]
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f001 fc46 	bl	800da9a <USBD_CtlError>
          ret = USBD_FAIL;
 800c20e:	2303      	movs	r3, #3
 800c210:	75fb      	strb	r3, [r7, #23]
          break;
 800c212:	e002      	b.n	800c21a <USBD_CDC_Setup+0x19e>
          break;
 800c214:	bf00      	nop
 800c216:	e008      	b.n	800c22a <USBD_CDC_Setup+0x1ae>
          break;
 800c218:	bf00      	nop
      }
      break;
 800c21a:	e006      	b.n	800c22a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c21c:	6839      	ldr	r1, [r7, #0]
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	f001 fc3b 	bl	800da9a <USBD_CtlError>
      ret = USBD_FAIL;
 800c224:	2303      	movs	r3, #3
 800c226:	75fb      	strb	r3, [r7, #23]
      break;
 800c228:	bf00      	nop
  }

  return (uint8_t)ret;
 800c22a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3718      	adds	r7, #24
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}

0800c234 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b084      	sub	sp, #16
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	460b      	mov	r3, r1
 800c23e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c246:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	32b0      	adds	r2, #176	@ 0xb0
 800c252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d101      	bne.n	800c25e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c25a:	2303      	movs	r3, #3
 800c25c:	e065      	b.n	800c32a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	32b0      	adds	r2, #176	@ 0xb0
 800c268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c26c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c26e:	78fb      	ldrb	r3, [r7, #3]
 800c270:	f003 020f 	and.w	r2, r3, #15
 800c274:	6879      	ldr	r1, [r7, #4]
 800c276:	4613      	mov	r3, r2
 800c278:	009b      	lsls	r3, r3, #2
 800c27a:	4413      	add	r3, r2
 800c27c:	009b      	lsls	r3, r3, #2
 800c27e:	440b      	add	r3, r1
 800c280:	3318      	adds	r3, #24
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d02f      	beq.n	800c2e8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c288:	78fb      	ldrb	r3, [r7, #3]
 800c28a:	f003 020f 	and.w	r2, r3, #15
 800c28e:	6879      	ldr	r1, [r7, #4]
 800c290:	4613      	mov	r3, r2
 800c292:	009b      	lsls	r3, r3, #2
 800c294:	4413      	add	r3, r2
 800c296:	009b      	lsls	r3, r3, #2
 800c298:	440b      	add	r3, r1
 800c29a:	3318      	adds	r3, #24
 800c29c:	681a      	ldr	r2, [r3, #0]
 800c29e:	78fb      	ldrb	r3, [r7, #3]
 800c2a0:	f003 010f 	and.w	r1, r3, #15
 800c2a4:	68f8      	ldr	r0, [r7, #12]
 800c2a6:	460b      	mov	r3, r1
 800c2a8:	009b      	lsls	r3, r3, #2
 800c2aa:	440b      	add	r3, r1
 800c2ac:	00db      	lsls	r3, r3, #3
 800c2ae:	4403      	add	r3, r0
 800c2b0:	3320      	adds	r3, #32
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	fbb2 f1f3 	udiv	r1, r2, r3
 800c2b8:	fb01 f303 	mul.w	r3, r1, r3
 800c2bc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d112      	bne.n	800c2e8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c2c2:	78fb      	ldrb	r3, [r7, #3]
 800c2c4:	f003 020f 	and.w	r2, r3, #15
 800c2c8:	6879      	ldr	r1, [r7, #4]
 800c2ca:	4613      	mov	r3, r2
 800c2cc:	009b      	lsls	r3, r3, #2
 800c2ce:	4413      	add	r3, r2
 800c2d0:	009b      	lsls	r3, r3, #2
 800c2d2:	440b      	add	r3, r1
 800c2d4:	3318      	adds	r3, #24
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c2da:	78f9      	ldrb	r1, [r7, #3]
 800c2dc:	2300      	movs	r3, #0
 800c2de:	2200      	movs	r2, #0
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f002 f944 	bl	800e56e <USBD_LL_Transmit>
 800c2e6:	e01f      	b.n	800c328 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c2f6:	687a      	ldr	r2, [r7, #4]
 800c2f8:	33b0      	adds	r3, #176	@ 0xb0
 800c2fa:	009b      	lsls	r3, r3, #2
 800c2fc:	4413      	add	r3, r2
 800c2fe:	685b      	ldr	r3, [r3, #4]
 800c300:	691b      	ldr	r3, [r3, #16]
 800c302:	2b00      	cmp	r3, #0
 800c304:	d010      	beq.n	800c328 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c30c:	687a      	ldr	r2, [r7, #4]
 800c30e:	33b0      	adds	r3, #176	@ 0xb0
 800c310:	009b      	lsls	r3, r3, #2
 800c312:	4413      	add	r3, r2
 800c314:	685b      	ldr	r3, [r3, #4]
 800c316:	691b      	ldr	r3, [r3, #16]
 800c318:	68ba      	ldr	r2, [r7, #8]
 800c31a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800c31e:	68ba      	ldr	r2, [r7, #8]
 800c320:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800c324:	78fa      	ldrb	r2, [r7, #3]
 800c326:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c328:	2300      	movs	r3, #0
}
 800c32a:	4618      	mov	r0, r3
 800c32c:	3710      	adds	r7, #16
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}

0800c332 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c332:	b580      	push	{r7, lr}
 800c334:	b084      	sub	sp, #16
 800c336:	af00      	add	r7, sp, #0
 800c338:	6078      	str	r0, [r7, #4]
 800c33a:	460b      	mov	r3, r1
 800c33c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	32b0      	adds	r2, #176	@ 0xb0
 800c348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c34c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	32b0      	adds	r2, #176	@ 0xb0
 800c358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d101      	bne.n	800c364 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c360:	2303      	movs	r3, #3
 800c362:	e01a      	b.n	800c39a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c364:	78fb      	ldrb	r3, [r7, #3]
 800c366:	4619      	mov	r1, r3
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f002 f942 	bl	800e5f2 <USBD_LL_GetRxDataSize>
 800c36e:	4602      	mov	r2, r0
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c37c:	687a      	ldr	r2, [r7, #4]
 800c37e:	33b0      	adds	r3, #176	@ 0xb0
 800c380:	009b      	lsls	r3, r3, #2
 800c382:	4413      	add	r3, r2
 800c384:	685b      	ldr	r3, [r3, #4]
 800c386:	68db      	ldr	r3, [r3, #12]
 800c388:	68fa      	ldr	r2, [r7, #12]
 800c38a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800c38e:	68fa      	ldr	r2, [r7, #12]
 800c390:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800c394:	4611      	mov	r1, r2
 800c396:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c398:	2300      	movs	r3, #0
}
 800c39a:	4618      	mov	r0, r3
 800c39c:	3710      	adds	r7, #16
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}

0800c3a2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c3a2:	b580      	push	{r7, lr}
 800c3a4:	b084      	sub	sp, #16
 800c3a6:	af00      	add	r7, sp, #0
 800c3a8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	32b0      	adds	r2, #176	@ 0xb0
 800c3b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d101      	bne.n	800c3c4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c3c0:	2303      	movs	r3, #3
 800c3c2:	e024      	b.n	800c40e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c3ca:	687a      	ldr	r2, [r7, #4]
 800c3cc:	33b0      	adds	r3, #176	@ 0xb0
 800c3ce:	009b      	lsls	r3, r3, #2
 800c3d0:	4413      	add	r3, r2
 800c3d2:	685b      	ldr	r3, [r3, #4]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d019      	beq.n	800c40c <USBD_CDC_EP0_RxReady+0x6a>
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800c3de:	2bff      	cmp	r3, #255	@ 0xff
 800c3e0:	d014      	beq.n	800c40c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c3e8:	687a      	ldr	r2, [r7, #4]
 800c3ea:	33b0      	adds	r3, #176	@ 0xb0
 800c3ec:	009b      	lsls	r3, r3, #2
 800c3ee:	4413      	add	r3, r2
 800c3f0:	685b      	ldr	r3, [r3, #4]
 800c3f2:	689b      	ldr	r3, [r3, #8]
 800c3f4:	68fa      	ldr	r2, [r7, #12]
 800c3f6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800c3fa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c3fc:	68fa      	ldr	r2, [r7, #12]
 800c3fe:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c402:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	22ff      	movs	r2, #255	@ 0xff
 800c408:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800c40c:	2300      	movs	r3, #0
}
 800c40e:	4618      	mov	r0, r3
 800c410:	3710      	adds	r7, #16
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}
	...

0800c418 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b086      	sub	sp, #24
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c420:	2182      	movs	r1, #130	@ 0x82
 800c422:	4818      	ldr	r0, [pc, #96]	@ (800c484 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c424:	f000 fcd9 	bl	800cdda <USBD_GetEpDesc>
 800c428:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c42a:	2101      	movs	r1, #1
 800c42c:	4815      	ldr	r0, [pc, #84]	@ (800c484 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c42e:	f000 fcd4 	bl	800cdda <USBD_GetEpDesc>
 800c432:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c434:	2181      	movs	r1, #129	@ 0x81
 800c436:	4813      	ldr	r0, [pc, #76]	@ (800c484 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c438:	f000 fccf 	bl	800cdda <USBD_GetEpDesc>
 800c43c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d002      	beq.n	800c44a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	2210      	movs	r2, #16
 800c448:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d006      	beq.n	800c45e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	2200      	movs	r2, #0
 800c454:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c458:	711a      	strb	r2, [r3, #4]
 800c45a:	2200      	movs	r2, #0
 800c45c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d006      	beq.n	800c472 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	2200      	movs	r2, #0
 800c468:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c46c:	711a      	strb	r2, [r3, #4]
 800c46e:	2200      	movs	r2, #0
 800c470:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2243      	movs	r2, #67	@ 0x43
 800c476:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c478:	4b02      	ldr	r3, [pc, #8]	@ (800c484 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3718      	adds	r7, #24
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}
 800c482:	bf00      	nop
 800c484:	20000074 	.word	0x20000074

0800c488 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b086      	sub	sp, #24
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c490:	2182      	movs	r1, #130	@ 0x82
 800c492:	4818      	ldr	r0, [pc, #96]	@ (800c4f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c494:	f000 fca1 	bl	800cdda <USBD_GetEpDesc>
 800c498:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c49a:	2101      	movs	r1, #1
 800c49c:	4815      	ldr	r0, [pc, #84]	@ (800c4f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c49e:	f000 fc9c 	bl	800cdda <USBD_GetEpDesc>
 800c4a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c4a4:	2181      	movs	r1, #129	@ 0x81
 800c4a6:	4813      	ldr	r0, [pc, #76]	@ (800c4f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c4a8:	f000 fc97 	bl	800cdda <USBD_GetEpDesc>
 800c4ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c4ae:	697b      	ldr	r3, [r7, #20]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d002      	beq.n	800c4ba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	2210      	movs	r2, #16
 800c4b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c4ba:	693b      	ldr	r3, [r7, #16]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d006      	beq.n	800c4ce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	711a      	strb	r2, [r3, #4]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	f042 0202 	orr.w	r2, r2, #2
 800c4cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d006      	beq.n	800c4e2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	711a      	strb	r2, [r3, #4]
 800c4da:	2200      	movs	r2, #0
 800c4dc:	f042 0202 	orr.w	r2, r2, #2
 800c4e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	2243      	movs	r2, #67	@ 0x43
 800c4e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c4e8:	4b02      	ldr	r3, [pc, #8]	@ (800c4f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3718      	adds	r7, #24
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}
 800c4f2:	bf00      	nop
 800c4f4:	20000074 	.word	0x20000074

0800c4f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b086      	sub	sp, #24
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c500:	2182      	movs	r1, #130	@ 0x82
 800c502:	4818      	ldr	r0, [pc, #96]	@ (800c564 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c504:	f000 fc69 	bl	800cdda <USBD_GetEpDesc>
 800c508:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c50a:	2101      	movs	r1, #1
 800c50c:	4815      	ldr	r0, [pc, #84]	@ (800c564 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c50e:	f000 fc64 	bl	800cdda <USBD_GetEpDesc>
 800c512:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c514:	2181      	movs	r1, #129	@ 0x81
 800c516:	4813      	ldr	r0, [pc, #76]	@ (800c564 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c518:	f000 fc5f 	bl	800cdda <USBD_GetEpDesc>
 800c51c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d002      	beq.n	800c52a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c524:	697b      	ldr	r3, [r7, #20]
 800c526:	2210      	movs	r2, #16
 800c528:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c52a:	693b      	ldr	r3, [r7, #16]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d006      	beq.n	800c53e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c530:	693b      	ldr	r3, [r7, #16]
 800c532:	2200      	movs	r2, #0
 800c534:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c538:	711a      	strb	r2, [r3, #4]
 800c53a:	2200      	movs	r2, #0
 800c53c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	2b00      	cmp	r3, #0
 800c542:	d006      	beq.n	800c552 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	2200      	movs	r2, #0
 800c548:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c54c:	711a      	strb	r2, [r3, #4]
 800c54e:	2200      	movs	r2, #0
 800c550:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2243      	movs	r2, #67	@ 0x43
 800c556:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c558:	4b02      	ldr	r3, [pc, #8]	@ (800c564 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	3718      	adds	r7, #24
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}
 800c562:	bf00      	nop
 800c564:	20000074 	.word	0x20000074

0800c568 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c568:	b480      	push	{r7}
 800c56a:	b083      	sub	sp, #12
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	220a      	movs	r2, #10
 800c574:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c576:	4b03      	ldr	r3, [pc, #12]	@ (800c584 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c578:	4618      	mov	r0, r3
 800c57a:	370c      	adds	r7, #12
 800c57c:	46bd      	mov	sp, r7
 800c57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c582:	4770      	bx	lr
 800c584:	20000030 	.word	0x20000030

0800c588 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c588:	b480      	push	{r7}
 800c58a:	b083      	sub	sp, #12
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
 800c590:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d101      	bne.n	800c59c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c598:	2303      	movs	r3, #3
 800c59a:	e009      	b.n	800c5b0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c5a2:	687a      	ldr	r2, [r7, #4]
 800c5a4:	33b0      	adds	r3, #176	@ 0xb0
 800c5a6:	009b      	lsls	r3, r3, #2
 800c5a8:	4413      	add	r3, r2
 800c5aa:	683a      	ldr	r2, [r7, #0]
 800c5ac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c5ae:	2300      	movs	r3, #0
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	370c      	adds	r7, #12
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ba:	4770      	bx	lr

0800c5bc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c5bc:	b480      	push	{r7}
 800c5be:	b087      	sub	sp, #28
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	60f8      	str	r0, [r7, #12]
 800c5c4:	60b9      	str	r1, [r7, #8]
 800c5c6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	32b0      	adds	r2, #176	@ 0xb0
 800c5d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5d6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c5d8:	697b      	ldr	r3, [r7, #20]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d101      	bne.n	800c5e2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c5de:	2303      	movs	r3, #3
 800c5e0:	e008      	b.n	800c5f4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c5e2:	697b      	ldr	r3, [r7, #20]
 800c5e4:	68ba      	ldr	r2, [r7, #8]
 800c5e6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c5ea:	697b      	ldr	r3, [r7, #20]
 800c5ec:	687a      	ldr	r2, [r7, #4]
 800c5ee:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800c5f2:	2300      	movs	r3, #0
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	371c      	adds	r7, #28
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fe:	4770      	bx	lr

0800c600 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c600:	b480      	push	{r7}
 800c602:	b085      	sub	sp, #20
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	32b0      	adds	r2, #176	@ 0xb0
 800c614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c618:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d101      	bne.n	800c624 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c620:	2303      	movs	r3, #3
 800c622:	e004      	b.n	800c62e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	683a      	ldr	r2, [r7, #0]
 800c628:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800c62c:	2300      	movs	r3, #0
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3714      	adds	r7, #20
 800c632:	46bd      	mov	sp, r7
 800c634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c638:	4770      	bx	lr
	...

0800c63c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b084      	sub	sp, #16
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	32b0      	adds	r2, #176	@ 0xb0
 800c64e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c652:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800c654:	2301      	movs	r3, #1
 800c656:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d101      	bne.n	800c662 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c65e:	2303      	movs	r3, #3
 800c660:	e025      	b.n	800c6ae <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d11f      	bne.n	800c6ac <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	2201      	movs	r2, #1
 800c670:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c674:	4b10      	ldr	r3, [pc, #64]	@ (800c6b8 <USBD_CDC_TransmitPacket+0x7c>)
 800c676:	781b      	ldrb	r3, [r3, #0]
 800c678:	f003 020f 	and.w	r2, r3, #15
 800c67c:	68bb      	ldr	r3, [r7, #8]
 800c67e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	4613      	mov	r3, r2
 800c686:	009b      	lsls	r3, r3, #2
 800c688:	4413      	add	r3, r2
 800c68a:	009b      	lsls	r3, r3, #2
 800c68c:	4403      	add	r3, r0
 800c68e:	3318      	adds	r3, #24
 800c690:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c692:	4b09      	ldr	r3, [pc, #36]	@ (800c6b8 <USBD_CDC_TransmitPacket+0x7c>)
 800c694:	7819      	ldrb	r1, [r3, #0]
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f001 ff63 	bl	800e56e <USBD_LL_Transmit>

    ret = USBD_OK;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c6ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3710      	adds	r7, #16
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd80      	pop	{r7, pc}
 800c6b6:	bf00      	nop
 800c6b8:	200000b7 	.word	0x200000b7

0800c6bc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b084      	sub	sp, #16
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	32b0      	adds	r2, #176	@ 0xb0
 800c6ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6d2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	32b0      	adds	r2, #176	@ 0xb0
 800c6de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d101      	bne.n	800c6ea <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c6e6:	2303      	movs	r3, #3
 800c6e8:	e018      	b.n	800c71c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	7c1b      	ldrb	r3, [r3, #16]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d10a      	bne.n	800c708 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c6f2:	4b0c      	ldr	r3, [pc, #48]	@ (800c724 <USBD_CDC_ReceivePacket+0x68>)
 800c6f4:	7819      	ldrb	r1, [r3, #0]
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c6fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	f001 ff55 	bl	800e5b0 <USBD_LL_PrepareReceive>
 800c706:	e008      	b.n	800c71a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c708:	4b06      	ldr	r3, [pc, #24]	@ (800c724 <USBD_CDC_ReceivePacket+0x68>)
 800c70a:	7819      	ldrb	r1, [r3, #0]
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c712:	2340      	movs	r3, #64	@ 0x40
 800c714:	6878      	ldr	r0, [r7, #4]
 800c716:	f001 ff4b 	bl	800e5b0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c71a:	2300      	movs	r3, #0
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	3710      	adds	r7, #16
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}
 800c724:	200000b8 	.word	0x200000b8

0800c728 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b086      	sub	sp, #24
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	60f8      	str	r0, [r7, #12]
 800c730:	60b9      	str	r1, [r7, #8]
 800c732:	4613      	mov	r3, r2
 800c734:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d10a      	bne.n	800c752 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800c73c:	4817      	ldr	r0, [pc, #92]	@ (800c79c <USBD_Init+0x74>)
 800c73e:	f002 fd05 	bl	800f14c <iprintf>
 800c742:	4817      	ldr	r0, [pc, #92]	@ (800c7a0 <USBD_Init+0x78>)
 800c744:	f002 fd02 	bl	800f14c <iprintf>
 800c748:	200a      	movs	r0, #10
 800c74a:	f002 fd11 	bl	800f170 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c74e:	2303      	movs	r3, #3
 800c750:	e01f      	b.n	800c792 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	2200      	movs	r2, #0
 800c756:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	2200      	movs	r2, #0
 800c75e:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	2200      	movs	r2, #0
 800c766:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d003      	beq.n	800c778 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	68ba      	ldr	r2, [r7, #8]
 800c774:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	2201      	movs	r2, #1
 800c77c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	79fa      	ldrb	r2, [r7, #7]
 800c784:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c786:	68f8      	ldr	r0, [r7, #12]
 800c788:	f001 fda6 	bl	800e2d8 <USBD_LL_Init>
 800c78c:	4603      	mov	r3, r0
 800c78e:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c790:	7dfb      	ldrb	r3, [r7, #23]
}
 800c792:	4618      	mov	r0, r3
 800c794:	3718      	adds	r7, #24
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}
 800c79a:	bf00      	nop
 800c79c:	080110fc 	.word	0x080110fc
 800c7a0:	08011104 	.word	0x08011104

0800c7a4 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b084      	sub	sp, #16
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d10a      	bne.n	800c7ce <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800c7b8:	481a      	ldr	r0, [pc, #104]	@ (800c824 <USBD_RegisterClass+0x80>)
 800c7ba:	f002 fcc7 	bl	800f14c <iprintf>
 800c7be:	481a      	ldr	r0, [pc, #104]	@ (800c828 <USBD_RegisterClass+0x84>)
 800c7c0:	f002 fcc4 	bl	800f14c <iprintf>
 800c7c4:	200a      	movs	r0, #10
 800c7c6:	f002 fcd3 	bl	800f170 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c7ca:	2303      	movs	r3, #3
 800c7cc:	e025      	b.n	800c81a <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	683a      	ldr	r2, [r7, #0]
 800c7d2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	32ae      	adds	r2, #174	@ 0xae
 800c7e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d00f      	beq.n	800c80a <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	32ae      	adds	r2, #174	@ 0xae
 800c7f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7fa:	f107 020e 	add.w	r2, r7, #14
 800c7fe:	4610      	mov	r0, r2
 800c800:	4798      	blx	r3
 800c802:	4602      	mov	r2, r0
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c810:	1c5a      	adds	r2, r3, #1
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c818:	2300      	movs	r3, #0
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3710      	adds	r7, #16
 800c81e:	46bd      	mov	sp, r7
 800c820:	bd80      	pop	{r7, pc}
 800c822:	bf00      	nop
 800c824:	080110fc 	.word	0x080110fc
 800c828:	0801111c 	.word	0x0801111c

0800c82c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b082      	sub	sp, #8
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c834:	6878      	ldr	r0, [r7, #4]
 800c836:	f001 fdb1 	bl	800e39c <USBD_LL_Start>
 800c83a:	4603      	mov	r3, r0
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	3708      	adds	r7, #8
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}

0800c844 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c844:	b480      	push	{r7}
 800c846:	b083      	sub	sp, #12
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c84c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c84e:	4618      	mov	r0, r3
 800c850:	370c      	adds	r7, #12
 800c852:	46bd      	mov	sp, r7
 800c854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c858:	4770      	bx	lr

0800c85a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c85a:	b580      	push	{r7, lr}
 800c85c:	b084      	sub	sp, #16
 800c85e:	af00      	add	r7, sp, #0
 800c860:	6078      	str	r0, [r7, #4]
 800c862:	460b      	mov	r3, r1
 800c864:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c866:	2300      	movs	r3, #0
 800c868:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c870:	2b00      	cmp	r3, #0
 800c872:	d009      	beq.n	800c888 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	78fa      	ldrb	r2, [r7, #3]
 800c87e:	4611      	mov	r1, r2
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	4798      	blx	r3
 800c884:	4603      	mov	r3, r0
 800c886:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c888:	7bfb      	ldrb	r3, [r7, #15]
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	3710      	adds	r7, #16
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}

0800c892 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c892:	b580      	push	{r7, lr}
 800c894:	b084      	sub	sp, #16
 800c896:	af00      	add	r7, sp, #0
 800c898:	6078      	str	r0, [r7, #4]
 800c89a:	460b      	mov	r3, r1
 800c89c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c8a8:	685b      	ldr	r3, [r3, #4]
 800c8aa:	78fa      	ldrb	r2, [r7, #3]
 800c8ac:	4611      	mov	r1, r2
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	4798      	blx	r3
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d001      	beq.n	800c8bc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c8b8:	2303      	movs	r3, #3
 800c8ba:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c8bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3710      	adds	r7, #16
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}

0800c8c6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c8c6:	b580      	push	{r7, lr}
 800c8c8:	b084      	sub	sp, #16
 800c8ca:	af00      	add	r7, sp, #0
 800c8cc:	6078      	str	r0, [r7, #4]
 800c8ce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c8d6:	6839      	ldr	r1, [r7, #0]
 800c8d8:	4618      	mov	r0, r3
 800c8da:	f001 f8a4 	bl	800da26 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2201      	movs	r2, #1
 800c8e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c8ec:	461a      	mov	r2, r3
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c8fa:	f003 031f 	and.w	r3, r3, #31
 800c8fe:	2b02      	cmp	r3, #2
 800c900:	d01a      	beq.n	800c938 <USBD_LL_SetupStage+0x72>
 800c902:	2b02      	cmp	r3, #2
 800c904:	d822      	bhi.n	800c94c <USBD_LL_SetupStage+0x86>
 800c906:	2b00      	cmp	r3, #0
 800c908:	d002      	beq.n	800c910 <USBD_LL_SetupStage+0x4a>
 800c90a:	2b01      	cmp	r3, #1
 800c90c:	d00a      	beq.n	800c924 <USBD_LL_SetupStage+0x5e>
 800c90e:	e01d      	b.n	800c94c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c916:	4619      	mov	r1, r3
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f000 fad1 	bl	800cec0 <USBD_StdDevReq>
 800c91e:	4603      	mov	r3, r0
 800c920:	73fb      	strb	r3, [r7, #15]
      break;
 800c922:	e020      	b.n	800c966 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c92a:	4619      	mov	r1, r3
 800c92c:	6878      	ldr	r0, [r7, #4]
 800c92e:	f000 fb39 	bl	800cfa4 <USBD_StdItfReq>
 800c932:	4603      	mov	r3, r0
 800c934:	73fb      	strb	r3, [r7, #15]
      break;
 800c936:	e016      	b.n	800c966 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c93e:	4619      	mov	r1, r3
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f000 fb9b 	bl	800d07c <USBD_StdEPReq>
 800c946:	4603      	mov	r3, r0
 800c948:	73fb      	strb	r3, [r7, #15]
      break;
 800c94a:	e00c      	b.n	800c966 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c952:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c956:	b2db      	uxtb	r3, r3
 800c958:	4619      	mov	r1, r3
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f001 fd7e 	bl	800e45c <USBD_LL_StallEP>
 800c960:	4603      	mov	r3, r0
 800c962:	73fb      	strb	r3, [r7, #15]
      break;
 800c964:	bf00      	nop
  }

  return ret;
 800c966:	7bfb      	ldrb	r3, [r7, #15]
}
 800c968:	4618      	mov	r0, r3
 800c96a:	3710      	adds	r7, #16
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}

0800c970 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b086      	sub	sp, #24
 800c974:	af00      	add	r7, sp, #0
 800c976:	60f8      	str	r0, [r7, #12]
 800c978:	460b      	mov	r3, r1
 800c97a:	607a      	str	r2, [r7, #4]
 800c97c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c97e:	2300      	movs	r3, #0
 800c980:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c982:	7afb      	ldrb	r3, [r7, #11]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d16e      	bne.n	800ca66 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c98e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c996:	2b03      	cmp	r3, #3
 800c998:	f040 8098 	bne.w	800cacc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	689a      	ldr	r2, [r3, #8]
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	68db      	ldr	r3, [r3, #12]
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d913      	bls.n	800c9d0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	689a      	ldr	r2, [r3, #8]
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	68db      	ldr	r3, [r3, #12]
 800c9b0:	1ad2      	subs	r2, r2, r3
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c9b6:	693b      	ldr	r3, [r7, #16]
 800c9b8:	68da      	ldr	r2, [r3, #12]
 800c9ba:	693b      	ldr	r3, [r7, #16]
 800c9bc:	689b      	ldr	r3, [r3, #8]
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	bf28      	it	cs
 800c9c2:	4613      	movcs	r3, r2
 800c9c4:	461a      	mov	r2, r3
 800c9c6:	6879      	ldr	r1, [r7, #4]
 800c9c8:	68f8      	ldr	r0, [r7, #12]
 800c9ca:	f001 f92c 	bl	800dc26 <USBD_CtlContinueRx>
 800c9ce:	e07d      	b.n	800cacc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c9d6:	f003 031f 	and.w	r3, r3, #31
 800c9da:	2b02      	cmp	r3, #2
 800c9dc:	d014      	beq.n	800ca08 <USBD_LL_DataOutStage+0x98>
 800c9de:	2b02      	cmp	r3, #2
 800c9e0:	d81d      	bhi.n	800ca1e <USBD_LL_DataOutStage+0xae>
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d002      	beq.n	800c9ec <USBD_LL_DataOutStage+0x7c>
 800c9e6:	2b01      	cmp	r3, #1
 800c9e8:	d003      	beq.n	800c9f2 <USBD_LL_DataOutStage+0x82>
 800c9ea:	e018      	b.n	800ca1e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	75bb      	strb	r3, [r7, #22]
            break;
 800c9f0:	e018      	b.n	800ca24 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c9f8:	b2db      	uxtb	r3, r3
 800c9fa:	4619      	mov	r1, r3
 800c9fc:	68f8      	ldr	r0, [r7, #12]
 800c9fe:	f000 f9d2 	bl	800cda6 <USBD_CoreFindIF>
 800ca02:	4603      	mov	r3, r0
 800ca04:	75bb      	strb	r3, [r7, #22]
            break;
 800ca06:	e00d      	b.n	800ca24 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ca0e:	b2db      	uxtb	r3, r3
 800ca10:	4619      	mov	r1, r3
 800ca12:	68f8      	ldr	r0, [r7, #12]
 800ca14:	f000 f9d4 	bl	800cdc0 <USBD_CoreFindEP>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	75bb      	strb	r3, [r7, #22]
            break;
 800ca1c:	e002      	b.n	800ca24 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	75bb      	strb	r3, [r7, #22]
            break;
 800ca22:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ca24:	7dbb      	ldrb	r3, [r7, #22]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d119      	bne.n	800ca5e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca30:	b2db      	uxtb	r3, r3
 800ca32:	2b03      	cmp	r3, #3
 800ca34:	d113      	bne.n	800ca5e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ca36:	7dba      	ldrb	r2, [r7, #22]
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	32ae      	adds	r2, #174	@ 0xae
 800ca3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca40:	691b      	ldr	r3, [r3, #16]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d00b      	beq.n	800ca5e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ca46:	7dba      	ldrb	r2, [r7, #22]
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ca4e:	7dba      	ldrb	r2, [r7, #22]
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	32ae      	adds	r2, #174	@ 0xae
 800ca54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca58:	691b      	ldr	r3, [r3, #16]
 800ca5a:	68f8      	ldr	r0, [r7, #12]
 800ca5c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ca5e:	68f8      	ldr	r0, [r7, #12]
 800ca60:	f001 f8f2 	bl	800dc48 <USBD_CtlSendStatus>
 800ca64:	e032      	b.n	800cacc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ca66:	7afb      	ldrb	r3, [r7, #11]
 800ca68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ca6c:	b2db      	uxtb	r3, r3
 800ca6e:	4619      	mov	r1, r3
 800ca70:	68f8      	ldr	r0, [r7, #12]
 800ca72:	f000 f9a5 	bl	800cdc0 <USBD_CoreFindEP>
 800ca76:	4603      	mov	r3, r0
 800ca78:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ca7a:	7dbb      	ldrb	r3, [r7, #22]
 800ca7c:	2bff      	cmp	r3, #255	@ 0xff
 800ca7e:	d025      	beq.n	800cacc <USBD_LL_DataOutStage+0x15c>
 800ca80:	7dbb      	ldrb	r3, [r7, #22]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d122      	bne.n	800cacc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca8c:	b2db      	uxtb	r3, r3
 800ca8e:	2b03      	cmp	r3, #3
 800ca90:	d117      	bne.n	800cac2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ca92:	7dba      	ldrb	r2, [r7, #22]
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	32ae      	adds	r2, #174	@ 0xae
 800ca98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca9c:	699b      	ldr	r3, [r3, #24]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d00f      	beq.n	800cac2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800caa2:	7dba      	ldrb	r2, [r7, #22]
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800caaa:	7dba      	ldrb	r2, [r7, #22]
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	32ae      	adds	r2, #174	@ 0xae
 800cab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cab4:	699b      	ldr	r3, [r3, #24]
 800cab6:	7afa      	ldrb	r2, [r7, #11]
 800cab8:	4611      	mov	r1, r2
 800caba:	68f8      	ldr	r0, [r7, #12]
 800cabc:	4798      	blx	r3
 800cabe:	4603      	mov	r3, r0
 800cac0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800cac2:	7dfb      	ldrb	r3, [r7, #23]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d001      	beq.n	800cacc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800cac8:	7dfb      	ldrb	r3, [r7, #23]
 800caca:	e000      	b.n	800cace <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800cacc:	2300      	movs	r3, #0
}
 800cace:	4618      	mov	r0, r3
 800cad0:	3718      	adds	r7, #24
 800cad2:	46bd      	mov	sp, r7
 800cad4:	bd80      	pop	{r7, pc}

0800cad6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cad6:	b580      	push	{r7, lr}
 800cad8:	b086      	sub	sp, #24
 800cada:	af00      	add	r7, sp, #0
 800cadc:	60f8      	str	r0, [r7, #12]
 800cade:	460b      	mov	r3, r1
 800cae0:	607a      	str	r2, [r7, #4]
 800cae2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800cae4:	7afb      	ldrb	r3, [r7, #11]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d16f      	bne.n	800cbca <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	3314      	adds	r3, #20
 800caee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800caf6:	2b02      	cmp	r3, #2
 800caf8:	d15a      	bne.n	800cbb0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800cafa:	693b      	ldr	r3, [r7, #16]
 800cafc:	689a      	ldr	r2, [r3, #8]
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	68db      	ldr	r3, [r3, #12]
 800cb02:	429a      	cmp	r2, r3
 800cb04:	d914      	bls.n	800cb30 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cb06:	693b      	ldr	r3, [r7, #16]
 800cb08:	689a      	ldr	r2, [r3, #8]
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	68db      	ldr	r3, [r3, #12]
 800cb0e:	1ad2      	subs	r2, r2, r3
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800cb14:	693b      	ldr	r3, [r7, #16]
 800cb16:	689b      	ldr	r3, [r3, #8]
 800cb18:	461a      	mov	r2, r3
 800cb1a:	6879      	ldr	r1, [r7, #4]
 800cb1c:	68f8      	ldr	r0, [r7, #12]
 800cb1e:	f001 f854 	bl	800dbca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb22:	2300      	movs	r3, #0
 800cb24:	2200      	movs	r2, #0
 800cb26:	2100      	movs	r1, #0
 800cb28:	68f8      	ldr	r0, [r7, #12]
 800cb2a:	f001 fd41 	bl	800e5b0 <USBD_LL_PrepareReceive>
 800cb2e:	e03f      	b.n	800cbb0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800cb30:	693b      	ldr	r3, [r7, #16]
 800cb32:	68da      	ldr	r2, [r3, #12]
 800cb34:	693b      	ldr	r3, [r7, #16]
 800cb36:	689b      	ldr	r3, [r3, #8]
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	d11c      	bne.n	800cb76 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800cb3c:	693b      	ldr	r3, [r7, #16]
 800cb3e:	685a      	ldr	r2, [r3, #4]
 800cb40:	693b      	ldr	r3, [r7, #16]
 800cb42:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d316      	bcc.n	800cb76 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800cb48:	693b      	ldr	r3, [r7, #16]
 800cb4a:	685a      	ldr	r2, [r3, #4]
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cb52:	429a      	cmp	r2, r3
 800cb54:	d20f      	bcs.n	800cb76 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cb56:	2200      	movs	r2, #0
 800cb58:	2100      	movs	r1, #0
 800cb5a:	68f8      	ldr	r0, [r7, #12]
 800cb5c:	f001 f835 	bl	800dbca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	2200      	movs	r2, #0
 800cb64:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb68:	2300      	movs	r3, #0
 800cb6a:	2200      	movs	r2, #0
 800cb6c:	2100      	movs	r1, #0
 800cb6e:	68f8      	ldr	r0, [r7, #12]
 800cb70:	f001 fd1e 	bl	800e5b0 <USBD_LL_PrepareReceive>
 800cb74:	e01c      	b.n	800cbb0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb7c:	b2db      	uxtb	r3, r3
 800cb7e:	2b03      	cmp	r3, #3
 800cb80:	d10f      	bne.n	800cba2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb88:	68db      	ldr	r3, [r3, #12]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d009      	beq.n	800cba2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	2200      	movs	r2, #0
 800cb92:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb9c:	68db      	ldr	r3, [r3, #12]
 800cb9e:	68f8      	ldr	r0, [r7, #12]
 800cba0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cba2:	2180      	movs	r1, #128	@ 0x80
 800cba4:	68f8      	ldr	r0, [r7, #12]
 800cba6:	f001 fc59 	bl	800e45c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800cbaa:	68f8      	ldr	r0, [r7, #12]
 800cbac:	f001 f85f 	bl	800dc6e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d03a      	beq.n	800cc30 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800cbba:	68f8      	ldr	r0, [r7, #12]
 800cbbc:	f7ff fe42 	bl	800c844 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800cbc8:	e032      	b.n	800cc30 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800cbca:	7afb      	ldrb	r3, [r7, #11]
 800cbcc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cbd0:	b2db      	uxtb	r3, r3
 800cbd2:	4619      	mov	r1, r3
 800cbd4:	68f8      	ldr	r0, [r7, #12]
 800cbd6:	f000 f8f3 	bl	800cdc0 <USBD_CoreFindEP>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cbde:	7dfb      	ldrb	r3, [r7, #23]
 800cbe0:	2bff      	cmp	r3, #255	@ 0xff
 800cbe2:	d025      	beq.n	800cc30 <USBD_LL_DataInStage+0x15a>
 800cbe4:	7dfb      	ldrb	r3, [r7, #23]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d122      	bne.n	800cc30 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbf0:	b2db      	uxtb	r3, r3
 800cbf2:	2b03      	cmp	r3, #3
 800cbf4:	d11c      	bne.n	800cc30 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800cbf6:	7dfa      	ldrb	r2, [r7, #23]
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	32ae      	adds	r2, #174	@ 0xae
 800cbfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc00:	695b      	ldr	r3, [r3, #20]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d014      	beq.n	800cc30 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800cc06:	7dfa      	ldrb	r2, [r7, #23]
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800cc0e:	7dfa      	ldrb	r2, [r7, #23]
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	32ae      	adds	r2, #174	@ 0xae
 800cc14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc18:	695b      	ldr	r3, [r3, #20]
 800cc1a:	7afa      	ldrb	r2, [r7, #11]
 800cc1c:	4611      	mov	r1, r2
 800cc1e:	68f8      	ldr	r0, [r7, #12]
 800cc20:	4798      	blx	r3
 800cc22:	4603      	mov	r3, r0
 800cc24:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800cc26:	7dbb      	ldrb	r3, [r7, #22]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d001      	beq.n	800cc30 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800cc2c:	7dbb      	ldrb	r3, [r7, #22]
 800cc2e:	e000      	b.n	800cc32 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800cc30:	2300      	movs	r3, #0
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3718      	adds	r7, #24
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bd80      	pop	{r7, pc}

0800cc3a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800cc3a:	b580      	push	{r7, lr}
 800cc3c:	b084      	sub	sp, #16
 800cc3e:	af00      	add	r7, sp, #0
 800cc40:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800cc42:	2300      	movs	r3, #0
 800cc44:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2201      	movs	r2, #1
 800cc4a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2200      	movs	r2, #0
 800cc52:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2200      	movs	r2, #0
 800cc5a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2200      	movs	r2, #0
 800cc60:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2200      	movs	r2, #0
 800cc68:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d014      	beq.n	800cca0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc7c:	685b      	ldr	r3, [r3, #4]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d00e      	beq.n	800cca0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc88:	685b      	ldr	r3, [r3, #4]
 800cc8a:	687a      	ldr	r2, [r7, #4]
 800cc8c:	6852      	ldr	r2, [r2, #4]
 800cc8e:	b2d2      	uxtb	r2, r2
 800cc90:	4611      	mov	r1, r2
 800cc92:	6878      	ldr	r0, [r7, #4]
 800cc94:	4798      	blx	r3
 800cc96:	4603      	mov	r3, r0
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d001      	beq.n	800cca0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800cc9c:	2303      	movs	r3, #3
 800cc9e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cca0:	2340      	movs	r3, #64	@ 0x40
 800cca2:	2200      	movs	r2, #0
 800cca4:	2100      	movs	r1, #0
 800cca6:	6878      	ldr	r0, [r7, #4]
 800cca8:	f001 fb93 	bl	800e3d2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2201      	movs	r2, #1
 800ccb0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2240      	movs	r2, #64	@ 0x40
 800ccb8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ccbc:	2340      	movs	r3, #64	@ 0x40
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	2180      	movs	r1, #128	@ 0x80
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f001 fb85 	bl	800e3d2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2201      	movs	r2, #1
 800cccc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2240      	movs	r2, #64	@ 0x40
 800ccd2:	621a      	str	r2, [r3, #32]

  return ret;
 800ccd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	3710      	adds	r7, #16
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	bd80      	pop	{r7, pc}

0800ccde <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ccde:	b480      	push	{r7}
 800cce0:	b083      	sub	sp, #12
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	6078      	str	r0, [r7, #4]
 800cce6:	460b      	mov	r3, r1
 800cce8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	78fa      	ldrb	r2, [r7, #3]
 800ccee:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ccf0:	2300      	movs	r3, #0
}
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	370c      	adds	r7, #12
 800ccf6:	46bd      	mov	sp, r7
 800ccf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfc:	4770      	bx	lr

0800ccfe <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ccfe:	b480      	push	{r7}
 800cd00:	b083      	sub	sp, #12
 800cd02:	af00      	add	r7, sp, #0
 800cd04:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd0c:	b2db      	uxtb	r3, r3
 800cd0e:	2b04      	cmp	r3, #4
 800cd10:	d006      	beq.n	800cd20 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd18:	b2da      	uxtb	r2, r3
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2204      	movs	r2, #4
 800cd24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800cd28:	2300      	movs	r3, #0
}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	370c      	adds	r7, #12
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd34:	4770      	bx	lr

0800cd36 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cd36:	b480      	push	{r7}
 800cd38:	b083      	sub	sp, #12
 800cd3a:	af00      	add	r7, sp, #0
 800cd3c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd44:	b2db      	uxtb	r3, r3
 800cd46:	2b04      	cmp	r3, #4
 800cd48:	d106      	bne.n	800cd58 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800cd50:	b2da      	uxtb	r2, r3
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800cd58:	2300      	movs	r3, #0
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	370c      	adds	r7, #12
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd64:	4770      	bx	lr

0800cd66 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cd66:	b580      	push	{r7, lr}
 800cd68:	b082      	sub	sp, #8
 800cd6a:	af00      	add	r7, sp, #0
 800cd6c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd74:	b2db      	uxtb	r3, r3
 800cd76:	2b03      	cmp	r3, #3
 800cd78:	d110      	bne.n	800cd9c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d00b      	beq.n	800cd9c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd8a:	69db      	ldr	r3, [r3, #28]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d005      	beq.n	800cd9c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd96:	69db      	ldr	r3, [r3, #28]
 800cd98:	6878      	ldr	r0, [r7, #4]
 800cd9a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cd9c:	2300      	movs	r3, #0
}
 800cd9e:	4618      	mov	r0, r3
 800cda0:	3708      	adds	r7, #8
 800cda2:	46bd      	mov	sp, r7
 800cda4:	bd80      	pop	{r7, pc}

0800cda6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cda6:	b480      	push	{r7}
 800cda8:	b083      	sub	sp, #12
 800cdaa:	af00      	add	r7, sp, #0
 800cdac:	6078      	str	r0, [r7, #4]
 800cdae:	460b      	mov	r3, r1
 800cdb0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cdb2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	370c      	adds	r7, #12
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbe:	4770      	bx	lr

0800cdc0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b083      	sub	sp, #12
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	460b      	mov	r3, r1
 800cdca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cdcc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	370c      	adds	r7, #12
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdd8:	4770      	bx	lr

0800cdda <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800cdda:	b580      	push	{r7, lr}
 800cddc:	b086      	sub	sp, #24
 800cdde:	af00      	add	r7, sp, #0
 800cde0:	6078      	str	r0, [r7, #4]
 800cde2:	460b      	mov	r3, r1
 800cde4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	885b      	ldrh	r3, [r3, #2]
 800cdf6:	b29b      	uxth	r3, r3
 800cdf8:	68fa      	ldr	r2, [r7, #12]
 800cdfa:	7812      	ldrb	r2, [r2, #0]
 800cdfc:	4293      	cmp	r3, r2
 800cdfe:	d91f      	bls.n	800ce40 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	781b      	ldrb	r3, [r3, #0]
 800ce04:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ce06:	e013      	b.n	800ce30 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ce08:	f107 030a 	add.w	r3, r7, #10
 800ce0c:	4619      	mov	r1, r3
 800ce0e:	6978      	ldr	r0, [r7, #20]
 800ce10:	f000 f81b 	bl	800ce4a <USBD_GetNextDesc>
 800ce14:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	785b      	ldrb	r3, [r3, #1]
 800ce1a:	2b05      	cmp	r3, #5
 800ce1c:	d108      	bne.n	800ce30 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ce22:	693b      	ldr	r3, [r7, #16]
 800ce24:	789b      	ldrb	r3, [r3, #2]
 800ce26:	78fa      	ldrb	r2, [r7, #3]
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	d008      	beq.n	800ce3e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	885b      	ldrh	r3, [r3, #2]
 800ce34:	b29a      	uxth	r2, r3
 800ce36:	897b      	ldrh	r3, [r7, #10]
 800ce38:	429a      	cmp	r2, r3
 800ce3a:	d8e5      	bhi.n	800ce08 <USBD_GetEpDesc+0x2e>
 800ce3c:	e000      	b.n	800ce40 <USBD_GetEpDesc+0x66>
          break;
 800ce3e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ce40:	693b      	ldr	r3, [r7, #16]
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	3718      	adds	r7, #24
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}

0800ce4a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ce4a:	b480      	push	{r7}
 800ce4c:	b085      	sub	sp, #20
 800ce4e:	af00      	add	r7, sp, #0
 800ce50:	6078      	str	r0, [r7, #4]
 800ce52:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	881b      	ldrh	r3, [r3, #0]
 800ce5c:	68fa      	ldr	r2, [r7, #12]
 800ce5e:	7812      	ldrb	r2, [r2, #0]
 800ce60:	4413      	add	r3, r2
 800ce62:	b29a      	uxth	r2, r3
 800ce64:	683b      	ldr	r3, [r7, #0]
 800ce66:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	781b      	ldrb	r3, [r3, #0]
 800ce6c:	461a      	mov	r2, r3
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	4413      	add	r3, r2
 800ce72:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ce74:	68fb      	ldr	r3, [r7, #12]
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	3714      	adds	r7, #20
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce80:	4770      	bx	lr

0800ce82 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ce82:	b480      	push	{r7}
 800ce84:	b087      	sub	sp, #28
 800ce86:	af00      	add	r7, sp, #0
 800ce88:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ce8e:	697b      	ldr	r3, [r7, #20]
 800ce90:	781b      	ldrb	r3, [r3, #0]
 800ce92:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	3301      	adds	r3, #1
 800ce98:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	781b      	ldrb	r3, [r3, #0]
 800ce9e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cea0:	8a3b      	ldrh	r3, [r7, #16]
 800cea2:	021b      	lsls	r3, r3, #8
 800cea4:	b21a      	sxth	r2, r3
 800cea6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ceaa:	4313      	orrs	r3, r2
 800ceac:	b21b      	sxth	r3, r3
 800ceae:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ceb0:	89fb      	ldrh	r3, [r7, #14]
}
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	371c      	adds	r7, #28
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebc:	4770      	bx	lr
	...

0800cec0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b084      	sub	sp, #16
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ceca:	2300      	movs	r3, #0
 800cecc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	781b      	ldrb	r3, [r3, #0]
 800ced2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ced6:	2b40      	cmp	r3, #64	@ 0x40
 800ced8:	d005      	beq.n	800cee6 <USBD_StdDevReq+0x26>
 800ceda:	2b40      	cmp	r3, #64	@ 0x40
 800cedc:	d857      	bhi.n	800cf8e <USBD_StdDevReq+0xce>
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d00f      	beq.n	800cf02 <USBD_StdDevReq+0x42>
 800cee2:	2b20      	cmp	r3, #32
 800cee4:	d153      	bne.n	800cf8e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	32ae      	adds	r2, #174	@ 0xae
 800cef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cef4:	689b      	ldr	r3, [r3, #8]
 800cef6:	6839      	ldr	r1, [r7, #0]
 800cef8:	6878      	ldr	r0, [r7, #4]
 800cefa:	4798      	blx	r3
 800cefc:	4603      	mov	r3, r0
 800cefe:	73fb      	strb	r3, [r7, #15]
      break;
 800cf00:	e04a      	b.n	800cf98 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cf02:	683b      	ldr	r3, [r7, #0]
 800cf04:	785b      	ldrb	r3, [r3, #1]
 800cf06:	2b09      	cmp	r3, #9
 800cf08:	d83b      	bhi.n	800cf82 <USBD_StdDevReq+0xc2>
 800cf0a:	a201      	add	r2, pc, #4	@ (adr r2, 800cf10 <USBD_StdDevReq+0x50>)
 800cf0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf10:	0800cf65 	.word	0x0800cf65
 800cf14:	0800cf79 	.word	0x0800cf79
 800cf18:	0800cf83 	.word	0x0800cf83
 800cf1c:	0800cf6f 	.word	0x0800cf6f
 800cf20:	0800cf83 	.word	0x0800cf83
 800cf24:	0800cf43 	.word	0x0800cf43
 800cf28:	0800cf39 	.word	0x0800cf39
 800cf2c:	0800cf83 	.word	0x0800cf83
 800cf30:	0800cf5b 	.word	0x0800cf5b
 800cf34:	0800cf4d 	.word	0x0800cf4d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cf38:	6839      	ldr	r1, [r7, #0]
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f000 fa3c 	bl	800d3b8 <USBD_GetDescriptor>
          break;
 800cf40:	e024      	b.n	800cf8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cf42:	6839      	ldr	r1, [r7, #0]
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f000 fbcb 	bl	800d6e0 <USBD_SetAddress>
          break;
 800cf4a:	e01f      	b.n	800cf8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cf4c:	6839      	ldr	r1, [r7, #0]
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f000 fc0a 	bl	800d768 <USBD_SetConfig>
 800cf54:	4603      	mov	r3, r0
 800cf56:	73fb      	strb	r3, [r7, #15]
          break;
 800cf58:	e018      	b.n	800cf8c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cf5a:	6839      	ldr	r1, [r7, #0]
 800cf5c:	6878      	ldr	r0, [r7, #4]
 800cf5e:	f000 fcad 	bl	800d8bc <USBD_GetConfig>
          break;
 800cf62:	e013      	b.n	800cf8c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cf64:	6839      	ldr	r1, [r7, #0]
 800cf66:	6878      	ldr	r0, [r7, #4]
 800cf68:	f000 fcde 	bl	800d928 <USBD_GetStatus>
          break;
 800cf6c:	e00e      	b.n	800cf8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cf6e:	6839      	ldr	r1, [r7, #0]
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f000 fd0d 	bl	800d990 <USBD_SetFeature>
          break;
 800cf76:	e009      	b.n	800cf8c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cf78:	6839      	ldr	r1, [r7, #0]
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f000 fd31 	bl	800d9e2 <USBD_ClrFeature>
          break;
 800cf80:	e004      	b.n	800cf8c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800cf82:	6839      	ldr	r1, [r7, #0]
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f000 fd88 	bl	800da9a <USBD_CtlError>
          break;
 800cf8a:	bf00      	nop
      }
      break;
 800cf8c:	e004      	b.n	800cf98 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800cf8e:	6839      	ldr	r1, [r7, #0]
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	f000 fd82 	bl	800da9a <USBD_CtlError>
      break;
 800cf96:	bf00      	nop
  }

  return ret;
 800cf98:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	3710      	adds	r7, #16
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	bd80      	pop	{r7, pc}
 800cfa2:	bf00      	nop

0800cfa4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b084      	sub	sp, #16
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
 800cfac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	781b      	ldrb	r3, [r3, #0]
 800cfb6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cfba:	2b40      	cmp	r3, #64	@ 0x40
 800cfbc:	d005      	beq.n	800cfca <USBD_StdItfReq+0x26>
 800cfbe:	2b40      	cmp	r3, #64	@ 0x40
 800cfc0:	d852      	bhi.n	800d068 <USBD_StdItfReq+0xc4>
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d001      	beq.n	800cfca <USBD_StdItfReq+0x26>
 800cfc6:	2b20      	cmp	r3, #32
 800cfc8:	d14e      	bne.n	800d068 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cfd0:	b2db      	uxtb	r3, r3
 800cfd2:	3b01      	subs	r3, #1
 800cfd4:	2b02      	cmp	r3, #2
 800cfd6:	d840      	bhi.n	800d05a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cfd8:	683b      	ldr	r3, [r7, #0]
 800cfda:	889b      	ldrh	r3, [r3, #4]
 800cfdc:	b2db      	uxtb	r3, r3
 800cfde:	2b01      	cmp	r3, #1
 800cfe0:	d836      	bhi.n	800d050 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	889b      	ldrh	r3, [r3, #4]
 800cfe6:	b2db      	uxtb	r3, r3
 800cfe8:	4619      	mov	r1, r3
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f7ff fedb 	bl	800cda6 <USBD_CoreFindIF>
 800cff0:	4603      	mov	r3, r0
 800cff2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cff4:	7bbb      	ldrb	r3, [r7, #14]
 800cff6:	2bff      	cmp	r3, #255	@ 0xff
 800cff8:	d01d      	beq.n	800d036 <USBD_StdItfReq+0x92>
 800cffa:	7bbb      	ldrb	r3, [r7, #14]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d11a      	bne.n	800d036 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d000:	7bba      	ldrb	r2, [r7, #14]
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	32ae      	adds	r2, #174	@ 0xae
 800d006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d00a:	689b      	ldr	r3, [r3, #8]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d00f      	beq.n	800d030 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d010:	7bba      	ldrb	r2, [r7, #14]
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d018:	7bba      	ldrb	r2, [r7, #14]
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	32ae      	adds	r2, #174	@ 0xae
 800d01e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d022:	689b      	ldr	r3, [r3, #8]
 800d024:	6839      	ldr	r1, [r7, #0]
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	4798      	blx	r3
 800d02a:	4603      	mov	r3, r0
 800d02c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d02e:	e004      	b.n	800d03a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d030:	2303      	movs	r3, #3
 800d032:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d034:	e001      	b.n	800d03a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d036:	2303      	movs	r3, #3
 800d038:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	88db      	ldrh	r3, [r3, #6]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d110      	bne.n	800d064 <USBD_StdItfReq+0xc0>
 800d042:	7bfb      	ldrb	r3, [r7, #15]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d10d      	bne.n	800d064 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d048:	6878      	ldr	r0, [r7, #4]
 800d04a:	f000 fdfd 	bl	800dc48 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d04e:	e009      	b.n	800d064 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d050:	6839      	ldr	r1, [r7, #0]
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	f000 fd21 	bl	800da9a <USBD_CtlError>
          break;
 800d058:	e004      	b.n	800d064 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d05a:	6839      	ldr	r1, [r7, #0]
 800d05c:	6878      	ldr	r0, [r7, #4]
 800d05e:	f000 fd1c 	bl	800da9a <USBD_CtlError>
          break;
 800d062:	e000      	b.n	800d066 <USBD_StdItfReq+0xc2>
          break;
 800d064:	bf00      	nop
      }
      break;
 800d066:	e004      	b.n	800d072 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d068:	6839      	ldr	r1, [r7, #0]
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f000 fd15 	bl	800da9a <USBD_CtlError>
      break;
 800d070:	bf00      	nop
  }

  return ret;
 800d072:	7bfb      	ldrb	r3, [r7, #15]
}
 800d074:	4618      	mov	r0, r3
 800d076:	3710      	adds	r7, #16
 800d078:	46bd      	mov	sp, r7
 800d07a:	bd80      	pop	{r7, pc}

0800d07c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b084      	sub	sp, #16
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d086:	2300      	movs	r3, #0
 800d088:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	889b      	ldrh	r3, [r3, #4]
 800d08e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	781b      	ldrb	r3, [r3, #0]
 800d094:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d098:	2b40      	cmp	r3, #64	@ 0x40
 800d09a:	d007      	beq.n	800d0ac <USBD_StdEPReq+0x30>
 800d09c:	2b40      	cmp	r3, #64	@ 0x40
 800d09e:	f200 817f 	bhi.w	800d3a0 <USBD_StdEPReq+0x324>
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d02a      	beq.n	800d0fc <USBD_StdEPReq+0x80>
 800d0a6:	2b20      	cmp	r3, #32
 800d0a8:	f040 817a 	bne.w	800d3a0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d0ac:	7bbb      	ldrb	r3, [r7, #14]
 800d0ae:	4619      	mov	r1, r3
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f7ff fe85 	bl	800cdc0 <USBD_CoreFindEP>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d0ba:	7b7b      	ldrb	r3, [r7, #13]
 800d0bc:	2bff      	cmp	r3, #255	@ 0xff
 800d0be:	f000 8174 	beq.w	800d3aa <USBD_StdEPReq+0x32e>
 800d0c2:	7b7b      	ldrb	r3, [r7, #13]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	f040 8170 	bne.w	800d3aa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d0ca:	7b7a      	ldrb	r2, [r7, #13]
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d0d2:	7b7a      	ldrb	r2, [r7, #13]
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	32ae      	adds	r2, #174	@ 0xae
 800d0d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0dc:	689b      	ldr	r3, [r3, #8]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	f000 8163 	beq.w	800d3aa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d0e4:	7b7a      	ldrb	r2, [r7, #13]
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	32ae      	adds	r2, #174	@ 0xae
 800d0ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0ee:	689b      	ldr	r3, [r3, #8]
 800d0f0:	6839      	ldr	r1, [r7, #0]
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	4798      	blx	r3
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d0fa:	e156      	b.n	800d3aa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	785b      	ldrb	r3, [r3, #1]
 800d100:	2b03      	cmp	r3, #3
 800d102:	d008      	beq.n	800d116 <USBD_StdEPReq+0x9a>
 800d104:	2b03      	cmp	r3, #3
 800d106:	f300 8145 	bgt.w	800d394 <USBD_StdEPReq+0x318>
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	f000 809b 	beq.w	800d246 <USBD_StdEPReq+0x1ca>
 800d110:	2b01      	cmp	r3, #1
 800d112:	d03c      	beq.n	800d18e <USBD_StdEPReq+0x112>
 800d114:	e13e      	b.n	800d394 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d11c:	b2db      	uxtb	r3, r3
 800d11e:	2b02      	cmp	r3, #2
 800d120:	d002      	beq.n	800d128 <USBD_StdEPReq+0xac>
 800d122:	2b03      	cmp	r3, #3
 800d124:	d016      	beq.n	800d154 <USBD_StdEPReq+0xd8>
 800d126:	e02c      	b.n	800d182 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d128:	7bbb      	ldrb	r3, [r7, #14]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d00d      	beq.n	800d14a <USBD_StdEPReq+0xce>
 800d12e:	7bbb      	ldrb	r3, [r7, #14]
 800d130:	2b80      	cmp	r3, #128	@ 0x80
 800d132:	d00a      	beq.n	800d14a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d134:	7bbb      	ldrb	r3, [r7, #14]
 800d136:	4619      	mov	r1, r3
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f001 f98f 	bl	800e45c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d13e:	2180      	movs	r1, #128	@ 0x80
 800d140:	6878      	ldr	r0, [r7, #4]
 800d142:	f001 f98b 	bl	800e45c <USBD_LL_StallEP>
 800d146:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d148:	e020      	b.n	800d18c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d14a:	6839      	ldr	r1, [r7, #0]
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f000 fca4 	bl	800da9a <USBD_CtlError>
              break;
 800d152:	e01b      	b.n	800d18c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	885b      	ldrh	r3, [r3, #2]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d10e      	bne.n	800d17a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d15c:	7bbb      	ldrb	r3, [r7, #14]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d00b      	beq.n	800d17a <USBD_StdEPReq+0xfe>
 800d162:	7bbb      	ldrb	r3, [r7, #14]
 800d164:	2b80      	cmp	r3, #128	@ 0x80
 800d166:	d008      	beq.n	800d17a <USBD_StdEPReq+0xfe>
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	88db      	ldrh	r3, [r3, #6]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d104      	bne.n	800d17a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d170:	7bbb      	ldrb	r3, [r7, #14]
 800d172:	4619      	mov	r1, r3
 800d174:	6878      	ldr	r0, [r7, #4]
 800d176:	f001 f971 	bl	800e45c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f000 fd64 	bl	800dc48 <USBD_CtlSendStatus>

              break;
 800d180:	e004      	b.n	800d18c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d182:	6839      	ldr	r1, [r7, #0]
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f000 fc88 	bl	800da9a <USBD_CtlError>
              break;
 800d18a:	bf00      	nop
          }
          break;
 800d18c:	e107      	b.n	800d39e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d194:	b2db      	uxtb	r3, r3
 800d196:	2b02      	cmp	r3, #2
 800d198:	d002      	beq.n	800d1a0 <USBD_StdEPReq+0x124>
 800d19a:	2b03      	cmp	r3, #3
 800d19c:	d016      	beq.n	800d1cc <USBD_StdEPReq+0x150>
 800d19e:	e04b      	b.n	800d238 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d1a0:	7bbb      	ldrb	r3, [r7, #14]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d00d      	beq.n	800d1c2 <USBD_StdEPReq+0x146>
 800d1a6:	7bbb      	ldrb	r3, [r7, #14]
 800d1a8:	2b80      	cmp	r3, #128	@ 0x80
 800d1aa:	d00a      	beq.n	800d1c2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d1ac:	7bbb      	ldrb	r3, [r7, #14]
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	6878      	ldr	r0, [r7, #4]
 800d1b2:	f001 f953 	bl	800e45c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d1b6:	2180      	movs	r1, #128	@ 0x80
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f001 f94f 	bl	800e45c <USBD_LL_StallEP>
 800d1be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d1c0:	e040      	b.n	800d244 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d1c2:	6839      	ldr	r1, [r7, #0]
 800d1c4:	6878      	ldr	r0, [r7, #4]
 800d1c6:	f000 fc68 	bl	800da9a <USBD_CtlError>
              break;
 800d1ca:	e03b      	b.n	800d244 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d1cc:	683b      	ldr	r3, [r7, #0]
 800d1ce:	885b      	ldrh	r3, [r3, #2]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d136      	bne.n	800d242 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d1d4:	7bbb      	ldrb	r3, [r7, #14]
 800d1d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d004      	beq.n	800d1e8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d1de:	7bbb      	ldrb	r3, [r7, #14]
 800d1e0:	4619      	mov	r1, r3
 800d1e2:	6878      	ldr	r0, [r7, #4]
 800d1e4:	f001 f959 	bl	800e49a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f000 fd2d 	bl	800dc48 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d1ee:	7bbb      	ldrb	r3, [r7, #14]
 800d1f0:	4619      	mov	r1, r3
 800d1f2:	6878      	ldr	r0, [r7, #4]
 800d1f4:	f7ff fde4 	bl	800cdc0 <USBD_CoreFindEP>
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d1fc:	7b7b      	ldrb	r3, [r7, #13]
 800d1fe:	2bff      	cmp	r3, #255	@ 0xff
 800d200:	d01f      	beq.n	800d242 <USBD_StdEPReq+0x1c6>
 800d202:	7b7b      	ldrb	r3, [r7, #13]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d11c      	bne.n	800d242 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d208:	7b7a      	ldrb	r2, [r7, #13]
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d210:	7b7a      	ldrb	r2, [r7, #13]
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	32ae      	adds	r2, #174	@ 0xae
 800d216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d21a:	689b      	ldr	r3, [r3, #8]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d010      	beq.n	800d242 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d220:	7b7a      	ldrb	r2, [r7, #13]
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	32ae      	adds	r2, #174	@ 0xae
 800d226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d22a:	689b      	ldr	r3, [r3, #8]
 800d22c:	6839      	ldr	r1, [r7, #0]
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	4798      	blx	r3
 800d232:	4603      	mov	r3, r0
 800d234:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d236:	e004      	b.n	800d242 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d238:	6839      	ldr	r1, [r7, #0]
 800d23a:	6878      	ldr	r0, [r7, #4]
 800d23c:	f000 fc2d 	bl	800da9a <USBD_CtlError>
              break;
 800d240:	e000      	b.n	800d244 <USBD_StdEPReq+0x1c8>
              break;
 800d242:	bf00      	nop
          }
          break;
 800d244:	e0ab      	b.n	800d39e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d24c:	b2db      	uxtb	r3, r3
 800d24e:	2b02      	cmp	r3, #2
 800d250:	d002      	beq.n	800d258 <USBD_StdEPReq+0x1dc>
 800d252:	2b03      	cmp	r3, #3
 800d254:	d032      	beq.n	800d2bc <USBD_StdEPReq+0x240>
 800d256:	e097      	b.n	800d388 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d258:	7bbb      	ldrb	r3, [r7, #14]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d007      	beq.n	800d26e <USBD_StdEPReq+0x1f2>
 800d25e:	7bbb      	ldrb	r3, [r7, #14]
 800d260:	2b80      	cmp	r3, #128	@ 0x80
 800d262:	d004      	beq.n	800d26e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d264:	6839      	ldr	r1, [r7, #0]
 800d266:	6878      	ldr	r0, [r7, #4]
 800d268:	f000 fc17 	bl	800da9a <USBD_CtlError>
                break;
 800d26c:	e091      	b.n	800d392 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d26e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d272:	2b00      	cmp	r3, #0
 800d274:	da0b      	bge.n	800d28e <USBD_StdEPReq+0x212>
 800d276:	7bbb      	ldrb	r3, [r7, #14]
 800d278:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d27c:	4613      	mov	r3, r2
 800d27e:	009b      	lsls	r3, r3, #2
 800d280:	4413      	add	r3, r2
 800d282:	009b      	lsls	r3, r3, #2
 800d284:	3310      	adds	r3, #16
 800d286:	687a      	ldr	r2, [r7, #4]
 800d288:	4413      	add	r3, r2
 800d28a:	3304      	adds	r3, #4
 800d28c:	e00b      	b.n	800d2a6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d28e:	7bbb      	ldrb	r3, [r7, #14]
 800d290:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d294:	4613      	mov	r3, r2
 800d296:	009b      	lsls	r3, r3, #2
 800d298:	4413      	add	r3, r2
 800d29a:	009b      	lsls	r3, r3, #2
 800d29c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d2a0:	687a      	ldr	r2, [r7, #4]
 800d2a2:	4413      	add	r3, r2
 800d2a4:	3304      	adds	r3, #4
 800d2a6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	2202      	movs	r2, #2
 800d2b2:	4619      	mov	r1, r3
 800d2b4:	6878      	ldr	r0, [r7, #4]
 800d2b6:	f000 fc6d 	bl	800db94 <USBD_CtlSendData>
              break;
 800d2ba:	e06a      	b.n	800d392 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d2bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	da11      	bge.n	800d2e8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d2c4:	7bbb      	ldrb	r3, [r7, #14]
 800d2c6:	f003 020f 	and.w	r2, r3, #15
 800d2ca:	6879      	ldr	r1, [r7, #4]
 800d2cc:	4613      	mov	r3, r2
 800d2ce:	009b      	lsls	r3, r3, #2
 800d2d0:	4413      	add	r3, r2
 800d2d2:	009b      	lsls	r3, r3, #2
 800d2d4:	440b      	add	r3, r1
 800d2d6:	3324      	adds	r3, #36	@ 0x24
 800d2d8:	881b      	ldrh	r3, [r3, #0]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d117      	bne.n	800d30e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d2de:	6839      	ldr	r1, [r7, #0]
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f000 fbda 	bl	800da9a <USBD_CtlError>
                  break;
 800d2e6:	e054      	b.n	800d392 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d2e8:	7bbb      	ldrb	r3, [r7, #14]
 800d2ea:	f003 020f 	and.w	r2, r3, #15
 800d2ee:	6879      	ldr	r1, [r7, #4]
 800d2f0:	4613      	mov	r3, r2
 800d2f2:	009b      	lsls	r3, r3, #2
 800d2f4:	4413      	add	r3, r2
 800d2f6:	009b      	lsls	r3, r3, #2
 800d2f8:	440b      	add	r3, r1
 800d2fa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d2fe:	881b      	ldrh	r3, [r3, #0]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d104      	bne.n	800d30e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d304:	6839      	ldr	r1, [r7, #0]
 800d306:	6878      	ldr	r0, [r7, #4]
 800d308:	f000 fbc7 	bl	800da9a <USBD_CtlError>
                  break;
 800d30c:	e041      	b.n	800d392 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d30e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d312:	2b00      	cmp	r3, #0
 800d314:	da0b      	bge.n	800d32e <USBD_StdEPReq+0x2b2>
 800d316:	7bbb      	ldrb	r3, [r7, #14]
 800d318:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d31c:	4613      	mov	r3, r2
 800d31e:	009b      	lsls	r3, r3, #2
 800d320:	4413      	add	r3, r2
 800d322:	009b      	lsls	r3, r3, #2
 800d324:	3310      	adds	r3, #16
 800d326:	687a      	ldr	r2, [r7, #4]
 800d328:	4413      	add	r3, r2
 800d32a:	3304      	adds	r3, #4
 800d32c:	e00b      	b.n	800d346 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d32e:	7bbb      	ldrb	r3, [r7, #14]
 800d330:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d334:	4613      	mov	r3, r2
 800d336:	009b      	lsls	r3, r3, #2
 800d338:	4413      	add	r3, r2
 800d33a:	009b      	lsls	r3, r3, #2
 800d33c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d340:	687a      	ldr	r2, [r7, #4]
 800d342:	4413      	add	r3, r2
 800d344:	3304      	adds	r3, #4
 800d346:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d348:	7bbb      	ldrb	r3, [r7, #14]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d002      	beq.n	800d354 <USBD_StdEPReq+0x2d8>
 800d34e:	7bbb      	ldrb	r3, [r7, #14]
 800d350:	2b80      	cmp	r3, #128	@ 0x80
 800d352:	d103      	bne.n	800d35c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d354:	68bb      	ldr	r3, [r7, #8]
 800d356:	2200      	movs	r2, #0
 800d358:	601a      	str	r2, [r3, #0]
 800d35a:	e00e      	b.n	800d37a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d35c:	7bbb      	ldrb	r3, [r7, #14]
 800d35e:	4619      	mov	r1, r3
 800d360:	6878      	ldr	r0, [r7, #4]
 800d362:	f001 f8b9 	bl	800e4d8 <USBD_LL_IsStallEP>
 800d366:	4603      	mov	r3, r0
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d003      	beq.n	800d374 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d36c:	68bb      	ldr	r3, [r7, #8]
 800d36e:	2201      	movs	r2, #1
 800d370:	601a      	str	r2, [r3, #0]
 800d372:	e002      	b.n	800d37a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	2200      	movs	r2, #0
 800d378:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	2202      	movs	r2, #2
 800d37e:	4619      	mov	r1, r3
 800d380:	6878      	ldr	r0, [r7, #4]
 800d382:	f000 fc07 	bl	800db94 <USBD_CtlSendData>
              break;
 800d386:	e004      	b.n	800d392 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d388:	6839      	ldr	r1, [r7, #0]
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f000 fb85 	bl	800da9a <USBD_CtlError>
              break;
 800d390:	bf00      	nop
          }
          break;
 800d392:	e004      	b.n	800d39e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d394:	6839      	ldr	r1, [r7, #0]
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f000 fb7f 	bl	800da9a <USBD_CtlError>
          break;
 800d39c:	bf00      	nop
      }
      break;
 800d39e:	e005      	b.n	800d3ac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d3a0:	6839      	ldr	r1, [r7, #0]
 800d3a2:	6878      	ldr	r0, [r7, #4]
 800d3a4:	f000 fb79 	bl	800da9a <USBD_CtlError>
      break;
 800d3a8:	e000      	b.n	800d3ac <USBD_StdEPReq+0x330>
      break;
 800d3aa:	bf00      	nop
  }

  return ret;
 800d3ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	3710      	adds	r7, #16
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}
	...

0800d3b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b084      	sub	sp, #16
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
 800d3c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	885b      	ldrh	r3, [r3, #2]
 800d3d2:	0a1b      	lsrs	r3, r3, #8
 800d3d4:	b29b      	uxth	r3, r3
 800d3d6:	3b01      	subs	r3, #1
 800d3d8:	2b0e      	cmp	r3, #14
 800d3da:	f200 8152 	bhi.w	800d682 <USBD_GetDescriptor+0x2ca>
 800d3de:	a201      	add	r2, pc, #4	@ (adr r2, 800d3e4 <USBD_GetDescriptor+0x2c>)
 800d3e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3e4:	0800d455 	.word	0x0800d455
 800d3e8:	0800d46d 	.word	0x0800d46d
 800d3ec:	0800d4ad 	.word	0x0800d4ad
 800d3f0:	0800d683 	.word	0x0800d683
 800d3f4:	0800d683 	.word	0x0800d683
 800d3f8:	0800d623 	.word	0x0800d623
 800d3fc:	0800d64f 	.word	0x0800d64f
 800d400:	0800d683 	.word	0x0800d683
 800d404:	0800d683 	.word	0x0800d683
 800d408:	0800d683 	.word	0x0800d683
 800d40c:	0800d683 	.word	0x0800d683
 800d410:	0800d683 	.word	0x0800d683
 800d414:	0800d683 	.word	0x0800d683
 800d418:	0800d683 	.word	0x0800d683
 800d41c:	0800d421 	.word	0x0800d421
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d426:	69db      	ldr	r3, [r3, #28]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d00b      	beq.n	800d444 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d432:	69db      	ldr	r3, [r3, #28]
 800d434:	687a      	ldr	r2, [r7, #4]
 800d436:	7c12      	ldrb	r2, [r2, #16]
 800d438:	f107 0108 	add.w	r1, r7, #8
 800d43c:	4610      	mov	r0, r2
 800d43e:	4798      	blx	r3
 800d440:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d442:	e126      	b.n	800d692 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d444:	6839      	ldr	r1, [r7, #0]
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f000 fb27 	bl	800da9a <USBD_CtlError>
        err++;
 800d44c:	7afb      	ldrb	r3, [r7, #11]
 800d44e:	3301      	adds	r3, #1
 800d450:	72fb      	strb	r3, [r7, #11]
      break;
 800d452:	e11e      	b.n	800d692 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	687a      	ldr	r2, [r7, #4]
 800d45e:	7c12      	ldrb	r2, [r2, #16]
 800d460:	f107 0108 	add.w	r1, r7, #8
 800d464:	4610      	mov	r0, r2
 800d466:	4798      	blx	r3
 800d468:	60f8      	str	r0, [r7, #12]
      break;
 800d46a:	e112      	b.n	800d692 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	7c1b      	ldrb	r3, [r3, #16]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d10d      	bne.n	800d490 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d47a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d47c:	f107 0208 	add.w	r2, r7, #8
 800d480:	4610      	mov	r0, r2
 800d482:	4798      	blx	r3
 800d484:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	3301      	adds	r3, #1
 800d48a:	2202      	movs	r2, #2
 800d48c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d48e:	e100      	b.n	800d692 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d498:	f107 0208 	add.w	r2, r7, #8
 800d49c:	4610      	mov	r0, r2
 800d49e:	4798      	blx	r3
 800d4a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	3301      	adds	r3, #1
 800d4a6:	2202      	movs	r2, #2
 800d4a8:	701a      	strb	r2, [r3, #0]
      break;
 800d4aa:	e0f2      	b.n	800d692 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	885b      	ldrh	r3, [r3, #2]
 800d4b0:	b2db      	uxtb	r3, r3
 800d4b2:	2b05      	cmp	r3, #5
 800d4b4:	f200 80ac 	bhi.w	800d610 <USBD_GetDescriptor+0x258>
 800d4b8:	a201      	add	r2, pc, #4	@ (adr r2, 800d4c0 <USBD_GetDescriptor+0x108>)
 800d4ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4be:	bf00      	nop
 800d4c0:	0800d4d9 	.word	0x0800d4d9
 800d4c4:	0800d50d 	.word	0x0800d50d
 800d4c8:	0800d541 	.word	0x0800d541
 800d4cc:	0800d575 	.word	0x0800d575
 800d4d0:	0800d5a9 	.word	0x0800d5a9
 800d4d4:	0800d5dd 	.word	0x0800d5dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d4de:	685b      	ldr	r3, [r3, #4]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d00b      	beq.n	800d4fc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d4ea:	685b      	ldr	r3, [r3, #4]
 800d4ec:	687a      	ldr	r2, [r7, #4]
 800d4ee:	7c12      	ldrb	r2, [r2, #16]
 800d4f0:	f107 0108 	add.w	r1, r7, #8
 800d4f4:	4610      	mov	r0, r2
 800d4f6:	4798      	blx	r3
 800d4f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d4fa:	e091      	b.n	800d620 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d4fc:	6839      	ldr	r1, [r7, #0]
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f000 facb 	bl	800da9a <USBD_CtlError>
            err++;
 800d504:	7afb      	ldrb	r3, [r7, #11]
 800d506:	3301      	adds	r3, #1
 800d508:	72fb      	strb	r3, [r7, #11]
          break;
 800d50a:	e089      	b.n	800d620 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d512:	689b      	ldr	r3, [r3, #8]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d00b      	beq.n	800d530 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d51e:	689b      	ldr	r3, [r3, #8]
 800d520:	687a      	ldr	r2, [r7, #4]
 800d522:	7c12      	ldrb	r2, [r2, #16]
 800d524:	f107 0108 	add.w	r1, r7, #8
 800d528:	4610      	mov	r0, r2
 800d52a:	4798      	blx	r3
 800d52c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d52e:	e077      	b.n	800d620 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d530:	6839      	ldr	r1, [r7, #0]
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f000 fab1 	bl	800da9a <USBD_CtlError>
            err++;
 800d538:	7afb      	ldrb	r3, [r7, #11]
 800d53a:	3301      	adds	r3, #1
 800d53c:	72fb      	strb	r3, [r7, #11]
          break;
 800d53e:	e06f      	b.n	800d620 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d546:	68db      	ldr	r3, [r3, #12]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d00b      	beq.n	800d564 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d552:	68db      	ldr	r3, [r3, #12]
 800d554:	687a      	ldr	r2, [r7, #4]
 800d556:	7c12      	ldrb	r2, [r2, #16]
 800d558:	f107 0108 	add.w	r1, r7, #8
 800d55c:	4610      	mov	r0, r2
 800d55e:	4798      	blx	r3
 800d560:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d562:	e05d      	b.n	800d620 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d564:	6839      	ldr	r1, [r7, #0]
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f000 fa97 	bl	800da9a <USBD_CtlError>
            err++;
 800d56c:	7afb      	ldrb	r3, [r7, #11]
 800d56e:	3301      	adds	r3, #1
 800d570:	72fb      	strb	r3, [r7, #11]
          break;
 800d572:	e055      	b.n	800d620 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d57a:	691b      	ldr	r3, [r3, #16]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d00b      	beq.n	800d598 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d586:	691b      	ldr	r3, [r3, #16]
 800d588:	687a      	ldr	r2, [r7, #4]
 800d58a:	7c12      	ldrb	r2, [r2, #16]
 800d58c:	f107 0108 	add.w	r1, r7, #8
 800d590:	4610      	mov	r0, r2
 800d592:	4798      	blx	r3
 800d594:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d596:	e043      	b.n	800d620 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d598:	6839      	ldr	r1, [r7, #0]
 800d59a:	6878      	ldr	r0, [r7, #4]
 800d59c:	f000 fa7d 	bl	800da9a <USBD_CtlError>
            err++;
 800d5a0:	7afb      	ldrb	r3, [r7, #11]
 800d5a2:	3301      	adds	r3, #1
 800d5a4:	72fb      	strb	r3, [r7, #11]
          break;
 800d5a6:	e03b      	b.n	800d620 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5ae:	695b      	ldr	r3, [r3, #20]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d00b      	beq.n	800d5cc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5ba:	695b      	ldr	r3, [r3, #20]
 800d5bc:	687a      	ldr	r2, [r7, #4]
 800d5be:	7c12      	ldrb	r2, [r2, #16]
 800d5c0:	f107 0108 	add.w	r1, r7, #8
 800d5c4:	4610      	mov	r0, r2
 800d5c6:	4798      	blx	r3
 800d5c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d5ca:	e029      	b.n	800d620 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d5cc:	6839      	ldr	r1, [r7, #0]
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f000 fa63 	bl	800da9a <USBD_CtlError>
            err++;
 800d5d4:	7afb      	ldrb	r3, [r7, #11]
 800d5d6:	3301      	adds	r3, #1
 800d5d8:	72fb      	strb	r3, [r7, #11]
          break;
 800d5da:	e021      	b.n	800d620 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5e2:	699b      	ldr	r3, [r3, #24]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d00b      	beq.n	800d600 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5ee:	699b      	ldr	r3, [r3, #24]
 800d5f0:	687a      	ldr	r2, [r7, #4]
 800d5f2:	7c12      	ldrb	r2, [r2, #16]
 800d5f4:	f107 0108 	add.w	r1, r7, #8
 800d5f8:	4610      	mov	r0, r2
 800d5fa:	4798      	blx	r3
 800d5fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d5fe:	e00f      	b.n	800d620 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d600:	6839      	ldr	r1, [r7, #0]
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f000 fa49 	bl	800da9a <USBD_CtlError>
            err++;
 800d608:	7afb      	ldrb	r3, [r7, #11]
 800d60a:	3301      	adds	r3, #1
 800d60c:	72fb      	strb	r3, [r7, #11]
          break;
 800d60e:	e007      	b.n	800d620 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d610:	6839      	ldr	r1, [r7, #0]
 800d612:	6878      	ldr	r0, [r7, #4]
 800d614:	f000 fa41 	bl	800da9a <USBD_CtlError>
          err++;
 800d618:	7afb      	ldrb	r3, [r7, #11]
 800d61a:	3301      	adds	r3, #1
 800d61c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d61e:	bf00      	nop
      }
      break;
 800d620:	e037      	b.n	800d692 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	7c1b      	ldrb	r3, [r3, #16]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d109      	bne.n	800d63e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d630:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d632:	f107 0208 	add.w	r2, r7, #8
 800d636:	4610      	mov	r0, r2
 800d638:	4798      	blx	r3
 800d63a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d63c:	e029      	b.n	800d692 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d63e:	6839      	ldr	r1, [r7, #0]
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f000 fa2a 	bl	800da9a <USBD_CtlError>
        err++;
 800d646:	7afb      	ldrb	r3, [r7, #11]
 800d648:	3301      	adds	r3, #1
 800d64a:	72fb      	strb	r3, [r7, #11]
      break;
 800d64c:	e021      	b.n	800d692 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	7c1b      	ldrb	r3, [r3, #16]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d10d      	bne.n	800d672 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d65c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d65e:	f107 0208 	add.w	r2, r7, #8
 800d662:	4610      	mov	r0, r2
 800d664:	4798      	blx	r3
 800d666:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	3301      	adds	r3, #1
 800d66c:	2207      	movs	r2, #7
 800d66e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d670:	e00f      	b.n	800d692 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d672:	6839      	ldr	r1, [r7, #0]
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	f000 fa10 	bl	800da9a <USBD_CtlError>
        err++;
 800d67a:	7afb      	ldrb	r3, [r7, #11]
 800d67c:	3301      	adds	r3, #1
 800d67e:	72fb      	strb	r3, [r7, #11]
      break;
 800d680:	e007      	b.n	800d692 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d682:	6839      	ldr	r1, [r7, #0]
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	f000 fa08 	bl	800da9a <USBD_CtlError>
      err++;
 800d68a:	7afb      	ldrb	r3, [r7, #11]
 800d68c:	3301      	adds	r3, #1
 800d68e:	72fb      	strb	r3, [r7, #11]
      break;
 800d690:	bf00      	nop
  }

  if (err != 0U)
 800d692:	7afb      	ldrb	r3, [r7, #11]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d11e      	bne.n	800d6d6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	88db      	ldrh	r3, [r3, #6]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d016      	beq.n	800d6ce <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d6a0:	893b      	ldrh	r3, [r7, #8]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d00e      	beq.n	800d6c4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	88da      	ldrh	r2, [r3, #6]
 800d6aa:	893b      	ldrh	r3, [r7, #8]
 800d6ac:	4293      	cmp	r3, r2
 800d6ae:	bf28      	it	cs
 800d6b0:	4613      	movcs	r3, r2
 800d6b2:	b29b      	uxth	r3, r3
 800d6b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d6b6:	893b      	ldrh	r3, [r7, #8]
 800d6b8:	461a      	mov	r2, r3
 800d6ba:	68f9      	ldr	r1, [r7, #12]
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f000 fa69 	bl	800db94 <USBD_CtlSendData>
 800d6c2:	e009      	b.n	800d6d8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d6c4:	6839      	ldr	r1, [r7, #0]
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	f000 f9e7 	bl	800da9a <USBD_CtlError>
 800d6cc:	e004      	b.n	800d6d8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f000 faba 	bl	800dc48 <USBD_CtlSendStatus>
 800d6d4:	e000      	b.n	800d6d8 <USBD_GetDescriptor+0x320>
    return;
 800d6d6:	bf00      	nop
  }
}
 800d6d8:	3710      	adds	r7, #16
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}
 800d6de:	bf00      	nop

0800d6e0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b084      	sub	sp, #16
 800d6e4:	af00      	add	r7, sp, #0
 800d6e6:	6078      	str	r0, [r7, #4]
 800d6e8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	889b      	ldrh	r3, [r3, #4]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d131      	bne.n	800d756 <USBD_SetAddress+0x76>
 800d6f2:	683b      	ldr	r3, [r7, #0]
 800d6f4:	88db      	ldrh	r3, [r3, #6]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d12d      	bne.n	800d756 <USBD_SetAddress+0x76>
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	885b      	ldrh	r3, [r3, #2]
 800d6fe:	2b7f      	cmp	r3, #127	@ 0x7f
 800d700:	d829      	bhi.n	800d756 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	885b      	ldrh	r3, [r3, #2]
 800d706:	b2db      	uxtb	r3, r3
 800d708:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d70c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d714:	b2db      	uxtb	r3, r3
 800d716:	2b03      	cmp	r3, #3
 800d718:	d104      	bne.n	800d724 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d71a:	6839      	ldr	r1, [r7, #0]
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f000 f9bc 	bl	800da9a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d722:	e01d      	b.n	800d760 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	7bfa      	ldrb	r2, [r7, #15]
 800d728:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d72c:	7bfb      	ldrb	r3, [r7, #15]
 800d72e:	4619      	mov	r1, r3
 800d730:	6878      	ldr	r0, [r7, #4]
 800d732:	f000 fefd 	bl	800e530 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f000 fa86 	bl	800dc48 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d73c:	7bfb      	ldrb	r3, [r7, #15]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d004      	beq.n	800d74c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2202      	movs	r2, #2
 800d746:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d74a:	e009      	b.n	800d760 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2201      	movs	r2, #1
 800d750:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d754:	e004      	b.n	800d760 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d756:	6839      	ldr	r1, [r7, #0]
 800d758:	6878      	ldr	r0, [r7, #4]
 800d75a:	f000 f99e 	bl	800da9a <USBD_CtlError>
  }
}
 800d75e:	bf00      	nop
 800d760:	bf00      	nop
 800d762:	3710      	adds	r7, #16
 800d764:	46bd      	mov	sp, r7
 800d766:	bd80      	pop	{r7, pc}

0800d768 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b084      	sub	sp, #16
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
 800d770:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d772:	2300      	movs	r3, #0
 800d774:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d776:	683b      	ldr	r3, [r7, #0]
 800d778:	885b      	ldrh	r3, [r3, #2]
 800d77a:	b2da      	uxtb	r2, r3
 800d77c:	4b4e      	ldr	r3, [pc, #312]	@ (800d8b8 <USBD_SetConfig+0x150>)
 800d77e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d780:	4b4d      	ldr	r3, [pc, #308]	@ (800d8b8 <USBD_SetConfig+0x150>)
 800d782:	781b      	ldrb	r3, [r3, #0]
 800d784:	2b01      	cmp	r3, #1
 800d786:	d905      	bls.n	800d794 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d788:	6839      	ldr	r1, [r7, #0]
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f000 f985 	bl	800da9a <USBD_CtlError>
    return USBD_FAIL;
 800d790:	2303      	movs	r3, #3
 800d792:	e08c      	b.n	800d8ae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d79a:	b2db      	uxtb	r3, r3
 800d79c:	2b02      	cmp	r3, #2
 800d79e:	d002      	beq.n	800d7a6 <USBD_SetConfig+0x3e>
 800d7a0:	2b03      	cmp	r3, #3
 800d7a2:	d029      	beq.n	800d7f8 <USBD_SetConfig+0x90>
 800d7a4:	e075      	b.n	800d892 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d7a6:	4b44      	ldr	r3, [pc, #272]	@ (800d8b8 <USBD_SetConfig+0x150>)
 800d7a8:	781b      	ldrb	r3, [r3, #0]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d020      	beq.n	800d7f0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d7ae:	4b42      	ldr	r3, [pc, #264]	@ (800d8b8 <USBD_SetConfig+0x150>)
 800d7b0:	781b      	ldrb	r3, [r3, #0]
 800d7b2:	461a      	mov	r2, r3
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d7b8:	4b3f      	ldr	r3, [pc, #252]	@ (800d8b8 <USBD_SetConfig+0x150>)
 800d7ba:	781b      	ldrb	r3, [r3, #0]
 800d7bc:	4619      	mov	r1, r3
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f7ff f84b 	bl	800c85a <USBD_SetClassConfig>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d7c8:	7bfb      	ldrb	r3, [r7, #15]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d008      	beq.n	800d7e0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d7ce:	6839      	ldr	r1, [r7, #0]
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	f000 f962 	bl	800da9a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	2202      	movs	r2, #2
 800d7da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d7de:	e065      	b.n	800d8ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d7e0:	6878      	ldr	r0, [r7, #4]
 800d7e2:	f000 fa31 	bl	800dc48 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	2203      	movs	r2, #3
 800d7ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d7ee:	e05d      	b.n	800d8ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d7f0:	6878      	ldr	r0, [r7, #4]
 800d7f2:	f000 fa29 	bl	800dc48 <USBD_CtlSendStatus>
      break;
 800d7f6:	e059      	b.n	800d8ac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d7f8:	4b2f      	ldr	r3, [pc, #188]	@ (800d8b8 <USBD_SetConfig+0x150>)
 800d7fa:	781b      	ldrb	r3, [r3, #0]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d112      	bne.n	800d826 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2202      	movs	r2, #2
 800d804:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d808:	4b2b      	ldr	r3, [pc, #172]	@ (800d8b8 <USBD_SetConfig+0x150>)
 800d80a:	781b      	ldrb	r3, [r3, #0]
 800d80c:	461a      	mov	r2, r3
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d812:	4b29      	ldr	r3, [pc, #164]	@ (800d8b8 <USBD_SetConfig+0x150>)
 800d814:	781b      	ldrb	r3, [r3, #0]
 800d816:	4619      	mov	r1, r3
 800d818:	6878      	ldr	r0, [r7, #4]
 800d81a:	f7ff f83a 	bl	800c892 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f000 fa12 	bl	800dc48 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d824:	e042      	b.n	800d8ac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d826:	4b24      	ldr	r3, [pc, #144]	@ (800d8b8 <USBD_SetConfig+0x150>)
 800d828:	781b      	ldrb	r3, [r3, #0]
 800d82a:	461a      	mov	r2, r3
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	685b      	ldr	r3, [r3, #4]
 800d830:	429a      	cmp	r2, r3
 800d832:	d02a      	beq.n	800d88a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	685b      	ldr	r3, [r3, #4]
 800d838:	b2db      	uxtb	r3, r3
 800d83a:	4619      	mov	r1, r3
 800d83c:	6878      	ldr	r0, [r7, #4]
 800d83e:	f7ff f828 	bl	800c892 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d842:	4b1d      	ldr	r3, [pc, #116]	@ (800d8b8 <USBD_SetConfig+0x150>)
 800d844:	781b      	ldrb	r3, [r3, #0]
 800d846:	461a      	mov	r2, r3
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d84c:	4b1a      	ldr	r3, [pc, #104]	@ (800d8b8 <USBD_SetConfig+0x150>)
 800d84e:	781b      	ldrb	r3, [r3, #0]
 800d850:	4619      	mov	r1, r3
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	f7ff f801 	bl	800c85a <USBD_SetClassConfig>
 800d858:	4603      	mov	r3, r0
 800d85a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d85c:	7bfb      	ldrb	r3, [r7, #15]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d00f      	beq.n	800d882 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d862:	6839      	ldr	r1, [r7, #0]
 800d864:	6878      	ldr	r0, [r7, #4]
 800d866:	f000 f918 	bl	800da9a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	685b      	ldr	r3, [r3, #4]
 800d86e:	b2db      	uxtb	r3, r3
 800d870:	4619      	mov	r1, r3
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f7ff f80d 	bl	800c892 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2202      	movs	r2, #2
 800d87c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d880:	e014      	b.n	800d8ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d882:	6878      	ldr	r0, [r7, #4]
 800d884:	f000 f9e0 	bl	800dc48 <USBD_CtlSendStatus>
      break;
 800d888:	e010      	b.n	800d8ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f000 f9dc 	bl	800dc48 <USBD_CtlSendStatus>
      break;
 800d890:	e00c      	b.n	800d8ac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d892:	6839      	ldr	r1, [r7, #0]
 800d894:	6878      	ldr	r0, [r7, #4]
 800d896:	f000 f900 	bl	800da9a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d89a:	4b07      	ldr	r3, [pc, #28]	@ (800d8b8 <USBD_SetConfig+0x150>)
 800d89c:	781b      	ldrb	r3, [r3, #0]
 800d89e:	4619      	mov	r1, r3
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f7fe fff6 	bl	800c892 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d8a6:	2303      	movs	r3, #3
 800d8a8:	73fb      	strb	r3, [r7, #15]
      break;
 800d8aa:	bf00      	nop
  }

  return ret;
 800d8ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	3710      	adds	r7, #16
 800d8b2:	46bd      	mov	sp, r7
 800d8b4:	bd80      	pop	{r7, pc}
 800d8b6:	bf00      	nop
 800d8b8:	20000550 	.word	0x20000550

0800d8bc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b082      	sub	sp, #8
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
 800d8c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	88db      	ldrh	r3, [r3, #6]
 800d8ca:	2b01      	cmp	r3, #1
 800d8cc:	d004      	beq.n	800d8d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d8ce:	6839      	ldr	r1, [r7, #0]
 800d8d0:	6878      	ldr	r0, [r7, #4]
 800d8d2:	f000 f8e2 	bl	800da9a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d8d6:	e023      	b.n	800d920 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d8de:	b2db      	uxtb	r3, r3
 800d8e0:	2b02      	cmp	r3, #2
 800d8e2:	dc02      	bgt.n	800d8ea <USBD_GetConfig+0x2e>
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	dc03      	bgt.n	800d8f0 <USBD_GetConfig+0x34>
 800d8e8:	e015      	b.n	800d916 <USBD_GetConfig+0x5a>
 800d8ea:	2b03      	cmp	r3, #3
 800d8ec:	d00b      	beq.n	800d906 <USBD_GetConfig+0x4a>
 800d8ee:	e012      	b.n	800d916 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	3308      	adds	r3, #8
 800d8fa:	2201      	movs	r2, #1
 800d8fc:	4619      	mov	r1, r3
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f000 f948 	bl	800db94 <USBD_CtlSendData>
        break;
 800d904:	e00c      	b.n	800d920 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	3304      	adds	r3, #4
 800d90a:	2201      	movs	r2, #1
 800d90c:	4619      	mov	r1, r3
 800d90e:	6878      	ldr	r0, [r7, #4]
 800d910:	f000 f940 	bl	800db94 <USBD_CtlSendData>
        break;
 800d914:	e004      	b.n	800d920 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d916:	6839      	ldr	r1, [r7, #0]
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f000 f8be 	bl	800da9a <USBD_CtlError>
        break;
 800d91e:	bf00      	nop
}
 800d920:	bf00      	nop
 800d922:	3708      	adds	r7, #8
 800d924:	46bd      	mov	sp, r7
 800d926:	bd80      	pop	{r7, pc}

0800d928 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b082      	sub	sp, #8
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
 800d930:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d938:	b2db      	uxtb	r3, r3
 800d93a:	3b01      	subs	r3, #1
 800d93c:	2b02      	cmp	r3, #2
 800d93e:	d81e      	bhi.n	800d97e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	88db      	ldrh	r3, [r3, #6]
 800d944:	2b02      	cmp	r3, #2
 800d946:	d004      	beq.n	800d952 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d948:	6839      	ldr	r1, [r7, #0]
 800d94a:	6878      	ldr	r0, [r7, #4]
 800d94c:	f000 f8a5 	bl	800da9a <USBD_CtlError>
        break;
 800d950:	e01a      	b.n	800d988 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	2201      	movs	r2, #1
 800d956:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d005      	beq.n	800d96e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	68db      	ldr	r3, [r3, #12]
 800d966:	f043 0202 	orr.w	r2, r3, #2
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	330c      	adds	r3, #12
 800d972:	2202      	movs	r2, #2
 800d974:	4619      	mov	r1, r3
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	f000 f90c 	bl	800db94 <USBD_CtlSendData>
      break;
 800d97c:	e004      	b.n	800d988 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d97e:	6839      	ldr	r1, [r7, #0]
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	f000 f88a 	bl	800da9a <USBD_CtlError>
      break;
 800d986:	bf00      	nop
  }
}
 800d988:	bf00      	nop
 800d98a:	3708      	adds	r7, #8
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}

0800d990 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b082      	sub	sp, #8
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
 800d998:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	885b      	ldrh	r3, [r3, #2]
 800d99e:	2b01      	cmp	r3, #1
 800d9a0:	d107      	bne.n	800d9b2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	2201      	movs	r2, #1
 800d9a6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f000 f94c 	bl	800dc48 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d9b0:	e013      	b.n	800d9da <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	885b      	ldrh	r3, [r3, #2]
 800d9b6:	2b02      	cmp	r3, #2
 800d9b8:	d10b      	bne.n	800d9d2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	889b      	ldrh	r3, [r3, #4]
 800d9be:	0a1b      	lsrs	r3, r3, #8
 800d9c0:	b29b      	uxth	r3, r3
 800d9c2:	b2da      	uxtb	r2, r3
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d9ca:	6878      	ldr	r0, [r7, #4]
 800d9cc:	f000 f93c 	bl	800dc48 <USBD_CtlSendStatus>
}
 800d9d0:	e003      	b.n	800d9da <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d9d2:	6839      	ldr	r1, [r7, #0]
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f000 f860 	bl	800da9a <USBD_CtlError>
}
 800d9da:	bf00      	nop
 800d9dc:	3708      	adds	r7, #8
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}

0800d9e2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9e2:	b580      	push	{r7, lr}
 800d9e4:	b082      	sub	sp, #8
 800d9e6:	af00      	add	r7, sp, #0
 800d9e8:	6078      	str	r0, [r7, #4]
 800d9ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d9f2:	b2db      	uxtb	r3, r3
 800d9f4:	3b01      	subs	r3, #1
 800d9f6:	2b02      	cmp	r3, #2
 800d9f8:	d80b      	bhi.n	800da12 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	885b      	ldrh	r3, [r3, #2]
 800d9fe:	2b01      	cmp	r3, #1
 800da00:	d10c      	bne.n	800da1c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2200      	movs	r2, #0
 800da06:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f000 f91c 	bl	800dc48 <USBD_CtlSendStatus>
      }
      break;
 800da10:	e004      	b.n	800da1c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800da12:	6839      	ldr	r1, [r7, #0]
 800da14:	6878      	ldr	r0, [r7, #4]
 800da16:	f000 f840 	bl	800da9a <USBD_CtlError>
      break;
 800da1a:	e000      	b.n	800da1e <USBD_ClrFeature+0x3c>
      break;
 800da1c:	bf00      	nop
  }
}
 800da1e:	bf00      	nop
 800da20:	3708      	adds	r7, #8
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}

0800da26 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800da26:	b580      	push	{r7, lr}
 800da28:	b084      	sub	sp, #16
 800da2a:	af00      	add	r7, sp, #0
 800da2c:	6078      	str	r0, [r7, #4]
 800da2e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	781a      	ldrb	r2, [r3, #0]
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	3301      	adds	r3, #1
 800da40:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	781a      	ldrb	r2, [r3, #0]
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	3301      	adds	r3, #1
 800da4e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800da50:	68f8      	ldr	r0, [r7, #12]
 800da52:	f7ff fa16 	bl	800ce82 <SWAPBYTE>
 800da56:	4603      	mov	r3, r0
 800da58:	461a      	mov	r2, r3
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	3301      	adds	r3, #1
 800da62:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	3301      	adds	r3, #1
 800da68:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800da6a:	68f8      	ldr	r0, [r7, #12]
 800da6c:	f7ff fa09 	bl	800ce82 <SWAPBYTE>
 800da70:	4603      	mov	r3, r0
 800da72:	461a      	mov	r2, r3
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	3301      	adds	r3, #1
 800da7c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	3301      	adds	r3, #1
 800da82:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800da84:	68f8      	ldr	r0, [r7, #12]
 800da86:	f7ff f9fc 	bl	800ce82 <SWAPBYTE>
 800da8a:	4603      	mov	r3, r0
 800da8c:	461a      	mov	r2, r3
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	80da      	strh	r2, [r3, #6]
}
 800da92:	bf00      	nop
 800da94:	3710      	adds	r7, #16
 800da96:	46bd      	mov	sp, r7
 800da98:	bd80      	pop	{r7, pc}

0800da9a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da9a:	b580      	push	{r7, lr}
 800da9c:	b082      	sub	sp, #8
 800da9e:	af00      	add	r7, sp, #0
 800daa0:	6078      	str	r0, [r7, #4]
 800daa2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800daa4:	2180      	movs	r1, #128	@ 0x80
 800daa6:	6878      	ldr	r0, [r7, #4]
 800daa8:	f000 fcd8 	bl	800e45c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800daac:	2100      	movs	r1, #0
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f000 fcd4 	bl	800e45c <USBD_LL_StallEP>
}
 800dab4:	bf00      	nop
 800dab6:	3708      	adds	r7, #8
 800dab8:	46bd      	mov	sp, r7
 800daba:	bd80      	pop	{r7, pc}

0800dabc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b086      	sub	sp, #24
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	60f8      	str	r0, [r7, #12]
 800dac4:	60b9      	str	r1, [r7, #8]
 800dac6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800dac8:	2300      	movs	r3, #0
 800daca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d042      	beq.n	800db58 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800dad6:	6938      	ldr	r0, [r7, #16]
 800dad8:	f000 f842 	bl	800db60 <USBD_GetLen>
 800dadc:	4603      	mov	r3, r0
 800dade:	3301      	adds	r3, #1
 800dae0:	005b      	lsls	r3, r3, #1
 800dae2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dae6:	d808      	bhi.n	800dafa <USBD_GetString+0x3e>
 800dae8:	6938      	ldr	r0, [r7, #16]
 800daea:	f000 f839 	bl	800db60 <USBD_GetLen>
 800daee:	4603      	mov	r3, r0
 800daf0:	3301      	adds	r3, #1
 800daf2:	b29b      	uxth	r3, r3
 800daf4:	005b      	lsls	r3, r3, #1
 800daf6:	b29a      	uxth	r2, r3
 800daf8:	e001      	b.n	800dafe <USBD_GetString+0x42>
 800dafa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800db02:	7dfb      	ldrb	r3, [r7, #23]
 800db04:	68ba      	ldr	r2, [r7, #8]
 800db06:	4413      	add	r3, r2
 800db08:	687a      	ldr	r2, [r7, #4]
 800db0a:	7812      	ldrb	r2, [r2, #0]
 800db0c:	701a      	strb	r2, [r3, #0]
  idx++;
 800db0e:	7dfb      	ldrb	r3, [r7, #23]
 800db10:	3301      	adds	r3, #1
 800db12:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800db14:	7dfb      	ldrb	r3, [r7, #23]
 800db16:	68ba      	ldr	r2, [r7, #8]
 800db18:	4413      	add	r3, r2
 800db1a:	2203      	movs	r2, #3
 800db1c:	701a      	strb	r2, [r3, #0]
  idx++;
 800db1e:	7dfb      	ldrb	r3, [r7, #23]
 800db20:	3301      	adds	r3, #1
 800db22:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800db24:	e013      	b.n	800db4e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800db26:	7dfb      	ldrb	r3, [r7, #23]
 800db28:	68ba      	ldr	r2, [r7, #8]
 800db2a:	4413      	add	r3, r2
 800db2c:	693a      	ldr	r2, [r7, #16]
 800db2e:	7812      	ldrb	r2, [r2, #0]
 800db30:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800db32:	693b      	ldr	r3, [r7, #16]
 800db34:	3301      	adds	r3, #1
 800db36:	613b      	str	r3, [r7, #16]
    idx++;
 800db38:	7dfb      	ldrb	r3, [r7, #23]
 800db3a:	3301      	adds	r3, #1
 800db3c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800db3e:	7dfb      	ldrb	r3, [r7, #23]
 800db40:	68ba      	ldr	r2, [r7, #8]
 800db42:	4413      	add	r3, r2
 800db44:	2200      	movs	r2, #0
 800db46:	701a      	strb	r2, [r3, #0]
    idx++;
 800db48:	7dfb      	ldrb	r3, [r7, #23]
 800db4a:	3301      	adds	r3, #1
 800db4c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800db4e:	693b      	ldr	r3, [r7, #16]
 800db50:	781b      	ldrb	r3, [r3, #0]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d1e7      	bne.n	800db26 <USBD_GetString+0x6a>
 800db56:	e000      	b.n	800db5a <USBD_GetString+0x9e>
    return;
 800db58:	bf00      	nop
  }
}
 800db5a:	3718      	adds	r7, #24
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}

0800db60 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800db60:	b480      	push	{r7}
 800db62:	b085      	sub	sp, #20
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800db68:	2300      	movs	r3, #0
 800db6a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800db70:	e005      	b.n	800db7e <USBD_GetLen+0x1e>
  {
    len++;
 800db72:	7bfb      	ldrb	r3, [r7, #15]
 800db74:	3301      	adds	r3, #1
 800db76:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800db78:	68bb      	ldr	r3, [r7, #8]
 800db7a:	3301      	adds	r3, #1
 800db7c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800db7e:	68bb      	ldr	r3, [r7, #8]
 800db80:	781b      	ldrb	r3, [r3, #0]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d1f5      	bne.n	800db72 <USBD_GetLen+0x12>
  }

  return len;
 800db86:	7bfb      	ldrb	r3, [r7, #15]
}
 800db88:	4618      	mov	r0, r3
 800db8a:	3714      	adds	r7, #20
 800db8c:	46bd      	mov	sp, r7
 800db8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db92:	4770      	bx	lr

0800db94 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800db94:	b580      	push	{r7, lr}
 800db96:	b084      	sub	sp, #16
 800db98:	af00      	add	r7, sp, #0
 800db9a:	60f8      	str	r0, [r7, #12]
 800db9c:	60b9      	str	r1, [r7, #8]
 800db9e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	2202      	movs	r2, #2
 800dba4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	687a      	ldr	r2, [r7, #4]
 800dbac:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	687a      	ldr	r2, [r7, #4]
 800dbb2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	68ba      	ldr	r2, [r7, #8]
 800dbb8:	2100      	movs	r1, #0
 800dbba:	68f8      	ldr	r0, [r7, #12]
 800dbbc:	f000 fcd7 	bl	800e56e <USBD_LL_Transmit>

  return USBD_OK;
 800dbc0:	2300      	movs	r3, #0
}
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	3710      	adds	r7, #16
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bd80      	pop	{r7, pc}

0800dbca <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dbca:	b580      	push	{r7, lr}
 800dbcc:	b084      	sub	sp, #16
 800dbce:	af00      	add	r7, sp, #0
 800dbd0:	60f8      	str	r0, [r7, #12]
 800dbd2:	60b9      	str	r1, [r7, #8]
 800dbd4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	68ba      	ldr	r2, [r7, #8]
 800dbda:	2100      	movs	r1, #0
 800dbdc:	68f8      	ldr	r0, [r7, #12]
 800dbde:	f000 fcc6 	bl	800e56e <USBD_LL_Transmit>

  return USBD_OK;
 800dbe2:	2300      	movs	r3, #0
}
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	3710      	adds	r7, #16
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bd80      	pop	{r7, pc}

0800dbec <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b084      	sub	sp, #16
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	60f8      	str	r0, [r7, #12]
 800dbf4:	60b9      	str	r1, [r7, #8]
 800dbf6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	2203      	movs	r2, #3
 800dbfc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	687a      	ldr	r2, [r7, #4]
 800dc04:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	687a      	ldr	r2, [r7, #4]
 800dc0c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	68ba      	ldr	r2, [r7, #8]
 800dc14:	2100      	movs	r1, #0
 800dc16:	68f8      	ldr	r0, [r7, #12]
 800dc18:	f000 fcca 	bl	800e5b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dc1c:	2300      	movs	r3, #0
}
 800dc1e:	4618      	mov	r0, r3
 800dc20:	3710      	adds	r7, #16
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}

0800dc26 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800dc26:	b580      	push	{r7, lr}
 800dc28:	b084      	sub	sp, #16
 800dc2a:	af00      	add	r7, sp, #0
 800dc2c:	60f8      	str	r0, [r7, #12]
 800dc2e:	60b9      	str	r1, [r7, #8]
 800dc30:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	68ba      	ldr	r2, [r7, #8]
 800dc36:	2100      	movs	r1, #0
 800dc38:	68f8      	ldr	r0, [r7, #12]
 800dc3a:	f000 fcb9 	bl	800e5b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dc3e:	2300      	movs	r3, #0
}
 800dc40:	4618      	mov	r0, r3
 800dc42:	3710      	adds	r7, #16
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}

0800dc48 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b082      	sub	sp, #8
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2204      	movs	r2, #4
 800dc54:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dc58:	2300      	movs	r3, #0
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	2100      	movs	r1, #0
 800dc5e:	6878      	ldr	r0, [r7, #4]
 800dc60:	f000 fc85 	bl	800e56e <USBD_LL_Transmit>

  return USBD_OK;
 800dc64:	2300      	movs	r3, #0
}
 800dc66:	4618      	mov	r0, r3
 800dc68:	3708      	adds	r7, #8
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}

0800dc6e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dc6e:	b580      	push	{r7, lr}
 800dc70:	b082      	sub	sp, #8
 800dc72:	af00      	add	r7, sp, #0
 800dc74:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	2205      	movs	r2, #5
 800dc7a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dc7e:	2300      	movs	r3, #0
 800dc80:	2200      	movs	r2, #0
 800dc82:	2100      	movs	r1, #0
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f000 fc93 	bl	800e5b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dc8a:	2300      	movs	r3, #0
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3708      	adds	r7, #8
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}

0800dc94 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800dc98:	2200      	movs	r2, #0
 800dc9a:	4912      	ldr	r1, [pc, #72]	@ (800dce4 <MX_USB_Device_Init+0x50>)
 800dc9c:	4812      	ldr	r0, [pc, #72]	@ (800dce8 <MX_USB_Device_Init+0x54>)
 800dc9e:	f7fe fd43 	bl	800c728 <USBD_Init>
 800dca2:	4603      	mov	r3, r0
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d001      	beq.n	800dcac <MX_USB_Device_Init+0x18>
    Error_Handler();
 800dca8:	f7f3 fbac 	bl	8001404 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800dcac:	490f      	ldr	r1, [pc, #60]	@ (800dcec <MX_USB_Device_Init+0x58>)
 800dcae:	480e      	ldr	r0, [pc, #56]	@ (800dce8 <MX_USB_Device_Init+0x54>)
 800dcb0:	f7fe fd78 	bl	800c7a4 <USBD_RegisterClass>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d001      	beq.n	800dcbe <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800dcba:	f7f3 fba3 	bl	8001404 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800dcbe:	490c      	ldr	r1, [pc, #48]	@ (800dcf0 <MX_USB_Device_Init+0x5c>)
 800dcc0:	4809      	ldr	r0, [pc, #36]	@ (800dce8 <MX_USB_Device_Init+0x54>)
 800dcc2:	f7fe fc61 	bl	800c588 <USBD_CDC_RegisterInterface>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d001      	beq.n	800dcd0 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800dccc:	f7f3 fb9a 	bl	8001404 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800dcd0:	4805      	ldr	r0, [pc, #20]	@ (800dce8 <MX_USB_Device_Init+0x54>)
 800dcd2:	f7fe fdab 	bl	800c82c <USBD_Start>
 800dcd6:	4603      	mov	r3, r0
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d001      	beq.n	800dce0 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800dcdc:	f7f3 fb92 	bl	8001404 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800dce0:	bf00      	nop
 800dce2:	bd80      	pop	{r7, pc}
 800dce4:	200000d0 	.word	0x200000d0
 800dce8:	20000554 	.word	0x20000554
 800dcec:	2000003c 	.word	0x2000003c
 800dcf0:	200000bc 	.word	0x200000bc

0800dcf4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	4905      	ldr	r1, [pc, #20]	@ (800dd10 <CDC_Init_FS+0x1c>)
 800dcfc:	4805      	ldr	r0, [pc, #20]	@ (800dd14 <CDC_Init_FS+0x20>)
 800dcfe:	f7fe fc5d 	bl	800c5bc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800dd02:	4905      	ldr	r1, [pc, #20]	@ (800dd18 <CDC_Init_FS+0x24>)
 800dd04:	4803      	ldr	r0, [pc, #12]	@ (800dd14 <CDC_Init_FS+0x20>)
 800dd06:	f7fe fc7b 	bl	800c600 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800dd0a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	bd80      	pop	{r7, pc}
 800dd10:	20001030 	.word	0x20001030
 800dd14:	20000554 	.word	0x20000554
 800dd18:	20000830 	.word	0x20000830

0800dd1c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800dd20:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800dd22:	4618      	mov	r0, r3
 800dd24:	46bd      	mov	sp, r7
 800dd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2a:	4770      	bx	lr

0800dd2c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dd2c:	b480      	push	{r7}
 800dd2e:	b083      	sub	sp, #12
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	4603      	mov	r3, r0
 800dd34:	6039      	str	r1, [r7, #0]
 800dd36:	71fb      	strb	r3, [r7, #7]
 800dd38:	4613      	mov	r3, r2
 800dd3a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800dd3c:	79fb      	ldrb	r3, [r7, #7]
 800dd3e:	2b23      	cmp	r3, #35	@ 0x23
 800dd40:	d84a      	bhi.n	800ddd8 <CDC_Control_FS+0xac>
 800dd42:	a201      	add	r2, pc, #4	@ (adr r2, 800dd48 <CDC_Control_FS+0x1c>)
 800dd44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd48:	0800ddd9 	.word	0x0800ddd9
 800dd4c:	0800ddd9 	.word	0x0800ddd9
 800dd50:	0800ddd9 	.word	0x0800ddd9
 800dd54:	0800ddd9 	.word	0x0800ddd9
 800dd58:	0800ddd9 	.word	0x0800ddd9
 800dd5c:	0800ddd9 	.word	0x0800ddd9
 800dd60:	0800ddd9 	.word	0x0800ddd9
 800dd64:	0800ddd9 	.word	0x0800ddd9
 800dd68:	0800ddd9 	.word	0x0800ddd9
 800dd6c:	0800ddd9 	.word	0x0800ddd9
 800dd70:	0800ddd9 	.word	0x0800ddd9
 800dd74:	0800ddd9 	.word	0x0800ddd9
 800dd78:	0800ddd9 	.word	0x0800ddd9
 800dd7c:	0800ddd9 	.word	0x0800ddd9
 800dd80:	0800ddd9 	.word	0x0800ddd9
 800dd84:	0800ddd9 	.word	0x0800ddd9
 800dd88:	0800ddd9 	.word	0x0800ddd9
 800dd8c:	0800ddd9 	.word	0x0800ddd9
 800dd90:	0800ddd9 	.word	0x0800ddd9
 800dd94:	0800ddd9 	.word	0x0800ddd9
 800dd98:	0800ddd9 	.word	0x0800ddd9
 800dd9c:	0800ddd9 	.word	0x0800ddd9
 800dda0:	0800ddd9 	.word	0x0800ddd9
 800dda4:	0800ddd9 	.word	0x0800ddd9
 800dda8:	0800ddd9 	.word	0x0800ddd9
 800ddac:	0800ddd9 	.word	0x0800ddd9
 800ddb0:	0800ddd9 	.word	0x0800ddd9
 800ddb4:	0800ddd9 	.word	0x0800ddd9
 800ddb8:	0800ddd9 	.word	0x0800ddd9
 800ddbc:	0800ddd9 	.word	0x0800ddd9
 800ddc0:	0800ddd9 	.word	0x0800ddd9
 800ddc4:	0800ddd9 	.word	0x0800ddd9
 800ddc8:	0800ddd9 	.word	0x0800ddd9
 800ddcc:	0800ddd9 	.word	0x0800ddd9
 800ddd0:	0800ddd9 	.word	0x0800ddd9
 800ddd4:	0800ddd9 	.word	0x0800ddd9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ddd8:	bf00      	nop
  }

  return (USBD_OK);
 800ddda:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800dddc:	4618      	mov	r0, r3
 800ddde:	370c      	adds	r7, #12
 800dde0:	46bd      	mov	sp, r7
 800dde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde6:	4770      	bx	lr

0800dde8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b082      	sub	sp, #8
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
 800ddf0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ddf2:	6879      	ldr	r1, [r7, #4]
 800ddf4:	4805      	ldr	r0, [pc, #20]	@ (800de0c <CDC_Receive_FS+0x24>)
 800ddf6:	f7fe fc03 	bl	800c600 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ddfa:	4804      	ldr	r0, [pc, #16]	@ (800de0c <CDC_Receive_FS+0x24>)
 800ddfc:	f7fe fc5e 	bl	800c6bc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800de00:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800de02:	4618      	mov	r0, r3
 800de04:	3708      	adds	r7, #8
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}
 800de0a:	bf00      	nop
 800de0c:	20000554 	.word	0x20000554

0800de10 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b084      	sub	sp, #16
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
 800de18:	460b      	mov	r3, r1
 800de1a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800de1c:	2300      	movs	r3, #0
 800de1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800de20:	4b0d      	ldr	r3, [pc, #52]	@ (800de58 <CDC_Transmit_FS+0x48>)
 800de22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800de26:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d001      	beq.n	800de36 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800de32:	2301      	movs	r3, #1
 800de34:	e00b      	b.n	800de4e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800de36:	887b      	ldrh	r3, [r7, #2]
 800de38:	461a      	mov	r2, r3
 800de3a:	6879      	ldr	r1, [r7, #4]
 800de3c:	4806      	ldr	r0, [pc, #24]	@ (800de58 <CDC_Transmit_FS+0x48>)
 800de3e:	f7fe fbbd 	bl	800c5bc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800de42:	4805      	ldr	r0, [pc, #20]	@ (800de58 <CDC_Transmit_FS+0x48>)
 800de44:	f7fe fbfa 	bl	800c63c <USBD_CDC_TransmitPacket>
 800de48:	4603      	mov	r3, r0
 800de4a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800de4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800de4e:	4618      	mov	r0, r3
 800de50:	3710      	adds	r7, #16
 800de52:	46bd      	mov	sp, r7
 800de54:	bd80      	pop	{r7, pc}
 800de56:	bf00      	nop
 800de58:	20000554 	.word	0x20000554

0800de5c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800de5c:	b480      	push	{r7}
 800de5e:	b087      	sub	sp, #28
 800de60:	af00      	add	r7, sp, #0
 800de62:	60f8      	str	r0, [r7, #12]
 800de64:	60b9      	str	r1, [r7, #8]
 800de66:	4613      	mov	r3, r2
 800de68:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800de6a:	2300      	movs	r3, #0
 800de6c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800de6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800de72:	4618      	mov	r0, r3
 800de74:	371c      	adds	r7, #28
 800de76:	46bd      	mov	sp, r7
 800de78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7c:	4770      	bx	lr
	...

0800de80 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de80:	b480      	push	{r7}
 800de82:	b083      	sub	sp, #12
 800de84:	af00      	add	r7, sp, #0
 800de86:	4603      	mov	r3, r0
 800de88:	6039      	str	r1, [r7, #0]
 800de8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	2212      	movs	r2, #18
 800de90:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800de92:	4b03      	ldr	r3, [pc, #12]	@ (800dea0 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800de94:	4618      	mov	r0, r3
 800de96:	370c      	adds	r7, #12
 800de98:	46bd      	mov	sp, r7
 800de9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9e:	4770      	bx	lr
 800dea0:	200000f0 	.word	0x200000f0

0800dea4 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dea4:	b480      	push	{r7}
 800dea6:	b083      	sub	sp, #12
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	4603      	mov	r3, r0
 800deac:	6039      	str	r1, [r7, #0]
 800deae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	2204      	movs	r2, #4
 800deb4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800deb6:	4b03      	ldr	r3, [pc, #12]	@ (800dec4 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800deb8:	4618      	mov	r0, r3
 800deba:	370c      	adds	r7, #12
 800debc:	46bd      	mov	sp, r7
 800debe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec2:	4770      	bx	lr
 800dec4:	20000104 	.word	0x20000104

0800dec8 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b082      	sub	sp, #8
 800decc:	af00      	add	r7, sp, #0
 800dece:	4603      	mov	r3, r0
 800ded0:	6039      	str	r1, [r7, #0]
 800ded2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ded4:	79fb      	ldrb	r3, [r7, #7]
 800ded6:	2b00      	cmp	r3, #0
 800ded8:	d105      	bne.n	800dee6 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800deda:	683a      	ldr	r2, [r7, #0]
 800dedc:	4907      	ldr	r1, [pc, #28]	@ (800defc <USBD_CDC_ProductStrDescriptor+0x34>)
 800dede:	4808      	ldr	r0, [pc, #32]	@ (800df00 <USBD_CDC_ProductStrDescriptor+0x38>)
 800dee0:	f7ff fdec 	bl	800dabc <USBD_GetString>
 800dee4:	e004      	b.n	800def0 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800dee6:	683a      	ldr	r2, [r7, #0]
 800dee8:	4904      	ldr	r1, [pc, #16]	@ (800defc <USBD_CDC_ProductStrDescriptor+0x34>)
 800deea:	4805      	ldr	r0, [pc, #20]	@ (800df00 <USBD_CDC_ProductStrDescriptor+0x38>)
 800deec:	f7ff fde6 	bl	800dabc <USBD_GetString>
  }
  return USBD_StrDesc;
 800def0:	4b02      	ldr	r3, [pc, #8]	@ (800defc <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800def2:	4618      	mov	r0, r3
 800def4:	3708      	adds	r7, #8
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}
 800defa:	bf00      	nop
 800defc:	20001830 	.word	0x20001830
 800df00:	08011134 	.word	0x08011134

0800df04 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b082      	sub	sp, #8
 800df08:	af00      	add	r7, sp, #0
 800df0a:	4603      	mov	r3, r0
 800df0c:	6039      	str	r1, [r7, #0]
 800df0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800df10:	683a      	ldr	r2, [r7, #0]
 800df12:	4904      	ldr	r1, [pc, #16]	@ (800df24 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800df14:	4804      	ldr	r0, [pc, #16]	@ (800df28 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800df16:	f7ff fdd1 	bl	800dabc <USBD_GetString>
  return USBD_StrDesc;
 800df1a:	4b02      	ldr	r3, [pc, #8]	@ (800df24 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800df1c:	4618      	mov	r0, r3
 800df1e:	3708      	adds	r7, #8
 800df20:	46bd      	mov	sp, r7
 800df22:	bd80      	pop	{r7, pc}
 800df24:	20001830 	.word	0x20001830
 800df28:	0801114c 	.word	0x0801114c

0800df2c <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b082      	sub	sp, #8
 800df30:	af00      	add	r7, sp, #0
 800df32:	4603      	mov	r3, r0
 800df34:	6039      	str	r1, [r7, #0]
 800df36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	221a      	movs	r2, #26
 800df3c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800df3e:	f000 f843 	bl	800dfc8 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800df42:	4b02      	ldr	r3, [pc, #8]	@ (800df4c <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800df44:	4618      	mov	r0, r3
 800df46:	3708      	adds	r7, #8
 800df48:	46bd      	mov	sp, r7
 800df4a:	bd80      	pop	{r7, pc}
 800df4c:	20000108 	.word	0x20000108

0800df50 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b082      	sub	sp, #8
 800df54:	af00      	add	r7, sp, #0
 800df56:	4603      	mov	r3, r0
 800df58:	6039      	str	r1, [r7, #0]
 800df5a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800df5c:	79fb      	ldrb	r3, [r7, #7]
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d105      	bne.n	800df6e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800df62:	683a      	ldr	r2, [r7, #0]
 800df64:	4907      	ldr	r1, [pc, #28]	@ (800df84 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800df66:	4808      	ldr	r0, [pc, #32]	@ (800df88 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800df68:	f7ff fda8 	bl	800dabc <USBD_GetString>
 800df6c:	e004      	b.n	800df78 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800df6e:	683a      	ldr	r2, [r7, #0]
 800df70:	4904      	ldr	r1, [pc, #16]	@ (800df84 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800df72:	4805      	ldr	r0, [pc, #20]	@ (800df88 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800df74:	f7ff fda2 	bl	800dabc <USBD_GetString>
  }
  return USBD_StrDesc;
 800df78:	4b02      	ldr	r3, [pc, #8]	@ (800df84 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800df7a:	4618      	mov	r0, r3
 800df7c:	3708      	adds	r7, #8
 800df7e:	46bd      	mov	sp, r7
 800df80:	bd80      	pop	{r7, pc}
 800df82:	bf00      	nop
 800df84:	20001830 	.word	0x20001830
 800df88:	08011160 	.word	0x08011160

0800df8c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b082      	sub	sp, #8
 800df90:	af00      	add	r7, sp, #0
 800df92:	4603      	mov	r3, r0
 800df94:	6039      	str	r1, [r7, #0]
 800df96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800df98:	79fb      	ldrb	r3, [r7, #7]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d105      	bne.n	800dfaa <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800df9e:	683a      	ldr	r2, [r7, #0]
 800dfa0:	4907      	ldr	r1, [pc, #28]	@ (800dfc0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800dfa2:	4808      	ldr	r0, [pc, #32]	@ (800dfc4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800dfa4:	f7ff fd8a 	bl	800dabc <USBD_GetString>
 800dfa8:	e004      	b.n	800dfb4 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800dfaa:	683a      	ldr	r2, [r7, #0]
 800dfac:	4904      	ldr	r1, [pc, #16]	@ (800dfc0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800dfae:	4805      	ldr	r0, [pc, #20]	@ (800dfc4 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800dfb0:	f7ff fd84 	bl	800dabc <USBD_GetString>
  }
  return USBD_StrDesc;
 800dfb4:	4b02      	ldr	r3, [pc, #8]	@ (800dfc0 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	3708      	adds	r7, #8
 800dfba:	46bd      	mov	sp, r7
 800dfbc:	bd80      	pop	{r7, pc}
 800dfbe:	bf00      	nop
 800dfc0:	20001830 	.word	0x20001830
 800dfc4:	0801116c 	.word	0x0801116c

0800dfc8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b084      	sub	sp, #16
 800dfcc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800dfce:	4b0f      	ldr	r3, [pc, #60]	@ (800e00c <Get_SerialNum+0x44>)
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800dfd4:	4b0e      	ldr	r3, [pc, #56]	@ (800e010 <Get_SerialNum+0x48>)
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800dfda:	4b0e      	ldr	r3, [pc, #56]	@ (800e014 <Get_SerialNum+0x4c>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800dfe0:	68fa      	ldr	r2, [r7, #12]
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	4413      	add	r3, r2
 800dfe6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d009      	beq.n	800e002 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800dfee:	2208      	movs	r2, #8
 800dff0:	4909      	ldr	r1, [pc, #36]	@ (800e018 <Get_SerialNum+0x50>)
 800dff2:	68f8      	ldr	r0, [r7, #12]
 800dff4:	f000 f814 	bl	800e020 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800dff8:	2204      	movs	r2, #4
 800dffa:	4908      	ldr	r1, [pc, #32]	@ (800e01c <Get_SerialNum+0x54>)
 800dffc:	68b8      	ldr	r0, [r7, #8]
 800dffe:	f000 f80f 	bl	800e020 <IntToUnicode>
  }
}
 800e002:	bf00      	nop
 800e004:	3710      	adds	r7, #16
 800e006:	46bd      	mov	sp, r7
 800e008:	bd80      	pop	{r7, pc}
 800e00a:	bf00      	nop
 800e00c:	1fff7590 	.word	0x1fff7590
 800e010:	1fff7594 	.word	0x1fff7594
 800e014:	1fff7598 	.word	0x1fff7598
 800e018:	2000010a 	.word	0x2000010a
 800e01c:	2000011a 	.word	0x2000011a

0800e020 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e020:	b480      	push	{r7}
 800e022:	b087      	sub	sp, #28
 800e024:	af00      	add	r7, sp, #0
 800e026:	60f8      	str	r0, [r7, #12]
 800e028:	60b9      	str	r1, [r7, #8]
 800e02a:	4613      	mov	r3, r2
 800e02c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e02e:	2300      	movs	r3, #0
 800e030:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e032:	2300      	movs	r3, #0
 800e034:	75fb      	strb	r3, [r7, #23]
 800e036:	e027      	b.n	800e088 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	0f1b      	lsrs	r3, r3, #28
 800e03c:	2b09      	cmp	r3, #9
 800e03e:	d80b      	bhi.n	800e058 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	0f1b      	lsrs	r3, r3, #28
 800e044:	b2da      	uxtb	r2, r3
 800e046:	7dfb      	ldrb	r3, [r7, #23]
 800e048:	005b      	lsls	r3, r3, #1
 800e04a:	4619      	mov	r1, r3
 800e04c:	68bb      	ldr	r3, [r7, #8]
 800e04e:	440b      	add	r3, r1
 800e050:	3230      	adds	r2, #48	@ 0x30
 800e052:	b2d2      	uxtb	r2, r2
 800e054:	701a      	strb	r2, [r3, #0]
 800e056:	e00a      	b.n	800e06e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	0f1b      	lsrs	r3, r3, #28
 800e05c:	b2da      	uxtb	r2, r3
 800e05e:	7dfb      	ldrb	r3, [r7, #23]
 800e060:	005b      	lsls	r3, r3, #1
 800e062:	4619      	mov	r1, r3
 800e064:	68bb      	ldr	r3, [r7, #8]
 800e066:	440b      	add	r3, r1
 800e068:	3237      	adds	r2, #55	@ 0x37
 800e06a:	b2d2      	uxtb	r2, r2
 800e06c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	011b      	lsls	r3, r3, #4
 800e072:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e074:	7dfb      	ldrb	r3, [r7, #23]
 800e076:	005b      	lsls	r3, r3, #1
 800e078:	3301      	adds	r3, #1
 800e07a:	68ba      	ldr	r2, [r7, #8]
 800e07c:	4413      	add	r3, r2
 800e07e:	2200      	movs	r2, #0
 800e080:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e082:	7dfb      	ldrb	r3, [r7, #23]
 800e084:	3301      	adds	r3, #1
 800e086:	75fb      	strb	r3, [r7, #23]
 800e088:	7dfa      	ldrb	r2, [r7, #23]
 800e08a:	79fb      	ldrb	r3, [r7, #7]
 800e08c:	429a      	cmp	r2, r3
 800e08e:	d3d3      	bcc.n	800e038 <IntToUnicode+0x18>
  }
}
 800e090:	bf00      	nop
 800e092:	bf00      	nop
 800e094:	371c      	adds	r7, #28
 800e096:	46bd      	mov	sp, r7
 800e098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09c:	4770      	bx	lr

0800e09e <LL_AHB2_GRP1_EnableClock>:
{
 800e09e:	b480      	push	{r7}
 800e0a0:	b085      	sub	sp, #20
 800e0a2:	af00      	add	r7, sp, #0
 800e0a4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800e0a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e0aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e0ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	4313      	orrs	r3, r2
 800e0b4:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800e0b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e0ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	4013      	ands	r3, r2
 800e0c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e0c2:	68fb      	ldr	r3, [r7, #12]
}
 800e0c4:	bf00      	nop
 800e0c6:	3714      	adds	r7, #20
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ce:	4770      	bx	lr

0800e0d0 <LL_APB1_GRP1_EnableClock>:
{
 800e0d0:	b480      	push	{r7}
 800e0d2:	b085      	sub	sp, #20
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800e0d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e0dc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e0de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	4313      	orrs	r3, r2
 800e0e6:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800e0e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e0ec:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	4013      	ands	r3, r2
 800e0f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e0f4:	68fb      	ldr	r3, [r7, #12]
}
 800e0f6:	bf00      	nop
 800e0f8:	3714      	adds	r7, #20
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e100:	4770      	bx	lr
	...

0800e104 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b088      	sub	sp, #32
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e10c:	f107 030c 	add.w	r3, r7, #12
 800e110:	2200      	movs	r2, #0
 800e112:	601a      	str	r2, [r3, #0]
 800e114:	605a      	str	r2, [r3, #4]
 800e116:	609a      	str	r2, [r3, #8]
 800e118:	60da      	str	r2, [r3, #12]
 800e11a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	4a17      	ldr	r2, [pc, #92]	@ (800e180 <HAL_PCD_MspInit+0x7c>)
 800e122:	4293      	cmp	r3, r2
 800e124:	d128      	bne.n	800e178 <HAL_PCD_MspInit+0x74>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e126:	2001      	movs	r0, #1
 800e128:	f7ff ffb9 	bl	800e09e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 800e12c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800e130:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e132:	2302      	movs	r3, #2
 800e134:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e136:	2300      	movs	r3, #0
 800e138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e13a:	2300      	movs	r3, #0
 800e13c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800e13e:	230a      	movs	r3, #10
 800e140:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e142:	f107 030c 	add.w	r3, r7, #12
 800e146:	4619      	mov	r1, r3
 800e148:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800e14c:	f7f5 fd26 	bl	8003b9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e150:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800e154:	f7ff ffbc 	bl	800e0d0 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 800e158:	2200      	movs	r2, #0
 800e15a:	2100      	movs	r1, #0
 800e15c:	2013      	movs	r0, #19
 800e15e:	f7f5 fa06 	bl	800356e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 800e162:	2013      	movs	r0, #19
 800e164:	f7f5 fa1d 	bl	80035a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800e168:	2200      	movs	r2, #0
 800e16a:	2100      	movs	r1, #0
 800e16c:	2014      	movs	r0, #20
 800e16e:	f7f5 f9fe 	bl	800356e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800e172:	2014      	movs	r0, #20
 800e174:	f7f5 fa15 	bl	80035a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800e178:	bf00      	nop
 800e17a:	3720      	adds	r7, #32
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}
 800e180:	40006800 	.word	0x40006800

0800e184 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b082      	sub	sp, #8
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800e198:	4619      	mov	r1, r3
 800e19a:	4610      	mov	r0, r2
 800e19c:	f7fe fb93 	bl	800c8c6 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800e1a0:	bf00      	nop
 800e1a2:	3708      	adds	r7, #8
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}

0800e1a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b082      	sub	sp, #8
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	460b      	mov	r3, r1
 800e1b2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800e1ba:	78fa      	ldrb	r2, [r7, #3]
 800e1bc:	6879      	ldr	r1, [r7, #4]
 800e1be:	4613      	mov	r3, r2
 800e1c0:	009b      	lsls	r3, r3, #2
 800e1c2:	4413      	add	r3, r2
 800e1c4:	00db      	lsls	r3, r3, #3
 800e1c6:	440b      	add	r3, r1
 800e1c8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e1cc:	681a      	ldr	r2, [r3, #0]
 800e1ce:	78fb      	ldrb	r3, [r7, #3]
 800e1d0:	4619      	mov	r1, r3
 800e1d2:	f7fe fbcd 	bl	800c970 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800e1d6:	bf00      	nop
 800e1d8:	3708      	adds	r7, #8
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	bd80      	pop	{r7, pc}

0800e1de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1de:	b580      	push	{r7, lr}
 800e1e0:	b082      	sub	sp, #8
 800e1e2:	af00      	add	r7, sp, #0
 800e1e4:	6078      	str	r0, [r7, #4]
 800e1e6:	460b      	mov	r3, r1
 800e1e8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800e1f0:	78fa      	ldrb	r2, [r7, #3]
 800e1f2:	6879      	ldr	r1, [r7, #4]
 800e1f4:	4613      	mov	r3, r2
 800e1f6:	009b      	lsls	r3, r3, #2
 800e1f8:	4413      	add	r3, r2
 800e1fa:	00db      	lsls	r3, r3, #3
 800e1fc:	440b      	add	r3, r1
 800e1fe:	3324      	adds	r3, #36	@ 0x24
 800e200:	681a      	ldr	r2, [r3, #0]
 800e202:	78fb      	ldrb	r3, [r7, #3]
 800e204:	4619      	mov	r1, r3
 800e206:	f7fe fc66 	bl	800cad6 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800e20a:	bf00      	nop
 800e20c:	3708      	adds	r7, #8
 800e20e:	46bd      	mov	sp, r7
 800e210:	bd80      	pop	{r7, pc}

0800e212 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e212:	b580      	push	{r7, lr}
 800e214:	b082      	sub	sp, #8
 800e216:	af00      	add	r7, sp, #0
 800e218:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e220:	4618      	mov	r0, r3
 800e222:	f7fe fda0 	bl	800cd66 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800e226:	bf00      	nop
 800e228:	3708      	adds	r7, #8
 800e22a:	46bd      	mov	sp, r7
 800e22c:	bd80      	pop	{r7, pc}

0800e22e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e22e:	b580      	push	{r7, lr}
 800e230:	b084      	sub	sp, #16
 800e232:	af00      	add	r7, sp, #0
 800e234:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e236:	2301      	movs	r3, #1
 800e238:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	795b      	ldrb	r3, [r3, #5]
 800e23e:	2b02      	cmp	r3, #2
 800e240:	d001      	beq.n	800e246 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e242:	f7f3 f8df 	bl	8001404 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e24c:	7bfa      	ldrb	r2, [r7, #15]
 800e24e:	4611      	mov	r1, r2
 800e250:	4618      	mov	r0, r3
 800e252:	f7fe fd44 	bl	800ccde <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e25c:	4618      	mov	r0, r3
 800e25e:	f7fe fcec 	bl	800cc3a <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800e262:	bf00      	nop
 800e264:	3710      	adds	r7, #16
 800e266:	46bd      	mov	sp, r7
 800e268:	bd80      	pop	{r7, pc}
	...

0800e26c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b082      	sub	sp, #8
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e27a:	4618      	mov	r0, r3
 800e27c:	f7fe fd3f 	bl	800ccfe <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	7a5b      	ldrb	r3, [r3, #9]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d005      	beq.n	800e294 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e288:	4b04      	ldr	r3, [pc, #16]	@ (800e29c <HAL_PCD_SuspendCallback+0x30>)
 800e28a:	691b      	ldr	r3, [r3, #16]
 800e28c:	4a03      	ldr	r2, [pc, #12]	@ (800e29c <HAL_PCD_SuspendCallback+0x30>)
 800e28e:	f043 0306 	orr.w	r3, r3, #6
 800e292:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800e294:	bf00      	nop
 800e296:	3708      	adds	r7, #8
 800e298:	46bd      	mov	sp, r7
 800e29a:	bd80      	pop	{r7, pc}
 800e29c:	e000ed00 	.word	0xe000ed00

0800e2a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b082      	sub	sp, #8
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	7a5b      	ldrb	r3, [r3, #9]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d007      	beq.n	800e2c0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e2b0:	4b08      	ldr	r3, [pc, #32]	@ (800e2d4 <HAL_PCD_ResumeCallback+0x34>)
 800e2b2:	691b      	ldr	r3, [r3, #16]
 800e2b4:	4a07      	ldr	r2, [pc, #28]	@ (800e2d4 <HAL_PCD_ResumeCallback+0x34>)
 800e2b6:	f023 0306 	bic.w	r3, r3, #6
 800e2ba:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800e2bc:	f000 f9fa 	bl	800e6b4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f7fe fd35 	bl	800cd36 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800e2cc:	bf00      	nop
 800e2ce:	3708      	adds	r7, #8
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}
 800e2d4:	e000ed00 	.word	0xe000ed00

0800e2d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b082      	sub	sp, #8
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800e2e0:	4a2c      	ldr	r2, [pc, #176]	@ (800e394 <USBD_LL_Init+0xbc>)
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	4a2a      	ldr	r2, [pc, #168]	@ (800e394 <USBD_LL_Init+0xbc>)
 800e2ec:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800e2f0:	f7f8 fa9a 	bl	8006828 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800e2f4:	4b27      	ldr	r3, [pc, #156]	@ (800e394 <USBD_LL_Init+0xbc>)
 800e2f6:	4a28      	ldr	r2, [pc, #160]	@ (800e398 <USBD_LL_Init+0xc0>)
 800e2f8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e2fa:	4b26      	ldr	r3, [pc, #152]	@ (800e394 <USBD_LL_Init+0xbc>)
 800e2fc:	2208      	movs	r2, #8
 800e2fe:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e300:	4b24      	ldr	r3, [pc, #144]	@ (800e394 <USBD_LL_Init+0xbc>)
 800e302:	2202      	movs	r2, #2
 800e304:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e306:	4b23      	ldr	r3, [pc, #140]	@ (800e394 <USBD_LL_Init+0xbc>)
 800e308:	2202      	movs	r2, #2
 800e30a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800e30c:	4b21      	ldr	r3, [pc, #132]	@ (800e394 <USBD_LL_Init+0xbc>)
 800e30e:	2200      	movs	r2, #0
 800e310:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e312:	4b20      	ldr	r3, [pc, #128]	@ (800e394 <USBD_LL_Init+0xbc>)
 800e314:	2200      	movs	r2, #0
 800e316:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800e318:	4b1e      	ldr	r3, [pc, #120]	@ (800e394 <USBD_LL_Init+0xbc>)
 800e31a:	2200      	movs	r2, #0
 800e31c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e31e:	4b1d      	ldr	r3, [pc, #116]	@ (800e394 <USBD_LL_Init+0xbc>)
 800e320:	2200      	movs	r2, #0
 800e322:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e324:	481b      	ldr	r0, [pc, #108]	@ (800e394 <USBD_LL_Init+0xbc>)
 800e326:	f7f6 fd2d 	bl	8004d84 <HAL_PCD_Init>
 800e32a:	4603      	mov	r3, r0
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d001      	beq.n	800e334 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800e330:	f7f3 f868 	bl	8001404 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e33a:	2318      	movs	r3, #24
 800e33c:	2200      	movs	r2, #0
 800e33e:	2100      	movs	r1, #0
 800e340:	f7f8 f9e6 	bl	8006710 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e34a:	2358      	movs	r3, #88	@ 0x58
 800e34c:	2200      	movs	r2, #0
 800e34e:	2180      	movs	r1, #128	@ 0x80
 800e350:	f7f8 f9de 	bl	8006710 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e35a:	23c0      	movs	r3, #192	@ 0xc0
 800e35c:	2200      	movs	r2, #0
 800e35e:	2181      	movs	r1, #129	@ 0x81
 800e360:	f7f8 f9d6 	bl	8006710 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e36a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800e36e:	2200      	movs	r2, #0
 800e370:	2101      	movs	r1, #1
 800e372:	f7f8 f9cd 	bl	8006710 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e37c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e380:	2200      	movs	r2, #0
 800e382:	2182      	movs	r1, #130	@ 0x82
 800e384:	f7f8 f9c4 	bl	8006710 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800e388:	2300      	movs	r3, #0
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3708      	adds	r7, #8
 800e38e:	46bd      	mov	sp, r7
 800e390:	bd80      	pop	{r7, pc}
 800e392:	bf00      	nop
 800e394:	20001a30 	.word	0x20001a30
 800e398:	40006800 	.word	0x40006800

0800e39c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b084      	sub	sp, #16
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f7f6 fdb4 	bl	8004f20 <HAL_PCD_Start>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3bc:	7bfb      	ldrb	r3, [r7, #15]
 800e3be:	4618      	mov	r0, r3
 800e3c0:	f000 f97e 	bl	800e6c0 <USBD_Get_USB_Status>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e3c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3ca:	4618      	mov	r0, r3
 800e3cc:	3710      	adds	r7, #16
 800e3ce:	46bd      	mov	sp, r7
 800e3d0:	bd80      	pop	{r7, pc}

0800e3d2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e3d2:	b580      	push	{r7, lr}
 800e3d4:	b084      	sub	sp, #16
 800e3d6:	af00      	add	r7, sp, #0
 800e3d8:	6078      	str	r0, [r7, #4]
 800e3da:	4608      	mov	r0, r1
 800e3dc:	4611      	mov	r1, r2
 800e3de:	461a      	mov	r2, r3
 800e3e0:	4603      	mov	r3, r0
 800e3e2:	70fb      	strb	r3, [r7, #3]
 800e3e4:	460b      	mov	r3, r1
 800e3e6:	70bb      	strb	r3, [r7, #2]
 800e3e8:	4613      	mov	r3, r2
 800e3ea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3f0:	2300      	movs	r3, #0
 800e3f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e3fa:	78bb      	ldrb	r3, [r7, #2]
 800e3fc:	883a      	ldrh	r2, [r7, #0]
 800e3fe:	78f9      	ldrb	r1, [r7, #3]
 800e400:	f7f6 fefb 	bl	80051fa <HAL_PCD_EP_Open>
 800e404:	4603      	mov	r3, r0
 800e406:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e408:	7bfb      	ldrb	r3, [r7, #15]
 800e40a:	4618      	mov	r0, r3
 800e40c:	f000 f958 	bl	800e6c0 <USBD_Get_USB_Status>
 800e410:	4603      	mov	r3, r0
 800e412:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e414:	7bbb      	ldrb	r3, [r7, #14]
}
 800e416:	4618      	mov	r0, r3
 800e418:	3710      	adds	r7, #16
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd80      	pop	{r7, pc}

0800e41e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e41e:	b580      	push	{r7, lr}
 800e420:	b084      	sub	sp, #16
 800e422:	af00      	add	r7, sp, #0
 800e424:	6078      	str	r0, [r7, #4]
 800e426:	460b      	mov	r3, r1
 800e428:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e42a:	2300      	movs	r3, #0
 800e42c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e42e:	2300      	movs	r3, #0
 800e430:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e438:	78fa      	ldrb	r2, [r7, #3]
 800e43a:	4611      	mov	r1, r2
 800e43c:	4618      	mov	r0, r3
 800e43e:	f7f6 ff39 	bl	80052b4 <HAL_PCD_EP_Close>
 800e442:	4603      	mov	r3, r0
 800e444:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e446:	7bfb      	ldrb	r3, [r7, #15]
 800e448:	4618      	mov	r0, r3
 800e44a:	f000 f939 	bl	800e6c0 <USBD_Get_USB_Status>
 800e44e:	4603      	mov	r3, r0
 800e450:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e452:	7bbb      	ldrb	r3, [r7, #14]
}
 800e454:	4618      	mov	r0, r3
 800e456:	3710      	adds	r7, #16
 800e458:	46bd      	mov	sp, r7
 800e45a:	bd80      	pop	{r7, pc}

0800e45c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b084      	sub	sp, #16
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
 800e464:	460b      	mov	r3, r1
 800e466:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e468:	2300      	movs	r3, #0
 800e46a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e46c:	2300      	movs	r3, #0
 800e46e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e476:	78fa      	ldrb	r2, [r7, #3]
 800e478:	4611      	mov	r1, r2
 800e47a:	4618      	mov	r0, r3
 800e47c:	f7f6 ffe2 	bl	8005444 <HAL_PCD_EP_SetStall>
 800e480:	4603      	mov	r3, r0
 800e482:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e484:	7bfb      	ldrb	r3, [r7, #15]
 800e486:	4618      	mov	r0, r3
 800e488:	f000 f91a 	bl	800e6c0 <USBD_Get_USB_Status>
 800e48c:	4603      	mov	r3, r0
 800e48e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e490:	7bbb      	ldrb	r3, [r7, #14]
}
 800e492:	4618      	mov	r0, r3
 800e494:	3710      	adds	r7, #16
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}

0800e49a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e49a:	b580      	push	{r7, lr}
 800e49c:	b084      	sub	sp, #16
 800e49e:	af00      	add	r7, sp, #0
 800e4a0:	6078      	str	r0, [r7, #4]
 800e4a2:	460b      	mov	r3, r1
 800e4a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4aa:	2300      	movs	r3, #0
 800e4ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e4b4:	78fa      	ldrb	r2, [r7, #3]
 800e4b6:	4611      	mov	r1, r2
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	f7f7 f815 	bl	80054e8 <HAL_PCD_EP_ClrStall>
 800e4be:	4603      	mov	r3, r0
 800e4c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4c2:	7bfb      	ldrb	r3, [r7, #15]
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f000 f8fb 	bl	800e6c0 <USBD_Get_USB_Status>
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e4ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	3710      	adds	r7, #16
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd80      	pop	{r7, pc}

0800e4d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e4d8:	b480      	push	{r7}
 800e4da:	b085      	sub	sp, #20
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
 800e4e0:	460b      	mov	r3, r1
 800e4e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e4ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e4ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	da0b      	bge.n	800e50c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e4f4:	78fb      	ldrb	r3, [r7, #3]
 800e4f6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e4fa:	68f9      	ldr	r1, [r7, #12]
 800e4fc:	4613      	mov	r3, r2
 800e4fe:	009b      	lsls	r3, r3, #2
 800e500:	4413      	add	r3, r2
 800e502:	00db      	lsls	r3, r3, #3
 800e504:	440b      	add	r3, r1
 800e506:	3312      	adds	r3, #18
 800e508:	781b      	ldrb	r3, [r3, #0]
 800e50a:	e00b      	b.n	800e524 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e50c:	78fb      	ldrb	r3, [r7, #3]
 800e50e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e512:	68f9      	ldr	r1, [r7, #12]
 800e514:	4613      	mov	r3, r2
 800e516:	009b      	lsls	r3, r3, #2
 800e518:	4413      	add	r3, r2
 800e51a:	00db      	lsls	r3, r3, #3
 800e51c:	440b      	add	r3, r1
 800e51e:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800e522:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e524:	4618      	mov	r0, r3
 800e526:	3714      	adds	r7, #20
 800e528:	46bd      	mov	sp, r7
 800e52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52e:	4770      	bx	lr

0800e530 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e530:	b580      	push	{r7, lr}
 800e532:	b084      	sub	sp, #16
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
 800e538:	460b      	mov	r3, r1
 800e53a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e53c:	2300      	movs	r3, #0
 800e53e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e540:	2300      	movs	r3, #0
 800e542:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e54a:	78fa      	ldrb	r2, [r7, #3]
 800e54c:	4611      	mov	r1, r2
 800e54e:	4618      	mov	r0, r3
 800e550:	f7f6 fe2f 	bl	80051b2 <HAL_PCD_SetAddress>
 800e554:	4603      	mov	r3, r0
 800e556:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e558:	7bfb      	ldrb	r3, [r7, #15]
 800e55a:	4618      	mov	r0, r3
 800e55c:	f000 f8b0 	bl	800e6c0 <USBD_Get_USB_Status>
 800e560:	4603      	mov	r3, r0
 800e562:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e564:	7bbb      	ldrb	r3, [r7, #14]
}
 800e566:	4618      	mov	r0, r3
 800e568:	3710      	adds	r7, #16
 800e56a:	46bd      	mov	sp, r7
 800e56c:	bd80      	pop	{r7, pc}

0800e56e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e56e:	b580      	push	{r7, lr}
 800e570:	b086      	sub	sp, #24
 800e572:	af00      	add	r7, sp, #0
 800e574:	60f8      	str	r0, [r7, #12]
 800e576:	607a      	str	r2, [r7, #4]
 800e578:	603b      	str	r3, [r7, #0]
 800e57a:	460b      	mov	r3, r1
 800e57c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e57e:	2300      	movs	r3, #0
 800e580:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e582:	2300      	movs	r3, #0
 800e584:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e58c:	7af9      	ldrb	r1, [r7, #11]
 800e58e:	683b      	ldr	r3, [r7, #0]
 800e590:	687a      	ldr	r2, [r7, #4]
 800e592:	f7f6 ff20 	bl	80053d6 <HAL_PCD_EP_Transmit>
 800e596:	4603      	mov	r3, r0
 800e598:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e59a:	7dfb      	ldrb	r3, [r7, #23]
 800e59c:	4618      	mov	r0, r3
 800e59e:	f000 f88f 	bl	800e6c0 <USBD_Get_USB_Status>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e5a6:	7dbb      	ldrb	r3, [r7, #22]
}
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	3718      	adds	r7, #24
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	bd80      	pop	{r7, pc}

0800e5b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b086      	sub	sp, #24
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	60f8      	str	r0, [r7, #12]
 800e5b8:	607a      	str	r2, [r7, #4]
 800e5ba:	603b      	str	r3, [r7, #0]
 800e5bc:	460b      	mov	r3, r1
 800e5be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5c0:	2300      	movs	r3, #0
 800e5c2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e5ce:	7af9      	ldrb	r1, [r7, #11]
 800e5d0:	683b      	ldr	r3, [r7, #0]
 800e5d2:	687a      	ldr	r2, [r7, #4]
 800e5d4:	f7f6 feb6 	bl	8005344 <HAL_PCD_EP_Receive>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e5dc:	7dfb      	ldrb	r3, [r7, #23]
 800e5de:	4618      	mov	r0, r3
 800e5e0:	f000 f86e 	bl	800e6c0 <USBD_Get_USB_Status>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e5e8:	7dbb      	ldrb	r3, [r7, #22]
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	3718      	adds	r7, #24
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}

0800e5f2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e5f2:	b580      	push	{r7, lr}
 800e5f4:	b082      	sub	sp, #8
 800e5f6:	af00      	add	r7, sp, #0
 800e5f8:	6078      	str	r0, [r7, #4]
 800e5fa:	460b      	mov	r3, r1
 800e5fc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e604:	78fa      	ldrb	r2, [r7, #3]
 800e606:	4611      	mov	r1, r2
 800e608:	4618      	mov	r0, r3
 800e60a:	f7f6 fecc 	bl	80053a6 <HAL_PCD_EP_GetRxCount>
 800e60e:	4603      	mov	r3, r0
}
 800e610:	4618      	mov	r0, r3
 800e612:	3708      	adds	r7, #8
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}

0800e618 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b082      	sub	sp, #8
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
 800e620:	460b      	mov	r3, r1
 800e622:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800e624:	78fb      	ldrb	r3, [r7, #3]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d002      	beq.n	800e630 <HAL_PCDEx_LPM_Callback+0x18>
 800e62a:	2b01      	cmp	r3, #1
 800e62c:	d013      	beq.n	800e656 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800e62e:	e023      	b.n	800e678 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	7a5b      	ldrb	r3, [r3, #9]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d007      	beq.n	800e648 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e638:	f000 f83c 	bl	800e6b4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e63c:	4b10      	ldr	r3, [pc, #64]	@ (800e680 <HAL_PCDEx_LPM_Callback+0x68>)
 800e63e:	691b      	ldr	r3, [r3, #16]
 800e640:	4a0f      	ldr	r2, [pc, #60]	@ (800e680 <HAL_PCDEx_LPM_Callback+0x68>)
 800e642:	f023 0306 	bic.w	r3, r3, #6
 800e646:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e64e:	4618      	mov	r0, r3
 800e650:	f7fe fb71 	bl	800cd36 <USBD_LL_Resume>
    break;
 800e654:	e010      	b.n	800e678 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e65c:	4618      	mov	r0, r3
 800e65e:	f7fe fb4e 	bl	800ccfe <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	7a5b      	ldrb	r3, [r3, #9]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d005      	beq.n	800e676 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e66a:	4b05      	ldr	r3, [pc, #20]	@ (800e680 <HAL_PCDEx_LPM_Callback+0x68>)
 800e66c:	691b      	ldr	r3, [r3, #16]
 800e66e:	4a04      	ldr	r2, [pc, #16]	@ (800e680 <HAL_PCDEx_LPM_Callback+0x68>)
 800e670:	f043 0306 	orr.w	r3, r3, #6
 800e674:	6113      	str	r3, [r2, #16]
    break;
 800e676:	bf00      	nop
}
 800e678:	bf00      	nop
 800e67a:	3708      	adds	r7, #8
 800e67c:	46bd      	mov	sp, r7
 800e67e:	bd80      	pop	{r7, pc}
 800e680:	e000ed00 	.word	0xe000ed00

0800e684 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e684:	b480      	push	{r7}
 800e686:	b083      	sub	sp, #12
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e68c:	4b03      	ldr	r3, [pc, #12]	@ (800e69c <USBD_static_malloc+0x18>)
}
 800e68e:	4618      	mov	r0, r3
 800e690:	370c      	adds	r7, #12
 800e692:	46bd      	mov	sp, r7
 800e694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e698:	4770      	bx	lr
 800e69a:	bf00      	nop
 800e69c:	20001d0c 	.word	0x20001d0c

0800e6a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e6a0:	b480      	push	{r7}
 800e6a2:	b083      	sub	sp, #12
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800e6a8:	bf00      	nop
 800e6aa:	370c      	adds	r7, #12
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b2:	4770      	bx	lr

0800e6b4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e6b8:	f7f2 fcb2 	bl	8001020 <SystemClock_Config>
}
 800e6bc:	bf00      	nop
 800e6be:	bd80      	pop	{r7, pc}

0800e6c0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e6c0:	b480      	push	{r7}
 800e6c2:	b085      	sub	sp, #20
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e6ce:	79fb      	ldrb	r3, [r7, #7]
 800e6d0:	2b03      	cmp	r3, #3
 800e6d2:	d817      	bhi.n	800e704 <USBD_Get_USB_Status+0x44>
 800e6d4:	a201      	add	r2, pc, #4	@ (adr r2, 800e6dc <USBD_Get_USB_Status+0x1c>)
 800e6d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6da:	bf00      	nop
 800e6dc:	0800e6ed 	.word	0x0800e6ed
 800e6e0:	0800e6f3 	.word	0x0800e6f3
 800e6e4:	0800e6f9 	.word	0x0800e6f9
 800e6e8:	0800e6ff 	.word	0x0800e6ff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	73fb      	strb	r3, [r7, #15]
    break;
 800e6f0:	e00b      	b.n	800e70a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e6f2:	2303      	movs	r3, #3
 800e6f4:	73fb      	strb	r3, [r7, #15]
    break;
 800e6f6:	e008      	b.n	800e70a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e6f8:	2301      	movs	r3, #1
 800e6fa:	73fb      	strb	r3, [r7, #15]
    break;
 800e6fc:	e005      	b.n	800e70a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e6fe:	2303      	movs	r3, #3
 800e700:	73fb      	strb	r3, [r7, #15]
    break;
 800e702:	e002      	b.n	800e70a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e704:	2303      	movs	r3, #3
 800e706:	73fb      	strb	r3, [r7, #15]
    break;
 800e708:	bf00      	nop
  }
  return usb_status;
 800e70a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e70c:	4618      	mov	r0, r3
 800e70e:	3714      	adds	r7, #20
 800e710:	46bd      	mov	sp, r7
 800e712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e716:	4770      	bx	lr

0800e718 <__cvt>:
 800e718:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e71c:	ec57 6b10 	vmov	r6, r7, d0
 800e720:	2f00      	cmp	r7, #0
 800e722:	460c      	mov	r4, r1
 800e724:	4619      	mov	r1, r3
 800e726:	463b      	mov	r3, r7
 800e728:	bfbb      	ittet	lt
 800e72a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e72e:	461f      	movlt	r7, r3
 800e730:	2300      	movge	r3, #0
 800e732:	232d      	movlt	r3, #45	@ 0x2d
 800e734:	700b      	strb	r3, [r1, #0]
 800e736:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e738:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e73c:	4691      	mov	r9, r2
 800e73e:	f023 0820 	bic.w	r8, r3, #32
 800e742:	bfbc      	itt	lt
 800e744:	4632      	movlt	r2, r6
 800e746:	4616      	movlt	r6, r2
 800e748:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e74c:	d005      	beq.n	800e75a <__cvt+0x42>
 800e74e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e752:	d100      	bne.n	800e756 <__cvt+0x3e>
 800e754:	3401      	adds	r4, #1
 800e756:	2102      	movs	r1, #2
 800e758:	e000      	b.n	800e75c <__cvt+0x44>
 800e75a:	2103      	movs	r1, #3
 800e75c:	ab03      	add	r3, sp, #12
 800e75e:	9301      	str	r3, [sp, #4]
 800e760:	ab02      	add	r3, sp, #8
 800e762:	9300      	str	r3, [sp, #0]
 800e764:	ec47 6b10 	vmov	d0, r6, r7
 800e768:	4653      	mov	r3, sl
 800e76a:	4622      	mov	r2, r4
 800e76c:	f000 fe64 	bl	800f438 <_dtoa_r>
 800e770:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e774:	4605      	mov	r5, r0
 800e776:	d119      	bne.n	800e7ac <__cvt+0x94>
 800e778:	f019 0f01 	tst.w	r9, #1
 800e77c:	d00e      	beq.n	800e79c <__cvt+0x84>
 800e77e:	eb00 0904 	add.w	r9, r0, r4
 800e782:	2200      	movs	r2, #0
 800e784:	2300      	movs	r3, #0
 800e786:	4630      	mov	r0, r6
 800e788:	4639      	mov	r1, r7
 800e78a:	f7f2 f975 	bl	8000a78 <__aeabi_dcmpeq>
 800e78e:	b108      	cbz	r0, 800e794 <__cvt+0x7c>
 800e790:	f8cd 900c 	str.w	r9, [sp, #12]
 800e794:	2230      	movs	r2, #48	@ 0x30
 800e796:	9b03      	ldr	r3, [sp, #12]
 800e798:	454b      	cmp	r3, r9
 800e79a:	d31e      	bcc.n	800e7da <__cvt+0xc2>
 800e79c:	9b03      	ldr	r3, [sp, #12]
 800e79e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e7a0:	1b5b      	subs	r3, r3, r5
 800e7a2:	4628      	mov	r0, r5
 800e7a4:	6013      	str	r3, [r2, #0]
 800e7a6:	b004      	add	sp, #16
 800e7a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e7b0:	eb00 0904 	add.w	r9, r0, r4
 800e7b4:	d1e5      	bne.n	800e782 <__cvt+0x6a>
 800e7b6:	7803      	ldrb	r3, [r0, #0]
 800e7b8:	2b30      	cmp	r3, #48	@ 0x30
 800e7ba:	d10a      	bne.n	800e7d2 <__cvt+0xba>
 800e7bc:	2200      	movs	r2, #0
 800e7be:	2300      	movs	r3, #0
 800e7c0:	4630      	mov	r0, r6
 800e7c2:	4639      	mov	r1, r7
 800e7c4:	f7f2 f958 	bl	8000a78 <__aeabi_dcmpeq>
 800e7c8:	b918      	cbnz	r0, 800e7d2 <__cvt+0xba>
 800e7ca:	f1c4 0401 	rsb	r4, r4, #1
 800e7ce:	f8ca 4000 	str.w	r4, [sl]
 800e7d2:	f8da 3000 	ldr.w	r3, [sl]
 800e7d6:	4499      	add	r9, r3
 800e7d8:	e7d3      	b.n	800e782 <__cvt+0x6a>
 800e7da:	1c59      	adds	r1, r3, #1
 800e7dc:	9103      	str	r1, [sp, #12]
 800e7de:	701a      	strb	r2, [r3, #0]
 800e7e0:	e7d9      	b.n	800e796 <__cvt+0x7e>

0800e7e2 <__exponent>:
 800e7e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e7e4:	2900      	cmp	r1, #0
 800e7e6:	bfba      	itte	lt
 800e7e8:	4249      	neglt	r1, r1
 800e7ea:	232d      	movlt	r3, #45	@ 0x2d
 800e7ec:	232b      	movge	r3, #43	@ 0x2b
 800e7ee:	2909      	cmp	r1, #9
 800e7f0:	7002      	strb	r2, [r0, #0]
 800e7f2:	7043      	strb	r3, [r0, #1]
 800e7f4:	dd29      	ble.n	800e84a <__exponent+0x68>
 800e7f6:	f10d 0307 	add.w	r3, sp, #7
 800e7fa:	461d      	mov	r5, r3
 800e7fc:	270a      	movs	r7, #10
 800e7fe:	461a      	mov	r2, r3
 800e800:	fbb1 f6f7 	udiv	r6, r1, r7
 800e804:	fb07 1416 	mls	r4, r7, r6, r1
 800e808:	3430      	adds	r4, #48	@ 0x30
 800e80a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e80e:	460c      	mov	r4, r1
 800e810:	2c63      	cmp	r4, #99	@ 0x63
 800e812:	f103 33ff 	add.w	r3, r3, #4294967295
 800e816:	4631      	mov	r1, r6
 800e818:	dcf1      	bgt.n	800e7fe <__exponent+0x1c>
 800e81a:	3130      	adds	r1, #48	@ 0x30
 800e81c:	1e94      	subs	r4, r2, #2
 800e81e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e822:	1c41      	adds	r1, r0, #1
 800e824:	4623      	mov	r3, r4
 800e826:	42ab      	cmp	r3, r5
 800e828:	d30a      	bcc.n	800e840 <__exponent+0x5e>
 800e82a:	f10d 0309 	add.w	r3, sp, #9
 800e82e:	1a9b      	subs	r3, r3, r2
 800e830:	42ac      	cmp	r4, r5
 800e832:	bf88      	it	hi
 800e834:	2300      	movhi	r3, #0
 800e836:	3302      	adds	r3, #2
 800e838:	4403      	add	r3, r0
 800e83a:	1a18      	subs	r0, r3, r0
 800e83c:	b003      	add	sp, #12
 800e83e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e840:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e844:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e848:	e7ed      	b.n	800e826 <__exponent+0x44>
 800e84a:	2330      	movs	r3, #48	@ 0x30
 800e84c:	3130      	adds	r1, #48	@ 0x30
 800e84e:	7083      	strb	r3, [r0, #2]
 800e850:	70c1      	strb	r1, [r0, #3]
 800e852:	1d03      	adds	r3, r0, #4
 800e854:	e7f1      	b.n	800e83a <__exponent+0x58>
	...

0800e858 <_printf_float>:
 800e858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e85c:	b08d      	sub	sp, #52	@ 0x34
 800e85e:	460c      	mov	r4, r1
 800e860:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e864:	4616      	mov	r6, r2
 800e866:	461f      	mov	r7, r3
 800e868:	4605      	mov	r5, r0
 800e86a:	f000 fcd5 	bl	800f218 <_localeconv_r>
 800e86e:	6803      	ldr	r3, [r0, #0]
 800e870:	9304      	str	r3, [sp, #16]
 800e872:	4618      	mov	r0, r3
 800e874:	f7f1 fcd4 	bl	8000220 <strlen>
 800e878:	2300      	movs	r3, #0
 800e87a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e87c:	f8d8 3000 	ldr.w	r3, [r8]
 800e880:	9005      	str	r0, [sp, #20]
 800e882:	3307      	adds	r3, #7
 800e884:	f023 0307 	bic.w	r3, r3, #7
 800e888:	f103 0208 	add.w	r2, r3, #8
 800e88c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e890:	f8d4 b000 	ldr.w	fp, [r4]
 800e894:	f8c8 2000 	str.w	r2, [r8]
 800e898:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e89c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e8a0:	9307      	str	r3, [sp, #28]
 800e8a2:	f8cd 8018 	str.w	r8, [sp, #24]
 800e8a6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e8aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e8ae:	4b9c      	ldr	r3, [pc, #624]	@ (800eb20 <_printf_float+0x2c8>)
 800e8b0:	f04f 32ff 	mov.w	r2, #4294967295
 800e8b4:	f7f2 f912 	bl	8000adc <__aeabi_dcmpun>
 800e8b8:	bb70      	cbnz	r0, 800e918 <_printf_float+0xc0>
 800e8ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e8be:	4b98      	ldr	r3, [pc, #608]	@ (800eb20 <_printf_float+0x2c8>)
 800e8c0:	f04f 32ff 	mov.w	r2, #4294967295
 800e8c4:	f7f2 f8ec 	bl	8000aa0 <__aeabi_dcmple>
 800e8c8:	bb30      	cbnz	r0, 800e918 <_printf_float+0xc0>
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	4640      	mov	r0, r8
 800e8d0:	4649      	mov	r1, r9
 800e8d2:	f7f2 f8db 	bl	8000a8c <__aeabi_dcmplt>
 800e8d6:	b110      	cbz	r0, 800e8de <_printf_float+0x86>
 800e8d8:	232d      	movs	r3, #45	@ 0x2d
 800e8da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e8de:	4a91      	ldr	r2, [pc, #580]	@ (800eb24 <_printf_float+0x2cc>)
 800e8e0:	4b91      	ldr	r3, [pc, #580]	@ (800eb28 <_printf_float+0x2d0>)
 800e8e2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e8e6:	bf94      	ite	ls
 800e8e8:	4690      	movls	r8, r2
 800e8ea:	4698      	movhi	r8, r3
 800e8ec:	2303      	movs	r3, #3
 800e8ee:	6123      	str	r3, [r4, #16]
 800e8f0:	f02b 0304 	bic.w	r3, fp, #4
 800e8f4:	6023      	str	r3, [r4, #0]
 800e8f6:	f04f 0900 	mov.w	r9, #0
 800e8fa:	9700      	str	r7, [sp, #0]
 800e8fc:	4633      	mov	r3, r6
 800e8fe:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e900:	4621      	mov	r1, r4
 800e902:	4628      	mov	r0, r5
 800e904:	f000 f9d2 	bl	800ecac <_printf_common>
 800e908:	3001      	adds	r0, #1
 800e90a:	f040 808d 	bne.w	800ea28 <_printf_float+0x1d0>
 800e90e:	f04f 30ff 	mov.w	r0, #4294967295
 800e912:	b00d      	add	sp, #52	@ 0x34
 800e914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e918:	4642      	mov	r2, r8
 800e91a:	464b      	mov	r3, r9
 800e91c:	4640      	mov	r0, r8
 800e91e:	4649      	mov	r1, r9
 800e920:	f7f2 f8dc 	bl	8000adc <__aeabi_dcmpun>
 800e924:	b140      	cbz	r0, 800e938 <_printf_float+0xe0>
 800e926:	464b      	mov	r3, r9
 800e928:	2b00      	cmp	r3, #0
 800e92a:	bfbc      	itt	lt
 800e92c:	232d      	movlt	r3, #45	@ 0x2d
 800e92e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e932:	4a7e      	ldr	r2, [pc, #504]	@ (800eb2c <_printf_float+0x2d4>)
 800e934:	4b7e      	ldr	r3, [pc, #504]	@ (800eb30 <_printf_float+0x2d8>)
 800e936:	e7d4      	b.n	800e8e2 <_printf_float+0x8a>
 800e938:	6863      	ldr	r3, [r4, #4]
 800e93a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e93e:	9206      	str	r2, [sp, #24]
 800e940:	1c5a      	adds	r2, r3, #1
 800e942:	d13b      	bne.n	800e9bc <_printf_float+0x164>
 800e944:	2306      	movs	r3, #6
 800e946:	6063      	str	r3, [r4, #4]
 800e948:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e94c:	2300      	movs	r3, #0
 800e94e:	6022      	str	r2, [r4, #0]
 800e950:	9303      	str	r3, [sp, #12]
 800e952:	ab0a      	add	r3, sp, #40	@ 0x28
 800e954:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e958:	ab09      	add	r3, sp, #36	@ 0x24
 800e95a:	9300      	str	r3, [sp, #0]
 800e95c:	6861      	ldr	r1, [r4, #4]
 800e95e:	ec49 8b10 	vmov	d0, r8, r9
 800e962:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e966:	4628      	mov	r0, r5
 800e968:	f7ff fed6 	bl	800e718 <__cvt>
 800e96c:	9b06      	ldr	r3, [sp, #24]
 800e96e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e970:	2b47      	cmp	r3, #71	@ 0x47
 800e972:	4680      	mov	r8, r0
 800e974:	d129      	bne.n	800e9ca <_printf_float+0x172>
 800e976:	1cc8      	adds	r0, r1, #3
 800e978:	db02      	blt.n	800e980 <_printf_float+0x128>
 800e97a:	6863      	ldr	r3, [r4, #4]
 800e97c:	4299      	cmp	r1, r3
 800e97e:	dd41      	ble.n	800ea04 <_printf_float+0x1ac>
 800e980:	f1aa 0a02 	sub.w	sl, sl, #2
 800e984:	fa5f fa8a 	uxtb.w	sl, sl
 800e988:	3901      	subs	r1, #1
 800e98a:	4652      	mov	r2, sl
 800e98c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800e990:	9109      	str	r1, [sp, #36]	@ 0x24
 800e992:	f7ff ff26 	bl	800e7e2 <__exponent>
 800e996:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e998:	1813      	adds	r3, r2, r0
 800e99a:	2a01      	cmp	r2, #1
 800e99c:	4681      	mov	r9, r0
 800e99e:	6123      	str	r3, [r4, #16]
 800e9a0:	dc02      	bgt.n	800e9a8 <_printf_float+0x150>
 800e9a2:	6822      	ldr	r2, [r4, #0]
 800e9a4:	07d2      	lsls	r2, r2, #31
 800e9a6:	d501      	bpl.n	800e9ac <_printf_float+0x154>
 800e9a8:	3301      	adds	r3, #1
 800e9aa:	6123      	str	r3, [r4, #16]
 800e9ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d0a2      	beq.n	800e8fa <_printf_float+0xa2>
 800e9b4:	232d      	movs	r3, #45	@ 0x2d
 800e9b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e9ba:	e79e      	b.n	800e8fa <_printf_float+0xa2>
 800e9bc:	9a06      	ldr	r2, [sp, #24]
 800e9be:	2a47      	cmp	r2, #71	@ 0x47
 800e9c0:	d1c2      	bne.n	800e948 <_printf_float+0xf0>
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d1c0      	bne.n	800e948 <_printf_float+0xf0>
 800e9c6:	2301      	movs	r3, #1
 800e9c8:	e7bd      	b.n	800e946 <_printf_float+0xee>
 800e9ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800e9ce:	d9db      	bls.n	800e988 <_printf_float+0x130>
 800e9d0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800e9d4:	d118      	bne.n	800ea08 <_printf_float+0x1b0>
 800e9d6:	2900      	cmp	r1, #0
 800e9d8:	6863      	ldr	r3, [r4, #4]
 800e9da:	dd0b      	ble.n	800e9f4 <_printf_float+0x19c>
 800e9dc:	6121      	str	r1, [r4, #16]
 800e9de:	b913      	cbnz	r3, 800e9e6 <_printf_float+0x18e>
 800e9e0:	6822      	ldr	r2, [r4, #0]
 800e9e2:	07d0      	lsls	r0, r2, #31
 800e9e4:	d502      	bpl.n	800e9ec <_printf_float+0x194>
 800e9e6:	3301      	adds	r3, #1
 800e9e8:	440b      	add	r3, r1
 800e9ea:	6123      	str	r3, [r4, #16]
 800e9ec:	65a1      	str	r1, [r4, #88]	@ 0x58
 800e9ee:	f04f 0900 	mov.w	r9, #0
 800e9f2:	e7db      	b.n	800e9ac <_printf_float+0x154>
 800e9f4:	b913      	cbnz	r3, 800e9fc <_printf_float+0x1a4>
 800e9f6:	6822      	ldr	r2, [r4, #0]
 800e9f8:	07d2      	lsls	r2, r2, #31
 800e9fa:	d501      	bpl.n	800ea00 <_printf_float+0x1a8>
 800e9fc:	3302      	adds	r3, #2
 800e9fe:	e7f4      	b.n	800e9ea <_printf_float+0x192>
 800ea00:	2301      	movs	r3, #1
 800ea02:	e7f2      	b.n	800e9ea <_printf_float+0x192>
 800ea04:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ea08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea0a:	4299      	cmp	r1, r3
 800ea0c:	db05      	blt.n	800ea1a <_printf_float+0x1c2>
 800ea0e:	6823      	ldr	r3, [r4, #0]
 800ea10:	6121      	str	r1, [r4, #16]
 800ea12:	07d8      	lsls	r0, r3, #31
 800ea14:	d5ea      	bpl.n	800e9ec <_printf_float+0x194>
 800ea16:	1c4b      	adds	r3, r1, #1
 800ea18:	e7e7      	b.n	800e9ea <_printf_float+0x192>
 800ea1a:	2900      	cmp	r1, #0
 800ea1c:	bfd4      	ite	le
 800ea1e:	f1c1 0202 	rsble	r2, r1, #2
 800ea22:	2201      	movgt	r2, #1
 800ea24:	4413      	add	r3, r2
 800ea26:	e7e0      	b.n	800e9ea <_printf_float+0x192>
 800ea28:	6823      	ldr	r3, [r4, #0]
 800ea2a:	055a      	lsls	r2, r3, #21
 800ea2c:	d407      	bmi.n	800ea3e <_printf_float+0x1e6>
 800ea2e:	6923      	ldr	r3, [r4, #16]
 800ea30:	4642      	mov	r2, r8
 800ea32:	4631      	mov	r1, r6
 800ea34:	4628      	mov	r0, r5
 800ea36:	47b8      	blx	r7
 800ea38:	3001      	adds	r0, #1
 800ea3a:	d12b      	bne.n	800ea94 <_printf_float+0x23c>
 800ea3c:	e767      	b.n	800e90e <_printf_float+0xb6>
 800ea3e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ea42:	f240 80dd 	bls.w	800ec00 <_printf_float+0x3a8>
 800ea46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	f7f2 f813 	bl	8000a78 <__aeabi_dcmpeq>
 800ea52:	2800      	cmp	r0, #0
 800ea54:	d033      	beq.n	800eabe <_printf_float+0x266>
 800ea56:	4a37      	ldr	r2, [pc, #220]	@ (800eb34 <_printf_float+0x2dc>)
 800ea58:	2301      	movs	r3, #1
 800ea5a:	4631      	mov	r1, r6
 800ea5c:	4628      	mov	r0, r5
 800ea5e:	47b8      	blx	r7
 800ea60:	3001      	adds	r0, #1
 800ea62:	f43f af54 	beq.w	800e90e <_printf_float+0xb6>
 800ea66:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800ea6a:	4543      	cmp	r3, r8
 800ea6c:	db02      	blt.n	800ea74 <_printf_float+0x21c>
 800ea6e:	6823      	ldr	r3, [r4, #0]
 800ea70:	07d8      	lsls	r0, r3, #31
 800ea72:	d50f      	bpl.n	800ea94 <_printf_float+0x23c>
 800ea74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea78:	4631      	mov	r1, r6
 800ea7a:	4628      	mov	r0, r5
 800ea7c:	47b8      	blx	r7
 800ea7e:	3001      	adds	r0, #1
 800ea80:	f43f af45 	beq.w	800e90e <_printf_float+0xb6>
 800ea84:	f04f 0900 	mov.w	r9, #0
 800ea88:	f108 38ff 	add.w	r8, r8, #4294967295
 800ea8c:	f104 0a1a 	add.w	sl, r4, #26
 800ea90:	45c8      	cmp	r8, r9
 800ea92:	dc09      	bgt.n	800eaa8 <_printf_float+0x250>
 800ea94:	6823      	ldr	r3, [r4, #0]
 800ea96:	079b      	lsls	r3, r3, #30
 800ea98:	f100 8103 	bmi.w	800eca2 <_printf_float+0x44a>
 800ea9c:	68e0      	ldr	r0, [r4, #12]
 800ea9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eaa0:	4298      	cmp	r0, r3
 800eaa2:	bfb8      	it	lt
 800eaa4:	4618      	movlt	r0, r3
 800eaa6:	e734      	b.n	800e912 <_printf_float+0xba>
 800eaa8:	2301      	movs	r3, #1
 800eaaa:	4652      	mov	r2, sl
 800eaac:	4631      	mov	r1, r6
 800eaae:	4628      	mov	r0, r5
 800eab0:	47b8      	blx	r7
 800eab2:	3001      	adds	r0, #1
 800eab4:	f43f af2b 	beq.w	800e90e <_printf_float+0xb6>
 800eab8:	f109 0901 	add.w	r9, r9, #1
 800eabc:	e7e8      	b.n	800ea90 <_printf_float+0x238>
 800eabe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	dc39      	bgt.n	800eb38 <_printf_float+0x2e0>
 800eac4:	4a1b      	ldr	r2, [pc, #108]	@ (800eb34 <_printf_float+0x2dc>)
 800eac6:	2301      	movs	r3, #1
 800eac8:	4631      	mov	r1, r6
 800eaca:	4628      	mov	r0, r5
 800eacc:	47b8      	blx	r7
 800eace:	3001      	adds	r0, #1
 800ead0:	f43f af1d 	beq.w	800e90e <_printf_float+0xb6>
 800ead4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800ead8:	ea59 0303 	orrs.w	r3, r9, r3
 800eadc:	d102      	bne.n	800eae4 <_printf_float+0x28c>
 800eade:	6823      	ldr	r3, [r4, #0]
 800eae0:	07d9      	lsls	r1, r3, #31
 800eae2:	d5d7      	bpl.n	800ea94 <_printf_float+0x23c>
 800eae4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eae8:	4631      	mov	r1, r6
 800eaea:	4628      	mov	r0, r5
 800eaec:	47b8      	blx	r7
 800eaee:	3001      	adds	r0, #1
 800eaf0:	f43f af0d 	beq.w	800e90e <_printf_float+0xb6>
 800eaf4:	f04f 0a00 	mov.w	sl, #0
 800eaf8:	f104 0b1a 	add.w	fp, r4, #26
 800eafc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eafe:	425b      	negs	r3, r3
 800eb00:	4553      	cmp	r3, sl
 800eb02:	dc01      	bgt.n	800eb08 <_printf_float+0x2b0>
 800eb04:	464b      	mov	r3, r9
 800eb06:	e793      	b.n	800ea30 <_printf_float+0x1d8>
 800eb08:	2301      	movs	r3, #1
 800eb0a:	465a      	mov	r2, fp
 800eb0c:	4631      	mov	r1, r6
 800eb0e:	4628      	mov	r0, r5
 800eb10:	47b8      	blx	r7
 800eb12:	3001      	adds	r0, #1
 800eb14:	f43f aefb 	beq.w	800e90e <_printf_float+0xb6>
 800eb18:	f10a 0a01 	add.w	sl, sl, #1
 800eb1c:	e7ee      	b.n	800eafc <_printf_float+0x2a4>
 800eb1e:	bf00      	nop
 800eb20:	7fefffff 	.word	0x7fefffff
 800eb24:	08011248 	.word	0x08011248
 800eb28:	0801124c 	.word	0x0801124c
 800eb2c:	08011250 	.word	0x08011250
 800eb30:	08011254 	.word	0x08011254
 800eb34:	08011258 	.word	0x08011258
 800eb38:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800eb3a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800eb3e:	4553      	cmp	r3, sl
 800eb40:	bfa8      	it	ge
 800eb42:	4653      	movge	r3, sl
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	4699      	mov	r9, r3
 800eb48:	dc36      	bgt.n	800ebb8 <_printf_float+0x360>
 800eb4a:	f04f 0b00 	mov.w	fp, #0
 800eb4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eb52:	f104 021a 	add.w	r2, r4, #26
 800eb56:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800eb58:	9306      	str	r3, [sp, #24]
 800eb5a:	eba3 0309 	sub.w	r3, r3, r9
 800eb5e:	455b      	cmp	r3, fp
 800eb60:	dc31      	bgt.n	800ebc6 <_printf_float+0x36e>
 800eb62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb64:	459a      	cmp	sl, r3
 800eb66:	dc3a      	bgt.n	800ebde <_printf_float+0x386>
 800eb68:	6823      	ldr	r3, [r4, #0]
 800eb6a:	07da      	lsls	r2, r3, #31
 800eb6c:	d437      	bmi.n	800ebde <_printf_float+0x386>
 800eb6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb70:	ebaa 0903 	sub.w	r9, sl, r3
 800eb74:	9b06      	ldr	r3, [sp, #24]
 800eb76:	ebaa 0303 	sub.w	r3, sl, r3
 800eb7a:	4599      	cmp	r9, r3
 800eb7c:	bfa8      	it	ge
 800eb7e:	4699      	movge	r9, r3
 800eb80:	f1b9 0f00 	cmp.w	r9, #0
 800eb84:	dc33      	bgt.n	800ebee <_printf_float+0x396>
 800eb86:	f04f 0800 	mov.w	r8, #0
 800eb8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eb8e:	f104 0b1a 	add.w	fp, r4, #26
 800eb92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb94:	ebaa 0303 	sub.w	r3, sl, r3
 800eb98:	eba3 0309 	sub.w	r3, r3, r9
 800eb9c:	4543      	cmp	r3, r8
 800eb9e:	f77f af79 	ble.w	800ea94 <_printf_float+0x23c>
 800eba2:	2301      	movs	r3, #1
 800eba4:	465a      	mov	r2, fp
 800eba6:	4631      	mov	r1, r6
 800eba8:	4628      	mov	r0, r5
 800ebaa:	47b8      	blx	r7
 800ebac:	3001      	adds	r0, #1
 800ebae:	f43f aeae 	beq.w	800e90e <_printf_float+0xb6>
 800ebb2:	f108 0801 	add.w	r8, r8, #1
 800ebb6:	e7ec      	b.n	800eb92 <_printf_float+0x33a>
 800ebb8:	4642      	mov	r2, r8
 800ebba:	4631      	mov	r1, r6
 800ebbc:	4628      	mov	r0, r5
 800ebbe:	47b8      	blx	r7
 800ebc0:	3001      	adds	r0, #1
 800ebc2:	d1c2      	bne.n	800eb4a <_printf_float+0x2f2>
 800ebc4:	e6a3      	b.n	800e90e <_printf_float+0xb6>
 800ebc6:	2301      	movs	r3, #1
 800ebc8:	4631      	mov	r1, r6
 800ebca:	4628      	mov	r0, r5
 800ebcc:	9206      	str	r2, [sp, #24]
 800ebce:	47b8      	blx	r7
 800ebd0:	3001      	adds	r0, #1
 800ebd2:	f43f ae9c 	beq.w	800e90e <_printf_float+0xb6>
 800ebd6:	9a06      	ldr	r2, [sp, #24]
 800ebd8:	f10b 0b01 	add.w	fp, fp, #1
 800ebdc:	e7bb      	b.n	800eb56 <_printf_float+0x2fe>
 800ebde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ebe2:	4631      	mov	r1, r6
 800ebe4:	4628      	mov	r0, r5
 800ebe6:	47b8      	blx	r7
 800ebe8:	3001      	adds	r0, #1
 800ebea:	d1c0      	bne.n	800eb6e <_printf_float+0x316>
 800ebec:	e68f      	b.n	800e90e <_printf_float+0xb6>
 800ebee:	9a06      	ldr	r2, [sp, #24]
 800ebf0:	464b      	mov	r3, r9
 800ebf2:	4442      	add	r2, r8
 800ebf4:	4631      	mov	r1, r6
 800ebf6:	4628      	mov	r0, r5
 800ebf8:	47b8      	blx	r7
 800ebfa:	3001      	adds	r0, #1
 800ebfc:	d1c3      	bne.n	800eb86 <_printf_float+0x32e>
 800ebfe:	e686      	b.n	800e90e <_printf_float+0xb6>
 800ec00:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ec04:	f1ba 0f01 	cmp.w	sl, #1
 800ec08:	dc01      	bgt.n	800ec0e <_printf_float+0x3b6>
 800ec0a:	07db      	lsls	r3, r3, #31
 800ec0c:	d536      	bpl.n	800ec7c <_printf_float+0x424>
 800ec0e:	2301      	movs	r3, #1
 800ec10:	4642      	mov	r2, r8
 800ec12:	4631      	mov	r1, r6
 800ec14:	4628      	mov	r0, r5
 800ec16:	47b8      	blx	r7
 800ec18:	3001      	adds	r0, #1
 800ec1a:	f43f ae78 	beq.w	800e90e <_printf_float+0xb6>
 800ec1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec22:	4631      	mov	r1, r6
 800ec24:	4628      	mov	r0, r5
 800ec26:	47b8      	blx	r7
 800ec28:	3001      	adds	r0, #1
 800ec2a:	f43f ae70 	beq.w	800e90e <_printf_float+0xb6>
 800ec2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ec32:	2200      	movs	r2, #0
 800ec34:	2300      	movs	r3, #0
 800ec36:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ec3a:	f7f1 ff1d 	bl	8000a78 <__aeabi_dcmpeq>
 800ec3e:	b9c0      	cbnz	r0, 800ec72 <_printf_float+0x41a>
 800ec40:	4653      	mov	r3, sl
 800ec42:	f108 0201 	add.w	r2, r8, #1
 800ec46:	4631      	mov	r1, r6
 800ec48:	4628      	mov	r0, r5
 800ec4a:	47b8      	blx	r7
 800ec4c:	3001      	adds	r0, #1
 800ec4e:	d10c      	bne.n	800ec6a <_printf_float+0x412>
 800ec50:	e65d      	b.n	800e90e <_printf_float+0xb6>
 800ec52:	2301      	movs	r3, #1
 800ec54:	465a      	mov	r2, fp
 800ec56:	4631      	mov	r1, r6
 800ec58:	4628      	mov	r0, r5
 800ec5a:	47b8      	blx	r7
 800ec5c:	3001      	adds	r0, #1
 800ec5e:	f43f ae56 	beq.w	800e90e <_printf_float+0xb6>
 800ec62:	f108 0801 	add.w	r8, r8, #1
 800ec66:	45d0      	cmp	r8, sl
 800ec68:	dbf3      	blt.n	800ec52 <_printf_float+0x3fa>
 800ec6a:	464b      	mov	r3, r9
 800ec6c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ec70:	e6df      	b.n	800ea32 <_printf_float+0x1da>
 800ec72:	f04f 0800 	mov.w	r8, #0
 800ec76:	f104 0b1a 	add.w	fp, r4, #26
 800ec7a:	e7f4      	b.n	800ec66 <_printf_float+0x40e>
 800ec7c:	2301      	movs	r3, #1
 800ec7e:	4642      	mov	r2, r8
 800ec80:	e7e1      	b.n	800ec46 <_printf_float+0x3ee>
 800ec82:	2301      	movs	r3, #1
 800ec84:	464a      	mov	r2, r9
 800ec86:	4631      	mov	r1, r6
 800ec88:	4628      	mov	r0, r5
 800ec8a:	47b8      	blx	r7
 800ec8c:	3001      	adds	r0, #1
 800ec8e:	f43f ae3e 	beq.w	800e90e <_printf_float+0xb6>
 800ec92:	f108 0801 	add.w	r8, r8, #1
 800ec96:	68e3      	ldr	r3, [r4, #12]
 800ec98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ec9a:	1a5b      	subs	r3, r3, r1
 800ec9c:	4543      	cmp	r3, r8
 800ec9e:	dcf0      	bgt.n	800ec82 <_printf_float+0x42a>
 800eca0:	e6fc      	b.n	800ea9c <_printf_float+0x244>
 800eca2:	f04f 0800 	mov.w	r8, #0
 800eca6:	f104 0919 	add.w	r9, r4, #25
 800ecaa:	e7f4      	b.n	800ec96 <_printf_float+0x43e>

0800ecac <_printf_common>:
 800ecac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecb0:	4616      	mov	r6, r2
 800ecb2:	4698      	mov	r8, r3
 800ecb4:	688a      	ldr	r2, [r1, #8]
 800ecb6:	690b      	ldr	r3, [r1, #16]
 800ecb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ecbc:	4293      	cmp	r3, r2
 800ecbe:	bfb8      	it	lt
 800ecc0:	4613      	movlt	r3, r2
 800ecc2:	6033      	str	r3, [r6, #0]
 800ecc4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ecc8:	4607      	mov	r7, r0
 800ecca:	460c      	mov	r4, r1
 800eccc:	b10a      	cbz	r2, 800ecd2 <_printf_common+0x26>
 800ecce:	3301      	adds	r3, #1
 800ecd0:	6033      	str	r3, [r6, #0]
 800ecd2:	6823      	ldr	r3, [r4, #0]
 800ecd4:	0699      	lsls	r1, r3, #26
 800ecd6:	bf42      	ittt	mi
 800ecd8:	6833      	ldrmi	r3, [r6, #0]
 800ecda:	3302      	addmi	r3, #2
 800ecdc:	6033      	strmi	r3, [r6, #0]
 800ecde:	6825      	ldr	r5, [r4, #0]
 800ece0:	f015 0506 	ands.w	r5, r5, #6
 800ece4:	d106      	bne.n	800ecf4 <_printf_common+0x48>
 800ece6:	f104 0a19 	add.w	sl, r4, #25
 800ecea:	68e3      	ldr	r3, [r4, #12]
 800ecec:	6832      	ldr	r2, [r6, #0]
 800ecee:	1a9b      	subs	r3, r3, r2
 800ecf0:	42ab      	cmp	r3, r5
 800ecf2:	dc26      	bgt.n	800ed42 <_printf_common+0x96>
 800ecf4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ecf8:	6822      	ldr	r2, [r4, #0]
 800ecfa:	3b00      	subs	r3, #0
 800ecfc:	bf18      	it	ne
 800ecfe:	2301      	movne	r3, #1
 800ed00:	0692      	lsls	r2, r2, #26
 800ed02:	d42b      	bmi.n	800ed5c <_printf_common+0xb0>
 800ed04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ed08:	4641      	mov	r1, r8
 800ed0a:	4638      	mov	r0, r7
 800ed0c:	47c8      	blx	r9
 800ed0e:	3001      	adds	r0, #1
 800ed10:	d01e      	beq.n	800ed50 <_printf_common+0xa4>
 800ed12:	6823      	ldr	r3, [r4, #0]
 800ed14:	6922      	ldr	r2, [r4, #16]
 800ed16:	f003 0306 	and.w	r3, r3, #6
 800ed1a:	2b04      	cmp	r3, #4
 800ed1c:	bf02      	ittt	eq
 800ed1e:	68e5      	ldreq	r5, [r4, #12]
 800ed20:	6833      	ldreq	r3, [r6, #0]
 800ed22:	1aed      	subeq	r5, r5, r3
 800ed24:	68a3      	ldr	r3, [r4, #8]
 800ed26:	bf0c      	ite	eq
 800ed28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ed2c:	2500      	movne	r5, #0
 800ed2e:	4293      	cmp	r3, r2
 800ed30:	bfc4      	itt	gt
 800ed32:	1a9b      	subgt	r3, r3, r2
 800ed34:	18ed      	addgt	r5, r5, r3
 800ed36:	2600      	movs	r6, #0
 800ed38:	341a      	adds	r4, #26
 800ed3a:	42b5      	cmp	r5, r6
 800ed3c:	d11a      	bne.n	800ed74 <_printf_common+0xc8>
 800ed3e:	2000      	movs	r0, #0
 800ed40:	e008      	b.n	800ed54 <_printf_common+0xa8>
 800ed42:	2301      	movs	r3, #1
 800ed44:	4652      	mov	r2, sl
 800ed46:	4641      	mov	r1, r8
 800ed48:	4638      	mov	r0, r7
 800ed4a:	47c8      	blx	r9
 800ed4c:	3001      	adds	r0, #1
 800ed4e:	d103      	bne.n	800ed58 <_printf_common+0xac>
 800ed50:	f04f 30ff 	mov.w	r0, #4294967295
 800ed54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed58:	3501      	adds	r5, #1
 800ed5a:	e7c6      	b.n	800ecea <_printf_common+0x3e>
 800ed5c:	18e1      	adds	r1, r4, r3
 800ed5e:	1c5a      	adds	r2, r3, #1
 800ed60:	2030      	movs	r0, #48	@ 0x30
 800ed62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ed66:	4422      	add	r2, r4
 800ed68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ed6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ed70:	3302      	adds	r3, #2
 800ed72:	e7c7      	b.n	800ed04 <_printf_common+0x58>
 800ed74:	2301      	movs	r3, #1
 800ed76:	4622      	mov	r2, r4
 800ed78:	4641      	mov	r1, r8
 800ed7a:	4638      	mov	r0, r7
 800ed7c:	47c8      	blx	r9
 800ed7e:	3001      	adds	r0, #1
 800ed80:	d0e6      	beq.n	800ed50 <_printf_common+0xa4>
 800ed82:	3601      	adds	r6, #1
 800ed84:	e7d9      	b.n	800ed3a <_printf_common+0x8e>
	...

0800ed88 <_printf_i>:
 800ed88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed8c:	7e0f      	ldrb	r7, [r1, #24]
 800ed8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ed90:	2f78      	cmp	r7, #120	@ 0x78
 800ed92:	4691      	mov	r9, r2
 800ed94:	4680      	mov	r8, r0
 800ed96:	460c      	mov	r4, r1
 800ed98:	469a      	mov	sl, r3
 800ed9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ed9e:	d807      	bhi.n	800edb0 <_printf_i+0x28>
 800eda0:	2f62      	cmp	r7, #98	@ 0x62
 800eda2:	d80a      	bhi.n	800edba <_printf_i+0x32>
 800eda4:	2f00      	cmp	r7, #0
 800eda6:	f000 80d2 	beq.w	800ef4e <_printf_i+0x1c6>
 800edaa:	2f58      	cmp	r7, #88	@ 0x58
 800edac:	f000 80b9 	beq.w	800ef22 <_printf_i+0x19a>
 800edb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800edb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800edb8:	e03a      	b.n	800ee30 <_printf_i+0xa8>
 800edba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800edbe:	2b15      	cmp	r3, #21
 800edc0:	d8f6      	bhi.n	800edb0 <_printf_i+0x28>
 800edc2:	a101      	add	r1, pc, #4	@ (adr r1, 800edc8 <_printf_i+0x40>)
 800edc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800edc8:	0800ee21 	.word	0x0800ee21
 800edcc:	0800ee35 	.word	0x0800ee35
 800edd0:	0800edb1 	.word	0x0800edb1
 800edd4:	0800edb1 	.word	0x0800edb1
 800edd8:	0800edb1 	.word	0x0800edb1
 800eddc:	0800edb1 	.word	0x0800edb1
 800ede0:	0800ee35 	.word	0x0800ee35
 800ede4:	0800edb1 	.word	0x0800edb1
 800ede8:	0800edb1 	.word	0x0800edb1
 800edec:	0800edb1 	.word	0x0800edb1
 800edf0:	0800edb1 	.word	0x0800edb1
 800edf4:	0800ef35 	.word	0x0800ef35
 800edf8:	0800ee5f 	.word	0x0800ee5f
 800edfc:	0800eeef 	.word	0x0800eeef
 800ee00:	0800edb1 	.word	0x0800edb1
 800ee04:	0800edb1 	.word	0x0800edb1
 800ee08:	0800ef57 	.word	0x0800ef57
 800ee0c:	0800edb1 	.word	0x0800edb1
 800ee10:	0800ee5f 	.word	0x0800ee5f
 800ee14:	0800edb1 	.word	0x0800edb1
 800ee18:	0800edb1 	.word	0x0800edb1
 800ee1c:	0800eef7 	.word	0x0800eef7
 800ee20:	6833      	ldr	r3, [r6, #0]
 800ee22:	1d1a      	adds	r2, r3, #4
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	6032      	str	r2, [r6, #0]
 800ee28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ee2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ee30:	2301      	movs	r3, #1
 800ee32:	e09d      	b.n	800ef70 <_printf_i+0x1e8>
 800ee34:	6833      	ldr	r3, [r6, #0]
 800ee36:	6820      	ldr	r0, [r4, #0]
 800ee38:	1d19      	adds	r1, r3, #4
 800ee3a:	6031      	str	r1, [r6, #0]
 800ee3c:	0606      	lsls	r6, r0, #24
 800ee3e:	d501      	bpl.n	800ee44 <_printf_i+0xbc>
 800ee40:	681d      	ldr	r5, [r3, #0]
 800ee42:	e003      	b.n	800ee4c <_printf_i+0xc4>
 800ee44:	0645      	lsls	r5, r0, #25
 800ee46:	d5fb      	bpl.n	800ee40 <_printf_i+0xb8>
 800ee48:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ee4c:	2d00      	cmp	r5, #0
 800ee4e:	da03      	bge.n	800ee58 <_printf_i+0xd0>
 800ee50:	232d      	movs	r3, #45	@ 0x2d
 800ee52:	426d      	negs	r5, r5
 800ee54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ee58:	4859      	ldr	r0, [pc, #356]	@ (800efc0 <_printf_i+0x238>)
 800ee5a:	230a      	movs	r3, #10
 800ee5c:	e011      	b.n	800ee82 <_printf_i+0xfa>
 800ee5e:	6821      	ldr	r1, [r4, #0]
 800ee60:	6833      	ldr	r3, [r6, #0]
 800ee62:	0608      	lsls	r0, r1, #24
 800ee64:	f853 5b04 	ldr.w	r5, [r3], #4
 800ee68:	d402      	bmi.n	800ee70 <_printf_i+0xe8>
 800ee6a:	0649      	lsls	r1, r1, #25
 800ee6c:	bf48      	it	mi
 800ee6e:	b2ad      	uxthmi	r5, r5
 800ee70:	2f6f      	cmp	r7, #111	@ 0x6f
 800ee72:	4853      	ldr	r0, [pc, #332]	@ (800efc0 <_printf_i+0x238>)
 800ee74:	6033      	str	r3, [r6, #0]
 800ee76:	bf14      	ite	ne
 800ee78:	230a      	movne	r3, #10
 800ee7a:	2308      	moveq	r3, #8
 800ee7c:	2100      	movs	r1, #0
 800ee7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ee82:	6866      	ldr	r6, [r4, #4]
 800ee84:	60a6      	str	r6, [r4, #8]
 800ee86:	2e00      	cmp	r6, #0
 800ee88:	bfa2      	ittt	ge
 800ee8a:	6821      	ldrge	r1, [r4, #0]
 800ee8c:	f021 0104 	bicge.w	r1, r1, #4
 800ee90:	6021      	strge	r1, [r4, #0]
 800ee92:	b90d      	cbnz	r5, 800ee98 <_printf_i+0x110>
 800ee94:	2e00      	cmp	r6, #0
 800ee96:	d04b      	beq.n	800ef30 <_printf_i+0x1a8>
 800ee98:	4616      	mov	r6, r2
 800ee9a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ee9e:	fb03 5711 	mls	r7, r3, r1, r5
 800eea2:	5dc7      	ldrb	r7, [r0, r7]
 800eea4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800eea8:	462f      	mov	r7, r5
 800eeaa:	42bb      	cmp	r3, r7
 800eeac:	460d      	mov	r5, r1
 800eeae:	d9f4      	bls.n	800ee9a <_printf_i+0x112>
 800eeb0:	2b08      	cmp	r3, #8
 800eeb2:	d10b      	bne.n	800eecc <_printf_i+0x144>
 800eeb4:	6823      	ldr	r3, [r4, #0]
 800eeb6:	07df      	lsls	r7, r3, #31
 800eeb8:	d508      	bpl.n	800eecc <_printf_i+0x144>
 800eeba:	6923      	ldr	r3, [r4, #16]
 800eebc:	6861      	ldr	r1, [r4, #4]
 800eebe:	4299      	cmp	r1, r3
 800eec0:	bfde      	ittt	le
 800eec2:	2330      	movle	r3, #48	@ 0x30
 800eec4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800eec8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800eecc:	1b92      	subs	r2, r2, r6
 800eece:	6122      	str	r2, [r4, #16]
 800eed0:	f8cd a000 	str.w	sl, [sp]
 800eed4:	464b      	mov	r3, r9
 800eed6:	aa03      	add	r2, sp, #12
 800eed8:	4621      	mov	r1, r4
 800eeda:	4640      	mov	r0, r8
 800eedc:	f7ff fee6 	bl	800ecac <_printf_common>
 800eee0:	3001      	adds	r0, #1
 800eee2:	d14a      	bne.n	800ef7a <_printf_i+0x1f2>
 800eee4:	f04f 30ff 	mov.w	r0, #4294967295
 800eee8:	b004      	add	sp, #16
 800eeea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eeee:	6823      	ldr	r3, [r4, #0]
 800eef0:	f043 0320 	orr.w	r3, r3, #32
 800eef4:	6023      	str	r3, [r4, #0]
 800eef6:	4833      	ldr	r0, [pc, #204]	@ (800efc4 <_printf_i+0x23c>)
 800eef8:	2778      	movs	r7, #120	@ 0x78
 800eefa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800eefe:	6823      	ldr	r3, [r4, #0]
 800ef00:	6831      	ldr	r1, [r6, #0]
 800ef02:	061f      	lsls	r7, r3, #24
 800ef04:	f851 5b04 	ldr.w	r5, [r1], #4
 800ef08:	d402      	bmi.n	800ef10 <_printf_i+0x188>
 800ef0a:	065f      	lsls	r7, r3, #25
 800ef0c:	bf48      	it	mi
 800ef0e:	b2ad      	uxthmi	r5, r5
 800ef10:	6031      	str	r1, [r6, #0]
 800ef12:	07d9      	lsls	r1, r3, #31
 800ef14:	bf44      	itt	mi
 800ef16:	f043 0320 	orrmi.w	r3, r3, #32
 800ef1a:	6023      	strmi	r3, [r4, #0]
 800ef1c:	b11d      	cbz	r5, 800ef26 <_printf_i+0x19e>
 800ef1e:	2310      	movs	r3, #16
 800ef20:	e7ac      	b.n	800ee7c <_printf_i+0xf4>
 800ef22:	4827      	ldr	r0, [pc, #156]	@ (800efc0 <_printf_i+0x238>)
 800ef24:	e7e9      	b.n	800eefa <_printf_i+0x172>
 800ef26:	6823      	ldr	r3, [r4, #0]
 800ef28:	f023 0320 	bic.w	r3, r3, #32
 800ef2c:	6023      	str	r3, [r4, #0]
 800ef2e:	e7f6      	b.n	800ef1e <_printf_i+0x196>
 800ef30:	4616      	mov	r6, r2
 800ef32:	e7bd      	b.n	800eeb0 <_printf_i+0x128>
 800ef34:	6833      	ldr	r3, [r6, #0]
 800ef36:	6825      	ldr	r5, [r4, #0]
 800ef38:	6961      	ldr	r1, [r4, #20]
 800ef3a:	1d18      	adds	r0, r3, #4
 800ef3c:	6030      	str	r0, [r6, #0]
 800ef3e:	062e      	lsls	r6, r5, #24
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	d501      	bpl.n	800ef48 <_printf_i+0x1c0>
 800ef44:	6019      	str	r1, [r3, #0]
 800ef46:	e002      	b.n	800ef4e <_printf_i+0x1c6>
 800ef48:	0668      	lsls	r0, r5, #25
 800ef4a:	d5fb      	bpl.n	800ef44 <_printf_i+0x1bc>
 800ef4c:	8019      	strh	r1, [r3, #0]
 800ef4e:	2300      	movs	r3, #0
 800ef50:	6123      	str	r3, [r4, #16]
 800ef52:	4616      	mov	r6, r2
 800ef54:	e7bc      	b.n	800eed0 <_printf_i+0x148>
 800ef56:	6833      	ldr	r3, [r6, #0]
 800ef58:	1d1a      	adds	r2, r3, #4
 800ef5a:	6032      	str	r2, [r6, #0]
 800ef5c:	681e      	ldr	r6, [r3, #0]
 800ef5e:	6862      	ldr	r2, [r4, #4]
 800ef60:	2100      	movs	r1, #0
 800ef62:	4630      	mov	r0, r6
 800ef64:	f7f1 f90c 	bl	8000180 <memchr>
 800ef68:	b108      	cbz	r0, 800ef6e <_printf_i+0x1e6>
 800ef6a:	1b80      	subs	r0, r0, r6
 800ef6c:	6060      	str	r0, [r4, #4]
 800ef6e:	6863      	ldr	r3, [r4, #4]
 800ef70:	6123      	str	r3, [r4, #16]
 800ef72:	2300      	movs	r3, #0
 800ef74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ef78:	e7aa      	b.n	800eed0 <_printf_i+0x148>
 800ef7a:	6923      	ldr	r3, [r4, #16]
 800ef7c:	4632      	mov	r2, r6
 800ef7e:	4649      	mov	r1, r9
 800ef80:	4640      	mov	r0, r8
 800ef82:	47d0      	blx	sl
 800ef84:	3001      	adds	r0, #1
 800ef86:	d0ad      	beq.n	800eee4 <_printf_i+0x15c>
 800ef88:	6823      	ldr	r3, [r4, #0]
 800ef8a:	079b      	lsls	r3, r3, #30
 800ef8c:	d413      	bmi.n	800efb6 <_printf_i+0x22e>
 800ef8e:	68e0      	ldr	r0, [r4, #12]
 800ef90:	9b03      	ldr	r3, [sp, #12]
 800ef92:	4298      	cmp	r0, r3
 800ef94:	bfb8      	it	lt
 800ef96:	4618      	movlt	r0, r3
 800ef98:	e7a6      	b.n	800eee8 <_printf_i+0x160>
 800ef9a:	2301      	movs	r3, #1
 800ef9c:	4632      	mov	r2, r6
 800ef9e:	4649      	mov	r1, r9
 800efa0:	4640      	mov	r0, r8
 800efa2:	47d0      	blx	sl
 800efa4:	3001      	adds	r0, #1
 800efa6:	d09d      	beq.n	800eee4 <_printf_i+0x15c>
 800efa8:	3501      	adds	r5, #1
 800efaa:	68e3      	ldr	r3, [r4, #12]
 800efac:	9903      	ldr	r1, [sp, #12]
 800efae:	1a5b      	subs	r3, r3, r1
 800efb0:	42ab      	cmp	r3, r5
 800efb2:	dcf2      	bgt.n	800ef9a <_printf_i+0x212>
 800efb4:	e7eb      	b.n	800ef8e <_printf_i+0x206>
 800efb6:	2500      	movs	r5, #0
 800efb8:	f104 0619 	add.w	r6, r4, #25
 800efbc:	e7f5      	b.n	800efaa <_printf_i+0x222>
 800efbe:	bf00      	nop
 800efc0:	0801125a 	.word	0x0801125a
 800efc4:	0801126b 	.word	0x0801126b

0800efc8 <std>:
 800efc8:	2300      	movs	r3, #0
 800efca:	b510      	push	{r4, lr}
 800efcc:	4604      	mov	r4, r0
 800efce:	e9c0 3300 	strd	r3, r3, [r0]
 800efd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800efd6:	6083      	str	r3, [r0, #8]
 800efd8:	8181      	strh	r1, [r0, #12]
 800efda:	6643      	str	r3, [r0, #100]	@ 0x64
 800efdc:	81c2      	strh	r2, [r0, #14]
 800efde:	6183      	str	r3, [r0, #24]
 800efe0:	4619      	mov	r1, r3
 800efe2:	2208      	movs	r2, #8
 800efe4:	305c      	adds	r0, #92	@ 0x5c
 800efe6:	f000 f90e 	bl	800f206 <memset>
 800efea:	4b0d      	ldr	r3, [pc, #52]	@ (800f020 <std+0x58>)
 800efec:	6263      	str	r3, [r4, #36]	@ 0x24
 800efee:	4b0d      	ldr	r3, [pc, #52]	@ (800f024 <std+0x5c>)
 800eff0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800eff2:	4b0d      	ldr	r3, [pc, #52]	@ (800f028 <std+0x60>)
 800eff4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800eff6:	4b0d      	ldr	r3, [pc, #52]	@ (800f02c <std+0x64>)
 800eff8:	6323      	str	r3, [r4, #48]	@ 0x30
 800effa:	4b0d      	ldr	r3, [pc, #52]	@ (800f030 <std+0x68>)
 800effc:	6224      	str	r4, [r4, #32]
 800effe:	429c      	cmp	r4, r3
 800f000:	d006      	beq.n	800f010 <std+0x48>
 800f002:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f006:	4294      	cmp	r4, r2
 800f008:	d002      	beq.n	800f010 <std+0x48>
 800f00a:	33d0      	adds	r3, #208	@ 0xd0
 800f00c:	429c      	cmp	r4, r3
 800f00e:	d105      	bne.n	800f01c <std+0x54>
 800f010:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f018:	f000 b972 	b.w	800f300 <__retarget_lock_init_recursive>
 800f01c:	bd10      	pop	{r4, pc}
 800f01e:	bf00      	nop
 800f020:	0800f181 	.word	0x0800f181
 800f024:	0800f1a3 	.word	0x0800f1a3
 800f028:	0800f1db 	.word	0x0800f1db
 800f02c:	0800f1ff 	.word	0x0800f1ff
 800f030:	20001f2c 	.word	0x20001f2c

0800f034 <stdio_exit_handler>:
 800f034:	4a02      	ldr	r2, [pc, #8]	@ (800f040 <stdio_exit_handler+0xc>)
 800f036:	4903      	ldr	r1, [pc, #12]	@ (800f044 <stdio_exit_handler+0x10>)
 800f038:	4803      	ldr	r0, [pc, #12]	@ (800f048 <stdio_exit_handler+0x14>)
 800f03a:	f000 b869 	b.w	800f110 <_fwalk_sglue>
 800f03e:	bf00      	nop
 800f040:	20000124 	.word	0x20000124
 800f044:	08010c51 	.word	0x08010c51
 800f048:	20000134 	.word	0x20000134

0800f04c <cleanup_stdio>:
 800f04c:	6841      	ldr	r1, [r0, #4]
 800f04e:	4b0c      	ldr	r3, [pc, #48]	@ (800f080 <cleanup_stdio+0x34>)
 800f050:	4299      	cmp	r1, r3
 800f052:	b510      	push	{r4, lr}
 800f054:	4604      	mov	r4, r0
 800f056:	d001      	beq.n	800f05c <cleanup_stdio+0x10>
 800f058:	f001 fdfa 	bl	8010c50 <_fflush_r>
 800f05c:	68a1      	ldr	r1, [r4, #8]
 800f05e:	4b09      	ldr	r3, [pc, #36]	@ (800f084 <cleanup_stdio+0x38>)
 800f060:	4299      	cmp	r1, r3
 800f062:	d002      	beq.n	800f06a <cleanup_stdio+0x1e>
 800f064:	4620      	mov	r0, r4
 800f066:	f001 fdf3 	bl	8010c50 <_fflush_r>
 800f06a:	68e1      	ldr	r1, [r4, #12]
 800f06c:	4b06      	ldr	r3, [pc, #24]	@ (800f088 <cleanup_stdio+0x3c>)
 800f06e:	4299      	cmp	r1, r3
 800f070:	d004      	beq.n	800f07c <cleanup_stdio+0x30>
 800f072:	4620      	mov	r0, r4
 800f074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f078:	f001 bdea 	b.w	8010c50 <_fflush_r>
 800f07c:	bd10      	pop	{r4, pc}
 800f07e:	bf00      	nop
 800f080:	20001f2c 	.word	0x20001f2c
 800f084:	20001f94 	.word	0x20001f94
 800f088:	20001ffc 	.word	0x20001ffc

0800f08c <global_stdio_init.part.0>:
 800f08c:	b510      	push	{r4, lr}
 800f08e:	4b0b      	ldr	r3, [pc, #44]	@ (800f0bc <global_stdio_init.part.0+0x30>)
 800f090:	4c0b      	ldr	r4, [pc, #44]	@ (800f0c0 <global_stdio_init.part.0+0x34>)
 800f092:	4a0c      	ldr	r2, [pc, #48]	@ (800f0c4 <global_stdio_init.part.0+0x38>)
 800f094:	601a      	str	r2, [r3, #0]
 800f096:	4620      	mov	r0, r4
 800f098:	2200      	movs	r2, #0
 800f09a:	2104      	movs	r1, #4
 800f09c:	f7ff ff94 	bl	800efc8 <std>
 800f0a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f0a4:	2201      	movs	r2, #1
 800f0a6:	2109      	movs	r1, #9
 800f0a8:	f7ff ff8e 	bl	800efc8 <std>
 800f0ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f0b0:	2202      	movs	r2, #2
 800f0b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0b6:	2112      	movs	r1, #18
 800f0b8:	f7ff bf86 	b.w	800efc8 <std>
 800f0bc:	20002064 	.word	0x20002064
 800f0c0:	20001f2c 	.word	0x20001f2c
 800f0c4:	0800f035 	.word	0x0800f035

0800f0c8 <__sfp_lock_acquire>:
 800f0c8:	4801      	ldr	r0, [pc, #4]	@ (800f0d0 <__sfp_lock_acquire+0x8>)
 800f0ca:	f000 b91a 	b.w	800f302 <__retarget_lock_acquire_recursive>
 800f0ce:	bf00      	nop
 800f0d0:	2000206d 	.word	0x2000206d

0800f0d4 <__sfp_lock_release>:
 800f0d4:	4801      	ldr	r0, [pc, #4]	@ (800f0dc <__sfp_lock_release+0x8>)
 800f0d6:	f000 b915 	b.w	800f304 <__retarget_lock_release_recursive>
 800f0da:	bf00      	nop
 800f0dc:	2000206d 	.word	0x2000206d

0800f0e0 <__sinit>:
 800f0e0:	b510      	push	{r4, lr}
 800f0e2:	4604      	mov	r4, r0
 800f0e4:	f7ff fff0 	bl	800f0c8 <__sfp_lock_acquire>
 800f0e8:	6a23      	ldr	r3, [r4, #32]
 800f0ea:	b11b      	cbz	r3, 800f0f4 <__sinit+0x14>
 800f0ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0f0:	f7ff bff0 	b.w	800f0d4 <__sfp_lock_release>
 800f0f4:	4b04      	ldr	r3, [pc, #16]	@ (800f108 <__sinit+0x28>)
 800f0f6:	6223      	str	r3, [r4, #32]
 800f0f8:	4b04      	ldr	r3, [pc, #16]	@ (800f10c <__sinit+0x2c>)
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d1f5      	bne.n	800f0ec <__sinit+0xc>
 800f100:	f7ff ffc4 	bl	800f08c <global_stdio_init.part.0>
 800f104:	e7f2      	b.n	800f0ec <__sinit+0xc>
 800f106:	bf00      	nop
 800f108:	0800f04d 	.word	0x0800f04d
 800f10c:	20002064 	.word	0x20002064

0800f110 <_fwalk_sglue>:
 800f110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f114:	4607      	mov	r7, r0
 800f116:	4688      	mov	r8, r1
 800f118:	4614      	mov	r4, r2
 800f11a:	2600      	movs	r6, #0
 800f11c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f120:	f1b9 0901 	subs.w	r9, r9, #1
 800f124:	d505      	bpl.n	800f132 <_fwalk_sglue+0x22>
 800f126:	6824      	ldr	r4, [r4, #0]
 800f128:	2c00      	cmp	r4, #0
 800f12a:	d1f7      	bne.n	800f11c <_fwalk_sglue+0xc>
 800f12c:	4630      	mov	r0, r6
 800f12e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f132:	89ab      	ldrh	r3, [r5, #12]
 800f134:	2b01      	cmp	r3, #1
 800f136:	d907      	bls.n	800f148 <_fwalk_sglue+0x38>
 800f138:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f13c:	3301      	adds	r3, #1
 800f13e:	d003      	beq.n	800f148 <_fwalk_sglue+0x38>
 800f140:	4629      	mov	r1, r5
 800f142:	4638      	mov	r0, r7
 800f144:	47c0      	blx	r8
 800f146:	4306      	orrs	r6, r0
 800f148:	3568      	adds	r5, #104	@ 0x68
 800f14a:	e7e9      	b.n	800f120 <_fwalk_sglue+0x10>

0800f14c <iprintf>:
 800f14c:	b40f      	push	{r0, r1, r2, r3}
 800f14e:	b507      	push	{r0, r1, r2, lr}
 800f150:	4906      	ldr	r1, [pc, #24]	@ (800f16c <iprintf+0x20>)
 800f152:	ab04      	add	r3, sp, #16
 800f154:	6808      	ldr	r0, [r1, #0]
 800f156:	f853 2b04 	ldr.w	r2, [r3], #4
 800f15a:	6881      	ldr	r1, [r0, #8]
 800f15c:	9301      	str	r3, [sp, #4]
 800f15e:	f001 fbdb 	bl	8010918 <_vfiprintf_r>
 800f162:	b003      	add	sp, #12
 800f164:	f85d eb04 	ldr.w	lr, [sp], #4
 800f168:	b004      	add	sp, #16
 800f16a:	4770      	bx	lr
 800f16c:	20000130 	.word	0x20000130

0800f170 <putchar>:
 800f170:	4b02      	ldr	r3, [pc, #8]	@ (800f17c <putchar+0xc>)
 800f172:	4601      	mov	r1, r0
 800f174:	6818      	ldr	r0, [r3, #0]
 800f176:	6882      	ldr	r2, [r0, #8]
 800f178:	f001 bd92 	b.w	8010ca0 <_putc_r>
 800f17c:	20000130 	.word	0x20000130

0800f180 <__sread>:
 800f180:	b510      	push	{r4, lr}
 800f182:	460c      	mov	r4, r1
 800f184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f188:	f000 f86c 	bl	800f264 <_read_r>
 800f18c:	2800      	cmp	r0, #0
 800f18e:	bfab      	itete	ge
 800f190:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f192:	89a3      	ldrhlt	r3, [r4, #12]
 800f194:	181b      	addge	r3, r3, r0
 800f196:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f19a:	bfac      	ite	ge
 800f19c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f19e:	81a3      	strhlt	r3, [r4, #12]
 800f1a0:	bd10      	pop	{r4, pc}

0800f1a2 <__swrite>:
 800f1a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1a6:	461f      	mov	r7, r3
 800f1a8:	898b      	ldrh	r3, [r1, #12]
 800f1aa:	05db      	lsls	r3, r3, #23
 800f1ac:	4605      	mov	r5, r0
 800f1ae:	460c      	mov	r4, r1
 800f1b0:	4616      	mov	r6, r2
 800f1b2:	d505      	bpl.n	800f1c0 <__swrite+0x1e>
 800f1b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1b8:	2302      	movs	r3, #2
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	f000 f840 	bl	800f240 <_lseek_r>
 800f1c0:	89a3      	ldrh	r3, [r4, #12]
 800f1c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f1c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f1ca:	81a3      	strh	r3, [r4, #12]
 800f1cc:	4632      	mov	r2, r6
 800f1ce:	463b      	mov	r3, r7
 800f1d0:	4628      	mov	r0, r5
 800f1d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f1d6:	f000 b857 	b.w	800f288 <_write_r>

0800f1da <__sseek>:
 800f1da:	b510      	push	{r4, lr}
 800f1dc:	460c      	mov	r4, r1
 800f1de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1e2:	f000 f82d 	bl	800f240 <_lseek_r>
 800f1e6:	1c43      	adds	r3, r0, #1
 800f1e8:	89a3      	ldrh	r3, [r4, #12]
 800f1ea:	bf15      	itete	ne
 800f1ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f1ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f1f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f1f6:	81a3      	strheq	r3, [r4, #12]
 800f1f8:	bf18      	it	ne
 800f1fa:	81a3      	strhne	r3, [r4, #12]
 800f1fc:	bd10      	pop	{r4, pc}

0800f1fe <__sclose>:
 800f1fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f202:	f000 b80d 	b.w	800f220 <_close_r>

0800f206 <memset>:
 800f206:	4402      	add	r2, r0
 800f208:	4603      	mov	r3, r0
 800f20a:	4293      	cmp	r3, r2
 800f20c:	d100      	bne.n	800f210 <memset+0xa>
 800f20e:	4770      	bx	lr
 800f210:	f803 1b01 	strb.w	r1, [r3], #1
 800f214:	e7f9      	b.n	800f20a <memset+0x4>
	...

0800f218 <_localeconv_r>:
 800f218:	4800      	ldr	r0, [pc, #0]	@ (800f21c <_localeconv_r+0x4>)
 800f21a:	4770      	bx	lr
 800f21c:	20000270 	.word	0x20000270

0800f220 <_close_r>:
 800f220:	b538      	push	{r3, r4, r5, lr}
 800f222:	4d06      	ldr	r5, [pc, #24]	@ (800f23c <_close_r+0x1c>)
 800f224:	2300      	movs	r3, #0
 800f226:	4604      	mov	r4, r0
 800f228:	4608      	mov	r0, r1
 800f22a:	602b      	str	r3, [r5, #0]
 800f22c:	f7f2 fae4 	bl	80017f8 <_close>
 800f230:	1c43      	adds	r3, r0, #1
 800f232:	d102      	bne.n	800f23a <_close_r+0x1a>
 800f234:	682b      	ldr	r3, [r5, #0]
 800f236:	b103      	cbz	r3, 800f23a <_close_r+0x1a>
 800f238:	6023      	str	r3, [r4, #0]
 800f23a:	bd38      	pop	{r3, r4, r5, pc}
 800f23c:	20002068 	.word	0x20002068

0800f240 <_lseek_r>:
 800f240:	b538      	push	{r3, r4, r5, lr}
 800f242:	4d07      	ldr	r5, [pc, #28]	@ (800f260 <_lseek_r+0x20>)
 800f244:	4604      	mov	r4, r0
 800f246:	4608      	mov	r0, r1
 800f248:	4611      	mov	r1, r2
 800f24a:	2200      	movs	r2, #0
 800f24c:	602a      	str	r2, [r5, #0]
 800f24e:	461a      	mov	r2, r3
 800f250:	f7f2 faf9 	bl	8001846 <_lseek>
 800f254:	1c43      	adds	r3, r0, #1
 800f256:	d102      	bne.n	800f25e <_lseek_r+0x1e>
 800f258:	682b      	ldr	r3, [r5, #0]
 800f25a:	b103      	cbz	r3, 800f25e <_lseek_r+0x1e>
 800f25c:	6023      	str	r3, [r4, #0]
 800f25e:	bd38      	pop	{r3, r4, r5, pc}
 800f260:	20002068 	.word	0x20002068

0800f264 <_read_r>:
 800f264:	b538      	push	{r3, r4, r5, lr}
 800f266:	4d07      	ldr	r5, [pc, #28]	@ (800f284 <_read_r+0x20>)
 800f268:	4604      	mov	r4, r0
 800f26a:	4608      	mov	r0, r1
 800f26c:	4611      	mov	r1, r2
 800f26e:	2200      	movs	r2, #0
 800f270:	602a      	str	r2, [r5, #0]
 800f272:	461a      	mov	r2, r3
 800f274:	f7f2 fa87 	bl	8001786 <_read>
 800f278:	1c43      	adds	r3, r0, #1
 800f27a:	d102      	bne.n	800f282 <_read_r+0x1e>
 800f27c:	682b      	ldr	r3, [r5, #0]
 800f27e:	b103      	cbz	r3, 800f282 <_read_r+0x1e>
 800f280:	6023      	str	r3, [r4, #0]
 800f282:	bd38      	pop	{r3, r4, r5, pc}
 800f284:	20002068 	.word	0x20002068

0800f288 <_write_r>:
 800f288:	b538      	push	{r3, r4, r5, lr}
 800f28a:	4d07      	ldr	r5, [pc, #28]	@ (800f2a8 <_write_r+0x20>)
 800f28c:	4604      	mov	r4, r0
 800f28e:	4608      	mov	r0, r1
 800f290:	4611      	mov	r1, r2
 800f292:	2200      	movs	r2, #0
 800f294:	602a      	str	r2, [r5, #0]
 800f296:	461a      	mov	r2, r3
 800f298:	f7f2 fa92 	bl	80017c0 <_write>
 800f29c:	1c43      	adds	r3, r0, #1
 800f29e:	d102      	bne.n	800f2a6 <_write_r+0x1e>
 800f2a0:	682b      	ldr	r3, [r5, #0]
 800f2a2:	b103      	cbz	r3, 800f2a6 <_write_r+0x1e>
 800f2a4:	6023      	str	r3, [r4, #0]
 800f2a6:	bd38      	pop	{r3, r4, r5, pc}
 800f2a8:	20002068 	.word	0x20002068

0800f2ac <__errno>:
 800f2ac:	4b01      	ldr	r3, [pc, #4]	@ (800f2b4 <__errno+0x8>)
 800f2ae:	6818      	ldr	r0, [r3, #0]
 800f2b0:	4770      	bx	lr
 800f2b2:	bf00      	nop
 800f2b4:	20000130 	.word	0x20000130

0800f2b8 <__libc_init_array>:
 800f2b8:	b570      	push	{r4, r5, r6, lr}
 800f2ba:	4d0d      	ldr	r5, [pc, #52]	@ (800f2f0 <__libc_init_array+0x38>)
 800f2bc:	4c0d      	ldr	r4, [pc, #52]	@ (800f2f4 <__libc_init_array+0x3c>)
 800f2be:	1b64      	subs	r4, r4, r5
 800f2c0:	10a4      	asrs	r4, r4, #2
 800f2c2:	2600      	movs	r6, #0
 800f2c4:	42a6      	cmp	r6, r4
 800f2c6:	d109      	bne.n	800f2dc <__libc_init_array+0x24>
 800f2c8:	4d0b      	ldr	r5, [pc, #44]	@ (800f2f8 <__libc_init_array+0x40>)
 800f2ca:	4c0c      	ldr	r4, [pc, #48]	@ (800f2fc <__libc_init_array+0x44>)
 800f2cc:	f001 fef4 	bl	80110b8 <_init>
 800f2d0:	1b64      	subs	r4, r4, r5
 800f2d2:	10a4      	asrs	r4, r4, #2
 800f2d4:	2600      	movs	r6, #0
 800f2d6:	42a6      	cmp	r6, r4
 800f2d8:	d105      	bne.n	800f2e6 <__libc_init_array+0x2e>
 800f2da:	bd70      	pop	{r4, r5, r6, pc}
 800f2dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800f2e0:	4798      	blx	r3
 800f2e2:	3601      	adds	r6, #1
 800f2e4:	e7ee      	b.n	800f2c4 <__libc_init_array+0xc>
 800f2e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800f2ea:	4798      	blx	r3
 800f2ec:	3601      	adds	r6, #1
 800f2ee:	e7f2      	b.n	800f2d6 <__libc_init_array+0x1e>
 800f2f0:	080115c0 	.word	0x080115c0
 800f2f4:	080115c0 	.word	0x080115c0
 800f2f8:	080115c0 	.word	0x080115c0
 800f2fc:	080115c4 	.word	0x080115c4

0800f300 <__retarget_lock_init_recursive>:
 800f300:	4770      	bx	lr

0800f302 <__retarget_lock_acquire_recursive>:
 800f302:	4770      	bx	lr

0800f304 <__retarget_lock_release_recursive>:
 800f304:	4770      	bx	lr

0800f306 <memcpy>:
 800f306:	440a      	add	r2, r1
 800f308:	4291      	cmp	r1, r2
 800f30a:	f100 33ff 	add.w	r3, r0, #4294967295
 800f30e:	d100      	bne.n	800f312 <memcpy+0xc>
 800f310:	4770      	bx	lr
 800f312:	b510      	push	{r4, lr}
 800f314:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f318:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f31c:	4291      	cmp	r1, r2
 800f31e:	d1f9      	bne.n	800f314 <memcpy+0xe>
 800f320:	bd10      	pop	{r4, pc}

0800f322 <quorem>:
 800f322:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f326:	6903      	ldr	r3, [r0, #16]
 800f328:	690c      	ldr	r4, [r1, #16]
 800f32a:	42a3      	cmp	r3, r4
 800f32c:	4607      	mov	r7, r0
 800f32e:	db7e      	blt.n	800f42e <quorem+0x10c>
 800f330:	3c01      	subs	r4, #1
 800f332:	f101 0814 	add.w	r8, r1, #20
 800f336:	00a3      	lsls	r3, r4, #2
 800f338:	f100 0514 	add.w	r5, r0, #20
 800f33c:	9300      	str	r3, [sp, #0]
 800f33e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f342:	9301      	str	r3, [sp, #4]
 800f344:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f348:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f34c:	3301      	adds	r3, #1
 800f34e:	429a      	cmp	r2, r3
 800f350:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f354:	fbb2 f6f3 	udiv	r6, r2, r3
 800f358:	d32e      	bcc.n	800f3b8 <quorem+0x96>
 800f35a:	f04f 0a00 	mov.w	sl, #0
 800f35e:	46c4      	mov	ip, r8
 800f360:	46ae      	mov	lr, r5
 800f362:	46d3      	mov	fp, sl
 800f364:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f368:	b298      	uxth	r0, r3
 800f36a:	fb06 a000 	mla	r0, r6, r0, sl
 800f36e:	0c02      	lsrs	r2, r0, #16
 800f370:	0c1b      	lsrs	r3, r3, #16
 800f372:	fb06 2303 	mla	r3, r6, r3, r2
 800f376:	f8de 2000 	ldr.w	r2, [lr]
 800f37a:	b280      	uxth	r0, r0
 800f37c:	b292      	uxth	r2, r2
 800f37e:	1a12      	subs	r2, r2, r0
 800f380:	445a      	add	r2, fp
 800f382:	f8de 0000 	ldr.w	r0, [lr]
 800f386:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f38a:	b29b      	uxth	r3, r3
 800f38c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f390:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f394:	b292      	uxth	r2, r2
 800f396:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f39a:	45e1      	cmp	r9, ip
 800f39c:	f84e 2b04 	str.w	r2, [lr], #4
 800f3a0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f3a4:	d2de      	bcs.n	800f364 <quorem+0x42>
 800f3a6:	9b00      	ldr	r3, [sp, #0]
 800f3a8:	58eb      	ldr	r3, [r5, r3]
 800f3aa:	b92b      	cbnz	r3, 800f3b8 <quorem+0x96>
 800f3ac:	9b01      	ldr	r3, [sp, #4]
 800f3ae:	3b04      	subs	r3, #4
 800f3b0:	429d      	cmp	r5, r3
 800f3b2:	461a      	mov	r2, r3
 800f3b4:	d32f      	bcc.n	800f416 <quorem+0xf4>
 800f3b6:	613c      	str	r4, [r7, #16]
 800f3b8:	4638      	mov	r0, r7
 800f3ba:	f001 f97b 	bl	80106b4 <__mcmp>
 800f3be:	2800      	cmp	r0, #0
 800f3c0:	db25      	blt.n	800f40e <quorem+0xec>
 800f3c2:	4629      	mov	r1, r5
 800f3c4:	2000      	movs	r0, #0
 800f3c6:	f858 2b04 	ldr.w	r2, [r8], #4
 800f3ca:	f8d1 c000 	ldr.w	ip, [r1]
 800f3ce:	fa1f fe82 	uxth.w	lr, r2
 800f3d2:	fa1f f38c 	uxth.w	r3, ip
 800f3d6:	eba3 030e 	sub.w	r3, r3, lr
 800f3da:	4403      	add	r3, r0
 800f3dc:	0c12      	lsrs	r2, r2, #16
 800f3de:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f3e2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f3e6:	b29b      	uxth	r3, r3
 800f3e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f3ec:	45c1      	cmp	r9, r8
 800f3ee:	f841 3b04 	str.w	r3, [r1], #4
 800f3f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f3f6:	d2e6      	bcs.n	800f3c6 <quorem+0xa4>
 800f3f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f3fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f400:	b922      	cbnz	r2, 800f40c <quorem+0xea>
 800f402:	3b04      	subs	r3, #4
 800f404:	429d      	cmp	r5, r3
 800f406:	461a      	mov	r2, r3
 800f408:	d30b      	bcc.n	800f422 <quorem+0x100>
 800f40a:	613c      	str	r4, [r7, #16]
 800f40c:	3601      	adds	r6, #1
 800f40e:	4630      	mov	r0, r6
 800f410:	b003      	add	sp, #12
 800f412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f416:	6812      	ldr	r2, [r2, #0]
 800f418:	3b04      	subs	r3, #4
 800f41a:	2a00      	cmp	r2, #0
 800f41c:	d1cb      	bne.n	800f3b6 <quorem+0x94>
 800f41e:	3c01      	subs	r4, #1
 800f420:	e7c6      	b.n	800f3b0 <quorem+0x8e>
 800f422:	6812      	ldr	r2, [r2, #0]
 800f424:	3b04      	subs	r3, #4
 800f426:	2a00      	cmp	r2, #0
 800f428:	d1ef      	bne.n	800f40a <quorem+0xe8>
 800f42a:	3c01      	subs	r4, #1
 800f42c:	e7ea      	b.n	800f404 <quorem+0xe2>
 800f42e:	2000      	movs	r0, #0
 800f430:	e7ee      	b.n	800f410 <quorem+0xee>
 800f432:	0000      	movs	r0, r0
 800f434:	0000      	movs	r0, r0
	...

0800f438 <_dtoa_r>:
 800f438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f43c:	69c7      	ldr	r7, [r0, #28]
 800f43e:	b099      	sub	sp, #100	@ 0x64
 800f440:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f444:	ec55 4b10 	vmov	r4, r5, d0
 800f448:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800f44a:	9109      	str	r1, [sp, #36]	@ 0x24
 800f44c:	4683      	mov	fp, r0
 800f44e:	920e      	str	r2, [sp, #56]	@ 0x38
 800f450:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f452:	b97f      	cbnz	r7, 800f474 <_dtoa_r+0x3c>
 800f454:	2010      	movs	r0, #16
 800f456:	f000 fdfd 	bl	8010054 <malloc>
 800f45a:	4602      	mov	r2, r0
 800f45c:	f8cb 001c 	str.w	r0, [fp, #28]
 800f460:	b920      	cbnz	r0, 800f46c <_dtoa_r+0x34>
 800f462:	4ba7      	ldr	r3, [pc, #668]	@ (800f700 <_dtoa_r+0x2c8>)
 800f464:	21ef      	movs	r1, #239	@ 0xef
 800f466:	48a7      	ldr	r0, [pc, #668]	@ (800f704 <_dtoa_r+0x2cc>)
 800f468:	f001 fcf2 	bl	8010e50 <__assert_func>
 800f46c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f470:	6007      	str	r7, [r0, #0]
 800f472:	60c7      	str	r7, [r0, #12]
 800f474:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f478:	6819      	ldr	r1, [r3, #0]
 800f47a:	b159      	cbz	r1, 800f494 <_dtoa_r+0x5c>
 800f47c:	685a      	ldr	r2, [r3, #4]
 800f47e:	604a      	str	r2, [r1, #4]
 800f480:	2301      	movs	r3, #1
 800f482:	4093      	lsls	r3, r2
 800f484:	608b      	str	r3, [r1, #8]
 800f486:	4658      	mov	r0, fp
 800f488:	f000 feda 	bl	8010240 <_Bfree>
 800f48c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f490:	2200      	movs	r2, #0
 800f492:	601a      	str	r2, [r3, #0]
 800f494:	1e2b      	subs	r3, r5, #0
 800f496:	bfb9      	ittee	lt
 800f498:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f49c:	9303      	strlt	r3, [sp, #12]
 800f49e:	2300      	movge	r3, #0
 800f4a0:	6033      	strge	r3, [r6, #0]
 800f4a2:	9f03      	ldr	r7, [sp, #12]
 800f4a4:	4b98      	ldr	r3, [pc, #608]	@ (800f708 <_dtoa_r+0x2d0>)
 800f4a6:	bfbc      	itt	lt
 800f4a8:	2201      	movlt	r2, #1
 800f4aa:	6032      	strlt	r2, [r6, #0]
 800f4ac:	43bb      	bics	r3, r7
 800f4ae:	d112      	bne.n	800f4d6 <_dtoa_r+0x9e>
 800f4b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f4b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f4b6:	6013      	str	r3, [r2, #0]
 800f4b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f4bc:	4323      	orrs	r3, r4
 800f4be:	f000 854d 	beq.w	800ff5c <_dtoa_r+0xb24>
 800f4c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f4c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800f71c <_dtoa_r+0x2e4>
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	f000 854f 	beq.w	800ff6c <_dtoa_r+0xb34>
 800f4ce:	f10a 0303 	add.w	r3, sl, #3
 800f4d2:	f000 bd49 	b.w	800ff68 <_dtoa_r+0xb30>
 800f4d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f4da:	2200      	movs	r2, #0
 800f4dc:	ec51 0b17 	vmov	r0, r1, d7
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800f4e6:	f7f1 fac7 	bl	8000a78 <__aeabi_dcmpeq>
 800f4ea:	4680      	mov	r8, r0
 800f4ec:	b158      	cbz	r0, 800f506 <_dtoa_r+0xce>
 800f4ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f4f0:	2301      	movs	r3, #1
 800f4f2:	6013      	str	r3, [r2, #0]
 800f4f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f4f6:	b113      	cbz	r3, 800f4fe <_dtoa_r+0xc6>
 800f4f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f4fa:	4b84      	ldr	r3, [pc, #528]	@ (800f70c <_dtoa_r+0x2d4>)
 800f4fc:	6013      	str	r3, [r2, #0]
 800f4fe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800f720 <_dtoa_r+0x2e8>
 800f502:	f000 bd33 	b.w	800ff6c <_dtoa_r+0xb34>
 800f506:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f50a:	aa16      	add	r2, sp, #88	@ 0x58
 800f50c:	a917      	add	r1, sp, #92	@ 0x5c
 800f50e:	4658      	mov	r0, fp
 800f510:	f001 f980 	bl	8010814 <__d2b>
 800f514:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f518:	4681      	mov	r9, r0
 800f51a:	2e00      	cmp	r6, #0
 800f51c:	d077      	beq.n	800f60e <_dtoa_r+0x1d6>
 800f51e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f520:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800f524:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f528:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f52c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f530:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f534:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f538:	4619      	mov	r1, r3
 800f53a:	2200      	movs	r2, #0
 800f53c:	4b74      	ldr	r3, [pc, #464]	@ (800f710 <_dtoa_r+0x2d8>)
 800f53e:	f7f0 fe7b 	bl	8000238 <__aeabi_dsub>
 800f542:	a369      	add	r3, pc, #420	@ (adr r3, 800f6e8 <_dtoa_r+0x2b0>)
 800f544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f548:	f7f1 f82e 	bl	80005a8 <__aeabi_dmul>
 800f54c:	a368      	add	r3, pc, #416	@ (adr r3, 800f6f0 <_dtoa_r+0x2b8>)
 800f54e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f552:	f7f0 fe73 	bl	800023c <__adddf3>
 800f556:	4604      	mov	r4, r0
 800f558:	4630      	mov	r0, r6
 800f55a:	460d      	mov	r5, r1
 800f55c:	f7f0 ffba 	bl	80004d4 <__aeabi_i2d>
 800f560:	a365      	add	r3, pc, #404	@ (adr r3, 800f6f8 <_dtoa_r+0x2c0>)
 800f562:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f566:	f7f1 f81f 	bl	80005a8 <__aeabi_dmul>
 800f56a:	4602      	mov	r2, r0
 800f56c:	460b      	mov	r3, r1
 800f56e:	4620      	mov	r0, r4
 800f570:	4629      	mov	r1, r5
 800f572:	f7f0 fe63 	bl	800023c <__adddf3>
 800f576:	4604      	mov	r4, r0
 800f578:	460d      	mov	r5, r1
 800f57a:	f7f1 fac5 	bl	8000b08 <__aeabi_d2iz>
 800f57e:	2200      	movs	r2, #0
 800f580:	4607      	mov	r7, r0
 800f582:	2300      	movs	r3, #0
 800f584:	4620      	mov	r0, r4
 800f586:	4629      	mov	r1, r5
 800f588:	f7f1 fa80 	bl	8000a8c <__aeabi_dcmplt>
 800f58c:	b140      	cbz	r0, 800f5a0 <_dtoa_r+0x168>
 800f58e:	4638      	mov	r0, r7
 800f590:	f7f0 ffa0 	bl	80004d4 <__aeabi_i2d>
 800f594:	4622      	mov	r2, r4
 800f596:	462b      	mov	r3, r5
 800f598:	f7f1 fa6e 	bl	8000a78 <__aeabi_dcmpeq>
 800f59c:	b900      	cbnz	r0, 800f5a0 <_dtoa_r+0x168>
 800f59e:	3f01      	subs	r7, #1
 800f5a0:	2f16      	cmp	r7, #22
 800f5a2:	d851      	bhi.n	800f648 <_dtoa_r+0x210>
 800f5a4:	4b5b      	ldr	r3, [pc, #364]	@ (800f714 <_dtoa_r+0x2dc>)
 800f5a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f5b2:	f7f1 fa6b 	bl	8000a8c <__aeabi_dcmplt>
 800f5b6:	2800      	cmp	r0, #0
 800f5b8:	d048      	beq.n	800f64c <_dtoa_r+0x214>
 800f5ba:	3f01      	subs	r7, #1
 800f5bc:	2300      	movs	r3, #0
 800f5be:	9312      	str	r3, [sp, #72]	@ 0x48
 800f5c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f5c2:	1b9b      	subs	r3, r3, r6
 800f5c4:	1e5a      	subs	r2, r3, #1
 800f5c6:	bf44      	itt	mi
 800f5c8:	f1c3 0801 	rsbmi	r8, r3, #1
 800f5cc:	2300      	movmi	r3, #0
 800f5ce:	9208      	str	r2, [sp, #32]
 800f5d0:	bf54      	ite	pl
 800f5d2:	f04f 0800 	movpl.w	r8, #0
 800f5d6:	9308      	strmi	r3, [sp, #32]
 800f5d8:	2f00      	cmp	r7, #0
 800f5da:	db39      	blt.n	800f650 <_dtoa_r+0x218>
 800f5dc:	9b08      	ldr	r3, [sp, #32]
 800f5de:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f5e0:	443b      	add	r3, r7
 800f5e2:	9308      	str	r3, [sp, #32]
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	930a      	str	r3, [sp, #40]	@ 0x28
 800f5e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5ea:	2b09      	cmp	r3, #9
 800f5ec:	d864      	bhi.n	800f6b8 <_dtoa_r+0x280>
 800f5ee:	2b05      	cmp	r3, #5
 800f5f0:	bfc4      	itt	gt
 800f5f2:	3b04      	subgt	r3, #4
 800f5f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f5f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f5f8:	f1a3 0302 	sub.w	r3, r3, #2
 800f5fc:	bfcc      	ite	gt
 800f5fe:	2400      	movgt	r4, #0
 800f600:	2401      	movle	r4, #1
 800f602:	2b03      	cmp	r3, #3
 800f604:	d863      	bhi.n	800f6ce <_dtoa_r+0x296>
 800f606:	e8df f003 	tbb	[pc, r3]
 800f60a:	372a      	.short	0x372a
 800f60c:	5535      	.short	0x5535
 800f60e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f612:	441e      	add	r6, r3
 800f614:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f618:	2b20      	cmp	r3, #32
 800f61a:	bfc1      	itttt	gt
 800f61c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f620:	409f      	lslgt	r7, r3
 800f622:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f626:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f62a:	bfd6      	itet	le
 800f62c:	f1c3 0320 	rsble	r3, r3, #32
 800f630:	ea47 0003 	orrgt.w	r0, r7, r3
 800f634:	fa04 f003 	lslle.w	r0, r4, r3
 800f638:	f7f0 ff3c 	bl	80004b4 <__aeabi_ui2d>
 800f63c:	2201      	movs	r2, #1
 800f63e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f642:	3e01      	subs	r6, #1
 800f644:	9214      	str	r2, [sp, #80]	@ 0x50
 800f646:	e777      	b.n	800f538 <_dtoa_r+0x100>
 800f648:	2301      	movs	r3, #1
 800f64a:	e7b8      	b.n	800f5be <_dtoa_r+0x186>
 800f64c:	9012      	str	r0, [sp, #72]	@ 0x48
 800f64e:	e7b7      	b.n	800f5c0 <_dtoa_r+0x188>
 800f650:	427b      	negs	r3, r7
 800f652:	930a      	str	r3, [sp, #40]	@ 0x28
 800f654:	2300      	movs	r3, #0
 800f656:	eba8 0807 	sub.w	r8, r8, r7
 800f65a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f65c:	e7c4      	b.n	800f5e8 <_dtoa_r+0x1b0>
 800f65e:	2300      	movs	r3, #0
 800f660:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f662:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f664:	2b00      	cmp	r3, #0
 800f666:	dc35      	bgt.n	800f6d4 <_dtoa_r+0x29c>
 800f668:	2301      	movs	r3, #1
 800f66a:	9300      	str	r3, [sp, #0]
 800f66c:	9307      	str	r3, [sp, #28]
 800f66e:	461a      	mov	r2, r3
 800f670:	920e      	str	r2, [sp, #56]	@ 0x38
 800f672:	e00b      	b.n	800f68c <_dtoa_r+0x254>
 800f674:	2301      	movs	r3, #1
 800f676:	e7f3      	b.n	800f660 <_dtoa_r+0x228>
 800f678:	2300      	movs	r3, #0
 800f67a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f67c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f67e:	18fb      	adds	r3, r7, r3
 800f680:	9300      	str	r3, [sp, #0]
 800f682:	3301      	adds	r3, #1
 800f684:	2b01      	cmp	r3, #1
 800f686:	9307      	str	r3, [sp, #28]
 800f688:	bfb8      	it	lt
 800f68a:	2301      	movlt	r3, #1
 800f68c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f690:	2100      	movs	r1, #0
 800f692:	2204      	movs	r2, #4
 800f694:	f102 0514 	add.w	r5, r2, #20
 800f698:	429d      	cmp	r5, r3
 800f69a:	d91f      	bls.n	800f6dc <_dtoa_r+0x2a4>
 800f69c:	6041      	str	r1, [r0, #4]
 800f69e:	4658      	mov	r0, fp
 800f6a0:	f000 fd8e 	bl	80101c0 <_Balloc>
 800f6a4:	4682      	mov	sl, r0
 800f6a6:	2800      	cmp	r0, #0
 800f6a8:	d13c      	bne.n	800f724 <_dtoa_r+0x2ec>
 800f6aa:	4b1b      	ldr	r3, [pc, #108]	@ (800f718 <_dtoa_r+0x2e0>)
 800f6ac:	4602      	mov	r2, r0
 800f6ae:	f240 11af 	movw	r1, #431	@ 0x1af
 800f6b2:	e6d8      	b.n	800f466 <_dtoa_r+0x2e>
 800f6b4:	2301      	movs	r3, #1
 800f6b6:	e7e0      	b.n	800f67a <_dtoa_r+0x242>
 800f6b8:	2401      	movs	r4, #1
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6be:	940b      	str	r4, [sp, #44]	@ 0x2c
 800f6c0:	f04f 33ff 	mov.w	r3, #4294967295
 800f6c4:	9300      	str	r3, [sp, #0]
 800f6c6:	9307      	str	r3, [sp, #28]
 800f6c8:	2200      	movs	r2, #0
 800f6ca:	2312      	movs	r3, #18
 800f6cc:	e7d0      	b.n	800f670 <_dtoa_r+0x238>
 800f6ce:	2301      	movs	r3, #1
 800f6d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f6d2:	e7f5      	b.n	800f6c0 <_dtoa_r+0x288>
 800f6d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f6d6:	9300      	str	r3, [sp, #0]
 800f6d8:	9307      	str	r3, [sp, #28]
 800f6da:	e7d7      	b.n	800f68c <_dtoa_r+0x254>
 800f6dc:	3101      	adds	r1, #1
 800f6de:	0052      	lsls	r2, r2, #1
 800f6e0:	e7d8      	b.n	800f694 <_dtoa_r+0x25c>
 800f6e2:	bf00      	nop
 800f6e4:	f3af 8000 	nop.w
 800f6e8:	636f4361 	.word	0x636f4361
 800f6ec:	3fd287a7 	.word	0x3fd287a7
 800f6f0:	8b60c8b3 	.word	0x8b60c8b3
 800f6f4:	3fc68a28 	.word	0x3fc68a28
 800f6f8:	509f79fb 	.word	0x509f79fb
 800f6fc:	3fd34413 	.word	0x3fd34413
 800f700:	08011289 	.word	0x08011289
 800f704:	080112a0 	.word	0x080112a0
 800f708:	7ff00000 	.word	0x7ff00000
 800f70c:	08011259 	.word	0x08011259
 800f710:	3ff80000 	.word	0x3ff80000
 800f714:	08011398 	.word	0x08011398
 800f718:	080112f8 	.word	0x080112f8
 800f71c:	08011285 	.word	0x08011285
 800f720:	08011258 	.word	0x08011258
 800f724:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f728:	6018      	str	r0, [r3, #0]
 800f72a:	9b07      	ldr	r3, [sp, #28]
 800f72c:	2b0e      	cmp	r3, #14
 800f72e:	f200 80a4 	bhi.w	800f87a <_dtoa_r+0x442>
 800f732:	2c00      	cmp	r4, #0
 800f734:	f000 80a1 	beq.w	800f87a <_dtoa_r+0x442>
 800f738:	2f00      	cmp	r7, #0
 800f73a:	dd33      	ble.n	800f7a4 <_dtoa_r+0x36c>
 800f73c:	4bad      	ldr	r3, [pc, #692]	@ (800f9f4 <_dtoa_r+0x5bc>)
 800f73e:	f007 020f 	and.w	r2, r7, #15
 800f742:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f746:	ed93 7b00 	vldr	d7, [r3]
 800f74a:	05f8      	lsls	r0, r7, #23
 800f74c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800f750:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f754:	d516      	bpl.n	800f784 <_dtoa_r+0x34c>
 800f756:	4ba8      	ldr	r3, [pc, #672]	@ (800f9f8 <_dtoa_r+0x5c0>)
 800f758:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f75c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f760:	f7f1 f84c 	bl	80007fc <__aeabi_ddiv>
 800f764:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f768:	f004 040f 	and.w	r4, r4, #15
 800f76c:	2603      	movs	r6, #3
 800f76e:	4da2      	ldr	r5, [pc, #648]	@ (800f9f8 <_dtoa_r+0x5c0>)
 800f770:	b954      	cbnz	r4, 800f788 <_dtoa_r+0x350>
 800f772:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f77a:	f7f1 f83f 	bl	80007fc <__aeabi_ddiv>
 800f77e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f782:	e028      	b.n	800f7d6 <_dtoa_r+0x39e>
 800f784:	2602      	movs	r6, #2
 800f786:	e7f2      	b.n	800f76e <_dtoa_r+0x336>
 800f788:	07e1      	lsls	r1, r4, #31
 800f78a:	d508      	bpl.n	800f79e <_dtoa_r+0x366>
 800f78c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f790:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f794:	f7f0 ff08 	bl	80005a8 <__aeabi_dmul>
 800f798:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f79c:	3601      	adds	r6, #1
 800f79e:	1064      	asrs	r4, r4, #1
 800f7a0:	3508      	adds	r5, #8
 800f7a2:	e7e5      	b.n	800f770 <_dtoa_r+0x338>
 800f7a4:	f000 80d2 	beq.w	800f94c <_dtoa_r+0x514>
 800f7a8:	427c      	negs	r4, r7
 800f7aa:	4b92      	ldr	r3, [pc, #584]	@ (800f9f4 <_dtoa_r+0x5bc>)
 800f7ac:	4d92      	ldr	r5, [pc, #584]	@ (800f9f8 <_dtoa_r+0x5c0>)
 800f7ae:	f004 020f 	and.w	r2, r4, #15
 800f7b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f7be:	f7f0 fef3 	bl	80005a8 <__aeabi_dmul>
 800f7c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f7c6:	1124      	asrs	r4, r4, #4
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	2602      	movs	r6, #2
 800f7cc:	2c00      	cmp	r4, #0
 800f7ce:	f040 80b2 	bne.w	800f936 <_dtoa_r+0x4fe>
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d1d3      	bne.n	800f77e <_dtoa_r+0x346>
 800f7d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f7d8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	f000 80b7 	beq.w	800f950 <_dtoa_r+0x518>
 800f7e2:	4b86      	ldr	r3, [pc, #536]	@ (800f9fc <_dtoa_r+0x5c4>)
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	4620      	mov	r0, r4
 800f7e8:	4629      	mov	r1, r5
 800f7ea:	f7f1 f94f 	bl	8000a8c <__aeabi_dcmplt>
 800f7ee:	2800      	cmp	r0, #0
 800f7f0:	f000 80ae 	beq.w	800f950 <_dtoa_r+0x518>
 800f7f4:	9b07      	ldr	r3, [sp, #28]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	f000 80aa 	beq.w	800f950 <_dtoa_r+0x518>
 800f7fc:	9b00      	ldr	r3, [sp, #0]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	dd37      	ble.n	800f872 <_dtoa_r+0x43a>
 800f802:	1e7b      	subs	r3, r7, #1
 800f804:	9304      	str	r3, [sp, #16]
 800f806:	4620      	mov	r0, r4
 800f808:	4b7d      	ldr	r3, [pc, #500]	@ (800fa00 <_dtoa_r+0x5c8>)
 800f80a:	2200      	movs	r2, #0
 800f80c:	4629      	mov	r1, r5
 800f80e:	f7f0 fecb 	bl	80005a8 <__aeabi_dmul>
 800f812:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f816:	9c00      	ldr	r4, [sp, #0]
 800f818:	3601      	adds	r6, #1
 800f81a:	4630      	mov	r0, r6
 800f81c:	f7f0 fe5a 	bl	80004d4 <__aeabi_i2d>
 800f820:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f824:	f7f0 fec0 	bl	80005a8 <__aeabi_dmul>
 800f828:	4b76      	ldr	r3, [pc, #472]	@ (800fa04 <_dtoa_r+0x5cc>)
 800f82a:	2200      	movs	r2, #0
 800f82c:	f7f0 fd06 	bl	800023c <__adddf3>
 800f830:	4605      	mov	r5, r0
 800f832:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f836:	2c00      	cmp	r4, #0
 800f838:	f040 808d 	bne.w	800f956 <_dtoa_r+0x51e>
 800f83c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f840:	4b71      	ldr	r3, [pc, #452]	@ (800fa08 <_dtoa_r+0x5d0>)
 800f842:	2200      	movs	r2, #0
 800f844:	f7f0 fcf8 	bl	8000238 <__aeabi_dsub>
 800f848:	4602      	mov	r2, r0
 800f84a:	460b      	mov	r3, r1
 800f84c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f850:	462a      	mov	r2, r5
 800f852:	4633      	mov	r3, r6
 800f854:	f7f1 f938 	bl	8000ac8 <__aeabi_dcmpgt>
 800f858:	2800      	cmp	r0, #0
 800f85a:	f040 828b 	bne.w	800fd74 <_dtoa_r+0x93c>
 800f85e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f862:	462a      	mov	r2, r5
 800f864:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f868:	f7f1 f910 	bl	8000a8c <__aeabi_dcmplt>
 800f86c:	2800      	cmp	r0, #0
 800f86e:	f040 8128 	bne.w	800fac2 <_dtoa_r+0x68a>
 800f872:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800f876:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800f87a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	f2c0 815a 	blt.w	800fb36 <_dtoa_r+0x6fe>
 800f882:	2f0e      	cmp	r7, #14
 800f884:	f300 8157 	bgt.w	800fb36 <_dtoa_r+0x6fe>
 800f888:	4b5a      	ldr	r3, [pc, #360]	@ (800f9f4 <_dtoa_r+0x5bc>)
 800f88a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f88e:	ed93 7b00 	vldr	d7, [r3]
 800f892:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f894:	2b00      	cmp	r3, #0
 800f896:	ed8d 7b00 	vstr	d7, [sp]
 800f89a:	da03      	bge.n	800f8a4 <_dtoa_r+0x46c>
 800f89c:	9b07      	ldr	r3, [sp, #28]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	f340 8101 	ble.w	800faa6 <_dtoa_r+0x66e>
 800f8a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800f8a8:	4656      	mov	r6, sl
 800f8aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f8ae:	4620      	mov	r0, r4
 800f8b0:	4629      	mov	r1, r5
 800f8b2:	f7f0 ffa3 	bl	80007fc <__aeabi_ddiv>
 800f8b6:	f7f1 f927 	bl	8000b08 <__aeabi_d2iz>
 800f8ba:	4680      	mov	r8, r0
 800f8bc:	f7f0 fe0a 	bl	80004d4 <__aeabi_i2d>
 800f8c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f8c4:	f7f0 fe70 	bl	80005a8 <__aeabi_dmul>
 800f8c8:	4602      	mov	r2, r0
 800f8ca:	460b      	mov	r3, r1
 800f8cc:	4620      	mov	r0, r4
 800f8ce:	4629      	mov	r1, r5
 800f8d0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800f8d4:	f7f0 fcb0 	bl	8000238 <__aeabi_dsub>
 800f8d8:	f806 4b01 	strb.w	r4, [r6], #1
 800f8dc:	9d07      	ldr	r5, [sp, #28]
 800f8de:	eba6 040a 	sub.w	r4, r6, sl
 800f8e2:	42a5      	cmp	r5, r4
 800f8e4:	4602      	mov	r2, r0
 800f8e6:	460b      	mov	r3, r1
 800f8e8:	f040 8117 	bne.w	800fb1a <_dtoa_r+0x6e2>
 800f8ec:	f7f0 fca6 	bl	800023c <__adddf3>
 800f8f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f8f4:	4604      	mov	r4, r0
 800f8f6:	460d      	mov	r5, r1
 800f8f8:	f7f1 f8e6 	bl	8000ac8 <__aeabi_dcmpgt>
 800f8fc:	2800      	cmp	r0, #0
 800f8fe:	f040 80f9 	bne.w	800faf4 <_dtoa_r+0x6bc>
 800f902:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f906:	4620      	mov	r0, r4
 800f908:	4629      	mov	r1, r5
 800f90a:	f7f1 f8b5 	bl	8000a78 <__aeabi_dcmpeq>
 800f90e:	b118      	cbz	r0, 800f918 <_dtoa_r+0x4e0>
 800f910:	f018 0f01 	tst.w	r8, #1
 800f914:	f040 80ee 	bne.w	800faf4 <_dtoa_r+0x6bc>
 800f918:	4649      	mov	r1, r9
 800f91a:	4658      	mov	r0, fp
 800f91c:	f000 fc90 	bl	8010240 <_Bfree>
 800f920:	2300      	movs	r3, #0
 800f922:	7033      	strb	r3, [r6, #0]
 800f924:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f926:	3701      	adds	r7, #1
 800f928:	601f      	str	r7, [r3, #0]
 800f92a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	f000 831d 	beq.w	800ff6c <_dtoa_r+0xb34>
 800f932:	601e      	str	r6, [r3, #0]
 800f934:	e31a      	b.n	800ff6c <_dtoa_r+0xb34>
 800f936:	07e2      	lsls	r2, r4, #31
 800f938:	d505      	bpl.n	800f946 <_dtoa_r+0x50e>
 800f93a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f93e:	f7f0 fe33 	bl	80005a8 <__aeabi_dmul>
 800f942:	3601      	adds	r6, #1
 800f944:	2301      	movs	r3, #1
 800f946:	1064      	asrs	r4, r4, #1
 800f948:	3508      	adds	r5, #8
 800f94a:	e73f      	b.n	800f7cc <_dtoa_r+0x394>
 800f94c:	2602      	movs	r6, #2
 800f94e:	e742      	b.n	800f7d6 <_dtoa_r+0x39e>
 800f950:	9c07      	ldr	r4, [sp, #28]
 800f952:	9704      	str	r7, [sp, #16]
 800f954:	e761      	b.n	800f81a <_dtoa_r+0x3e2>
 800f956:	4b27      	ldr	r3, [pc, #156]	@ (800f9f4 <_dtoa_r+0x5bc>)
 800f958:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f95a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f95e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f962:	4454      	add	r4, sl
 800f964:	2900      	cmp	r1, #0
 800f966:	d053      	beq.n	800fa10 <_dtoa_r+0x5d8>
 800f968:	4928      	ldr	r1, [pc, #160]	@ (800fa0c <_dtoa_r+0x5d4>)
 800f96a:	2000      	movs	r0, #0
 800f96c:	f7f0 ff46 	bl	80007fc <__aeabi_ddiv>
 800f970:	4633      	mov	r3, r6
 800f972:	462a      	mov	r2, r5
 800f974:	f7f0 fc60 	bl	8000238 <__aeabi_dsub>
 800f978:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f97c:	4656      	mov	r6, sl
 800f97e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f982:	f7f1 f8c1 	bl	8000b08 <__aeabi_d2iz>
 800f986:	4605      	mov	r5, r0
 800f988:	f7f0 fda4 	bl	80004d4 <__aeabi_i2d>
 800f98c:	4602      	mov	r2, r0
 800f98e:	460b      	mov	r3, r1
 800f990:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f994:	f7f0 fc50 	bl	8000238 <__aeabi_dsub>
 800f998:	3530      	adds	r5, #48	@ 0x30
 800f99a:	4602      	mov	r2, r0
 800f99c:	460b      	mov	r3, r1
 800f99e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f9a2:	f806 5b01 	strb.w	r5, [r6], #1
 800f9a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f9aa:	f7f1 f86f 	bl	8000a8c <__aeabi_dcmplt>
 800f9ae:	2800      	cmp	r0, #0
 800f9b0:	d171      	bne.n	800fa96 <_dtoa_r+0x65e>
 800f9b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f9b6:	4911      	ldr	r1, [pc, #68]	@ (800f9fc <_dtoa_r+0x5c4>)
 800f9b8:	2000      	movs	r0, #0
 800f9ba:	f7f0 fc3d 	bl	8000238 <__aeabi_dsub>
 800f9be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800f9c2:	f7f1 f863 	bl	8000a8c <__aeabi_dcmplt>
 800f9c6:	2800      	cmp	r0, #0
 800f9c8:	f040 8095 	bne.w	800faf6 <_dtoa_r+0x6be>
 800f9cc:	42a6      	cmp	r6, r4
 800f9ce:	f43f af50 	beq.w	800f872 <_dtoa_r+0x43a>
 800f9d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800f9d6:	4b0a      	ldr	r3, [pc, #40]	@ (800fa00 <_dtoa_r+0x5c8>)
 800f9d8:	2200      	movs	r2, #0
 800f9da:	f7f0 fde5 	bl	80005a8 <__aeabi_dmul>
 800f9de:	4b08      	ldr	r3, [pc, #32]	@ (800fa00 <_dtoa_r+0x5c8>)
 800f9e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f9ea:	f7f0 fddd 	bl	80005a8 <__aeabi_dmul>
 800f9ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f9f2:	e7c4      	b.n	800f97e <_dtoa_r+0x546>
 800f9f4:	08011398 	.word	0x08011398
 800f9f8:	08011370 	.word	0x08011370
 800f9fc:	3ff00000 	.word	0x3ff00000
 800fa00:	40240000 	.word	0x40240000
 800fa04:	401c0000 	.word	0x401c0000
 800fa08:	40140000 	.word	0x40140000
 800fa0c:	3fe00000 	.word	0x3fe00000
 800fa10:	4631      	mov	r1, r6
 800fa12:	4628      	mov	r0, r5
 800fa14:	f7f0 fdc8 	bl	80005a8 <__aeabi_dmul>
 800fa18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fa1c:	9415      	str	r4, [sp, #84]	@ 0x54
 800fa1e:	4656      	mov	r6, sl
 800fa20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa24:	f7f1 f870 	bl	8000b08 <__aeabi_d2iz>
 800fa28:	4605      	mov	r5, r0
 800fa2a:	f7f0 fd53 	bl	80004d4 <__aeabi_i2d>
 800fa2e:	4602      	mov	r2, r0
 800fa30:	460b      	mov	r3, r1
 800fa32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa36:	f7f0 fbff 	bl	8000238 <__aeabi_dsub>
 800fa3a:	3530      	adds	r5, #48	@ 0x30
 800fa3c:	f806 5b01 	strb.w	r5, [r6], #1
 800fa40:	4602      	mov	r2, r0
 800fa42:	460b      	mov	r3, r1
 800fa44:	42a6      	cmp	r6, r4
 800fa46:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fa4a:	f04f 0200 	mov.w	r2, #0
 800fa4e:	d124      	bne.n	800fa9a <_dtoa_r+0x662>
 800fa50:	4bac      	ldr	r3, [pc, #688]	@ (800fd04 <_dtoa_r+0x8cc>)
 800fa52:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800fa56:	f7f0 fbf1 	bl	800023c <__adddf3>
 800fa5a:	4602      	mov	r2, r0
 800fa5c:	460b      	mov	r3, r1
 800fa5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa62:	f7f1 f831 	bl	8000ac8 <__aeabi_dcmpgt>
 800fa66:	2800      	cmp	r0, #0
 800fa68:	d145      	bne.n	800faf6 <_dtoa_r+0x6be>
 800fa6a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800fa6e:	49a5      	ldr	r1, [pc, #660]	@ (800fd04 <_dtoa_r+0x8cc>)
 800fa70:	2000      	movs	r0, #0
 800fa72:	f7f0 fbe1 	bl	8000238 <__aeabi_dsub>
 800fa76:	4602      	mov	r2, r0
 800fa78:	460b      	mov	r3, r1
 800fa7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fa7e:	f7f1 f805 	bl	8000a8c <__aeabi_dcmplt>
 800fa82:	2800      	cmp	r0, #0
 800fa84:	f43f aef5 	beq.w	800f872 <_dtoa_r+0x43a>
 800fa88:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800fa8a:	1e73      	subs	r3, r6, #1
 800fa8c:	9315      	str	r3, [sp, #84]	@ 0x54
 800fa8e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fa92:	2b30      	cmp	r3, #48	@ 0x30
 800fa94:	d0f8      	beq.n	800fa88 <_dtoa_r+0x650>
 800fa96:	9f04      	ldr	r7, [sp, #16]
 800fa98:	e73e      	b.n	800f918 <_dtoa_r+0x4e0>
 800fa9a:	4b9b      	ldr	r3, [pc, #620]	@ (800fd08 <_dtoa_r+0x8d0>)
 800fa9c:	f7f0 fd84 	bl	80005a8 <__aeabi_dmul>
 800faa0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800faa4:	e7bc      	b.n	800fa20 <_dtoa_r+0x5e8>
 800faa6:	d10c      	bne.n	800fac2 <_dtoa_r+0x68a>
 800faa8:	4b98      	ldr	r3, [pc, #608]	@ (800fd0c <_dtoa_r+0x8d4>)
 800faaa:	2200      	movs	r2, #0
 800faac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fab0:	f7f0 fd7a 	bl	80005a8 <__aeabi_dmul>
 800fab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fab8:	f7f0 fffc 	bl	8000ab4 <__aeabi_dcmpge>
 800fabc:	2800      	cmp	r0, #0
 800fabe:	f000 8157 	beq.w	800fd70 <_dtoa_r+0x938>
 800fac2:	2400      	movs	r4, #0
 800fac4:	4625      	mov	r5, r4
 800fac6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fac8:	43db      	mvns	r3, r3
 800faca:	9304      	str	r3, [sp, #16]
 800facc:	4656      	mov	r6, sl
 800face:	2700      	movs	r7, #0
 800fad0:	4621      	mov	r1, r4
 800fad2:	4658      	mov	r0, fp
 800fad4:	f000 fbb4 	bl	8010240 <_Bfree>
 800fad8:	2d00      	cmp	r5, #0
 800fada:	d0dc      	beq.n	800fa96 <_dtoa_r+0x65e>
 800fadc:	b12f      	cbz	r7, 800faea <_dtoa_r+0x6b2>
 800fade:	42af      	cmp	r7, r5
 800fae0:	d003      	beq.n	800faea <_dtoa_r+0x6b2>
 800fae2:	4639      	mov	r1, r7
 800fae4:	4658      	mov	r0, fp
 800fae6:	f000 fbab 	bl	8010240 <_Bfree>
 800faea:	4629      	mov	r1, r5
 800faec:	4658      	mov	r0, fp
 800faee:	f000 fba7 	bl	8010240 <_Bfree>
 800faf2:	e7d0      	b.n	800fa96 <_dtoa_r+0x65e>
 800faf4:	9704      	str	r7, [sp, #16]
 800faf6:	4633      	mov	r3, r6
 800faf8:	461e      	mov	r6, r3
 800fafa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fafe:	2a39      	cmp	r2, #57	@ 0x39
 800fb00:	d107      	bne.n	800fb12 <_dtoa_r+0x6da>
 800fb02:	459a      	cmp	sl, r3
 800fb04:	d1f8      	bne.n	800faf8 <_dtoa_r+0x6c0>
 800fb06:	9a04      	ldr	r2, [sp, #16]
 800fb08:	3201      	adds	r2, #1
 800fb0a:	9204      	str	r2, [sp, #16]
 800fb0c:	2230      	movs	r2, #48	@ 0x30
 800fb0e:	f88a 2000 	strb.w	r2, [sl]
 800fb12:	781a      	ldrb	r2, [r3, #0]
 800fb14:	3201      	adds	r2, #1
 800fb16:	701a      	strb	r2, [r3, #0]
 800fb18:	e7bd      	b.n	800fa96 <_dtoa_r+0x65e>
 800fb1a:	4b7b      	ldr	r3, [pc, #492]	@ (800fd08 <_dtoa_r+0x8d0>)
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	f7f0 fd43 	bl	80005a8 <__aeabi_dmul>
 800fb22:	2200      	movs	r2, #0
 800fb24:	2300      	movs	r3, #0
 800fb26:	4604      	mov	r4, r0
 800fb28:	460d      	mov	r5, r1
 800fb2a:	f7f0 ffa5 	bl	8000a78 <__aeabi_dcmpeq>
 800fb2e:	2800      	cmp	r0, #0
 800fb30:	f43f aebb 	beq.w	800f8aa <_dtoa_r+0x472>
 800fb34:	e6f0      	b.n	800f918 <_dtoa_r+0x4e0>
 800fb36:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fb38:	2a00      	cmp	r2, #0
 800fb3a:	f000 80db 	beq.w	800fcf4 <_dtoa_r+0x8bc>
 800fb3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fb40:	2a01      	cmp	r2, #1
 800fb42:	f300 80bf 	bgt.w	800fcc4 <_dtoa_r+0x88c>
 800fb46:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800fb48:	2a00      	cmp	r2, #0
 800fb4a:	f000 80b7 	beq.w	800fcbc <_dtoa_r+0x884>
 800fb4e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800fb52:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fb54:	4646      	mov	r6, r8
 800fb56:	9a08      	ldr	r2, [sp, #32]
 800fb58:	2101      	movs	r1, #1
 800fb5a:	441a      	add	r2, r3
 800fb5c:	4658      	mov	r0, fp
 800fb5e:	4498      	add	r8, r3
 800fb60:	9208      	str	r2, [sp, #32]
 800fb62:	f000 fc21 	bl	80103a8 <__i2b>
 800fb66:	4605      	mov	r5, r0
 800fb68:	b15e      	cbz	r6, 800fb82 <_dtoa_r+0x74a>
 800fb6a:	9b08      	ldr	r3, [sp, #32]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	dd08      	ble.n	800fb82 <_dtoa_r+0x74a>
 800fb70:	42b3      	cmp	r3, r6
 800fb72:	9a08      	ldr	r2, [sp, #32]
 800fb74:	bfa8      	it	ge
 800fb76:	4633      	movge	r3, r6
 800fb78:	eba8 0803 	sub.w	r8, r8, r3
 800fb7c:	1af6      	subs	r6, r6, r3
 800fb7e:	1ad3      	subs	r3, r2, r3
 800fb80:	9308      	str	r3, [sp, #32]
 800fb82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fb84:	b1f3      	cbz	r3, 800fbc4 <_dtoa_r+0x78c>
 800fb86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	f000 80b7 	beq.w	800fcfc <_dtoa_r+0x8c4>
 800fb8e:	b18c      	cbz	r4, 800fbb4 <_dtoa_r+0x77c>
 800fb90:	4629      	mov	r1, r5
 800fb92:	4622      	mov	r2, r4
 800fb94:	4658      	mov	r0, fp
 800fb96:	f000 fcc7 	bl	8010528 <__pow5mult>
 800fb9a:	464a      	mov	r2, r9
 800fb9c:	4601      	mov	r1, r0
 800fb9e:	4605      	mov	r5, r0
 800fba0:	4658      	mov	r0, fp
 800fba2:	f000 fc17 	bl	80103d4 <__multiply>
 800fba6:	4649      	mov	r1, r9
 800fba8:	9004      	str	r0, [sp, #16]
 800fbaa:	4658      	mov	r0, fp
 800fbac:	f000 fb48 	bl	8010240 <_Bfree>
 800fbb0:	9b04      	ldr	r3, [sp, #16]
 800fbb2:	4699      	mov	r9, r3
 800fbb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fbb6:	1b1a      	subs	r2, r3, r4
 800fbb8:	d004      	beq.n	800fbc4 <_dtoa_r+0x78c>
 800fbba:	4649      	mov	r1, r9
 800fbbc:	4658      	mov	r0, fp
 800fbbe:	f000 fcb3 	bl	8010528 <__pow5mult>
 800fbc2:	4681      	mov	r9, r0
 800fbc4:	2101      	movs	r1, #1
 800fbc6:	4658      	mov	r0, fp
 800fbc8:	f000 fbee 	bl	80103a8 <__i2b>
 800fbcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fbce:	4604      	mov	r4, r0
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	f000 81cf 	beq.w	800ff74 <_dtoa_r+0xb3c>
 800fbd6:	461a      	mov	r2, r3
 800fbd8:	4601      	mov	r1, r0
 800fbda:	4658      	mov	r0, fp
 800fbdc:	f000 fca4 	bl	8010528 <__pow5mult>
 800fbe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbe2:	2b01      	cmp	r3, #1
 800fbe4:	4604      	mov	r4, r0
 800fbe6:	f300 8095 	bgt.w	800fd14 <_dtoa_r+0x8dc>
 800fbea:	9b02      	ldr	r3, [sp, #8]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	f040 8087 	bne.w	800fd00 <_dtoa_r+0x8c8>
 800fbf2:	9b03      	ldr	r3, [sp, #12]
 800fbf4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	f040 8089 	bne.w	800fd10 <_dtoa_r+0x8d8>
 800fbfe:	9b03      	ldr	r3, [sp, #12]
 800fc00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fc04:	0d1b      	lsrs	r3, r3, #20
 800fc06:	051b      	lsls	r3, r3, #20
 800fc08:	b12b      	cbz	r3, 800fc16 <_dtoa_r+0x7de>
 800fc0a:	9b08      	ldr	r3, [sp, #32]
 800fc0c:	3301      	adds	r3, #1
 800fc0e:	9308      	str	r3, [sp, #32]
 800fc10:	f108 0801 	add.w	r8, r8, #1
 800fc14:	2301      	movs	r3, #1
 800fc16:	930a      	str	r3, [sp, #40]	@ 0x28
 800fc18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	f000 81b0 	beq.w	800ff80 <_dtoa_r+0xb48>
 800fc20:	6923      	ldr	r3, [r4, #16]
 800fc22:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fc26:	6918      	ldr	r0, [r3, #16]
 800fc28:	f000 fb72 	bl	8010310 <__hi0bits>
 800fc2c:	f1c0 0020 	rsb	r0, r0, #32
 800fc30:	9b08      	ldr	r3, [sp, #32]
 800fc32:	4418      	add	r0, r3
 800fc34:	f010 001f 	ands.w	r0, r0, #31
 800fc38:	d077      	beq.n	800fd2a <_dtoa_r+0x8f2>
 800fc3a:	f1c0 0320 	rsb	r3, r0, #32
 800fc3e:	2b04      	cmp	r3, #4
 800fc40:	dd6b      	ble.n	800fd1a <_dtoa_r+0x8e2>
 800fc42:	9b08      	ldr	r3, [sp, #32]
 800fc44:	f1c0 001c 	rsb	r0, r0, #28
 800fc48:	4403      	add	r3, r0
 800fc4a:	4480      	add	r8, r0
 800fc4c:	4406      	add	r6, r0
 800fc4e:	9308      	str	r3, [sp, #32]
 800fc50:	f1b8 0f00 	cmp.w	r8, #0
 800fc54:	dd05      	ble.n	800fc62 <_dtoa_r+0x82a>
 800fc56:	4649      	mov	r1, r9
 800fc58:	4642      	mov	r2, r8
 800fc5a:	4658      	mov	r0, fp
 800fc5c:	f000 fcbe 	bl	80105dc <__lshift>
 800fc60:	4681      	mov	r9, r0
 800fc62:	9b08      	ldr	r3, [sp, #32]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	dd05      	ble.n	800fc74 <_dtoa_r+0x83c>
 800fc68:	4621      	mov	r1, r4
 800fc6a:	461a      	mov	r2, r3
 800fc6c:	4658      	mov	r0, fp
 800fc6e:	f000 fcb5 	bl	80105dc <__lshift>
 800fc72:	4604      	mov	r4, r0
 800fc74:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d059      	beq.n	800fd2e <_dtoa_r+0x8f6>
 800fc7a:	4621      	mov	r1, r4
 800fc7c:	4648      	mov	r0, r9
 800fc7e:	f000 fd19 	bl	80106b4 <__mcmp>
 800fc82:	2800      	cmp	r0, #0
 800fc84:	da53      	bge.n	800fd2e <_dtoa_r+0x8f6>
 800fc86:	1e7b      	subs	r3, r7, #1
 800fc88:	9304      	str	r3, [sp, #16]
 800fc8a:	4649      	mov	r1, r9
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	220a      	movs	r2, #10
 800fc90:	4658      	mov	r0, fp
 800fc92:	f000 faf7 	bl	8010284 <__multadd>
 800fc96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fc98:	4681      	mov	r9, r0
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	f000 8172 	beq.w	800ff84 <_dtoa_r+0xb4c>
 800fca0:	2300      	movs	r3, #0
 800fca2:	4629      	mov	r1, r5
 800fca4:	220a      	movs	r2, #10
 800fca6:	4658      	mov	r0, fp
 800fca8:	f000 faec 	bl	8010284 <__multadd>
 800fcac:	9b00      	ldr	r3, [sp, #0]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	4605      	mov	r5, r0
 800fcb2:	dc67      	bgt.n	800fd84 <_dtoa_r+0x94c>
 800fcb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fcb6:	2b02      	cmp	r3, #2
 800fcb8:	dc41      	bgt.n	800fd3e <_dtoa_r+0x906>
 800fcba:	e063      	b.n	800fd84 <_dtoa_r+0x94c>
 800fcbc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fcbe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800fcc2:	e746      	b.n	800fb52 <_dtoa_r+0x71a>
 800fcc4:	9b07      	ldr	r3, [sp, #28]
 800fcc6:	1e5c      	subs	r4, r3, #1
 800fcc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fcca:	42a3      	cmp	r3, r4
 800fccc:	bfbf      	itttt	lt
 800fcce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800fcd0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800fcd2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800fcd4:	1ae3      	sublt	r3, r4, r3
 800fcd6:	bfb4      	ite	lt
 800fcd8:	18d2      	addlt	r2, r2, r3
 800fcda:	1b1c      	subge	r4, r3, r4
 800fcdc:	9b07      	ldr	r3, [sp, #28]
 800fcde:	bfbc      	itt	lt
 800fce0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800fce2:	2400      	movlt	r4, #0
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	bfb5      	itete	lt
 800fce8:	eba8 0603 	sublt.w	r6, r8, r3
 800fcec:	9b07      	ldrge	r3, [sp, #28]
 800fcee:	2300      	movlt	r3, #0
 800fcf0:	4646      	movge	r6, r8
 800fcf2:	e730      	b.n	800fb56 <_dtoa_r+0x71e>
 800fcf4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800fcf6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800fcf8:	4646      	mov	r6, r8
 800fcfa:	e735      	b.n	800fb68 <_dtoa_r+0x730>
 800fcfc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fcfe:	e75c      	b.n	800fbba <_dtoa_r+0x782>
 800fd00:	2300      	movs	r3, #0
 800fd02:	e788      	b.n	800fc16 <_dtoa_r+0x7de>
 800fd04:	3fe00000 	.word	0x3fe00000
 800fd08:	40240000 	.word	0x40240000
 800fd0c:	40140000 	.word	0x40140000
 800fd10:	9b02      	ldr	r3, [sp, #8]
 800fd12:	e780      	b.n	800fc16 <_dtoa_r+0x7de>
 800fd14:	2300      	movs	r3, #0
 800fd16:	930a      	str	r3, [sp, #40]	@ 0x28
 800fd18:	e782      	b.n	800fc20 <_dtoa_r+0x7e8>
 800fd1a:	d099      	beq.n	800fc50 <_dtoa_r+0x818>
 800fd1c:	9a08      	ldr	r2, [sp, #32]
 800fd1e:	331c      	adds	r3, #28
 800fd20:	441a      	add	r2, r3
 800fd22:	4498      	add	r8, r3
 800fd24:	441e      	add	r6, r3
 800fd26:	9208      	str	r2, [sp, #32]
 800fd28:	e792      	b.n	800fc50 <_dtoa_r+0x818>
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	e7f6      	b.n	800fd1c <_dtoa_r+0x8e4>
 800fd2e:	9b07      	ldr	r3, [sp, #28]
 800fd30:	9704      	str	r7, [sp, #16]
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	dc20      	bgt.n	800fd78 <_dtoa_r+0x940>
 800fd36:	9300      	str	r3, [sp, #0]
 800fd38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd3a:	2b02      	cmp	r3, #2
 800fd3c:	dd1e      	ble.n	800fd7c <_dtoa_r+0x944>
 800fd3e:	9b00      	ldr	r3, [sp, #0]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	f47f aec0 	bne.w	800fac6 <_dtoa_r+0x68e>
 800fd46:	4621      	mov	r1, r4
 800fd48:	2205      	movs	r2, #5
 800fd4a:	4658      	mov	r0, fp
 800fd4c:	f000 fa9a 	bl	8010284 <__multadd>
 800fd50:	4601      	mov	r1, r0
 800fd52:	4604      	mov	r4, r0
 800fd54:	4648      	mov	r0, r9
 800fd56:	f000 fcad 	bl	80106b4 <__mcmp>
 800fd5a:	2800      	cmp	r0, #0
 800fd5c:	f77f aeb3 	ble.w	800fac6 <_dtoa_r+0x68e>
 800fd60:	4656      	mov	r6, sl
 800fd62:	2331      	movs	r3, #49	@ 0x31
 800fd64:	f806 3b01 	strb.w	r3, [r6], #1
 800fd68:	9b04      	ldr	r3, [sp, #16]
 800fd6a:	3301      	adds	r3, #1
 800fd6c:	9304      	str	r3, [sp, #16]
 800fd6e:	e6ae      	b.n	800face <_dtoa_r+0x696>
 800fd70:	9c07      	ldr	r4, [sp, #28]
 800fd72:	9704      	str	r7, [sp, #16]
 800fd74:	4625      	mov	r5, r4
 800fd76:	e7f3      	b.n	800fd60 <_dtoa_r+0x928>
 800fd78:	9b07      	ldr	r3, [sp, #28]
 800fd7a:	9300      	str	r3, [sp, #0]
 800fd7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	f000 8104 	beq.w	800ff8c <_dtoa_r+0xb54>
 800fd84:	2e00      	cmp	r6, #0
 800fd86:	dd05      	ble.n	800fd94 <_dtoa_r+0x95c>
 800fd88:	4629      	mov	r1, r5
 800fd8a:	4632      	mov	r2, r6
 800fd8c:	4658      	mov	r0, fp
 800fd8e:	f000 fc25 	bl	80105dc <__lshift>
 800fd92:	4605      	mov	r5, r0
 800fd94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d05a      	beq.n	800fe50 <_dtoa_r+0xa18>
 800fd9a:	6869      	ldr	r1, [r5, #4]
 800fd9c:	4658      	mov	r0, fp
 800fd9e:	f000 fa0f 	bl	80101c0 <_Balloc>
 800fda2:	4606      	mov	r6, r0
 800fda4:	b928      	cbnz	r0, 800fdb2 <_dtoa_r+0x97a>
 800fda6:	4b84      	ldr	r3, [pc, #528]	@ (800ffb8 <_dtoa_r+0xb80>)
 800fda8:	4602      	mov	r2, r0
 800fdaa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fdae:	f7ff bb5a 	b.w	800f466 <_dtoa_r+0x2e>
 800fdb2:	692a      	ldr	r2, [r5, #16]
 800fdb4:	3202      	adds	r2, #2
 800fdb6:	0092      	lsls	r2, r2, #2
 800fdb8:	f105 010c 	add.w	r1, r5, #12
 800fdbc:	300c      	adds	r0, #12
 800fdbe:	f7ff faa2 	bl	800f306 <memcpy>
 800fdc2:	2201      	movs	r2, #1
 800fdc4:	4631      	mov	r1, r6
 800fdc6:	4658      	mov	r0, fp
 800fdc8:	f000 fc08 	bl	80105dc <__lshift>
 800fdcc:	f10a 0301 	add.w	r3, sl, #1
 800fdd0:	9307      	str	r3, [sp, #28]
 800fdd2:	9b00      	ldr	r3, [sp, #0]
 800fdd4:	4453      	add	r3, sl
 800fdd6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fdd8:	9b02      	ldr	r3, [sp, #8]
 800fdda:	f003 0301 	and.w	r3, r3, #1
 800fdde:	462f      	mov	r7, r5
 800fde0:	930a      	str	r3, [sp, #40]	@ 0x28
 800fde2:	4605      	mov	r5, r0
 800fde4:	9b07      	ldr	r3, [sp, #28]
 800fde6:	4621      	mov	r1, r4
 800fde8:	3b01      	subs	r3, #1
 800fdea:	4648      	mov	r0, r9
 800fdec:	9300      	str	r3, [sp, #0]
 800fdee:	f7ff fa98 	bl	800f322 <quorem>
 800fdf2:	4639      	mov	r1, r7
 800fdf4:	9002      	str	r0, [sp, #8]
 800fdf6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800fdfa:	4648      	mov	r0, r9
 800fdfc:	f000 fc5a 	bl	80106b4 <__mcmp>
 800fe00:	462a      	mov	r2, r5
 800fe02:	9008      	str	r0, [sp, #32]
 800fe04:	4621      	mov	r1, r4
 800fe06:	4658      	mov	r0, fp
 800fe08:	f000 fc70 	bl	80106ec <__mdiff>
 800fe0c:	68c2      	ldr	r2, [r0, #12]
 800fe0e:	4606      	mov	r6, r0
 800fe10:	bb02      	cbnz	r2, 800fe54 <_dtoa_r+0xa1c>
 800fe12:	4601      	mov	r1, r0
 800fe14:	4648      	mov	r0, r9
 800fe16:	f000 fc4d 	bl	80106b4 <__mcmp>
 800fe1a:	4602      	mov	r2, r0
 800fe1c:	4631      	mov	r1, r6
 800fe1e:	4658      	mov	r0, fp
 800fe20:	920e      	str	r2, [sp, #56]	@ 0x38
 800fe22:	f000 fa0d 	bl	8010240 <_Bfree>
 800fe26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fe2a:	9e07      	ldr	r6, [sp, #28]
 800fe2c:	ea43 0102 	orr.w	r1, r3, r2
 800fe30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fe32:	4319      	orrs	r1, r3
 800fe34:	d110      	bne.n	800fe58 <_dtoa_r+0xa20>
 800fe36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fe3a:	d029      	beq.n	800fe90 <_dtoa_r+0xa58>
 800fe3c:	9b08      	ldr	r3, [sp, #32]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	dd02      	ble.n	800fe48 <_dtoa_r+0xa10>
 800fe42:	9b02      	ldr	r3, [sp, #8]
 800fe44:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800fe48:	9b00      	ldr	r3, [sp, #0]
 800fe4a:	f883 8000 	strb.w	r8, [r3]
 800fe4e:	e63f      	b.n	800fad0 <_dtoa_r+0x698>
 800fe50:	4628      	mov	r0, r5
 800fe52:	e7bb      	b.n	800fdcc <_dtoa_r+0x994>
 800fe54:	2201      	movs	r2, #1
 800fe56:	e7e1      	b.n	800fe1c <_dtoa_r+0x9e4>
 800fe58:	9b08      	ldr	r3, [sp, #32]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	db04      	blt.n	800fe68 <_dtoa_r+0xa30>
 800fe5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800fe60:	430b      	orrs	r3, r1
 800fe62:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800fe64:	430b      	orrs	r3, r1
 800fe66:	d120      	bne.n	800feaa <_dtoa_r+0xa72>
 800fe68:	2a00      	cmp	r2, #0
 800fe6a:	dded      	ble.n	800fe48 <_dtoa_r+0xa10>
 800fe6c:	4649      	mov	r1, r9
 800fe6e:	2201      	movs	r2, #1
 800fe70:	4658      	mov	r0, fp
 800fe72:	f000 fbb3 	bl	80105dc <__lshift>
 800fe76:	4621      	mov	r1, r4
 800fe78:	4681      	mov	r9, r0
 800fe7a:	f000 fc1b 	bl	80106b4 <__mcmp>
 800fe7e:	2800      	cmp	r0, #0
 800fe80:	dc03      	bgt.n	800fe8a <_dtoa_r+0xa52>
 800fe82:	d1e1      	bne.n	800fe48 <_dtoa_r+0xa10>
 800fe84:	f018 0f01 	tst.w	r8, #1
 800fe88:	d0de      	beq.n	800fe48 <_dtoa_r+0xa10>
 800fe8a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800fe8e:	d1d8      	bne.n	800fe42 <_dtoa_r+0xa0a>
 800fe90:	9a00      	ldr	r2, [sp, #0]
 800fe92:	2339      	movs	r3, #57	@ 0x39
 800fe94:	7013      	strb	r3, [r2, #0]
 800fe96:	4633      	mov	r3, r6
 800fe98:	461e      	mov	r6, r3
 800fe9a:	3b01      	subs	r3, #1
 800fe9c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800fea0:	2a39      	cmp	r2, #57	@ 0x39
 800fea2:	d052      	beq.n	800ff4a <_dtoa_r+0xb12>
 800fea4:	3201      	adds	r2, #1
 800fea6:	701a      	strb	r2, [r3, #0]
 800fea8:	e612      	b.n	800fad0 <_dtoa_r+0x698>
 800feaa:	2a00      	cmp	r2, #0
 800feac:	dd07      	ble.n	800febe <_dtoa_r+0xa86>
 800feae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800feb2:	d0ed      	beq.n	800fe90 <_dtoa_r+0xa58>
 800feb4:	9a00      	ldr	r2, [sp, #0]
 800feb6:	f108 0301 	add.w	r3, r8, #1
 800feba:	7013      	strb	r3, [r2, #0]
 800febc:	e608      	b.n	800fad0 <_dtoa_r+0x698>
 800febe:	9b07      	ldr	r3, [sp, #28]
 800fec0:	9a07      	ldr	r2, [sp, #28]
 800fec2:	f803 8c01 	strb.w	r8, [r3, #-1]
 800fec6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fec8:	4293      	cmp	r3, r2
 800feca:	d028      	beq.n	800ff1e <_dtoa_r+0xae6>
 800fecc:	4649      	mov	r1, r9
 800fece:	2300      	movs	r3, #0
 800fed0:	220a      	movs	r2, #10
 800fed2:	4658      	mov	r0, fp
 800fed4:	f000 f9d6 	bl	8010284 <__multadd>
 800fed8:	42af      	cmp	r7, r5
 800feda:	4681      	mov	r9, r0
 800fedc:	f04f 0300 	mov.w	r3, #0
 800fee0:	f04f 020a 	mov.w	r2, #10
 800fee4:	4639      	mov	r1, r7
 800fee6:	4658      	mov	r0, fp
 800fee8:	d107      	bne.n	800fefa <_dtoa_r+0xac2>
 800feea:	f000 f9cb 	bl	8010284 <__multadd>
 800feee:	4607      	mov	r7, r0
 800fef0:	4605      	mov	r5, r0
 800fef2:	9b07      	ldr	r3, [sp, #28]
 800fef4:	3301      	adds	r3, #1
 800fef6:	9307      	str	r3, [sp, #28]
 800fef8:	e774      	b.n	800fde4 <_dtoa_r+0x9ac>
 800fefa:	f000 f9c3 	bl	8010284 <__multadd>
 800fefe:	4629      	mov	r1, r5
 800ff00:	4607      	mov	r7, r0
 800ff02:	2300      	movs	r3, #0
 800ff04:	220a      	movs	r2, #10
 800ff06:	4658      	mov	r0, fp
 800ff08:	f000 f9bc 	bl	8010284 <__multadd>
 800ff0c:	4605      	mov	r5, r0
 800ff0e:	e7f0      	b.n	800fef2 <_dtoa_r+0xaba>
 800ff10:	9b00      	ldr	r3, [sp, #0]
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	bfcc      	ite	gt
 800ff16:	461e      	movgt	r6, r3
 800ff18:	2601      	movle	r6, #1
 800ff1a:	4456      	add	r6, sl
 800ff1c:	2700      	movs	r7, #0
 800ff1e:	4649      	mov	r1, r9
 800ff20:	2201      	movs	r2, #1
 800ff22:	4658      	mov	r0, fp
 800ff24:	f000 fb5a 	bl	80105dc <__lshift>
 800ff28:	4621      	mov	r1, r4
 800ff2a:	4681      	mov	r9, r0
 800ff2c:	f000 fbc2 	bl	80106b4 <__mcmp>
 800ff30:	2800      	cmp	r0, #0
 800ff32:	dcb0      	bgt.n	800fe96 <_dtoa_r+0xa5e>
 800ff34:	d102      	bne.n	800ff3c <_dtoa_r+0xb04>
 800ff36:	f018 0f01 	tst.w	r8, #1
 800ff3a:	d1ac      	bne.n	800fe96 <_dtoa_r+0xa5e>
 800ff3c:	4633      	mov	r3, r6
 800ff3e:	461e      	mov	r6, r3
 800ff40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ff44:	2a30      	cmp	r2, #48	@ 0x30
 800ff46:	d0fa      	beq.n	800ff3e <_dtoa_r+0xb06>
 800ff48:	e5c2      	b.n	800fad0 <_dtoa_r+0x698>
 800ff4a:	459a      	cmp	sl, r3
 800ff4c:	d1a4      	bne.n	800fe98 <_dtoa_r+0xa60>
 800ff4e:	9b04      	ldr	r3, [sp, #16]
 800ff50:	3301      	adds	r3, #1
 800ff52:	9304      	str	r3, [sp, #16]
 800ff54:	2331      	movs	r3, #49	@ 0x31
 800ff56:	f88a 3000 	strb.w	r3, [sl]
 800ff5a:	e5b9      	b.n	800fad0 <_dtoa_r+0x698>
 800ff5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ff5e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ffbc <_dtoa_r+0xb84>
 800ff62:	b11b      	cbz	r3, 800ff6c <_dtoa_r+0xb34>
 800ff64:	f10a 0308 	add.w	r3, sl, #8
 800ff68:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ff6a:	6013      	str	r3, [r2, #0]
 800ff6c:	4650      	mov	r0, sl
 800ff6e:	b019      	add	sp, #100	@ 0x64
 800ff70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff76:	2b01      	cmp	r3, #1
 800ff78:	f77f ae37 	ble.w	800fbea <_dtoa_r+0x7b2>
 800ff7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ff7e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ff80:	2001      	movs	r0, #1
 800ff82:	e655      	b.n	800fc30 <_dtoa_r+0x7f8>
 800ff84:	9b00      	ldr	r3, [sp, #0]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	f77f aed6 	ble.w	800fd38 <_dtoa_r+0x900>
 800ff8c:	4656      	mov	r6, sl
 800ff8e:	4621      	mov	r1, r4
 800ff90:	4648      	mov	r0, r9
 800ff92:	f7ff f9c6 	bl	800f322 <quorem>
 800ff96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ff9a:	f806 8b01 	strb.w	r8, [r6], #1
 800ff9e:	9b00      	ldr	r3, [sp, #0]
 800ffa0:	eba6 020a 	sub.w	r2, r6, sl
 800ffa4:	4293      	cmp	r3, r2
 800ffa6:	ddb3      	ble.n	800ff10 <_dtoa_r+0xad8>
 800ffa8:	4649      	mov	r1, r9
 800ffaa:	2300      	movs	r3, #0
 800ffac:	220a      	movs	r2, #10
 800ffae:	4658      	mov	r0, fp
 800ffb0:	f000 f968 	bl	8010284 <__multadd>
 800ffb4:	4681      	mov	r9, r0
 800ffb6:	e7ea      	b.n	800ff8e <_dtoa_r+0xb56>
 800ffb8:	080112f8 	.word	0x080112f8
 800ffbc:	0801127c 	.word	0x0801127c

0800ffc0 <_free_r>:
 800ffc0:	b538      	push	{r3, r4, r5, lr}
 800ffc2:	4605      	mov	r5, r0
 800ffc4:	2900      	cmp	r1, #0
 800ffc6:	d041      	beq.n	801004c <_free_r+0x8c>
 800ffc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ffcc:	1f0c      	subs	r4, r1, #4
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	bfb8      	it	lt
 800ffd2:	18e4      	addlt	r4, r4, r3
 800ffd4:	f000 f8e8 	bl	80101a8 <__malloc_lock>
 800ffd8:	4a1d      	ldr	r2, [pc, #116]	@ (8010050 <_free_r+0x90>)
 800ffda:	6813      	ldr	r3, [r2, #0]
 800ffdc:	b933      	cbnz	r3, 800ffec <_free_r+0x2c>
 800ffde:	6063      	str	r3, [r4, #4]
 800ffe0:	6014      	str	r4, [r2, #0]
 800ffe2:	4628      	mov	r0, r5
 800ffe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ffe8:	f000 b8e4 	b.w	80101b4 <__malloc_unlock>
 800ffec:	42a3      	cmp	r3, r4
 800ffee:	d908      	bls.n	8010002 <_free_r+0x42>
 800fff0:	6820      	ldr	r0, [r4, #0]
 800fff2:	1821      	adds	r1, r4, r0
 800fff4:	428b      	cmp	r3, r1
 800fff6:	bf01      	itttt	eq
 800fff8:	6819      	ldreq	r1, [r3, #0]
 800fffa:	685b      	ldreq	r3, [r3, #4]
 800fffc:	1809      	addeq	r1, r1, r0
 800fffe:	6021      	streq	r1, [r4, #0]
 8010000:	e7ed      	b.n	800ffde <_free_r+0x1e>
 8010002:	461a      	mov	r2, r3
 8010004:	685b      	ldr	r3, [r3, #4]
 8010006:	b10b      	cbz	r3, 801000c <_free_r+0x4c>
 8010008:	42a3      	cmp	r3, r4
 801000a:	d9fa      	bls.n	8010002 <_free_r+0x42>
 801000c:	6811      	ldr	r1, [r2, #0]
 801000e:	1850      	adds	r0, r2, r1
 8010010:	42a0      	cmp	r0, r4
 8010012:	d10b      	bne.n	801002c <_free_r+0x6c>
 8010014:	6820      	ldr	r0, [r4, #0]
 8010016:	4401      	add	r1, r0
 8010018:	1850      	adds	r0, r2, r1
 801001a:	4283      	cmp	r3, r0
 801001c:	6011      	str	r1, [r2, #0]
 801001e:	d1e0      	bne.n	800ffe2 <_free_r+0x22>
 8010020:	6818      	ldr	r0, [r3, #0]
 8010022:	685b      	ldr	r3, [r3, #4]
 8010024:	6053      	str	r3, [r2, #4]
 8010026:	4408      	add	r0, r1
 8010028:	6010      	str	r0, [r2, #0]
 801002a:	e7da      	b.n	800ffe2 <_free_r+0x22>
 801002c:	d902      	bls.n	8010034 <_free_r+0x74>
 801002e:	230c      	movs	r3, #12
 8010030:	602b      	str	r3, [r5, #0]
 8010032:	e7d6      	b.n	800ffe2 <_free_r+0x22>
 8010034:	6820      	ldr	r0, [r4, #0]
 8010036:	1821      	adds	r1, r4, r0
 8010038:	428b      	cmp	r3, r1
 801003a:	bf04      	itt	eq
 801003c:	6819      	ldreq	r1, [r3, #0]
 801003e:	685b      	ldreq	r3, [r3, #4]
 8010040:	6063      	str	r3, [r4, #4]
 8010042:	bf04      	itt	eq
 8010044:	1809      	addeq	r1, r1, r0
 8010046:	6021      	streq	r1, [r4, #0]
 8010048:	6054      	str	r4, [r2, #4]
 801004a:	e7ca      	b.n	800ffe2 <_free_r+0x22>
 801004c:	bd38      	pop	{r3, r4, r5, pc}
 801004e:	bf00      	nop
 8010050:	20002074 	.word	0x20002074

08010054 <malloc>:
 8010054:	4b02      	ldr	r3, [pc, #8]	@ (8010060 <malloc+0xc>)
 8010056:	4601      	mov	r1, r0
 8010058:	6818      	ldr	r0, [r3, #0]
 801005a:	f000 b825 	b.w	80100a8 <_malloc_r>
 801005e:	bf00      	nop
 8010060:	20000130 	.word	0x20000130

08010064 <sbrk_aligned>:
 8010064:	b570      	push	{r4, r5, r6, lr}
 8010066:	4e0f      	ldr	r6, [pc, #60]	@ (80100a4 <sbrk_aligned+0x40>)
 8010068:	460c      	mov	r4, r1
 801006a:	6831      	ldr	r1, [r6, #0]
 801006c:	4605      	mov	r5, r0
 801006e:	b911      	cbnz	r1, 8010076 <sbrk_aligned+0x12>
 8010070:	f000 fede 	bl	8010e30 <_sbrk_r>
 8010074:	6030      	str	r0, [r6, #0]
 8010076:	4621      	mov	r1, r4
 8010078:	4628      	mov	r0, r5
 801007a:	f000 fed9 	bl	8010e30 <_sbrk_r>
 801007e:	1c43      	adds	r3, r0, #1
 8010080:	d103      	bne.n	801008a <sbrk_aligned+0x26>
 8010082:	f04f 34ff 	mov.w	r4, #4294967295
 8010086:	4620      	mov	r0, r4
 8010088:	bd70      	pop	{r4, r5, r6, pc}
 801008a:	1cc4      	adds	r4, r0, #3
 801008c:	f024 0403 	bic.w	r4, r4, #3
 8010090:	42a0      	cmp	r0, r4
 8010092:	d0f8      	beq.n	8010086 <sbrk_aligned+0x22>
 8010094:	1a21      	subs	r1, r4, r0
 8010096:	4628      	mov	r0, r5
 8010098:	f000 feca 	bl	8010e30 <_sbrk_r>
 801009c:	3001      	adds	r0, #1
 801009e:	d1f2      	bne.n	8010086 <sbrk_aligned+0x22>
 80100a0:	e7ef      	b.n	8010082 <sbrk_aligned+0x1e>
 80100a2:	bf00      	nop
 80100a4:	20002070 	.word	0x20002070

080100a8 <_malloc_r>:
 80100a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80100ac:	1ccd      	adds	r5, r1, #3
 80100ae:	f025 0503 	bic.w	r5, r5, #3
 80100b2:	3508      	adds	r5, #8
 80100b4:	2d0c      	cmp	r5, #12
 80100b6:	bf38      	it	cc
 80100b8:	250c      	movcc	r5, #12
 80100ba:	2d00      	cmp	r5, #0
 80100bc:	4606      	mov	r6, r0
 80100be:	db01      	blt.n	80100c4 <_malloc_r+0x1c>
 80100c0:	42a9      	cmp	r1, r5
 80100c2:	d904      	bls.n	80100ce <_malloc_r+0x26>
 80100c4:	230c      	movs	r3, #12
 80100c6:	6033      	str	r3, [r6, #0]
 80100c8:	2000      	movs	r0, #0
 80100ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80101a4 <_malloc_r+0xfc>
 80100d2:	f000 f869 	bl	80101a8 <__malloc_lock>
 80100d6:	f8d8 3000 	ldr.w	r3, [r8]
 80100da:	461c      	mov	r4, r3
 80100dc:	bb44      	cbnz	r4, 8010130 <_malloc_r+0x88>
 80100de:	4629      	mov	r1, r5
 80100e0:	4630      	mov	r0, r6
 80100e2:	f7ff ffbf 	bl	8010064 <sbrk_aligned>
 80100e6:	1c43      	adds	r3, r0, #1
 80100e8:	4604      	mov	r4, r0
 80100ea:	d158      	bne.n	801019e <_malloc_r+0xf6>
 80100ec:	f8d8 4000 	ldr.w	r4, [r8]
 80100f0:	4627      	mov	r7, r4
 80100f2:	2f00      	cmp	r7, #0
 80100f4:	d143      	bne.n	801017e <_malloc_r+0xd6>
 80100f6:	2c00      	cmp	r4, #0
 80100f8:	d04b      	beq.n	8010192 <_malloc_r+0xea>
 80100fa:	6823      	ldr	r3, [r4, #0]
 80100fc:	4639      	mov	r1, r7
 80100fe:	4630      	mov	r0, r6
 8010100:	eb04 0903 	add.w	r9, r4, r3
 8010104:	f000 fe94 	bl	8010e30 <_sbrk_r>
 8010108:	4581      	cmp	r9, r0
 801010a:	d142      	bne.n	8010192 <_malloc_r+0xea>
 801010c:	6821      	ldr	r1, [r4, #0]
 801010e:	1a6d      	subs	r5, r5, r1
 8010110:	4629      	mov	r1, r5
 8010112:	4630      	mov	r0, r6
 8010114:	f7ff ffa6 	bl	8010064 <sbrk_aligned>
 8010118:	3001      	adds	r0, #1
 801011a:	d03a      	beq.n	8010192 <_malloc_r+0xea>
 801011c:	6823      	ldr	r3, [r4, #0]
 801011e:	442b      	add	r3, r5
 8010120:	6023      	str	r3, [r4, #0]
 8010122:	f8d8 3000 	ldr.w	r3, [r8]
 8010126:	685a      	ldr	r2, [r3, #4]
 8010128:	bb62      	cbnz	r2, 8010184 <_malloc_r+0xdc>
 801012a:	f8c8 7000 	str.w	r7, [r8]
 801012e:	e00f      	b.n	8010150 <_malloc_r+0xa8>
 8010130:	6822      	ldr	r2, [r4, #0]
 8010132:	1b52      	subs	r2, r2, r5
 8010134:	d420      	bmi.n	8010178 <_malloc_r+0xd0>
 8010136:	2a0b      	cmp	r2, #11
 8010138:	d917      	bls.n	801016a <_malloc_r+0xc2>
 801013a:	1961      	adds	r1, r4, r5
 801013c:	42a3      	cmp	r3, r4
 801013e:	6025      	str	r5, [r4, #0]
 8010140:	bf18      	it	ne
 8010142:	6059      	strne	r1, [r3, #4]
 8010144:	6863      	ldr	r3, [r4, #4]
 8010146:	bf08      	it	eq
 8010148:	f8c8 1000 	streq.w	r1, [r8]
 801014c:	5162      	str	r2, [r4, r5]
 801014e:	604b      	str	r3, [r1, #4]
 8010150:	4630      	mov	r0, r6
 8010152:	f000 f82f 	bl	80101b4 <__malloc_unlock>
 8010156:	f104 000b 	add.w	r0, r4, #11
 801015a:	1d23      	adds	r3, r4, #4
 801015c:	f020 0007 	bic.w	r0, r0, #7
 8010160:	1ac2      	subs	r2, r0, r3
 8010162:	bf1c      	itt	ne
 8010164:	1a1b      	subne	r3, r3, r0
 8010166:	50a3      	strne	r3, [r4, r2]
 8010168:	e7af      	b.n	80100ca <_malloc_r+0x22>
 801016a:	6862      	ldr	r2, [r4, #4]
 801016c:	42a3      	cmp	r3, r4
 801016e:	bf0c      	ite	eq
 8010170:	f8c8 2000 	streq.w	r2, [r8]
 8010174:	605a      	strne	r2, [r3, #4]
 8010176:	e7eb      	b.n	8010150 <_malloc_r+0xa8>
 8010178:	4623      	mov	r3, r4
 801017a:	6864      	ldr	r4, [r4, #4]
 801017c:	e7ae      	b.n	80100dc <_malloc_r+0x34>
 801017e:	463c      	mov	r4, r7
 8010180:	687f      	ldr	r7, [r7, #4]
 8010182:	e7b6      	b.n	80100f2 <_malloc_r+0x4a>
 8010184:	461a      	mov	r2, r3
 8010186:	685b      	ldr	r3, [r3, #4]
 8010188:	42a3      	cmp	r3, r4
 801018a:	d1fb      	bne.n	8010184 <_malloc_r+0xdc>
 801018c:	2300      	movs	r3, #0
 801018e:	6053      	str	r3, [r2, #4]
 8010190:	e7de      	b.n	8010150 <_malloc_r+0xa8>
 8010192:	230c      	movs	r3, #12
 8010194:	6033      	str	r3, [r6, #0]
 8010196:	4630      	mov	r0, r6
 8010198:	f000 f80c 	bl	80101b4 <__malloc_unlock>
 801019c:	e794      	b.n	80100c8 <_malloc_r+0x20>
 801019e:	6005      	str	r5, [r0, #0]
 80101a0:	e7d6      	b.n	8010150 <_malloc_r+0xa8>
 80101a2:	bf00      	nop
 80101a4:	20002074 	.word	0x20002074

080101a8 <__malloc_lock>:
 80101a8:	4801      	ldr	r0, [pc, #4]	@ (80101b0 <__malloc_lock+0x8>)
 80101aa:	f7ff b8aa 	b.w	800f302 <__retarget_lock_acquire_recursive>
 80101ae:	bf00      	nop
 80101b0:	2000206c 	.word	0x2000206c

080101b4 <__malloc_unlock>:
 80101b4:	4801      	ldr	r0, [pc, #4]	@ (80101bc <__malloc_unlock+0x8>)
 80101b6:	f7ff b8a5 	b.w	800f304 <__retarget_lock_release_recursive>
 80101ba:	bf00      	nop
 80101bc:	2000206c 	.word	0x2000206c

080101c0 <_Balloc>:
 80101c0:	b570      	push	{r4, r5, r6, lr}
 80101c2:	69c6      	ldr	r6, [r0, #28]
 80101c4:	4604      	mov	r4, r0
 80101c6:	460d      	mov	r5, r1
 80101c8:	b976      	cbnz	r6, 80101e8 <_Balloc+0x28>
 80101ca:	2010      	movs	r0, #16
 80101cc:	f7ff ff42 	bl	8010054 <malloc>
 80101d0:	4602      	mov	r2, r0
 80101d2:	61e0      	str	r0, [r4, #28]
 80101d4:	b920      	cbnz	r0, 80101e0 <_Balloc+0x20>
 80101d6:	4b18      	ldr	r3, [pc, #96]	@ (8010238 <_Balloc+0x78>)
 80101d8:	4818      	ldr	r0, [pc, #96]	@ (801023c <_Balloc+0x7c>)
 80101da:	216b      	movs	r1, #107	@ 0x6b
 80101dc:	f000 fe38 	bl	8010e50 <__assert_func>
 80101e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80101e4:	6006      	str	r6, [r0, #0]
 80101e6:	60c6      	str	r6, [r0, #12]
 80101e8:	69e6      	ldr	r6, [r4, #28]
 80101ea:	68f3      	ldr	r3, [r6, #12]
 80101ec:	b183      	cbz	r3, 8010210 <_Balloc+0x50>
 80101ee:	69e3      	ldr	r3, [r4, #28]
 80101f0:	68db      	ldr	r3, [r3, #12]
 80101f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80101f6:	b9b8      	cbnz	r0, 8010228 <_Balloc+0x68>
 80101f8:	2101      	movs	r1, #1
 80101fa:	fa01 f605 	lsl.w	r6, r1, r5
 80101fe:	1d72      	adds	r2, r6, #5
 8010200:	0092      	lsls	r2, r2, #2
 8010202:	4620      	mov	r0, r4
 8010204:	f000 fe42 	bl	8010e8c <_calloc_r>
 8010208:	b160      	cbz	r0, 8010224 <_Balloc+0x64>
 801020a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801020e:	e00e      	b.n	801022e <_Balloc+0x6e>
 8010210:	2221      	movs	r2, #33	@ 0x21
 8010212:	2104      	movs	r1, #4
 8010214:	4620      	mov	r0, r4
 8010216:	f000 fe39 	bl	8010e8c <_calloc_r>
 801021a:	69e3      	ldr	r3, [r4, #28]
 801021c:	60f0      	str	r0, [r6, #12]
 801021e:	68db      	ldr	r3, [r3, #12]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d1e4      	bne.n	80101ee <_Balloc+0x2e>
 8010224:	2000      	movs	r0, #0
 8010226:	bd70      	pop	{r4, r5, r6, pc}
 8010228:	6802      	ldr	r2, [r0, #0]
 801022a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801022e:	2300      	movs	r3, #0
 8010230:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010234:	e7f7      	b.n	8010226 <_Balloc+0x66>
 8010236:	bf00      	nop
 8010238:	08011289 	.word	0x08011289
 801023c:	08011309 	.word	0x08011309

08010240 <_Bfree>:
 8010240:	b570      	push	{r4, r5, r6, lr}
 8010242:	69c6      	ldr	r6, [r0, #28]
 8010244:	4605      	mov	r5, r0
 8010246:	460c      	mov	r4, r1
 8010248:	b976      	cbnz	r6, 8010268 <_Bfree+0x28>
 801024a:	2010      	movs	r0, #16
 801024c:	f7ff ff02 	bl	8010054 <malloc>
 8010250:	4602      	mov	r2, r0
 8010252:	61e8      	str	r0, [r5, #28]
 8010254:	b920      	cbnz	r0, 8010260 <_Bfree+0x20>
 8010256:	4b09      	ldr	r3, [pc, #36]	@ (801027c <_Bfree+0x3c>)
 8010258:	4809      	ldr	r0, [pc, #36]	@ (8010280 <_Bfree+0x40>)
 801025a:	218f      	movs	r1, #143	@ 0x8f
 801025c:	f000 fdf8 	bl	8010e50 <__assert_func>
 8010260:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010264:	6006      	str	r6, [r0, #0]
 8010266:	60c6      	str	r6, [r0, #12]
 8010268:	b13c      	cbz	r4, 801027a <_Bfree+0x3a>
 801026a:	69eb      	ldr	r3, [r5, #28]
 801026c:	6862      	ldr	r2, [r4, #4]
 801026e:	68db      	ldr	r3, [r3, #12]
 8010270:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010274:	6021      	str	r1, [r4, #0]
 8010276:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801027a:	bd70      	pop	{r4, r5, r6, pc}
 801027c:	08011289 	.word	0x08011289
 8010280:	08011309 	.word	0x08011309

08010284 <__multadd>:
 8010284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010288:	690d      	ldr	r5, [r1, #16]
 801028a:	4607      	mov	r7, r0
 801028c:	460c      	mov	r4, r1
 801028e:	461e      	mov	r6, r3
 8010290:	f101 0c14 	add.w	ip, r1, #20
 8010294:	2000      	movs	r0, #0
 8010296:	f8dc 3000 	ldr.w	r3, [ip]
 801029a:	b299      	uxth	r1, r3
 801029c:	fb02 6101 	mla	r1, r2, r1, r6
 80102a0:	0c1e      	lsrs	r6, r3, #16
 80102a2:	0c0b      	lsrs	r3, r1, #16
 80102a4:	fb02 3306 	mla	r3, r2, r6, r3
 80102a8:	b289      	uxth	r1, r1
 80102aa:	3001      	adds	r0, #1
 80102ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80102b0:	4285      	cmp	r5, r0
 80102b2:	f84c 1b04 	str.w	r1, [ip], #4
 80102b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80102ba:	dcec      	bgt.n	8010296 <__multadd+0x12>
 80102bc:	b30e      	cbz	r6, 8010302 <__multadd+0x7e>
 80102be:	68a3      	ldr	r3, [r4, #8]
 80102c0:	42ab      	cmp	r3, r5
 80102c2:	dc19      	bgt.n	80102f8 <__multadd+0x74>
 80102c4:	6861      	ldr	r1, [r4, #4]
 80102c6:	4638      	mov	r0, r7
 80102c8:	3101      	adds	r1, #1
 80102ca:	f7ff ff79 	bl	80101c0 <_Balloc>
 80102ce:	4680      	mov	r8, r0
 80102d0:	b928      	cbnz	r0, 80102de <__multadd+0x5a>
 80102d2:	4602      	mov	r2, r0
 80102d4:	4b0c      	ldr	r3, [pc, #48]	@ (8010308 <__multadd+0x84>)
 80102d6:	480d      	ldr	r0, [pc, #52]	@ (801030c <__multadd+0x88>)
 80102d8:	21ba      	movs	r1, #186	@ 0xba
 80102da:	f000 fdb9 	bl	8010e50 <__assert_func>
 80102de:	6922      	ldr	r2, [r4, #16]
 80102e0:	3202      	adds	r2, #2
 80102e2:	f104 010c 	add.w	r1, r4, #12
 80102e6:	0092      	lsls	r2, r2, #2
 80102e8:	300c      	adds	r0, #12
 80102ea:	f7ff f80c 	bl	800f306 <memcpy>
 80102ee:	4621      	mov	r1, r4
 80102f0:	4638      	mov	r0, r7
 80102f2:	f7ff ffa5 	bl	8010240 <_Bfree>
 80102f6:	4644      	mov	r4, r8
 80102f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80102fc:	3501      	adds	r5, #1
 80102fe:	615e      	str	r6, [r3, #20]
 8010300:	6125      	str	r5, [r4, #16]
 8010302:	4620      	mov	r0, r4
 8010304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010308:	080112f8 	.word	0x080112f8
 801030c:	08011309 	.word	0x08011309

08010310 <__hi0bits>:
 8010310:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010314:	4603      	mov	r3, r0
 8010316:	bf36      	itet	cc
 8010318:	0403      	lslcc	r3, r0, #16
 801031a:	2000      	movcs	r0, #0
 801031c:	2010      	movcc	r0, #16
 801031e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010322:	bf3c      	itt	cc
 8010324:	021b      	lslcc	r3, r3, #8
 8010326:	3008      	addcc	r0, #8
 8010328:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801032c:	bf3c      	itt	cc
 801032e:	011b      	lslcc	r3, r3, #4
 8010330:	3004      	addcc	r0, #4
 8010332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010336:	bf3c      	itt	cc
 8010338:	009b      	lslcc	r3, r3, #2
 801033a:	3002      	addcc	r0, #2
 801033c:	2b00      	cmp	r3, #0
 801033e:	db05      	blt.n	801034c <__hi0bits+0x3c>
 8010340:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010344:	f100 0001 	add.w	r0, r0, #1
 8010348:	bf08      	it	eq
 801034a:	2020      	moveq	r0, #32
 801034c:	4770      	bx	lr

0801034e <__lo0bits>:
 801034e:	6803      	ldr	r3, [r0, #0]
 8010350:	4602      	mov	r2, r0
 8010352:	f013 0007 	ands.w	r0, r3, #7
 8010356:	d00b      	beq.n	8010370 <__lo0bits+0x22>
 8010358:	07d9      	lsls	r1, r3, #31
 801035a:	d421      	bmi.n	80103a0 <__lo0bits+0x52>
 801035c:	0798      	lsls	r0, r3, #30
 801035e:	bf49      	itett	mi
 8010360:	085b      	lsrmi	r3, r3, #1
 8010362:	089b      	lsrpl	r3, r3, #2
 8010364:	2001      	movmi	r0, #1
 8010366:	6013      	strmi	r3, [r2, #0]
 8010368:	bf5c      	itt	pl
 801036a:	6013      	strpl	r3, [r2, #0]
 801036c:	2002      	movpl	r0, #2
 801036e:	4770      	bx	lr
 8010370:	b299      	uxth	r1, r3
 8010372:	b909      	cbnz	r1, 8010378 <__lo0bits+0x2a>
 8010374:	0c1b      	lsrs	r3, r3, #16
 8010376:	2010      	movs	r0, #16
 8010378:	b2d9      	uxtb	r1, r3
 801037a:	b909      	cbnz	r1, 8010380 <__lo0bits+0x32>
 801037c:	3008      	adds	r0, #8
 801037e:	0a1b      	lsrs	r3, r3, #8
 8010380:	0719      	lsls	r1, r3, #28
 8010382:	bf04      	itt	eq
 8010384:	091b      	lsreq	r3, r3, #4
 8010386:	3004      	addeq	r0, #4
 8010388:	0799      	lsls	r1, r3, #30
 801038a:	bf04      	itt	eq
 801038c:	089b      	lsreq	r3, r3, #2
 801038e:	3002      	addeq	r0, #2
 8010390:	07d9      	lsls	r1, r3, #31
 8010392:	d403      	bmi.n	801039c <__lo0bits+0x4e>
 8010394:	085b      	lsrs	r3, r3, #1
 8010396:	f100 0001 	add.w	r0, r0, #1
 801039a:	d003      	beq.n	80103a4 <__lo0bits+0x56>
 801039c:	6013      	str	r3, [r2, #0]
 801039e:	4770      	bx	lr
 80103a0:	2000      	movs	r0, #0
 80103a2:	4770      	bx	lr
 80103a4:	2020      	movs	r0, #32
 80103a6:	4770      	bx	lr

080103a8 <__i2b>:
 80103a8:	b510      	push	{r4, lr}
 80103aa:	460c      	mov	r4, r1
 80103ac:	2101      	movs	r1, #1
 80103ae:	f7ff ff07 	bl	80101c0 <_Balloc>
 80103b2:	4602      	mov	r2, r0
 80103b4:	b928      	cbnz	r0, 80103c2 <__i2b+0x1a>
 80103b6:	4b05      	ldr	r3, [pc, #20]	@ (80103cc <__i2b+0x24>)
 80103b8:	4805      	ldr	r0, [pc, #20]	@ (80103d0 <__i2b+0x28>)
 80103ba:	f240 1145 	movw	r1, #325	@ 0x145
 80103be:	f000 fd47 	bl	8010e50 <__assert_func>
 80103c2:	2301      	movs	r3, #1
 80103c4:	6144      	str	r4, [r0, #20]
 80103c6:	6103      	str	r3, [r0, #16]
 80103c8:	bd10      	pop	{r4, pc}
 80103ca:	bf00      	nop
 80103cc:	080112f8 	.word	0x080112f8
 80103d0:	08011309 	.word	0x08011309

080103d4 <__multiply>:
 80103d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103d8:	4614      	mov	r4, r2
 80103da:	690a      	ldr	r2, [r1, #16]
 80103dc:	6923      	ldr	r3, [r4, #16]
 80103de:	429a      	cmp	r2, r3
 80103e0:	bfa8      	it	ge
 80103e2:	4623      	movge	r3, r4
 80103e4:	460f      	mov	r7, r1
 80103e6:	bfa4      	itt	ge
 80103e8:	460c      	movge	r4, r1
 80103ea:	461f      	movge	r7, r3
 80103ec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80103f0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80103f4:	68a3      	ldr	r3, [r4, #8]
 80103f6:	6861      	ldr	r1, [r4, #4]
 80103f8:	eb0a 0609 	add.w	r6, sl, r9
 80103fc:	42b3      	cmp	r3, r6
 80103fe:	b085      	sub	sp, #20
 8010400:	bfb8      	it	lt
 8010402:	3101      	addlt	r1, #1
 8010404:	f7ff fedc 	bl	80101c0 <_Balloc>
 8010408:	b930      	cbnz	r0, 8010418 <__multiply+0x44>
 801040a:	4602      	mov	r2, r0
 801040c:	4b44      	ldr	r3, [pc, #272]	@ (8010520 <__multiply+0x14c>)
 801040e:	4845      	ldr	r0, [pc, #276]	@ (8010524 <__multiply+0x150>)
 8010410:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010414:	f000 fd1c 	bl	8010e50 <__assert_func>
 8010418:	f100 0514 	add.w	r5, r0, #20
 801041c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010420:	462b      	mov	r3, r5
 8010422:	2200      	movs	r2, #0
 8010424:	4543      	cmp	r3, r8
 8010426:	d321      	bcc.n	801046c <__multiply+0x98>
 8010428:	f107 0114 	add.w	r1, r7, #20
 801042c:	f104 0214 	add.w	r2, r4, #20
 8010430:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8010434:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8010438:	9302      	str	r3, [sp, #8]
 801043a:	1b13      	subs	r3, r2, r4
 801043c:	3b15      	subs	r3, #21
 801043e:	f023 0303 	bic.w	r3, r3, #3
 8010442:	3304      	adds	r3, #4
 8010444:	f104 0715 	add.w	r7, r4, #21
 8010448:	42ba      	cmp	r2, r7
 801044a:	bf38      	it	cc
 801044c:	2304      	movcc	r3, #4
 801044e:	9301      	str	r3, [sp, #4]
 8010450:	9b02      	ldr	r3, [sp, #8]
 8010452:	9103      	str	r1, [sp, #12]
 8010454:	428b      	cmp	r3, r1
 8010456:	d80c      	bhi.n	8010472 <__multiply+0x9e>
 8010458:	2e00      	cmp	r6, #0
 801045a:	dd03      	ble.n	8010464 <__multiply+0x90>
 801045c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010460:	2b00      	cmp	r3, #0
 8010462:	d05b      	beq.n	801051c <__multiply+0x148>
 8010464:	6106      	str	r6, [r0, #16]
 8010466:	b005      	add	sp, #20
 8010468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801046c:	f843 2b04 	str.w	r2, [r3], #4
 8010470:	e7d8      	b.n	8010424 <__multiply+0x50>
 8010472:	f8b1 a000 	ldrh.w	sl, [r1]
 8010476:	f1ba 0f00 	cmp.w	sl, #0
 801047a:	d024      	beq.n	80104c6 <__multiply+0xf2>
 801047c:	f104 0e14 	add.w	lr, r4, #20
 8010480:	46a9      	mov	r9, r5
 8010482:	f04f 0c00 	mov.w	ip, #0
 8010486:	f85e 7b04 	ldr.w	r7, [lr], #4
 801048a:	f8d9 3000 	ldr.w	r3, [r9]
 801048e:	fa1f fb87 	uxth.w	fp, r7
 8010492:	b29b      	uxth	r3, r3
 8010494:	fb0a 330b 	mla	r3, sl, fp, r3
 8010498:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801049c:	f8d9 7000 	ldr.w	r7, [r9]
 80104a0:	4463      	add	r3, ip
 80104a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80104a6:	fb0a c70b 	mla	r7, sl, fp, ip
 80104aa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80104ae:	b29b      	uxth	r3, r3
 80104b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80104b4:	4572      	cmp	r2, lr
 80104b6:	f849 3b04 	str.w	r3, [r9], #4
 80104ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80104be:	d8e2      	bhi.n	8010486 <__multiply+0xb2>
 80104c0:	9b01      	ldr	r3, [sp, #4]
 80104c2:	f845 c003 	str.w	ip, [r5, r3]
 80104c6:	9b03      	ldr	r3, [sp, #12]
 80104c8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80104cc:	3104      	adds	r1, #4
 80104ce:	f1b9 0f00 	cmp.w	r9, #0
 80104d2:	d021      	beq.n	8010518 <__multiply+0x144>
 80104d4:	682b      	ldr	r3, [r5, #0]
 80104d6:	f104 0c14 	add.w	ip, r4, #20
 80104da:	46ae      	mov	lr, r5
 80104dc:	f04f 0a00 	mov.w	sl, #0
 80104e0:	f8bc b000 	ldrh.w	fp, [ip]
 80104e4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80104e8:	fb09 770b 	mla	r7, r9, fp, r7
 80104ec:	4457      	add	r7, sl
 80104ee:	b29b      	uxth	r3, r3
 80104f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80104f4:	f84e 3b04 	str.w	r3, [lr], #4
 80104f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80104fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010500:	f8be 3000 	ldrh.w	r3, [lr]
 8010504:	fb09 330a 	mla	r3, r9, sl, r3
 8010508:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801050c:	4562      	cmp	r2, ip
 801050e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010512:	d8e5      	bhi.n	80104e0 <__multiply+0x10c>
 8010514:	9f01      	ldr	r7, [sp, #4]
 8010516:	51eb      	str	r3, [r5, r7]
 8010518:	3504      	adds	r5, #4
 801051a:	e799      	b.n	8010450 <__multiply+0x7c>
 801051c:	3e01      	subs	r6, #1
 801051e:	e79b      	b.n	8010458 <__multiply+0x84>
 8010520:	080112f8 	.word	0x080112f8
 8010524:	08011309 	.word	0x08011309

08010528 <__pow5mult>:
 8010528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801052c:	4615      	mov	r5, r2
 801052e:	f012 0203 	ands.w	r2, r2, #3
 8010532:	4607      	mov	r7, r0
 8010534:	460e      	mov	r6, r1
 8010536:	d007      	beq.n	8010548 <__pow5mult+0x20>
 8010538:	4c25      	ldr	r4, [pc, #148]	@ (80105d0 <__pow5mult+0xa8>)
 801053a:	3a01      	subs	r2, #1
 801053c:	2300      	movs	r3, #0
 801053e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010542:	f7ff fe9f 	bl	8010284 <__multadd>
 8010546:	4606      	mov	r6, r0
 8010548:	10ad      	asrs	r5, r5, #2
 801054a:	d03d      	beq.n	80105c8 <__pow5mult+0xa0>
 801054c:	69fc      	ldr	r4, [r7, #28]
 801054e:	b97c      	cbnz	r4, 8010570 <__pow5mult+0x48>
 8010550:	2010      	movs	r0, #16
 8010552:	f7ff fd7f 	bl	8010054 <malloc>
 8010556:	4602      	mov	r2, r0
 8010558:	61f8      	str	r0, [r7, #28]
 801055a:	b928      	cbnz	r0, 8010568 <__pow5mult+0x40>
 801055c:	4b1d      	ldr	r3, [pc, #116]	@ (80105d4 <__pow5mult+0xac>)
 801055e:	481e      	ldr	r0, [pc, #120]	@ (80105d8 <__pow5mult+0xb0>)
 8010560:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010564:	f000 fc74 	bl	8010e50 <__assert_func>
 8010568:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801056c:	6004      	str	r4, [r0, #0]
 801056e:	60c4      	str	r4, [r0, #12]
 8010570:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010574:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010578:	b94c      	cbnz	r4, 801058e <__pow5mult+0x66>
 801057a:	f240 2171 	movw	r1, #625	@ 0x271
 801057e:	4638      	mov	r0, r7
 8010580:	f7ff ff12 	bl	80103a8 <__i2b>
 8010584:	2300      	movs	r3, #0
 8010586:	f8c8 0008 	str.w	r0, [r8, #8]
 801058a:	4604      	mov	r4, r0
 801058c:	6003      	str	r3, [r0, #0]
 801058e:	f04f 0900 	mov.w	r9, #0
 8010592:	07eb      	lsls	r3, r5, #31
 8010594:	d50a      	bpl.n	80105ac <__pow5mult+0x84>
 8010596:	4631      	mov	r1, r6
 8010598:	4622      	mov	r2, r4
 801059a:	4638      	mov	r0, r7
 801059c:	f7ff ff1a 	bl	80103d4 <__multiply>
 80105a0:	4631      	mov	r1, r6
 80105a2:	4680      	mov	r8, r0
 80105a4:	4638      	mov	r0, r7
 80105a6:	f7ff fe4b 	bl	8010240 <_Bfree>
 80105aa:	4646      	mov	r6, r8
 80105ac:	106d      	asrs	r5, r5, #1
 80105ae:	d00b      	beq.n	80105c8 <__pow5mult+0xa0>
 80105b0:	6820      	ldr	r0, [r4, #0]
 80105b2:	b938      	cbnz	r0, 80105c4 <__pow5mult+0x9c>
 80105b4:	4622      	mov	r2, r4
 80105b6:	4621      	mov	r1, r4
 80105b8:	4638      	mov	r0, r7
 80105ba:	f7ff ff0b 	bl	80103d4 <__multiply>
 80105be:	6020      	str	r0, [r4, #0]
 80105c0:	f8c0 9000 	str.w	r9, [r0]
 80105c4:	4604      	mov	r4, r0
 80105c6:	e7e4      	b.n	8010592 <__pow5mult+0x6a>
 80105c8:	4630      	mov	r0, r6
 80105ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80105ce:	bf00      	nop
 80105d0:	08011364 	.word	0x08011364
 80105d4:	08011289 	.word	0x08011289
 80105d8:	08011309 	.word	0x08011309

080105dc <__lshift>:
 80105dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105e0:	460c      	mov	r4, r1
 80105e2:	6849      	ldr	r1, [r1, #4]
 80105e4:	6923      	ldr	r3, [r4, #16]
 80105e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80105ea:	68a3      	ldr	r3, [r4, #8]
 80105ec:	4607      	mov	r7, r0
 80105ee:	4691      	mov	r9, r2
 80105f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80105f4:	f108 0601 	add.w	r6, r8, #1
 80105f8:	42b3      	cmp	r3, r6
 80105fa:	db0b      	blt.n	8010614 <__lshift+0x38>
 80105fc:	4638      	mov	r0, r7
 80105fe:	f7ff fddf 	bl	80101c0 <_Balloc>
 8010602:	4605      	mov	r5, r0
 8010604:	b948      	cbnz	r0, 801061a <__lshift+0x3e>
 8010606:	4602      	mov	r2, r0
 8010608:	4b28      	ldr	r3, [pc, #160]	@ (80106ac <__lshift+0xd0>)
 801060a:	4829      	ldr	r0, [pc, #164]	@ (80106b0 <__lshift+0xd4>)
 801060c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010610:	f000 fc1e 	bl	8010e50 <__assert_func>
 8010614:	3101      	adds	r1, #1
 8010616:	005b      	lsls	r3, r3, #1
 8010618:	e7ee      	b.n	80105f8 <__lshift+0x1c>
 801061a:	2300      	movs	r3, #0
 801061c:	f100 0114 	add.w	r1, r0, #20
 8010620:	f100 0210 	add.w	r2, r0, #16
 8010624:	4618      	mov	r0, r3
 8010626:	4553      	cmp	r3, sl
 8010628:	db33      	blt.n	8010692 <__lshift+0xb6>
 801062a:	6920      	ldr	r0, [r4, #16]
 801062c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010630:	f104 0314 	add.w	r3, r4, #20
 8010634:	f019 091f 	ands.w	r9, r9, #31
 8010638:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801063c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010640:	d02b      	beq.n	801069a <__lshift+0xbe>
 8010642:	f1c9 0e20 	rsb	lr, r9, #32
 8010646:	468a      	mov	sl, r1
 8010648:	2200      	movs	r2, #0
 801064a:	6818      	ldr	r0, [r3, #0]
 801064c:	fa00 f009 	lsl.w	r0, r0, r9
 8010650:	4310      	orrs	r0, r2
 8010652:	f84a 0b04 	str.w	r0, [sl], #4
 8010656:	f853 2b04 	ldr.w	r2, [r3], #4
 801065a:	459c      	cmp	ip, r3
 801065c:	fa22 f20e 	lsr.w	r2, r2, lr
 8010660:	d8f3      	bhi.n	801064a <__lshift+0x6e>
 8010662:	ebac 0304 	sub.w	r3, ip, r4
 8010666:	3b15      	subs	r3, #21
 8010668:	f023 0303 	bic.w	r3, r3, #3
 801066c:	3304      	adds	r3, #4
 801066e:	f104 0015 	add.w	r0, r4, #21
 8010672:	4584      	cmp	ip, r0
 8010674:	bf38      	it	cc
 8010676:	2304      	movcc	r3, #4
 8010678:	50ca      	str	r2, [r1, r3]
 801067a:	b10a      	cbz	r2, 8010680 <__lshift+0xa4>
 801067c:	f108 0602 	add.w	r6, r8, #2
 8010680:	3e01      	subs	r6, #1
 8010682:	4638      	mov	r0, r7
 8010684:	612e      	str	r6, [r5, #16]
 8010686:	4621      	mov	r1, r4
 8010688:	f7ff fdda 	bl	8010240 <_Bfree>
 801068c:	4628      	mov	r0, r5
 801068e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010692:	f842 0f04 	str.w	r0, [r2, #4]!
 8010696:	3301      	adds	r3, #1
 8010698:	e7c5      	b.n	8010626 <__lshift+0x4a>
 801069a:	3904      	subs	r1, #4
 801069c:	f853 2b04 	ldr.w	r2, [r3], #4
 80106a0:	f841 2f04 	str.w	r2, [r1, #4]!
 80106a4:	459c      	cmp	ip, r3
 80106a6:	d8f9      	bhi.n	801069c <__lshift+0xc0>
 80106a8:	e7ea      	b.n	8010680 <__lshift+0xa4>
 80106aa:	bf00      	nop
 80106ac:	080112f8 	.word	0x080112f8
 80106b0:	08011309 	.word	0x08011309

080106b4 <__mcmp>:
 80106b4:	690a      	ldr	r2, [r1, #16]
 80106b6:	4603      	mov	r3, r0
 80106b8:	6900      	ldr	r0, [r0, #16]
 80106ba:	1a80      	subs	r0, r0, r2
 80106bc:	b530      	push	{r4, r5, lr}
 80106be:	d10e      	bne.n	80106de <__mcmp+0x2a>
 80106c0:	3314      	adds	r3, #20
 80106c2:	3114      	adds	r1, #20
 80106c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80106c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80106cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80106d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80106d4:	4295      	cmp	r5, r2
 80106d6:	d003      	beq.n	80106e0 <__mcmp+0x2c>
 80106d8:	d205      	bcs.n	80106e6 <__mcmp+0x32>
 80106da:	f04f 30ff 	mov.w	r0, #4294967295
 80106de:	bd30      	pop	{r4, r5, pc}
 80106e0:	42a3      	cmp	r3, r4
 80106e2:	d3f3      	bcc.n	80106cc <__mcmp+0x18>
 80106e4:	e7fb      	b.n	80106de <__mcmp+0x2a>
 80106e6:	2001      	movs	r0, #1
 80106e8:	e7f9      	b.n	80106de <__mcmp+0x2a>
	...

080106ec <__mdiff>:
 80106ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106f0:	4689      	mov	r9, r1
 80106f2:	4606      	mov	r6, r0
 80106f4:	4611      	mov	r1, r2
 80106f6:	4648      	mov	r0, r9
 80106f8:	4614      	mov	r4, r2
 80106fa:	f7ff ffdb 	bl	80106b4 <__mcmp>
 80106fe:	1e05      	subs	r5, r0, #0
 8010700:	d112      	bne.n	8010728 <__mdiff+0x3c>
 8010702:	4629      	mov	r1, r5
 8010704:	4630      	mov	r0, r6
 8010706:	f7ff fd5b 	bl	80101c0 <_Balloc>
 801070a:	4602      	mov	r2, r0
 801070c:	b928      	cbnz	r0, 801071a <__mdiff+0x2e>
 801070e:	4b3f      	ldr	r3, [pc, #252]	@ (801080c <__mdiff+0x120>)
 8010710:	f240 2137 	movw	r1, #567	@ 0x237
 8010714:	483e      	ldr	r0, [pc, #248]	@ (8010810 <__mdiff+0x124>)
 8010716:	f000 fb9b 	bl	8010e50 <__assert_func>
 801071a:	2301      	movs	r3, #1
 801071c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010720:	4610      	mov	r0, r2
 8010722:	b003      	add	sp, #12
 8010724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010728:	bfbc      	itt	lt
 801072a:	464b      	movlt	r3, r9
 801072c:	46a1      	movlt	r9, r4
 801072e:	4630      	mov	r0, r6
 8010730:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010734:	bfba      	itte	lt
 8010736:	461c      	movlt	r4, r3
 8010738:	2501      	movlt	r5, #1
 801073a:	2500      	movge	r5, #0
 801073c:	f7ff fd40 	bl	80101c0 <_Balloc>
 8010740:	4602      	mov	r2, r0
 8010742:	b918      	cbnz	r0, 801074c <__mdiff+0x60>
 8010744:	4b31      	ldr	r3, [pc, #196]	@ (801080c <__mdiff+0x120>)
 8010746:	f240 2145 	movw	r1, #581	@ 0x245
 801074a:	e7e3      	b.n	8010714 <__mdiff+0x28>
 801074c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010750:	6926      	ldr	r6, [r4, #16]
 8010752:	60c5      	str	r5, [r0, #12]
 8010754:	f109 0310 	add.w	r3, r9, #16
 8010758:	f109 0514 	add.w	r5, r9, #20
 801075c:	f104 0e14 	add.w	lr, r4, #20
 8010760:	f100 0b14 	add.w	fp, r0, #20
 8010764:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010768:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801076c:	9301      	str	r3, [sp, #4]
 801076e:	46d9      	mov	r9, fp
 8010770:	f04f 0c00 	mov.w	ip, #0
 8010774:	9b01      	ldr	r3, [sp, #4]
 8010776:	f85e 0b04 	ldr.w	r0, [lr], #4
 801077a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801077e:	9301      	str	r3, [sp, #4]
 8010780:	fa1f f38a 	uxth.w	r3, sl
 8010784:	4619      	mov	r1, r3
 8010786:	b283      	uxth	r3, r0
 8010788:	1acb      	subs	r3, r1, r3
 801078a:	0c00      	lsrs	r0, r0, #16
 801078c:	4463      	add	r3, ip
 801078e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010792:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010796:	b29b      	uxth	r3, r3
 8010798:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801079c:	4576      	cmp	r6, lr
 801079e:	f849 3b04 	str.w	r3, [r9], #4
 80107a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80107a6:	d8e5      	bhi.n	8010774 <__mdiff+0x88>
 80107a8:	1b33      	subs	r3, r6, r4
 80107aa:	3b15      	subs	r3, #21
 80107ac:	f023 0303 	bic.w	r3, r3, #3
 80107b0:	3415      	adds	r4, #21
 80107b2:	3304      	adds	r3, #4
 80107b4:	42a6      	cmp	r6, r4
 80107b6:	bf38      	it	cc
 80107b8:	2304      	movcc	r3, #4
 80107ba:	441d      	add	r5, r3
 80107bc:	445b      	add	r3, fp
 80107be:	461e      	mov	r6, r3
 80107c0:	462c      	mov	r4, r5
 80107c2:	4544      	cmp	r4, r8
 80107c4:	d30e      	bcc.n	80107e4 <__mdiff+0xf8>
 80107c6:	f108 0103 	add.w	r1, r8, #3
 80107ca:	1b49      	subs	r1, r1, r5
 80107cc:	f021 0103 	bic.w	r1, r1, #3
 80107d0:	3d03      	subs	r5, #3
 80107d2:	45a8      	cmp	r8, r5
 80107d4:	bf38      	it	cc
 80107d6:	2100      	movcc	r1, #0
 80107d8:	440b      	add	r3, r1
 80107da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80107de:	b191      	cbz	r1, 8010806 <__mdiff+0x11a>
 80107e0:	6117      	str	r7, [r2, #16]
 80107e2:	e79d      	b.n	8010720 <__mdiff+0x34>
 80107e4:	f854 1b04 	ldr.w	r1, [r4], #4
 80107e8:	46e6      	mov	lr, ip
 80107ea:	0c08      	lsrs	r0, r1, #16
 80107ec:	fa1c fc81 	uxtah	ip, ip, r1
 80107f0:	4471      	add	r1, lr
 80107f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80107f6:	b289      	uxth	r1, r1
 80107f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80107fc:	f846 1b04 	str.w	r1, [r6], #4
 8010800:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010804:	e7dd      	b.n	80107c2 <__mdiff+0xd6>
 8010806:	3f01      	subs	r7, #1
 8010808:	e7e7      	b.n	80107da <__mdiff+0xee>
 801080a:	bf00      	nop
 801080c:	080112f8 	.word	0x080112f8
 8010810:	08011309 	.word	0x08011309

08010814 <__d2b>:
 8010814:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010818:	460f      	mov	r7, r1
 801081a:	2101      	movs	r1, #1
 801081c:	ec59 8b10 	vmov	r8, r9, d0
 8010820:	4616      	mov	r6, r2
 8010822:	f7ff fccd 	bl	80101c0 <_Balloc>
 8010826:	4604      	mov	r4, r0
 8010828:	b930      	cbnz	r0, 8010838 <__d2b+0x24>
 801082a:	4602      	mov	r2, r0
 801082c:	4b23      	ldr	r3, [pc, #140]	@ (80108bc <__d2b+0xa8>)
 801082e:	4824      	ldr	r0, [pc, #144]	@ (80108c0 <__d2b+0xac>)
 8010830:	f240 310f 	movw	r1, #783	@ 0x30f
 8010834:	f000 fb0c 	bl	8010e50 <__assert_func>
 8010838:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801083c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010840:	b10d      	cbz	r5, 8010846 <__d2b+0x32>
 8010842:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010846:	9301      	str	r3, [sp, #4]
 8010848:	f1b8 0300 	subs.w	r3, r8, #0
 801084c:	d023      	beq.n	8010896 <__d2b+0x82>
 801084e:	4668      	mov	r0, sp
 8010850:	9300      	str	r3, [sp, #0]
 8010852:	f7ff fd7c 	bl	801034e <__lo0bits>
 8010856:	e9dd 1200 	ldrd	r1, r2, [sp]
 801085a:	b1d0      	cbz	r0, 8010892 <__d2b+0x7e>
 801085c:	f1c0 0320 	rsb	r3, r0, #32
 8010860:	fa02 f303 	lsl.w	r3, r2, r3
 8010864:	430b      	orrs	r3, r1
 8010866:	40c2      	lsrs	r2, r0
 8010868:	6163      	str	r3, [r4, #20]
 801086a:	9201      	str	r2, [sp, #4]
 801086c:	9b01      	ldr	r3, [sp, #4]
 801086e:	61a3      	str	r3, [r4, #24]
 8010870:	2b00      	cmp	r3, #0
 8010872:	bf0c      	ite	eq
 8010874:	2201      	moveq	r2, #1
 8010876:	2202      	movne	r2, #2
 8010878:	6122      	str	r2, [r4, #16]
 801087a:	b1a5      	cbz	r5, 80108a6 <__d2b+0x92>
 801087c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010880:	4405      	add	r5, r0
 8010882:	603d      	str	r5, [r7, #0]
 8010884:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010888:	6030      	str	r0, [r6, #0]
 801088a:	4620      	mov	r0, r4
 801088c:	b003      	add	sp, #12
 801088e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010892:	6161      	str	r1, [r4, #20]
 8010894:	e7ea      	b.n	801086c <__d2b+0x58>
 8010896:	a801      	add	r0, sp, #4
 8010898:	f7ff fd59 	bl	801034e <__lo0bits>
 801089c:	9b01      	ldr	r3, [sp, #4]
 801089e:	6163      	str	r3, [r4, #20]
 80108a0:	3020      	adds	r0, #32
 80108a2:	2201      	movs	r2, #1
 80108a4:	e7e8      	b.n	8010878 <__d2b+0x64>
 80108a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80108aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80108ae:	6038      	str	r0, [r7, #0]
 80108b0:	6918      	ldr	r0, [r3, #16]
 80108b2:	f7ff fd2d 	bl	8010310 <__hi0bits>
 80108b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80108ba:	e7e5      	b.n	8010888 <__d2b+0x74>
 80108bc:	080112f8 	.word	0x080112f8
 80108c0:	08011309 	.word	0x08011309

080108c4 <__sfputc_r>:
 80108c4:	6893      	ldr	r3, [r2, #8]
 80108c6:	3b01      	subs	r3, #1
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	b410      	push	{r4}
 80108cc:	6093      	str	r3, [r2, #8]
 80108ce:	da08      	bge.n	80108e2 <__sfputc_r+0x1e>
 80108d0:	6994      	ldr	r4, [r2, #24]
 80108d2:	42a3      	cmp	r3, r4
 80108d4:	db01      	blt.n	80108da <__sfputc_r+0x16>
 80108d6:	290a      	cmp	r1, #10
 80108d8:	d103      	bne.n	80108e2 <__sfputc_r+0x1e>
 80108da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80108de:	f000 ba13 	b.w	8010d08 <__swbuf_r>
 80108e2:	6813      	ldr	r3, [r2, #0]
 80108e4:	1c58      	adds	r0, r3, #1
 80108e6:	6010      	str	r0, [r2, #0]
 80108e8:	7019      	strb	r1, [r3, #0]
 80108ea:	4608      	mov	r0, r1
 80108ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80108f0:	4770      	bx	lr

080108f2 <__sfputs_r>:
 80108f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108f4:	4606      	mov	r6, r0
 80108f6:	460f      	mov	r7, r1
 80108f8:	4614      	mov	r4, r2
 80108fa:	18d5      	adds	r5, r2, r3
 80108fc:	42ac      	cmp	r4, r5
 80108fe:	d101      	bne.n	8010904 <__sfputs_r+0x12>
 8010900:	2000      	movs	r0, #0
 8010902:	e007      	b.n	8010914 <__sfputs_r+0x22>
 8010904:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010908:	463a      	mov	r2, r7
 801090a:	4630      	mov	r0, r6
 801090c:	f7ff ffda 	bl	80108c4 <__sfputc_r>
 8010910:	1c43      	adds	r3, r0, #1
 8010912:	d1f3      	bne.n	80108fc <__sfputs_r+0xa>
 8010914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010918 <_vfiprintf_r>:
 8010918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801091c:	460d      	mov	r5, r1
 801091e:	b09d      	sub	sp, #116	@ 0x74
 8010920:	4614      	mov	r4, r2
 8010922:	4698      	mov	r8, r3
 8010924:	4606      	mov	r6, r0
 8010926:	b118      	cbz	r0, 8010930 <_vfiprintf_r+0x18>
 8010928:	6a03      	ldr	r3, [r0, #32]
 801092a:	b90b      	cbnz	r3, 8010930 <_vfiprintf_r+0x18>
 801092c:	f7fe fbd8 	bl	800f0e0 <__sinit>
 8010930:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010932:	07d9      	lsls	r1, r3, #31
 8010934:	d405      	bmi.n	8010942 <_vfiprintf_r+0x2a>
 8010936:	89ab      	ldrh	r3, [r5, #12]
 8010938:	059a      	lsls	r2, r3, #22
 801093a:	d402      	bmi.n	8010942 <_vfiprintf_r+0x2a>
 801093c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801093e:	f7fe fce0 	bl	800f302 <__retarget_lock_acquire_recursive>
 8010942:	89ab      	ldrh	r3, [r5, #12]
 8010944:	071b      	lsls	r3, r3, #28
 8010946:	d501      	bpl.n	801094c <_vfiprintf_r+0x34>
 8010948:	692b      	ldr	r3, [r5, #16]
 801094a:	b99b      	cbnz	r3, 8010974 <_vfiprintf_r+0x5c>
 801094c:	4629      	mov	r1, r5
 801094e:	4630      	mov	r0, r6
 8010950:	f000 fa18 	bl	8010d84 <__swsetup_r>
 8010954:	b170      	cbz	r0, 8010974 <_vfiprintf_r+0x5c>
 8010956:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010958:	07dc      	lsls	r4, r3, #31
 801095a:	d504      	bpl.n	8010966 <_vfiprintf_r+0x4e>
 801095c:	f04f 30ff 	mov.w	r0, #4294967295
 8010960:	b01d      	add	sp, #116	@ 0x74
 8010962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010966:	89ab      	ldrh	r3, [r5, #12]
 8010968:	0598      	lsls	r0, r3, #22
 801096a:	d4f7      	bmi.n	801095c <_vfiprintf_r+0x44>
 801096c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801096e:	f7fe fcc9 	bl	800f304 <__retarget_lock_release_recursive>
 8010972:	e7f3      	b.n	801095c <_vfiprintf_r+0x44>
 8010974:	2300      	movs	r3, #0
 8010976:	9309      	str	r3, [sp, #36]	@ 0x24
 8010978:	2320      	movs	r3, #32
 801097a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801097e:	f8cd 800c 	str.w	r8, [sp, #12]
 8010982:	2330      	movs	r3, #48	@ 0x30
 8010984:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010b34 <_vfiprintf_r+0x21c>
 8010988:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801098c:	f04f 0901 	mov.w	r9, #1
 8010990:	4623      	mov	r3, r4
 8010992:	469a      	mov	sl, r3
 8010994:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010998:	b10a      	cbz	r2, 801099e <_vfiprintf_r+0x86>
 801099a:	2a25      	cmp	r2, #37	@ 0x25
 801099c:	d1f9      	bne.n	8010992 <_vfiprintf_r+0x7a>
 801099e:	ebba 0b04 	subs.w	fp, sl, r4
 80109a2:	d00b      	beq.n	80109bc <_vfiprintf_r+0xa4>
 80109a4:	465b      	mov	r3, fp
 80109a6:	4622      	mov	r2, r4
 80109a8:	4629      	mov	r1, r5
 80109aa:	4630      	mov	r0, r6
 80109ac:	f7ff ffa1 	bl	80108f2 <__sfputs_r>
 80109b0:	3001      	adds	r0, #1
 80109b2:	f000 80a7 	beq.w	8010b04 <_vfiprintf_r+0x1ec>
 80109b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80109b8:	445a      	add	r2, fp
 80109ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80109bc:	f89a 3000 	ldrb.w	r3, [sl]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	f000 809f 	beq.w	8010b04 <_vfiprintf_r+0x1ec>
 80109c6:	2300      	movs	r3, #0
 80109c8:	f04f 32ff 	mov.w	r2, #4294967295
 80109cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80109d0:	f10a 0a01 	add.w	sl, sl, #1
 80109d4:	9304      	str	r3, [sp, #16]
 80109d6:	9307      	str	r3, [sp, #28]
 80109d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80109dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80109de:	4654      	mov	r4, sl
 80109e0:	2205      	movs	r2, #5
 80109e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109e6:	4853      	ldr	r0, [pc, #332]	@ (8010b34 <_vfiprintf_r+0x21c>)
 80109e8:	f7ef fbca 	bl	8000180 <memchr>
 80109ec:	9a04      	ldr	r2, [sp, #16]
 80109ee:	b9d8      	cbnz	r0, 8010a28 <_vfiprintf_r+0x110>
 80109f0:	06d1      	lsls	r1, r2, #27
 80109f2:	bf44      	itt	mi
 80109f4:	2320      	movmi	r3, #32
 80109f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80109fa:	0713      	lsls	r3, r2, #28
 80109fc:	bf44      	itt	mi
 80109fe:	232b      	movmi	r3, #43	@ 0x2b
 8010a00:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010a04:	f89a 3000 	ldrb.w	r3, [sl]
 8010a08:	2b2a      	cmp	r3, #42	@ 0x2a
 8010a0a:	d015      	beq.n	8010a38 <_vfiprintf_r+0x120>
 8010a0c:	9a07      	ldr	r2, [sp, #28]
 8010a0e:	4654      	mov	r4, sl
 8010a10:	2000      	movs	r0, #0
 8010a12:	f04f 0c0a 	mov.w	ip, #10
 8010a16:	4621      	mov	r1, r4
 8010a18:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010a1c:	3b30      	subs	r3, #48	@ 0x30
 8010a1e:	2b09      	cmp	r3, #9
 8010a20:	d94b      	bls.n	8010aba <_vfiprintf_r+0x1a2>
 8010a22:	b1b0      	cbz	r0, 8010a52 <_vfiprintf_r+0x13a>
 8010a24:	9207      	str	r2, [sp, #28]
 8010a26:	e014      	b.n	8010a52 <_vfiprintf_r+0x13a>
 8010a28:	eba0 0308 	sub.w	r3, r0, r8
 8010a2c:	fa09 f303 	lsl.w	r3, r9, r3
 8010a30:	4313      	orrs	r3, r2
 8010a32:	9304      	str	r3, [sp, #16]
 8010a34:	46a2      	mov	sl, r4
 8010a36:	e7d2      	b.n	80109de <_vfiprintf_r+0xc6>
 8010a38:	9b03      	ldr	r3, [sp, #12]
 8010a3a:	1d19      	adds	r1, r3, #4
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	9103      	str	r1, [sp, #12]
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	bfbb      	ittet	lt
 8010a44:	425b      	neglt	r3, r3
 8010a46:	f042 0202 	orrlt.w	r2, r2, #2
 8010a4a:	9307      	strge	r3, [sp, #28]
 8010a4c:	9307      	strlt	r3, [sp, #28]
 8010a4e:	bfb8      	it	lt
 8010a50:	9204      	strlt	r2, [sp, #16]
 8010a52:	7823      	ldrb	r3, [r4, #0]
 8010a54:	2b2e      	cmp	r3, #46	@ 0x2e
 8010a56:	d10a      	bne.n	8010a6e <_vfiprintf_r+0x156>
 8010a58:	7863      	ldrb	r3, [r4, #1]
 8010a5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8010a5c:	d132      	bne.n	8010ac4 <_vfiprintf_r+0x1ac>
 8010a5e:	9b03      	ldr	r3, [sp, #12]
 8010a60:	1d1a      	adds	r2, r3, #4
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	9203      	str	r2, [sp, #12]
 8010a66:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010a6a:	3402      	adds	r4, #2
 8010a6c:	9305      	str	r3, [sp, #20]
 8010a6e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010b44 <_vfiprintf_r+0x22c>
 8010a72:	7821      	ldrb	r1, [r4, #0]
 8010a74:	2203      	movs	r2, #3
 8010a76:	4650      	mov	r0, sl
 8010a78:	f7ef fb82 	bl	8000180 <memchr>
 8010a7c:	b138      	cbz	r0, 8010a8e <_vfiprintf_r+0x176>
 8010a7e:	9b04      	ldr	r3, [sp, #16]
 8010a80:	eba0 000a 	sub.w	r0, r0, sl
 8010a84:	2240      	movs	r2, #64	@ 0x40
 8010a86:	4082      	lsls	r2, r0
 8010a88:	4313      	orrs	r3, r2
 8010a8a:	3401      	adds	r4, #1
 8010a8c:	9304      	str	r3, [sp, #16]
 8010a8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a92:	4829      	ldr	r0, [pc, #164]	@ (8010b38 <_vfiprintf_r+0x220>)
 8010a94:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010a98:	2206      	movs	r2, #6
 8010a9a:	f7ef fb71 	bl	8000180 <memchr>
 8010a9e:	2800      	cmp	r0, #0
 8010aa0:	d03f      	beq.n	8010b22 <_vfiprintf_r+0x20a>
 8010aa2:	4b26      	ldr	r3, [pc, #152]	@ (8010b3c <_vfiprintf_r+0x224>)
 8010aa4:	bb1b      	cbnz	r3, 8010aee <_vfiprintf_r+0x1d6>
 8010aa6:	9b03      	ldr	r3, [sp, #12]
 8010aa8:	3307      	adds	r3, #7
 8010aaa:	f023 0307 	bic.w	r3, r3, #7
 8010aae:	3308      	adds	r3, #8
 8010ab0:	9303      	str	r3, [sp, #12]
 8010ab2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ab4:	443b      	add	r3, r7
 8010ab6:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ab8:	e76a      	b.n	8010990 <_vfiprintf_r+0x78>
 8010aba:	fb0c 3202 	mla	r2, ip, r2, r3
 8010abe:	460c      	mov	r4, r1
 8010ac0:	2001      	movs	r0, #1
 8010ac2:	e7a8      	b.n	8010a16 <_vfiprintf_r+0xfe>
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	3401      	adds	r4, #1
 8010ac8:	9305      	str	r3, [sp, #20]
 8010aca:	4619      	mov	r1, r3
 8010acc:	f04f 0c0a 	mov.w	ip, #10
 8010ad0:	4620      	mov	r0, r4
 8010ad2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ad6:	3a30      	subs	r2, #48	@ 0x30
 8010ad8:	2a09      	cmp	r2, #9
 8010ada:	d903      	bls.n	8010ae4 <_vfiprintf_r+0x1cc>
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d0c6      	beq.n	8010a6e <_vfiprintf_r+0x156>
 8010ae0:	9105      	str	r1, [sp, #20]
 8010ae2:	e7c4      	b.n	8010a6e <_vfiprintf_r+0x156>
 8010ae4:	fb0c 2101 	mla	r1, ip, r1, r2
 8010ae8:	4604      	mov	r4, r0
 8010aea:	2301      	movs	r3, #1
 8010aec:	e7f0      	b.n	8010ad0 <_vfiprintf_r+0x1b8>
 8010aee:	ab03      	add	r3, sp, #12
 8010af0:	9300      	str	r3, [sp, #0]
 8010af2:	462a      	mov	r2, r5
 8010af4:	4b12      	ldr	r3, [pc, #72]	@ (8010b40 <_vfiprintf_r+0x228>)
 8010af6:	a904      	add	r1, sp, #16
 8010af8:	4630      	mov	r0, r6
 8010afa:	f7fd fead 	bl	800e858 <_printf_float>
 8010afe:	4607      	mov	r7, r0
 8010b00:	1c78      	adds	r0, r7, #1
 8010b02:	d1d6      	bne.n	8010ab2 <_vfiprintf_r+0x19a>
 8010b04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010b06:	07d9      	lsls	r1, r3, #31
 8010b08:	d405      	bmi.n	8010b16 <_vfiprintf_r+0x1fe>
 8010b0a:	89ab      	ldrh	r3, [r5, #12]
 8010b0c:	059a      	lsls	r2, r3, #22
 8010b0e:	d402      	bmi.n	8010b16 <_vfiprintf_r+0x1fe>
 8010b10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010b12:	f7fe fbf7 	bl	800f304 <__retarget_lock_release_recursive>
 8010b16:	89ab      	ldrh	r3, [r5, #12]
 8010b18:	065b      	lsls	r3, r3, #25
 8010b1a:	f53f af1f 	bmi.w	801095c <_vfiprintf_r+0x44>
 8010b1e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010b20:	e71e      	b.n	8010960 <_vfiprintf_r+0x48>
 8010b22:	ab03      	add	r3, sp, #12
 8010b24:	9300      	str	r3, [sp, #0]
 8010b26:	462a      	mov	r2, r5
 8010b28:	4b05      	ldr	r3, [pc, #20]	@ (8010b40 <_vfiprintf_r+0x228>)
 8010b2a:	a904      	add	r1, sp, #16
 8010b2c:	4630      	mov	r0, r6
 8010b2e:	f7fe f92b 	bl	800ed88 <_printf_i>
 8010b32:	e7e4      	b.n	8010afe <_vfiprintf_r+0x1e6>
 8010b34:	08011460 	.word	0x08011460
 8010b38:	0801146a 	.word	0x0801146a
 8010b3c:	0800e859 	.word	0x0800e859
 8010b40:	080108f3 	.word	0x080108f3
 8010b44:	08011466 	.word	0x08011466

08010b48 <__sflush_r>:
 8010b48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b50:	0716      	lsls	r6, r2, #28
 8010b52:	4605      	mov	r5, r0
 8010b54:	460c      	mov	r4, r1
 8010b56:	d454      	bmi.n	8010c02 <__sflush_r+0xba>
 8010b58:	684b      	ldr	r3, [r1, #4]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	dc02      	bgt.n	8010b64 <__sflush_r+0x1c>
 8010b5e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	dd48      	ble.n	8010bf6 <__sflush_r+0xae>
 8010b64:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010b66:	2e00      	cmp	r6, #0
 8010b68:	d045      	beq.n	8010bf6 <__sflush_r+0xae>
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010b70:	682f      	ldr	r7, [r5, #0]
 8010b72:	6a21      	ldr	r1, [r4, #32]
 8010b74:	602b      	str	r3, [r5, #0]
 8010b76:	d030      	beq.n	8010bda <__sflush_r+0x92>
 8010b78:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010b7a:	89a3      	ldrh	r3, [r4, #12]
 8010b7c:	0759      	lsls	r1, r3, #29
 8010b7e:	d505      	bpl.n	8010b8c <__sflush_r+0x44>
 8010b80:	6863      	ldr	r3, [r4, #4]
 8010b82:	1ad2      	subs	r2, r2, r3
 8010b84:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010b86:	b10b      	cbz	r3, 8010b8c <__sflush_r+0x44>
 8010b88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010b8a:	1ad2      	subs	r2, r2, r3
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010b90:	6a21      	ldr	r1, [r4, #32]
 8010b92:	4628      	mov	r0, r5
 8010b94:	47b0      	blx	r6
 8010b96:	1c43      	adds	r3, r0, #1
 8010b98:	89a3      	ldrh	r3, [r4, #12]
 8010b9a:	d106      	bne.n	8010baa <__sflush_r+0x62>
 8010b9c:	6829      	ldr	r1, [r5, #0]
 8010b9e:	291d      	cmp	r1, #29
 8010ba0:	d82b      	bhi.n	8010bfa <__sflush_r+0xb2>
 8010ba2:	4a2a      	ldr	r2, [pc, #168]	@ (8010c4c <__sflush_r+0x104>)
 8010ba4:	410a      	asrs	r2, r1
 8010ba6:	07d6      	lsls	r6, r2, #31
 8010ba8:	d427      	bmi.n	8010bfa <__sflush_r+0xb2>
 8010baa:	2200      	movs	r2, #0
 8010bac:	6062      	str	r2, [r4, #4]
 8010bae:	04d9      	lsls	r1, r3, #19
 8010bb0:	6922      	ldr	r2, [r4, #16]
 8010bb2:	6022      	str	r2, [r4, #0]
 8010bb4:	d504      	bpl.n	8010bc0 <__sflush_r+0x78>
 8010bb6:	1c42      	adds	r2, r0, #1
 8010bb8:	d101      	bne.n	8010bbe <__sflush_r+0x76>
 8010bba:	682b      	ldr	r3, [r5, #0]
 8010bbc:	b903      	cbnz	r3, 8010bc0 <__sflush_r+0x78>
 8010bbe:	6560      	str	r0, [r4, #84]	@ 0x54
 8010bc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010bc2:	602f      	str	r7, [r5, #0]
 8010bc4:	b1b9      	cbz	r1, 8010bf6 <__sflush_r+0xae>
 8010bc6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010bca:	4299      	cmp	r1, r3
 8010bcc:	d002      	beq.n	8010bd4 <__sflush_r+0x8c>
 8010bce:	4628      	mov	r0, r5
 8010bd0:	f7ff f9f6 	bl	800ffc0 <_free_r>
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	6363      	str	r3, [r4, #52]	@ 0x34
 8010bd8:	e00d      	b.n	8010bf6 <__sflush_r+0xae>
 8010bda:	2301      	movs	r3, #1
 8010bdc:	4628      	mov	r0, r5
 8010bde:	47b0      	blx	r6
 8010be0:	4602      	mov	r2, r0
 8010be2:	1c50      	adds	r0, r2, #1
 8010be4:	d1c9      	bne.n	8010b7a <__sflush_r+0x32>
 8010be6:	682b      	ldr	r3, [r5, #0]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d0c6      	beq.n	8010b7a <__sflush_r+0x32>
 8010bec:	2b1d      	cmp	r3, #29
 8010bee:	d001      	beq.n	8010bf4 <__sflush_r+0xac>
 8010bf0:	2b16      	cmp	r3, #22
 8010bf2:	d11e      	bne.n	8010c32 <__sflush_r+0xea>
 8010bf4:	602f      	str	r7, [r5, #0]
 8010bf6:	2000      	movs	r0, #0
 8010bf8:	e022      	b.n	8010c40 <__sflush_r+0xf8>
 8010bfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010bfe:	b21b      	sxth	r3, r3
 8010c00:	e01b      	b.n	8010c3a <__sflush_r+0xf2>
 8010c02:	690f      	ldr	r7, [r1, #16]
 8010c04:	2f00      	cmp	r7, #0
 8010c06:	d0f6      	beq.n	8010bf6 <__sflush_r+0xae>
 8010c08:	0793      	lsls	r3, r2, #30
 8010c0a:	680e      	ldr	r6, [r1, #0]
 8010c0c:	bf08      	it	eq
 8010c0e:	694b      	ldreq	r3, [r1, #20]
 8010c10:	600f      	str	r7, [r1, #0]
 8010c12:	bf18      	it	ne
 8010c14:	2300      	movne	r3, #0
 8010c16:	eba6 0807 	sub.w	r8, r6, r7
 8010c1a:	608b      	str	r3, [r1, #8]
 8010c1c:	f1b8 0f00 	cmp.w	r8, #0
 8010c20:	dde9      	ble.n	8010bf6 <__sflush_r+0xae>
 8010c22:	6a21      	ldr	r1, [r4, #32]
 8010c24:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010c26:	4643      	mov	r3, r8
 8010c28:	463a      	mov	r2, r7
 8010c2a:	4628      	mov	r0, r5
 8010c2c:	47b0      	blx	r6
 8010c2e:	2800      	cmp	r0, #0
 8010c30:	dc08      	bgt.n	8010c44 <__sflush_r+0xfc>
 8010c32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c3a:	81a3      	strh	r3, [r4, #12]
 8010c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8010c40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c44:	4407      	add	r7, r0
 8010c46:	eba8 0800 	sub.w	r8, r8, r0
 8010c4a:	e7e7      	b.n	8010c1c <__sflush_r+0xd4>
 8010c4c:	dfbffffe 	.word	0xdfbffffe

08010c50 <_fflush_r>:
 8010c50:	b538      	push	{r3, r4, r5, lr}
 8010c52:	690b      	ldr	r3, [r1, #16]
 8010c54:	4605      	mov	r5, r0
 8010c56:	460c      	mov	r4, r1
 8010c58:	b913      	cbnz	r3, 8010c60 <_fflush_r+0x10>
 8010c5a:	2500      	movs	r5, #0
 8010c5c:	4628      	mov	r0, r5
 8010c5e:	bd38      	pop	{r3, r4, r5, pc}
 8010c60:	b118      	cbz	r0, 8010c6a <_fflush_r+0x1a>
 8010c62:	6a03      	ldr	r3, [r0, #32]
 8010c64:	b90b      	cbnz	r3, 8010c6a <_fflush_r+0x1a>
 8010c66:	f7fe fa3b 	bl	800f0e0 <__sinit>
 8010c6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d0f3      	beq.n	8010c5a <_fflush_r+0xa>
 8010c72:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010c74:	07d0      	lsls	r0, r2, #31
 8010c76:	d404      	bmi.n	8010c82 <_fflush_r+0x32>
 8010c78:	0599      	lsls	r1, r3, #22
 8010c7a:	d402      	bmi.n	8010c82 <_fflush_r+0x32>
 8010c7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010c7e:	f7fe fb40 	bl	800f302 <__retarget_lock_acquire_recursive>
 8010c82:	4628      	mov	r0, r5
 8010c84:	4621      	mov	r1, r4
 8010c86:	f7ff ff5f 	bl	8010b48 <__sflush_r>
 8010c8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010c8c:	07da      	lsls	r2, r3, #31
 8010c8e:	4605      	mov	r5, r0
 8010c90:	d4e4      	bmi.n	8010c5c <_fflush_r+0xc>
 8010c92:	89a3      	ldrh	r3, [r4, #12]
 8010c94:	059b      	lsls	r3, r3, #22
 8010c96:	d4e1      	bmi.n	8010c5c <_fflush_r+0xc>
 8010c98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010c9a:	f7fe fb33 	bl	800f304 <__retarget_lock_release_recursive>
 8010c9e:	e7dd      	b.n	8010c5c <_fflush_r+0xc>

08010ca0 <_putc_r>:
 8010ca0:	b570      	push	{r4, r5, r6, lr}
 8010ca2:	460d      	mov	r5, r1
 8010ca4:	4614      	mov	r4, r2
 8010ca6:	4606      	mov	r6, r0
 8010ca8:	b118      	cbz	r0, 8010cb2 <_putc_r+0x12>
 8010caa:	6a03      	ldr	r3, [r0, #32]
 8010cac:	b90b      	cbnz	r3, 8010cb2 <_putc_r+0x12>
 8010cae:	f7fe fa17 	bl	800f0e0 <__sinit>
 8010cb2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010cb4:	07d8      	lsls	r0, r3, #31
 8010cb6:	d405      	bmi.n	8010cc4 <_putc_r+0x24>
 8010cb8:	89a3      	ldrh	r3, [r4, #12]
 8010cba:	0599      	lsls	r1, r3, #22
 8010cbc:	d402      	bmi.n	8010cc4 <_putc_r+0x24>
 8010cbe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010cc0:	f7fe fb1f 	bl	800f302 <__retarget_lock_acquire_recursive>
 8010cc4:	68a3      	ldr	r3, [r4, #8]
 8010cc6:	3b01      	subs	r3, #1
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	60a3      	str	r3, [r4, #8]
 8010ccc:	da05      	bge.n	8010cda <_putc_r+0x3a>
 8010cce:	69a2      	ldr	r2, [r4, #24]
 8010cd0:	4293      	cmp	r3, r2
 8010cd2:	db12      	blt.n	8010cfa <_putc_r+0x5a>
 8010cd4:	b2eb      	uxtb	r3, r5
 8010cd6:	2b0a      	cmp	r3, #10
 8010cd8:	d00f      	beq.n	8010cfa <_putc_r+0x5a>
 8010cda:	6823      	ldr	r3, [r4, #0]
 8010cdc:	1c5a      	adds	r2, r3, #1
 8010cde:	6022      	str	r2, [r4, #0]
 8010ce0:	701d      	strb	r5, [r3, #0]
 8010ce2:	b2ed      	uxtb	r5, r5
 8010ce4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010ce6:	07da      	lsls	r2, r3, #31
 8010ce8:	d405      	bmi.n	8010cf6 <_putc_r+0x56>
 8010cea:	89a3      	ldrh	r3, [r4, #12]
 8010cec:	059b      	lsls	r3, r3, #22
 8010cee:	d402      	bmi.n	8010cf6 <_putc_r+0x56>
 8010cf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010cf2:	f7fe fb07 	bl	800f304 <__retarget_lock_release_recursive>
 8010cf6:	4628      	mov	r0, r5
 8010cf8:	bd70      	pop	{r4, r5, r6, pc}
 8010cfa:	4629      	mov	r1, r5
 8010cfc:	4622      	mov	r2, r4
 8010cfe:	4630      	mov	r0, r6
 8010d00:	f000 f802 	bl	8010d08 <__swbuf_r>
 8010d04:	4605      	mov	r5, r0
 8010d06:	e7ed      	b.n	8010ce4 <_putc_r+0x44>

08010d08 <__swbuf_r>:
 8010d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d0a:	460e      	mov	r6, r1
 8010d0c:	4614      	mov	r4, r2
 8010d0e:	4605      	mov	r5, r0
 8010d10:	b118      	cbz	r0, 8010d1a <__swbuf_r+0x12>
 8010d12:	6a03      	ldr	r3, [r0, #32]
 8010d14:	b90b      	cbnz	r3, 8010d1a <__swbuf_r+0x12>
 8010d16:	f7fe f9e3 	bl	800f0e0 <__sinit>
 8010d1a:	69a3      	ldr	r3, [r4, #24]
 8010d1c:	60a3      	str	r3, [r4, #8]
 8010d1e:	89a3      	ldrh	r3, [r4, #12]
 8010d20:	071a      	lsls	r2, r3, #28
 8010d22:	d501      	bpl.n	8010d28 <__swbuf_r+0x20>
 8010d24:	6923      	ldr	r3, [r4, #16]
 8010d26:	b943      	cbnz	r3, 8010d3a <__swbuf_r+0x32>
 8010d28:	4621      	mov	r1, r4
 8010d2a:	4628      	mov	r0, r5
 8010d2c:	f000 f82a 	bl	8010d84 <__swsetup_r>
 8010d30:	b118      	cbz	r0, 8010d3a <__swbuf_r+0x32>
 8010d32:	f04f 37ff 	mov.w	r7, #4294967295
 8010d36:	4638      	mov	r0, r7
 8010d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d3a:	6823      	ldr	r3, [r4, #0]
 8010d3c:	6922      	ldr	r2, [r4, #16]
 8010d3e:	1a98      	subs	r0, r3, r2
 8010d40:	6963      	ldr	r3, [r4, #20]
 8010d42:	b2f6      	uxtb	r6, r6
 8010d44:	4283      	cmp	r3, r0
 8010d46:	4637      	mov	r7, r6
 8010d48:	dc05      	bgt.n	8010d56 <__swbuf_r+0x4e>
 8010d4a:	4621      	mov	r1, r4
 8010d4c:	4628      	mov	r0, r5
 8010d4e:	f7ff ff7f 	bl	8010c50 <_fflush_r>
 8010d52:	2800      	cmp	r0, #0
 8010d54:	d1ed      	bne.n	8010d32 <__swbuf_r+0x2a>
 8010d56:	68a3      	ldr	r3, [r4, #8]
 8010d58:	3b01      	subs	r3, #1
 8010d5a:	60a3      	str	r3, [r4, #8]
 8010d5c:	6823      	ldr	r3, [r4, #0]
 8010d5e:	1c5a      	adds	r2, r3, #1
 8010d60:	6022      	str	r2, [r4, #0]
 8010d62:	701e      	strb	r6, [r3, #0]
 8010d64:	6962      	ldr	r2, [r4, #20]
 8010d66:	1c43      	adds	r3, r0, #1
 8010d68:	429a      	cmp	r2, r3
 8010d6a:	d004      	beq.n	8010d76 <__swbuf_r+0x6e>
 8010d6c:	89a3      	ldrh	r3, [r4, #12]
 8010d6e:	07db      	lsls	r3, r3, #31
 8010d70:	d5e1      	bpl.n	8010d36 <__swbuf_r+0x2e>
 8010d72:	2e0a      	cmp	r6, #10
 8010d74:	d1df      	bne.n	8010d36 <__swbuf_r+0x2e>
 8010d76:	4621      	mov	r1, r4
 8010d78:	4628      	mov	r0, r5
 8010d7a:	f7ff ff69 	bl	8010c50 <_fflush_r>
 8010d7e:	2800      	cmp	r0, #0
 8010d80:	d0d9      	beq.n	8010d36 <__swbuf_r+0x2e>
 8010d82:	e7d6      	b.n	8010d32 <__swbuf_r+0x2a>

08010d84 <__swsetup_r>:
 8010d84:	b538      	push	{r3, r4, r5, lr}
 8010d86:	4b29      	ldr	r3, [pc, #164]	@ (8010e2c <__swsetup_r+0xa8>)
 8010d88:	4605      	mov	r5, r0
 8010d8a:	6818      	ldr	r0, [r3, #0]
 8010d8c:	460c      	mov	r4, r1
 8010d8e:	b118      	cbz	r0, 8010d98 <__swsetup_r+0x14>
 8010d90:	6a03      	ldr	r3, [r0, #32]
 8010d92:	b90b      	cbnz	r3, 8010d98 <__swsetup_r+0x14>
 8010d94:	f7fe f9a4 	bl	800f0e0 <__sinit>
 8010d98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d9c:	0719      	lsls	r1, r3, #28
 8010d9e:	d422      	bmi.n	8010de6 <__swsetup_r+0x62>
 8010da0:	06da      	lsls	r2, r3, #27
 8010da2:	d407      	bmi.n	8010db4 <__swsetup_r+0x30>
 8010da4:	2209      	movs	r2, #9
 8010da6:	602a      	str	r2, [r5, #0]
 8010da8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010dac:	81a3      	strh	r3, [r4, #12]
 8010dae:	f04f 30ff 	mov.w	r0, #4294967295
 8010db2:	e033      	b.n	8010e1c <__swsetup_r+0x98>
 8010db4:	0758      	lsls	r0, r3, #29
 8010db6:	d512      	bpl.n	8010dde <__swsetup_r+0x5a>
 8010db8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010dba:	b141      	cbz	r1, 8010dce <__swsetup_r+0x4a>
 8010dbc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010dc0:	4299      	cmp	r1, r3
 8010dc2:	d002      	beq.n	8010dca <__swsetup_r+0x46>
 8010dc4:	4628      	mov	r0, r5
 8010dc6:	f7ff f8fb 	bl	800ffc0 <_free_r>
 8010dca:	2300      	movs	r3, #0
 8010dcc:	6363      	str	r3, [r4, #52]	@ 0x34
 8010dce:	89a3      	ldrh	r3, [r4, #12]
 8010dd0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010dd4:	81a3      	strh	r3, [r4, #12]
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	6063      	str	r3, [r4, #4]
 8010dda:	6923      	ldr	r3, [r4, #16]
 8010ddc:	6023      	str	r3, [r4, #0]
 8010dde:	89a3      	ldrh	r3, [r4, #12]
 8010de0:	f043 0308 	orr.w	r3, r3, #8
 8010de4:	81a3      	strh	r3, [r4, #12]
 8010de6:	6923      	ldr	r3, [r4, #16]
 8010de8:	b94b      	cbnz	r3, 8010dfe <__swsetup_r+0x7a>
 8010dea:	89a3      	ldrh	r3, [r4, #12]
 8010dec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010df0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010df4:	d003      	beq.n	8010dfe <__swsetup_r+0x7a>
 8010df6:	4621      	mov	r1, r4
 8010df8:	4628      	mov	r0, r5
 8010dfa:	f000 f8b3 	bl	8010f64 <__smakebuf_r>
 8010dfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e02:	f013 0201 	ands.w	r2, r3, #1
 8010e06:	d00a      	beq.n	8010e1e <__swsetup_r+0x9a>
 8010e08:	2200      	movs	r2, #0
 8010e0a:	60a2      	str	r2, [r4, #8]
 8010e0c:	6962      	ldr	r2, [r4, #20]
 8010e0e:	4252      	negs	r2, r2
 8010e10:	61a2      	str	r2, [r4, #24]
 8010e12:	6922      	ldr	r2, [r4, #16]
 8010e14:	b942      	cbnz	r2, 8010e28 <__swsetup_r+0xa4>
 8010e16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010e1a:	d1c5      	bne.n	8010da8 <__swsetup_r+0x24>
 8010e1c:	bd38      	pop	{r3, r4, r5, pc}
 8010e1e:	0799      	lsls	r1, r3, #30
 8010e20:	bf58      	it	pl
 8010e22:	6962      	ldrpl	r2, [r4, #20]
 8010e24:	60a2      	str	r2, [r4, #8]
 8010e26:	e7f4      	b.n	8010e12 <__swsetup_r+0x8e>
 8010e28:	2000      	movs	r0, #0
 8010e2a:	e7f7      	b.n	8010e1c <__swsetup_r+0x98>
 8010e2c:	20000130 	.word	0x20000130

08010e30 <_sbrk_r>:
 8010e30:	b538      	push	{r3, r4, r5, lr}
 8010e32:	4d06      	ldr	r5, [pc, #24]	@ (8010e4c <_sbrk_r+0x1c>)
 8010e34:	2300      	movs	r3, #0
 8010e36:	4604      	mov	r4, r0
 8010e38:	4608      	mov	r0, r1
 8010e3a:	602b      	str	r3, [r5, #0]
 8010e3c:	f7f0 fd10 	bl	8001860 <_sbrk>
 8010e40:	1c43      	adds	r3, r0, #1
 8010e42:	d102      	bne.n	8010e4a <_sbrk_r+0x1a>
 8010e44:	682b      	ldr	r3, [r5, #0]
 8010e46:	b103      	cbz	r3, 8010e4a <_sbrk_r+0x1a>
 8010e48:	6023      	str	r3, [r4, #0]
 8010e4a:	bd38      	pop	{r3, r4, r5, pc}
 8010e4c:	20002068 	.word	0x20002068

08010e50 <__assert_func>:
 8010e50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010e52:	4614      	mov	r4, r2
 8010e54:	461a      	mov	r2, r3
 8010e56:	4b09      	ldr	r3, [pc, #36]	@ (8010e7c <__assert_func+0x2c>)
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	4605      	mov	r5, r0
 8010e5c:	68d8      	ldr	r0, [r3, #12]
 8010e5e:	b954      	cbnz	r4, 8010e76 <__assert_func+0x26>
 8010e60:	4b07      	ldr	r3, [pc, #28]	@ (8010e80 <__assert_func+0x30>)
 8010e62:	461c      	mov	r4, r3
 8010e64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010e68:	9100      	str	r1, [sp, #0]
 8010e6a:	462b      	mov	r3, r5
 8010e6c:	4905      	ldr	r1, [pc, #20]	@ (8010e84 <__assert_func+0x34>)
 8010e6e:	f000 f841 	bl	8010ef4 <fiprintf>
 8010e72:	f000 f8d5 	bl	8011020 <abort>
 8010e76:	4b04      	ldr	r3, [pc, #16]	@ (8010e88 <__assert_func+0x38>)
 8010e78:	e7f4      	b.n	8010e64 <__assert_func+0x14>
 8010e7a:	bf00      	nop
 8010e7c:	20000130 	.word	0x20000130
 8010e80:	080114b6 	.word	0x080114b6
 8010e84:	08011488 	.word	0x08011488
 8010e88:	0801147b 	.word	0x0801147b

08010e8c <_calloc_r>:
 8010e8c:	b570      	push	{r4, r5, r6, lr}
 8010e8e:	fba1 5402 	umull	r5, r4, r1, r2
 8010e92:	b93c      	cbnz	r4, 8010ea4 <_calloc_r+0x18>
 8010e94:	4629      	mov	r1, r5
 8010e96:	f7ff f907 	bl	80100a8 <_malloc_r>
 8010e9a:	4606      	mov	r6, r0
 8010e9c:	b928      	cbnz	r0, 8010eaa <_calloc_r+0x1e>
 8010e9e:	2600      	movs	r6, #0
 8010ea0:	4630      	mov	r0, r6
 8010ea2:	bd70      	pop	{r4, r5, r6, pc}
 8010ea4:	220c      	movs	r2, #12
 8010ea6:	6002      	str	r2, [r0, #0]
 8010ea8:	e7f9      	b.n	8010e9e <_calloc_r+0x12>
 8010eaa:	462a      	mov	r2, r5
 8010eac:	4621      	mov	r1, r4
 8010eae:	f7fe f9aa 	bl	800f206 <memset>
 8010eb2:	e7f5      	b.n	8010ea0 <_calloc_r+0x14>

08010eb4 <__ascii_mbtowc>:
 8010eb4:	b082      	sub	sp, #8
 8010eb6:	b901      	cbnz	r1, 8010eba <__ascii_mbtowc+0x6>
 8010eb8:	a901      	add	r1, sp, #4
 8010eba:	b142      	cbz	r2, 8010ece <__ascii_mbtowc+0x1a>
 8010ebc:	b14b      	cbz	r3, 8010ed2 <__ascii_mbtowc+0x1e>
 8010ebe:	7813      	ldrb	r3, [r2, #0]
 8010ec0:	600b      	str	r3, [r1, #0]
 8010ec2:	7812      	ldrb	r2, [r2, #0]
 8010ec4:	1e10      	subs	r0, r2, #0
 8010ec6:	bf18      	it	ne
 8010ec8:	2001      	movne	r0, #1
 8010eca:	b002      	add	sp, #8
 8010ecc:	4770      	bx	lr
 8010ece:	4610      	mov	r0, r2
 8010ed0:	e7fb      	b.n	8010eca <__ascii_mbtowc+0x16>
 8010ed2:	f06f 0001 	mvn.w	r0, #1
 8010ed6:	e7f8      	b.n	8010eca <__ascii_mbtowc+0x16>

08010ed8 <__ascii_wctomb>:
 8010ed8:	4603      	mov	r3, r0
 8010eda:	4608      	mov	r0, r1
 8010edc:	b141      	cbz	r1, 8010ef0 <__ascii_wctomb+0x18>
 8010ede:	2aff      	cmp	r2, #255	@ 0xff
 8010ee0:	d904      	bls.n	8010eec <__ascii_wctomb+0x14>
 8010ee2:	228a      	movs	r2, #138	@ 0x8a
 8010ee4:	601a      	str	r2, [r3, #0]
 8010ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8010eea:	4770      	bx	lr
 8010eec:	700a      	strb	r2, [r1, #0]
 8010eee:	2001      	movs	r0, #1
 8010ef0:	4770      	bx	lr
	...

08010ef4 <fiprintf>:
 8010ef4:	b40e      	push	{r1, r2, r3}
 8010ef6:	b503      	push	{r0, r1, lr}
 8010ef8:	4601      	mov	r1, r0
 8010efa:	ab03      	add	r3, sp, #12
 8010efc:	4805      	ldr	r0, [pc, #20]	@ (8010f14 <fiprintf+0x20>)
 8010efe:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f02:	6800      	ldr	r0, [r0, #0]
 8010f04:	9301      	str	r3, [sp, #4]
 8010f06:	f7ff fd07 	bl	8010918 <_vfiprintf_r>
 8010f0a:	b002      	add	sp, #8
 8010f0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f10:	b003      	add	sp, #12
 8010f12:	4770      	bx	lr
 8010f14:	20000130 	.word	0x20000130

08010f18 <__swhatbuf_r>:
 8010f18:	b570      	push	{r4, r5, r6, lr}
 8010f1a:	460c      	mov	r4, r1
 8010f1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f20:	2900      	cmp	r1, #0
 8010f22:	b096      	sub	sp, #88	@ 0x58
 8010f24:	4615      	mov	r5, r2
 8010f26:	461e      	mov	r6, r3
 8010f28:	da0d      	bge.n	8010f46 <__swhatbuf_r+0x2e>
 8010f2a:	89a3      	ldrh	r3, [r4, #12]
 8010f2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010f30:	f04f 0100 	mov.w	r1, #0
 8010f34:	bf14      	ite	ne
 8010f36:	2340      	movne	r3, #64	@ 0x40
 8010f38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010f3c:	2000      	movs	r0, #0
 8010f3e:	6031      	str	r1, [r6, #0]
 8010f40:	602b      	str	r3, [r5, #0]
 8010f42:	b016      	add	sp, #88	@ 0x58
 8010f44:	bd70      	pop	{r4, r5, r6, pc}
 8010f46:	466a      	mov	r2, sp
 8010f48:	f000 f848 	bl	8010fdc <_fstat_r>
 8010f4c:	2800      	cmp	r0, #0
 8010f4e:	dbec      	blt.n	8010f2a <__swhatbuf_r+0x12>
 8010f50:	9901      	ldr	r1, [sp, #4]
 8010f52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010f56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010f5a:	4259      	negs	r1, r3
 8010f5c:	4159      	adcs	r1, r3
 8010f5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010f62:	e7eb      	b.n	8010f3c <__swhatbuf_r+0x24>

08010f64 <__smakebuf_r>:
 8010f64:	898b      	ldrh	r3, [r1, #12]
 8010f66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010f68:	079d      	lsls	r5, r3, #30
 8010f6a:	4606      	mov	r6, r0
 8010f6c:	460c      	mov	r4, r1
 8010f6e:	d507      	bpl.n	8010f80 <__smakebuf_r+0x1c>
 8010f70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010f74:	6023      	str	r3, [r4, #0]
 8010f76:	6123      	str	r3, [r4, #16]
 8010f78:	2301      	movs	r3, #1
 8010f7a:	6163      	str	r3, [r4, #20]
 8010f7c:	b003      	add	sp, #12
 8010f7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f80:	ab01      	add	r3, sp, #4
 8010f82:	466a      	mov	r2, sp
 8010f84:	f7ff ffc8 	bl	8010f18 <__swhatbuf_r>
 8010f88:	9f00      	ldr	r7, [sp, #0]
 8010f8a:	4605      	mov	r5, r0
 8010f8c:	4639      	mov	r1, r7
 8010f8e:	4630      	mov	r0, r6
 8010f90:	f7ff f88a 	bl	80100a8 <_malloc_r>
 8010f94:	b948      	cbnz	r0, 8010faa <__smakebuf_r+0x46>
 8010f96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f9a:	059a      	lsls	r2, r3, #22
 8010f9c:	d4ee      	bmi.n	8010f7c <__smakebuf_r+0x18>
 8010f9e:	f023 0303 	bic.w	r3, r3, #3
 8010fa2:	f043 0302 	orr.w	r3, r3, #2
 8010fa6:	81a3      	strh	r3, [r4, #12]
 8010fa8:	e7e2      	b.n	8010f70 <__smakebuf_r+0xc>
 8010faa:	89a3      	ldrh	r3, [r4, #12]
 8010fac:	6020      	str	r0, [r4, #0]
 8010fae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010fb2:	81a3      	strh	r3, [r4, #12]
 8010fb4:	9b01      	ldr	r3, [sp, #4]
 8010fb6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010fba:	b15b      	cbz	r3, 8010fd4 <__smakebuf_r+0x70>
 8010fbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010fc0:	4630      	mov	r0, r6
 8010fc2:	f000 f81d 	bl	8011000 <_isatty_r>
 8010fc6:	b128      	cbz	r0, 8010fd4 <__smakebuf_r+0x70>
 8010fc8:	89a3      	ldrh	r3, [r4, #12]
 8010fca:	f023 0303 	bic.w	r3, r3, #3
 8010fce:	f043 0301 	orr.w	r3, r3, #1
 8010fd2:	81a3      	strh	r3, [r4, #12]
 8010fd4:	89a3      	ldrh	r3, [r4, #12]
 8010fd6:	431d      	orrs	r5, r3
 8010fd8:	81a5      	strh	r5, [r4, #12]
 8010fda:	e7cf      	b.n	8010f7c <__smakebuf_r+0x18>

08010fdc <_fstat_r>:
 8010fdc:	b538      	push	{r3, r4, r5, lr}
 8010fde:	4d07      	ldr	r5, [pc, #28]	@ (8010ffc <_fstat_r+0x20>)
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	4604      	mov	r4, r0
 8010fe4:	4608      	mov	r0, r1
 8010fe6:	4611      	mov	r1, r2
 8010fe8:	602b      	str	r3, [r5, #0]
 8010fea:	f7f0 fc11 	bl	8001810 <_fstat>
 8010fee:	1c43      	adds	r3, r0, #1
 8010ff0:	d102      	bne.n	8010ff8 <_fstat_r+0x1c>
 8010ff2:	682b      	ldr	r3, [r5, #0]
 8010ff4:	b103      	cbz	r3, 8010ff8 <_fstat_r+0x1c>
 8010ff6:	6023      	str	r3, [r4, #0]
 8010ff8:	bd38      	pop	{r3, r4, r5, pc}
 8010ffa:	bf00      	nop
 8010ffc:	20002068 	.word	0x20002068

08011000 <_isatty_r>:
 8011000:	b538      	push	{r3, r4, r5, lr}
 8011002:	4d06      	ldr	r5, [pc, #24]	@ (801101c <_isatty_r+0x1c>)
 8011004:	2300      	movs	r3, #0
 8011006:	4604      	mov	r4, r0
 8011008:	4608      	mov	r0, r1
 801100a:	602b      	str	r3, [r5, #0]
 801100c:	f7f0 fc10 	bl	8001830 <_isatty>
 8011010:	1c43      	adds	r3, r0, #1
 8011012:	d102      	bne.n	801101a <_isatty_r+0x1a>
 8011014:	682b      	ldr	r3, [r5, #0]
 8011016:	b103      	cbz	r3, 801101a <_isatty_r+0x1a>
 8011018:	6023      	str	r3, [r4, #0]
 801101a:	bd38      	pop	{r3, r4, r5, pc}
 801101c:	20002068 	.word	0x20002068

08011020 <abort>:
 8011020:	b508      	push	{r3, lr}
 8011022:	2006      	movs	r0, #6
 8011024:	f000 f82c 	bl	8011080 <raise>
 8011028:	2001      	movs	r0, #1
 801102a:	f7f0 fba1 	bl	8001770 <_exit>

0801102e <_raise_r>:
 801102e:	291f      	cmp	r1, #31
 8011030:	b538      	push	{r3, r4, r5, lr}
 8011032:	4605      	mov	r5, r0
 8011034:	460c      	mov	r4, r1
 8011036:	d904      	bls.n	8011042 <_raise_r+0x14>
 8011038:	2316      	movs	r3, #22
 801103a:	6003      	str	r3, [r0, #0]
 801103c:	f04f 30ff 	mov.w	r0, #4294967295
 8011040:	bd38      	pop	{r3, r4, r5, pc}
 8011042:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011044:	b112      	cbz	r2, 801104c <_raise_r+0x1e>
 8011046:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801104a:	b94b      	cbnz	r3, 8011060 <_raise_r+0x32>
 801104c:	4628      	mov	r0, r5
 801104e:	f000 f831 	bl	80110b4 <_getpid_r>
 8011052:	4622      	mov	r2, r4
 8011054:	4601      	mov	r1, r0
 8011056:	4628      	mov	r0, r5
 8011058:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801105c:	f000 b818 	b.w	8011090 <_kill_r>
 8011060:	2b01      	cmp	r3, #1
 8011062:	d00a      	beq.n	801107a <_raise_r+0x4c>
 8011064:	1c59      	adds	r1, r3, #1
 8011066:	d103      	bne.n	8011070 <_raise_r+0x42>
 8011068:	2316      	movs	r3, #22
 801106a:	6003      	str	r3, [r0, #0]
 801106c:	2001      	movs	r0, #1
 801106e:	e7e7      	b.n	8011040 <_raise_r+0x12>
 8011070:	2100      	movs	r1, #0
 8011072:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011076:	4620      	mov	r0, r4
 8011078:	4798      	blx	r3
 801107a:	2000      	movs	r0, #0
 801107c:	e7e0      	b.n	8011040 <_raise_r+0x12>
	...

08011080 <raise>:
 8011080:	4b02      	ldr	r3, [pc, #8]	@ (801108c <raise+0xc>)
 8011082:	4601      	mov	r1, r0
 8011084:	6818      	ldr	r0, [r3, #0]
 8011086:	f7ff bfd2 	b.w	801102e <_raise_r>
 801108a:	bf00      	nop
 801108c:	20000130 	.word	0x20000130

08011090 <_kill_r>:
 8011090:	b538      	push	{r3, r4, r5, lr}
 8011092:	4d07      	ldr	r5, [pc, #28]	@ (80110b0 <_kill_r+0x20>)
 8011094:	2300      	movs	r3, #0
 8011096:	4604      	mov	r4, r0
 8011098:	4608      	mov	r0, r1
 801109a:	4611      	mov	r1, r2
 801109c:	602b      	str	r3, [r5, #0]
 801109e:	f7f0 fb57 	bl	8001750 <_kill>
 80110a2:	1c43      	adds	r3, r0, #1
 80110a4:	d102      	bne.n	80110ac <_kill_r+0x1c>
 80110a6:	682b      	ldr	r3, [r5, #0]
 80110a8:	b103      	cbz	r3, 80110ac <_kill_r+0x1c>
 80110aa:	6023      	str	r3, [r4, #0]
 80110ac:	bd38      	pop	{r3, r4, r5, pc}
 80110ae:	bf00      	nop
 80110b0:	20002068 	.word	0x20002068

080110b4 <_getpid_r>:
 80110b4:	f7f0 bb44 	b.w	8001740 <_getpid>

080110b8 <_init>:
 80110b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110ba:	bf00      	nop
 80110bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110be:	bc08      	pop	{r3}
 80110c0:	469e      	mov	lr, r3
 80110c2:	4770      	bx	lr

080110c4 <_fini>:
 80110c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110c6:	bf00      	nop
 80110c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110ca:	bc08      	pop	{r3}
 80110cc:	469e      	mov	lr, r3
 80110ce:	4770      	bx	lr
