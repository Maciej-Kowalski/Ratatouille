
ratatouille_transfer_audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011008  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ec  08011148  08011148  00012148  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011634  08011634  00012634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801163c  0801163c  0001263c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08011640  08011640  00012640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002e4  20000008  08011644  00013008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001d8c  200002ec  08011928  000132ec  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20002078  08011928  00014078  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000132ec  2**0
                  CONTENTS, READONLY
 10 .debug_info   000284d9  00000000  00000000  0001331c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005114  00000000  00000000  0003b7f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002668  00000000  00000000  00040910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001d85  00000000  00000000  00042f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00007904  00000000  00000000  00044cfd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00029b95  00000000  00000000  0004c601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000fef25  00000000  00000000  00076196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001750bb  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000b4ac  00000000  00000000  00175100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008b  00000000  00000000  001805ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002ec 	.word	0x200002ec
 800015c:	00000000 	.word	0x00000000
 8000160:	08011130 	.word	0x08011130

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002f0 	.word	0x200002f0
 800017c:	08011130 	.word	0x08011130

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b988 	b.w	8000e80 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	468e      	mov	lr, r1
 8000b90:	4604      	mov	r4, r0
 8000b92:	4688      	mov	r8, r1
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d14a      	bne.n	8000c2e <__udivmoddi4+0xa6>
 8000b98:	428a      	cmp	r2, r1
 8000b9a:	4617      	mov	r7, r2
 8000b9c:	d962      	bls.n	8000c64 <__udivmoddi4+0xdc>
 8000b9e:	fab2 f682 	clz	r6, r2
 8000ba2:	b14e      	cbz	r6, 8000bb8 <__udivmoddi4+0x30>
 8000ba4:	f1c6 0320 	rsb	r3, r6, #32
 8000ba8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bac:	fa20 f303 	lsr.w	r3, r0, r3
 8000bb0:	40b7      	lsls	r7, r6
 8000bb2:	ea43 0808 	orr.w	r8, r3, r8
 8000bb6:	40b4      	lsls	r4, r6
 8000bb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bbc:	fa1f fc87 	uxth.w	ip, r7
 8000bc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000bc4:	0c23      	lsrs	r3, r4, #16
 8000bc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000bca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bce:	fb01 f20c 	mul.w	r2, r1, ip
 8000bd2:	429a      	cmp	r2, r3
 8000bd4:	d909      	bls.n	8000bea <__udivmoddi4+0x62>
 8000bd6:	18fb      	adds	r3, r7, r3
 8000bd8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000bdc:	f080 80ea 	bcs.w	8000db4 <__udivmoddi4+0x22c>
 8000be0:	429a      	cmp	r2, r3
 8000be2:	f240 80e7 	bls.w	8000db4 <__udivmoddi4+0x22c>
 8000be6:	3902      	subs	r1, #2
 8000be8:	443b      	add	r3, r7
 8000bea:	1a9a      	subs	r2, r3, r2
 8000bec:	b2a3      	uxth	r3, r4
 8000bee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000bf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000bfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bfe:	459c      	cmp	ip, r3
 8000c00:	d909      	bls.n	8000c16 <__udivmoddi4+0x8e>
 8000c02:	18fb      	adds	r3, r7, r3
 8000c04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c08:	f080 80d6 	bcs.w	8000db8 <__udivmoddi4+0x230>
 8000c0c:	459c      	cmp	ip, r3
 8000c0e:	f240 80d3 	bls.w	8000db8 <__udivmoddi4+0x230>
 8000c12:	443b      	add	r3, r7
 8000c14:	3802      	subs	r0, #2
 8000c16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c1a:	eba3 030c 	sub.w	r3, r3, ip
 8000c1e:	2100      	movs	r1, #0
 8000c20:	b11d      	cbz	r5, 8000c2a <__udivmoddi4+0xa2>
 8000c22:	40f3      	lsrs	r3, r6
 8000c24:	2200      	movs	r2, #0
 8000c26:	e9c5 3200 	strd	r3, r2, [r5]
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	428b      	cmp	r3, r1
 8000c30:	d905      	bls.n	8000c3e <__udivmoddi4+0xb6>
 8000c32:	b10d      	cbz	r5, 8000c38 <__udivmoddi4+0xb0>
 8000c34:	e9c5 0100 	strd	r0, r1, [r5]
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4608      	mov	r0, r1
 8000c3c:	e7f5      	b.n	8000c2a <__udivmoddi4+0xa2>
 8000c3e:	fab3 f183 	clz	r1, r3
 8000c42:	2900      	cmp	r1, #0
 8000c44:	d146      	bne.n	8000cd4 <__udivmoddi4+0x14c>
 8000c46:	4573      	cmp	r3, lr
 8000c48:	d302      	bcc.n	8000c50 <__udivmoddi4+0xc8>
 8000c4a:	4282      	cmp	r2, r0
 8000c4c:	f200 8105 	bhi.w	8000e5a <__udivmoddi4+0x2d2>
 8000c50:	1a84      	subs	r4, r0, r2
 8000c52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c56:	2001      	movs	r0, #1
 8000c58:	4690      	mov	r8, r2
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	d0e5      	beq.n	8000c2a <__udivmoddi4+0xa2>
 8000c5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000c62:	e7e2      	b.n	8000c2a <__udivmoddi4+0xa2>
 8000c64:	2a00      	cmp	r2, #0
 8000c66:	f000 8090 	beq.w	8000d8a <__udivmoddi4+0x202>
 8000c6a:	fab2 f682 	clz	r6, r2
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	f040 80a4 	bne.w	8000dbc <__udivmoddi4+0x234>
 8000c74:	1a8a      	subs	r2, r1, r2
 8000c76:	0c03      	lsrs	r3, r0, #16
 8000c78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c7c:	b280      	uxth	r0, r0
 8000c7e:	b2bc      	uxth	r4, r7
 8000c80:	2101      	movs	r1, #1
 8000c82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000c86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000c8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d907      	bls.n	8000ca6 <__udivmoddi4+0x11e>
 8000c96:	18fb      	adds	r3, r7, r3
 8000c98:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000c9c:	d202      	bcs.n	8000ca4 <__udivmoddi4+0x11c>
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	f200 80e0 	bhi.w	8000e64 <__udivmoddi4+0x2dc>
 8000ca4:	46c4      	mov	ip, r8
 8000ca6:	1a9b      	subs	r3, r3, r2
 8000ca8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cb0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cb4:	fb02 f404 	mul.w	r4, r2, r4
 8000cb8:	429c      	cmp	r4, r3
 8000cba:	d907      	bls.n	8000ccc <__udivmoddi4+0x144>
 8000cbc:	18fb      	adds	r3, r7, r3
 8000cbe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x142>
 8000cc4:	429c      	cmp	r4, r3
 8000cc6:	f200 80ca 	bhi.w	8000e5e <__udivmoddi4+0x2d6>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	1b1b      	subs	r3, r3, r4
 8000cce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000cd2:	e7a5      	b.n	8000c20 <__udivmoddi4+0x98>
 8000cd4:	f1c1 0620 	rsb	r6, r1, #32
 8000cd8:	408b      	lsls	r3, r1
 8000cda:	fa22 f706 	lsr.w	r7, r2, r6
 8000cde:	431f      	orrs	r7, r3
 8000ce0:	fa0e f401 	lsl.w	r4, lr, r1
 8000ce4:	fa20 f306 	lsr.w	r3, r0, r6
 8000ce8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000cec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000cf0:	4323      	orrs	r3, r4
 8000cf2:	fa00 f801 	lsl.w	r8, r0, r1
 8000cf6:	fa1f fc87 	uxth.w	ip, r7
 8000cfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000cfe:	0c1c      	lsrs	r4, r3, #16
 8000d00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x1a0>
 8000d14:	193c      	adds	r4, r7, r4
 8000d16:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d1a:	f080 809c 	bcs.w	8000e56 <__udivmoddi4+0x2ce>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f240 8099 	bls.w	8000e56 <__udivmoddi4+0x2ce>
 8000d24:	3802      	subs	r0, #2
 8000d26:	443c      	add	r4, r7
 8000d28:	eba4 040e 	sub.w	r4, r4, lr
 8000d2c:	fa1f fe83 	uxth.w	lr, r3
 8000d30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d34:	fb09 4413 	mls	r4, r9, r3, r4
 8000d38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d40:	45a4      	cmp	ip, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x1ce>
 8000d44:	193c      	adds	r4, r7, r4
 8000d46:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d4a:	f080 8082 	bcs.w	8000e52 <__udivmoddi4+0x2ca>
 8000d4e:	45a4      	cmp	ip, r4
 8000d50:	d97f      	bls.n	8000e52 <__udivmoddi4+0x2ca>
 8000d52:	3b02      	subs	r3, #2
 8000d54:	443c      	add	r4, r7
 8000d56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d5a:	eba4 040c 	sub.w	r4, r4, ip
 8000d5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d62:	4564      	cmp	r4, ip
 8000d64:	4673      	mov	r3, lr
 8000d66:	46e1      	mov	r9, ip
 8000d68:	d362      	bcc.n	8000e30 <__udivmoddi4+0x2a8>
 8000d6a:	d05f      	beq.n	8000e2c <__udivmoddi4+0x2a4>
 8000d6c:	b15d      	cbz	r5, 8000d86 <__udivmoddi4+0x1fe>
 8000d6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000d72:	eb64 0409 	sbc.w	r4, r4, r9
 8000d76:	fa04 f606 	lsl.w	r6, r4, r6
 8000d7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000d7e:	431e      	orrs	r6, r3
 8000d80:	40cc      	lsrs	r4, r1
 8000d82:	e9c5 6400 	strd	r6, r4, [r5]
 8000d86:	2100      	movs	r1, #0
 8000d88:	e74f      	b.n	8000c2a <__udivmoddi4+0xa2>
 8000d8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000d8e:	0c01      	lsrs	r1, r0, #16
 8000d90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000d94:	b280      	uxth	r0, r0
 8000d96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	4638      	mov	r0, r7
 8000d9e:	463c      	mov	r4, r7
 8000da0:	46b8      	mov	r8, r7
 8000da2:	46be      	mov	lr, r7
 8000da4:	2620      	movs	r6, #32
 8000da6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000daa:	eba2 0208 	sub.w	r2, r2, r8
 8000dae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000db2:	e766      	b.n	8000c82 <__udivmoddi4+0xfa>
 8000db4:	4601      	mov	r1, r0
 8000db6:	e718      	b.n	8000bea <__udivmoddi4+0x62>
 8000db8:	4610      	mov	r0, r2
 8000dba:	e72c      	b.n	8000c16 <__udivmoddi4+0x8e>
 8000dbc:	f1c6 0220 	rsb	r2, r6, #32
 8000dc0:	fa2e f302 	lsr.w	r3, lr, r2
 8000dc4:	40b7      	lsls	r7, r6
 8000dc6:	40b1      	lsls	r1, r6
 8000dc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000dcc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000dd6:	b2bc      	uxth	r4, r7
 8000dd8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ddc:	0c11      	lsrs	r1, r2, #16
 8000dde:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de2:	fb08 f904 	mul.w	r9, r8, r4
 8000de6:	40b0      	lsls	r0, r6
 8000de8:	4589      	cmp	r9, r1
 8000dea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000dee:	b280      	uxth	r0, r0
 8000df0:	d93e      	bls.n	8000e70 <__udivmoddi4+0x2e8>
 8000df2:	1879      	adds	r1, r7, r1
 8000df4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000df8:	d201      	bcs.n	8000dfe <__udivmoddi4+0x276>
 8000dfa:	4589      	cmp	r9, r1
 8000dfc:	d81f      	bhi.n	8000e3e <__udivmoddi4+0x2b6>
 8000dfe:	eba1 0109 	sub.w	r1, r1, r9
 8000e02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e06:	fb09 f804 	mul.w	r8, r9, r4
 8000e0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e0e:	b292      	uxth	r2, r2
 8000e10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e14:	4542      	cmp	r2, r8
 8000e16:	d229      	bcs.n	8000e6c <__udivmoddi4+0x2e4>
 8000e18:	18ba      	adds	r2, r7, r2
 8000e1a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e1e:	d2c4      	bcs.n	8000daa <__udivmoddi4+0x222>
 8000e20:	4542      	cmp	r2, r8
 8000e22:	d2c2      	bcs.n	8000daa <__udivmoddi4+0x222>
 8000e24:	f1a9 0102 	sub.w	r1, r9, #2
 8000e28:	443a      	add	r2, r7
 8000e2a:	e7be      	b.n	8000daa <__udivmoddi4+0x222>
 8000e2c:	45f0      	cmp	r8, lr
 8000e2e:	d29d      	bcs.n	8000d6c <__udivmoddi4+0x1e4>
 8000e30:	ebbe 0302 	subs.w	r3, lr, r2
 8000e34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e38:	3801      	subs	r0, #1
 8000e3a:	46e1      	mov	r9, ip
 8000e3c:	e796      	b.n	8000d6c <__udivmoddi4+0x1e4>
 8000e3e:	eba7 0909 	sub.w	r9, r7, r9
 8000e42:	4449      	add	r1, r9
 8000e44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e4c:	fb09 f804 	mul.w	r8, r9, r4
 8000e50:	e7db      	b.n	8000e0a <__udivmoddi4+0x282>
 8000e52:	4673      	mov	r3, lr
 8000e54:	e77f      	b.n	8000d56 <__udivmoddi4+0x1ce>
 8000e56:	4650      	mov	r0, sl
 8000e58:	e766      	b.n	8000d28 <__udivmoddi4+0x1a0>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e6fd      	b.n	8000c5a <__udivmoddi4+0xd2>
 8000e5e:	443b      	add	r3, r7
 8000e60:	3a02      	subs	r2, #2
 8000e62:	e733      	b.n	8000ccc <__udivmoddi4+0x144>
 8000e64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e68:	443b      	add	r3, r7
 8000e6a:	e71c      	b.n	8000ca6 <__udivmoddi4+0x11e>
 8000e6c:	4649      	mov	r1, r9
 8000e6e:	e79c      	b.n	8000daa <__udivmoddi4+0x222>
 8000e70:	eba1 0109 	sub.w	r1, r1, r9
 8000e74:	46c4      	mov	ip, r8
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fb09 f804 	mul.w	r8, r9, r4
 8000e7e:	e7c4      	b.n	8000e0a <__udivmoddi4+0x282>

08000e80 <__aeabi_idiv0>:
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop

08000e84 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000e8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e90:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000e92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000e9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ea0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
}
 8000eaa:	bf00      	nop
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b085      	sub	sp, #20
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ebe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ec2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ec4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ece:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ed2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000eda:	68fb      	ldr	r3, [r7, #12]
}
 8000edc:	bf00      	nop
 8000ede:	3714      	adds	r7, #20
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2)
  {
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	////this updates the X and Y axes of my joystick
	  for(uint8_t i = 0; i<hadc1.Init.NbrOfConversion; i++){
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]
 8000ef4:	e00a      	b.n	8000f0c <HAL_TIM_PeriodElapsedCallback+0x24>
		  mic = (uint16_t) rawValues[0];
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8000f28 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000ef8:	881a      	ldrh	r2, [r3, #0]
 8000efa:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000efc:	801a      	strh	r2, [r3, #0]
		  mic2 = mic;
 8000efe:	4b0b      	ldr	r3, [pc, #44]	@ (8000f2c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000f00:	881a      	ldrh	r2, [r3, #0]
 8000f02:	4b0b      	ldr	r3, [pc, #44]	@ (8000f30 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000f04:	801a      	strh	r2, [r3, #0]
	  for(uint8_t i = 0; i<hadc1.Init.NbrOfConversion; i++){
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	73fb      	strb	r3, [r7, #15]
 8000f0c:	7bfa      	ldrb	r2, [r7, #15]
 8000f0e:	4b09      	ldr	r3, [pc, #36]	@ (8000f34 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000f10:	69db      	ldr	r3, [r3, #28]
 8000f12:	429a      	cmp	r2, r3
 8000f14:	d3ef      	bcc.n	8000ef6 <HAL_TIM_PeriodElapsedCallback+0xe>
	  }
	  flag = 1;
 8000f16:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	701a      	strb	r2, [r3, #0]
	  sprintf(msg, "X axis: %hu, Y axis: %hu \r\n", Xaxis, Yaxis);
	  status = CDC_Transmit_FS(msg, strlen((char*)msg));
	  if (status == USBD_OK) {
	  	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin); // Example: Toggle LED on success
	  }*/
  }
 8000f1c:	bf00      	nop
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	20000484 	.word	0x20000484
 8000f2c:	2000047e 	.word	0x2000047e
 8000f30:	20000480 	.word	0x20000480
 8000f34:	20000318 	.word	0x20000318
 8000f38:	20000488 	.word	0x20000488

08000f3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f40:	f000 ff12 	bl	8001d68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f44:	f000 f88a 	bl	800105c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f48:	f000 f8ec 	bl	8001124 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4c:	f000 fa30 	bl	80013b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f50:	f000 fa1c 	bl	800138c <MX_DMA_Init>
  MX_ADC1_Init();
 8000f54:	f000 f918 	bl	8001188 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000f58:	f000 f9ca 	bl	80012f0 <MX_TIM2_Init>
  MX_USB_Device_Init();
 8000f5c:	f00c fed6 	bl	800dd0c <MX_USB_Device_Init>
  MX_I2C1_Init();
 8000f60:	f000 f986 	bl	8001270 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ////This begins the process of storing our ADC readings into the DMA. The DMA can be thought of a temporary storage location.
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) rawValues, 2);
 8000f64:	2202      	movs	r2, #2
 8000f66:	4935      	ldr	r1, [pc, #212]	@ (800103c <main+0x100>)
 8000f68:	4835      	ldr	r0, [pc, #212]	@ (8001040 <main+0x104>)
 8000f6a:	f001 fadb 	bl	8002524 <HAL_ADC_Start_DMA>
    ////This begins our timer 2
  HAL_TIM_Base_Start_IT(&htim2);
 8000f6e:	4835      	ldr	r0, [pc, #212]	@ (8001044 <main+0x108>)
 8000f70:	f007 faaa 	bl	80084c8 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 8000f74:	2000      	movs	r0, #0
 8000f76:	f000 fd85 	bl	8001a84 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f000 fd82 	bl	8001a84 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000f80:	2002      	movs	r0, #2
 8000f82:	f000 fd7f 	bl	8001a84 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8000f86:	2101      	movs	r1, #1
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f000 fdcf 	bl	8001b2c <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8000f8e:	2101      	movs	r1, #1
 8000f90:	2001      	movs	r0, #1
 8000f92:	f000 fdcb 	bl	8001b2c <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 8000f96:	2101      	movs	r1, #1
 8000f98:	2002      	movs	r0, #2
 8000f9a:	f000 fdc7 	bl	8001b2c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000f9e:	4b2a      	ldr	r3, [pc, #168]	@ (8001048 <main+0x10c>)
 8000fa0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fa4:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000fa6:	4b28      	ldr	r3, [pc, #160]	@ (8001048 <main+0x10c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000fac:	4b26      	ldr	r3, [pc, #152]	@ (8001048 <main+0x10c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000fb2:	4b25      	ldr	r3, [pc, #148]	@ (8001048 <main+0x10c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000fb8:	4b23      	ldr	r3, [pc, #140]	@ (8001048 <main+0x10c>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000fbe:	4922      	ldr	r1, [pc, #136]	@ (8001048 <main+0x10c>)
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f000 fe23 	bl	8001c0c <BSP_COM_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <main+0x94>
  {
    Error_Handler();
 8000fcc:	f000 fa38 	bl	8001440 <Error_Handler>
  /*                                                                          ********************************************************************* */
  while (1)
  {
	  //bmi160ReadAccelGyro(&imu_t);

	  if (flag == 1){
 8000fd0:	4b1e      	ldr	r3, [pc, #120]	@ (800104c <main+0x110>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b01      	cmp	r3, #1
 8000fd6:	d1fb      	bne.n	8000fd0 <main+0x94>
		  HAL_GPIO_WritePin(TIMING_GPIO_Port, TIMING_Pin,GPIO_PIN_SET);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	2101      	movs	r1, #1
 8000fdc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fe0:	f002 ff6a 	bl	8003eb8 <HAL_GPIO_WritePin>
		  if (counter == 32000){
 8000fe4:	4b1a      	ldr	r3, [pc, #104]	@ (8001050 <main+0x114>)
 8000fe6:	881b      	ldrh	r3, [r3, #0]
 8000fe8:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8000fec:	d103      	bne.n	8000ff6 <main+0xba>
			  counter = 0;
 8000fee:	4b18      	ldr	r3, [pc, #96]	@ (8001050 <main+0x114>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	801a      	strh	r2, [r3, #0]
 8000ff4:	e005      	b.n	8001002 <main+0xc6>
		  }
		  else{
			  counter++;
 8000ff6:	4b16      	ldr	r3, [pc, #88]	@ (8001050 <main+0x114>)
 8000ff8:	881b      	ldrh	r3, [r3, #0]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	4b14      	ldr	r3, [pc, #80]	@ (8001050 <main+0x114>)
 8001000:	801a      	strh	r2, [r3, #0]
		  }
		  prepare_data_packet_audio(counter, counter,USB_buffer,&packet_length);
 8001002:	4b13      	ldr	r3, [pc, #76]	@ (8001050 <main+0x114>)
 8001004:	8818      	ldrh	r0, [r3, #0]
 8001006:	4b12      	ldr	r3, [pc, #72]	@ (8001050 <main+0x114>)
 8001008:	8819      	ldrh	r1, [r3, #0]
 800100a:	4b12      	ldr	r3, [pc, #72]	@ (8001054 <main+0x118>)
 800100c:	4a12      	ldr	r2, [pc, #72]	@ (8001058 <main+0x11c>)
 800100e:	f000 f9fa 	bl	8001406 <prepare_data_packet_audio>
		  //prepare_data_packet_audio(mic, mic2,USB_buffer,&packet_length);

		  CDC_Transmit_FS(USB_buffer, packet_length);
 8001012:	4b10      	ldr	r3, [pc, #64]	@ (8001054 <main+0x118>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	b29b      	uxth	r3, r3
 8001018:	4619      	mov	r1, r3
 800101a:	480f      	ldr	r0, [pc, #60]	@ (8001058 <main+0x11c>)
 800101c:	f00c ff34 	bl	800de88 <CDC_Transmit_FS>

		  BSP_LED_Toggle(LED_GREEN);
 8001020:	2001      	movs	r0, #1
 8001022:	f000 fd69 	bl	8001af8 <BSP_LED_Toggle>
		  //snprintf(msg, sizeof(msg), "counter: %d \r\n", counter);
		  //CDC_Transmit_FS((uint8_t *)msg, strlen(msg));
		  HAL_GPIO_WritePin(TIMING_GPIO_Port, TIMING_Pin,GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	2101      	movs	r1, #1
 800102a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800102e:	f002 ff43 	bl	8003eb8 <HAL_GPIO_WritePin>

		  flag = 0;
 8001032:	4b06      	ldr	r3, [pc, #24]	@ (800104c <main+0x110>)
 8001034:	2200      	movs	r2, #0
 8001036:	701a      	strb	r2, [r3, #0]
	  if (flag == 1){
 8001038:	e7ca      	b.n	8000fd0 <main+0x94>
 800103a:	bf00      	nop
 800103c:	20000484 	.word	0x20000484
 8001040:	20000318 	.word	0x20000318
 8001044:	20000430 	.word	0x20000430
 8001048:	20000308 	.word	0x20000308
 800104c:	20000488 	.word	0x20000488
 8001050:	2000047c 	.word	0x2000047c
 8001054:	200004ac 	.word	0x200004ac
 8001058:	2000048c 	.word	0x2000048c

0800105c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b09a      	sub	sp, #104	@ 0x68
 8001060:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001062:	f107 0320 	add.w	r3, r7, #32
 8001066:	2248      	movs	r2, #72	@ 0x48
 8001068:	2100      	movs	r1, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f00e f905 	bl	800f27a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	611a      	str	r2, [r3, #16]
 800107e:	615a      	str	r2, [r3, #20]
 8001080:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001082:	4b27      	ldr	r3, [pc, #156]	@ (8001120 <SystemClock_Config+0xc4>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800108a:	4a25      	ldr	r2, [pc, #148]	@ (8001120 <SystemClock_Config+0xc4>)
 800108c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001090:	6013      	str	r3, [r2, #0]
 8001092:	4b23      	ldr	r3, [pc, #140]	@ (8001120 <SystemClock_Config+0xc4>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800109e:	2303      	movs	r3, #3
 80010a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010a2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010a6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ae:	2340      	movs	r3, #64	@ 0x40
 80010b0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b2:	2302      	movs	r3, #2
 80010b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010b6:	2303      	movs	r3, #3
 80010b8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80010ba:	2310      	movs	r3, #16
 80010bc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 80010be:	2308      	movs	r3, #8
 80010c0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010c2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80010c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010c8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80010cc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010d2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d4:	f107 0320 	add.w	r3, r7, #32
 80010d8:	4618      	mov	r0, r3
 80010da:	f005 ff65 	bl	8006fa8 <HAL_RCC_OscConfig>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80010e4:	f000 f9ac 	bl	8001440 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80010e8:	236f      	movs	r3, #111	@ 0x6f
 80010ea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ec:	2303      	movs	r3, #3
 80010ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010f4:	2300      	movs	r3, #0
 80010f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80010fc:	2380      	movs	r3, #128	@ 0x80
 80010fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001100:	2300      	movs	r3, #0
 8001102:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	2103      	movs	r1, #3
 8001108:	4618      	mov	r0, r3
 800110a:	f006 fac1 	bl	8007690 <HAL_RCC_ClockConfig>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001114:	f000 f994 	bl	8001440 <Error_Handler>
  }
}
 8001118:	bf00      	nop
 800111a:	3768      	adds	r7, #104	@ 0x68
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	58000400 	.word	0x58000400

08001124 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b094      	sub	sp, #80	@ 0x50
 8001128:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800112a:	463b      	mov	r3, r7
 800112c:	2250      	movs	r2, #80	@ 0x50
 800112e:	2100      	movs	r1, #0
 8001130:	4618      	mov	r0, r3
 8001132:	f00e f8a2 	bl	800f27a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 8001136:	f44f 5314 	mov.w	r3, #9472	@ 0x2500
 800113a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 800113c:	2306      	movs	r3, #6
 800113e:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8001140:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001144:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 8001146:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800114a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 800114c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001150:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8001152:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 8001156:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001158:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800115c:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800115e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001162:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8001164:	2300      	movs	r3, #0
 8001166:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8001168:	2300      	movs	r3, #0
 800116a:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800116c:	463b      	mov	r3, r7
 800116e:	4618      	mov	r0, r3
 8001170:	f006 fecb 	bl	8007f0a <HAL_RCCEx_PeriphCLKConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 800117a:	f000 f961 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 800117e:	bf00      	nop
 8001180:	3750      	adds	r7, #80	@ 0x50
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
	...

08001188 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b086      	sub	sp, #24
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800118e:	463b      	mov	r3, r7
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
 800119c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800119e:	4b30      	ldr	r3, [pc, #192]	@ (8001260 <MX_ADC1_Init+0xd8>)
 80011a0:	4a30      	ldr	r2, [pc, #192]	@ (8001264 <MX_ADC1_Init+0xdc>)
 80011a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80011a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001260 <MX_ADC1_Init+0xd8>)
 80011a6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011ac:	4b2c      	ldr	r3, [pc, #176]	@ (8001260 <MX_ADC1_Init+0xd8>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001260 <MX_ADC1_Init+0xd8>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011b8:	4b29      	ldr	r3, [pc, #164]	@ (8001260 <MX_ADC1_Init+0xd8>)
 80011ba:	2201      	movs	r2, #1
 80011bc:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011be:	4b28      	ldr	r3, [pc, #160]	@ (8001260 <MX_ADC1_Init+0xd8>)
 80011c0:	2204      	movs	r2, #4
 80011c2:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011c4:	4b26      	ldr	r3, [pc, #152]	@ (8001260 <MX_ADC1_Init+0xd8>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011ca:	4b25      	ldr	r3, [pc, #148]	@ (8001260 <MX_ADC1_Init+0xd8>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 80011d0:	4b23      	ldr	r3, [pc, #140]	@ (8001260 <MX_ADC1_Init+0xd8>)
 80011d2:	2202      	movs	r2, #2
 80011d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011d6:	4b22      	ldr	r3, [pc, #136]	@ (8001260 <MX_ADC1_Init+0xd8>)
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011de:	4b20      	ldr	r3, [pc, #128]	@ (8001260 <MX_ADC1_Init+0xd8>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001260 <MX_ADC1_Init+0xd8>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80011ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001260 <MX_ADC1_Init+0xd8>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001260 <MX_ADC1_Init+0xd8>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011f8:	4b19      	ldr	r3, [pc, #100]	@ (8001260 <MX_ADC1_Init+0xd8>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001200:	4817      	ldr	r0, [pc, #92]	@ (8001260 <MX_ADC1_Init+0xd8>)
 8001202:	f001 f843 	bl	800228c <HAL_ADC_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 800120c:	f000 f918 	bl	8001440 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001210:	4b15      	ldr	r3, [pc, #84]	@ (8001268 <MX_ADC1_Init+0xe0>)
 8001212:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001214:	2306      	movs	r3, #6
 8001216:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8001218:	2306      	movs	r3, #6
 800121a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800121c:	237f      	movs	r3, #127	@ 0x7f
 800121e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001220:	2304      	movs	r3, #4
 8001222:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001228:	463b      	mov	r3, r7
 800122a:	4619      	mov	r1, r3
 800122c:	480c      	ldr	r0, [pc, #48]	@ (8001260 <MX_ADC1_Init+0xd8>)
 800122e:	f001 fbdb 	bl	80029e8 <HAL_ADC_ConfigChannel>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8001238:	f000 f902 	bl	8001440 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800123c:	4b0b      	ldr	r3, [pc, #44]	@ (800126c <MX_ADC1_Init+0xe4>)
 800123e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001240:	230c      	movs	r3, #12
 8001242:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001244:	463b      	mov	r3, r7
 8001246:	4619      	mov	r1, r3
 8001248:	4805      	ldr	r0, [pc, #20]	@ (8001260 <MX_ADC1_Init+0xd8>)
 800124a:	f001 fbcd 	bl	80029e8 <HAL_ADC_ConfigChannel>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8001254:	f000 f8f4 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001258:	bf00      	nop
 800125a:	3718      	adds	r7, #24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000318 	.word	0x20000318
 8001264:	50040000 	.word	0x50040000
 8001268:	04300002 	.word	0x04300002
 800126c:	08600004 	.word	0x08600004

08001270 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001274:	4b1b      	ldr	r3, [pc, #108]	@ (80012e4 <MX_I2C1_Init+0x74>)
 8001276:	4a1c      	ldr	r2, [pc, #112]	@ (80012e8 <MX_I2C1_Init+0x78>)
 8001278:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 800127a:	4b1a      	ldr	r3, [pc, #104]	@ (80012e4 <MX_I2C1_Init+0x74>)
 800127c:	4a1b      	ldr	r2, [pc, #108]	@ (80012ec <MX_I2C1_Init+0x7c>)
 800127e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001280:	4b18      	ldr	r3, [pc, #96]	@ (80012e4 <MX_I2C1_Init+0x74>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001286:	4b17      	ldr	r3, [pc, #92]	@ (80012e4 <MX_I2C1_Init+0x74>)
 8001288:	2201      	movs	r2, #1
 800128a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800128c:	4b15      	ldr	r3, [pc, #84]	@ (80012e4 <MX_I2C1_Init+0x74>)
 800128e:	2200      	movs	r2, #0
 8001290:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001292:	4b14      	ldr	r3, [pc, #80]	@ (80012e4 <MX_I2C1_Init+0x74>)
 8001294:	2200      	movs	r2, #0
 8001296:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001298:	4b12      	ldr	r3, [pc, #72]	@ (80012e4 <MX_I2C1_Init+0x74>)
 800129a:	2200      	movs	r2, #0
 800129c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800129e:	4b11      	ldr	r3, [pc, #68]	@ (80012e4 <MX_I2C1_Init+0x74>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012a4:	4b0f      	ldr	r3, [pc, #60]	@ (80012e4 <MX_I2C1_Init+0x74>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012aa:	480e      	ldr	r0, [pc, #56]	@ (80012e4 <MX_I2C1_Init+0x74>)
 80012ac:	f002 fe59 	bl	8003f62 <HAL_I2C_Init>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012b6:	f000 f8c3 	bl	8001440 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012ba:	2100      	movs	r1, #0
 80012bc:	4809      	ldr	r0, [pc, #36]	@ (80012e4 <MX_I2C1_Init+0x74>)
 80012be:	f003 fd04 	bl	8004cca <HAL_I2CEx_ConfigAnalogFilter>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012c8:	f000 f8ba 	bl	8001440 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012cc:	2100      	movs	r1, #0
 80012ce:	4805      	ldr	r0, [pc, #20]	@ (80012e4 <MX_I2C1_Init+0x74>)
 80012d0:	f003 fd46 	bl	8004d60 <HAL_I2CEx_ConfigDigitalFilter>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012da:	f000 f8b1 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	200003dc 	.word	0x200003dc
 80012e8:	40005400 	.word	0x40005400
 80012ec:	10b17db5 	.word	0x10b17db5

080012f0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f6:	f107 0310 	add.w	r3, r7, #16
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800130e:	4b1d      	ldr	r3, [pc, #116]	@ (8001384 <MX_TIM2_Init+0x94>)
 8001310:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001314:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 8001316:	4b1b      	ldr	r3, [pc, #108]	@ (8001384 <MX_TIM2_Init+0x94>)
 8001318:	220a      	movs	r2, #10
 800131a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131c:	4b19      	ldr	r3, [pc, #100]	@ (8001384 <MX_TIM2_Init+0x94>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 256000-1;
 8001322:	4b18      	ldr	r3, [pc, #96]	@ (8001384 <MX_TIM2_Init+0x94>)
 8001324:	4a18      	ldr	r2, [pc, #96]	@ (8001388 <MX_TIM2_Init+0x98>)
 8001326:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001328:	4b16      	ldr	r3, [pc, #88]	@ (8001384 <MX_TIM2_Init+0x94>)
 800132a:	2200      	movs	r2, #0
 800132c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800132e:	4b15      	ldr	r3, [pc, #84]	@ (8001384 <MX_TIM2_Init+0x94>)
 8001330:	2280      	movs	r2, #128	@ 0x80
 8001332:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001334:	4813      	ldr	r0, [pc, #76]	@ (8001384 <MX_TIM2_Init+0x94>)
 8001336:	f007 f86f 	bl	8008418 <HAL_TIM_Base_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001340:	f000 f87e 	bl	8001440 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001344:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001348:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800134a:	f107 0310 	add.w	r3, r7, #16
 800134e:	4619      	mov	r1, r3
 8001350:	480c      	ldr	r0, [pc, #48]	@ (8001384 <MX_TIM2_Init+0x94>)
 8001352:	f007 fa0e 	bl	8008772 <HAL_TIM_ConfigClockSource>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800135c:	f000 f870 	bl	8001440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001360:	2320      	movs	r3, #32
 8001362:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001364:	2300      	movs	r3, #0
 8001366:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	4619      	mov	r1, r3
 800136c:	4805      	ldr	r0, [pc, #20]	@ (8001384 <MX_TIM2_Init+0x94>)
 800136e:	f007 fbfd 	bl	8008b6c <HAL_TIMEx_MasterConfigSynchronization>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001378:	f000 f862 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800137c:	bf00      	nop
 800137e:	3720      	adds	r7, #32
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20000430 	.word	0x20000430
 8001388:	0003e7ff 	.word	0x0003e7ff

0800138c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001390:	2004      	movs	r0, #4
 8001392:	f7ff fd77 	bl	8000e84 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001396:	2001      	movs	r0, #1
 8001398:	f7ff fd74 	bl	8000e84 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800139c:	2200      	movs	r2, #0
 800139e:	2100      	movs	r1, #0
 80013a0:	200b      	movs	r0, #11
 80013a2:	f002 f902 	bl	80035aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013a6:	200b      	movs	r0, #11
 80013a8:	f002 f919 	bl	80035de <HAL_NVIC_EnableIRQ>

}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013c4:	2004      	movs	r0, #4
 80013c6:	f7ff fd76 	bl	8000eb6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ca:	2002      	movs	r0, #2
 80013cc:	f7ff fd73 	bl	8000eb6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d0:	2001      	movs	r0, #1
 80013d2:	f7ff fd70 	bl	8000eb6 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TIMING_GPIO_Port, TIMING_Pin, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2101      	movs	r1, #1
 80013da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013de:	f002 fd6b 	bl	8003eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TIMING_Pin */
  GPIO_InitStruct.Pin = TIMING_Pin;
 80013e2:	2301      	movs	r3, #1
 80013e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e6:	2301      	movs	r3, #1
 80013e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80013ee:	2301      	movs	r3, #1
 80013f0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(TIMING_GPIO_Port, &GPIO_InitStruct);
 80013f2:	1d3b      	adds	r3, r7, #4
 80013f4:	4619      	mov	r1, r3
 80013f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013fa:	f002 fbed 	bl	8003bd8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013fe:	bf00      	nop
 8001400:	3718      	adds	r7, #24
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <prepare_data_packet_audio>:
    buffer[1 + 2 * sizeof(float) * 3 + sizeof(uint16_t)] = (uint16_t)var2;*/

    // Set the total length of the packet
    *length = 1 + 2 * sizeof(float) * 3 + 2*sizeof(uint16_t);
}
void prepare_data_packet_audio(uint16_t var1, uint16_t var2, uint8_t *buffer, size_t *length) {
 8001406:	b480      	push	{r7}
 8001408:	b085      	sub	sp, #20
 800140a:	af00      	add	r7, sp, #0
 800140c:	60ba      	str	r2, [r7, #8]
 800140e:	607b      	str	r3, [r7, #4]
 8001410:	4603      	mov	r3, r0
 8001412:	81fb      	strh	r3, [r7, #14]
 8001414:	460b      	mov	r3, r1
 8001416:	81bb      	strh	r3, [r7, #12]
    // Define the start byte
    buffer[0] = (uint8_t)-128;
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	2280      	movs	r2, #128	@ 0x80
 800141c:	701a      	strb	r2, [r3, #0]
    memcpy(&buffer[1], &var1, sizeof(uint16_t));
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	3301      	adds	r3, #1
 8001422:	89fa      	ldrh	r2, [r7, #14]
 8001424:	801a      	strh	r2, [r3, #0]
    memcpy(&buffer[1 + sizeof(uint16_t)], &var2, sizeof(uint16_t));
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	3303      	adds	r3, #3
 800142a:	89ba      	ldrh	r2, [r7, #12]
 800142c:	801a      	strh	r2, [r3, #0]

    // Set the total length of the packet
    *length = 1 + 2*sizeof(uint16_t);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2205      	movs	r2, #5
 8001432:	601a      	str	r2, [r3, #0]
}
 8001434:	bf00      	nop
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001444:	b672      	cpsid	i
}
 8001446:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <Error_Handler+0x8>

0800144c <LL_AHB2_GRP1_EnableClock>:
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001454:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001458:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800145a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4313      	orrs	r3, r2
 8001462:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001464:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001468:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4013      	ands	r3, r2
 800146e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001470:	68fb      	ldr	r3, [r7, #12]
}
 8001472:	bf00      	nop
 8001474:	3714      	adds	r7, #20
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800147e:	b480      	push	{r7}
 8001480:	b085      	sub	sp, #20
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001486:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800148a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800148c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4313      	orrs	r3, r2
 8001494:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001496:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800149a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4013      	ands	r3, r2
 80014a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014a2:	68fb      	ldr	r3, [r7, #12]
}
 80014a4:	bf00      	nop
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
	...

080014c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b088      	sub	sp, #32
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 030c 	add.w	r3, r7, #12
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a26      	ldr	r2, [pc, #152]	@ (8001578 <HAL_ADC_MspInit+0xb8>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d145      	bne.n	800156e <HAL_ADC_MspInit+0xae>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80014e2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80014e6:	f7ff ffb1 	bl	800144c <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ea:	2004      	movs	r0, #4
 80014ec:	f7ff ffae 	bl	800144c <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014f0:	2303      	movs	r3, #3
 80014f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014f4:	2303      	movs	r3, #3
 80014f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014fc:	f107 030c 	add.w	r3, r7, #12
 8001500:	4619      	mov	r1, r3
 8001502:	481e      	ldr	r0, [pc, #120]	@ (800157c <HAL_ADC_MspInit+0xbc>)
 8001504:	f002 fb68 	bl	8003bd8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001508:	4b1d      	ldr	r3, [pc, #116]	@ (8001580 <HAL_ADC_MspInit+0xc0>)
 800150a:	4a1e      	ldr	r2, [pc, #120]	@ (8001584 <HAL_ADC_MspInit+0xc4>)
 800150c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800150e:	4b1c      	ldr	r3, [pc, #112]	@ (8001580 <HAL_ADC_MspInit+0xc0>)
 8001510:	2205      	movs	r2, #5
 8001512:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001514:	4b1a      	ldr	r3, [pc, #104]	@ (8001580 <HAL_ADC_MspInit+0xc0>)
 8001516:	2200      	movs	r2, #0
 8001518:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800151a:	4b19      	ldr	r3, [pc, #100]	@ (8001580 <HAL_ADC_MspInit+0xc0>)
 800151c:	2200      	movs	r2, #0
 800151e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001520:	4b17      	ldr	r3, [pc, #92]	@ (8001580 <HAL_ADC_MspInit+0xc0>)
 8001522:	2280      	movs	r2, #128	@ 0x80
 8001524:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001526:	4b16      	ldr	r3, [pc, #88]	@ (8001580 <HAL_ADC_MspInit+0xc0>)
 8001528:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800152c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800152e:	4b14      	ldr	r3, [pc, #80]	@ (8001580 <HAL_ADC_MspInit+0xc0>)
 8001530:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001534:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001536:	4b12      	ldr	r3, [pc, #72]	@ (8001580 <HAL_ADC_MspInit+0xc0>)
 8001538:	2220      	movs	r2, #32
 800153a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800153c:	4b10      	ldr	r3, [pc, #64]	@ (8001580 <HAL_ADC_MspInit+0xc0>)
 800153e:	2200      	movs	r2, #0
 8001540:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001542:	480f      	ldr	r0, [pc, #60]	@ (8001580 <HAL_ADC_MspInit+0xc0>)
 8001544:	f002 f866 	bl	8003614 <HAL_DMA_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <HAL_ADC_MspInit+0x92>
    {
      Error_Handler();
 800154e:	f7ff ff77 	bl	8001440 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a0a      	ldr	r2, [pc, #40]	@ (8001580 <HAL_ADC_MspInit+0xc0>)
 8001556:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001558:	4a09      	ldr	r2, [pc, #36]	@ (8001580 <HAL_ADC_MspInit+0xc0>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 2, 0);
 800155e:	2200      	movs	r2, #0
 8001560:	2102      	movs	r1, #2
 8001562:	2012      	movs	r0, #18
 8001564:	f002 f821 	bl	80035aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001568:	2012      	movs	r0, #18
 800156a:	f002 f838 	bl	80035de <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800156e:	bf00      	nop
 8001570:	3720      	adds	r7, #32
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	50040000 	.word	0x50040000
 800157c:	48000800 	.word	0x48000800
 8001580:	2000037c 	.word	0x2000037c
 8001584:	40020008 	.word	0x40020008

08001588 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b09c      	sub	sp, #112	@ 0x70
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	2250      	movs	r2, #80	@ 0x50
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f00d fe66 	bl	800f27a <memset>
  if(hi2c->Instance==I2C1)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a1f      	ldr	r2, [pc, #124]	@ (8001630 <HAL_I2C_MspInit+0xa8>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d136      	bne.n	8001626 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015b8:	2304      	movs	r3, #4
 80015ba:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015bc:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 80015c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015c2:	f107 030c 	add.w	r3, r7, #12
 80015c6:	4618      	mov	r0, r3
 80015c8:	f006 fc9f 	bl	8007f0a <HAL_RCCEx_PeriphCLKConfig>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80015d2:	f7ff ff35 	bl	8001440 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d6:	2002      	movs	r0, #2
 80015d8:	f7ff ff38 	bl	800144c <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015dc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80015e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015e2:	2312      	movs	r3, #18
 80015e4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2300      	movs	r3, #0
 80015ec:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015ee:	2304      	movs	r3, #4
 80015f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015f2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80015f6:	4619      	mov	r1, r3
 80015f8:	480e      	ldr	r0, [pc, #56]	@ (8001634 <HAL_I2C_MspInit+0xac>)
 80015fa:	f002 faed 	bl	8003bd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015fe:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001602:	f7ff ff3c 	bl	800147e <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001606:	2200      	movs	r2, #0
 8001608:	2100      	movs	r1, #0
 800160a:	201e      	movs	r0, #30
 800160c:	f001 ffcd 	bl	80035aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001610:	201e      	movs	r0, #30
 8001612:	f001 ffe4 	bl	80035de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001616:	2200      	movs	r2, #0
 8001618:	2100      	movs	r1, #0
 800161a:	201f      	movs	r0, #31
 800161c:	f001 ffc5 	bl	80035aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001620:	201f      	movs	r0, #31
 8001622:	f001 ffdc 	bl	80035de <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001626:	bf00      	nop
 8001628:	3770      	adds	r7, #112	@ 0x70
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40005400 	.word	0x40005400
 8001634:	48000400 	.word	0x48000400

08001638 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001648:	d10a      	bne.n	8001660 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800164a:	2001      	movs	r0, #1
 800164c:	f7ff ff17 	bl	800147e <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001650:	2200      	movs	r2, #0
 8001652:	2100      	movs	r1, #0
 8001654:	201c      	movs	r0, #28
 8001656:	f001 ffa8 	bl	80035aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800165a:	201c      	movs	r0, #28
 800165c:	f001 ffbf 	bl	80035de <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800166c:	bf00      	nop
 800166e:	e7fd      	b.n	800166c <NMI_Handler+0x4>

08001670 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001674:	bf00      	nop
 8001676:	e7fd      	b.n	8001674 <HardFault_Handler+0x4>

08001678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800167c:	bf00      	nop
 800167e:	e7fd      	b.n	800167c <MemManage_Handler+0x4>

08001680 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001684:	bf00      	nop
 8001686:	e7fd      	b.n	8001684 <BusFault_Handler+0x4>

08001688 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800168c:	bf00      	nop
 800168e:	e7fd      	b.n	800168c <UsageFault_Handler+0x4>

08001690 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001694:	bf00      	nop
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800169e:	b480      	push	{r7}
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016b0:	bf00      	nop
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr

080016ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016be:	f000 fbad 	bl	8001e1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 80016ca:	2001      	movs	r0, #1
 80016cc:	f002 fc26 	bl	8003f1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 80016d8:	2002      	movs	r0, #2
 80016da:	f002 fc1f 	bl	8003f1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 80016e6:	2010      	movs	r0, #16
 80016e8:	f002 fc18 	bl	8003f1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80016ec:	bf00      	nop
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016f4:	4802      	ldr	r0, [pc, #8]	@ (8001700 <DMA1_Channel1_IRQHandler+0x10>)
 80016f6:	f002 f90f 	bl	8003918 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	2000037c 	.word	0x2000037c

08001704 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001708:	4802      	ldr	r0, [pc, #8]	@ (8001714 <ADC1_IRQHandler+0x10>)
 800170a:	f000 ff8f 	bl	800262c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000318 	.word	0x20000318

08001718 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt.
  */
void USB_HP_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800171c:	4802      	ldr	r0, [pc, #8]	@ (8001728 <USB_HP_IRQHandler+0x10>)
 800171e:	f003 fc5b 	bl	8004fd8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20001a30 	.word	0x20001a30

0800172c <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001730:	4802      	ldr	r0, [pc, #8]	@ (800173c <USB_LP_IRQHandler+0x10>)
 8001732:	f003 fc51 	bl	8004fd8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20001a30 	.word	0x20001a30

08001740 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001744:	4802      	ldr	r0, [pc, #8]	@ (8001750 <TIM2_IRQHandler+0x10>)
 8001746:	f006 ff0d 	bl	8008564 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000430 	.word	0x20000430

08001754 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001758:	4802      	ldr	r0, [pc, #8]	@ (8001764 <I2C1_EV_IRQHandler+0x10>)
 800175a:	f002 fc9d 	bl	8004098 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	200003dc 	.word	0x200003dc

08001768 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800176c:	4802      	ldr	r0, [pc, #8]	@ (8001778 <I2C1_ER_IRQHandler+0x10>)
 800176e:	f002 fcad 	bl	80040cc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	200003dc 	.word	0x200003dc

0800177c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return 1;
 8001780:	2301      	movs	r3, #1
}
 8001782:	4618      	mov	r0, r3
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <_kill>:

int _kill(int pid, int sig)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001796:	f00d fdc3 	bl	800f320 <__errno>
 800179a:	4603      	mov	r3, r0
 800179c:	2216      	movs	r2, #22
 800179e:	601a      	str	r2, [r3, #0]
  return -1;
 80017a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <_exit>:

void _exit (int status)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017b4:	f04f 31ff 	mov.w	r1, #4294967295
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff ffe7 	bl	800178c <_kill>
  while (1) {}    /* Make sure we hang here */
 80017be:	bf00      	nop
 80017c0:	e7fd      	b.n	80017be <_exit+0x12>

080017c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b086      	sub	sp, #24
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	60f8      	str	r0, [r7, #12]
 80017ca:	60b9      	str	r1, [r7, #8]
 80017cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
 80017d2:	e00a      	b.n	80017ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017d4:	f3af 8000 	nop.w
 80017d8:	4601      	mov	r1, r0
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	1c5a      	adds	r2, r3, #1
 80017de:	60ba      	str	r2, [r7, #8]
 80017e0:	b2ca      	uxtb	r2, r1
 80017e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	3301      	adds	r3, #1
 80017e8:	617b      	str	r3, [r7, #20]
 80017ea:	697a      	ldr	r2, [r7, #20]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	dbf0      	blt.n	80017d4 <_read+0x12>
  }

  return len;
 80017f2:	687b      	ldr	r3, [r7, #4]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	e009      	b.n	8001822 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	1c5a      	adds	r2, r3, #1
 8001812:	60ba      	str	r2, [r7, #8]
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f000 fa5a 	bl	8001cd0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	3301      	adds	r3, #1
 8001820:	617b      	str	r3, [r7, #20]
 8001822:	697a      	ldr	r2, [r7, #20]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	429a      	cmp	r2, r3
 8001828:	dbf1      	blt.n	800180e <_write+0x12>
  }
  return len;
 800182a:	687b      	ldr	r3, [r7, #4]
}
 800182c:	4618      	mov	r0, r3
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <_close>:

int _close(int file)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800183c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001840:	4618      	mov	r0, r3
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800185c:	605a      	str	r2, [r3, #4]
  return 0;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <_isatty>:

int _isatty(int file)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001874:	2301      	movs	r3, #1
}
 8001876:	4618      	mov	r0, r3
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001882:	b480      	push	{r7}
 8001884:	b085      	sub	sp, #20
 8001886:	af00      	add	r7, sp, #0
 8001888:	60f8      	str	r0, [r7, #12]
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018a4:	4a14      	ldr	r2, [pc, #80]	@ (80018f8 <_sbrk+0x5c>)
 80018a6:	4b15      	ldr	r3, [pc, #84]	@ (80018fc <_sbrk+0x60>)
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018b0:	4b13      	ldr	r3, [pc, #76]	@ (8001900 <_sbrk+0x64>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d102      	bne.n	80018be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018b8:	4b11      	ldr	r3, [pc, #68]	@ (8001900 <_sbrk+0x64>)
 80018ba:	4a12      	ldr	r2, [pc, #72]	@ (8001904 <_sbrk+0x68>)
 80018bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018be:	4b10      	ldr	r3, [pc, #64]	@ (8001900 <_sbrk+0x64>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4413      	add	r3, r2
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d207      	bcs.n	80018dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018cc:	f00d fd28 	bl	800f320 <__errno>
 80018d0:	4603      	mov	r3, r0
 80018d2:	220c      	movs	r2, #12
 80018d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018d6:	f04f 33ff 	mov.w	r3, #4294967295
 80018da:	e009      	b.n	80018f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018dc:	4b08      	ldr	r3, [pc, #32]	@ (8001900 <_sbrk+0x64>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018e2:	4b07      	ldr	r3, [pc, #28]	@ (8001900 <_sbrk+0x64>)
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4413      	add	r3, r2
 80018ea:	4a05      	ldr	r2, [pc, #20]	@ (8001900 <_sbrk+0x64>)
 80018ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ee:	68fb      	ldr	r3, [r7, #12]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20030000 	.word	0x20030000
 80018fc:	00000400 	.word	0x00000400
 8001900:	200004b0 	.word	0x200004b0
 8001904:	20002078 	.word	0x20002078

08001908 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 800190c:	4b24      	ldr	r3, [pc, #144]	@ (80019a0 <SystemInit+0x98>)
 800190e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001912:	4a23      	ldr	r2, [pc, #140]	@ (80019a0 <SystemInit+0x98>)
 8001914:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001918:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800191c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800192c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001930:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8001934:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001936:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001940:	4b18      	ldr	r3, [pc, #96]	@ (80019a4 <SystemInit+0x9c>)
 8001942:	4013      	ands	r3, r2
 8001944:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001946:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800194a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800194e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001952:	f023 0305 	bic.w	r3, r3, #5
 8001956:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800195a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800195e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001962:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001966:	f023 0301 	bic.w	r3, r3, #1
 800196a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800196e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001972:	4a0d      	ldr	r2, [pc, #52]	@ (80019a8 <SystemInit+0xa0>)
 8001974:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001976:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800197a:	4a0b      	ldr	r2, [pc, #44]	@ (80019a8 <SystemInit+0xa0>)
 800197c:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800197e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001988:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800198c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800198e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001992:	2200      	movs	r2, #0
 8001994:	619a      	str	r2, [r3, #24]
}
 8001996:	bf00      	nop
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	e000ed00 	.word	0xe000ed00
 80019a4:	faf6fefb 	.word	0xfaf6fefb
 80019a8:	22041000 	.word	0x22041000

080019ac <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80019ac:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019ae:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019b0:	3304      	adds	r3, #4

080019b2 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019b2:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019b4:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80019b6:	d3f9      	bcc.n	80019ac <CopyDataInit>
  bx lr
 80019b8:	4770      	bx	lr

080019ba <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80019ba:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80019bc:	3004      	adds	r0, #4

080019be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80019be:	4288      	cmp	r0, r1
  bcc FillZerobss
 80019c0:	d3fb      	bcc.n	80019ba <FillZerobss>
  bx lr
 80019c2:	4770      	bx	lr

080019c4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019c4:	480c      	ldr	r0, [pc, #48]	@ (80019f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019c6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80019c8:	f7ff ff9e 	bl	8001908 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80019cc:	480b      	ldr	r0, [pc, #44]	@ (80019fc <LoopForever+0x6>)
 80019ce:	490c      	ldr	r1, [pc, #48]	@ (8001a00 <LoopForever+0xa>)
 80019d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001a04 <LoopForever+0xe>)
 80019d2:	2300      	movs	r3, #0
 80019d4:	f7ff ffed 	bl	80019b2 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80019d8:	480b      	ldr	r0, [pc, #44]	@ (8001a08 <LoopForever+0x12>)
 80019da:	490c      	ldr	r1, [pc, #48]	@ (8001a0c <LoopForever+0x16>)
 80019dc:	4a0c      	ldr	r2, [pc, #48]	@ (8001a10 <LoopForever+0x1a>)
 80019de:	2300      	movs	r3, #0
 80019e0:	f7ff ffe7 	bl	80019b2 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80019e4:	480b      	ldr	r0, [pc, #44]	@ (8001a14 <LoopForever+0x1e>)
 80019e6:	490c      	ldr	r1, [pc, #48]	@ (8001a18 <LoopForever+0x22>)
 80019e8:	2300      	movs	r3, #0
 80019ea:	f7ff ffe8 	bl	80019be <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80019ee:	f00d fc9d 	bl	800f32c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80019f2:	f7ff faa3 	bl	8000f3c <main>

080019f6 <LoopForever>:

LoopForever:
  b LoopForever
 80019f6:	e7fe      	b.n	80019f6 <LoopForever>
  ldr   r0, =_estack
 80019f8:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80019fc:	20000008 	.word	0x20000008
 8001a00:	200002ec 	.word	0x200002ec
 8001a04:	08011644 	.word	0x08011644
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8001a08:	20030000 	.word	0x20030000
 8001a0c:	20030000 	.word	0x20030000
 8001a10:	08011928 	.word	0x08011928
  INIT_BSS _sbss, _ebss
 8001a14:	200002ec 	.word	0x200002ec
 8001a18:	20002078 	.word	0x20002078

08001a1c <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a1c:	e7fe      	b.n	8001a1c <AES1_IRQHandler>

08001a1e <LL_AHB2_GRP1_EnableClock>:
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b085      	sub	sp, #20
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a2c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a3a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a42:	68fb      	ldr	r3, [r7, #12]
}
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001a58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a5c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001a68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a6c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4013      	ands	r3, r2
 8001a72:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a74:	68fb      	ldr	r3, [r7, #12]
}
 8001a76:	bf00      	nop
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
	...

08001a84 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b088      	sub	sp, #32
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8001a8e:	f107 030c 	add.w	r3, r7, #12
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	609a      	str	r2, [r3, #8]
 8001a9a:	60da      	str	r2, [r3, #12]
 8001a9c:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001a9e:	2002      	movs	r0, #2
 8001aa0:	f7ff ffbd 	bl	8001a1e <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	4a12      	ldr	r2, [pc, #72]	@ (8001af0 <BSP_LED_Init+0x6c>)
 8001aa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001aac:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	4a0d      	ldr	r2, [pc, #52]	@ (8001af4 <BSP_LED_Init+0x70>)
 8001abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac2:	f107 020c 	add.w	r2, r7, #12
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f002 f885 	bl	8003bd8 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	4a08      	ldr	r2, [pc, #32]	@ (8001af4 <BSP_LED_Init+0x70>)
 8001ad2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	4a05      	ldr	r2, [pc, #20]	@ (8001af0 <BSP_LED_Init+0x6c>)
 8001ada:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f002 f9e9 	bl	8003eb8 <HAL_GPIO_WritePin>
}
 8001ae6:	bf00      	nop
 8001ae8:	3720      	adds	r7, #32
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	08011294 	.word	0x08011294
 8001af4:	2000000c 	.word	0x2000000c

08001af8 <BSP_LED_Toggle>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	4a07      	ldr	r2, [pc, #28]	@ (8001b24 <BSP_LED_Toggle+0x2c>)
 8001b06:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	4906      	ldr	r1, [pc, #24]	@ (8001b28 <BSP_LED_Toggle+0x30>)
 8001b0e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001b12:	4619      	mov	r1, r3
 8001b14:	4610      	mov	r0, r2
 8001b16:	f002 f9e7 	bl	8003ee8 <HAL_GPIO_TogglePin>
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	2000000c 	.word	0x2000000c
 8001b28:	08011294 	.word	0x08011294

08001b2c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b088      	sub	sp, #32
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	460a      	mov	r2, r1
 8001b36:	71fb      	strb	r3, [r7, #7]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8001b3c:	f107 030c 	add.w	r3, r7, #12
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d103      	bne.n	8001b5a <BSP_PB_Init+0x2e>
 8001b52:	2004      	movs	r0, #4
 8001b54:	f7ff ff63 	bl	8001a1e <LL_AHB2_GRP1_EnableClock>
 8001b58:	e00c      	b.n	8001b74 <BSP_PB_Init+0x48>
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d103      	bne.n	8001b68 <BSP_PB_Init+0x3c>
 8001b60:	2008      	movs	r0, #8
 8001b62:	f7ff ff5c 	bl	8001a1e <LL_AHB2_GRP1_EnableClock>
 8001b66:	e005      	b.n	8001b74 <BSP_PB_Init+0x48>
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d102      	bne.n	8001b74 <BSP_PB_Init+0x48>
 8001b6e:	2008      	movs	r0, #8
 8001b70:	f7ff ff55 	bl	8001a1e <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8001b74:	79bb      	ldrb	r3, [r7, #6]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d117      	bne.n	8001baa <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	4a20      	ldr	r2, [pc, #128]	@ (8001c00 <BSP_PB_Init+0xd4>)
 8001b7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b82:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8001b84:	2300      	movs	r3, #0
 8001b86:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	4a1c      	ldr	r2, [pc, #112]	@ (8001c04 <BSP_PB_Init+0xd8>)
 8001b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b98:	f107 020c 	add.w	r2, r7, #12
 8001b9c:	4611      	mov	r1, r2
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f002 f81a 	bl	8003bd8 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8001ba4:	2001      	movs	r0, #1
 8001ba6:	f000 f965 	bl	8001e74 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8001baa:	79bb      	ldrb	r3, [r7, #6]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d123      	bne.n	8001bf8 <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	4a13      	ldr	r2, [pc, #76]	@ (8001c00 <BSP_PB_Init+0xd4>)
 8001bb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bb8:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8001bbe:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001bc2:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	4a0f      	ldr	r2, [pc, #60]	@ (8001c04 <BSP_PB_Init+0xd8>)
 8001bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bcc:	f107 020c 	add.w	r2, r7, #12
 8001bd0:	4611      	mov	r1, r2
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f002 f800 	bl	8003bd8 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
 8001bda:	4a0b      	ldr	r2, [pc, #44]	@ (8001c08 <BSP_PB_Init+0xdc>)
 8001bdc:	5cd3      	ldrb	r3, [r2, r3]
 8001bde:	b25b      	sxtb	r3, r3
 8001be0:	2200      	movs	r2, #0
 8001be2:	210f      	movs	r1, #15
 8001be4:	4618      	mov	r0, r3
 8001be6:	f001 fce0 	bl	80035aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	4a06      	ldr	r2, [pc, #24]	@ (8001c08 <BSP_PB_Init+0xdc>)
 8001bee:	5cd3      	ldrb	r3, [r2, r3]
 8001bf0:	b25b      	sxtb	r3, r3
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f001 fcf3 	bl	80035de <HAL_NVIC_EnableIRQ>
  }
}
 8001bf8:	bf00      	nop
 8001bfa:	3720      	adds	r7, #32
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	0801129c 	.word	0x0801129c
 8001c04:	20000018 	.word	0x20000018
 8001c08:	080112a4 	.word	0x080112a4

08001c0c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	6039      	str	r1, [r7, #0]
 8001c16:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d903      	bls.n	8001c2a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001c22:	f06f 0301 	mvn.w	r3, #1
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	e018      	b.n	8001c5c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001c2a:	79fb      	ldrb	r3, [r7, #7]
 8001c2c:	2294      	movs	r2, #148	@ 0x94
 8001c2e:	fb02 f303 	mul.w	r3, r2, r3
 8001c32:	4a0d      	ldr	r2, [pc, #52]	@ (8001c68 <BSP_COM_Init+0x5c>)
 8001c34:	4413      	add	r3, r2
 8001c36:	4618      	mov	r0, r3
 8001c38:	f000 f866 	bl	8001d08 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	2294      	movs	r2, #148	@ 0x94
 8001c40:	fb02 f303 	mul.w	r3, r2, r3
 8001c44:	4a08      	ldr	r2, [pc, #32]	@ (8001c68 <BSP_COM_Init+0x5c>)
 8001c46:	4413      	add	r3, r2
 8001c48:	6839      	ldr	r1, [r7, #0]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 f80e 	bl	8001c6c <MX_LPUART1_Init>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d002      	beq.n	8001c5c <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8001c56:	f06f 0303 	mvn.w	r3, #3
 8001c5a:	e000      	b.n	8001c5e <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	200004b4 	.word	0x200004b4

08001c6c <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001c76:	4b15      	ldr	r3, [pc, #84]	@ (8001ccc <MX_LPUART1_Init+0x60>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	220c      	movs	r2, #12
 8001c8a:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	895b      	ldrh	r3, [r3, #10]
 8001c90:	461a      	mov	r2, r3
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	891b      	ldrh	r3, [r3, #8]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	899b      	ldrh	r3, [r3, #12]
 8001cac:	461a      	mov	r2, r3
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001cb8:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f006 fff4 	bl	8008ca8 <HAL_UART_Init>
 8001cc0:	4603      	mov	r3, r0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000024 	.word	0x20000024

08001cd0 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001cd8:	4b09      	ldr	r3, [pc, #36]	@ (8001d00 <__io_putchar+0x30>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	2394      	movs	r3, #148	@ 0x94
 8001ce0:	fb02 f303 	mul.w	r3, r2, r3
 8001ce4:	4a07      	ldr	r2, [pc, #28]	@ (8001d04 <__io_putchar+0x34>)
 8001ce6:	1898      	adds	r0, r3, r2
 8001ce8:	1d39      	adds	r1, r7, #4
 8001cea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f007 f834 	bl	8008d5c <HAL_UART_Transmit>
  return ch;
 8001cf4:	687b      	ldr	r3, [r7, #4]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000548 	.word	0x20000548
 8001d04:	200004b4 	.word	0x200004b4

08001d08 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b088      	sub	sp, #32
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001d10:	2002      	movs	r0, #2
 8001d12:	f7ff fe84 	bl	8001a1e <LL_AHB2_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
 8001d16:	2002      	movs	r0, #2
 8001d18:	f7ff fe81 	bl	8001a1e <LL_AHB2_GRP1_EnableClock>

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001d1c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001d20:	f7ff fe96 	bl	8001a50 <LL_APB2_GRP1_EnableClock>

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001d24:	2340      	movs	r3, #64	@ 0x40
 8001d26:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001d28:	2302      	movs	r3, #2
 8001d2a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8001d30:	2301      	movs	r3, #1
 8001d32:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001d34:	2307      	movs	r3, #7
 8001d36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001d38:	f107 030c 	add.w	r3, r7, #12
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4809      	ldr	r0, [pc, #36]	@ (8001d64 <COM1_MspInit+0x5c>)
 8001d40:	f001 ff4a 	bl	8003bd8 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001d44:	2380      	movs	r3, #128	@ 0x80
 8001d46:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001d4c:	2307      	movs	r3, #7
 8001d4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001d50:	f107 030c 	add.w	r3, r7, #12
 8001d54:	4619      	mov	r1, r3
 8001d56:	4803      	ldr	r0, [pc, #12]	@ (8001d64 <COM1_MspInit+0x5c>)
 8001d58:	f001 ff3e 	bl	8003bd8 <HAL_GPIO_Init>
}
 8001d5c:	bf00      	nop
 8001d5e:	3720      	adds	r7, #32
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	48000400 	.word	0x48000400

08001d68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d72:	4b0c      	ldr	r3, [pc, #48]	@ (8001da4 <HAL_Init+0x3c>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a0b      	ldr	r2, [pc, #44]	@ (8001da4 <HAL_Init+0x3c>)
 8001d78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d7c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d7e:	2003      	movs	r0, #3
 8001d80:	f001 fc08 	bl	8003594 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d84:	2000      	movs	r0, #0
 8001d86:	f000 f80f 	bl	8001da8 <HAL_InitTick>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d002      	beq.n	8001d96 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	71fb      	strb	r3, [r7, #7]
 8001d94:	e001      	b.n	8001d9a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d96:	f7ff fb8b 	bl	80014b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d9a:	79fb      	ldrb	r3, [r7, #7]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	58004000 	.word	0x58004000

08001da8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001db0:	2300      	movs	r3, #0
 8001db2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8001db4:	4b17      	ldr	r3, [pc, #92]	@ (8001e14 <HAL_InitTick+0x6c>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d024      	beq.n	8001e06 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001dbc:	f005 fe14 	bl	80079e8 <HAL_RCC_GetHCLKFreq>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	4b14      	ldr	r3, [pc, #80]	@ (8001e14 <HAL_InitTick+0x6c>)
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dcc:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f001 fc10 	bl	80035fa <HAL_SYSTICK_Config>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d10f      	bne.n	8001e00 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b0f      	cmp	r3, #15
 8001de4:	d809      	bhi.n	8001dfa <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de6:	2200      	movs	r2, #0
 8001de8:	6879      	ldr	r1, [r7, #4]
 8001dea:	f04f 30ff 	mov.w	r0, #4294967295
 8001dee:	f001 fbdc 	bl	80035aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001df2:	4a09      	ldr	r2, [pc, #36]	@ (8001e18 <HAL_InitTick+0x70>)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6013      	str	r3, [r2, #0]
 8001df8:	e007      	b.n	8001e0a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	73fb      	strb	r3, [r7, #15]
 8001dfe:	e004      	b.n	8001e0a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	73fb      	strb	r3, [r7, #15]
 8001e04:	e001      	b.n	8001e0a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	2000002c 	.word	0x2000002c
 8001e18:	20000028 	.word	0x20000028

08001e1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e20:	4b06      	ldr	r3, [pc, #24]	@ (8001e3c <HAL_IncTick+0x20>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	4b06      	ldr	r3, [pc, #24]	@ (8001e40 <HAL_IncTick+0x24>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	4a04      	ldr	r2, [pc, #16]	@ (8001e40 <HAL_IncTick+0x24>)
 8001e2e:	6013      	str	r3, [r2, #0]
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	2000002c 	.word	0x2000002c
 8001e40:	2000054c 	.word	0x2000054c

08001e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  return uwTick;
 8001e48:	4b03      	ldr	r3, [pc, #12]	@ (8001e58 <HAL_GetTick+0x14>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	2000054c 	.word	0x2000054c

08001e5c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001e60:	4b03      	ldr	r3, [pc, #12]	@ (8001e70 <HAL_GetTickPrio+0x14>)
 8001e62:	681b      	ldr	r3, [r3, #0]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	20000028 	.word	0x20000028

08001e74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e7c:	f7ff ffe2 	bl	8001e44 <HAL_GetTick>
 8001e80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e8c:	d005      	beq.n	8001e9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb8 <HAL_Delay+0x44>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	461a      	mov	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4413      	add	r3, r2
 8001e98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e9a:	bf00      	nop
 8001e9c:	f7ff ffd2 	bl	8001e44 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	68fa      	ldr	r2, [r7, #12]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d8f7      	bhi.n	8001e9c <HAL_Delay+0x28>
  {
  }
}
 8001eac:	bf00      	nop
 8001eae:	bf00      	nop
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	2000002c 	.word	0x2000002c

08001ebc <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
 8001eea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	431a      	orrs	r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	609a      	str	r2, [r3, #8]
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b087      	sub	sp, #28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
 8001f30:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	3360      	adds	r3, #96	@ 0x60
 8001f36:	461a      	mov	r2, r3
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4b08      	ldr	r3, [pc, #32]	@ (8001f68 <LL_ADC_SetOffset+0x44>)
 8001f46:	4013      	ands	r3, r2
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	430a      	orrs	r2, r1
 8001f52:	4313      	orrs	r3, r2
 8001f54:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001f5c:	bf00      	nop
 8001f5e:	371c      	adds	r7, #28
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	03fff000 	.word	0x03fff000

08001f6c <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	3360      	adds	r3, #96	@ 0x60
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr

08001f98 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b087      	sub	sp, #28
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	3360      	adds	r3, #96	@ 0x60
 8001fa8:	461a      	mov	r2, r3
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	431a      	orrs	r2, r3
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001fc2:	bf00      	nop
 8001fc4:	371c      	adds	r7, #28
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	b083      	sub	sp, #12
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e000      	b.n	8001fe8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001fe6:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b087      	sub	sp, #28
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	3330      	adds	r3, #48	@ 0x30
 8002004:	461a      	mov	r2, r3
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	0a1b      	lsrs	r3, r3, #8
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	f003 030c 	and.w	r3, r3, #12
 8002010:	4413      	add	r3, r2
 8002012:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	f003 031f 	and.w	r3, r3, #31
 800201e:	211f      	movs	r1, #31
 8002020:	fa01 f303 	lsl.w	r3, r1, r3
 8002024:	43db      	mvns	r3, r3
 8002026:	401a      	ands	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	0e9b      	lsrs	r3, r3, #26
 800202c:	f003 011f 	and.w	r1, r3, #31
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	f003 031f 	and.w	r3, r3, #31
 8002036:	fa01 f303 	lsl.w	r3, r1, r3
 800203a:	431a      	orrs	r2, r3
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8002040:	bf00      	nop
 8002042:	371c      	adds	r7, #28
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	f003 0303 	and.w	r3, r3, #3
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800205c:	4618      	mov	r0, r3
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002074:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800207c:	2301      	movs	r3, #1
 800207e:	e000      	b.n	8002082 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr

0800208e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800208e:	b480      	push	{r7}
 8002090:	b087      	sub	sp, #28
 8002092:	af00      	add	r7, sp, #0
 8002094:	60f8      	str	r0, [r7, #12]
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	3314      	adds	r3, #20
 800209e:	461a      	mov	r2, r3
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	0e5b      	lsrs	r3, r3, #25
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	f003 0304 	and.w	r3, r3, #4
 80020aa:	4413      	add	r3, r2
 80020ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	0d1b      	lsrs	r3, r3, #20
 80020b6:	f003 031f 	and.w	r3, r3, #31
 80020ba:	2107      	movs	r1, #7
 80020bc:	fa01 f303 	lsl.w	r3, r1, r3
 80020c0:	43db      	mvns	r3, r3
 80020c2:	401a      	ands	r2, r3
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	0d1b      	lsrs	r3, r3, #20
 80020c8:	f003 031f 	and.w	r3, r3, #31
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	fa01 f303 	lsl.w	r3, r1, r3
 80020d2:	431a      	orrs	r2, r3
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80020d8:	bf00      	nop
 80020da:	371c      	adds	r7, #28
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020fc:	43db      	mvns	r3, r3
 80020fe:	401a      	ands	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f003 0318 	and.w	r3, r3, #24
 8002106:	4908      	ldr	r1, [pc, #32]	@ (8002128 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002108:	40d9      	lsrs	r1, r3
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	400b      	ands	r3, r1
 800210e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002112:	431a      	orrs	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800211a:	bf00      	nop
 800211c:	3714      	adds	r7, #20
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	0007ffff 	.word	0x0007ffff

0800212c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800213c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6093      	str	r3, [r2, #8]
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002160:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002164:	d101      	bne.n	800216a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002188:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800218c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80021b4:	d101      	bne.n	80021ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80021d8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80021dc:	f043 0201 	orr.w	r2, r3, #1
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b01      	cmp	r3, #1
 8002202:	d101      	bne.n	8002208 <LL_ADC_IsEnabled+0x18>
 8002204:	2301      	movs	r3, #1
 8002206:	e000      	b.n	800220a <LL_ADC_IsEnabled+0x1a>
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002226:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800222a:	f043 0204 	orr.w	r2, r3, #4
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800223e:	b480      	push	{r7}
 8002240:	b083      	sub	sp, #12
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f003 0304 	and.w	r3, r3, #4
 800224e:	2b04      	cmp	r3, #4
 8002250:	d101      	bne.n	8002256 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002252:	2301      	movs	r3, #1
 8002254:	e000      	b.n	8002258 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 0308 	and.w	r3, r3, #8
 8002274:	2b08      	cmp	r3, #8
 8002276:	d101      	bne.n	800227c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002278:	2301      	movs	r3, #1
 800227a:	e000      	b.n	800227e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800227c:	2300      	movs	r3, #0
}
 800227e:	4618      	mov	r0, r3
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
	...

0800228c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b088      	sub	sp, #32
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002294:	2300      	movs	r3, #0
 8002296:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8002298:	2300      	movs	r3, #0
 800229a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800229c:	2300      	movs	r3, #0
 800229e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e12e      	b.n	8002508 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d109      	bne.n	80022cc <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7ff f901 	bl	80014c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff ff3d 	bl	8002150 <LL_ADC_IsDeepPowerDownEnabled>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d004      	beq.n	80022e6 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff ff23 	bl	800212c <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff ff58 	bl	80021a0 <LL_ADC_IsInternalRegulatorEnabled>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d115      	bne.n	8002322 <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff ff3c 	bl	8002178 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002300:	4b83      	ldr	r3, [pc, #524]	@ (8002510 <HAL_ADC_Init+0x284>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	099b      	lsrs	r3, r3, #6
 8002306:	4a83      	ldr	r2, [pc, #524]	@ (8002514 <HAL_ADC_Init+0x288>)
 8002308:	fba2 2303 	umull	r2, r3, r2, r3
 800230c:	099b      	lsrs	r3, r3, #6
 800230e:	3301      	adds	r3, #1
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002314:	e002      	b.n	800231c <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	3b01      	subs	r3, #1
 800231a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f9      	bne.n	8002316 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff ff3a 	bl	80021a0 <LL_ADC_IsInternalRegulatorEnabled>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10d      	bne.n	800234e <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002336:	f043 0210 	orr.w	r2, r3, #16
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002342:	f043 0201 	orr.w	r2, r3, #1
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f7ff ff73 	bl	800223e <LL_ADC_REG_IsConversionOngoing>
 8002358:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800235e:	f003 0310 	and.w	r3, r3, #16
 8002362:	2b00      	cmp	r3, #0
 8002364:	f040 80c7 	bne.w	80024f6 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	2b00      	cmp	r3, #0
 800236c:	f040 80c3 	bne.w	80024f6 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002374:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002378:	f043 0202 	orr.w	r2, r3, #2
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff ff33 	bl	80021f0 <LL_ADC_IsEnabled>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d10b      	bne.n	80023a8 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002390:	4861      	ldr	r0, [pc, #388]	@ (8002518 <HAL_ADC_Init+0x28c>)
 8002392:	f7ff ff2d 	bl	80021f0 <LL_ADC_IsEnabled>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d105      	bne.n	80023a8 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	4619      	mov	r1, r3
 80023a2:	485e      	ldr	r0, [pc, #376]	@ (800251c <HAL_ADC_Init+0x290>)
 80023a4:	f7ff fd8a 	bl	8001ebc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	7e5b      	ldrb	r3, [r3, #25]
 80023ac:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023b2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80023b8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80023be:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023c6:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 80023c8:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d106      	bne.n	80023e8 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023de:	3b01      	subs	r3, #1
 80023e0:	045b      	lsls	r3, r3, #17
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d009      	beq.n	8002404 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023fc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4313      	orrs	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68da      	ldr	r2, [r3, #12]
 800240a:	4b45      	ldr	r3, [pc, #276]	@ (8002520 <HAL_ADC_Init+0x294>)
 800240c:	4013      	ands	r3, r2
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	6812      	ldr	r2, [r2, #0]
 8002412:	69b9      	ldr	r1, [r7, #24]
 8002414:	430b      	orrs	r3, r1
 8002416:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff ff0e 	bl	800223e <LL_ADC_REG_IsConversionOngoing>
 8002422:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff ff1b 	bl	8002264 <LL_ADC_INJ_IsConversionOngoing>
 800242e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d13d      	bne.n	80024b2 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d13a      	bne.n	80024b2 <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002440:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002448:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002458:	f023 0302 	bic.w	r3, r3, #2
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	69b9      	ldr	r1, [r7, #24]
 8002462:	430b      	orrs	r3, r1
 8002464:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800246c:	2b01      	cmp	r3, #1
 800246e:	d118      	bne.n	80024a2 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800247a:	f023 0304 	bic.w	r3, r3, #4
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002486:	4311      	orrs	r1, r2
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800248c:	4311      	orrs	r1, r2
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002492:	430a      	orrs	r2, r1
 8002494:	431a      	orrs	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 0201 	orr.w	r2, r2, #1
 800249e:	611a      	str	r2, [r3, #16]
 80024a0:	e007      	b.n	80024b2 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	691a      	ldr	r2, [r3, #16]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 0201 	bic.w	r2, r2, #1
 80024b0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d10c      	bne.n	80024d4 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c0:	f023 010f 	bic.w	r1, r3, #15
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69db      	ldr	r3, [r3, #28]
 80024c8:	1e5a      	subs	r2, r3, #1
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80024d2:	e007      	b.n	80024e4 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 020f 	bic.w	r2, r2, #15
 80024e2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024e8:	f023 0303 	bic.w	r3, r3, #3
 80024ec:	f043 0201 	orr.w	r2, r3, #1
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	655a      	str	r2, [r3, #84]	@ 0x54
 80024f4:	e007      	b.n	8002506 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024fa:	f043 0210 	orr.w	r2, r3, #16
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002506:	7ffb      	ldrb	r3, [r7, #31]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3720      	adds	r7, #32
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	20000008 	.word	0x20000008
 8002514:	053e2d63 	.word	0x053e2d63
 8002518:	50040000 	.word	0x50040000
 800251c:	50040300 	.word	0x50040300
 8002520:	fff0c007 	.word	0xfff0c007

08002524 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff fe82 	bl	800223e <LL_ADC_REG_IsConversionOngoing>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d167      	bne.n	8002610 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002546:	2b01      	cmp	r3, #1
 8002548:	d101      	bne.n	800254e <HAL_ADC_Start_DMA+0x2a>
 800254a:	2302      	movs	r3, #2
 800254c:	e063      	b.n	8002616 <HAL_ADC_Start_DMA+0xf2>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f000 fe0c 	bl	8003174 <ADC_Enable>
 800255c:	4603      	mov	r3, r0
 800255e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002560:	7dfb      	ldrb	r3, [r7, #23]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d14f      	bne.n	8002606 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800256a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800256e:	f023 0301 	bic.w	r3, r3, #1
 8002572:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800257e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d006      	beq.n	8002594 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800258a:	f023 0206 	bic.w	r2, r3, #6
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	659a      	str	r2, [r3, #88]	@ 0x58
 8002592:	e002      	b.n	800259a <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800259e:	4a20      	ldr	r2, [pc, #128]	@ (8002620 <HAL_ADC_Start_DMA+0xfc>)
 80025a0:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025a6:	4a1f      	ldr	r2, [pc, #124]	@ (8002624 <HAL_ADC_Start_DMA+0x100>)
 80025a8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ae:	4a1e      	ldr	r2, [pc, #120]	@ (8002628 <HAL_ADC_Start_DMA+0x104>)
 80025b0:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	221c      	movs	r2, #28
 80025b8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f042 0210 	orr.w	r2, r2, #16
 80025d0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68da      	ldr	r2, [r3, #12]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f042 0201 	orr.w	r2, r2, #1
 80025e0:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	3340      	adds	r3, #64	@ 0x40
 80025ec:	4619      	mov	r1, r3
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	f001 f8b7 	bl	8003764 <HAL_DMA_Start_IT>
 80025f6:	4603      	mov	r3, r0
 80025f8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff fe09 	bl	8002216 <LL_ADC_REG_StartConversion>
 8002604:	e006      	b.n	8002614 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2200      	movs	r2, #0
 800260a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800260e:	e001      	b.n	8002614 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002610:	2302      	movs	r3, #2
 8002612:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002614:	7dfb      	ldrb	r3, [r7, #23]
}
 8002616:	4618      	mov	r0, r3
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	08003269 	.word	0x08003269
 8002624:	08003341 	.word	0x08003341
 8002628:	0800335d 	.word	0x0800335d

0800262c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002634:	2300      	movs	r3, #0
 8002636:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d017      	beq.n	8002682 <HAL_ADC_IRQHandler+0x56>
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d012      	beq.n	8002682 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002660:	f003 0310 	and.w	r3, r3, #16
 8002664:	2b00      	cmp	r3, #0
 8002666:	d105      	bne.n	8002674 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800266c:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 feb3 	bl	80033e0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2202      	movs	r2, #2
 8002680:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	d004      	beq.n	8002696 <HAL_ADC_IRQHandler+0x6a>
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f003 0304 	and.w	r3, r3, #4
 8002692:	2b00      	cmp	r3, #0
 8002694:	d109      	bne.n	80026aa <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800269c:	2b00      	cmp	r3, #0
 800269e:	d05d      	beq.n	800275c <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	f003 0308 	and.w	r3, r3, #8
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d058      	beq.n	800275c <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ae:	f003 0310 	and.w	r3, r3, #16
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d105      	bne.n	80026c2 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ba:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff fc81 	bl	8001fce <LL_ADC_REG_IsTriggerSourceSWStart>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d03d      	beq.n	800274e <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80026e0:	d035      	beq.n	800274e <HAL_ADC_IRQHandler+0x122>
#endif /* ADC_SUPPORT_2_5_MSPS */
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0308 	and.w	r3, r3, #8
 80026ec:	2b08      	cmp	r3, #8
 80026ee:	d12e      	bne.n	800274e <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff fda2 	bl	800223e <LL_ADC_REG_IsConversionOngoing>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d11a      	bne.n	8002736 <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 020c 	bic.w	r2, r2, #12
 800270e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002714:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002720:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d112      	bne.n	800274e <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800272c:	f043 0201 	orr.w	r2, r3, #1
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	655a      	str	r2, [r3, #84]	@ 0x54
 8002734:	e00b      	b.n	800274e <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800273a:	f043 0210 	orr.w	r2, r3, #16
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002746:	f043 0201 	orr.w	r2, r3, #1
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f922 	bl	8002998 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	220c      	movs	r2, #12
 800275a:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	f003 0320 	and.w	r3, r3, #32
 8002762:	2b00      	cmp	r3, #0
 8002764:	d004      	beq.n	8002770 <HAL_ADC_IRQHandler+0x144>
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	f003 0320 	and.w	r3, r3, #32
 800276c:	2b00      	cmp	r3, #0
 800276e:	d109      	bne.n	8002784 <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002776:	2b00      	cmp	r3, #0
 8002778:	d074      	beq.n	8002864 <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002780:	2b00      	cmp	r3, #0
 8002782:	d06f      	beq.n	8002864 <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002788:	f003 0310 	and.w	r3, r3, #16
 800278c:	2b00      	cmp	r3, #0
 800278e:	d105      	bne.n	800279c <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002794:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff fc61 	bl	8002068 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80027a6:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff fc0e 	bl	8001fce <LL_ADC_REG_IsTriggerSourceSWStart>
 80027b2:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d049      	beq.n	8002856 <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d007      	beq.n	80027dc <HAL_ADC_IRQHandler+0x1b0>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d041      	beq.n	8002856 <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d13c      	bne.n	8002856 <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027e6:	2b40      	cmp	r3, #64	@ 0x40
 80027e8:	d135      	bne.n	8002856 <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d12e      	bne.n	8002856 <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff fd31 	bl	8002264 <LL_ADC_INJ_IsConversionOngoing>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d11a      	bne.n	800283e <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	685a      	ldr	r2, [r3, #4]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002816:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800281c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800282c:	2b00      	cmp	r3, #0
 800282e:	d112      	bne.n	8002856 <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002834:	f043 0201 	orr.w	r2, r3, #1
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	655a      	str	r2, [r3, #84]	@ 0x54
 800283c:	e00b      	b.n	8002856 <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002842:	f043 0210 	orr.w	r2, r3, #16
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800284e:	f043 0201 	orr.w	r2, r3, #1
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 fd9a 	bl	8003390 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2260      	movs	r2, #96	@ 0x60
 8002862:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800286a:	2b00      	cmp	r3, #0
 800286c:	d011      	beq.n	8002892 <HAL_ADC_IRQHandler+0x266>
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00c      	beq.n	8002892 <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800287c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 f89b 	bl	80029c0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002898:	2b00      	cmp	r3, #0
 800289a:	d012      	beq.n	80028c2 <HAL_ADC_IRQHandler+0x296>
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00d      	beq.n	80028c2 <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028aa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 fd80 	bl	80033b8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028c0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d012      	beq.n	80028f2 <HAL_ADC_IRQHandler+0x2c6>
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d00d      	beq.n	80028f2 <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028da:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 fd72 	bl	80033cc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028f0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	f003 0310 	and.w	r3, r3, #16
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d02b      	beq.n	8002954 <HAL_ADC_IRQHandler+0x328>
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f003 0310 	and.w	r3, r3, #16
 8002902:	2b00      	cmp	r3, #0
 8002904:	d026      	beq.n	8002954 <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800290a:	2b00      	cmp	r3, #0
 800290c:	d102      	bne.n	8002914 <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 800290e:	2301      	movs	r3, #1
 8002910:	61fb      	str	r3, [r7, #28]
 8002912:	e009      	b.n	8002928 <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff fb97 	bl	800204c <LL_ADC_REG_GetDMATransfer>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 8002924:	2301      	movs	r3, #1
 8002926:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d10e      	bne.n	800294c <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002932:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800293e:	f043 0202 	orr.w	r2, r3, #2
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f844 	bl	80029d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2210      	movs	r2, #16
 8002952:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002954:	69bb      	ldr	r3, [r7, #24]
 8002956:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800295a:	2b00      	cmp	r3, #0
 800295c:	d018      	beq.n	8002990 <HAL_ADC_IRQHandler+0x364>
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002964:	2b00      	cmp	r3, #0
 8002966:	d013      	beq.n	8002990 <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800296c:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002978:	f043 0208 	orr.w	r2, r3, #8
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002988:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 fd0a 	bl	80033a4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 8002990:	bf00      	nop
 8002992:	3720      	adds	r7, #32
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr

080029ac <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b0b6      	sub	sp, #216	@ 0xd8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029f2:	2300      	movs	r3, #0
 80029f4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80029f8:	2300      	movs	r3, #0
 80029fa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d101      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x22>
 8002a06:	2302      	movs	r3, #2
 8002a08:	e39f      	b.n	800314a <HAL_ADC_ConfigChannel+0x762>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff fc11 	bl	800223e <LL_ADC_REG_IsConversionOngoing>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	f040 8384 	bne.w	800312c <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6818      	ldr	r0, [r3, #0]
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	6859      	ldr	r1, [r3, #4]
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	461a      	mov	r2, r3
 8002a32:	f7ff fadf 	bl	8001ff4 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff fbff 	bl	800223e <LL_ADC_REG_IsConversionOngoing>
 8002a40:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff fc0b 	bl	8002264 <LL_ADC_INJ_IsConversionOngoing>
 8002a4e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a52:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f040 81a6 	bne.w	8002da8 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f040 81a1 	bne.w	8002da8 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6818      	ldr	r0, [r3, #0]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	6819      	ldr	r1, [r3, #0]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	461a      	mov	r2, r3
 8002a74:	f7ff fb0b 	bl	800208e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	695a      	ldr	r2, [r3, #20]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	08db      	lsrs	r3, r3, #3
 8002a84:	f003 0303 	and.w	r3, r3, #3
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d00a      	beq.n	8002ab0 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6818      	ldr	r0, [r3, #0]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	6919      	ldr	r1, [r3, #16]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002aaa:	f7ff fa3b 	bl	8001f24 <LL_ADC_SetOffset>
 8002aae:	e17b      	b.n	8002da8 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff fa58 	bl	8001f6c <LL_ADC_GetOffsetChannel>
 8002abc:	4603      	mov	r3, r0
 8002abe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10a      	bne.n	8002adc <HAL_ADC_ConfigChannel+0xf4>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2100      	movs	r1, #0
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff fa4d 	bl	8001f6c <LL_ADC_GetOffsetChannel>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	0e9b      	lsrs	r3, r3, #26
 8002ad6:	f003 021f 	and.w	r2, r3, #31
 8002ada:	e01e      	b.n	8002b1a <HAL_ADC_ConfigChannel+0x132>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff fa42 	bl	8001f6c <LL_ADC_GetOffsetChannel>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002af2:	fa93 f3a3 	rbit	r3, r3
 8002af6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002afa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002afe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8002b0a:	2320      	movs	r3, #32
 8002b0c:	e004      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8002b0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002b12:	fab3 f383 	clz	r3, r3
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	461a      	mov	r2, r3
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d105      	bne.n	8002b32 <HAL_ADC_ConfigChannel+0x14a>
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	0e9b      	lsrs	r3, r3, #26
 8002b2c:	f003 031f 	and.w	r3, r3, #31
 8002b30:	e018      	b.n	8002b64 <HAL_ADC_ConfigChannel+0x17c>
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002b3e:	fa93 f3a3 	rbit	r3, r3
 8002b42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002b46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b4a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002b4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8002b56:	2320      	movs	r3, #32
 8002b58:	e004      	b.n	8002b64 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8002b5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002b5e:	fab3 f383 	clz	r3, r3
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d106      	bne.n	8002b76 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	2100      	movs	r1, #0
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff fa11 	bl	8001f98 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff f9f5 	bl	8001f6c <LL_ADC_GetOffsetChannel>
 8002b82:	4603      	mov	r3, r0
 8002b84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d10a      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x1ba>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2101      	movs	r1, #1
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff f9ea 	bl	8001f6c <LL_ADC_GetOffsetChannel>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	0e9b      	lsrs	r3, r3, #26
 8002b9c:	f003 021f 	and.w	r2, r3, #31
 8002ba0:	e01e      	b.n	8002be0 <HAL_ADC_ConfigChannel+0x1f8>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff f9df 	bl	8001f6c <LL_ADC_GetOffsetChannel>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002bb8:	fa93 f3a3 	rbit	r3, r3
 8002bbc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002bc0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002bc4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002bc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8002bd0:	2320      	movs	r3, #32
 8002bd2:	e004      	b.n	8002bde <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8002bd4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002bd8:	fab3 f383 	clz	r3, r3
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	461a      	mov	r2, r3
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d105      	bne.n	8002bf8 <HAL_ADC_ConfigChannel+0x210>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	0e9b      	lsrs	r3, r3, #26
 8002bf2:	f003 031f 	and.w	r3, r3, #31
 8002bf6:	e018      	b.n	8002c2a <HAL_ADC_ConfigChannel+0x242>
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c04:	fa93 f3a3 	rbit	r3, r3
 8002c08:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002c0c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002c10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002c14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8002c1c:	2320      	movs	r3, #32
 8002c1e:	e004      	b.n	8002c2a <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8002c20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002c24:	fab3 f383 	clz	r3, r3
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d106      	bne.n	8002c3c <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2200      	movs	r2, #0
 8002c34:	2101      	movs	r1, #1
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7ff f9ae 	bl	8001f98 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2102      	movs	r1, #2
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff f992 	bl	8001f6c <LL_ADC_GetOffsetChannel>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10a      	bne.n	8002c68 <HAL_ADC_ConfigChannel+0x280>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2102      	movs	r1, #2
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff f987 	bl	8001f6c <LL_ADC_GetOffsetChannel>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	0e9b      	lsrs	r3, r3, #26
 8002c62:	f003 021f 	and.w	r2, r3, #31
 8002c66:	e01e      	b.n	8002ca6 <HAL_ADC_ConfigChannel+0x2be>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2102      	movs	r1, #2
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff f97c 	bl	8001f6c <LL_ADC_GetOffsetChannel>
 8002c74:	4603      	mov	r3, r0
 8002c76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c7e:	fa93 f3a3 	rbit	r3, r3
 8002c82:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002c86:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002c8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8002c96:	2320      	movs	r3, #32
 8002c98:	e004      	b.n	8002ca4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002c9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002c9e:	fab3 f383 	clz	r3, r3
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d105      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x2d6>
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	0e9b      	lsrs	r3, r3, #26
 8002cb8:	f003 031f 	and.w	r3, r3, #31
 8002cbc:	e016      	b.n	8002cec <HAL_ADC_ConfigChannel+0x304>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002cca:	fa93 f3a3 	rbit	r3, r3
 8002cce:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002cd0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002cd2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002cd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8002cde:	2320      	movs	r3, #32
 8002ce0:	e004      	b.n	8002cec <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8002ce2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ce6:	fab3 f383 	clz	r3, r3
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d106      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	2102      	movs	r1, #2
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff f94d 	bl	8001f98 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2103      	movs	r1, #3
 8002d04:	4618      	mov	r0, r3
 8002d06:	f7ff f931 	bl	8001f6c <LL_ADC_GetOffsetChannel>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10a      	bne.n	8002d2a <HAL_ADC_ConfigChannel+0x342>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2103      	movs	r1, #3
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff f926 	bl	8001f6c <LL_ADC_GetOffsetChannel>
 8002d20:	4603      	mov	r3, r0
 8002d22:	0e9b      	lsrs	r3, r3, #26
 8002d24:	f003 021f 	and.w	r2, r3, #31
 8002d28:	e017      	b.n	8002d5a <HAL_ADC_ConfigChannel+0x372>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2103      	movs	r1, #3
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff f91b 	bl	8001f6c <LL_ADC_GetOffsetChannel>
 8002d36:	4603      	mov	r3, r0
 8002d38:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d3a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d3c:	fa93 f3a3 	rbit	r3, r3
 8002d40:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002d42:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d44:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002d46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8002d4c:	2320      	movs	r3, #32
 8002d4e:	e003      	b.n	8002d58 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8002d50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d52:	fab3 f383 	clz	r3, r3
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	461a      	mov	r2, r3
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d105      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x38a>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	0e9b      	lsrs	r3, r3, #26
 8002d6c:	f003 031f 	and.w	r3, r3, #31
 8002d70:	e011      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x3ae>
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d7a:	fa93 f3a3 	rbit	r3, r3
 8002d7e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002d80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d82:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002d84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8002d8a:	2320      	movs	r3, #32
 8002d8c:	e003      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8002d8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d90:	fab3 f383 	clz	r3, r3
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d106      	bne.n	8002da8 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	2103      	movs	r1, #3
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff f8f8 	bl	8001f98 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff fa1f 	bl	80021f0 <LL_ADC_IsEnabled>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f040 81c2 	bne.w	800313e <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6818      	ldr	r0, [r3, #0]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	6819      	ldr	r1, [r3, #0]
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	f7ff f98c 	bl	80020e4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	4a8e      	ldr	r2, [pc, #568]	@ (800300c <HAL_ADC_ConfigChannel+0x624>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	f040 8130 	bne.w	8003038 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d10b      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x418>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	0e9b      	lsrs	r3, r3, #26
 8002dee:	3301      	adds	r3, #1
 8002df0:	f003 031f 	and.w	r3, r3, #31
 8002df4:	2b09      	cmp	r3, #9
 8002df6:	bf94      	ite	ls
 8002df8:	2301      	movls	r3, #1
 8002dfa:	2300      	movhi	r3, #0
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	e019      	b.n	8002e34 <HAL_ADC_ConfigChannel+0x44c>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e08:	fa93 f3a3 	rbit	r3, r3
 8002e0c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002e0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002e10:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002e12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8002e18:	2320      	movs	r3, #32
 8002e1a:	e003      	b.n	8002e24 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8002e1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e1e:	fab3 f383 	clz	r3, r3
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	3301      	adds	r3, #1
 8002e26:	f003 031f 	and.w	r3, r3, #31
 8002e2a:	2b09      	cmp	r3, #9
 8002e2c:	bf94      	ite	ls
 8002e2e:	2301      	movls	r3, #1
 8002e30:	2300      	movhi	r3, #0
 8002e32:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d079      	beq.n	8002f2c <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d107      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x46c>
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	0e9b      	lsrs	r3, r3, #26
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	069b      	lsls	r3, r3, #26
 8002e4e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e52:	e015      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x498>
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e5c:	fa93 f3a3 	rbit	r3, r3
 8002e60:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002e62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e64:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002e66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002e6c:	2320      	movs	r3, #32
 8002e6e:	e003      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002e70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e72:	fab3 f383 	clz	r3, r3
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	3301      	adds	r3, #1
 8002e7a:	069b      	lsls	r3, r3, #26
 8002e7c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d109      	bne.n	8002ea0 <HAL_ADC_ConfigChannel+0x4b8>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	0e9b      	lsrs	r3, r3, #26
 8002e92:	3301      	adds	r3, #1
 8002e94:	f003 031f 	and.w	r3, r3, #31
 8002e98:	2101      	movs	r1, #1
 8002e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9e:	e017      	b.n	8002ed0 <HAL_ADC_ConfigChannel+0x4e8>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ea8:	fa93 f3a3 	rbit	r3, r3
 8002eac:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002eae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002eb0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002eb2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8002eb8:	2320      	movs	r3, #32
 8002eba:	e003      	b.n	8002ec4 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8002ebc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ebe:	fab3 f383 	clz	r3, r3
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	f003 031f 	and.w	r3, r3, #31
 8002eca:	2101      	movs	r1, #1
 8002ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed0:	ea42 0103 	orr.w	r1, r2, r3
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d10a      	bne.n	8002ef6 <HAL_ADC_ConfigChannel+0x50e>
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	0e9b      	lsrs	r3, r3, #26
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	f003 021f 	and.w	r2, r3, #31
 8002eec:	4613      	mov	r3, r2
 8002eee:	005b      	lsls	r3, r3, #1
 8002ef0:	4413      	add	r3, r2
 8002ef2:	051b      	lsls	r3, r3, #20
 8002ef4:	e018      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x540>
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002efe:	fa93 f3a3 	rbit	r3, r3
 8002f02:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002f08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002f0e:	2320      	movs	r3, #32
 8002f10:	e003      	b.n	8002f1a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002f12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f14:	fab3 f383 	clz	r3, r3
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	f003 021f 	and.w	r2, r3, #31
 8002f20:	4613      	mov	r3, r2
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	4413      	add	r3, r2
 8002f26:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f28:	430b      	orrs	r3, r1
 8002f2a:	e080      	b.n	800302e <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d107      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x560>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	0e9b      	lsrs	r3, r3, #26
 8002f3e:	3301      	adds	r3, #1
 8002f40:	069b      	lsls	r3, r3, #26
 8002f42:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f46:	e015      	b.n	8002f74 <HAL_ADC_ConfigChannel+0x58c>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f50:	fa93 f3a3 	rbit	r3, r3
 8002f54:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f58:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8002f60:	2320      	movs	r3, #32
 8002f62:	e003      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8002f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f66:	fab3 f383 	clz	r3, r3
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	069b      	lsls	r3, r3, #26
 8002f70:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d109      	bne.n	8002f94 <HAL_ADC_ConfigChannel+0x5ac>
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	0e9b      	lsrs	r3, r3, #26
 8002f86:	3301      	adds	r3, #1
 8002f88:	f003 031f 	and.w	r3, r3, #31
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f92:	e017      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x5dc>
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
 8002f9c:	fa93 f3a3 	rbit	r3, r3
 8002fa0:	61fb      	str	r3, [r7, #28]
  return result;
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d101      	bne.n	8002fb0 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8002fac:	2320      	movs	r3, #32
 8002fae:	e003      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb2:	fab3 f383 	clz	r3, r3
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	3301      	adds	r3, #1
 8002fba:	f003 031f 	and.w	r3, r3, #31
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc4:	ea42 0103 	orr.w	r1, r2, r3
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10d      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x608>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	0e9b      	lsrs	r3, r3, #26
 8002fda:	3301      	adds	r3, #1
 8002fdc:	f003 021f 	and.w	r2, r3, #31
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	4413      	add	r3, r2
 8002fe6:	3b1e      	subs	r3, #30
 8002fe8:	051b      	lsls	r3, r3, #20
 8002fea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002fee:	e01d      	b.n	800302c <HAL_ADC_ConfigChannel+0x644>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	fa93 f3a3 	rbit	r3, r3
 8002ffc:	613b      	str	r3, [r7, #16]
  return result;
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d103      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8003008:	2320      	movs	r3, #32
 800300a:	e005      	b.n	8003018 <HAL_ADC_ConfigChannel+0x630>
 800300c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	fab3 f383 	clz	r3, r3
 8003016:	b2db      	uxtb	r3, r3
 8003018:	3301      	adds	r3, #1
 800301a:	f003 021f 	and.w	r2, r3, #31
 800301e:	4613      	mov	r3, r2
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	4413      	add	r3, r2
 8003024:	3b1e      	subs	r3, #30
 8003026:	051b      	lsls	r3, r3, #20
 8003028:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800302c:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003032:	4619      	mov	r1, r3
 8003034:	f7ff f82b 	bl	800208e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	4b45      	ldr	r3, [pc, #276]	@ (8003154 <HAL_ADC_ConfigChannel+0x76c>)
 800303e:	4013      	ands	r3, r2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d07c      	beq.n	800313e <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003044:	4844      	ldr	r0, [pc, #272]	@ (8003158 <HAL_ADC_ConfigChannel+0x770>)
 8003046:	f7fe ff5f 	bl	8001f08 <LL_ADC_GetCommonPathInternalCh>
 800304a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800304e:	4843      	ldr	r0, [pc, #268]	@ (800315c <HAL_ADC_ConfigChannel+0x774>)
 8003050:	f7ff f8ce 	bl	80021f0 <LL_ADC_IsEnabled>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d15e      	bne.n	8003118 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a40      	ldr	r2, [pc, #256]	@ (8003160 <HAL_ADC_ConfigChannel+0x778>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d127      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x6cc>
 8003064:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003068:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d121      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a39      	ldr	r2, [pc, #228]	@ (800315c <HAL_ADC_ConfigChannel+0x774>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d161      	bne.n	800313e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800307a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800307e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003082:	4619      	mov	r1, r3
 8003084:	4834      	ldr	r0, [pc, #208]	@ (8003158 <HAL_ADC_ConfigChannel+0x770>)
 8003086:	f7fe ff2c 	bl	8001ee2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800308a:	4b36      	ldr	r3, [pc, #216]	@ (8003164 <HAL_ADC_ConfigChannel+0x77c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	099b      	lsrs	r3, r3, #6
 8003090:	4a35      	ldr	r2, [pc, #212]	@ (8003168 <HAL_ADC_ConfigChannel+0x780>)
 8003092:	fba2 2303 	umull	r2, r3, r2, r3
 8003096:	099b      	lsrs	r3, r3, #6
 8003098:	1c5a      	adds	r2, r3, #1
 800309a:	4613      	mov	r3, r2
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	4413      	add	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80030a4:	e002      	b.n	80030ac <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	3b01      	subs	r3, #1
 80030aa:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1f9      	bne.n	80030a6 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030b2:	e044      	b.n	800313e <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a2c      	ldr	r2, [pc, #176]	@ (800316c <HAL_ADC_ConfigChannel+0x784>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d113      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x6fe>
 80030be:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10d      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a23      	ldr	r2, [pc, #140]	@ (800315c <HAL_ADC_ConfigChannel+0x774>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d134      	bne.n	800313e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80030d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80030dc:	4619      	mov	r1, r3
 80030de:	481e      	ldr	r0, [pc, #120]	@ (8003158 <HAL_ADC_ConfigChannel+0x770>)
 80030e0:	f7fe feff 	bl	8001ee2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030e4:	e02b      	b.n	800313e <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a21      	ldr	r2, [pc, #132]	@ (8003170 <HAL_ADC_ConfigChannel+0x788>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d126      	bne.n	800313e <HAL_ADC_ConfigChannel+0x756>
 80030f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80030f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d120      	bne.n	800313e <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a16      	ldr	r2, [pc, #88]	@ (800315c <HAL_ADC_ConfigChannel+0x774>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d11b      	bne.n	800313e <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003106:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800310a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800310e:	4619      	mov	r1, r3
 8003110:	4811      	ldr	r0, [pc, #68]	@ (8003158 <HAL_ADC_ConfigChannel+0x770>)
 8003112:	f7fe fee6 	bl	8001ee2 <LL_ADC_SetCommonPathInternalCh>
 8003116:	e012      	b.n	800313e <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800311c:	f043 0220 	orr.w	r2, r3, #32
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800312a:	e008      	b.n	800313e <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003130:	f043 0220 	orr.w	r2, r3, #32
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8003146:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800314a:	4618      	mov	r0, r3
 800314c:	37d8      	adds	r7, #216	@ 0xd8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	80080000 	.word	0x80080000
 8003158:	50040300 	.word	0x50040300
 800315c:	50040000 	.word	0x50040000
 8003160:	c7520000 	.word	0xc7520000
 8003164:	20000008 	.word	0x20000008
 8003168:	053e2d63 	.word	0x053e2d63
 800316c:	cb840000 	.word	0xcb840000
 8003170:	80000001 	.word	0x80000001

08003174 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800317c:	2300      	movs	r3, #0
 800317e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff f833 	bl	80021f0 <LL_ADC_IsEnabled>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d15e      	bne.n	800324e <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	4b30      	ldr	r3, [pc, #192]	@ (8003258 <ADC_Enable+0xe4>)
 8003198:	4013      	ands	r3, r2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00d      	beq.n	80031ba <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031a2:	f043 0210 	orr.w	r2, r3, #16
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ae:	f043 0201 	orr.w	r2, r3, #1
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e04a      	b.n	8003250 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff f802 	bl	80021c8 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80031c4:	4825      	ldr	r0, [pc, #148]	@ (800325c <ADC_Enable+0xe8>)
 80031c6:	f7fe fe9f 	bl	8001f08 <LL_ADC_GetCommonPathInternalCh>
 80031ca:	4603      	mov	r3, r0
 80031cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00f      	beq.n	80031f4 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031d4:	4b22      	ldr	r3, [pc, #136]	@ (8003260 <ADC_Enable+0xec>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	099b      	lsrs	r3, r3, #6
 80031da:	4a22      	ldr	r2, [pc, #136]	@ (8003264 <ADC_Enable+0xf0>)
 80031dc:	fba2 2303 	umull	r2, r3, r2, r3
 80031e0:	099b      	lsrs	r3, r3, #6
 80031e2:	3301      	adds	r3, #1
 80031e4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80031e6:	e002      	b.n	80031ee <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	3b01      	subs	r3, #1
 80031ec:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1f9      	bne.n	80031e8 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80031f4:	f7fe fe26 	bl	8001e44 <HAL_GetTick>
 80031f8:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031fa:	e021      	b.n	8003240 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f7fe fff5 	bl	80021f0 <LL_ADC_IsEnabled>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d104      	bne.n	8003216 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4618      	mov	r0, r3
 8003212:	f7fe ffd9 	bl	80021c8 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003216:	f7fe fe15 	bl	8001e44 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d90d      	bls.n	8003240 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003228:	f043 0210 	orr.w	r2, r3, #16
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003234:	f043 0201 	orr.w	r2, r3, #1
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e007      	b.n	8003250 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b01      	cmp	r3, #1
 800324c:	d1d6      	bne.n	80031fc <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	8000003f 	.word	0x8000003f
 800325c:	50040300 	.word	0x50040300
 8003260:	20000008 	.word	0x20000008
 8003264:	053e2d63 	.word	0x053e2d63

08003268 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003274:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800327a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800327e:	2b00      	cmp	r3, #0
 8003280:	d14b      	bne.n	800331a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003286:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0308 	and.w	r3, r3, #8
 8003298:	2b00      	cmp	r3, #0
 800329a:	d021      	beq.n	80032e0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fe fe94 	bl	8001fce <LL_ADC_REG_IsTriggerSourceSWStart>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d032      	beq.n	8003312 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d12b      	bne.n	8003312 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032be:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d11f      	bne.n	8003312 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032d6:	f043 0201 	orr.w	r2, r3, #1
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	655a      	str	r2, [r3, #84]	@ 0x54
 80032de:	e018      	b.n	8003312 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d111      	bne.n	8003312 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d105      	bne.n	8003312 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800330a:	f043 0201 	orr.w	r2, r3, #1
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f7ff fb40 	bl	8002998 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003318:	e00e      	b.n	8003338 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800331e:	f003 0310 	and.w	r3, r3, #16
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f7ff fb54 	bl	80029d4 <HAL_ADC_ErrorCallback>
}
 800332c:	e004      	b.n	8003338 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003332:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	4798      	blx	r3
}
 8003338:	bf00      	nop
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800334c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f7ff fb2c 	bl	80029ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003354:	bf00      	nop
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003368:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800336e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800337a:	f043 0204 	orr.w	r2, r3, #4
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003382:	68f8      	ldr	r0, [r7, #12]
 8003384:	f7ff fb26 	bl	80029d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003388:	bf00      	nop
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003404:	4b0c      	ldr	r3, [pc, #48]	@ (8003438 <__NVIC_SetPriorityGrouping+0x44>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003410:	4013      	ands	r3, r2
 8003412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800341c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003420:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003426:	4a04      	ldr	r2, [pc, #16]	@ (8003438 <__NVIC_SetPriorityGrouping+0x44>)
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	60d3      	str	r3, [r2, #12]
}
 800342c:	bf00      	nop
 800342e:	3714      	adds	r7, #20
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	e000ed00 	.word	0xe000ed00

0800343c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003440:	4b04      	ldr	r3, [pc, #16]	@ (8003454 <__NVIC_GetPriorityGrouping+0x18>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	0a1b      	lsrs	r3, r3, #8
 8003446:	f003 0307 	and.w	r3, r3, #7
}
 800344a:	4618      	mov	r0, r3
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	e000ed00 	.word	0xe000ed00

08003458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	4603      	mov	r3, r0
 8003460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003466:	2b00      	cmp	r3, #0
 8003468:	db0b      	blt.n	8003482 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800346a:	79fb      	ldrb	r3, [r7, #7]
 800346c:	f003 021f 	and.w	r2, r3, #31
 8003470:	4907      	ldr	r1, [pc, #28]	@ (8003490 <__NVIC_EnableIRQ+0x38>)
 8003472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003476:	095b      	lsrs	r3, r3, #5
 8003478:	2001      	movs	r0, #1
 800347a:	fa00 f202 	lsl.w	r2, r0, r2
 800347e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	bf00      	nop
 8003490:	e000e100 	.word	0xe000e100

08003494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	4603      	mov	r3, r0
 800349c:	6039      	str	r1, [r7, #0]
 800349e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	db0a      	blt.n	80034be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	490c      	ldr	r1, [pc, #48]	@ (80034e0 <__NVIC_SetPriority+0x4c>)
 80034ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b2:	0112      	lsls	r2, r2, #4
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	440b      	add	r3, r1
 80034b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034bc:	e00a      	b.n	80034d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	4908      	ldr	r1, [pc, #32]	@ (80034e4 <__NVIC_SetPriority+0x50>)
 80034c4:	79fb      	ldrb	r3, [r7, #7]
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	3b04      	subs	r3, #4
 80034cc:	0112      	lsls	r2, r2, #4
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	440b      	add	r3, r1
 80034d2:	761a      	strb	r2, [r3, #24]
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr
 80034e0:	e000e100 	.word	0xe000e100
 80034e4:	e000ed00 	.word	0xe000ed00

080034e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b089      	sub	sp, #36	@ 0x24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f1c3 0307 	rsb	r3, r3, #7
 8003502:	2b04      	cmp	r3, #4
 8003504:	bf28      	it	cs
 8003506:	2304      	movcs	r3, #4
 8003508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	3304      	adds	r3, #4
 800350e:	2b06      	cmp	r3, #6
 8003510:	d902      	bls.n	8003518 <NVIC_EncodePriority+0x30>
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	3b03      	subs	r3, #3
 8003516:	e000      	b.n	800351a <NVIC_EncodePriority+0x32>
 8003518:	2300      	movs	r3, #0
 800351a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800351c:	f04f 32ff 	mov.w	r2, #4294967295
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	fa02 f303 	lsl.w	r3, r2, r3
 8003526:	43da      	mvns	r2, r3
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	401a      	ands	r2, r3
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003530:	f04f 31ff 	mov.w	r1, #4294967295
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	fa01 f303 	lsl.w	r3, r1, r3
 800353a:	43d9      	mvns	r1, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003540:	4313      	orrs	r3, r2
         );
}
 8003542:	4618      	mov	r0, r3
 8003544:	3724      	adds	r7, #36	@ 0x24
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr
	...

08003550 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	3b01      	subs	r3, #1
 800355c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003560:	d301      	bcc.n	8003566 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003562:	2301      	movs	r3, #1
 8003564:	e00f      	b.n	8003586 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003566:	4a0a      	ldr	r2, [pc, #40]	@ (8003590 <SysTick_Config+0x40>)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3b01      	subs	r3, #1
 800356c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800356e:	210f      	movs	r1, #15
 8003570:	f04f 30ff 	mov.w	r0, #4294967295
 8003574:	f7ff ff8e 	bl	8003494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003578:	4b05      	ldr	r3, [pc, #20]	@ (8003590 <SysTick_Config+0x40>)
 800357a:	2200      	movs	r2, #0
 800357c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800357e:	4b04      	ldr	r3, [pc, #16]	@ (8003590 <SysTick_Config+0x40>)
 8003580:	2207      	movs	r2, #7
 8003582:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	e000e010 	.word	0xe000e010

08003594 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f7ff ff29 	bl	80033f4 <__NVIC_SetPriorityGrouping>
}
 80035a2:	bf00      	nop
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b086      	sub	sp, #24
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	4603      	mov	r3, r0
 80035b2:	60b9      	str	r1, [r7, #8]
 80035b4:	607a      	str	r2, [r7, #4]
 80035b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035b8:	f7ff ff40 	bl	800343c <__NVIC_GetPriorityGrouping>
 80035bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	68b9      	ldr	r1, [r7, #8]
 80035c2:	6978      	ldr	r0, [r7, #20]
 80035c4:	f7ff ff90 	bl	80034e8 <NVIC_EncodePriority>
 80035c8:	4602      	mov	r2, r0
 80035ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ce:	4611      	mov	r1, r2
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff ff5f 	bl	8003494 <__NVIC_SetPriority>
}
 80035d6:	bf00      	nop
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b082      	sub	sp, #8
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	4603      	mov	r3, r0
 80035e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff ff33 	bl	8003458 <__NVIC_EnableIRQ>
}
 80035f2:	bf00      	nop
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b082      	sub	sp, #8
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7ff ffa4 	bl	8003550 <SysTick_Config>
 8003608:	4603      	mov	r3, r0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
	...

08003614 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e08e      	b.n	8003744 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	461a      	mov	r2, r3
 800362c:	4b47      	ldr	r3, [pc, #284]	@ (800374c <HAL_DMA_Init+0x138>)
 800362e:	429a      	cmp	r2, r3
 8003630:	d80f      	bhi.n	8003652 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	461a      	mov	r2, r3
 8003638:	4b45      	ldr	r3, [pc, #276]	@ (8003750 <HAL_DMA_Init+0x13c>)
 800363a:	4413      	add	r3, r2
 800363c:	4a45      	ldr	r2, [pc, #276]	@ (8003754 <HAL_DMA_Init+0x140>)
 800363e:	fba2 2303 	umull	r2, r3, r2, r3
 8003642:	091b      	lsrs	r3, r3, #4
 8003644:	009a      	lsls	r2, r3, #2
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a42      	ldr	r2, [pc, #264]	@ (8003758 <HAL_DMA_Init+0x144>)
 800364e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003650:	e00e      	b.n	8003670 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	461a      	mov	r2, r3
 8003658:	4b40      	ldr	r3, [pc, #256]	@ (800375c <HAL_DMA_Init+0x148>)
 800365a:	4413      	add	r3, r2
 800365c:	4a3d      	ldr	r2, [pc, #244]	@ (8003754 <HAL_DMA_Init+0x140>)
 800365e:	fba2 2303 	umull	r2, r3, r2, r3
 8003662:	091b      	lsrs	r3, r3, #4
 8003664:	009a      	lsls	r2, r3, #2
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a3c      	ldr	r2, [pc, #240]	@ (8003760 <HAL_DMA_Init+0x14c>)
 800366e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2202      	movs	r2, #2
 8003674:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003686:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800368a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003694:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 fa24 	bl	8003b10 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036d0:	d102      	bne.n	80036d8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036e0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80036e4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80036ee:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d010      	beq.n	800371a <HAL_DMA_Init+0x106>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b04      	cmp	r3, #4
 80036fe:	d80c      	bhi.n	800371a <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 fa43 	bl	8003b8c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800370a:	2200      	movs	r2, #0
 800370c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003716:	605a      	str	r2, [r3, #4]
 8003718:	e008      	b.n	800372c <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40020407 	.word	0x40020407
 8003750:	bffdfff8 	.word	0xbffdfff8
 8003754:	cccccccd 	.word	0xcccccccd
 8003758:	40020000 	.word	0x40020000
 800375c:	bffdfbf8 	.word	0xbffdfbf8
 8003760:	40020400 	.word	0x40020400

08003764 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b086      	sub	sp, #24
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
 8003770:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003772:	2300      	movs	r3, #0
 8003774:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800377c:	2b01      	cmp	r3, #1
 800377e:	d101      	bne.n	8003784 <HAL_DMA_Start_IT+0x20>
 8003780:	2302      	movs	r3, #2
 8003782:	e066      	b.n	8003852 <HAL_DMA_Start_IT+0xee>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b01      	cmp	r3, #1
 8003796:	d155      	bne.n	8003844 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2202      	movs	r2, #2
 800379c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0201 	bic.w	r2, r2, #1
 80037b4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	68b9      	ldr	r1, [r7, #8]
 80037bc:	68f8      	ldr	r0, [r7, #12]
 80037be:	f000 f968 	bl	8003a92 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d008      	beq.n	80037dc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f042 020e 	orr.w	r2, r2, #14
 80037d8:	601a      	str	r2, [r3, #0]
 80037da:	e00f      	b.n	80037fc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0204 	bic.w	r2, r2, #4
 80037ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 020a 	orr.w	r2, r2, #10
 80037fa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d007      	beq.n	800381a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003814:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003818:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800381e:	2b00      	cmp	r3, #0
 8003820:	d007      	beq.n	8003832 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800382c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003830:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f042 0201 	orr.w	r2, r2, #1
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	e005      	b.n	8003850 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800384c:	2302      	movs	r3, #2
 800384e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003850:	7dfb      	ldrb	r3, [r7, #23]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}

0800385a <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800385a:	b580      	push	{r7, lr}
 800385c:	b084      	sub	sp, #16
 800385e:	af00      	add	r7, sp, #0
 8003860:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003862:	2300      	movs	r3, #0
 8003864:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d005      	beq.n	800387e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2204      	movs	r2, #4
 8003876:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	73fb      	strb	r3, [r7, #15]
 800387c:	e047      	b.n	800390e <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 020e 	bic.w	r2, r2, #14
 800388c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0201 	bic.w	r2, r2, #1
 800389c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b2:	f003 021c 	and.w	r2, r3, #28
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ba:	2101      	movs	r1, #1
 80038bc:	fa01 f202 	lsl.w	r2, r1, r2
 80038c0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80038ca:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00c      	beq.n	80038ee <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038de:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038e2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80038ec:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	4798      	blx	r3
    }
  }
  return status;
 800390e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003910:	4618      	mov	r0, r3
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003934:	f003 031c 	and.w	r3, r3, #28
 8003938:	2204      	movs	r2, #4
 800393a:	409a      	lsls	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	4013      	ands	r3, r2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d026      	beq.n	8003992 <HAL_DMA_IRQHandler+0x7a>
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	f003 0304 	and.w	r3, r3, #4
 800394a:	2b00      	cmp	r3, #0
 800394c:	d021      	beq.n	8003992 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0320 	and.w	r3, r3, #32
 8003958:	2b00      	cmp	r3, #0
 800395a:	d107      	bne.n	800396c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 0204 	bic.w	r2, r2, #4
 800396a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003970:	f003 021c 	and.w	r2, r3, #28
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003978:	2104      	movs	r1, #4
 800397a:	fa01 f202 	lsl.w	r2, r1, r2
 800397e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003984:	2b00      	cmp	r3, #0
 8003986:	d071      	beq.n	8003a6c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003990:	e06c      	b.n	8003a6c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003996:	f003 031c 	and.w	r3, r3, #28
 800399a:	2202      	movs	r2, #2
 800399c:	409a      	lsls	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	4013      	ands	r3, r2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d02e      	beq.n	8003a04 <HAL_DMA_IRQHandler+0xec>
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	f003 0302 	and.w	r3, r3, #2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d029      	beq.n	8003a04 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0320 	and.w	r3, r3, #32
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10b      	bne.n	80039d6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 020a 	bic.w	r2, r2, #10
 80039cc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039da:	f003 021c 	and.w	r2, r3, #28
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e2:	2102      	movs	r1, #2
 80039e4:	fa01 f202 	lsl.w	r2, r1, r2
 80039e8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d038      	beq.n	8003a6c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003a02:	e033      	b.n	8003a6c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a08:	f003 031c 	and.w	r3, r3, #28
 8003a0c:	2208      	movs	r2, #8
 8003a0e:	409a      	lsls	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4013      	ands	r3, r2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d02a      	beq.n	8003a6e <HAL_DMA_IRQHandler+0x156>
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d025      	beq.n	8003a6e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 020e 	bic.w	r2, r2, #14
 8003a30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a36:	f003 021c 	and.w	r2, r3, #28
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3e:	2101      	movs	r1, #1
 8003a40:	fa01 f202 	lsl.w	r2, r1, r2
 8003a44:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d004      	beq.n	8003a6e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003a6c:	bf00      	nop
 8003a6e:	bf00      	nop
}
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003a76:	b480      	push	{r7}
 8003a78:	b083      	sub	sp, #12
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a84:	b2db      	uxtb	r3, r3
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr

08003a92 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b085      	sub	sp, #20
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	60f8      	str	r0, [r7, #12]
 8003a9a:	60b9      	str	r1, [r7, #8]
 8003a9c:	607a      	str	r2, [r7, #4]
 8003a9e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003aa8:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d004      	beq.n	8003abc <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003aba:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac0:	f003 021c 	and.w	r2, r3, #28
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac8:	2101      	movs	r1, #1
 8003aca:	fa01 f202 	lsl.w	r2, r1, r2
 8003ace:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	2b10      	cmp	r3, #16
 8003ade:	d108      	bne.n	8003af2 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003af0:	e007      	b.n	8003b02 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	60da      	str	r2, [r3, #12]
}
 8003b02:	bf00      	nop
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
	...

08003b10 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	4b17      	ldr	r3, [pc, #92]	@ (8003b7c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d80a      	bhi.n	8003b3a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b28:	089b      	lsrs	r3, r3, #2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003b30:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6493      	str	r3, [r2, #72]	@ 0x48
 8003b38:	e007      	b.n	8003b4a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b3e:	089b      	lsrs	r3, r3, #2
 8003b40:	009a      	lsls	r2, r3, #2
 8003b42:	4b0f      	ldr	r3, [pc, #60]	@ (8003b80 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003b44:	4413      	add	r3, r2
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	3b08      	subs	r3, #8
 8003b52:	4a0c      	ldr	r2, [pc, #48]	@ (8003b84 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003b54:	fba2 2303 	umull	r2, r3, r2, r3
 8003b58:	091b      	lsrs	r3, r3, #4
 8003b5a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b88 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003b60:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f003 031f 	and.w	r3, r3, #31
 8003b68:	2201      	movs	r2, #1
 8003b6a:	409a      	lsls	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003b70:	bf00      	nop
 8003b72:	3714      	adds	r7, #20
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	40020407 	.word	0x40020407
 8003b80:	4002081c 	.word	0x4002081c
 8003b84:	cccccccd 	.word	0xcccccccd
 8003b88:	40020880 	.word	0x40020880

08003b8c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b9c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003ba2:	4413      	add	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a09      	ldr	r2, [pc, #36]	@ (8003bd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8003bb0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	3b01      	subs	r3, #1
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	2201      	movs	r2, #1
 8003bbc:	409a      	lsls	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003bc2:	bf00      	nop
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	1000823f 	.word	0x1000823f
 8003bd4:	40020940 	.word	0x40020940

08003bd8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b087      	sub	sp, #28
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003be2:	2300      	movs	r3, #0
 8003be4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003be6:	e14c      	b.n	8003e82 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	2101      	movs	r1, #1
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 813e 	beq.w	8003e7c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f003 0303 	and.w	r3, r3, #3
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d005      	beq.n	8003c18 <HAL_GPIO_Init+0x40>
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f003 0303 	and.w	r3, r3, #3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d130      	bne.n	8003c7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	005b      	lsls	r3, r3, #1
 8003c22:	2203      	movs	r2, #3
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	43db      	mvns	r3, r3
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	68da      	ldr	r2, [r3, #12]
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	693a      	ldr	r2, [r7, #16]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c4e:	2201      	movs	r2, #1
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	fa02 f303 	lsl.w	r3, r2, r3
 8003c56:	43db      	mvns	r3, r3
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	091b      	lsrs	r3, r3, #4
 8003c64:	f003 0201 	and.w	r2, r3, #1
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	693a      	ldr	r2, [r7, #16]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	2b03      	cmp	r3, #3
 8003c84:	d017      	beq.n	8003cb6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	2203      	movs	r2, #3
 8003c92:	fa02 f303 	lsl.w	r3, r2, r3
 8003c96:	43db      	mvns	r3, r3
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	689a      	ldr	r2, [r3, #8]
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f003 0303 	and.w	r3, r3, #3
 8003cbe:	2b02      	cmp	r3, #2
 8003cc0:	d123      	bne.n	8003d0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	08da      	lsrs	r2, r3, #3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	3208      	adds	r2, #8
 8003cca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	f003 0307 	and.w	r3, r3, #7
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	220f      	movs	r2, #15
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	43db      	mvns	r3, r3
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	691a      	ldr	r2, [r3, #16]
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f003 0307 	and.w	r3, r3, #7
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	08da      	lsrs	r2, r3, #3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	3208      	adds	r2, #8
 8003d04:	6939      	ldr	r1, [r7, #16]
 8003d06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	2203      	movs	r2, #3
 8003d16:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1a:	43db      	mvns	r3, r3
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f003 0203 	and.w	r2, r3, #3
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	f000 8098 	beq.w	8003e7c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003d4c:	4a54      	ldr	r2, [pc, #336]	@ (8003ea0 <HAL_GPIO_Init+0x2c8>)
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	089b      	lsrs	r3, r3, #2
 8003d52:	3302      	adds	r3, #2
 8003d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f003 0303 	and.w	r3, r3, #3
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	220f      	movs	r2, #15
 8003d64:	fa02 f303 	lsl.w	r3, r2, r3
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003d76:	d019      	beq.n	8003dac <HAL_GPIO_Init+0x1d4>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a4a      	ldr	r2, [pc, #296]	@ (8003ea4 <HAL_GPIO_Init+0x2cc>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d013      	beq.n	8003da8 <HAL_GPIO_Init+0x1d0>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a49      	ldr	r2, [pc, #292]	@ (8003ea8 <HAL_GPIO_Init+0x2d0>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d00d      	beq.n	8003da4 <HAL_GPIO_Init+0x1cc>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a48      	ldr	r2, [pc, #288]	@ (8003eac <HAL_GPIO_Init+0x2d4>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d007      	beq.n	8003da0 <HAL_GPIO_Init+0x1c8>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a47      	ldr	r2, [pc, #284]	@ (8003eb0 <HAL_GPIO_Init+0x2d8>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d101      	bne.n	8003d9c <HAL_GPIO_Init+0x1c4>
 8003d98:	2304      	movs	r3, #4
 8003d9a:	e008      	b.n	8003dae <HAL_GPIO_Init+0x1d6>
 8003d9c:	2307      	movs	r3, #7
 8003d9e:	e006      	b.n	8003dae <HAL_GPIO_Init+0x1d6>
 8003da0:	2303      	movs	r3, #3
 8003da2:	e004      	b.n	8003dae <HAL_GPIO_Init+0x1d6>
 8003da4:	2302      	movs	r3, #2
 8003da6:	e002      	b.n	8003dae <HAL_GPIO_Init+0x1d6>
 8003da8:	2301      	movs	r3, #1
 8003daa:	e000      	b.n	8003dae <HAL_GPIO_Init+0x1d6>
 8003dac:	2300      	movs	r3, #0
 8003dae:	697a      	ldr	r2, [r7, #20]
 8003db0:	f002 0203 	and.w	r2, r2, #3
 8003db4:	0092      	lsls	r2, r2, #2
 8003db6:	4093      	lsls	r3, r2
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003dbe:	4938      	ldr	r1, [pc, #224]	@ (8003ea0 <HAL_GPIO_Init+0x2c8>)
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	089b      	lsrs	r3, r3, #2
 8003dc4:	3302      	adds	r3, #2
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003dcc:	4b39      	ldr	r3, [pc, #228]	@ (8003eb4 <HAL_GPIO_Init+0x2dc>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d003      	beq.n	8003df0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	4313      	orrs	r3, r2
 8003dee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003df0:	4a30      	ldr	r2, [pc, #192]	@ (8003eb4 <HAL_GPIO_Init+0x2dc>)
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003df6:	4b2f      	ldr	r3, [pc, #188]	@ (8003eb4 <HAL_GPIO_Init+0x2dc>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	43db      	mvns	r3, r3
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	4013      	ands	r3, r2
 8003e04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d003      	beq.n	8003e1a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e1a:	4a26      	ldr	r2, [pc, #152]	@ (8003eb4 <HAL_GPIO_Init+0x2dc>)
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003e20:	4b24      	ldr	r3, [pc, #144]	@ (8003eb4 <HAL_GPIO_Init+0x2dc>)
 8003e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	43db      	mvns	r3, r3
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d003      	beq.n	8003e46 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e46:	4a1b      	ldr	r2, [pc, #108]	@ (8003eb4 <HAL_GPIO_Init+0x2dc>)
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8003e4e:	4b19      	ldr	r3, [pc, #100]	@ (8003eb4 <HAL_GPIO_Init+0x2dc>)
 8003e50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e74:	4a0f      	ldr	r2, [pc, #60]	@ (8003eb4 <HAL_GPIO_Init+0x2dc>)
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	fa22 f303 	lsr.w	r3, r2, r3
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f47f aeab 	bne.w	8003be8 <HAL_GPIO_Init+0x10>
  }
}
 8003e92:	bf00      	nop
 8003e94:	bf00      	nop
 8003e96:	371c      	adds	r7, #28
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	40010000 	.word	0x40010000
 8003ea4:	48000400 	.word	0x48000400
 8003ea8:	48000800 	.word	0x48000800
 8003eac:	48000c00 	.word	0x48000c00
 8003eb0:	48001000 	.word	0x48001000
 8003eb4:	58000800 	.word	0x58000800

08003eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	807b      	strh	r3, [r7, #2]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ec8:	787b      	ldrb	r3, [r7, #1]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ece:	887a      	ldrh	r2, [r7, #2]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ed4:	e002      	b.n	8003edc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ed6:	887a      	ldrh	r2, [r7, #2]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003efa:	887a      	ldrh	r2, [r7, #2]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4013      	ands	r3, r2
 8003f00:	041a      	lsls	r2, r3, #16
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	43d9      	mvns	r1, r3
 8003f06:	887b      	ldrh	r3, [r7, #2]
 8003f08:	400b      	ands	r3, r1
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	619a      	str	r2, [r3, #24]
}
 8003f10:	bf00      	nop
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr

08003f1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	4603      	mov	r3, r0
 8003f24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f26:	4b08      	ldr	r3, [pc, #32]	@ (8003f48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	88fb      	ldrh	r3, [r7, #6]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d006      	beq.n	8003f40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f32:	4a05      	ldr	r2, [pc, #20]	@ (8003f48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f34:	88fb      	ldrh	r3, [r7, #6]
 8003f36:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f38:	88fb      	ldrh	r3, [r7, #6]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 f806 	bl	8003f4c <HAL_GPIO_EXTI_Callback>
  }
}
 8003f40:	bf00      	nop
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	58000800 	.word	0x58000800

08003f4c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	4603      	mov	r3, r0
 8003f54:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003f56:	bf00      	nop
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b082      	sub	sp, #8
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d101      	bne.n	8003f74 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e08d      	b.n	8004090 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d106      	bne.n	8003f8e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f7fd fafd 	bl	8001588 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2224      	movs	r2, #36	@ 0x24
 8003f92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0201 	bic.w	r2, r2, #1
 8003fa4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003fb2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689a      	ldr	r2, [r3, #8]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fc2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d107      	bne.n	8003fdc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003fd8:	609a      	str	r2, [r3, #8]
 8003fda:	e006      	b.n	8003fea <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003fe8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d108      	bne.n	8004004 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004000:	605a      	str	r2, [r3, #4]
 8004002:	e007      	b.n	8004014 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004012:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	6812      	ldr	r2, [r2, #0]
 800401e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004022:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004026:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68da      	ldr	r2, [r3, #12]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004036:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	691a      	ldr	r2, [r3, #16]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	695b      	ldr	r3, [r3, #20]
 8004040:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69d9      	ldr	r1, [r3, #28]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a1a      	ldr	r2, [r3, #32]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f042 0201 	orr.w	r2, r2, #1
 8004070:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d005      	beq.n	80040c4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	68f9      	ldr	r1, [r7, #12]
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	4798      	blx	r3
  }
}
 80040c4:	bf00      	nop
 80040c6:	3710      	adds	r7, #16
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	0a1b      	lsrs	r3, r3, #8
 80040e8:	f003 0301 	and.w	r3, r3, #1
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d010      	beq.n	8004112 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	09db      	lsrs	r3, r3, #7
 80040f4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00a      	beq.n	8004112 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004100:	f043 0201 	orr.w	r2, r3, #1
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004110:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	0a9b      	lsrs	r3, r3, #10
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d010      	beq.n	8004140 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	09db      	lsrs	r3, r3, #7
 8004122:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00a      	beq.n	8004140 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800412e:	f043 0208 	orr.w	r2, r3, #8
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800413e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	0a5b      	lsrs	r3, r3, #9
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b00      	cmp	r3, #0
 800414a:	d010      	beq.n	800416e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	09db      	lsrs	r3, r3, #7
 8004150:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00a      	beq.n	800416e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800415c:	f043 0202 	orr.w	r2, r3, #2
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800416c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004172:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f003 030b 	and.w	r3, r3, #11
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800417e:	68f9      	ldr	r1, [r7, #12]
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 fbeb 	bl	800495c <I2C_ITError>
  }
}
 8004186:	bf00      	nop
 8004188:	3718      	adds	r7, #24
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004196:	bf00      	nop
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b083      	sub	sp, #12
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80041aa:	bf00      	nop
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b083      	sub	sp, #12
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
 80041be:	460b      	mov	r3, r1
 80041c0:	70fb      	strb	r3, [r7, #3]
 80041c2:	4613      	mov	r3, r2
 80041c4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b083      	sub	sp, #12
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80041da:	bf00      	nop
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr

080041e6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80041e6:	b480      	push	{r7}
 80041e8:	b083      	sub	sp, #12
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80041fa:	b480      	push	{r7}
 80041fc:	b083      	sub	sp, #12
 80041fe:	af00      	add	r7, sp, #0
 8004200:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004202:	bf00      	nop
 8004204:	370c      	adds	r7, #12
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b086      	sub	sp, #24
 8004212:	af00      	add	r7, sp, #0
 8004214:	60f8      	str	r0, [r7, #12]
 8004216:	60b9      	str	r1, [r7, #8]
 8004218:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800421e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800422a:	2b01      	cmp	r3, #1
 800422c:	d101      	bne.n	8004232 <I2C_Slave_ISR_IT+0x24>
 800422e:	2302      	movs	r3, #2
 8004230:	e0ed      	b.n	800440e <I2C_Slave_ISR_IT+0x200>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2201      	movs	r2, #1
 8004236:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	095b      	lsrs	r3, r3, #5
 800423e:	f003 0301 	and.w	r3, r3, #1
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00a      	beq.n	800425c <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	095b      	lsrs	r3, r3, #5
 800424a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800424e:	2b00      	cmp	r3, #0
 8004250:	d004      	beq.n	800425c <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004252:	6939      	ldr	r1, [r7, #16]
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f000 f9c1 	bl	80045dc <I2C_ITSlaveCplt>
 800425a:	e0d3      	b.n	8004404 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	091b      	lsrs	r3, r3, #4
 8004260:	f003 0301 	and.w	r3, r3, #1
 8004264:	2b00      	cmp	r3, #0
 8004266:	d04d      	beq.n	8004304 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	091b      	lsrs	r3, r3, #4
 800426c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004270:	2b00      	cmp	r3, #0
 8004272:	d047      	beq.n	8004304 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004278:	b29b      	uxth	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d128      	bne.n	80042d0 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b28      	cmp	r3, #40	@ 0x28
 8004288:	d108      	bne.n	800429c <I2C_Slave_ISR_IT+0x8e>
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004290:	d104      	bne.n	800429c <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004292:	6939      	ldr	r1, [r7, #16]
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 fb0b 	bl	80048b0 <I2C_ITListenCplt>
 800429a:	e032      	b.n	8004302 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2b29      	cmp	r3, #41	@ 0x29
 80042a6:	d10e      	bne.n	80042c6 <I2C_Slave_ISR_IT+0xb8>
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80042ae:	d00a      	beq.n	80042c6 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2210      	movs	r2, #16
 80042b6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f000 fc66 	bl	8004b8a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f000 f92d 	bl	800451e <I2C_ITSlaveSeqCplt>
 80042c4:	e01d      	b.n	8004302 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2210      	movs	r2, #16
 80042cc:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80042ce:	e096      	b.n	80043fe <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2210      	movs	r2, #16
 80042d6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042dc:	f043 0204 	orr.w	r2, r3, #4
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d004      	beq.n	80042f4 <I2C_Slave_ISR_IT+0xe6>
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80042f0:	f040 8085 	bne.w	80043fe <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042f8:	4619      	mov	r1, r3
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	f000 fb2e 	bl	800495c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004300:	e07d      	b.n	80043fe <I2C_Slave_ISR_IT+0x1f0>
 8004302:	e07c      	b.n	80043fe <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	089b      	lsrs	r3, r3, #2
 8004308:	f003 0301 	and.w	r3, r3, #1
 800430c:	2b00      	cmp	r3, #0
 800430e:	d030      	beq.n	8004372 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	089b      	lsrs	r3, r3, #2
 8004314:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004318:	2b00      	cmp	r3, #0
 800431a:	d02a      	beq.n	8004372 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004320:	b29b      	uxth	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d018      	beq.n	8004358 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004330:	b2d2      	uxtb	r2, r2
 8004332:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004338:	1c5a      	adds	r2, r3, #1
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004342:	3b01      	subs	r3, #1
 8004344:	b29a      	uxth	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800434e:	b29b      	uxth	r3, r3
 8004350:	3b01      	subs	r3, #1
 8004352:	b29a      	uxth	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800435c:	b29b      	uxth	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d14f      	bne.n	8004402 <I2C_Slave_ISR_IT+0x1f4>
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004368:	d04b      	beq.n	8004402 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800436a:	68f8      	ldr	r0, [r7, #12]
 800436c:	f000 f8d7 	bl	800451e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004370:	e047      	b.n	8004402 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	08db      	lsrs	r3, r3, #3
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00a      	beq.n	8004394 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	08db      	lsrs	r3, r3, #3
 8004382:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004386:	2b00      	cmp	r3, #0
 8004388:	d004      	beq.n	8004394 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800438a:	6939      	ldr	r1, [r7, #16]
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f000 f842 	bl	8004416 <I2C_ITAddrCplt>
 8004392:	e037      	b.n	8004404 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	085b      	lsrs	r3, r3, #1
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	2b00      	cmp	r3, #0
 800439e:	d031      	beq.n	8004404 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	085b      	lsrs	r3, r3, #1
 80043a4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d02b      	beq.n	8004404 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d018      	beq.n	80043e8 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ba:	781a      	ldrb	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c6:	1c5a      	adds	r2, r3, #1
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	3b01      	subs	r3, #1
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043de:	3b01      	subs	r3, #1
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	851a      	strh	r2, [r3, #40]	@ 0x28
 80043e6:	e00d      	b.n	8004404 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043ee:	d002      	beq.n	80043f6 <I2C_Slave_ISR_IT+0x1e8>
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d106      	bne.n	8004404 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 f891 	bl	800451e <I2C_ITSlaveSeqCplt>
 80043fc:	e002      	b.n	8004404 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 80043fe:	bf00      	nop
 8004400:	e000      	b.n	8004404 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8004402:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b084      	sub	sp, #16
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
 800441e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004426:	b2db      	uxtb	r3, r3
 8004428:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800442c:	2b28      	cmp	r3, #40	@ 0x28
 800442e:	d16a      	bne.n	8004506 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	0c1b      	lsrs	r3, r3, #16
 8004438:	b2db      	uxtb	r3, r3
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	0c1b      	lsrs	r3, r3, #16
 8004448:	b29b      	uxth	r3, r3
 800444a:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800444e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	b29b      	uxth	r3, r3
 8004458:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800445c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	b29b      	uxth	r3, r3
 8004466:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800446a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	2b02      	cmp	r3, #2
 8004472:	d138      	bne.n	80044e6 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004474:	897b      	ldrh	r3, [r7, #10]
 8004476:	09db      	lsrs	r3, r3, #7
 8004478:	b29a      	uxth	r2, r3
 800447a:	89bb      	ldrh	r3, [r7, #12]
 800447c:	4053      	eors	r3, r2
 800447e:	b29b      	uxth	r3, r3
 8004480:	f003 0306 	and.w	r3, r3, #6
 8004484:	2b00      	cmp	r3, #0
 8004486:	d11c      	bne.n	80044c2 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004488:	897b      	ldrh	r3, [r7, #10]
 800448a:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004490:	1c5a      	adds	r2, r3, #1
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800449a:	2b02      	cmp	r3, #2
 800449c:	d13b      	bne.n	8004516 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2208      	movs	r2, #8
 80044aa:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80044b4:	89ba      	ldrh	r2, [r7, #12]
 80044b6:	7bfb      	ldrb	r3, [r7, #15]
 80044b8:	4619      	mov	r1, r3
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7ff fe7b 	bl	80041b6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80044c0:	e029      	b.n	8004516 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80044c2:	893b      	ldrh	r3, [r7, #8]
 80044c4:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80044c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 fb9f 	bl	8004c0e <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80044d8:	89ba      	ldrh	r2, [r7, #12]
 80044da:	7bfb      	ldrb	r3, [r7, #15]
 80044dc:	4619      	mov	r1, r3
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7ff fe69 	bl	80041b6 <HAL_I2C_AddrCallback>
}
 80044e4:	e017      	b.n	8004516 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80044e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 fb8f 	bl	8004c0e <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80044f8:	89ba      	ldrh	r2, [r7, #12]
 80044fa:	7bfb      	ldrb	r3, [r7, #15]
 80044fc:	4619      	mov	r1, r3
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7ff fe59 	bl	80041b6 <HAL_I2C_AddrCallback>
}
 8004504:	e007      	b.n	8004516 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2208      	movs	r2, #8
 800450c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8004516:	bf00      	nop
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b084      	sub	sp, #16
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	0b9b      	lsrs	r3, r3, #14
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d008      	beq.n	8004554 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004550:	601a      	str	r2, [r3, #0]
 8004552:	e00d      	b.n	8004570 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	0bdb      	lsrs	r3, r3, #15
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b00      	cmp	r3, #0
 800455e:	d007      	beq.n	8004570 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800456e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004576:	b2db      	uxtb	r3, r3
 8004578:	2b29      	cmp	r3, #41	@ 0x29
 800457a:	d112      	bne.n	80045a2 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2228      	movs	r2, #40	@ 0x28
 8004580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2221      	movs	r2, #33	@ 0x21
 8004588:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800458a:	2101      	movs	r1, #1
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 fb3e 	bl	8004c0e <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f7ff fdf7 	bl	800418e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80045a0:	e017      	b.n	80045d2 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80045ac:	d111      	bne.n	80045d2 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2228      	movs	r2, #40	@ 0x28
 80045b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2222      	movs	r2, #34	@ 0x22
 80045ba:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80045bc:	2102      	movs	r1, #2
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 fb25 	bl	8004c0e <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f7ff fde8 	bl	80041a2 <HAL_I2C_SlaveRxCpltCallback>
}
 80045d2:	bf00      	nop
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
	...

080045dc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b086      	sub	sp, #24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045fe:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2220      	movs	r2, #32
 8004606:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004608:	7afb      	ldrb	r3, [r7, #11]
 800460a:	2b21      	cmp	r3, #33	@ 0x21
 800460c:	d002      	beq.n	8004614 <I2C_ITSlaveCplt+0x38>
 800460e:	7afb      	ldrb	r3, [r7, #11]
 8004610:	2b29      	cmp	r3, #41	@ 0x29
 8004612:	d108      	bne.n	8004626 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004614:	f248 0101 	movw	r1, #32769	@ 0x8001
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 faf8 	bl	8004c0e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2221      	movs	r2, #33	@ 0x21
 8004622:	631a      	str	r2, [r3, #48]	@ 0x30
 8004624:	e019      	b.n	800465a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004626:	7afb      	ldrb	r3, [r7, #11]
 8004628:	2b22      	cmp	r3, #34	@ 0x22
 800462a:	d002      	beq.n	8004632 <I2C_ITSlaveCplt+0x56>
 800462c:	7afb      	ldrb	r3, [r7, #11]
 800462e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004630:	d108      	bne.n	8004644 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004632:	f248 0102 	movw	r1, #32770	@ 0x8002
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 fae9 	bl	8004c0e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2222      	movs	r2, #34	@ 0x22
 8004640:	631a      	str	r2, [r3, #48]	@ 0x30
 8004642:	e00a      	b.n	800465a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004644:	7afb      	ldrb	r3, [r7, #11]
 8004646:	2b28      	cmp	r3, #40	@ 0x28
 8004648:	d107      	bne.n	800465a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800464a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 fadd 	bl	8004c0e <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004668:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6859      	ldr	r1, [r3, #4]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	4b8c      	ldr	r3, [pc, #560]	@ (80048a8 <I2C_ITSlaveCplt+0x2cc>)
 8004676:	400b      	ands	r3, r1
 8004678:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 fa85 	bl	8004b8a <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	0b9b      	lsrs	r3, r3, #14
 8004684:	f003 0301 	and.w	r3, r3, #1
 8004688:	2b00      	cmp	r3, #0
 800468a:	d013      	beq.n	80046b4 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681a      	ldr	r2, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800469a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d020      	beq.n	80046e6 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80046b2:	e018      	b.n	80046e6 <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	0bdb      	lsrs	r3, r3, #15
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d012      	beq.n	80046e6 <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80046ce:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d006      	beq.n	80046e6 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	b29a      	uxth	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	089b      	lsrs	r3, r3, #2
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d020      	beq.n	8004734 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	f023 0304 	bic.w	r3, r3, #4
 80046f8:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004704:	b2d2      	uxtb	r2, r2
 8004706:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800470c:	1c5a      	adds	r2, r3, #1
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00c      	beq.n	8004734 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800471e:	3b01      	subs	r3, #1
 8004720:	b29a      	uxth	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800472a:	b29b      	uxth	r3, r3
 800472c:	3b01      	subs	r3, #1
 800472e:	b29a      	uxth	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004738:	b29b      	uxth	r3, r3
 800473a:	2b00      	cmp	r3, #0
 800473c:	d005      	beq.n	800474a <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004742:	f043 0204 	orr.w	r2, r3, #4
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	091b      	lsrs	r3, r3, #4
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	d04a      	beq.n	80047ec <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	091b      	lsrs	r3, r3, #4
 800475a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800475e:	2b00      	cmp	r3, #0
 8004760:	d044      	beq.n	80047ec <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004766:	b29b      	uxth	r3, r3
 8004768:	2b00      	cmp	r3, #0
 800476a:	d128      	bne.n	80047be <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b28      	cmp	r3, #40	@ 0x28
 8004776:	d108      	bne.n	800478a <I2C_ITSlaveCplt+0x1ae>
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800477e:	d104      	bne.n	800478a <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004780:	6979      	ldr	r1, [r7, #20]
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f894 	bl	80048b0 <I2C_ITListenCplt>
 8004788:	e030      	b.n	80047ec <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b29      	cmp	r3, #41	@ 0x29
 8004794:	d10e      	bne.n	80047b4 <I2C_ITSlaveCplt+0x1d8>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800479c:	d00a      	beq.n	80047b4 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2210      	movs	r2, #16
 80047a4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f9ef 	bl	8004b8a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f7ff feb6 	bl	800451e <I2C_ITSlaveSeqCplt>
 80047b2:	e01b      	b.n	80047ec <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2210      	movs	r2, #16
 80047ba:	61da      	str	r2, [r3, #28]
 80047bc:	e016      	b.n	80047ec <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2210      	movs	r2, #16
 80047c4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ca:	f043 0204 	orr.w	r2, r3, #4
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <I2C_ITSlaveCplt+0x204>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80047de:	d105      	bne.n	80047ec <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047e4:	4619      	mov	r1, r3
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f8b8 	bl	800495c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d010      	beq.n	8004824 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004806:	4619      	mov	r1, r3
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f000 f8a7 	bl	800495c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b28      	cmp	r3, #40	@ 0x28
 8004818:	d141      	bne.n	800489e <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800481a:	6979      	ldr	r1, [r7, #20]
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 f847 	bl	80048b0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004822:	e03c      	b.n	800489e <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004828:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800482c:	d014      	beq.n	8004858 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f7ff fe75 	bl	800451e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a1d      	ldr	r2, [pc, #116]	@ (80048ac <I2C_ITSlaveCplt+0x2d0>)
 8004838:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2220      	movs	r2, #32
 800483e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f7ff fcbe 	bl	80041d2 <HAL_I2C_ListenCpltCallback>
}
 8004856:	e022      	b.n	800489e <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2b22      	cmp	r3, #34	@ 0x22
 8004862:	d10e      	bne.n	8004882 <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2220      	movs	r2, #32
 8004868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7ff fc91 	bl	80041a2 <HAL_I2C_SlaveRxCpltCallback>
}
 8004880:	e00d      	b.n	800489e <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2220      	movs	r2, #32
 8004886:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f7ff fc78 	bl	800418e <HAL_I2C_SlaveTxCpltCallback>
}
 800489e:	bf00      	nop
 80048a0:	3718      	adds	r7, #24
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	fe00e800 	.word	0xfe00e800
 80048ac:	ffff0000 	.word	0xffff0000

080048b0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a26      	ldr	r2, [pc, #152]	@ (8004958 <I2C_ITListenCplt+0xa8>)
 80048be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2220      	movs	r2, #32
 80048ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	089b      	lsrs	r3, r3, #2
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d022      	beq.n	800492e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f2:	b2d2      	uxtb	r2, r2
 80048f4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fa:	1c5a      	adds	r2, r3, #1
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004904:	2b00      	cmp	r3, #0
 8004906:	d012      	beq.n	800492e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800490c:	3b01      	subs	r3, #1
 800490e:	b29a      	uxth	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004918:	b29b      	uxth	r3, r3
 800491a:	3b01      	subs	r3, #1
 800491c:	b29a      	uxth	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004926:	f043 0204 	orr.w	r2, r3, #4
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800492e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f96b 	bl	8004c0e <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2210      	movs	r2, #16
 800493e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f7ff fc42 	bl	80041d2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800494e:	bf00      	nop
 8004950:	3708      	adds	r7, #8
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	ffff0000 	.word	0xffff0000

0800495c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800496c:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a6d      	ldr	r2, [pc, #436]	@ (8004b30 <I2C_ITError+0x1d4>)
 800497a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	431a      	orrs	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800498e:	7bfb      	ldrb	r3, [r7, #15]
 8004990:	2b28      	cmp	r3, #40	@ 0x28
 8004992:	d005      	beq.n	80049a0 <I2C_ITError+0x44>
 8004994:	7bfb      	ldrb	r3, [r7, #15]
 8004996:	2b29      	cmp	r3, #41	@ 0x29
 8004998:	d002      	beq.n	80049a0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800499a:	7bfb      	ldrb	r3, [r7, #15]
 800499c:	2b2a      	cmp	r3, #42	@ 0x2a
 800499e:	d10b      	bne.n	80049b8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80049a0:	2103      	movs	r1, #3
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 f933 	bl	8004c0e <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2228      	movs	r2, #40	@ 0x28
 80049ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a60      	ldr	r2, [pc, #384]	@ (8004b34 <I2C_ITError+0x1d8>)
 80049b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80049b6:	e030      	b.n	8004a1a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80049b8:	f248 0103 	movw	r1, #32771	@ 0x8003
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 f926 	bl	8004c0e <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f8e1 	bl	8004b8a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b60      	cmp	r3, #96	@ 0x60
 80049d2:	d01f      	beq.n	8004a14 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2220      	movs	r2, #32
 80049d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	f003 0320 	and.w	r3, r3, #32
 80049e6:	2b20      	cmp	r3, #32
 80049e8:	d114      	bne.n	8004a14 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	f003 0310 	and.w	r3, r3, #16
 80049f4:	2b10      	cmp	r3, #16
 80049f6:	d109      	bne.n	8004a0c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2210      	movs	r2, #16
 80049fe:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a04:	f043 0204 	orr.w	r2, r3, #4
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2220      	movs	r2, #32
 8004a12:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a1e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d039      	beq.n	8004a9c <I2C_ITError+0x140>
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	2b11      	cmp	r3, #17
 8004a2c:	d002      	beq.n	8004a34 <I2C_ITError+0xd8>
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	2b21      	cmp	r3, #33	@ 0x21
 8004a32:	d133      	bne.n	8004a9c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004a3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a42:	d107      	bne.n	8004a54 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004a52:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7ff f80c 	bl	8003a76 <HAL_DMA_GetState>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d017      	beq.n	8004a94 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a68:	4a33      	ldr	r2, [pc, #204]	@ (8004b38 <I2C_ITError+0x1dc>)
 8004a6a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7fe feee 	bl	800385a <HAL_DMA_Abort_IT>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d04d      	beq.n	8004b20 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004a8e:	4610      	mov	r0, r2
 8004a90:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a92:	e045      	b.n	8004b20 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f851 	bl	8004b3c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a9a:	e041      	b.n	8004b20 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d039      	beq.n	8004b18 <I2C_ITError+0x1bc>
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2b12      	cmp	r3, #18
 8004aa8:	d002      	beq.n	8004ab0 <I2C_ITError+0x154>
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	2b22      	cmp	r3, #34	@ 0x22
 8004aae:	d133      	bne.n	8004b18 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004aba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004abe:	d107      	bne.n	8004ad0 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004ace:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7fe ffce 	bl	8003a76 <HAL_DMA_GetState>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d017      	beq.n	8004b10 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ae4:	4a14      	ldr	r2, [pc, #80]	@ (8004b38 <I2C_ITError+0x1dc>)
 8004ae6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004af4:	4618      	mov	r0, r3
 8004af6:	f7fe feb0 	bl	800385a <HAL_DMA_Abort_IT>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d011      	beq.n	8004b24 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004b0a:	4610      	mov	r0, r2
 8004b0c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b0e:	e009      	b.n	8004b24 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 f813 	bl	8004b3c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b16:	e005      	b.n	8004b24 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 f80f 	bl	8004b3c <I2C_TreatErrorCallback>
  }
}
 8004b1e:	e002      	b.n	8004b26 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b20:	bf00      	nop
 8004b22:	e000      	b.n	8004b26 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b24:	bf00      	nop
}
 8004b26:	bf00      	nop
 8004b28:	3710      	adds	r7, #16
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	ffff0000 	.word	0xffff0000
 8004b34:	0800420f 	.word	0x0800420f
 8004b38:	08004bd3 	.word	0x08004bd3

08004b3c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b60      	cmp	r3, #96	@ 0x60
 8004b4e:	d10e      	bne.n	8004b6e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2220      	movs	r2, #32
 8004b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7ff fb47 	bl	80041fa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b6c:	e009      	b.n	8004b82 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f7ff fb32 	bl	80041e6 <HAL_I2C_ErrorCallback>
}
 8004b82:	bf00      	nop
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}

08004b8a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b8a:	b480      	push	{r7}
 8004b8c:	b083      	sub	sp, #12
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d103      	bne.n	8004ba8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d007      	beq.n	8004bc6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	699a      	ldr	r2, [r3, #24]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f042 0201 	orr.w	r2, r2, #1
 8004bc4:	619a      	str	r2, [r3, #24]
  }
}
 8004bc6:	bf00      	nop
 8004bc8:	370c      	adds	r7, #12
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr

08004bd2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	b084      	sub	sp, #16
 8004bd6:	af00      	add	r7, sp, #0
 8004bd8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d003      	beq.n	8004bf0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bec:	2200      	movs	r2, #0
 8004bee:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d003      	beq.n	8004c00 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f7ff ff9b 	bl	8004b3c <I2C_TreatErrorCallback>
}
 8004c06:	bf00      	nop
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b085      	sub	sp, #20
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
 8004c16:	460b      	mov	r3, r1
 8004c18:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004c1e:	887b      	ldrh	r3, [r7, #2]
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00f      	beq.n	8004c48 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8004c2e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004c3c:	2b28      	cmp	r3, #40	@ 0x28
 8004c3e:	d003      	beq.n	8004c48 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004c46:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004c48:	887b      	ldrh	r3, [r7, #2]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00f      	beq.n	8004c72 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8004c58:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004c66:	2b28      	cmp	r3, #40	@ 0x28
 8004c68:	d003      	beq.n	8004c72 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004c70:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004c72:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	da03      	bge.n	8004c82 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004c80:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004c82:	887b      	ldrh	r3, [r7, #2]
 8004c84:	2b10      	cmp	r3, #16
 8004c86:	d103      	bne.n	8004c90 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004c8e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004c90:	887b      	ldrh	r3, [r7, #2]
 8004c92:	2b20      	cmp	r3, #32
 8004c94:	d103      	bne.n	8004c9e <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f043 0320 	orr.w	r3, r3, #32
 8004c9c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004c9e:	887b      	ldrh	r3, [r7, #2]
 8004ca0:	2b40      	cmp	r3, #64	@ 0x40
 8004ca2:	d103      	bne.n	8004cac <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004caa:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6819      	ldr	r1, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	43da      	mvns	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	400a      	ands	r2, r1
 8004cbc:	601a      	str	r2, [r3, #0]
}
 8004cbe:	bf00      	nop
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b083      	sub	sp, #12
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	2b20      	cmp	r3, #32
 8004cde:	d138      	bne.n	8004d52 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d101      	bne.n	8004cee <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004cea:	2302      	movs	r3, #2
 8004cec:	e032      	b.n	8004d54 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2224      	movs	r2, #36	@ 0x24
 8004cfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f022 0201 	bic.w	r2, r2, #1
 8004d0c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004d1c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	6819      	ldr	r1, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f042 0201 	orr.w	r2, r2, #1
 8004d3c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2220      	movs	r2, #32
 8004d42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	e000      	b.n	8004d54 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d52:	2302      	movs	r3, #2
  }
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b20      	cmp	r3, #32
 8004d74:	d139      	bne.n	8004dea <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d101      	bne.n	8004d84 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d80:	2302      	movs	r3, #2
 8004d82:	e033      	b.n	8004dec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2224      	movs	r2, #36	@ 0x24
 8004d90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f022 0201 	bic.w	r2, r2, #1
 8004da2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004db2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	021b      	lsls	r3, r3, #8
 8004db8:	68fa      	ldr	r2, [r7, #12]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f042 0201 	orr.w	r2, r2, #1
 8004dd4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004de6:	2300      	movs	r3, #0
 8004de8:	e000      	b.n	8004dec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004dea:	2302      	movs	r3, #2
  }
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3714      	adds	r7, #20
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e0c0      	b.n	8004f8c <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d106      	bne.n	8004e24 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f009 f9ac 	bl	800e17c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2203      	movs	r2, #3
 8004e28:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4618      	mov	r0, r3
 8004e32:	f004 fc7f 	bl	8009734 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e36:	2300      	movs	r3, #0
 8004e38:	73fb      	strb	r3, [r7, #15]
 8004e3a:	e03e      	b.n	8004eba <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004e3c:	7bfa      	ldrb	r2, [r7, #15]
 8004e3e:	6879      	ldr	r1, [r7, #4]
 8004e40:	4613      	mov	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	00db      	lsls	r3, r3, #3
 8004e48:	440b      	add	r3, r1
 8004e4a:	3311      	adds	r3, #17
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004e50:	7bfa      	ldrb	r2, [r7, #15]
 8004e52:	6879      	ldr	r1, [r7, #4]
 8004e54:	4613      	mov	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4413      	add	r3, r2
 8004e5a:	00db      	lsls	r3, r3, #3
 8004e5c:	440b      	add	r3, r1
 8004e5e:	3310      	adds	r3, #16
 8004e60:	7bfa      	ldrb	r2, [r7, #15]
 8004e62:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004e64:	7bfa      	ldrb	r2, [r7, #15]
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	440b      	add	r3, r1
 8004e72:	3313      	adds	r3, #19
 8004e74:	2200      	movs	r2, #0
 8004e76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004e78:	7bfa      	ldrb	r2, [r7, #15]
 8004e7a:	6879      	ldr	r1, [r7, #4]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4413      	add	r3, r2
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	440b      	add	r3, r1
 8004e86:	3320      	adds	r3, #32
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004e8c:	7bfa      	ldrb	r2, [r7, #15]
 8004e8e:	6879      	ldr	r1, [r7, #4]
 8004e90:	4613      	mov	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4413      	add	r3, r2
 8004e96:	00db      	lsls	r3, r3, #3
 8004e98:	440b      	add	r3, r1
 8004e9a:	3324      	adds	r3, #36	@ 0x24
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004ea0:	7bfb      	ldrb	r3, [r7, #15]
 8004ea2:	6879      	ldr	r1, [r7, #4]
 8004ea4:	1c5a      	adds	r2, r3, #1
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	00db      	lsls	r3, r3, #3
 8004eae:	440b      	add	r3, r1
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004eb4:	7bfb      	ldrb	r3, [r7, #15]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	73fb      	strb	r3, [r7, #15]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	791b      	ldrb	r3, [r3, #4]
 8004ebe:	7bfa      	ldrb	r2, [r7, #15]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d3bb      	bcc.n	8004e3c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	73fb      	strb	r3, [r7, #15]
 8004ec8:	e044      	b.n	8004f54 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004eca:	7bfa      	ldrb	r2, [r7, #15]
 8004ecc:	6879      	ldr	r1, [r7, #4]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	4413      	add	r3, r2
 8004ed4:	00db      	lsls	r3, r3, #3
 8004ed6:	440b      	add	r3, r1
 8004ed8:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8004edc:	2200      	movs	r2, #0
 8004ede:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004ee0:	7bfa      	ldrb	r2, [r7, #15]
 8004ee2:	6879      	ldr	r1, [r7, #4]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4413      	add	r3, r2
 8004eea:	00db      	lsls	r3, r3, #3
 8004eec:	440b      	add	r3, r1
 8004eee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004ef2:	7bfa      	ldrb	r2, [r7, #15]
 8004ef4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004ef6:	7bfa      	ldrb	r2, [r7, #15]
 8004ef8:	6879      	ldr	r1, [r7, #4]
 8004efa:	4613      	mov	r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	4413      	add	r3, r2
 8004f00:	00db      	lsls	r3, r3, #3
 8004f02:	440b      	add	r3, r1
 8004f04:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004f08:	2200      	movs	r2, #0
 8004f0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004f0c:	7bfa      	ldrb	r2, [r7, #15]
 8004f0e:	6879      	ldr	r1, [r7, #4]
 8004f10:	4613      	mov	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4413      	add	r3, r2
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	440b      	add	r3, r1
 8004f1a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004f1e:	2200      	movs	r2, #0
 8004f20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004f22:	7bfa      	ldrb	r2, [r7, #15]
 8004f24:	6879      	ldr	r1, [r7, #4]
 8004f26:	4613      	mov	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4413      	add	r3, r2
 8004f2c:	00db      	lsls	r3, r3, #3
 8004f2e:	440b      	add	r3, r1
 8004f30:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004f38:	7bfa      	ldrb	r2, [r7, #15]
 8004f3a:	6879      	ldr	r1, [r7, #4]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	440b      	add	r3, r1
 8004f46:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f4e:	7bfb      	ldrb	r3, [r7, #15]
 8004f50:	3301      	adds	r3, #1
 8004f52:	73fb      	strb	r3, [r7, #15]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	791b      	ldrb	r3, [r3, #4]
 8004f58:	7bfa      	ldrb	r2, [r7, #15]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d3b5      	bcc.n	8004eca <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6818      	ldr	r0, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	3304      	adds	r3, #4
 8004f66:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004f6a:	f004 fbfe 	bl	800976a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	7a9b      	ldrb	r3, [r3, #10]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d102      	bne.n	8004f8a <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f001 fc40 	bl	800680a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004f8a:	2300      	movs	r3, #0
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d101      	bne.n	8004faa <HAL_PCD_Start+0x16>
 8004fa6:	2302      	movs	r3, #2
 8004fa8:	e012      	b.n	8004fd0 <HAL_PCD_Start+0x3c>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f004 fba5 	bl	8009706 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f006 fe66 	bl	800bc92 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3708      	adds	r7, #8
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f006 fe6b 	bl	800bcc0 <USB_ReadInterrupts>
 8004fea:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d003      	beq.n	8004ffe <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 fb04 	bl	8005604 <PCD_EP_ISR_Handler>

    return;
 8004ffc:	e110      	b.n	8005220 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005004:	2b00      	cmp	r3, #0
 8005006:	d013      	beq.n	8005030 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005010:	b29a      	uxth	r2, r3
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800501a:	b292      	uxth	r2, r2
 800501c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f009 f940 	bl	800e2a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005026:	2100      	movs	r1, #0
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 f8fc 	bl	8005226 <HAL_PCD_SetAddress>

    return;
 800502e:	e0f7      	b.n	8005220 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00c      	beq.n	8005054 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005042:	b29a      	uxth	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800504c:	b292      	uxth	r2, r2
 800504e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005052:	e0e5      	b.n	8005220 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00c      	beq.n	8005078 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005066:	b29a      	uxth	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005070:	b292      	uxth	r2, r2
 8005072:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8005076:	e0d3      	b.n	8005220 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d034      	beq.n	80050ec <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800508a:	b29a      	uxth	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f022 0204 	bic.w	r2, r2, #4
 8005094:	b292      	uxth	r2, r2
 8005096:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 0208 	bic.w	r2, r2, #8
 80050ac:	b292      	uxth	r2, r2
 80050ae:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d107      	bne.n	80050cc <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80050c4:	2100      	movs	r1, #0
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f009 fae2 	bl	800e690 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f009 f923 	bl	800e318 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80050da:	b29a      	uxth	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80050e4:	b292      	uxth	r2, r2
 80050e6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80050ea:	e099      	b.n	8005220 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d027      	beq.n	8005146 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80050fe:	b29a      	uxth	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f042 0208 	orr.w	r2, r2, #8
 8005108:	b292      	uxth	r2, r2
 800510a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005116:	b29a      	uxth	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005120:	b292      	uxth	r2, r2
 8005122:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800512e:	b29a      	uxth	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f042 0204 	orr.w	r2, r2, #4
 8005138:	b292      	uxth	r2, r2
 800513a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f009 f8d0 	bl	800e2e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8005144:	e06c      	b.n	8005220 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800514c:	2b00      	cmp	r3, #0
 800514e:	d040      	beq.n	80051d2 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005158:	b29a      	uxth	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005162:	b292      	uxth	r2, r2
 8005164:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800516e:	2b00      	cmp	r3, #0
 8005170:	d12b      	bne.n	80051ca <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800517a:	b29a      	uxth	r2, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f042 0204 	orr.w	r2, r2, #4
 8005184:	b292      	uxth	r2, r2
 8005186:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005192:	b29a      	uxth	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f042 0208 	orr.w	r2, r2, #8
 800519c:	b292      	uxth	r2, r2
 800519e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	089b      	lsrs	r3, r3, #2
 80051b6:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80051c0:	2101      	movs	r1, #1
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f009 fa64 	bl	800e690 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80051c8:	e02a      	b.n	8005220 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f009 f88a 	bl	800e2e4 <HAL_PCD_SuspendCallback>
    return;
 80051d0:	e026      	b.n	8005220 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00f      	beq.n	80051fc <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80051ee:	b292      	uxth	r2, r2
 80051f0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f009 f848 	bl	800e28a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80051fa:	e011      	b.n	8005220 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00c      	beq.n	8005220 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800520e:	b29a      	uxth	r2, r3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005218:	b292      	uxth	r2, r2
 800521a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800521e:	bf00      	nop
  }
}
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b082      	sub	sp, #8
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
 800522e:	460b      	mov	r3, r1
 8005230:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8005238:	2b01      	cmp	r3, #1
 800523a:	d101      	bne.n	8005240 <HAL_PCD_SetAddress+0x1a>
 800523c:	2302      	movs	r3, #2
 800523e:	e012      	b.n	8005266 <HAL_PCD_SetAddress+0x40>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	78fa      	ldrb	r2, [r7, #3]
 800524c:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	78fa      	ldrb	r2, [r7, #3]
 8005254:	4611      	mov	r1, r2
 8005256:	4618      	mov	r0, r3
 8005258:	f006 fd07 	bl	800bc6a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3708      	adds	r7, #8
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b084      	sub	sp, #16
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
 8005276:	4608      	mov	r0, r1
 8005278:	4611      	mov	r1, r2
 800527a:	461a      	mov	r2, r3
 800527c:	4603      	mov	r3, r0
 800527e:	70fb      	strb	r3, [r7, #3]
 8005280:	460b      	mov	r3, r1
 8005282:	803b      	strh	r3, [r7, #0]
 8005284:	4613      	mov	r3, r2
 8005286:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005288:	2300      	movs	r3, #0
 800528a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800528c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005290:	2b00      	cmp	r3, #0
 8005292:	da0e      	bge.n	80052b2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005294:	78fb      	ldrb	r3, [r7, #3]
 8005296:	f003 0207 	and.w	r2, r3, #7
 800529a:	4613      	mov	r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4413      	add	r3, r2
 80052a0:	00db      	lsls	r3, r3, #3
 80052a2:	3310      	adds	r3, #16
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	4413      	add	r3, r2
 80052a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2201      	movs	r2, #1
 80052ae:	705a      	strb	r2, [r3, #1]
 80052b0:	e00e      	b.n	80052d0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80052b2:	78fb      	ldrb	r3, [r7, #3]
 80052b4:	f003 0207 	and.w	r2, r3, #7
 80052b8:	4613      	mov	r3, r2
 80052ba:	009b      	lsls	r3, r3, #2
 80052bc:	4413      	add	r3, r2
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	4413      	add	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80052d0:	78fb      	ldrb	r3, [r7, #3]
 80052d2:	f003 0307 	and.w	r3, r3, #7
 80052d6:	b2da      	uxtb	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80052dc:	883a      	ldrh	r2, [r7, #0]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	78ba      	ldrb	r2, [r7, #2]
 80052e6:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80052e8:	78bb      	ldrb	r3, [r7, #2]
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d102      	bne.n	80052f4 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d101      	bne.n	8005302 <HAL_PCD_EP_Open+0x94>
 80052fe:	2302      	movs	r3, #2
 8005300:	e00e      	b.n	8005320 <HAL_PCD_EP_Open+0xb2>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2201      	movs	r2, #1
 8005306:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68f9      	ldr	r1, [r7, #12]
 8005310:	4618      	mov	r0, r3
 8005312:	f004 fa49 	bl	80097a8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800531e:	7afb      	ldrb	r3, [r7, #11]
}
 8005320:	4618      	mov	r0, r3
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	460b      	mov	r3, r1
 8005332:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005334:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005338:	2b00      	cmp	r3, #0
 800533a:	da0e      	bge.n	800535a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800533c:	78fb      	ldrb	r3, [r7, #3]
 800533e:	f003 0207 	and.w	r2, r3, #7
 8005342:	4613      	mov	r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	4413      	add	r3, r2
 8005348:	00db      	lsls	r3, r3, #3
 800534a:	3310      	adds	r3, #16
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	4413      	add	r3, r2
 8005350:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2201      	movs	r2, #1
 8005356:	705a      	strb	r2, [r3, #1]
 8005358:	e00e      	b.n	8005378 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800535a:	78fb      	ldrb	r3, [r7, #3]
 800535c:	f003 0207 	and.w	r2, r3, #7
 8005360:	4613      	mov	r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	4413      	add	r3, r2
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800536c:	687a      	ldr	r2, [r7, #4]
 800536e:	4413      	add	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005378:	78fb      	ldrb	r3, [r7, #3]
 800537a:	f003 0307 	and.w	r3, r3, #7
 800537e:	b2da      	uxtb	r2, r3
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800538a:	2b01      	cmp	r3, #1
 800538c:	d101      	bne.n	8005392 <HAL_PCD_EP_Close+0x6a>
 800538e:	2302      	movs	r3, #2
 8005390:	e00e      	b.n	80053b0 <HAL_PCD_EP_Close+0x88>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68f9      	ldr	r1, [r7, #12]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f004 fdc5 	bl	8009f30 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	607a      	str	r2, [r7, #4]
 80053c2:	603b      	str	r3, [r7, #0]
 80053c4:	460b      	mov	r3, r1
 80053c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80053c8:	7afb      	ldrb	r3, [r7, #11]
 80053ca:	f003 0207 	and.w	r2, r3, #7
 80053ce:	4613      	mov	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	00db      	lsls	r3, r3, #3
 80053d6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	4413      	add	r3, r2
 80053de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	683a      	ldr	r2, [r7, #0]
 80053ea:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	2200      	movs	r2, #0
 80053f0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	2200      	movs	r2, #0
 80053f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053f8:	7afb      	ldrb	r3, [r7, #11]
 80053fa:	f003 0307 	and.w	r3, r3, #7
 80053fe:	b2da      	uxtb	r2, r3
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6979      	ldr	r1, [r7, #20]
 800540a:	4618      	mov	r0, r3
 800540c:	f004 ff7d 	bl	800a30a <USB_EPStartXfer>

  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3718      	adds	r7, #24
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800541a:	b480      	push	{r7}
 800541c:	b083      	sub	sp, #12
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
 8005422:	460b      	mov	r3, r1
 8005424:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005426:	78fb      	ldrb	r3, [r7, #3]
 8005428:	f003 0207 	and.w	r2, r3, #7
 800542c:	6879      	ldr	r1, [r7, #4]
 800542e:	4613      	mov	r3, r2
 8005430:	009b      	lsls	r3, r3, #2
 8005432:	4413      	add	r3, r2
 8005434:	00db      	lsls	r3, r3, #3
 8005436:	440b      	add	r3, r1
 8005438:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800543c:	681b      	ldr	r3, [r3, #0]
}
 800543e:	4618      	mov	r0, r3
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b086      	sub	sp, #24
 800544e:	af00      	add	r7, sp, #0
 8005450:	60f8      	str	r0, [r7, #12]
 8005452:	607a      	str	r2, [r7, #4]
 8005454:	603b      	str	r3, [r7, #0]
 8005456:	460b      	mov	r3, r1
 8005458:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800545a:	7afb      	ldrb	r3, [r7, #11]
 800545c:	f003 0207 	and.w	r2, r3, #7
 8005460:	4613      	mov	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	4413      	add	r3, r2
 8005466:	00db      	lsls	r3, r3, #3
 8005468:	3310      	adds	r3, #16
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	4413      	add	r3, r2
 800546e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	683a      	ldr	r2, [r7, #0]
 800547a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	2200      	movs	r2, #0
 800548e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	2201      	movs	r2, #1
 8005494:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005496:	7afb      	ldrb	r3, [r7, #11]
 8005498:	f003 0307 	and.w	r3, r3, #7
 800549c:	b2da      	uxtb	r2, r3
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	6979      	ldr	r1, [r7, #20]
 80054a8:	4618      	mov	r0, r3
 80054aa:	f004 ff2e 	bl	800a30a <USB_EPStartXfer>

  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3718      	adds	r7, #24
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	460b      	mov	r3, r1
 80054c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80054c4:	78fb      	ldrb	r3, [r7, #3]
 80054c6:	f003 0307 	and.w	r3, r3, #7
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	7912      	ldrb	r2, [r2, #4]
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d901      	bls.n	80054d6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e03e      	b.n	8005554 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80054d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	da0e      	bge.n	80054fc <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054de:	78fb      	ldrb	r3, [r7, #3]
 80054e0:	f003 0207 	and.w	r2, r3, #7
 80054e4:	4613      	mov	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
 80054ea:	00db      	lsls	r3, r3, #3
 80054ec:	3310      	adds	r3, #16
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	4413      	add	r3, r2
 80054f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2201      	movs	r2, #1
 80054f8:	705a      	strb	r2, [r3, #1]
 80054fa:	e00c      	b.n	8005516 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80054fc:	78fa      	ldrb	r2, [r7, #3]
 80054fe:	4613      	mov	r3, r2
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	4413      	add	r3, r2
 8005504:	00db      	lsls	r3, r3, #3
 8005506:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	4413      	add	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2201      	movs	r2, #1
 800551a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800551c:	78fb      	ldrb	r3, [r7, #3]
 800551e:	f003 0307 	and.w	r3, r3, #7
 8005522:	b2da      	uxtb	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800552e:	2b01      	cmp	r3, #1
 8005530:	d101      	bne.n	8005536 <HAL_PCD_EP_SetStall+0x7e>
 8005532:	2302      	movs	r3, #2
 8005534:	e00e      	b.n	8005554 <HAL_PCD_EP_SetStall+0x9c>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68f9      	ldr	r1, [r7, #12]
 8005544:	4618      	mov	r0, r3
 8005546:	f006 fa91 	bl	800ba6c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3710      	adds	r7, #16
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	460b      	mov	r3, r1
 8005566:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005568:	78fb      	ldrb	r3, [r7, #3]
 800556a:	f003 030f 	and.w	r3, r3, #15
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	7912      	ldrb	r2, [r2, #4]
 8005572:	4293      	cmp	r3, r2
 8005574:	d901      	bls.n	800557a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e040      	b.n	80055fc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800557a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800557e:	2b00      	cmp	r3, #0
 8005580:	da0e      	bge.n	80055a0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005582:	78fb      	ldrb	r3, [r7, #3]
 8005584:	f003 0207 	and.w	r2, r3, #7
 8005588:	4613      	mov	r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	00db      	lsls	r3, r3, #3
 8005590:	3310      	adds	r3, #16
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	4413      	add	r3, r2
 8005596:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2201      	movs	r2, #1
 800559c:	705a      	strb	r2, [r3, #1]
 800559e:	e00e      	b.n	80055be <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055a0:	78fb      	ldrb	r3, [r7, #3]
 80055a2:	f003 0207 	and.w	r2, r3, #7
 80055a6:	4613      	mov	r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4413      	add	r3, r2
 80055ac:	00db      	lsls	r3, r3, #3
 80055ae:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	4413      	add	r3, r2
 80055b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80055c4:	78fb      	ldrb	r3, [r7, #3]
 80055c6:	f003 0307 	and.w	r3, r3, #7
 80055ca:	b2da      	uxtb	r2, r3
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d101      	bne.n	80055de <HAL_PCD_EP_ClrStall+0x82>
 80055da:	2302      	movs	r3, #2
 80055dc:	e00e      	b.n	80055fc <HAL_PCD_EP_ClrStall+0xa0>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68f9      	ldr	r1, [r7, #12]
 80055ec:	4618      	mov	r0, r3
 80055ee:	f006 fa8e 	bl	800bb0e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b096      	sub	sp, #88	@ 0x58
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800560c:	e3ad      	b.n	8005d6a <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005616:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800561a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800561e:	b2db      	uxtb	r3, r3
 8005620:	f003 030f 	and.w	r3, r3, #15
 8005624:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8005628:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800562c:	2b00      	cmp	r3, #0
 800562e:	f040 816f 	bne.w	8005910 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005632:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005636:	f003 0310 	and.w	r3, r3, #16
 800563a:	2b00      	cmp	r3, #0
 800563c:	d14c      	bne.n	80056d8 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	881b      	ldrh	r3, [r3, #0]
 8005644:	b29b      	uxth	r3, r3
 8005646:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800564a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800564e:	81fb      	strh	r3, [r7, #14]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	89fb      	ldrh	r3, [r7, #14]
 8005656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800565a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800565e:	b29b      	uxth	r3, r3
 8005660:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	3310      	adds	r3, #16
 8005666:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005670:	b29b      	uxth	r3, r3
 8005672:	461a      	mov	r2, r3
 8005674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	00db      	lsls	r3, r3, #3
 800567a:	4413      	add	r3, r2
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	6812      	ldr	r2, [r2, #0]
 8005680:	4413      	add	r3, r2
 8005682:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005686:	881b      	ldrh	r3, [r3, #0]
 8005688:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800568c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800568e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005690:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005692:	695a      	ldr	r2, [r3, #20]
 8005694:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005696:	69db      	ldr	r3, [r3, #28]
 8005698:	441a      	add	r2, r3
 800569a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800569c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800569e:	2100      	movs	r1, #0
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f008 fdd8 	bl	800e256 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	7b1b      	ldrb	r3, [r3, #12]
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 835c 	beq.w	8005d6a <PCD_EP_ISR_Handler+0x766>
 80056b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056b4:	699b      	ldr	r3, [r3, #24]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f040 8357 	bne.w	8005d6a <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	7b1b      	ldrb	r3, [r3, #12]
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80056c6:	b2da      	uxtb	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	731a      	strb	r2, [r3, #12]
 80056d6:	e348      	b.n	8005d6a <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80056de:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	881b      	ldrh	r3, [r3, #0]
 80056e6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80056ea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80056ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d032      	beq.n	800575c <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80056fe:	b29b      	uxth	r3, r3
 8005700:	461a      	mov	r2, r3
 8005702:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	00db      	lsls	r3, r3, #3
 8005708:	4413      	add	r3, r2
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	6812      	ldr	r2, [r2, #0]
 800570e:	4413      	add	r3, r2
 8005710:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005714:	881b      	ldrh	r3, [r3, #0]
 8005716:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800571a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800571c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6818      	ldr	r0, [r3, #0]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8005728:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800572a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800572c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800572e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005730:	b29b      	uxth	r3, r3
 8005732:	f006 fb18 	bl	800bd66 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	881b      	ldrh	r3, [r3, #0]
 800573c:	b29a      	uxth	r2, r3
 800573e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005742:	4013      	ands	r3, r2
 8005744:	823b      	strh	r3, [r7, #16]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	8a3a      	ldrh	r2, [r7, #16]
 800574c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005750:	b292      	uxth	r2, r2
 8005752:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f008 fd51 	bl	800e1fc <HAL_PCD_SetupStageCallback>
 800575a:	e306      	b.n	8005d6a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800575c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8005760:	2b00      	cmp	r3, #0
 8005762:	f280 8302 	bge.w	8005d6a <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	881b      	ldrh	r3, [r3, #0]
 800576c:	b29a      	uxth	r2, r3
 800576e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005772:	4013      	ands	r3, r2
 8005774:	83fb      	strh	r3, [r7, #30]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	8bfa      	ldrh	r2, [r7, #30]
 800577c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005780:	b292      	uxth	r2, r2
 8005782:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800578c:	b29b      	uxth	r3, r3
 800578e:	461a      	mov	r2, r3
 8005790:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	00db      	lsls	r3, r3, #3
 8005796:	4413      	add	r3, r2
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	6812      	ldr	r2, [r2, #0]
 800579c:	4413      	add	r3, r2
 800579e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80057a2:	881b      	ldrh	r3, [r3, #0]
 80057a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80057a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057aa:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80057ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057ae:	69db      	ldr	r3, [r3, #28]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d019      	beq.n	80057e8 <PCD_EP_ISR_Handler+0x1e4>
 80057b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057b6:	695b      	ldr	r3, [r3, #20]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d015      	beq.n	80057e8 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6818      	ldr	r0, [r3, #0]
 80057c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057c2:	6959      	ldr	r1, [r3, #20]
 80057c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057c6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80057c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057ca:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80057cc:	b29b      	uxth	r3, r3
 80057ce:	f006 faca 	bl	800bd66 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80057d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057d4:	695a      	ldr	r2, [r3, #20]
 80057d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057d8:	69db      	ldr	r3, [r3, #28]
 80057da:	441a      	add	r2, r3
 80057dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057de:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80057e0:	2100      	movs	r1, #0
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f008 fd1c 	bl	800e220 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	881b      	ldrh	r3, [r3, #0]
 80057ee:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80057f2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80057f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f040 82b5 	bne.w	8005d6a <PCD_EP_ISR_Handler+0x766>
 8005800:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005804:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005808:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800580c:	f000 82ad 	beq.w	8005d6a <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	61bb      	str	r3, [r7, #24]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800581e:	b29b      	uxth	r3, r3
 8005820:	461a      	mov	r2, r3
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	4413      	add	r3, r2
 8005826:	61bb      	str	r3, [r7, #24]
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800582e:	617b      	str	r3, [r7, #20]
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	881b      	ldrh	r3, [r3, #0]
 8005834:	b29b      	uxth	r3, r3
 8005836:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800583a:	b29a      	uxth	r2, r3
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	801a      	strh	r2, [r3, #0]
 8005840:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	2b3e      	cmp	r3, #62	@ 0x3e
 8005846:	d91d      	bls.n	8005884 <PCD_EP_ISR_Handler+0x280>
 8005848:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	095b      	lsrs	r3, r3, #5
 800584e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005850:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	f003 031f 	and.w	r3, r3, #31
 8005858:	2b00      	cmp	r3, #0
 800585a:	d102      	bne.n	8005862 <PCD_EP_ISR_Handler+0x25e>
 800585c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800585e:	3b01      	subs	r3, #1
 8005860:	647b      	str	r3, [r7, #68]	@ 0x44
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	881b      	ldrh	r3, [r3, #0]
 8005866:	b29a      	uxth	r2, r3
 8005868:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800586a:	b29b      	uxth	r3, r3
 800586c:	029b      	lsls	r3, r3, #10
 800586e:	b29b      	uxth	r3, r3
 8005870:	4313      	orrs	r3, r2
 8005872:	b29b      	uxth	r3, r3
 8005874:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005878:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800587c:	b29a      	uxth	r2, r3
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	801a      	strh	r2, [r3, #0]
 8005882:	e026      	b.n	80058d2 <PCD_EP_ISR_Handler+0x2ce>
 8005884:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d10a      	bne.n	80058a2 <PCD_EP_ISR_Handler+0x29e>
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	881b      	ldrh	r3, [r3, #0]
 8005890:	b29b      	uxth	r3, r3
 8005892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800589a:	b29a      	uxth	r2, r3
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	801a      	strh	r2, [r3, #0]
 80058a0:	e017      	b.n	80058d2 <PCD_EP_ISR_Handler+0x2ce>
 80058a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	085b      	lsrs	r3, r3, #1
 80058a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80058aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d002      	beq.n	80058bc <PCD_EP_ISR_Handler+0x2b8>
 80058b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058b8:	3301      	adds	r3, #1
 80058ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	881b      	ldrh	r3, [r3, #0]
 80058c0:	b29a      	uxth	r2, r3
 80058c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	029b      	lsls	r3, r3, #10
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	4313      	orrs	r3, r2
 80058cc:	b29a      	uxth	r2, r3
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	881b      	ldrh	r3, [r3, #0]
 80058d8:	b29b      	uxth	r3, r3
 80058da:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058e2:	827b      	strh	r3, [r7, #18]
 80058e4:	8a7b      	ldrh	r3, [r7, #18]
 80058e6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80058ea:	827b      	strh	r3, [r7, #18]
 80058ec:	8a7b      	ldrh	r3, [r7, #18]
 80058ee:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80058f2:	827b      	strh	r3, [r7, #18]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	8a7b      	ldrh	r3, [r7, #18]
 80058fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80058fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005902:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005906:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800590a:	b29b      	uxth	r3, r3
 800590c:	8013      	strh	r3, [r2, #0]
 800590e:	e22c      	b.n	8005d6a <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	461a      	mov	r2, r3
 8005916:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	881b      	ldrh	r3, [r3, #0]
 8005920:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005924:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8005928:	2b00      	cmp	r3, #0
 800592a:	f280 80f6 	bge.w	8005b1a <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	461a      	mov	r2, r3
 8005934:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4413      	add	r3, r2
 800593c:	881b      	ldrh	r3, [r3, #0]
 800593e:	b29a      	uxth	r2, r3
 8005940:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005944:	4013      	ands	r3, r2
 8005946:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	461a      	mov	r2, r3
 8005950:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	4413      	add	r3, r2
 8005958:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800595c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005960:	b292      	uxth	r2, r2
 8005962:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005964:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8005968:	4613      	mov	r3, r2
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	4413      	add	r3, r2
 800596e:	00db      	lsls	r3, r3, #3
 8005970:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	4413      	add	r3, r2
 8005978:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800597a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800597c:	7b1b      	ldrb	r3, [r3, #12]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d123      	bne.n	80059ca <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800598a:	b29b      	uxth	r3, r3
 800598c:	461a      	mov	r2, r3
 800598e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	00db      	lsls	r3, r3, #3
 8005994:	4413      	add	r3, r2
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	6812      	ldr	r2, [r2, #0]
 800599a:	4413      	add	r3, r2
 800599c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80059a0:	881b      	ldrh	r3, [r3, #0]
 80059a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059a6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80059aa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f000 808e 	beq.w	8005ad0 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6818      	ldr	r0, [r3, #0]
 80059b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059ba:	6959      	ldr	r1, [r3, #20]
 80059bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059be:	88da      	ldrh	r2, [r3, #6]
 80059c0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80059c4:	f006 f9cf 	bl	800bd66 <USB_ReadPMA>
 80059c8:	e082      	b.n	8005ad0 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80059ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059cc:	78db      	ldrb	r3, [r3, #3]
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d10a      	bne.n	80059e8 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80059d2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80059d6:	461a      	mov	r2, r3
 80059d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f9d3 	bl	8005d86 <HAL_PCD_EP_DB_Receive>
 80059e0:	4603      	mov	r3, r0
 80059e2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80059e6:	e073      	b.n	8005ad0 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	461a      	mov	r2, r3
 80059ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4413      	add	r3, r2
 80059f6:	881b      	ldrh	r3, [r3, #0]
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a02:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a0e:	781b      	ldrb	r3, [r3, #0]
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	441a      	add	r2, r3
 8005a14:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8005a18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a24:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	461a      	mov	r2, r3
 8005a32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	881b      	ldrh	r3, [r3, #0]
 8005a3c:	b29b      	uxth	r3, r3
 8005a3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d022      	beq.n	8005a8c <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	461a      	mov	r2, r3
 8005a52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	00db      	lsls	r3, r3, #3
 8005a58:	4413      	add	r3, r2
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	6812      	ldr	r2, [r2, #0]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005a64:	881b      	ldrh	r3, [r3, #0]
 8005a66:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a6a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8005a6e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d02c      	beq.n	8005ad0 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6818      	ldr	r0, [r3, #0]
 8005a7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a7c:	6959      	ldr	r1, [r3, #20]
 8005a7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a80:	891a      	ldrh	r2, [r3, #8]
 8005a82:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005a86:	f006 f96e 	bl	800bd66 <USB_ReadPMA>
 8005a8a:	e021      	b.n	8005ad0 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	461a      	mov	r2, r3
 8005a98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	00db      	lsls	r3, r3, #3
 8005a9e:	4413      	add	r3, r2
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6812      	ldr	r2, [r2, #0]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005aaa:	881b      	ldrh	r3, [r3, #0]
 8005aac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ab0:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8005ab4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d009      	beq.n	8005ad0 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6818      	ldr	r0, [r3, #0]
 8005ac0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ac2:	6959      	ldr	r1, [r3, #20]
 8005ac4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ac6:	895a      	ldrh	r2, [r3, #10]
 8005ac8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005acc:	f006 f94b 	bl	800bd66 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005ad0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ad2:	69da      	ldr	r2, [r3, #28]
 8005ad4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005ad8:	441a      	add	r2, r3
 8005ada:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005adc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005ade:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ae0:	695a      	ldr	r2, [r3, #20]
 8005ae2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005ae6:	441a      	add	r2, r3
 8005ae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005aea:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8005aec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d005      	beq.n	8005b00 <PCD_EP_ISR_Handler+0x4fc>
 8005af4:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8005af8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d206      	bcs.n	8005b0e <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005b00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	4619      	mov	r1, r3
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f008 fb8a 	bl	800e220 <HAL_PCD_DataOutStageCallback>
 8005b0c:	e005      	b.n	8005b1a <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005b14:	4618      	mov	r0, r3
 8005b16:	f004 fbf8 	bl	800a30a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005b1a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005b1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f000 8121 	beq.w	8005d6a <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8005b28:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4413      	add	r3, r2
 8005b32:	00db      	lsls	r3, r3, #3
 8005b34:	3310      	adds	r3, #16
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	4413      	add	r3, r2
 8005b3a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	461a      	mov	r2, r3
 8005b42:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	4413      	add	r3, r2
 8005b4a:	881b      	ldrh	r3, [r3, #0]
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8005b52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b56:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	461a      	mov	r2, r3
 8005b60:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	441a      	add	r2, r3
 8005b68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8005b6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005b78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b7a:	78db      	ldrb	r3, [r3, #3]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	f040 80a2 	bne.w	8005cc6 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8005b82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b84:	2200      	movs	r2, #0
 8005b86:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005b88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b8a:	7b1b      	ldrb	r3, [r3, #12]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f000 8093 	beq.w	8005cb8 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005b92:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005b96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d046      	beq.n	8005c2c <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ba0:	785b      	ldrb	r3, [r3, #1]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d126      	bne.n	8005bf4 <PCD_EP_ISR_Handler+0x5f0>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bba:	4413      	add	r3, r2
 8005bbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	00da      	lsls	r2, r3, #3
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005bcc:	623b      	str	r3, [r7, #32]
 8005bce:	6a3b      	ldr	r3, [r7, #32]
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	6a3b      	ldr	r3, [r7, #32]
 8005bdc:	801a      	strh	r2, [r3, #0]
 8005bde:	6a3b      	ldr	r3, [r7, #32]
 8005be0:	881b      	ldrh	r3, [r3, #0]
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005be8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	801a      	strh	r2, [r3, #0]
 8005bf2:	e061      	b.n	8005cb8 <PCD_EP_ISR_Handler+0x6b4>
 8005bf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bf6:	785b      	ldrb	r3, [r3, #1]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d15d      	bne.n	8005cb8 <PCD_EP_ISR_Handler+0x6b4>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c10:	4413      	add	r3, r2
 8005c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	00da      	lsls	r2, r3, #3
 8005c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005c22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c26:	2200      	movs	r2, #0
 8005c28:	801a      	strh	r2, [r3, #0]
 8005c2a:	e045      	b.n	8005cb8 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c34:	785b      	ldrb	r3, [r3, #1]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d126      	bne.n	8005c88 <PCD_EP_ISR_Handler+0x684>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c4e:	4413      	add	r3, r2
 8005c50:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	00da      	lsls	r2, r3, #3
 8005c58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005c60:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c64:	881b      	ldrh	r3, [r3, #0]
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c6c:	b29a      	uxth	r2, r3
 8005c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c70:	801a      	strh	r2, [r3, #0]
 8005c72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c74:	881b      	ldrh	r3, [r3, #0]
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c84:	801a      	strh	r2, [r3, #0]
 8005c86:	e017      	b.n	8005cb8 <PCD_EP_ISR_Handler+0x6b4>
 8005c88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c8a:	785b      	ldrb	r3, [r3, #1]
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d113      	bne.n	8005cb8 <PCD_EP_ISR_Handler+0x6b4>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c9e:	4413      	add	r3, r2
 8005ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ca2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	00da      	lsls	r2, r3, #3
 8005ca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005caa:	4413      	add	r3, r2
 8005cac:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005cb0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005cb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f008 fac9 	bl	800e256 <HAL_PCD_DataInStageCallback>
 8005cc4:	e051      	b.n	8005d6a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005cc6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d144      	bne.n	8005d5c <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	461a      	mov	r2, r3
 8005cde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	4413      	add	r3, r2
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	6812      	ldr	r2, [r2, #0]
 8005cea:	4413      	add	r3, r2
 8005cec:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005cf0:	881b      	ldrh	r3, [r3, #0]
 8005cf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cf6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8005cfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cfc:	699a      	ldr	r2, [r3, #24]
 8005cfe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d907      	bls.n	8005d16 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8005d06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d08:	699a      	ldr	r2, [r3, #24]
 8005d0a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005d0e:	1ad2      	subs	r2, r2, r3
 8005d10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d12:	619a      	str	r2, [r3, #24]
 8005d14:	e002      	b.n	8005d1c <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8005d16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d18:	2200      	movs	r2, #0
 8005d1a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005d1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d106      	bne.n	8005d32 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005d24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	4619      	mov	r1, r3
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f008 fa93 	bl	800e256 <HAL_PCD_DataInStageCallback>
 8005d30:	e01b      	b.n	8005d6a <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005d32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d34:	695a      	ldr	r2, [r3, #20]
 8005d36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005d3a:	441a      	add	r2, r3
 8005d3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d3e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005d40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d42:	69da      	ldr	r2, [r3, #28]
 8005d44:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005d48:	441a      	add	r2, r3
 8005d4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d4c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005d54:	4618      	mov	r0, r3
 8005d56:	f004 fad8 	bl	800a30a <USB_EPStartXfer>
 8005d5a:	e006      	b.n	8005d6a <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005d5c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005d60:	461a      	mov	r2, r3
 8005d62:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 f917 	bl	8005f98 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	b21b      	sxth	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f6ff ac49 	blt.w	800560e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3758      	adds	r7, #88	@ 0x58
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b088      	sub	sp, #32
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	60f8      	str	r0, [r7, #12]
 8005d8e:	60b9      	str	r1, [r7, #8]
 8005d90:	4613      	mov	r3, r2
 8005d92:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005d94:	88fb      	ldrh	r3, [r7, #6]
 8005d96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d07c      	beq.n	8005e98 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	461a      	mov	r2, r3
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	00db      	lsls	r3, r3, #3
 8005db0:	4413      	add	r3, r2
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	6812      	ldr	r2, [r2, #0]
 8005db6:	4413      	add	r3, r2
 8005db8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005dbc:	881b      	ldrh	r3, [r3, #0]
 8005dbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dc2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	699a      	ldr	r2, [r3, #24]
 8005dc8:	8b7b      	ldrh	r3, [r7, #26]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d306      	bcc.n	8005ddc <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	699a      	ldr	r2, [r3, #24]
 8005dd2:	8b7b      	ldrh	r3, [r7, #26]
 8005dd4:	1ad2      	subs	r2, r2, r3
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	619a      	str	r2, [r3, #24]
 8005dda:	e002      	b.n	8005de2 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	2200      	movs	r2, #0
 8005de0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d123      	bne.n	8005e32 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	461a      	mov	r2, r3
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	881b      	ldrh	r3, [r3, #0]
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e04:	833b      	strh	r3, [r7, #24]
 8005e06:	8b3b      	ldrh	r3, [r7, #24]
 8005e08:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005e0c:	833b      	strh	r3, [r7, #24]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	461a      	mov	r2, r3
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	441a      	add	r2, r3
 8005e1c:	8b3b      	ldrh	r3, [r7, #24]
 8005e1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005e32:	88fb      	ldrh	r3, [r7, #6]
 8005e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d01f      	beq.n	8005e7c <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	461a      	mov	r2, r3
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4413      	add	r3, r2
 8005e4a:	881b      	ldrh	r3, [r3, #0]
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e56:	82fb      	strh	r3, [r7, #22]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	441a      	add	r2, r3
 8005e66:	8afb      	ldrh	r3, [r7, #22]
 8005e68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e74:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005e7c:	8b7b      	ldrh	r3, [r7, #26]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f000 8085 	beq.w	8005f8e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6818      	ldr	r0, [r3, #0]
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	6959      	ldr	r1, [r3, #20]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	891a      	ldrh	r2, [r3, #8]
 8005e90:	8b7b      	ldrh	r3, [r7, #26]
 8005e92:	f005 ff68 	bl	800bd66 <USB_ReadPMA>
 8005e96:	e07a      	b.n	8005f8e <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	00db      	lsls	r3, r3, #3
 8005eaa:	4413      	add	r3, r2
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	6812      	ldr	r2, [r2, #0]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8005eb6:	881b      	ldrh	r3, [r3, #0]
 8005eb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ebc:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	699a      	ldr	r2, [r3, #24]
 8005ec2:	8b7b      	ldrh	r3, [r7, #26]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d306      	bcc.n	8005ed6 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	699a      	ldr	r2, [r3, #24]
 8005ecc:	8b7b      	ldrh	r3, [r7, #26]
 8005ece:	1ad2      	subs	r2, r2, r3
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	619a      	str	r2, [r3, #24]
 8005ed4:	e002      	b.n	8005edc <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d123      	bne.n	8005f2c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	461a      	mov	r2, r3
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4413      	add	r3, r2
 8005ef2:	881b      	ldrh	r3, [r3, #0]
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005efa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005efe:	83fb      	strh	r3, [r7, #30]
 8005f00:	8bfb      	ldrh	r3, [r7, #30]
 8005f02:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005f06:	83fb      	strh	r3, [r7, #30]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	441a      	add	r2, r3
 8005f16:	8bfb      	ldrh	r3, [r7, #30]
 8005f18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005f2c:	88fb      	ldrh	r3, [r7, #6]
 8005f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d11f      	bne.n	8005f76 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	4413      	add	r3, r2
 8005f44:	881b      	ldrh	r3, [r3, #0]
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f50:	83bb      	strh	r3, [r7, #28]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	461a      	mov	r2, r3
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	441a      	add	r2, r3
 8005f60:	8bbb      	ldrh	r3, [r7, #28]
 8005f62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f6e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005f76:	8b7b      	ldrh	r3, [r7, #26]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d008      	beq.n	8005f8e <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6818      	ldr	r0, [r3, #0]
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	6959      	ldr	r1, [r3, #20]
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	895a      	ldrh	r2, [r3, #10]
 8005f88:	8b7b      	ldrh	r3, [r7, #26]
 8005f8a:	f005 feec 	bl	800bd66 <USB_ReadPMA>
    }
  }

  return count;
 8005f8e:	8b7b      	ldrh	r3, [r7, #26]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3720      	adds	r7, #32
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b0a4      	sub	sp, #144	@ 0x90
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	60f8      	str	r0, [r7, #12]
 8005fa0:	60b9      	str	r1, [r7, #8]
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005fa6:	88fb      	ldrh	r3, [r7, #6]
 8005fa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f000 81db 	beq.w	8006368 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	00db      	lsls	r3, r3, #3
 8005fc4:	4413      	add	r3, r2
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	6812      	ldr	r2, [r2, #0]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8005fd0:	881b      	ldrh	r3, [r3, #0]
 8005fd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fd6:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	699a      	ldr	r2, [r3, #24]
 8005fde:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d907      	bls.n	8005ff6 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	699a      	ldr	r2, [r3, #24]
 8005fea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005fee:	1ad2      	subs	r2, r2, r3
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	619a      	str	r2, [r3, #24]
 8005ff4:	e002      	b.n	8005ffc <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	2b00      	cmp	r3, #0
 8006002:	f040 80b9 	bne.w	8006178 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	785b      	ldrb	r3, [r3, #1]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d126      	bne.n	800605c <HAL_PCD_EP_DB_Transmit+0xc4>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800601c:	b29b      	uxth	r3, r3
 800601e:	461a      	mov	r2, r3
 8006020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006022:	4413      	add	r3, r2
 8006024:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	00da      	lsls	r2, r3, #3
 800602c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800602e:	4413      	add	r3, r2
 8006030:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006034:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006038:	881b      	ldrh	r3, [r3, #0]
 800603a:	b29b      	uxth	r3, r3
 800603c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006040:	b29a      	uxth	r2, r3
 8006042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006044:	801a      	strh	r2, [r3, #0]
 8006046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006048:	881b      	ldrh	r3, [r3, #0]
 800604a:	b29b      	uxth	r3, r3
 800604c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006050:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006054:	b29a      	uxth	r2, r3
 8006056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006058:	801a      	strh	r2, [r3, #0]
 800605a:	e01a      	b.n	8006092 <HAL_PCD_EP_DB_Transmit+0xfa>
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	785b      	ldrb	r3, [r3, #1]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d116      	bne.n	8006092 <HAL_PCD_EP_DB_Transmit+0xfa>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	637b      	str	r3, [r7, #52]	@ 0x34
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006072:	b29b      	uxth	r3, r3
 8006074:	461a      	mov	r2, r3
 8006076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006078:	4413      	add	r3, r2
 800607a:	637b      	str	r3, [r7, #52]	@ 0x34
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	00da      	lsls	r2, r3, #3
 8006082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006084:	4413      	add	r3, r2
 8006086:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800608a:	633b      	str	r3, [r7, #48]	@ 0x30
 800608c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800608e:	2200      	movs	r2, #0
 8006090:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	627b      	str	r3, [r7, #36]	@ 0x24
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	785b      	ldrb	r3, [r3, #1]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d126      	bne.n	80060ee <HAL_PCD_EP_DB_Transmit+0x156>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	61fb      	str	r3, [r7, #28]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	461a      	mov	r2, r3
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	4413      	add	r3, r2
 80060b6:	61fb      	str	r3, [r7, #28]
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	00da      	lsls	r2, r3, #3
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	4413      	add	r3, r2
 80060c2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80060c6:	61bb      	str	r3, [r7, #24]
 80060c8:	69bb      	ldr	r3, [r7, #24]
 80060ca:	881b      	ldrh	r3, [r3, #0]
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	801a      	strh	r2, [r3, #0]
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	881b      	ldrh	r3, [r3, #0]
 80060dc:	b29b      	uxth	r3, r3
 80060de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060e6:	b29a      	uxth	r2, r3
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	801a      	strh	r2, [r3, #0]
 80060ec:	e017      	b.n	800611e <HAL_PCD_EP_DB_Transmit+0x186>
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	785b      	ldrb	r3, [r3, #1]
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d113      	bne.n	800611e <HAL_PCD_EP_DB_Transmit+0x186>
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80060fe:	b29b      	uxth	r3, r3
 8006100:	461a      	mov	r2, r3
 8006102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006104:	4413      	add	r3, r2
 8006106:	627b      	str	r3, [r7, #36]	@ 0x24
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	00da      	lsls	r2, r3, #3
 800610e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006110:	4413      	add	r3, r2
 8006112:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006116:	623b      	str	r3, [r7, #32]
 8006118:	6a3b      	ldr	r3, [r7, #32]
 800611a:	2200      	movs	r2, #0
 800611c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	4619      	mov	r1, r3
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f008 f896 	bl	800e256 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800612a:	88fb      	ldrh	r3, [r7, #6]
 800612c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006130:	2b00      	cmp	r3, #0
 8006132:	f000 82fa 	beq.w	800672a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	461a      	mov	r2, r3
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4413      	add	r3, r2
 8006144:	881b      	ldrh	r3, [r3, #0]
 8006146:	b29b      	uxth	r3, r3
 8006148:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800614c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006150:	82fb      	strh	r3, [r7, #22]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	461a      	mov	r2, r3
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	781b      	ldrb	r3, [r3, #0]
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	441a      	add	r2, r3
 8006160:	8afb      	ldrh	r3, [r7, #22]
 8006162:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006166:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800616a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800616e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006172:	b29b      	uxth	r3, r3
 8006174:	8013      	strh	r3, [r2, #0]
 8006176:	e2d8      	b.n	800672a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006178:	88fb      	ldrh	r3, [r7, #6]
 800617a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800617e:	2b00      	cmp	r3, #0
 8006180:	d021      	beq.n	80061c6 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	461a      	mov	r2, r3
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	4413      	add	r3, r2
 8006190:	881b      	ldrh	r3, [r3, #0]
 8006192:	b29b      	uxth	r3, r3
 8006194:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006198:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800619c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	461a      	mov	r2, r3
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	781b      	ldrb	r3, [r3, #0]
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	441a      	add	r2, r3
 80061ae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80061b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061ba:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80061be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	f040 82ac 	bne.w	800672a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	695a      	ldr	r2, [r3, #20]
 80061d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80061da:	441a      	add	r2, r3
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	69da      	ldr	r2, [r3, #28]
 80061e4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80061e8:	441a      	add	r2, r3
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	6a1a      	ldr	r2, [r3, #32]
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d30b      	bcc.n	8006212 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	6a1a      	ldr	r2, [r3, #32]
 8006206:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800620a:	1ad2      	subs	r2, r2, r3
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	621a      	str	r2, [r3, #32]
 8006210:	e017      	b.n	8006242 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d108      	bne.n	800622c <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800621a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800621e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800622a:	e00a      	b.n	8006242 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	2200      	movs	r2, #0
 8006230:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	6a1b      	ldr	r3, [r3, #32]
 8006238:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	2200      	movs	r2, #0
 8006240:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	785b      	ldrb	r3, [r3, #1]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d165      	bne.n	8006316 <HAL_PCD_EP_DB_Transmit+0x37e>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006258:	b29b      	uxth	r3, r3
 800625a:	461a      	mov	r2, r3
 800625c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800625e:	4413      	add	r3, r2
 8006260:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	00da      	lsls	r2, r3, #3
 8006268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800626a:	4413      	add	r3, r2
 800626c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006270:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006274:	881b      	ldrh	r3, [r3, #0]
 8006276:	b29b      	uxth	r3, r3
 8006278:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800627c:	b29a      	uxth	r2, r3
 800627e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006280:	801a      	strh	r2, [r3, #0]
 8006282:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006286:	2b3e      	cmp	r3, #62	@ 0x3e
 8006288:	d91d      	bls.n	80062c6 <HAL_PCD_EP_DB_Transmit+0x32e>
 800628a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800628e:	095b      	lsrs	r3, r3, #5
 8006290:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006292:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006296:	f003 031f 	and.w	r3, r3, #31
 800629a:	2b00      	cmp	r3, #0
 800629c:	d102      	bne.n	80062a4 <HAL_PCD_EP_DB_Transmit+0x30c>
 800629e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062a0:	3b01      	subs	r3, #1
 80062a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062a6:	881b      	ldrh	r3, [r3, #0]
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	029b      	lsls	r3, r3, #10
 80062b0:	b29b      	uxth	r3, r3
 80062b2:	4313      	orrs	r3, r2
 80062b4:	b29b      	uxth	r3, r3
 80062b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062be:	b29a      	uxth	r2, r3
 80062c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062c2:	801a      	strh	r2, [r3, #0]
 80062c4:	e044      	b.n	8006350 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80062c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10a      	bne.n	80062e4 <HAL_PCD_EP_DB_Transmit+0x34c>
 80062ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d0:	881b      	ldrh	r3, [r3, #0]
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80062d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80062dc:	b29a      	uxth	r2, r3
 80062de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e0:	801a      	strh	r2, [r3, #0]
 80062e2:	e035      	b.n	8006350 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80062e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062e8:	085b      	lsrs	r3, r3, #1
 80062ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d002      	beq.n	80062fe <HAL_PCD_EP_DB_Transmit+0x366>
 80062f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062fa:	3301      	adds	r3, #1
 80062fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006300:	881b      	ldrh	r3, [r3, #0]
 8006302:	b29a      	uxth	r2, r3
 8006304:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006306:	b29b      	uxth	r3, r3
 8006308:	029b      	lsls	r3, r3, #10
 800630a:	b29b      	uxth	r3, r3
 800630c:	4313      	orrs	r3, r2
 800630e:	b29a      	uxth	r2, r3
 8006310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006312:	801a      	strh	r2, [r3, #0]
 8006314:	e01c      	b.n	8006350 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	785b      	ldrb	r3, [r3, #1]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d118      	bne.n	8006350 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	647b      	str	r3, [r7, #68]	@ 0x44
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800632c:	b29b      	uxth	r3, r3
 800632e:	461a      	mov	r2, r3
 8006330:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006332:	4413      	add	r3, r2
 8006334:	647b      	str	r3, [r7, #68]	@ 0x44
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	00da      	lsls	r2, r3, #3
 800633c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800633e:	4413      	add	r3, r2
 8006340:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006344:	643b      	str	r3, [r7, #64]	@ 0x40
 8006346:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800634a:	b29a      	uxth	r2, r3
 800634c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800634e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6818      	ldr	r0, [r3, #0]
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	6959      	ldr	r1, [r3, #20]
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	891a      	ldrh	r2, [r3, #8]
 800635c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006360:	b29b      	uxth	r3, r3
 8006362:	f005 fcbd 	bl	800bce0 <USB_WritePMA>
 8006366:	e1e0      	b.n	800672a <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006370:	b29b      	uxth	r3, r3
 8006372:	461a      	mov	r2, r3
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	00db      	lsls	r3, r3, #3
 800637a:	4413      	add	r3, r2
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	6812      	ldr	r2, [r2, #0]
 8006380:	4413      	add	r3, r2
 8006382:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006386:	881b      	ldrh	r3, [r3, #0]
 8006388:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800638c:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	699a      	ldr	r2, [r3, #24]
 8006394:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006398:	429a      	cmp	r2, r3
 800639a:	d307      	bcc.n	80063ac <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	699a      	ldr	r2, [r3, #24]
 80063a0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80063a4:	1ad2      	subs	r2, r2, r3
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	619a      	str	r2, [r3, #24]
 80063aa:	e002      	b.n	80063b2 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	2200      	movs	r2, #0
 80063b0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f040 80c0 	bne.w	800653c <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	785b      	ldrb	r3, [r3, #1]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d126      	bne.n	8006412 <HAL_PCD_EP_DB_Transmit+0x47a>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	461a      	mov	r2, r3
 80063d6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80063d8:	4413      	add	r3, r2
 80063da:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	00da      	lsls	r2, r3, #3
 80063e2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80063e4:	4413      	add	r3, r2
 80063e6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80063ea:	67bb      	str	r3, [r7, #120]	@ 0x78
 80063ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063ee:	881b      	ldrh	r3, [r3, #0]
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063f6:	b29a      	uxth	r2, r3
 80063f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063fa:	801a      	strh	r2, [r3, #0]
 80063fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80063fe:	881b      	ldrh	r3, [r3, #0]
 8006400:	b29b      	uxth	r3, r3
 8006402:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006406:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800640a:	b29a      	uxth	r2, r3
 800640c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800640e:	801a      	strh	r2, [r3, #0]
 8006410:	e01a      	b.n	8006448 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	785b      	ldrb	r3, [r3, #1]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d116      	bne.n	8006448 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006428:	b29b      	uxth	r3, r3
 800642a:	461a      	mov	r2, r3
 800642c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800642e:	4413      	add	r3, r2
 8006430:	667b      	str	r3, [r7, #100]	@ 0x64
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	00da      	lsls	r2, r3, #3
 8006438:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800643a:	4413      	add	r3, r2
 800643c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8006440:	663b      	str	r3, [r7, #96]	@ 0x60
 8006442:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006444:	2200      	movs	r2, #0
 8006446:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	677b      	str	r3, [r7, #116]	@ 0x74
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	785b      	ldrb	r3, [r3, #1]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d12b      	bne.n	80064ae <HAL_PCD_EP_DB_Transmit+0x516>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006464:	b29b      	uxth	r3, r3
 8006466:	461a      	mov	r2, r3
 8006468:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800646a:	4413      	add	r3, r2
 800646c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	00da      	lsls	r2, r3, #3
 8006474:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006476:	4413      	add	r3, r2
 8006478:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800647c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006480:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006484:	881b      	ldrh	r3, [r3, #0]
 8006486:	b29b      	uxth	r3, r3
 8006488:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800648c:	b29a      	uxth	r2, r3
 800648e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006492:	801a      	strh	r2, [r3, #0]
 8006494:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006498:	881b      	ldrh	r3, [r3, #0]
 800649a:	b29b      	uxth	r3, r3
 800649c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80064aa:	801a      	strh	r2, [r3, #0]
 80064ac:	e017      	b.n	80064de <HAL_PCD_EP_DB_Transmit+0x546>
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	785b      	ldrb	r3, [r3, #1]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d113      	bne.n	80064de <HAL_PCD_EP_DB_Transmit+0x546>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80064be:	b29b      	uxth	r3, r3
 80064c0:	461a      	mov	r2, r3
 80064c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80064c4:	4413      	add	r3, r2
 80064c6:	677b      	str	r3, [r7, #116]	@ 0x74
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	00da      	lsls	r2, r3, #3
 80064ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80064d0:	4413      	add	r3, r2
 80064d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80064d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80064d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80064da:	2200      	movs	r2, #0
 80064dc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	4619      	mov	r1, r3
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f007 feb6 	bl	800e256 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80064ea:	88fb      	ldrh	r3, [r7, #6]
 80064ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	f040 811a 	bne.w	800672a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	461a      	mov	r2, r3
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	4413      	add	r3, r2
 8006504:	881b      	ldrh	r3, [r3, #0]
 8006506:	b29b      	uxth	r3, r3
 8006508:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800650c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006510:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	461a      	mov	r2, r3
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	441a      	add	r2, r3
 8006522:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8006526:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800652a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800652e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006536:	b29b      	uxth	r3, r3
 8006538:	8013      	strh	r3, [r2, #0]
 800653a:	e0f6      	b.n	800672a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800653c:	88fb      	ldrh	r3, [r7, #6]
 800653e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d121      	bne.n	800658a <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	461a      	mov	r2, r3
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	4413      	add	r3, r2
 8006554:	881b      	ldrh	r3, [r3, #0]
 8006556:	b29b      	uxth	r3, r3
 8006558:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800655c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006560:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	461a      	mov	r2, r3
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	441a      	add	r2, r3
 8006572:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006576:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800657a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800657e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006582:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006586:	b29b      	uxth	r3, r3
 8006588:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006590:	2b01      	cmp	r3, #1
 8006592:	f040 80ca 	bne.w	800672a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	695a      	ldr	r2, [r3, #20]
 800659a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800659e:	441a      	add	r2, r3
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	69da      	ldr	r2, [r3, #28]
 80065a8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80065ac:	441a      	add	r2, r3
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	6a1a      	ldr	r2, [r3, #32]
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d30b      	bcc.n	80065d6 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	6a1a      	ldr	r2, [r3, #32]
 80065ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80065ce:	1ad2      	subs	r2, r2, r3
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	621a      	str	r2, [r3, #32]
 80065d4:	e017      	b.n	8006606 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d108      	bne.n	80065f0 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 80065de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80065e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80065ee:	e00a      	b.n	8006606 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	6a1b      	ldr	r3, [r3, #32]
 80065f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	2200      	movs	r2, #0
 80065fc:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	657b      	str	r3, [r7, #84]	@ 0x54
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	785b      	ldrb	r3, [r3, #1]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d165      	bne.n	80066e0 <HAL_PCD_EP_DB_Transmit+0x748>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006622:	b29b      	uxth	r3, r3
 8006624:	461a      	mov	r2, r3
 8006626:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006628:	4413      	add	r3, r2
 800662a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	00da      	lsls	r2, r3, #3
 8006632:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006634:	4413      	add	r3, r2
 8006636:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800663a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800663c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800663e:	881b      	ldrh	r3, [r3, #0]
 8006640:	b29b      	uxth	r3, r3
 8006642:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006646:	b29a      	uxth	r2, r3
 8006648:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800664a:	801a      	strh	r2, [r3, #0]
 800664c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006650:	2b3e      	cmp	r3, #62	@ 0x3e
 8006652:	d91d      	bls.n	8006690 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8006654:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006658:	095b      	lsrs	r3, r3, #5
 800665a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800665c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006660:	f003 031f 	and.w	r3, r3, #31
 8006664:	2b00      	cmp	r3, #0
 8006666:	d102      	bne.n	800666e <HAL_PCD_EP_DB_Transmit+0x6d6>
 8006668:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800666a:	3b01      	subs	r3, #1
 800666c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800666e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006670:	881b      	ldrh	r3, [r3, #0]
 8006672:	b29a      	uxth	r2, r3
 8006674:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006676:	b29b      	uxth	r3, r3
 8006678:	029b      	lsls	r3, r3, #10
 800667a:	b29b      	uxth	r3, r3
 800667c:	4313      	orrs	r3, r2
 800667e:	b29b      	uxth	r3, r3
 8006680:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006684:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006688:	b29a      	uxth	r2, r3
 800668a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800668c:	801a      	strh	r2, [r3, #0]
 800668e:	e041      	b.n	8006714 <HAL_PCD_EP_DB_Transmit+0x77c>
 8006690:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006694:	2b00      	cmp	r3, #0
 8006696:	d10a      	bne.n	80066ae <HAL_PCD_EP_DB_Transmit+0x716>
 8006698:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800669a:	881b      	ldrh	r3, [r3, #0]
 800669c:	b29b      	uxth	r3, r3
 800669e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066a6:	b29a      	uxth	r2, r3
 80066a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80066aa:	801a      	strh	r2, [r3, #0]
 80066ac:	e032      	b.n	8006714 <HAL_PCD_EP_DB_Transmit+0x77c>
 80066ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066b2:	085b      	lsrs	r3, r3, #1
 80066b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80066b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066ba:	f003 0301 	and.w	r3, r3, #1
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d002      	beq.n	80066c8 <HAL_PCD_EP_DB_Transmit+0x730>
 80066c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80066c4:	3301      	adds	r3, #1
 80066c6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80066c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80066ca:	881b      	ldrh	r3, [r3, #0]
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80066d0:	b29b      	uxth	r3, r3
 80066d2:	029b      	lsls	r3, r3, #10
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	4313      	orrs	r3, r2
 80066d8:	b29a      	uxth	r2, r3
 80066da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80066dc:	801a      	strh	r2, [r3, #0]
 80066de:	e019      	b.n	8006714 <HAL_PCD_EP_DB_Transmit+0x77c>
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	785b      	ldrb	r3, [r3, #1]
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d115      	bne.n	8006714 <HAL_PCD_EP_DB_Transmit+0x77c>
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	461a      	mov	r2, r3
 80066f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066f6:	4413      	add	r3, r2
 80066f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	00da      	lsls	r2, r3, #3
 8006700:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006702:	4413      	add	r3, r2
 8006704:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8006708:	653b      	str	r3, [r7, #80]	@ 0x50
 800670a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800670e:	b29a      	uxth	r2, r3
 8006710:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006712:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6818      	ldr	r0, [r3, #0]
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	6959      	ldr	r1, [r3, #20]
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	895a      	ldrh	r2, [r3, #10]
 8006720:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006724:	b29b      	uxth	r3, r3
 8006726:	f005 fadb 	bl	800bce0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	461a      	mov	r2, r3
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	4413      	add	r3, r2
 8006738:	881b      	ldrh	r3, [r3, #0]
 800673a:	b29b      	uxth	r3, r3
 800673c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006740:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006744:	82bb      	strh	r3, [r7, #20]
 8006746:	8abb      	ldrh	r3, [r7, #20]
 8006748:	f083 0310 	eor.w	r3, r3, #16
 800674c:	82bb      	strh	r3, [r7, #20]
 800674e:	8abb      	ldrh	r3, [r7, #20]
 8006750:	f083 0320 	eor.w	r3, r3, #32
 8006754:	82bb      	strh	r3, [r7, #20]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	461a      	mov	r2, r3
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	009b      	lsls	r3, r3, #2
 8006762:	441a      	add	r2, r3
 8006764:	8abb      	ldrh	r3, [r7, #20]
 8006766:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800676a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800676e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006772:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006776:	b29b      	uxth	r3, r3
 8006778:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800677a:	2300      	movs	r3, #0
}
 800677c:	4618      	mov	r0, r3
 800677e:	3790      	adds	r7, #144	@ 0x90
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}

08006784 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006784:	b480      	push	{r7}
 8006786:	b087      	sub	sp, #28
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	607b      	str	r3, [r7, #4]
 800678e:	460b      	mov	r3, r1
 8006790:	817b      	strh	r3, [r7, #10]
 8006792:	4613      	mov	r3, r2
 8006794:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8006796:	897b      	ldrh	r3, [r7, #10]
 8006798:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800679c:	b29b      	uxth	r3, r3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00b      	beq.n	80067ba <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067a2:	897b      	ldrh	r3, [r7, #10]
 80067a4:	f003 0207 	and.w	r2, r3, #7
 80067a8:	4613      	mov	r3, r2
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	00db      	lsls	r3, r3, #3
 80067b0:	3310      	adds	r3, #16
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	4413      	add	r3, r2
 80067b6:	617b      	str	r3, [r7, #20]
 80067b8:	e009      	b.n	80067ce <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80067ba:	897a      	ldrh	r2, [r7, #10]
 80067bc:	4613      	mov	r3, r2
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	4413      	add	r3, r2
 80067c2:	00db      	lsls	r3, r3, #3
 80067c4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	4413      	add	r3, r2
 80067cc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80067ce:	893b      	ldrh	r3, [r7, #8]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d107      	bne.n	80067e4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	2200      	movs	r2, #0
 80067d8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	b29a      	uxth	r2, r3
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	80da      	strh	r2, [r3, #6]
 80067e2:	e00b      	b.n	80067fc <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	2201      	movs	r2, #1
 80067e8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	0c1b      	lsrs	r3, r3, #16
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	371c      	adds	r7, #28
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr

0800680a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800680a:	b480      	push	{r7}
 800680c:	b085      	sub	sp, #20
 800680e:	af00      	add	r7, sp, #0
 8006810:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800682e:	b29b      	uxth	r3, r3
 8006830:	f043 0301 	orr.w	r3, r3, #1
 8006834:	b29a      	uxth	r2, r3
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8006842:	b29b      	uxth	r3, r3
 8006844:	f043 0302 	orr.w	r3, r3, #2
 8006848:	b29a      	uxth	r2, r3
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3714      	adds	r7, #20
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
	...

08006860 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006860:	b480      	push	{r7}
 8006862:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006864:	4b05      	ldr	r3, [pc, #20]	@ (800687c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a04      	ldr	r2, [pc, #16]	@ (800687c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800686a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800686e:	6013      	str	r3, [r2, #0]
}
 8006870:	bf00      	nop
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop
 800687c:	58000400 	.word	0x58000400

08006880 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006880:	b480      	push	{r7}
 8006882:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8006884:	4b04      	ldr	r3, [pc, #16]	@ (8006898 <HAL_PWREx_GetVoltageRange+0x18>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800688c:	4618      	mov	r0, r3
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop
 8006898:	58000400 	.word	0x58000400

0800689c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800689c:	b480      	push	{r7}
 800689e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80068a0:	4b05      	ldr	r3, [pc, #20]	@ (80068b8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	4a04      	ldr	r2, [pc, #16]	@ (80068b8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80068a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80068aa:	6053      	str	r3, [r2, #4]
}
 80068ac:	bf00      	nop
 80068ae:	46bd      	mov	sp, r7
 80068b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	58000400 	.word	0x58000400

080068bc <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 80068bc:	b480      	push	{r7}
 80068be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80068c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80068ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80068ce:	d101      	bne.n	80068d4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80068d0:	2301      	movs	r3, #1
 80068d2:	e000      	b.n	80068d6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80068e0:	b480      	push	{r7}
 80068e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80068e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80068ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068f2:	6013      	str	r3, [r2, #0]
}
 80068f4:	bf00      	nop
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr

080068fe <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 80068fe:	b480      	push	{r7}
 8006900:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8006902:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800690c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006910:	6013      	str	r3, [r2, #0]
}
 8006912:	bf00      	nop
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800691c:	b480      	push	{r7}
 800691e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8006920:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800692a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800692e:	d101      	bne.n	8006934 <LL_RCC_HSE_IsReady+0x18>
 8006930:	2301      	movs	r3, #1
 8006932:	e000      	b.n	8006936 <LL_RCC_HSE_IsReady+0x1a>
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8006940:	b480      	push	{r7}
 8006942:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8006944:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800694e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006952:	6013      	str	r3, [r2, #0]
}
 8006954:	bf00      	nop
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr

0800695e <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800695e:	b480      	push	{r7}
 8006960:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8006962:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800696c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006970:	6013      	str	r3, [r2, #0]
}
 8006972:	bf00      	nop
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800697c:	b480      	push	{r7}
 800697e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8006980:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800698a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800698e:	d101      	bne.n	8006994 <LL_RCC_HSI_IsReady+0x18>
 8006990:	2301      	movs	r3, #1
 8006992:	e000      	b.n	8006996 <LL_RCC_HSI_IsReady+0x1a>
 8006994:	2300      	movs	r3, #0
}
 8006996:	4618      	mov	r0, r3
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80069a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	061b      	lsls	r3, r3, #24
 80069b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069ba:	4313      	orrs	r3, r2
 80069bc:	604b      	str	r3, [r1, #4]
}
 80069be:	bf00      	nop
 80069c0:	370c      	adds	r7, #12
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr

080069ca <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 80069ca:	b480      	push	{r7}
 80069cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80069ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80069d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80069da:	f043 0301 	orr.w	r3, r3, #1
 80069de:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80069e2:	bf00      	nop
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 80069ec:	b480      	push	{r7}
 80069ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80069f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80069f8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80069fc:	f023 0301 	bic.w	r3, r3, #1
 8006a00:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8006a04:	bf00      	nop
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr

08006a0e <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8006a0e:	b480      	push	{r7}
 8006a10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8006a12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a16:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006a1a:	f003 0302 	and.w	r3, r3, #2
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d101      	bne.n	8006a26 <LL_RCC_HSI48_IsReady+0x18>
 8006a22:	2301      	movs	r3, #1
 8006a24:	e000      	b.n	8006a28 <LL_RCC_HSI48_IsReady+0x1a>
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr

08006a32 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 8006a32:	b480      	push	{r7}
 8006a34:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006a36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a3e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a42:	f043 0301 	orr.w	r3, r3, #1
 8006a46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006a4a:	bf00      	nop
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 8006a54:	b480      	push	{r7}
 8006a56:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006a58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a64:	f023 0301 	bic.w	r3, r3, #1
 8006a68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006a6c:	bf00      	nop
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr

08006a76 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8006a76:	b480      	push	{r7}
 8006a78:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006a7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a82:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a86:	f043 0304 	orr.w	r3, r3, #4
 8006a8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006a8e:	bf00      	nop
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr

08006a98 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006a9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006aa4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006aa8:	f023 0304 	bic.w	r3, r3, #4
 8006aac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006ab0:	bf00      	nop
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr

08006aba <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8006aba:	b480      	push	{r7}
 8006abc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8006abe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ac6:	f003 0302 	and.w	r3, r3, #2
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d101      	bne.n	8006ad2 <LL_RCC_LSE_IsReady+0x18>
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e000      	b.n	8006ad4 <LL_RCC_LSE_IsReady+0x1a>
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006ae2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ae6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006aea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006aee:	f043 0301 	orr.w	r3, r3, #1
 8006af2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006af6:	bf00      	nop
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 8006b00:	b480      	push	{r7}
 8006b02:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8006b04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b0c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b10:	f023 0301 	bic.w	r3, r3, #1
 8006b14:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006b18:	bf00      	nop
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 8006b22:	b480      	push	{r7}
 8006b24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8006b26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b2e:	f003 0302 	and.w	r3, r3, #2
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d101      	bne.n	8006b3a <LL_RCC_LSI1_IsReady+0x18>
 8006b36:	2301      	movs	r3, #1
 8006b38:	e000      	b.n	8006b3c <LL_RCC_LSI1_IsReady+0x1a>
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr

08006b46 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 8006b46:	b480      	push	{r7}
 8006b48:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006b4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b56:	f043 0304 	orr.w	r3, r3, #4
 8006b5a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006b5e:	bf00      	nop
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr

08006b68 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8006b6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006b78:	f023 0304 	bic.w	r3, r3, #4
 8006b7c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006b80:	bf00      	nop
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr

08006b8a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8006b8a:	b480      	push	{r7}
 8006b8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8006b8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b96:	f003 0308 	and.w	r3, r3, #8
 8006b9a:	2b08      	cmp	r3, #8
 8006b9c:	d101      	bne.n	8006ba2 <LL_RCC_LSI2_IsReady+0x18>
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e000      	b.n	8006ba4 <LL_RCC_LSI2_IsReady+0x1a>
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b083      	sub	sp, #12
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8006bb6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bbe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	021b      	lsls	r3, r3, #8
 8006bc6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8006bd0:	bf00      	nop
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8006be0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006bea:	f043 0301 	orr.w	r3, r3, #1
 8006bee:	6013      	str	r3, [r2, #0]
}
 8006bf0:	bf00      	nop
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr

08006bfa <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8006bfa:	b480      	push	{r7}
 8006bfc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8006bfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c08:	f023 0301 	bic.w	r3, r3, #1
 8006c0c:	6013      	str	r3, [r2, #0]
}
 8006c0e:	bf00      	nop
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8006c1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f003 0302 	and.w	r3, r3, #2
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d101      	bne.n	8006c2e <LL_RCC_MSI_IsReady+0x16>
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e000      	b.n	8006c30 <LL_RCC_MSI_IsReady+0x18>
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b083      	sub	sp, #12
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8006c42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006c4c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	600b      	str	r3, [r1, #0]
}
 8006c56:	bf00      	nop
 8006c58:	370c      	adds	r7, #12
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr

08006c62 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8006c62:	b480      	push	{r7}
 8006c64:	b083      	sub	sp, #12
 8006c66:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8006c68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006c72:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2bb0      	cmp	r3, #176	@ 0xb0
 8006c78:	d901      	bls.n	8006c7e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8006c7a:	23b0      	movs	r3, #176	@ 0xb0
 8006c7c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 8006c7e:	687b      	ldr	r3, [r7, #4]
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b083      	sub	sp, #12
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8006c94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	021b      	lsls	r3, r3, #8
 8006ca2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	604b      	str	r3, [r1, #4]
}
 8006caa:	bf00      	nop
 8006cac:	370c      	adds	r7, #12
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr

08006cb6 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8006cb6:	b480      	push	{r7}
 8006cb8:	b083      	sub	sp, #12
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8006cbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	f023 0203 	bic.w	r2, r3, #3
 8006cc8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	608b      	str	r3, [r1, #8]
}
 8006cd2:	bf00      	nop
 8006cd4:	370c      	adds	r7, #12
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cdc:	4770      	bx	lr

08006cde <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8006cde:	b480      	push	{r7}
 8006ce0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8006ce2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	f003 030c 	and.w	r3, r3, #12
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8006cf6:	b480      	push	{r7}
 8006cf8:	b083      	sub	sp, #12
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8006cfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	608b      	str	r3, [r1, #8]
}
 8006d12:	bf00      	nop
 8006d14:	370c      	adds	r7, #12
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr

08006d1e <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8006d1e:	b480      	push	{r7}
 8006d20:	b083      	sub	sp, #12
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8006d26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d2a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006d2e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d32:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8006d3e:	bf00      	nop
 8006d40:	370c      	adds	r7, #12
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr

08006d4a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 8006d4a:	b480      	push	{r7}
 8006d4c:	b083      	sub	sp, #12
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8006d52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d56:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006d5a:	f023 020f 	bic.w	r2, r3, #15
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	091b      	lsrs	r3, r3, #4
 8006d62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d66:	4313      	orrs	r3, r2
 8006d68:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8006d6c:	bf00      	nop
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006d80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006d8a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	608b      	str	r3, [r1, #8]
}
 8006d94:	bf00      	nop
 8006d96:	370c      	adds	r7, #12
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b083      	sub	sp, #12
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006da8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006db2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	608b      	str	r3, [r1, #8]
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8006dcc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8006de0:	b480      	push	{r7}
 8006de2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8006de4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006de8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006dec:	011b      	lsls	r3, r3, #4
 8006dee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8006e00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8006e14:	b480      	push	{r7}
 8006e16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8006e18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e1c:	689b      	ldr	r3, [r3, #8]
 8006e1e:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006e30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e3e:	6013      	str	r3, [r2, #0]
}
 8006e40:	bf00      	nop
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr

08006e4a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8006e4a:	b480      	push	{r7}
 8006e4c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8006e4e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006e58:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e5c:	6013      	str	r3, [r2, #0]
}
 8006e5e:	bf00      	nop
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8006e6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e76:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e7a:	d101      	bne.n	8006e80 <LL_RCC_PLL_IsReady+0x18>
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e000      	b.n	8006e82 <LL_RCC_PLL_IsReady+0x1a>
 8006e80:	2300      	movs	r3, #0
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8006e90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	0a1b      	lsrs	r3, r3, #8
 8006e98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8006eaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr

08006ebe <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8006ebe:	b480      	push	{r7}
 8006ec0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8006ec2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr

08006ed6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8006eda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	f003 0303 	and.w	r3, r3, #3
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr

08006eee <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8006eee:	b480      	push	{r7}
 8006ef0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8006ef2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006efc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f00:	d101      	bne.n	8006f06 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8006f02:	2301      	movs	r3, #1
 8006f04:	e000      	b.n	8006f08 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr

08006f12 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8006f12:	b480      	push	{r7}
 8006f14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8006f16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f1a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f26:	d101      	bne.n	8006f2c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8006f28:	2301      	movs	r3, #1
 8006f2a:	e000      	b.n	8006f2e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8006f2c:	2300      	movs	r3, #0
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8006f3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f40:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8006f44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006f48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f4c:	d101      	bne.n	8006f52 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e000      	b.n	8006f54 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8006f5e:	b480      	push	{r7}
 8006f60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8006f62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006f70:	d101      	bne.n	8006f76 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8006f72:	2301      	movs	r3, #1
 8006f74:	e000      	b.n	8006f78 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr

08006f82 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8006f82:	b480      	push	{r7}
 8006f84:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8006f86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f90:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f94:	d101      	bne.n	8006f9a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8006f96:	2301      	movs	r3, #1
 8006f98:	e000      	b.n	8006f9c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr
	...

08006fa8 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fa8:	b590      	push	{r4, r7, lr}
 8006faa:	b08d      	sub	sp, #52	@ 0x34
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d101      	bne.n	8006fba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e363      	b.n	8007682 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 0320 	and.w	r3, r3, #32
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f000 808d 	beq.w	80070e2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fc8:	f7ff fe89 	bl	8006cde <LL_RCC_GetSysClkSource>
 8006fcc:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006fce:	f7ff ff82 	bl	8006ed6 <LL_RCC_PLL_GetMainSource>
 8006fd2:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d005      	beq.n	8006fe6 <HAL_RCC_OscConfig+0x3e>
 8006fda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fdc:	2b0c      	cmp	r3, #12
 8006fde:	d147      	bne.n	8007070 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8006fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fe2:	2b01      	cmp	r3, #1
 8006fe4:	d144      	bne.n	8007070 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	69db      	ldr	r3, [r3, #28]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d101      	bne.n	8006ff2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e347      	b.n	8007682 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8006ff6:	f7ff fe34 	bl	8006c62 <LL_RCC_MSI_GetRange>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	429c      	cmp	r4, r3
 8006ffe:	d914      	bls.n	800702a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007004:	4618      	mov	r0, r3
 8007006:	f000 fd2f 	bl	8007a68 <RCC_SetFlashLatencyFromMSIRange>
 800700a:	4603      	mov	r3, r0
 800700c:	2b00      	cmp	r3, #0
 800700e:	d001      	beq.n	8007014 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e336      	b.n	8007682 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007018:	4618      	mov	r0, r3
 800701a:	f7ff fe0e 	bl	8006c3a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	4618      	mov	r0, r3
 8007024:	f7ff fe32 	bl	8006c8c <LL_RCC_MSI_SetCalibTrimming>
 8007028:	e013      	b.n	8007052 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800702e:	4618      	mov	r0, r3
 8007030:	f7ff fe03 	bl	8006c3a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a1b      	ldr	r3, [r3, #32]
 8007038:	4618      	mov	r0, r3
 800703a:	f7ff fe27 	bl	8006c8c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007042:	4618      	mov	r0, r3
 8007044:	f000 fd10 	bl	8007a68 <RCC_SetFlashLatencyFromMSIRange>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d001      	beq.n	8007052 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e317      	b.n	8007682 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007052:	f000 fcc9 	bl	80079e8 <HAL_RCC_GetHCLKFreq>
 8007056:	4603      	mov	r3, r0
 8007058:	4aa4      	ldr	r2, [pc, #656]	@ (80072ec <HAL_RCC_OscConfig+0x344>)
 800705a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800705c:	4ba4      	ldr	r3, [pc, #656]	@ (80072f0 <HAL_RCC_OscConfig+0x348>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4618      	mov	r0, r3
 8007062:	f7fa fea1 	bl	8001da8 <HAL_InitTick>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d039      	beq.n	80070e0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	e308      	b.n	8007682 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	69db      	ldr	r3, [r3, #28]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d01e      	beq.n	80070b6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007078:	f7ff fdb0 	bl	8006bdc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800707c:	f7fa fee2 	bl	8001e44 <HAL_GetTick>
 8007080:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8007082:	e008      	b.n	8007096 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007084:	f7fa fede 	bl	8001e44 <HAL_GetTick>
 8007088:	4602      	mov	r2, r0
 800708a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800708c:	1ad3      	subs	r3, r2, r3
 800708e:	2b02      	cmp	r3, #2
 8007090:	d901      	bls.n	8007096 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	e2f5      	b.n	8007682 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8007096:	f7ff fdbf 	bl	8006c18 <LL_RCC_MSI_IsReady>
 800709a:	4603      	mov	r3, r0
 800709c:	2b00      	cmp	r3, #0
 800709e:	d0f1      	beq.n	8007084 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7ff fdc8 	bl	8006c3a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a1b      	ldr	r3, [r3, #32]
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7ff fdec 	bl	8006c8c <LL_RCC_MSI_SetCalibTrimming>
 80070b4:	e015      	b.n	80070e2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80070b6:	f7ff fda0 	bl	8006bfa <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80070ba:	f7fa fec3 	bl	8001e44 <HAL_GetTick>
 80070be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80070c0:	e008      	b.n	80070d4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80070c2:	f7fa febf 	bl	8001e44 <HAL_GetTick>
 80070c6:	4602      	mov	r2, r0
 80070c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ca:	1ad3      	subs	r3, r2, r3
 80070cc:	2b02      	cmp	r3, #2
 80070ce:	d901      	bls.n	80070d4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80070d0:	2303      	movs	r3, #3
 80070d2:	e2d6      	b.n	8007682 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80070d4:	f7ff fda0 	bl	8006c18 <LL_RCC_MSI_IsReady>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1f1      	bne.n	80070c2 <HAL_RCC_OscConfig+0x11a>
 80070de:	e000      	b.n	80070e2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80070e0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d047      	beq.n	800717e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070ee:	f7ff fdf6 	bl	8006cde <LL_RCC_GetSysClkSource>
 80070f2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80070f4:	f7ff feef 	bl	8006ed6 <LL_RCC_PLL_GetMainSource>
 80070f8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80070fa:	6a3b      	ldr	r3, [r7, #32]
 80070fc:	2b08      	cmp	r3, #8
 80070fe:	d005      	beq.n	800710c <HAL_RCC_OscConfig+0x164>
 8007100:	6a3b      	ldr	r3, [r7, #32]
 8007102:	2b0c      	cmp	r3, #12
 8007104:	d108      	bne.n	8007118 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	2b03      	cmp	r3, #3
 800710a:	d105      	bne.n	8007118 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d134      	bne.n	800717e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e2b4      	b.n	8007682 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007120:	d102      	bne.n	8007128 <HAL_RCC_OscConfig+0x180>
 8007122:	f7ff fbdd 	bl	80068e0 <LL_RCC_HSE_Enable>
 8007126:	e001      	b.n	800712c <HAL_RCC_OscConfig+0x184>
 8007128:	f7ff fbe9 	bl	80068fe <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d012      	beq.n	800715a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007134:	f7fa fe86 	bl	8001e44 <HAL_GetTick>
 8007138:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800713a:	e008      	b.n	800714e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800713c:	f7fa fe82 	bl	8001e44 <HAL_GetTick>
 8007140:	4602      	mov	r2, r0
 8007142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	2b64      	cmp	r3, #100	@ 0x64
 8007148:	d901      	bls.n	800714e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800714a:	2303      	movs	r3, #3
 800714c:	e299      	b.n	8007682 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800714e:	f7ff fbe5 	bl	800691c <LL_RCC_HSE_IsReady>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d0f1      	beq.n	800713c <HAL_RCC_OscConfig+0x194>
 8007158:	e011      	b.n	800717e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800715a:	f7fa fe73 	bl	8001e44 <HAL_GetTick>
 800715e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8007160:	e008      	b.n	8007174 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007162:	f7fa fe6f 	bl	8001e44 <HAL_GetTick>
 8007166:	4602      	mov	r2, r0
 8007168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	2b64      	cmp	r3, #100	@ 0x64
 800716e:	d901      	bls.n	8007174 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e286      	b.n	8007682 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8007174:	f7ff fbd2 	bl	800691c <LL_RCC_HSE_IsReady>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1f1      	bne.n	8007162 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0302 	and.w	r3, r3, #2
 8007186:	2b00      	cmp	r3, #0
 8007188:	d04c      	beq.n	8007224 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800718a:	f7ff fda8 	bl	8006cde <LL_RCC_GetSysClkSource>
 800718e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007190:	f7ff fea1 	bl	8006ed6 <LL_RCC_PLL_GetMainSource>
 8007194:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	2b04      	cmp	r3, #4
 800719a:	d005      	beq.n	80071a8 <HAL_RCC_OscConfig+0x200>
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	2b0c      	cmp	r3, #12
 80071a0:	d10e      	bne.n	80071c0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d10b      	bne.n	80071c0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d101      	bne.n	80071b4 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e266      	b.n	8007682 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	4618      	mov	r0, r3
 80071ba:	f7ff fbf1 	bl	80069a0 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80071be:	e031      	b.n	8007224 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d019      	beq.n	80071fc <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071c8:	f7ff fbba 	bl	8006940 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071cc:	f7fa fe3a 	bl	8001e44 <HAL_GetTick>
 80071d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80071d2:	e008      	b.n	80071e6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071d4:	f7fa fe36 	bl	8001e44 <HAL_GetTick>
 80071d8:	4602      	mov	r2, r0
 80071da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	2b02      	cmp	r3, #2
 80071e0:	d901      	bls.n	80071e6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e24d      	b.n	8007682 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 80071e6:	f7ff fbc9 	bl	800697c <LL_RCC_HSI_IsReady>
 80071ea:	4603      	mov	r3, r0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d0f1      	beq.n	80071d4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	691b      	ldr	r3, [r3, #16]
 80071f4:	4618      	mov	r0, r3
 80071f6:	f7ff fbd3 	bl	80069a0 <LL_RCC_HSI_SetCalibTrimming>
 80071fa:	e013      	b.n	8007224 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071fc:	f7ff fbaf 	bl	800695e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007200:	f7fa fe20 	bl	8001e44 <HAL_GetTick>
 8007204:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8007206:	e008      	b.n	800721a <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007208:	f7fa fe1c 	bl	8001e44 <HAL_GetTick>
 800720c:	4602      	mov	r2, r0
 800720e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	2b02      	cmp	r3, #2
 8007214:	d901      	bls.n	800721a <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8007216:	2303      	movs	r3, #3
 8007218:	e233      	b.n	8007682 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800721a:	f7ff fbaf 	bl	800697c <LL_RCC_HSI_IsReady>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d1f1      	bne.n	8007208 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 0308 	and.w	r3, r3, #8
 800722c:	2b00      	cmp	r3, #0
 800722e:	d106      	bne.n	800723e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8007238:	2b00      	cmp	r3, #0
 800723a:	f000 80a3 	beq.w	8007384 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	695b      	ldr	r3, [r3, #20]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d076      	beq.n	8007334 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f003 0310 	and.w	r3, r3, #16
 800724e:	2b00      	cmp	r3, #0
 8007250:	d046      	beq.n	80072e0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8007252:	f7ff fc66 	bl	8006b22 <LL_RCC_LSI1_IsReady>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d113      	bne.n	8007284 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800725c:	f7ff fc3f 	bl	8006ade <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007260:	f7fa fdf0 	bl	8001e44 <HAL_GetTick>
 8007264:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007266:	e008      	b.n	800727a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007268:	f7fa fdec 	bl	8001e44 <HAL_GetTick>
 800726c:	4602      	mov	r2, r0
 800726e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	2b02      	cmp	r3, #2
 8007274:	d901      	bls.n	800727a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e203      	b.n	8007682 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800727a:	f7ff fc52 	bl	8006b22 <LL_RCC_LSI1_IsReady>
 800727e:	4603      	mov	r3, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d0f1      	beq.n	8007268 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8007284:	f7ff fc5f 	bl	8006b46 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007288:	f7fa fddc 	bl	8001e44 <HAL_GetTick>
 800728c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800728e:	e008      	b.n	80072a2 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007290:	f7fa fdd8 	bl	8001e44 <HAL_GetTick>
 8007294:	4602      	mov	r2, r0
 8007296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007298:	1ad3      	subs	r3, r2, r3
 800729a:	2b03      	cmp	r3, #3
 800729c:	d901      	bls.n	80072a2 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800729e:	2303      	movs	r3, #3
 80072a0:	e1ef      	b.n	8007682 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80072a2:	f7ff fc72 	bl	8006b8a <LL_RCC_LSI2_IsReady>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d0f1      	beq.n	8007290 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	699b      	ldr	r3, [r3, #24]
 80072b0:	4618      	mov	r0, r3
 80072b2:	f7ff fc7c 	bl	8006bae <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80072b6:	f7ff fc23 	bl	8006b00 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072ba:	f7fa fdc3 	bl	8001e44 <HAL_GetTick>
 80072be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80072c0:	e008      	b.n	80072d4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80072c2:	f7fa fdbf 	bl	8001e44 <HAL_GetTick>
 80072c6:	4602      	mov	r2, r0
 80072c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ca:	1ad3      	subs	r3, r2, r3
 80072cc:	2b02      	cmp	r3, #2
 80072ce:	d901      	bls.n	80072d4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80072d0:	2303      	movs	r3, #3
 80072d2:	e1d6      	b.n	8007682 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80072d4:	f7ff fc25 	bl	8006b22 <LL_RCC_LSI1_IsReady>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1f1      	bne.n	80072c2 <HAL_RCC_OscConfig+0x31a>
 80072de:	e051      	b.n	8007384 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80072e0:	f7ff fbfd 	bl	8006ade <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072e4:	f7fa fdae 	bl	8001e44 <HAL_GetTick>
 80072e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80072ea:	e00c      	b.n	8007306 <HAL_RCC_OscConfig+0x35e>
 80072ec:	20000008 	.word	0x20000008
 80072f0:	20000028 	.word	0x20000028
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80072f4:	f7fa fda6 	bl	8001e44 <HAL_GetTick>
 80072f8:	4602      	mov	r2, r0
 80072fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	2b02      	cmp	r3, #2
 8007300:	d901      	bls.n	8007306 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8007302:	2303      	movs	r3, #3
 8007304:	e1bd      	b.n	8007682 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8007306:	f7ff fc0c 	bl	8006b22 <LL_RCC_LSI1_IsReady>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d0f1      	beq.n	80072f4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8007310:	f7ff fc2a 	bl	8006b68 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8007314:	e008      	b.n	8007328 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007316:	f7fa fd95 	bl	8001e44 <HAL_GetTick>
 800731a:	4602      	mov	r2, r0
 800731c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731e:	1ad3      	subs	r3, r2, r3
 8007320:	2b03      	cmp	r3, #3
 8007322:	d901      	bls.n	8007328 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8007324:	2303      	movs	r3, #3
 8007326:	e1ac      	b.n	8007682 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8007328:	f7ff fc2f 	bl	8006b8a <LL_RCC_LSI2_IsReady>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1f1      	bne.n	8007316 <HAL_RCC_OscConfig+0x36e>
 8007332:	e027      	b.n	8007384 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8007334:	f7ff fc18 	bl	8006b68 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007338:	f7fa fd84 	bl	8001e44 <HAL_GetTick>
 800733c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800733e:	e008      	b.n	8007352 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007340:	f7fa fd80 	bl	8001e44 <HAL_GetTick>
 8007344:	4602      	mov	r2, r0
 8007346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	2b03      	cmp	r3, #3
 800734c:	d901      	bls.n	8007352 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800734e:	2303      	movs	r3, #3
 8007350:	e197      	b.n	8007682 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8007352:	f7ff fc1a 	bl	8006b8a <LL_RCC_LSI2_IsReady>
 8007356:	4603      	mov	r3, r0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d1f1      	bne.n	8007340 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800735c:	f7ff fbd0 	bl	8006b00 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007360:	f7fa fd70 	bl	8001e44 <HAL_GetTick>
 8007364:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007366:	e008      	b.n	800737a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007368:	f7fa fd6c 	bl	8001e44 <HAL_GetTick>
 800736c:	4602      	mov	r2, r0
 800736e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007370:	1ad3      	subs	r3, r2, r3
 8007372:	2b02      	cmp	r3, #2
 8007374:	d901      	bls.n	800737a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e183      	b.n	8007682 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800737a:	f7ff fbd2 	bl	8006b22 <LL_RCC_LSI1_IsReady>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d1f1      	bne.n	8007368 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0304 	and.w	r3, r3, #4
 800738c:	2b00      	cmp	r3, #0
 800738e:	d05b      	beq.n	8007448 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007390:	4ba7      	ldr	r3, [pc, #668]	@ (8007630 <HAL_RCC_OscConfig+0x688>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007398:	2b00      	cmp	r3, #0
 800739a:	d114      	bne.n	80073c6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800739c:	f7ff fa60 	bl	8006860 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073a0:	f7fa fd50 	bl	8001e44 <HAL_GetTick>
 80073a4:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073a6:	e008      	b.n	80073ba <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073a8:	f7fa fd4c 	bl	8001e44 <HAL_GetTick>
 80073ac:	4602      	mov	r2, r0
 80073ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d901      	bls.n	80073ba <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e163      	b.n	8007682 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80073ba:	4b9d      	ldr	r3, [pc, #628]	@ (8007630 <HAL_RCC_OscConfig+0x688>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d0f0      	beq.n	80073a8 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d102      	bne.n	80073d4 <HAL_RCC_OscConfig+0x42c>
 80073ce:	f7ff fb30 	bl	8006a32 <LL_RCC_LSE_Enable>
 80073d2:	e00c      	b.n	80073ee <HAL_RCC_OscConfig+0x446>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	2b05      	cmp	r3, #5
 80073da:	d104      	bne.n	80073e6 <HAL_RCC_OscConfig+0x43e>
 80073dc:	f7ff fb4b 	bl	8006a76 <LL_RCC_LSE_EnableBypass>
 80073e0:	f7ff fb27 	bl	8006a32 <LL_RCC_LSE_Enable>
 80073e4:	e003      	b.n	80073ee <HAL_RCC_OscConfig+0x446>
 80073e6:	f7ff fb35 	bl	8006a54 <LL_RCC_LSE_Disable>
 80073ea:	f7ff fb55 	bl	8006a98 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d014      	beq.n	8007420 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073f6:	f7fa fd25 	bl	8001e44 <HAL_GetTick>
 80073fa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80073fc:	e00a      	b.n	8007414 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073fe:	f7fa fd21 	bl	8001e44 <HAL_GetTick>
 8007402:	4602      	mov	r2, r0
 8007404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	f241 3288 	movw	r2, #5000	@ 0x1388
 800740c:	4293      	cmp	r3, r2
 800740e:	d901      	bls.n	8007414 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8007410:	2303      	movs	r3, #3
 8007412:	e136      	b.n	8007682 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8007414:	f7ff fb51 	bl	8006aba <LL_RCC_LSE_IsReady>
 8007418:	4603      	mov	r3, r0
 800741a:	2b00      	cmp	r3, #0
 800741c:	d0ef      	beq.n	80073fe <HAL_RCC_OscConfig+0x456>
 800741e:	e013      	b.n	8007448 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007420:	f7fa fd10 	bl	8001e44 <HAL_GetTick>
 8007424:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8007426:	e00a      	b.n	800743e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007428:	f7fa fd0c 	bl	8001e44 <HAL_GetTick>
 800742c:	4602      	mov	r2, r0
 800742e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007436:	4293      	cmp	r3, r2
 8007438:	d901      	bls.n	800743e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	e121      	b.n	8007682 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800743e:	f7ff fb3c 	bl	8006aba <LL_RCC_LSE_IsReady>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1ef      	bne.n	8007428 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007450:	2b00      	cmp	r3, #0
 8007452:	d02c      	beq.n	80074ae <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007458:	2b00      	cmp	r3, #0
 800745a:	d014      	beq.n	8007486 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800745c:	f7ff fab5 	bl	80069ca <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007460:	f7fa fcf0 	bl	8001e44 <HAL_GetTick>
 8007464:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8007466:	e008      	b.n	800747a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007468:	f7fa fcec 	bl	8001e44 <HAL_GetTick>
 800746c:	4602      	mov	r2, r0
 800746e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	2b02      	cmp	r3, #2
 8007474:	d901      	bls.n	800747a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8007476:	2303      	movs	r3, #3
 8007478:	e103      	b.n	8007682 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800747a:	f7ff fac8 	bl	8006a0e <LL_RCC_HSI48_IsReady>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d0f1      	beq.n	8007468 <HAL_RCC_OscConfig+0x4c0>
 8007484:	e013      	b.n	80074ae <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007486:	f7ff fab1 	bl	80069ec <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800748a:	f7fa fcdb 	bl	8001e44 <HAL_GetTick>
 800748e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8007490:	e008      	b.n	80074a4 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007492:	f7fa fcd7 	bl	8001e44 <HAL_GetTick>
 8007496:	4602      	mov	r2, r0
 8007498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800749a:	1ad3      	subs	r3, r2, r3
 800749c:	2b02      	cmp	r3, #2
 800749e:	d901      	bls.n	80074a4 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80074a0:	2303      	movs	r3, #3
 80074a2:	e0ee      	b.n	8007682 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80074a4:	f7ff fab3 	bl	8006a0e <LL_RCC_HSI48_IsReady>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d1f1      	bne.n	8007492 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f000 80e4 	beq.w	8007680 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80074b8:	f7ff fc11 	bl	8006cde <LL_RCC_GetSysClkSource>
 80074bc:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80074be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	f040 80b4 	bne.w	8007638 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f003 0203 	and.w	r2, r3, #3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074da:	429a      	cmp	r2, r3
 80074dc:	d123      	bne.n	8007526 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d11c      	bne.n	8007526 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	0a1b      	lsrs	r3, r3, #8
 80074f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d114      	bne.n	8007526 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8007506:	429a      	cmp	r2, r3
 8007508:	d10d      	bne.n	8007526 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007514:	429a      	cmp	r2, r3
 8007516:	d106      	bne.n	8007526 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8007522:	429a      	cmp	r2, r3
 8007524:	d05d      	beq.n	80075e2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	2b0c      	cmp	r3, #12
 800752a:	d058      	beq.n	80075de <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800752c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007536:	2b00      	cmp	r3, #0
 8007538:	d001      	beq.n	800753e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e0a1      	b.n	8007682 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800753e:	f7ff fc84 	bl	8006e4a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007542:	f7fa fc7f 	bl	8001e44 <HAL_GetTick>
 8007546:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007548:	e008      	b.n	800755c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800754a:	f7fa fc7b 	bl	8001e44 <HAL_GetTick>
 800754e:	4602      	mov	r2, r0
 8007550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007552:	1ad3      	subs	r3, r2, r3
 8007554:	2b02      	cmp	r3, #2
 8007556:	d901      	bls.n	800755c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8007558:	2303      	movs	r3, #3
 800755a:	e092      	b.n	8007682 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800755c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007566:	2b00      	cmp	r3, #0
 8007568:	d1ef      	bne.n	800754a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800756a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800756e:	68da      	ldr	r2, [r3, #12]
 8007570:	4b30      	ldr	r3, [pc, #192]	@ (8007634 <HAL_RCC_OscConfig+0x68c>)
 8007572:	4013      	ands	r3, r2
 8007574:	687a      	ldr	r2, [r7, #4]
 8007576:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800757c:	4311      	orrs	r1, r2
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007582:	0212      	lsls	r2, r2, #8
 8007584:	4311      	orrs	r1, r2
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800758a:	4311      	orrs	r1, r2
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8007590:	4311      	orrs	r1, r2
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8007596:	430a      	orrs	r2, r1
 8007598:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800759c:	4313      	orrs	r3, r2
 800759e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80075a0:	f7ff fc44 	bl	8006e2c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80075a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80075ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80075b4:	f7fa fc46 	bl	8001e44 <HAL_GetTick>
 80075b8:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075ba:	e008      	b.n	80075ce <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075bc:	f7fa fc42 	bl	8001e44 <HAL_GetTick>
 80075c0:	4602      	mov	r2, r0
 80075c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c4:	1ad3      	subs	r3, r2, r3
 80075c6:	2b02      	cmp	r3, #2
 80075c8:	d901      	bls.n	80075ce <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80075ca:	2303      	movs	r3, #3
 80075cc:	e059      	b.n	8007682 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d0ef      	beq.n	80075bc <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80075dc:	e050      	b.n	8007680 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e04f      	b.n	8007682 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80075e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d147      	bne.n	8007680 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80075f0:	f7ff fc1c 	bl	8006e2c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80075f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075f8:	68db      	ldr	r3, [r3, #12]
 80075fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80075fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007602:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007604:	f7fa fc1e 	bl	8001e44 <HAL_GetTick>
 8007608:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800760a:	e008      	b.n	800761e <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800760c:	f7fa fc1a 	bl	8001e44 <HAL_GetTick>
 8007610:	4602      	mov	r2, r0
 8007612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007614:	1ad3      	subs	r3, r2, r3
 8007616:	2b02      	cmp	r3, #2
 8007618:	d901      	bls.n	800761e <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800761a:	2303      	movs	r3, #3
 800761c:	e031      	b.n	8007682 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800761e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007628:	2b00      	cmp	r3, #0
 800762a:	d0ef      	beq.n	800760c <HAL_RCC_OscConfig+0x664>
 800762c:	e028      	b.n	8007680 <HAL_RCC_OscConfig+0x6d8>
 800762e:	bf00      	nop
 8007630:	58000400 	.word	0x58000400
 8007634:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	2b0c      	cmp	r3, #12
 800763c:	d01e      	beq.n	800767c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800763e:	f7ff fc04 	bl	8006e4a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007642:	f7fa fbff 	bl	8001e44 <HAL_GetTick>
 8007646:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007648:	e008      	b.n	800765c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800764a:	f7fa fbfb 	bl	8001e44 <HAL_GetTick>
 800764e:	4602      	mov	r2, r0
 8007650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	2b02      	cmp	r3, #2
 8007656:	d901      	bls.n	800765c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8007658:	2303      	movs	r3, #3
 800765a:	e012      	b.n	8007682 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800765c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007666:	2b00      	cmp	r3, #0
 8007668:	d1ef      	bne.n	800764a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800766a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800766e:	68da      	ldr	r2, [r3, #12]
 8007670:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007674:	4b05      	ldr	r3, [pc, #20]	@ (800768c <HAL_RCC_OscConfig+0x6e4>)
 8007676:	4013      	ands	r3, r2
 8007678:	60cb      	str	r3, [r1, #12]
 800767a:	e001      	b.n	8007680 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	e000      	b.n	8007682 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3734      	adds	r7, #52	@ 0x34
 8007686:	46bd      	mov	sp, r7
 8007688:	bd90      	pop	{r4, r7, pc}
 800768a:	bf00      	nop
 800768c:	eefefffc 	.word	0xeefefffc

08007690 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d101      	bne.n	80076a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	e12d      	b.n	8007900 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80076a4:	4b98      	ldr	r3, [pc, #608]	@ (8007908 <HAL_RCC_ClockConfig+0x278>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 0307 	and.w	r3, r3, #7
 80076ac:	683a      	ldr	r2, [r7, #0]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d91b      	bls.n	80076ea <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076b2:	4b95      	ldr	r3, [pc, #596]	@ (8007908 <HAL_RCC_ClockConfig+0x278>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f023 0207 	bic.w	r2, r3, #7
 80076ba:	4993      	ldr	r1, [pc, #588]	@ (8007908 <HAL_RCC_ClockConfig+0x278>)
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	4313      	orrs	r3, r2
 80076c0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076c2:	f7fa fbbf 	bl	8001e44 <HAL_GetTick>
 80076c6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076c8:	e008      	b.n	80076dc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80076ca:	f7fa fbbb 	bl	8001e44 <HAL_GetTick>
 80076ce:	4602      	mov	r2, r0
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	1ad3      	subs	r3, r2, r3
 80076d4:	2b02      	cmp	r3, #2
 80076d6:	d901      	bls.n	80076dc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80076d8:	2303      	movs	r3, #3
 80076da:	e111      	b.n	8007900 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076dc:	4b8a      	ldr	r3, [pc, #552]	@ (8007908 <HAL_RCC_ClockConfig+0x278>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f003 0307 	and.w	r3, r3, #7
 80076e4:	683a      	ldr	r2, [r7, #0]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	d1ef      	bne.n	80076ca <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 0302 	and.w	r3, r3, #2
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d016      	beq.n	8007724 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	4618      	mov	r0, r3
 80076fc:	f7ff fafb 	bl	8006cf6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007700:	f7fa fba0 	bl	8001e44 <HAL_GetTick>
 8007704:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8007706:	e008      	b.n	800771a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007708:	f7fa fb9c 	bl	8001e44 <HAL_GetTick>
 800770c:	4602      	mov	r2, r0
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	1ad3      	subs	r3, r2, r3
 8007712:	2b02      	cmp	r3, #2
 8007714:	d901      	bls.n	800771a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	e0f2      	b.n	8007900 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800771a:	f7ff fbe8 	bl	8006eee <LL_RCC_IsActiveFlag_HPRE>
 800771e:	4603      	mov	r3, r0
 8007720:	2b00      	cmp	r3, #0
 8007722:	d0f1      	beq.n	8007708 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f003 0320 	and.w	r3, r3, #32
 800772c:	2b00      	cmp	r3, #0
 800772e:	d016      	beq.n	800775e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	695b      	ldr	r3, [r3, #20]
 8007734:	4618      	mov	r0, r3
 8007736:	f7ff faf2 	bl	8006d1e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800773a:	f7fa fb83 	bl	8001e44 <HAL_GetTick>
 800773e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007740:	e008      	b.n	8007754 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8007742:	f7fa fb7f 	bl	8001e44 <HAL_GetTick>
 8007746:	4602      	mov	r2, r0
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	1ad3      	subs	r3, r2, r3
 800774c:	2b02      	cmp	r3, #2
 800774e:	d901      	bls.n	8007754 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8007750:	2303      	movs	r3, #3
 8007752:	e0d5      	b.n	8007900 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8007754:	f7ff fbdd 	bl	8006f12 <LL_RCC_IsActiveFlag_C2HPRE>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d0f1      	beq.n	8007742 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007766:	2b00      	cmp	r3, #0
 8007768:	d016      	beq.n	8007798 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	699b      	ldr	r3, [r3, #24]
 800776e:	4618      	mov	r0, r3
 8007770:	f7ff faeb 	bl	8006d4a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8007774:	f7fa fb66 	bl	8001e44 <HAL_GetTick>
 8007778:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800777a:	e008      	b.n	800778e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800777c:	f7fa fb62 	bl	8001e44 <HAL_GetTick>
 8007780:	4602      	mov	r2, r0
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	1ad3      	subs	r3, r2, r3
 8007786:	2b02      	cmp	r3, #2
 8007788:	d901      	bls.n	800778e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800778a:	2303      	movs	r3, #3
 800778c:	e0b8      	b.n	8007900 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800778e:	f7ff fbd3 	bl	8006f38 <LL_RCC_IsActiveFlag_SHDHPRE>
 8007792:	4603      	mov	r3, r0
 8007794:	2b00      	cmp	r3, #0
 8007796:	d0f1      	beq.n	800777c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 0304 	and.w	r3, r3, #4
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d016      	beq.n	80077d2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	68db      	ldr	r3, [r3, #12]
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7ff fae5 	bl	8006d78 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80077ae:	f7fa fb49 	bl	8001e44 <HAL_GetTick>
 80077b2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80077b4:	e008      	b.n	80077c8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80077b6:	f7fa fb45 	bl	8001e44 <HAL_GetTick>
 80077ba:	4602      	mov	r2, r0
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	1ad3      	subs	r3, r2, r3
 80077c0:	2b02      	cmp	r3, #2
 80077c2:	d901      	bls.n	80077c8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80077c4:	2303      	movs	r3, #3
 80077c6:	e09b      	b.n	8007900 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80077c8:	f7ff fbc9 	bl	8006f5e <LL_RCC_IsActiveFlag_PPRE1>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d0f1      	beq.n	80077b6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f003 0308 	and.w	r3, r3, #8
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d017      	beq.n	800780e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	00db      	lsls	r3, r3, #3
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7ff fadb 	bl	8006da0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80077ea:	f7fa fb2b 	bl	8001e44 <HAL_GetTick>
 80077ee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80077f0:	e008      	b.n	8007804 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80077f2:	f7fa fb27 	bl	8001e44 <HAL_GetTick>
 80077f6:	4602      	mov	r2, r0
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	1ad3      	subs	r3, r2, r3
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	d901      	bls.n	8007804 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8007800:	2303      	movs	r3, #3
 8007802:	e07d      	b.n	8007900 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8007804:	f7ff fbbd 	bl	8006f82 <LL_RCC_IsActiveFlag_PPRE2>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d0f1      	beq.n	80077f2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	2b00      	cmp	r3, #0
 8007818:	d043      	beq.n	80078a2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	2b02      	cmp	r3, #2
 8007820:	d106      	bne.n	8007830 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8007822:	f7ff f87b 	bl	800691c <LL_RCC_HSE_IsReady>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d11e      	bne.n	800786a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e067      	b.n	8007900 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	2b03      	cmp	r3, #3
 8007836:	d106      	bne.n	8007846 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8007838:	f7ff fb16 	bl	8006e68 <LL_RCC_PLL_IsReady>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d113      	bne.n	800786a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e05c      	b.n	8007900 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d106      	bne.n	800785c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800784e:	f7ff f9e3 	bl	8006c18 <LL_RCC_MSI_IsReady>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d108      	bne.n	800786a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e051      	b.n	8007900 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800785c:	f7ff f88e 	bl	800697c <LL_RCC_HSI_IsReady>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d101      	bne.n	800786a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e04a      	b.n	8007900 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	685b      	ldr	r3, [r3, #4]
 800786e:	4618      	mov	r0, r3
 8007870:	f7ff fa21 	bl	8006cb6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007874:	f7fa fae6 	bl	8001e44 <HAL_GetTick>
 8007878:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800787a:	e00a      	b.n	8007892 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800787c:	f7fa fae2 	bl	8001e44 <HAL_GetTick>
 8007880:	4602      	mov	r2, r0
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	1ad3      	subs	r3, r2, r3
 8007886:	f241 3288 	movw	r2, #5000	@ 0x1388
 800788a:	4293      	cmp	r3, r2
 800788c:	d901      	bls.n	8007892 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800788e:	2303      	movs	r3, #3
 8007890:	e036      	b.n	8007900 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007892:	f7ff fa24 	bl	8006cde <LL_RCC_GetSysClkSource>
 8007896:	4602      	mov	r2, r0
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	429a      	cmp	r2, r3
 80078a0:	d1ec      	bne.n	800787c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078a2:	4b19      	ldr	r3, [pc, #100]	@ (8007908 <HAL_RCC_ClockConfig+0x278>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 0307 	and.w	r3, r3, #7
 80078aa:	683a      	ldr	r2, [r7, #0]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d21b      	bcs.n	80078e8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078b0:	4b15      	ldr	r3, [pc, #84]	@ (8007908 <HAL_RCC_ClockConfig+0x278>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f023 0207 	bic.w	r2, r3, #7
 80078b8:	4913      	ldr	r1, [pc, #76]	@ (8007908 <HAL_RCC_ClockConfig+0x278>)
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	4313      	orrs	r3, r2
 80078be:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078c0:	f7fa fac0 	bl	8001e44 <HAL_GetTick>
 80078c4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078c6:	e008      	b.n	80078da <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80078c8:	f7fa fabc 	bl	8001e44 <HAL_GetTick>
 80078cc:	4602      	mov	r2, r0
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	1ad3      	subs	r3, r2, r3
 80078d2:	2b02      	cmp	r3, #2
 80078d4:	d901      	bls.n	80078da <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80078d6:	2303      	movs	r3, #3
 80078d8:	e012      	b.n	8007900 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078da:	4b0b      	ldr	r3, [pc, #44]	@ (8007908 <HAL_RCC_ClockConfig+0x278>)
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 0307 	and.w	r3, r3, #7
 80078e2:	683a      	ldr	r2, [r7, #0]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d1ef      	bne.n	80078c8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80078e8:	f000 f87e 	bl	80079e8 <HAL_RCC_GetHCLKFreq>
 80078ec:	4603      	mov	r3, r0
 80078ee:	4a07      	ldr	r2, [pc, #28]	@ (800790c <HAL_RCC_ClockConfig+0x27c>)
 80078f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80078f2:	f7fa fab3 	bl	8001e5c <HAL_GetTickPrio>
 80078f6:	4603      	mov	r3, r0
 80078f8:	4618      	mov	r0, r3
 80078fa:	f7fa fa55 	bl	8001da8 <HAL_InitTick>
 80078fe:	4603      	mov	r3, r0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3710      	adds	r7, #16
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	58004000 	.word	0x58004000
 800790c:	20000008 	.word	0x20000008

08007910 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007910:	b590      	push	{r4, r7, lr}
 8007912:	b085      	sub	sp, #20
 8007914:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007916:	f7ff f9e2 	bl	8006cde <LL_RCC_GetSysClkSource>
 800791a:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d10a      	bne.n	8007938 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007922:	f7ff f99e 	bl	8006c62 <LL_RCC_MSI_GetRange>
 8007926:	4603      	mov	r3, r0
 8007928:	091b      	lsrs	r3, r3, #4
 800792a:	f003 030f 	and.w	r3, r3, #15
 800792e:	4a2b      	ldr	r2, [pc, #172]	@ (80079dc <HAL_RCC_GetSysClockFreq+0xcc>)
 8007930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007934:	60fb      	str	r3, [r7, #12]
 8007936:	e04b      	b.n	80079d0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2b04      	cmp	r3, #4
 800793c:	d102      	bne.n	8007944 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800793e:	4b28      	ldr	r3, [pc, #160]	@ (80079e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007940:	60fb      	str	r3, [r7, #12]
 8007942:	e045      	b.n	80079d0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2b08      	cmp	r3, #8
 8007948:	d10a      	bne.n	8007960 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800794a:	f7fe ffb7 	bl	80068bc <LL_RCC_HSE_IsEnabledDiv2>
 800794e:	4603      	mov	r3, r0
 8007950:	2b01      	cmp	r3, #1
 8007952:	d102      	bne.n	800795a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8007954:	4b22      	ldr	r3, [pc, #136]	@ (80079e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007956:	60fb      	str	r3, [r7, #12]
 8007958:	e03a      	b.n	80079d0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800795a:	4b22      	ldr	r3, [pc, #136]	@ (80079e4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800795c:	60fb      	str	r3, [r7, #12]
 800795e:	e037      	b.n	80079d0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8007960:	f7ff fab9 	bl	8006ed6 <LL_RCC_PLL_GetMainSource>
 8007964:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	2b02      	cmp	r3, #2
 800796a:	d003      	beq.n	8007974 <HAL_RCC_GetSysClockFreq+0x64>
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	2b03      	cmp	r3, #3
 8007970:	d003      	beq.n	800797a <HAL_RCC_GetSysClockFreq+0x6a>
 8007972:	e00d      	b.n	8007990 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8007974:	4b1a      	ldr	r3, [pc, #104]	@ (80079e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007976:	60bb      	str	r3, [r7, #8]
        break;
 8007978:	e015      	b.n	80079a6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800797a:	f7fe ff9f 	bl	80068bc <LL_RCC_HSE_IsEnabledDiv2>
 800797e:	4603      	mov	r3, r0
 8007980:	2b01      	cmp	r3, #1
 8007982:	d102      	bne.n	800798a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8007984:	4b16      	ldr	r3, [pc, #88]	@ (80079e0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8007986:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8007988:	e00d      	b.n	80079a6 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800798a:	4b16      	ldr	r3, [pc, #88]	@ (80079e4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800798c:	60bb      	str	r3, [r7, #8]
        break;
 800798e:	e00a      	b.n	80079a6 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8007990:	f7ff f967 	bl	8006c62 <LL_RCC_MSI_GetRange>
 8007994:	4603      	mov	r3, r0
 8007996:	091b      	lsrs	r3, r3, #4
 8007998:	f003 030f 	and.w	r3, r3, #15
 800799c:	4a0f      	ldr	r2, [pc, #60]	@ (80079dc <HAL_RCC_GetSysClockFreq+0xcc>)
 800799e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079a2:	60bb      	str	r3, [r7, #8]
        break;
 80079a4:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80079a6:	f7ff fa71 	bl	8006e8c <LL_RCC_PLL_GetN>
 80079aa:	4602      	mov	r2, r0
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	fb03 f402 	mul.w	r4, r3, r2
 80079b2:	f7ff fa84 	bl	8006ebe <LL_RCC_PLL_GetDivider>
 80079b6:	4603      	mov	r3, r0
 80079b8:	091b      	lsrs	r3, r3, #4
 80079ba:	3301      	adds	r3, #1
 80079bc:	fbb4 f4f3 	udiv	r4, r4, r3
 80079c0:	f7ff fa71 	bl	8006ea6 <LL_RCC_PLL_GetR>
 80079c4:	4603      	mov	r3, r0
 80079c6:	0f5b      	lsrs	r3, r3, #29
 80079c8:	3301      	adds	r3, #1
 80079ca:	fbb4 f3f3 	udiv	r3, r4, r3
 80079ce:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80079d0:	68fb      	ldr	r3, [r7, #12]
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3714      	adds	r7, #20
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd90      	pop	{r4, r7, pc}
 80079da:	bf00      	nop
 80079dc:	08011254 	.word	0x08011254
 80079e0:	00f42400 	.word	0x00f42400
 80079e4:	01e84800 	.word	0x01e84800

080079e8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079e8:	b598      	push	{r3, r4, r7, lr}
 80079ea:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80079ec:	f7ff ff90 	bl	8007910 <HAL_RCC_GetSysClockFreq>
 80079f0:	4604      	mov	r4, r0
 80079f2:	f7ff f9e9 	bl	8006dc8 <LL_RCC_GetAHBPrescaler>
 80079f6:	4603      	mov	r3, r0
 80079f8:	091b      	lsrs	r3, r3, #4
 80079fa:	f003 030f 	and.w	r3, r3, #15
 80079fe:	4a03      	ldr	r2, [pc, #12]	@ (8007a0c <HAL_RCC_GetHCLKFreq+0x24>)
 8007a00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a04:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	bd98      	pop	{r3, r4, r7, pc}
 8007a0c:	080111f4 	.word	0x080111f4

08007a10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a10:	b598      	push	{r3, r4, r7, lr}
 8007a12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007a14:	f7ff ffe8 	bl	80079e8 <HAL_RCC_GetHCLKFreq>
 8007a18:	4604      	mov	r4, r0
 8007a1a:	f7ff f9ef 	bl	8006dfc <LL_RCC_GetAPB1Prescaler>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	0a1b      	lsrs	r3, r3, #8
 8007a22:	f003 0307 	and.w	r3, r3, #7
 8007a26:	4a04      	ldr	r2, [pc, #16]	@ (8007a38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a2c:	f003 031f 	and.w	r3, r3, #31
 8007a30:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	bd98      	pop	{r3, r4, r7, pc}
 8007a38:	08011234 	.word	0x08011234

08007a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a3c:	b598      	push	{r3, r4, r7, lr}
 8007a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8007a40:	f7ff ffd2 	bl	80079e8 <HAL_RCC_GetHCLKFreq>
 8007a44:	4604      	mov	r4, r0
 8007a46:	f7ff f9e5 	bl	8006e14 <LL_RCC_GetAPB2Prescaler>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	0adb      	lsrs	r3, r3, #11
 8007a4e:	f003 0307 	and.w	r3, r3, #7
 8007a52:	4a04      	ldr	r2, [pc, #16]	@ (8007a64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a58:	f003 031f 	and.w	r3, r3, #31
 8007a5c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	bd98      	pop	{r3, r4, r7, pc}
 8007a64:	08011234 	.word	0x08011234

08007a68 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8007a68:	b590      	push	{r4, r7, lr}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2bb0      	cmp	r3, #176	@ 0xb0
 8007a74:	d903      	bls.n	8007a7e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8007a76:	4b15      	ldr	r3, [pc, #84]	@ (8007acc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a7a:	60fb      	str	r3, [r7, #12]
 8007a7c:	e007      	b.n	8007a8e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	091b      	lsrs	r3, r3, #4
 8007a82:	f003 030f 	and.w	r3, r3, #15
 8007a86:	4a11      	ldr	r2, [pc, #68]	@ (8007acc <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8007a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a8c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8007a8e:	f7ff f9a7 	bl	8006de0 <LL_RCC_GetAHB4Prescaler>
 8007a92:	4603      	mov	r3, r0
 8007a94:	091b      	lsrs	r3, r3, #4
 8007a96:	f003 030f 	and.w	r3, r3, #15
 8007a9a:	4a0d      	ldr	r2, [pc, #52]	@ (8007ad0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8007a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aa0:	68fa      	ldr	r2, [r7, #12]
 8007aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aa6:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8007ad4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8007aac:	fba2 2303 	umull	r2, r3, r2, r3
 8007ab0:	0c9c      	lsrs	r4, r3, #18
 8007ab2:	f7fe fee5 	bl	8006880 <HAL_PWREx_GetVoltageRange>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	4619      	mov	r1, r3
 8007aba:	4620      	mov	r0, r4
 8007abc:	f000 f80c 	bl	8007ad8 <RCC_SetFlashLatency>
 8007ac0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3714      	adds	r7, #20
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd90      	pop	{r4, r7, pc}
 8007aca:	bf00      	nop
 8007acc:	08011254 	.word	0x08011254
 8007ad0:	080111f4 	.word	0x080111f4
 8007ad4:	431bde83 	.word	0x431bde83

08007ad8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8007ad8:	b590      	push	{r4, r7, lr}
 8007ada:	b093      	sub	sp, #76	@ 0x4c
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8007ae2:	4b37      	ldr	r3, [pc, #220]	@ (8007bc0 <RCC_SetFlashLatency+0xe8>)
 8007ae4:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8007ae8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007aea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8007aee:	4a35      	ldr	r2, [pc, #212]	@ (8007bc4 <RCC_SetFlashLatency+0xec>)
 8007af0:	f107 031c 	add.w	r3, r7, #28
 8007af4:	ca07      	ldmia	r2, {r0, r1, r2}
 8007af6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8007afa:	4b33      	ldr	r3, [pc, #204]	@ (8007bc8 <RCC_SetFlashLatency+0xf0>)
 8007afc:	f107 040c 	add.w	r4, r7, #12
 8007b00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007b02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8007b06:	2300      	movs	r3, #0
 8007b08:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b10:	d11a      	bne.n	8007b48 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007b12:	2300      	movs	r3, #0
 8007b14:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b16:	e013      	b.n	8007b40 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8007b18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	3348      	adds	r3, #72	@ 0x48
 8007b1e:	443b      	add	r3, r7
 8007b20:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8007b24:	687a      	ldr	r2, [r7, #4]
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d807      	bhi.n	8007b3a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007b2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	3348      	adds	r3, #72	@ 0x48
 8007b30:	443b      	add	r3, r7
 8007b32:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007b36:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8007b38:	e020      	b.n	8007b7c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8007b3a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b42:	2b03      	cmp	r3, #3
 8007b44:	d9e8      	bls.n	8007b18 <RCC_SetFlashLatency+0x40>
 8007b46:	e019      	b.n	8007b7c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007b48:	2300      	movs	r3, #0
 8007b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b4c:	e013      	b.n	8007b76 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8007b4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	3348      	adds	r3, #72	@ 0x48
 8007b54:	443b      	add	r3, r7
 8007b56:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d807      	bhi.n	8007b70 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8007b60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	3348      	adds	r3, #72	@ 0x48
 8007b66:	443b      	add	r3, r7
 8007b68:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8007b6c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8007b6e:	e005      	b.n	8007b7c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8007b70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b72:	3301      	adds	r3, #1
 8007b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b78:	2b02      	cmp	r3, #2
 8007b7a:	d9e8      	bls.n	8007b4e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8007b7c:	4b13      	ldr	r3, [pc, #76]	@ (8007bcc <RCC_SetFlashLatency+0xf4>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f023 0207 	bic.w	r2, r3, #7
 8007b84:	4911      	ldr	r1, [pc, #68]	@ (8007bcc <RCC_SetFlashLatency+0xf4>)
 8007b86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007b8c:	f7fa f95a 	bl	8001e44 <HAL_GetTick>
 8007b90:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007b92:	e008      	b.n	8007ba6 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8007b94:	f7fa f956 	bl	8001e44 <HAL_GetTick>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b9c:	1ad3      	subs	r3, r2, r3
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	d901      	bls.n	8007ba6 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e007      	b.n	8007bb6 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8007ba6:	4b09      	ldr	r3, [pc, #36]	@ (8007bcc <RCC_SetFlashLatency+0xf4>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 0307 	and.w	r3, r3, #7
 8007bae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d1ef      	bne.n	8007b94 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	374c      	adds	r7, #76	@ 0x4c
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd90      	pop	{r4, r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	08011148 	.word	0x08011148
 8007bc4:	08011158 	.word	0x08011158
 8007bc8:	08011164 	.word	0x08011164
 8007bcc:	58004000 	.word	0x58004000

08007bd0 <LL_RCC_LSE_IsEnabled>:
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8007bd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bdc:	f003 0301 	and.w	r3, r3, #1
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d101      	bne.n	8007be8 <LL_RCC_LSE_IsEnabled+0x18>
 8007be4:	2301      	movs	r3, #1
 8007be6:	e000      	b.n	8007bea <LL_RCC_LSE_IsEnabled+0x1a>
 8007be8:	2300      	movs	r3, #0
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	46bd      	mov	sp, r7
 8007bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf2:	4770      	bx	lr

08007bf4 <LL_RCC_LSE_IsReady>:
{
 8007bf4:	b480      	push	{r7}
 8007bf6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007bf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007c00:	f003 0302 	and.w	r3, r3, #2
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	d101      	bne.n	8007c0c <LL_RCC_LSE_IsReady+0x18>
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e000      	b.n	8007c0e <LL_RCC_LSE_IsReady+0x1a>
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <LL_RCC_SetRFWKPClockSource>:
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8007c20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007c28:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007c2c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <LL_RCC_SetSMPSClockSource>:
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8007c4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c52:	f023 0203 	bic.w	r2, r3, #3
 8007c56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <LL_RCC_SetSMPSPrescaler>:
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8007c74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c7a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8007c7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8007c88:	bf00      	nop
 8007c8a:	370c      	adds	r7, #12
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <LL_RCC_SetUSARTClockSource>:
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8007c9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007ca4:	f023 0203 	bic.w	r2, r3, #3
 8007ca8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	4313      	orrs	r3, r2
 8007cb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007cb4:	bf00      	nop
 8007cb6:	370c      	adds	r7, #12
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <LL_RCC_SetLPUARTClockSource>:
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8007cc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cd0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007cd4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <LL_RCC_SetI2CClockSource>:
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8007cf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007cf8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	091b      	lsrs	r3, r3, #4
 8007d00:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007d04:	43db      	mvns	r3, r3
 8007d06:	401a      	ands	r2, r3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	011b      	lsls	r3, r3, #4
 8007d0c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8007d10:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007d14:	4313      	orrs	r3, r2
 8007d16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007d1a:	bf00      	nop
 8007d1c:	370c      	adds	r7, #12
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr

08007d26 <LL_RCC_SetLPTIMClockSource>:
{
 8007d26:	b480      	push	{r7}
 8007d28:	b083      	sub	sp, #12
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8007d2e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d32:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	0c1b      	lsrs	r3, r3, #16
 8007d3a:	041b      	lsls	r3, r3, #16
 8007d3c:	43db      	mvns	r3, r3
 8007d3e:	401a      	ands	r2, r3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	041b      	lsls	r3, r3, #16
 8007d44:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007d4e:	bf00      	nop
 8007d50:	370c      	adds	r7, #12
 8007d52:	46bd      	mov	sp, r7
 8007d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d58:	4770      	bx	lr

08007d5a <LL_RCC_SetSAIClockSource>:
{
 8007d5a:	b480      	push	{r7}
 8007d5c:	b083      	sub	sp, #12
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8007d62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d6a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007d6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	4313      	orrs	r3, r2
 8007d76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007d7a:	bf00      	nop
 8007d7c:	370c      	adds	r7, #12
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr

08007d86 <LL_RCC_SetRNGClockSource>:
{
 8007d86:	b480      	push	{r7}
 8007d88:	b083      	sub	sp, #12
 8007d8a:	af00      	add	r7, sp, #0
 8007d8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8007d8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d96:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8007d9a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4313      	orrs	r3, r2
 8007da2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007da6:	bf00      	nop
 8007da8:	370c      	adds	r7, #12
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <LL_RCC_SetCLK48ClockSource>:
{
 8007db2:	b480      	push	{r7}
 8007db4:	b083      	sub	sp, #12
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8007dba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dc2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007dc6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007dd2:	bf00      	nop
 8007dd4:	370c      	adds	r7, #12
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr

08007dde <LL_RCC_SetUSBClockSource>:
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b082      	sub	sp, #8
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f7ff ffe3 	bl	8007db2 <LL_RCC_SetCLK48ClockSource>
}
 8007dec:	bf00      	nop
 8007dee:	3708      	adds	r7, #8
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <LL_RCC_SetADCClockSource>:
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8007dfc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e04:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8007e08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8007e14:	bf00      	nop
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <LL_RCC_SetRTCClockSource>:
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8007e28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007e34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8007e40:	bf00      	nop
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <LL_RCC_GetRTCClockSource>:
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8007e50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr

08007e66 <LL_RCC_ForceBackupDomainReset>:
{
 8007e66:	b480      	push	{r7}
 8007e68:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007e6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e72:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007e76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007e7e:	bf00      	nop
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <LL_RCC_ReleaseBackupDomainReset>:
{
 8007e88:	b480      	push	{r7}
 8007e8a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8007e8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007e98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8007ea0:	bf00      	nop
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea8:	4770      	bx	lr

08007eaa <LL_RCC_PLLSAI1_Enable>:
{
 8007eaa:	b480      	push	{r7}
 8007eac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007eae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007eb8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007ebc:	6013      	str	r3, [r2, #0]
}
 8007ebe:	bf00      	nop
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <LL_RCC_PLLSAI1_Disable>:
{
 8007ec8:	b480      	push	{r7}
 8007eca:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8007ecc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007ed6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007eda:	6013      	str	r3, [r2, #0]
}
 8007edc:	bf00      	nop
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr

08007ee6 <LL_RCC_PLLSAI1_IsReady>:
{
 8007ee6:	b480      	push	{r7}
 8007ee8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8007eea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ef4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007ef8:	d101      	bne.n	8007efe <LL_RCC_PLLSAI1_IsReady+0x18>
 8007efa:	2301      	movs	r3, #1
 8007efc:	e000      	b.n	8007f00 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8007efe:	2300      	movs	r3, #0
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr

08007f0a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f0a:	b580      	push	{r7, lr}
 8007f0c:	b088      	sub	sp, #32
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8007f12:	2300      	movs	r3, #0
 8007f14:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8007f16:	2300      	movs	r3, #0
 8007f18:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d034      	beq.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f2a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007f2e:	d021      	beq.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8007f30:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007f34:	d81b      	bhi.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007f36:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007f3a:	d01d      	beq.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8007f3c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007f40:	d815      	bhi.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00b      	beq.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x54>
 8007f46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f4a:	d110      	bne.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8007f4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007f50:	68db      	ldr	r3, [r3, #12]
 8007f52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007f56:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f5a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8007f5c:	e00d      	b.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	3304      	adds	r3, #4
 8007f62:	4618      	mov	r0, r3
 8007f64:	f000 f947 	bl	80081f6 <RCCEx_PLLSAI1_ConfigNP>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007f6c:	e005      	b.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	77fb      	strb	r3, [r7, #31]
        break;
 8007f72:	e002      	b.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007f74:	bf00      	nop
 8007f76:	e000      	b.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8007f78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f7a:	7ffb      	ldrb	r3, [r7, #31]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d105      	bne.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7ff fee8 	bl	8007d5a <LL_RCC_SetSAIClockSource>
 8007f8a:	e001      	b.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f8c:	7ffb      	ldrb	r3, [r7, #31]
 8007f8e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d046      	beq.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8007f9c:	f7ff ff56 	bl	8007e4c <LL_RCC_GetRTCClockSource>
 8007fa0:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fa6:	69ba      	ldr	r2, [r7, #24]
 8007fa8:	429a      	cmp	r2, r3
 8007faa:	d03c      	beq.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8007fac:	f7fe fc58 	bl	8006860 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d105      	bne.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f7ff ff30 	bl	8007e20 <LL_RCC_SetRTCClockSource>
 8007fc0:	e02e      	b.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8007fc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007fca:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8007fcc:	f7ff ff4b 	bl	8007e66 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8007fd0:	f7ff ff5a 	bl	8007e88 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8007fe2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8007fec:	f7ff fdf0 	bl	8007bd0 <LL_RCC_LSE_IsEnabled>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d114      	bne.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007ff6:	f7f9 ff25 	bl	8001e44 <HAL_GetTick>
 8007ffa:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8007ffc:	e00b      	b.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ffe:	f7f9 ff21 	bl	8001e44 <HAL_GetTick>
 8008002:	4602      	mov	r2, r0
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	1ad3      	subs	r3, r2, r3
 8008008:	f241 3288 	movw	r2, #5000	@ 0x1388
 800800c:	4293      	cmp	r3, r2
 800800e:	d902      	bls.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8008010:	2303      	movs	r3, #3
 8008012:	77fb      	strb	r3, [r7, #31]
              break;
 8008014:	e004      	b.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8008016:	f7ff fded 	bl	8007bf4 <LL_RCC_LSE_IsReady>
 800801a:	4603      	mov	r3, r0
 800801c:	2b01      	cmp	r3, #1
 800801e:	d1ee      	bne.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8008020:	7ffb      	ldrb	r3, [r7, #31]
 8008022:	77bb      	strb	r3, [r7, #30]
 8008024:	e001      	b.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008026:	7ffb      	ldrb	r3, [r7, #31]
 8008028:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f003 0301 	and.w	r3, r3, #1
 8008032:	2b00      	cmp	r3, #0
 8008034:	d004      	beq.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	699b      	ldr	r3, [r3, #24]
 800803a:	4618      	mov	r0, r3
 800803c:	f7ff fe2a 	bl	8007c94 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 0302 	and.w	r3, r3, #2
 8008048:	2b00      	cmp	r3, #0
 800804a:	d004      	beq.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	69db      	ldr	r3, [r3, #28]
 8008050:	4618      	mov	r0, r3
 8008052:	f7ff fe35 	bl	8007cc0 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f003 0310 	and.w	r3, r3, #16
 800805e:	2b00      	cmp	r3, #0
 8008060:	d004      	beq.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008066:	4618      	mov	r0, r3
 8008068:	f7ff fe5d 	bl	8007d26 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f003 0320 	and.w	r3, r3, #32
 8008074:	2b00      	cmp	r3, #0
 8008076:	d004      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800807c:	4618      	mov	r0, r3
 800807e:	f7ff fe52 	bl	8007d26 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 0304 	and.w	r3, r3, #4
 800808a:	2b00      	cmp	r3, #0
 800808c:	d004      	beq.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a1b      	ldr	r3, [r3, #32]
 8008092:	4618      	mov	r0, r3
 8008094:	f7ff fe2a 	bl	8007cec <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f003 0308 	and.w	r3, r3, #8
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d004      	beq.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080a8:	4618      	mov	r0, r3
 80080aa:	f7ff fe1f 	bl	8007cec <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d022      	beq.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080be:	4618      	mov	r0, r3
 80080c0:	f7ff fe8d 	bl	8007dde <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080c8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80080cc:	d107      	bne.n	80080de <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 80080ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80080d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80080dc:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80080e6:	d10b      	bne.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	3304      	adds	r3, #4
 80080ec:	4618      	mov	r0, r3
 80080ee:	f000 f8dd 	bl	80082ac <RCCEx_PLLSAI1_ConfigNQ>
 80080f2:	4603      	mov	r3, r0
 80080f4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80080f6:	7ffb      	ldrb	r3, [r7, #31]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d001      	beq.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 80080fc:	7ffb      	ldrb	r3, [r7, #31]
 80080fe:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008108:	2b00      	cmp	r3, #0
 800810a:	d02b      	beq.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008110:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008114:	d008      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800811a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800811e:	d003      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008124:	2b00      	cmp	r3, #0
 8008126:	d105      	bne.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800812c:	4618      	mov	r0, r3
 800812e:	f7ff fe2a 	bl	8007d86 <LL_RCC_SetRNGClockSource>
 8008132:	e00a      	b.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x240>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008138:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800813c:	60fb      	str	r3, [r7, #12]
 800813e:	2000      	movs	r0, #0
 8008140:	f7ff fe21 	bl	8007d86 <LL_RCC_SetRNGClockSource>
 8008144:	68f8      	ldr	r0, [r7, #12]
 8008146:	f7ff fe34 	bl	8007db2 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800814e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8008152:	d107      	bne.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8008154:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800815e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008162:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800816c:	2b00      	cmp	r3, #0
 800816e:	d022      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008174:	4618      	mov	r0, r3
 8008176:	f7ff fe3d 	bl	8007df4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800817e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008182:	d107      	bne.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008184:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008188:	68db      	ldr	r3, [r3, #12]
 800818a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800818e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008192:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008198:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800819c:	d10b      	bne.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	3304      	adds	r3, #4
 80081a2:	4618      	mov	r0, r3
 80081a4:	f000 f8dd 	bl	8008362 <RCCEx_PLLSAI1_ConfigNR>
 80081a8:	4603      	mov	r3, r0
 80081aa:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80081ac:	7ffb      	ldrb	r3, [r7, #31]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d001      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 80081b2:	7ffb      	ldrb	r3, [r7, #31]
 80081b4:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d004      	beq.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7ff fd26 	bl	8007c18 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d009      	beq.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081dc:	4618      	mov	r0, r3
 80081de:	f7ff fd45 	bl	8007c6c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80081e6:	4618      	mov	r0, r3
 80081e8:	f7ff fd2c 	bl	8007c44 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 80081ec:	7fbb      	ldrb	r3, [r7, #30]
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3720      	adds	r7, #32
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b084      	sub	sp, #16
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80081fe:	2300      	movs	r3, #0
 8008200:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008202:	f7ff fe61 	bl	8007ec8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008206:	f7f9 fe1d 	bl	8001e44 <HAL_GetTick>
 800820a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800820c:	e009      	b.n	8008222 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800820e:	f7f9 fe19 	bl	8001e44 <HAL_GetTick>
 8008212:	4602      	mov	r2, r0
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	1ad3      	subs	r3, r2, r3
 8008218:	2b02      	cmp	r3, #2
 800821a:	d902      	bls.n	8008222 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800821c:	2303      	movs	r3, #3
 800821e:	73fb      	strb	r3, [r7, #15]
      break;
 8008220:	e004      	b.n	800822c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008222:	f7ff fe60 	bl	8007ee6 <LL_RCC_PLLSAI1_IsReady>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d1f0      	bne.n	800820e <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800822c:	7bfb      	ldrb	r3, [r7, #15]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d137      	bne.n	80082a2 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008232:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008236:	691b      	ldr	r3, [r3, #16]
 8008238:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	021b      	lsls	r3, r3, #8
 8008242:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008246:	4313      	orrs	r3, r2
 8008248:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800824a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800824e:	691b      	ldr	r3, [r3, #16]
 8008250:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800825c:	4313      	orrs	r3, r2
 800825e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008260:	f7ff fe23 	bl	8007eaa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008264:	f7f9 fdee 	bl	8001e44 <HAL_GetTick>
 8008268:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800826a:	e009      	b.n	8008280 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800826c:	f7f9 fdea 	bl	8001e44 <HAL_GetTick>
 8008270:	4602      	mov	r2, r0
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	2b02      	cmp	r3, #2
 8008278:	d902      	bls.n	8008280 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800827a:	2303      	movs	r3, #3
 800827c:	73fb      	strb	r3, [r7, #15]
        break;
 800827e:	e004      	b.n	800828a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008280:	f7ff fe31 	bl	8007ee6 <LL_RCC_PLLSAI1_IsReady>
 8008284:	4603      	mov	r3, r0
 8008286:	2b01      	cmp	r3, #1
 8008288:	d1f0      	bne.n	800826c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800828a:	7bfb      	ldrb	r3, [r7, #15]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d108      	bne.n	80082a2 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008290:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008294:	691a      	ldr	r2, [r3, #16]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	691b      	ldr	r3, [r3, #16]
 800829a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800829e:	4313      	orrs	r3, r2
 80082a0:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80082a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80082b4:	2300      	movs	r3, #0
 80082b6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80082b8:	f7ff fe06 	bl	8007ec8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80082bc:	f7f9 fdc2 	bl	8001e44 <HAL_GetTick>
 80082c0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80082c2:	e009      	b.n	80082d8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80082c4:	f7f9 fdbe 	bl	8001e44 <HAL_GetTick>
 80082c8:	4602      	mov	r2, r0
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	1ad3      	subs	r3, r2, r3
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d902      	bls.n	80082d8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80082d2:	2303      	movs	r3, #3
 80082d4:	73fb      	strb	r3, [r7, #15]
      break;
 80082d6:	e004      	b.n	80082e2 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80082d8:	f7ff fe05 	bl	8007ee6 <LL_RCC_PLLSAI1_IsReady>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d1f0      	bne.n	80082c4 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80082e2:	7bfb      	ldrb	r3, [r7, #15]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d137      	bne.n	8008358 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80082e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082ec:	691b      	ldr	r3, [r3, #16]
 80082ee:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	021b      	lsls	r3, r3, #8
 80082f8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80082fc:	4313      	orrs	r3, r2
 80082fe:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8008300:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	689b      	ldr	r3, [r3, #8]
 800830e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008312:	4313      	orrs	r3, r2
 8008314:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008316:	f7ff fdc8 	bl	8007eaa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800831a:	f7f9 fd93 	bl	8001e44 <HAL_GetTick>
 800831e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008320:	e009      	b.n	8008336 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008322:	f7f9 fd8f 	bl	8001e44 <HAL_GetTick>
 8008326:	4602      	mov	r2, r0
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	1ad3      	subs	r3, r2, r3
 800832c:	2b02      	cmp	r3, #2
 800832e:	d902      	bls.n	8008336 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8008330:	2303      	movs	r3, #3
 8008332:	73fb      	strb	r3, [r7, #15]
        break;
 8008334:	e004      	b.n	8008340 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008336:	f7ff fdd6 	bl	8007ee6 <LL_RCC_PLLSAI1_IsReady>
 800833a:	4603      	mov	r3, r0
 800833c:	2b01      	cmp	r3, #1
 800833e:	d1f0      	bne.n	8008322 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8008340:	7bfb      	ldrb	r3, [r7, #15]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d108      	bne.n	8008358 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008346:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800834a:	691a      	ldr	r2, [r3, #16]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008354:	4313      	orrs	r3, r2
 8008356:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008358:	7bfb      	ldrb	r3, [r7, #15]
}
 800835a:	4618      	mov	r0, r3
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}

08008362 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008362:	b580      	push	{r7, lr}
 8008364:	b084      	sub	sp, #16
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800836a:	2300      	movs	r3, #0
 800836c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800836e:	f7ff fdab 	bl	8007ec8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008372:	f7f9 fd67 	bl	8001e44 <HAL_GetTick>
 8008376:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008378:	e009      	b.n	800838e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800837a:	f7f9 fd63 	bl	8001e44 <HAL_GetTick>
 800837e:	4602      	mov	r2, r0
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	1ad3      	subs	r3, r2, r3
 8008384:	2b02      	cmp	r3, #2
 8008386:	d902      	bls.n	800838e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8008388:	2303      	movs	r3, #3
 800838a:	73fb      	strb	r3, [r7, #15]
      break;
 800838c:	e004      	b.n	8008398 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800838e:	f7ff fdaa 	bl	8007ee6 <LL_RCC_PLLSAI1_IsReady>
 8008392:	4603      	mov	r3, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d1f0      	bne.n	800837a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8008398:	7bfb      	ldrb	r3, [r7, #15]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d137      	bne.n	800840e <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800839e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	021b      	lsls	r3, r3, #8
 80083ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80083b2:	4313      	orrs	r3, r2
 80083b4:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 80083b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083ba:	691b      	ldr	r3, [r3, #16]
 80083bc:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80083c8:	4313      	orrs	r3, r2
 80083ca:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80083cc:	f7ff fd6d 	bl	8007eaa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083d0:	f7f9 fd38 	bl	8001e44 <HAL_GetTick>
 80083d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80083d6:	e009      	b.n	80083ec <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80083d8:	f7f9 fd34 	bl	8001e44 <HAL_GetTick>
 80083dc:	4602      	mov	r2, r0
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	1ad3      	subs	r3, r2, r3
 80083e2:	2b02      	cmp	r3, #2
 80083e4:	d902      	bls.n	80083ec <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80083e6:	2303      	movs	r3, #3
 80083e8:	73fb      	strb	r3, [r7, #15]
        break;
 80083ea:	e004      	b.n	80083f6 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80083ec:	f7ff fd7b 	bl	8007ee6 <LL_RCC_PLLSAI1_IsReady>
 80083f0:	4603      	mov	r3, r0
 80083f2:	2b01      	cmp	r3, #1
 80083f4:	d1f0      	bne.n	80083d8 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80083f6:	7bfb      	ldrb	r3, [r7, #15]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d108      	bne.n	800840e <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80083fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008400:	691a      	ldr	r2, [r3, #16]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	691b      	ldr	r3, [r3, #16]
 8008406:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800840a:	4313      	orrs	r3, r2
 800840c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800840e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008410:	4618      	mov	r0, r3
 8008412:	3710      	adds	r7, #16
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}

08008418 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d101      	bne.n	800842a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	e049      	b.n	80084be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008430:	b2db      	uxtb	r3, r3
 8008432:	2b00      	cmp	r3, #0
 8008434:	d106      	bne.n	8008444 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2200      	movs	r2, #0
 800843a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f7f9 f8fa 	bl	8001638 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2202      	movs	r2, #2
 8008448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681a      	ldr	r2, [r3, #0]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	3304      	adds	r3, #4
 8008454:	4619      	mov	r1, r3
 8008456:	4610      	mov	r0, r2
 8008458:	f000 fa7c 	bl	8008954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2201      	movs	r2, #1
 8008460:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2201      	movs	r2, #1
 8008468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2201      	movs	r2, #1
 8008470:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2201      	movs	r2, #1
 8008478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2201      	movs	r2, #1
 8008488:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2201      	movs	r2, #1
 80084a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2201      	movs	r2, #1
 80084a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80084bc:	2300      	movs	r3, #0
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3708      	adds	r7, #8
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
	...

080084c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b085      	sub	sp, #20
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d001      	beq.n	80084e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	e036      	b.n	800854e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2202      	movs	r2, #2
 80084e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	68da      	ldr	r2, [r3, #12]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f042 0201 	orr.w	r2, r2, #1
 80084f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a17      	ldr	r2, [pc, #92]	@ (800855c <HAL_TIM_Base_Start_IT+0x94>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d004      	beq.n	800850c <HAL_TIM_Base_Start_IT+0x44>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800850a:	d115      	bne.n	8008538 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	689a      	ldr	r2, [r3, #8]
 8008512:	4b13      	ldr	r3, [pc, #76]	@ (8008560 <HAL_TIM_Base_Start_IT+0x98>)
 8008514:	4013      	ands	r3, r2
 8008516:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2b06      	cmp	r3, #6
 800851c:	d015      	beq.n	800854a <HAL_TIM_Base_Start_IT+0x82>
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008524:	d011      	beq.n	800854a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f042 0201 	orr.w	r2, r2, #1
 8008534:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008536:	e008      	b.n	800854a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f042 0201 	orr.w	r2, r2, #1
 8008546:	601a      	str	r2, [r3, #0]
 8008548:	e000      	b.n	800854c <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800854a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3714      	adds	r7, #20
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	40012c00 	.word	0x40012c00
 8008560:	00010007 	.word	0x00010007

08008564 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b084      	sub	sp, #16
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	68db      	ldr	r3, [r3, #12]
 8008572:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	f003 0302 	and.w	r3, r3, #2
 8008582:	2b00      	cmp	r3, #0
 8008584:	d020      	beq.n	80085c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	f003 0302 	and.w	r3, r3, #2
 800858c:	2b00      	cmp	r3, #0
 800858e:	d01b      	beq.n	80085c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f06f 0202 	mvn.w	r2, #2
 8008598:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2201      	movs	r2, #1
 800859e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	699b      	ldr	r3, [r3, #24]
 80085a6:	f003 0303 	and.w	r3, r3, #3
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d003      	beq.n	80085b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f9b2 	bl	8008918 <HAL_TIM_IC_CaptureCallback>
 80085b4:	e005      	b.n	80085c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 f9a4 	bl	8008904 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 f9b5 	bl	800892c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	f003 0304 	and.w	r3, r3, #4
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d020      	beq.n	8008614 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f003 0304 	and.w	r3, r3, #4
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d01b      	beq.n	8008614 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f06f 0204 	mvn.w	r2, #4
 80085e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2202      	movs	r2, #2
 80085ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	699b      	ldr	r3, [r3, #24]
 80085f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d003      	beq.n	8008602 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 f98c 	bl	8008918 <HAL_TIM_IC_CaptureCallback>
 8008600:	e005      	b.n	800860e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 f97e 	bl	8008904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 f98f 	bl	800892c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2200      	movs	r2, #0
 8008612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	f003 0308 	and.w	r3, r3, #8
 800861a:	2b00      	cmp	r3, #0
 800861c:	d020      	beq.n	8008660 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	f003 0308 	and.w	r3, r3, #8
 8008624:	2b00      	cmp	r3, #0
 8008626:	d01b      	beq.n	8008660 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f06f 0208 	mvn.w	r2, #8
 8008630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2204      	movs	r2, #4
 8008636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	69db      	ldr	r3, [r3, #28]
 800863e:	f003 0303 	and.w	r3, r3, #3
 8008642:	2b00      	cmp	r3, #0
 8008644:	d003      	beq.n	800864e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 f966 	bl	8008918 <HAL_TIM_IC_CaptureCallback>
 800864c:	e005      	b.n	800865a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 f958 	bl	8008904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 f969 	bl	800892c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	f003 0310 	and.w	r3, r3, #16
 8008666:	2b00      	cmp	r3, #0
 8008668:	d020      	beq.n	80086ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f003 0310 	and.w	r3, r3, #16
 8008670:	2b00      	cmp	r3, #0
 8008672:	d01b      	beq.n	80086ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f06f 0210 	mvn.w	r2, #16
 800867c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2208      	movs	r2, #8
 8008682:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	69db      	ldr	r3, [r3, #28]
 800868a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800868e:	2b00      	cmp	r3, #0
 8008690:	d003      	beq.n	800869a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008692:	6878      	ldr	r0, [r7, #4]
 8008694:	f000 f940 	bl	8008918 <HAL_TIM_IC_CaptureCallback>
 8008698:	e005      	b.n	80086a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 f932 	bl	8008904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 f943 	bl	800892c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	f003 0301 	and.w	r3, r3, #1
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00c      	beq.n	80086d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f003 0301 	and.w	r3, r3, #1
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d007      	beq.n	80086d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f06f 0201 	mvn.w	r2, #1
 80086c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f7f8 fc0c 	bl	8000ee8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d104      	bne.n	80086e4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d00c      	beq.n	80086fe <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d007      	beq.n	80086fe <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80086f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 faa1 	bl	8008c40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008704:	2b00      	cmp	r3, #0
 8008706:	d00c      	beq.n	8008722 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800870e:	2b00      	cmp	r3, #0
 8008710:	d007      	beq.n	8008722 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800871a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f000 fa99 	bl	8008c54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008728:	2b00      	cmp	r3, #0
 800872a:	d00c      	beq.n	8008746 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008732:	2b00      	cmp	r3, #0
 8008734:	d007      	beq.n	8008746 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800873e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 f8fd 	bl	8008940 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	f003 0320 	and.w	r3, r3, #32
 800874c:	2b00      	cmp	r3, #0
 800874e:	d00c      	beq.n	800876a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f003 0320 	and.w	r3, r3, #32
 8008756:	2b00      	cmp	r3, #0
 8008758:	d007      	beq.n	800876a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f06f 0220 	mvn.w	r2, #32
 8008762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 fa61 	bl	8008c2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800876a:	bf00      	nop
 800876c:	3710      	adds	r7, #16
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}

08008772 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008772:	b580      	push	{r7, lr}
 8008774:	b084      	sub	sp, #16
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
 800877a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800877c:	2300      	movs	r3, #0
 800877e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008786:	2b01      	cmp	r3, #1
 8008788:	d101      	bne.n	800878e <HAL_TIM_ConfigClockSource+0x1c>
 800878a:	2302      	movs	r3, #2
 800878c:	e0b6      	b.n	80088fc <HAL_TIM_ConfigClockSource+0x18a>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2201      	movs	r2, #1
 8008792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2202      	movs	r2, #2
 800879a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 80087ac:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80087b0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80087b8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	68ba      	ldr	r2, [r7, #8]
 80087c0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087ca:	d03e      	beq.n	800884a <HAL_TIM_ConfigClockSource+0xd8>
 80087cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80087d0:	f200 8087 	bhi.w	80088e2 <HAL_TIM_ConfigClockSource+0x170>
 80087d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087d8:	f000 8086 	beq.w	80088e8 <HAL_TIM_ConfigClockSource+0x176>
 80087dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087e0:	d87f      	bhi.n	80088e2 <HAL_TIM_ConfigClockSource+0x170>
 80087e2:	2b70      	cmp	r3, #112	@ 0x70
 80087e4:	d01a      	beq.n	800881c <HAL_TIM_ConfigClockSource+0xaa>
 80087e6:	2b70      	cmp	r3, #112	@ 0x70
 80087e8:	d87b      	bhi.n	80088e2 <HAL_TIM_ConfigClockSource+0x170>
 80087ea:	2b60      	cmp	r3, #96	@ 0x60
 80087ec:	d050      	beq.n	8008890 <HAL_TIM_ConfigClockSource+0x11e>
 80087ee:	2b60      	cmp	r3, #96	@ 0x60
 80087f0:	d877      	bhi.n	80088e2 <HAL_TIM_ConfigClockSource+0x170>
 80087f2:	2b50      	cmp	r3, #80	@ 0x50
 80087f4:	d03c      	beq.n	8008870 <HAL_TIM_ConfigClockSource+0xfe>
 80087f6:	2b50      	cmp	r3, #80	@ 0x50
 80087f8:	d873      	bhi.n	80088e2 <HAL_TIM_ConfigClockSource+0x170>
 80087fa:	2b40      	cmp	r3, #64	@ 0x40
 80087fc:	d058      	beq.n	80088b0 <HAL_TIM_ConfigClockSource+0x13e>
 80087fe:	2b40      	cmp	r3, #64	@ 0x40
 8008800:	d86f      	bhi.n	80088e2 <HAL_TIM_ConfigClockSource+0x170>
 8008802:	2b30      	cmp	r3, #48	@ 0x30
 8008804:	d064      	beq.n	80088d0 <HAL_TIM_ConfigClockSource+0x15e>
 8008806:	2b30      	cmp	r3, #48	@ 0x30
 8008808:	d86b      	bhi.n	80088e2 <HAL_TIM_ConfigClockSource+0x170>
 800880a:	2b20      	cmp	r3, #32
 800880c:	d060      	beq.n	80088d0 <HAL_TIM_ConfigClockSource+0x15e>
 800880e:	2b20      	cmp	r3, #32
 8008810:	d867      	bhi.n	80088e2 <HAL_TIM_ConfigClockSource+0x170>
 8008812:	2b00      	cmp	r3, #0
 8008814:	d05c      	beq.n	80088d0 <HAL_TIM_ConfigClockSource+0x15e>
 8008816:	2b10      	cmp	r3, #16
 8008818:	d05a      	beq.n	80088d0 <HAL_TIM_ConfigClockSource+0x15e>
 800881a:	e062      	b.n	80088e2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800882c:	f000 f97e 	bl	8008b2c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800883e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	68ba      	ldr	r2, [r7, #8]
 8008846:	609a      	str	r2, [r3, #8]
      break;
 8008848:	e04f      	b.n	80088ea <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800885a:	f000 f967 	bl	8008b2c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	689a      	ldr	r2, [r3, #8]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800886c:	609a      	str	r2, [r3, #8]
      break;
 800886e:	e03c      	b.n	80088ea <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800887c:	461a      	mov	r2, r3
 800887e:	f000 f8d9 	bl	8008a34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2150      	movs	r1, #80	@ 0x50
 8008888:	4618      	mov	r0, r3
 800888a:	f000 f932 	bl	8008af2 <TIM_ITRx_SetConfig>
      break;
 800888e:	e02c      	b.n	80088ea <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800889c:	461a      	mov	r2, r3
 800889e:	f000 f8f8 	bl	8008a92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	2160      	movs	r1, #96	@ 0x60
 80088a8:	4618      	mov	r0, r3
 80088aa:	f000 f922 	bl	8008af2 <TIM_ITRx_SetConfig>
      break;
 80088ae:	e01c      	b.n	80088ea <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80088b8:	683b      	ldr	r3, [r7, #0]
 80088ba:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80088bc:	461a      	mov	r2, r3
 80088be:	f000 f8b9 	bl	8008a34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2140      	movs	r1, #64	@ 0x40
 80088c8:	4618      	mov	r0, r3
 80088ca:	f000 f912 	bl	8008af2 <TIM_ITRx_SetConfig>
      break;
 80088ce:	e00c      	b.n	80088ea <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4619      	mov	r1, r3
 80088da:	4610      	mov	r0, r2
 80088dc:	f000 f909 	bl	8008af2 <TIM_ITRx_SetConfig>
      break;
 80088e0:	e003      	b.n	80088ea <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	73fb      	strb	r3, [r7, #15]
      break;
 80088e6:	e000      	b.n	80088ea <HAL_TIM_ConfigClockSource+0x178>
      break;
 80088e8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2201      	movs	r2, #1
 80088ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80088fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3710      	adds	r7, #16
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008904:	b480      	push	{r7}
 8008906:	b083      	sub	sp, #12
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800890c:	bf00      	nop
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008920:	bf00      	nop
 8008922:	370c      	adds	r7, #12
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800892c:	b480      	push	{r7}
 800892e:	b083      	sub	sp, #12
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008934:	bf00      	nop
 8008936:	370c      	adds	r7, #12
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008940:	b480      	push	{r7}
 8008942:	b083      	sub	sp, #12
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008948:	bf00      	nop
 800894a:	370c      	adds	r7, #12
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008954:	b480      	push	{r7}
 8008956:	b085      	sub	sp, #20
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	4a30      	ldr	r2, [pc, #192]	@ (8008a28 <TIM_Base_SetConfig+0xd4>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d003      	beq.n	8008974 <TIM_Base_SetConfig+0x20>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008972:	d108      	bne.n	8008986 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800897a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	68fa      	ldr	r2, [r7, #12]
 8008982:	4313      	orrs	r3, r2
 8008984:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	4a27      	ldr	r2, [pc, #156]	@ (8008a28 <TIM_Base_SetConfig+0xd4>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d00b      	beq.n	80089a6 <TIM_Base_SetConfig+0x52>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008994:	d007      	beq.n	80089a6 <TIM_Base_SetConfig+0x52>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4a24      	ldr	r2, [pc, #144]	@ (8008a2c <TIM_Base_SetConfig+0xd8>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d003      	beq.n	80089a6 <TIM_Base_SetConfig+0x52>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	4a23      	ldr	r2, [pc, #140]	@ (8008a30 <TIM_Base_SetConfig+0xdc>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d108      	bne.n	80089b8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	68fa      	ldr	r2, [r7, #12]
 80089b4:	4313      	orrs	r3, r2
 80089b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	695b      	ldr	r3, [r3, #20]
 80089c2:	4313      	orrs	r3, r2
 80089c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	68fa      	ldr	r2, [r7, #12]
 80089ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	689a      	ldr	r2, [r3, #8]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	4a12      	ldr	r2, [pc, #72]	@ (8008a28 <TIM_Base_SetConfig+0xd4>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d007      	beq.n	80089f4 <TIM_Base_SetConfig+0xa0>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	4a11      	ldr	r2, [pc, #68]	@ (8008a2c <TIM_Base_SetConfig+0xd8>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d003      	beq.n	80089f4 <TIM_Base_SetConfig+0xa0>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	4a10      	ldr	r2, [pc, #64]	@ (8008a30 <TIM_Base_SetConfig+0xdc>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d103      	bne.n	80089fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	691a      	ldr	r2, [r3, #16]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	f003 0301 	and.w	r3, r3, #1
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	d105      	bne.n	8008a1a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	691b      	ldr	r3, [r3, #16]
 8008a12:	f023 0201 	bic.w	r2, r3, #1
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	611a      	str	r2, [r3, #16]
  }
}
 8008a1a:	bf00      	nop
 8008a1c:	3714      	adds	r7, #20
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop
 8008a28:	40012c00 	.word	0x40012c00
 8008a2c:	40014400 	.word	0x40014400
 8008a30:	40014800 	.word	0x40014800

08008a34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a34:	b480      	push	{r7}
 8008a36:	b087      	sub	sp, #28
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6a1b      	ldr	r3, [r3, #32]
 8008a44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	6a1b      	ldr	r3, [r3, #32]
 8008a4a:	f023 0201 	bic.w	r2, r3, #1
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	699b      	ldr	r3, [r3, #24]
 8008a56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008a5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	011b      	lsls	r3, r3, #4
 8008a64:	693a      	ldr	r2, [r7, #16]
 8008a66:	4313      	orrs	r3, r2
 8008a68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	f023 030a 	bic.w	r3, r3, #10
 8008a70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008a72:	697a      	ldr	r2, [r7, #20]
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	4313      	orrs	r3, r2
 8008a78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	693a      	ldr	r2, [r7, #16]
 8008a7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	697a      	ldr	r2, [r7, #20]
 8008a84:	621a      	str	r2, [r3, #32]
}
 8008a86:	bf00      	nop
 8008a88:	371c      	adds	r7, #28
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr

08008a92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a92:	b480      	push	{r7}
 8008a94:	b087      	sub	sp, #28
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	60f8      	str	r0, [r7, #12]
 8008a9a:	60b9      	str	r1, [r7, #8]
 8008a9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	6a1b      	ldr	r3, [r3, #32]
 8008aa2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	6a1b      	ldr	r3, [r3, #32]
 8008aa8:	f023 0210 	bic.w	r2, r3, #16
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	699b      	ldr	r3, [r3, #24]
 8008ab4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008abc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	031b      	lsls	r3, r3, #12
 8008ac2:	693a      	ldr	r2, [r7, #16]
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008ace:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	011b      	lsls	r3, r3, #4
 8008ad4:	697a      	ldr	r2, [r7, #20]
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	693a      	ldr	r2, [r7, #16]
 8008ade:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	697a      	ldr	r2, [r7, #20]
 8008ae4:	621a      	str	r2, [r3, #32]
}
 8008ae6:	bf00      	nop
 8008ae8:	371c      	adds	r7, #28
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr

08008af2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008af2:	b480      	push	{r7}
 8008af4:	b085      	sub	sp, #20
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
 8008afa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008b08:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b0e:	683a      	ldr	r2, [r7, #0]
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	4313      	orrs	r3, r2
 8008b14:	f043 0307 	orr.w	r3, r3, #7
 8008b18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	68fa      	ldr	r2, [r7, #12]
 8008b1e:	609a      	str	r2, [r3, #8]
}
 8008b20:	bf00      	nop
 8008b22:	3714      	adds	r7, #20
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr

08008b2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b087      	sub	sp, #28
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	60f8      	str	r0, [r7, #12]
 8008b34:	60b9      	str	r1, [r7, #8]
 8008b36:	607a      	str	r2, [r7, #4]
 8008b38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008b46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	021a      	lsls	r2, r3, #8
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	431a      	orrs	r2, r3
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	4313      	orrs	r3, r2
 8008b54:	697a      	ldr	r2, [r7, #20]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	697a      	ldr	r2, [r7, #20]
 8008b5e:	609a      	str	r2, [r3, #8]
}
 8008b60:	bf00      	nop
 8008b62:	371c      	adds	r7, #28
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b085      	sub	sp, #20
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d101      	bne.n	8008b84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008b80:	2302      	movs	r3, #2
 8008b82:	e04a      	b.n	8008c1a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2201      	movs	r2, #1
 8008b88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2202      	movs	r2, #2
 8008b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a1f      	ldr	r2, [pc, #124]	@ (8008c28 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d108      	bne.n	8008bc0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008bb4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	68fa      	ldr	r2, [r7, #12]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008bc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	68fa      	ldr	r2, [r7, #12]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	68fa      	ldr	r2, [r7, #12]
 8008bd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a12      	ldr	r2, [pc, #72]	@ (8008c28 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d004      	beq.n	8008bee <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bec:	d10c      	bne.n	8008c08 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008bf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	68ba      	ldr	r2, [r7, #8]
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	68ba      	ldr	r2, [r7, #8]
 8008c06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008c18:	2300      	movs	r3, #0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3714      	adds	r7, #20
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr
 8008c26:	bf00      	nop
 8008c28:	40012c00 	.word	0x40012c00

08008c2c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c34:	bf00      	nop
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c48:	bf00      	nop
 8008c4a:	370c      	adds	r7, #12
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008c5c:	bf00      	nop
 8008c5e:	370c      	adds	r7, #12
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <LL_RCC_GetUSARTClockSource>:
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 8008c70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c74:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	4013      	ands	r3, r2
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <LL_RCC_GetLPUARTClockSource>:
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8008c90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008c94:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4013      	ands	r3, r2
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	370c      	adds	r7, #12
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d101      	bne.n	8008cba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e042      	b.n	8008d40 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d106      	bne.n	8008cd2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 f83b 	bl	8008d48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2224      	movs	r2, #36	@ 0x24
 8008cd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	681a      	ldr	r2, [r3, #0]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f022 0201 	bic.w	r2, r2, #1
 8008ce8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d002      	beq.n	8008cf8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 fae8 	bl	80092c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 f8bd 	bl	8008e78 <UART_SetConfig>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d101      	bne.n	8008d08 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008d04:	2301      	movs	r3, #1
 8008d06:	e01b      	b.n	8008d40 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	685a      	ldr	r2, [r3, #4]
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008d16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	689a      	ldr	r2, [r3, #8]
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008d26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f042 0201 	orr.w	r2, r2, #1
 8008d36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 fb67 	bl	800940c <UART_CheckIdleState>
 8008d3e:	4603      	mov	r3, r0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3708      	adds	r7, #8
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b083      	sub	sp, #12
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8008d50:	bf00      	nop
 8008d52:	370c      	adds	r7, #12
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b08a      	sub	sp, #40	@ 0x28
 8008d60:	af02      	add	r7, sp, #8
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	603b      	str	r3, [r7, #0]
 8008d68:	4613      	mov	r3, r2
 8008d6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d72:	2b20      	cmp	r3, #32
 8008d74:	d17b      	bne.n	8008e6e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d002      	beq.n	8008d82 <HAL_UART_Transmit+0x26>
 8008d7c:	88fb      	ldrh	r3, [r7, #6]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d101      	bne.n	8008d86 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008d82:	2301      	movs	r3, #1
 8008d84:	e074      	b.n	8008e70 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2221      	movs	r2, #33	@ 0x21
 8008d92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008d96:	f7f9 f855 	bl	8001e44 <HAL_GetTick>
 8008d9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	88fa      	ldrh	r2, [r7, #6]
 8008da0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	88fa      	ldrh	r2, [r7, #6]
 8008da8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008db4:	d108      	bne.n	8008dc8 <HAL_UART_Transmit+0x6c>
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	691b      	ldr	r3, [r3, #16]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d104      	bne.n	8008dc8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	61bb      	str	r3, [r7, #24]
 8008dc6:	e003      	b.n	8008dd0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008dd0:	e030      	b.n	8008e34 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	9300      	str	r3, [sp, #0]
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	2180      	movs	r1, #128	@ 0x80
 8008ddc:	68f8      	ldr	r0, [r7, #12]
 8008dde:	f000 fbbf 	bl	8009560 <UART_WaitOnFlagUntilTimeout>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d005      	beq.n	8008df4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2220      	movs	r2, #32
 8008dec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008df0:	2303      	movs	r3, #3
 8008df2:	e03d      	b.n	8008e70 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008df4:	69fb      	ldr	r3, [r7, #28]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d10b      	bne.n	8008e12 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008dfa:	69bb      	ldr	r3, [r7, #24]
 8008dfc:	881b      	ldrh	r3, [r3, #0]
 8008dfe:	461a      	mov	r2, r3
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e08:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	3302      	adds	r3, #2
 8008e0e:	61bb      	str	r3, [r7, #24]
 8008e10:	e007      	b.n	8008e22 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008e12:	69fb      	ldr	r3, [r7, #28]
 8008e14:	781a      	ldrb	r2, [r3, #0]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008e1c:	69fb      	ldr	r3, [r7, #28]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008e28:	b29b      	uxth	r3, r3
 8008e2a:	3b01      	subs	r3, #1
 8008e2c:	b29a      	uxth	r2, r3
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d1c8      	bne.n	8008dd2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	9300      	str	r3, [sp, #0]
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	2200      	movs	r2, #0
 8008e48:	2140      	movs	r1, #64	@ 0x40
 8008e4a:	68f8      	ldr	r0, [r7, #12]
 8008e4c:	f000 fb88 	bl	8009560 <UART_WaitOnFlagUntilTimeout>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d005      	beq.n	8008e62 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2220      	movs	r2, #32
 8008e5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008e5e:	2303      	movs	r3, #3
 8008e60:	e006      	b.n	8008e70 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2220      	movs	r2, #32
 8008e66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	e000      	b.n	8008e70 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008e6e:	2302      	movs	r3, #2
  }
}
 8008e70:	4618      	mov	r0, r3
 8008e72:	3720      	adds	r7, #32
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}

08008e78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008e7c:	b08c      	sub	sp, #48	@ 0x30
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008e82:	2300      	movs	r3, #0
 8008e84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	689a      	ldr	r2, [r3, #8]
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	691b      	ldr	r3, [r3, #16]
 8008e90:	431a      	orrs	r2, r3
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	695b      	ldr	r3, [r3, #20]
 8008e96:	431a      	orrs	r2, r3
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	69db      	ldr	r3, [r3, #28]
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	4baf      	ldr	r3, [pc, #700]	@ (8009164 <UART_SetConfig+0x2ec>)
 8008ea8:	4013      	ands	r3, r2
 8008eaa:	697a      	ldr	r2, [r7, #20]
 8008eac:	6812      	ldr	r2, [r2, #0]
 8008eae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008eb0:	430b      	orrs	r3, r1
 8008eb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	68da      	ldr	r2, [r3, #12]
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	430a      	orrs	r2, r1
 8008ec8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	699b      	ldr	r3, [r3, #24]
 8008ece:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4aa4      	ldr	r2, [pc, #656]	@ (8009168 <UART_SetConfig+0x2f0>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d004      	beq.n	8008ee4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	6a1b      	ldr	r3, [r3, #32]
 8008ede:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	689b      	ldr	r3, [r3, #8]
 8008eea:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008eee:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008ef2:	697a      	ldr	r2, [r7, #20]
 8008ef4:	6812      	ldr	r2, [r2, #0]
 8008ef6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ef8:	430b      	orrs	r3, r1
 8008efa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f02:	f023 010f 	bic.w	r1, r3, #15
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	430a      	orrs	r2, r1
 8008f10:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	4a95      	ldr	r2, [pc, #596]	@ (800916c <UART_SetConfig+0x2f4>)
 8008f18:	4293      	cmp	r3, r2
 8008f1a:	d125      	bne.n	8008f68 <UART_SetConfig+0xf0>
 8008f1c:	2003      	movs	r0, #3
 8008f1e:	f7ff fea3 	bl	8008c68 <LL_RCC_GetUSARTClockSource>
 8008f22:	4603      	mov	r3, r0
 8008f24:	2b03      	cmp	r3, #3
 8008f26:	d81b      	bhi.n	8008f60 <UART_SetConfig+0xe8>
 8008f28:	a201      	add	r2, pc, #4	@ (adr r2, 8008f30 <UART_SetConfig+0xb8>)
 8008f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f2e:	bf00      	nop
 8008f30:	08008f41 	.word	0x08008f41
 8008f34:	08008f51 	.word	0x08008f51
 8008f38:	08008f49 	.word	0x08008f49
 8008f3c:	08008f59 	.word	0x08008f59
 8008f40:	2301      	movs	r3, #1
 8008f42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f46:	e042      	b.n	8008fce <UART_SetConfig+0x156>
 8008f48:	2302      	movs	r3, #2
 8008f4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f4e:	e03e      	b.n	8008fce <UART_SetConfig+0x156>
 8008f50:	2304      	movs	r3, #4
 8008f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f56:	e03a      	b.n	8008fce <UART_SetConfig+0x156>
 8008f58:	2308      	movs	r3, #8
 8008f5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f5e:	e036      	b.n	8008fce <UART_SetConfig+0x156>
 8008f60:	2310      	movs	r3, #16
 8008f62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008f66:	e032      	b.n	8008fce <UART_SetConfig+0x156>
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a7e      	ldr	r2, [pc, #504]	@ (8009168 <UART_SetConfig+0x2f0>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d12a      	bne.n	8008fc8 <UART_SetConfig+0x150>
 8008f72:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8008f76:	f7ff fe87 	bl	8008c88 <LL_RCC_GetLPUARTClockSource>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008f80:	d01a      	beq.n	8008fb8 <UART_SetConfig+0x140>
 8008f82:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008f86:	d81b      	bhi.n	8008fc0 <UART_SetConfig+0x148>
 8008f88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f8c:	d00c      	beq.n	8008fa8 <UART_SetConfig+0x130>
 8008f8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008f92:	d815      	bhi.n	8008fc0 <UART_SetConfig+0x148>
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d003      	beq.n	8008fa0 <UART_SetConfig+0x128>
 8008f98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f9c:	d008      	beq.n	8008fb0 <UART_SetConfig+0x138>
 8008f9e:	e00f      	b.n	8008fc0 <UART_SetConfig+0x148>
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fa6:	e012      	b.n	8008fce <UART_SetConfig+0x156>
 8008fa8:	2302      	movs	r3, #2
 8008faa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fae:	e00e      	b.n	8008fce <UART_SetConfig+0x156>
 8008fb0:	2304      	movs	r3, #4
 8008fb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fb6:	e00a      	b.n	8008fce <UART_SetConfig+0x156>
 8008fb8:	2308      	movs	r3, #8
 8008fba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fbe:	e006      	b.n	8008fce <UART_SetConfig+0x156>
 8008fc0:	2310      	movs	r3, #16
 8008fc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008fc6:	e002      	b.n	8008fce <UART_SetConfig+0x156>
 8008fc8:	2310      	movs	r3, #16
 8008fca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a65      	ldr	r2, [pc, #404]	@ (8009168 <UART_SetConfig+0x2f0>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	f040 8097 	bne.w	8009108 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008fda:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008fde:	2b08      	cmp	r3, #8
 8008fe0:	d823      	bhi.n	800902a <UART_SetConfig+0x1b2>
 8008fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8008fe8 <UART_SetConfig+0x170>)
 8008fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fe8:	0800900d 	.word	0x0800900d
 8008fec:	0800902b 	.word	0x0800902b
 8008ff0:	08009015 	.word	0x08009015
 8008ff4:	0800902b 	.word	0x0800902b
 8008ff8:	0800901b 	.word	0x0800901b
 8008ffc:	0800902b 	.word	0x0800902b
 8009000:	0800902b 	.word	0x0800902b
 8009004:	0800902b 	.word	0x0800902b
 8009008:	08009023 	.word	0x08009023
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800900c:	f7fe fd00 	bl	8007a10 <HAL_RCC_GetPCLK1Freq>
 8009010:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009012:	e010      	b.n	8009036 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009014:	4b56      	ldr	r3, [pc, #344]	@ (8009170 <UART_SetConfig+0x2f8>)
 8009016:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009018:	e00d      	b.n	8009036 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800901a:	f7fe fc79 	bl	8007910 <HAL_RCC_GetSysClockFreq>
 800901e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009020:	e009      	b.n	8009036 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009022:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009026:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009028:	e005      	b.n	8009036 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800902a:	2300      	movs	r3, #0
 800902c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009034:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009038:	2b00      	cmp	r3, #0
 800903a:	f000 812b 	beq.w	8009294 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009042:	4a4c      	ldr	r2, [pc, #304]	@ (8009174 <UART_SetConfig+0x2fc>)
 8009044:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009048:	461a      	mov	r2, r3
 800904a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800904c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009050:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	685a      	ldr	r2, [r3, #4]
 8009056:	4613      	mov	r3, r2
 8009058:	005b      	lsls	r3, r3, #1
 800905a:	4413      	add	r3, r2
 800905c:	69ba      	ldr	r2, [r7, #24]
 800905e:	429a      	cmp	r2, r3
 8009060:	d305      	bcc.n	800906e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009068:	69ba      	ldr	r2, [r7, #24]
 800906a:	429a      	cmp	r2, r3
 800906c:	d903      	bls.n	8009076 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800906e:	2301      	movs	r3, #1
 8009070:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009074:	e10e      	b.n	8009294 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009078:	2200      	movs	r2, #0
 800907a:	60bb      	str	r3, [r7, #8]
 800907c:	60fa      	str	r2, [r7, #12]
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009082:	4a3c      	ldr	r2, [pc, #240]	@ (8009174 <UART_SetConfig+0x2fc>)
 8009084:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009088:	b29b      	uxth	r3, r3
 800908a:	2200      	movs	r2, #0
 800908c:	603b      	str	r3, [r7, #0]
 800908e:	607a      	str	r2, [r7, #4]
 8009090:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009094:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009098:	f7f7 fd5e 	bl	8000b58 <__aeabi_uldivmod>
 800909c:	4602      	mov	r2, r0
 800909e:	460b      	mov	r3, r1
 80090a0:	4610      	mov	r0, r2
 80090a2:	4619      	mov	r1, r3
 80090a4:	f04f 0200 	mov.w	r2, #0
 80090a8:	f04f 0300 	mov.w	r3, #0
 80090ac:	020b      	lsls	r3, r1, #8
 80090ae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80090b2:	0202      	lsls	r2, r0, #8
 80090b4:	6979      	ldr	r1, [r7, #20]
 80090b6:	6849      	ldr	r1, [r1, #4]
 80090b8:	0849      	lsrs	r1, r1, #1
 80090ba:	2000      	movs	r0, #0
 80090bc:	460c      	mov	r4, r1
 80090be:	4605      	mov	r5, r0
 80090c0:	eb12 0804 	adds.w	r8, r2, r4
 80090c4:	eb43 0905 	adc.w	r9, r3, r5
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	685b      	ldr	r3, [r3, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	469a      	mov	sl, r3
 80090d0:	4693      	mov	fp, r2
 80090d2:	4652      	mov	r2, sl
 80090d4:	465b      	mov	r3, fp
 80090d6:	4640      	mov	r0, r8
 80090d8:	4649      	mov	r1, r9
 80090da:	f7f7 fd3d 	bl	8000b58 <__aeabi_uldivmod>
 80090de:	4602      	mov	r2, r0
 80090e0:	460b      	mov	r3, r1
 80090e2:	4613      	mov	r3, r2
 80090e4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80090e6:	6a3b      	ldr	r3, [r7, #32]
 80090e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80090ec:	d308      	bcc.n	8009100 <UART_SetConfig+0x288>
 80090ee:	6a3b      	ldr	r3, [r7, #32]
 80090f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80090f4:	d204      	bcs.n	8009100 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	6a3a      	ldr	r2, [r7, #32]
 80090fc:	60da      	str	r2, [r3, #12]
 80090fe:	e0c9      	b.n	8009294 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8009100:	2301      	movs	r3, #1
 8009102:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009106:	e0c5      	b.n	8009294 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	69db      	ldr	r3, [r3, #28]
 800910c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009110:	d16d      	bne.n	80091ee <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8009112:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009116:	3b01      	subs	r3, #1
 8009118:	2b07      	cmp	r3, #7
 800911a:	d82d      	bhi.n	8009178 <UART_SetConfig+0x300>
 800911c:	a201      	add	r2, pc, #4	@ (adr r2, 8009124 <UART_SetConfig+0x2ac>)
 800911e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009122:	bf00      	nop
 8009124:	08009145 	.word	0x08009145
 8009128:	0800914d 	.word	0x0800914d
 800912c:	08009179 	.word	0x08009179
 8009130:	08009153 	.word	0x08009153
 8009134:	08009179 	.word	0x08009179
 8009138:	08009179 	.word	0x08009179
 800913c:	08009179 	.word	0x08009179
 8009140:	0800915b 	.word	0x0800915b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009144:	f7fe fc7a 	bl	8007a3c <HAL_RCC_GetPCLK2Freq>
 8009148:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800914a:	e01b      	b.n	8009184 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800914c:	4b08      	ldr	r3, [pc, #32]	@ (8009170 <UART_SetConfig+0x2f8>)
 800914e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009150:	e018      	b.n	8009184 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009152:	f7fe fbdd 	bl	8007910 <HAL_RCC_GetSysClockFreq>
 8009156:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009158:	e014      	b.n	8009184 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800915a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800915e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009160:	e010      	b.n	8009184 <UART_SetConfig+0x30c>
 8009162:	bf00      	nop
 8009164:	cfff69f3 	.word	0xcfff69f3
 8009168:	40008000 	.word	0x40008000
 800916c:	40013800 	.word	0x40013800
 8009170:	00f42400 	.word	0x00f42400
 8009174:	080112a8 	.word	0x080112a8
      default:
        pclk = 0U;
 8009178:	2300      	movs	r3, #0
 800917a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800917c:	2301      	movs	r3, #1
 800917e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009182:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009186:	2b00      	cmp	r3, #0
 8009188:	f000 8084 	beq.w	8009294 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009190:	4a4b      	ldr	r2, [pc, #300]	@ (80092c0 <UART_SetConfig+0x448>)
 8009192:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009196:	461a      	mov	r2, r3
 8009198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800919a:	fbb3 f3f2 	udiv	r3, r3, r2
 800919e:	005a      	lsls	r2, r3, #1
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	085b      	lsrs	r3, r3, #1
 80091a6:	441a      	add	r2, r3
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80091b0:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091b2:	6a3b      	ldr	r3, [r7, #32]
 80091b4:	2b0f      	cmp	r3, #15
 80091b6:	d916      	bls.n	80091e6 <UART_SetConfig+0x36e>
 80091b8:	6a3b      	ldr	r3, [r7, #32]
 80091ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091be:	d212      	bcs.n	80091e6 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80091c0:	6a3b      	ldr	r3, [r7, #32]
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	f023 030f 	bic.w	r3, r3, #15
 80091c8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80091ca:	6a3b      	ldr	r3, [r7, #32]
 80091cc:	085b      	lsrs	r3, r3, #1
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	f003 0307 	and.w	r3, r3, #7
 80091d4:	b29a      	uxth	r2, r3
 80091d6:	8bfb      	ldrh	r3, [r7, #30]
 80091d8:	4313      	orrs	r3, r2
 80091da:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	8bfa      	ldrh	r2, [r7, #30]
 80091e2:	60da      	str	r2, [r3, #12]
 80091e4:	e056      	b.n	8009294 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 80091e6:	2301      	movs	r3, #1
 80091e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80091ec:	e052      	b.n	8009294 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80091ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80091f2:	3b01      	subs	r3, #1
 80091f4:	2b07      	cmp	r3, #7
 80091f6:	d822      	bhi.n	800923e <UART_SetConfig+0x3c6>
 80091f8:	a201      	add	r2, pc, #4	@ (adr r2, 8009200 <UART_SetConfig+0x388>)
 80091fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091fe:	bf00      	nop
 8009200:	08009221 	.word	0x08009221
 8009204:	08009229 	.word	0x08009229
 8009208:	0800923f 	.word	0x0800923f
 800920c:	0800922f 	.word	0x0800922f
 8009210:	0800923f 	.word	0x0800923f
 8009214:	0800923f 	.word	0x0800923f
 8009218:	0800923f 	.word	0x0800923f
 800921c:	08009237 	.word	0x08009237
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009220:	f7fe fc0c 	bl	8007a3c <HAL_RCC_GetPCLK2Freq>
 8009224:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009226:	e010      	b.n	800924a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009228:	4b26      	ldr	r3, [pc, #152]	@ (80092c4 <UART_SetConfig+0x44c>)
 800922a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800922c:	e00d      	b.n	800924a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800922e:	f7fe fb6f 	bl	8007910 <HAL_RCC_GetSysClockFreq>
 8009232:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009234:	e009      	b.n	800924a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009236:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800923a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800923c:	e005      	b.n	800924a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800923e:	2300      	movs	r3, #0
 8009240:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009242:	2301      	movs	r3, #1
 8009244:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009248:	bf00      	nop
    }

    if (pclk != 0U)
 800924a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800924c:	2b00      	cmp	r3, #0
 800924e:	d021      	beq.n	8009294 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009254:	4a1a      	ldr	r2, [pc, #104]	@ (80092c0 <UART_SetConfig+0x448>)
 8009256:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800925a:	461a      	mov	r2, r3
 800925c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800925e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	085b      	lsrs	r3, r3, #1
 8009268:	441a      	add	r2, r3
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009272:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009274:	6a3b      	ldr	r3, [r7, #32]
 8009276:	2b0f      	cmp	r3, #15
 8009278:	d909      	bls.n	800928e <UART_SetConfig+0x416>
 800927a:	6a3b      	ldr	r3, [r7, #32]
 800927c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009280:	d205      	bcs.n	800928e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009282:	6a3b      	ldr	r3, [r7, #32]
 8009284:	b29a      	uxth	r2, r3
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	60da      	str	r2, [r3, #12]
 800928c:	e002      	b.n	8009294 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009294:	697b      	ldr	r3, [r7, #20]
 8009296:	2201      	movs	r2, #1
 8009298:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	2201      	movs	r2, #1
 80092a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	2200      	movs	r2, #0
 80092a8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	2200      	movs	r2, #0
 80092ae:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80092b0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3730      	adds	r7, #48	@ 0x30
 80092b8:	46bd      	mov	sp, r7
 80092ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80092be:	bf00      	nop
 80092c0:	080112a8 	.word	0x080112a8
 80092c4:	00f42400 	.word	0x00f42400

080092c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092d4:	f003 0308 	and.w	r3, r3, #8
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00a      	beq.n	80092f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	430a      	orrs	r2, r1
 80092f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092f6:	f003 0301 	and.w	r3, r3, #1
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d00a      	beq.n	8009314 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	685b      	ldr	r3, [r3, #4]
 8009304:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	430a      	orrs	r2, r1
 8009312:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009318:	f003 0302 	and.w	r3, r3, #2
 800931c:	2b00      	cmp	r3, #0
 800931e:	d00a      	beq.n	8009336 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	430a      	orrs	r2, r1
 8009334:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800933a:	f003 0304 	and.w	r3, r3, #4
 800933e:	2b00      	cmp	r3, #0
 8009340:	d00a      	beq.n	8009358 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	430a      	orrs	r2, r1
 8009356:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800935c:	f003 0310 	and.w	r3, r3, #16
 8009360:	2b00      	cmp	r3, #0
 8009362:	d00a      	beq.n	800937a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	430a      	orrs	r2, r1
 8009378:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800937e:	f003 0320 	and.w	r3, r3, #32
 8009382:	2b00      	cmp	r3, #0
 8009384:	d00a      	beq.n	800939c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	430a      	orrs	r2, r1
 800939a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d01a      	beq.n	80093de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	430a      	orrs	r2, r1
 80093bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80093c6:	d10a      	bne.n	80093de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	430a      	orrs	r2, r1
 80093dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d00a      	beq.n	8009400 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	430a      	orrs	r2, r1
 80093fe:	605a      	str	r2, [r3, #4]
  }
}
 8009400:	bf00      	nop
 8009402:	370c      	adds	r7, #12
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b098      	sub	sp, #96	@ 0x60
 8009410:	af02      	add	r7, sp, #8
 8009412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800941c:	f7f8 fd12 	bl	8001e44 <HAL_GetTick>
 8009420:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f003 0308 	and.w	r3, r3, #8
 800942c:	2b08      	cmp	r3, #8
 800942e:	d12f      	bne.n	8009490 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009430:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009434:	9300      	str	r3, [sp, #0]
 8009436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009438:	2200      	movs	r2, #0
 800943a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 f88e 	bl	8009560 <UART_WaitOnFlagUntilTimeout>
 8009444:	4603      	mov	r3, r0
 8009446:	2b00      	cmp	r3, #0
 8009448:	d022      	beq.n	8009490 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009452:	e853 3f00 	ldrex	r3, [r3]
 8009456:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009458:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800945a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800945e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	461a      	mov	r2, r3
 8009466:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009468:	647b      	str	r3, [r7, #68]	@ 0x44
 800946a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800946e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009470:	e841 2300 	strex	r3, r2, [r1]
 8009474:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009476:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009478:	2b00      	cmp	r3, #0
 800947a:	d1e6      	bne.n	800944a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2220      	movs	r2, #32
 8009480:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2200      	movs	r2, #0
 8009488:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800948c:	2303      	movs	r3, #3
 800948e:	e063      	b.n	8009558 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f003 0304 	and.w	r3, r3, #4
 800949a:	2b04      	cmp	r3, #4
 800949c:	d149      	bne.n	8009532 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800949e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80094a2:	9300      	str	r3, [sp, #0]
 80094a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094a6:	2200      	movs	r2, #0
 80094a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f000 f857 	bl	8009560 <UART_WaitOnFlagUntilTimeout>
 80094b2:	4603      	mov	r3, r0
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d03c      	beq.n	8009532 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c0:	e853 3f00 	ldrex	r3, [r3]
 80094c4:	623b      	str	r3, [r7, #32]
   return(result);
 80094c6:	6a3b      	ldr	r3, [r7, #32]
 80094c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80094cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	461a      	mov	r2, r3
 80094d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80094d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80094dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80094de:	e841 2300 	strex	r3, r2, [r1]
 80094e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80094e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d1e6      	bne.n	80094b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	3308      	adds	r3, #8
 80094f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	e853 3f00 	ldrex	r3, [r3]
 80094f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f023 0301 	bic.w	r3, r3, #1
 8009500:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	3308      	adds	r3, #8
 8009508:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800950a:	61fa      	str	r2, [r7, #28]
 800950c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800950e:	69b9      	ldr	r1, [r7, #24]
 8009510:	69fa      	ldr	r2, [r7, #28]
 8009512:	e841 2300 	strex	r3, r2, [r1]
 8009516:	617b      	str	r3, [r7, #20]
   return(result);
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1e5      	bne.n	80094ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2220      	movs	r2, #32
 8009522:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2200      	movs	r2, #0
 800952a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800952e:	2303      	movs	r3, #3
 8009530:	e012      	b.n	8009558 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2220      	movs	r2, #32
 8009536:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2220      	movs	r2, #32
 800953e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2200      	movs	r2, #0
 8009546:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2200      	movs	r2, #0
 800954c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2200      	movs	r2, #0
 8009552:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009556:	2300      	movs	r3, #0
}
 8009558:	4618      	mov	r0, r3
 800955a:	3758      	adds	r7, #88	@ 0x58
 800955c:	46bd      	mov	sp, r7
 800955e:	bd80      	pop	{r7, pc}

08009560 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b084      	sub	sp, #16
 8009564:	af00      	add	r7, sp, #0
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	60b9      	str	r1, [r7, #8]
 800956a:	603b      	str	r3, [r7, #0]
 800956c:	4613      	mov	r3, r2
 800956e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009570:	e04f      	b.n	8009612 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009572:	69bb      	ldr	r3, [r7, #24]
 8009574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009578:	d04b      	beq.n	8009612 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800957a:	f7f8 fc63 	bl	8001e44 <HAL_GetTick>
 800957e:	4602      	mov	r2, r0
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	1ad3      	subs	r3, r2, r3
 8009584:	69ba      	ldr	r2, [r7, #24]
 8009586:	429a      	cmp	r2, r3
 8009588:	d302      	bcc.n	8009590 <UART_WaitOnFlagUntilTimeout+0x30>
 800958a:	69bb      	ldr	r3, [r7, #24]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d101      	bne.n	8009594 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009590:	2303      	movs	r3, #3
 8009592:	e04e      	b.n	8009632 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f003 0304 	and.w	r3, r3, #4
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d037      	beq.n	8009612 <UART_WaitOnFlagUntilTimeout+0xb2>
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	2b80      	cmp	r3, #128	@ 0x80
 80095a6:	d034      	beq.n	8009612 <UART_WaitOnFlagUntilTimeout+0xb2>
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	2b40      	cmp	r3, #64	@ 0x40
 80095ac:	d031      	beq.n	8009612 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	69db      	ldr	r3, [r3, #28]
 80095b4:	f003 0308 	and.w	r3, r3, #8
 80095b8:	2b08      	cmp	r3, #8
 80095ba:	d110      	bne.n	80095de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	2208      	movs	r2, #8
 80095c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80095c4:	68f8      	ldr	r0, [r7, #12]
 80095c6:	f000 f838 	bl	800963a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2208      	movs	r2, #8
 80095ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2200      	movs	r2, #0
 80095d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80095da:	2301      	movs	r3, #1
 80095dc:	e029      	b.n	8009632 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	69db      	ldr	r3, [r3, #28]
 80095e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80095e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80095ec:	d111      	bne.n	8009612 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80095f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	f000 f81e 	bl	800963a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2220      	movs	r2, #32
 8009602:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2200      	movs	r2, #0
 800960a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800960e:	2303      	movs	r3, #3
 8009610:	e00f      	b.n	8009632 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	69da      	ldr	r2, [r3, #28]
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	4013      	ands	r3, r2
 800961c:	68ba      	ldr	r2, [r7, #8]
 800961e:	429a      	cmp	r2, r3
 8009620:	bf0c      	ite	eq
 8009622:	2301      	moveq	r3, #1
 8009624:	2300      	movne	r3, #0
 8009626:	b2db      	uxtb	r3, r3
 8009628:	461a      	mov	r2, r3
 800962a:	79fb      	ldrb	r3, [r7, #7]
 800962c:	429a      	cmp	r2, r3
 800962e:	d0a0      	beq.n	8009572 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009630:	2300      	movs	r3, #0
}
 8009632:	4618      	mov	r0, r3
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800963a:	b480      	push	{r7}
 800963c:	b095      	sub	sp, #84	@ 0x54
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800964a:	e853 3f00 	ldrex	r3, [r3]
 800964e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009652:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009656:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	461a      	mov	r2, r3
 800965e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009660:	643b      	str	r3, [r7, #64]	@ 0x40
 8009662:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009664:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009666:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009668:	e841 2300 	strex	r3, r2, [r1]
 800966c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800966e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009670:	2b00      	cmp	r3, #0
 8009672:	d1e6      	bne.n	8009642 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	3308      	adds	r3, #8
 800967a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967c:	6a3b      	ldr	r3, [r7, #32]
 800967e:	e853 3f00 	ldrex	r3, [r3]
 8009682:	61fb      	str	r3, [r7, #28]
   return(result);
 8009684:	69fb      	ldr	r3, [r7, #28]
 8009686:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800968a:	f023 0301 	bic.w	r3, r3, #1
 800968e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	3308      	adds	r3, #8
 8009696:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009698:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800969a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800969e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096a0:	e841 2300 	strex	r3, r2, [r1]
 80096a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80096a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d1e3      	bne.n	8009674 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d118      	bne.n	80096e6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	e853 3f00 	ldrex	r3, [r3]
 80096c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	f023 0310 	bic.w	r3, r3, #16
 80096c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	461a      	mov	r2, r3
 80096d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096d2:	61bb      	str	r3, [r7, #24]
 80096d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d6:	6979      	ldr	r1, [r7, #20]
 80096d8:	69ba      	ldr	r2, [r7, #24]
 80096da:	e841 2300 	strex	r3, r2, [r1]
 80096de:	613b      	str	r3, [r7, #16]
   return(result);
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d1e6      	bne.n	80096b4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2220      	movs	r2, #32
 80096ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2200      	movs	r2, #0
 80096f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2200      	movs	r2, #0
 80096f8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80096fa:	bf00      	nop
 80096fc:	3754      	adds	r7, #84	@ 0x54
 80096fe:	46bd      	mov	sp, r7
 8009700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009704:	4770      	bx	lr

08009706 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009706:	b480      	push	{r7}
 8009708:	b085      	sub	sp, #20
 800970a:	af00      	add	r7, sp, #0
 800970c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009716:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800971a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	b29a      	uxth	r2, r3
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8009726:	2300      	movs	r3, #0
}
 8009728:	4618      	mov	r0, r3
 800972a:	3714      	adds	r7, #20
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009734:	b480      	push	{r7}
 8009736:	b085      	sub	sp, #20
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800973c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 8009740:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8009748:	b29a      	uxth	r2, r3
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	b29b      	uxth	r3, r3
 800974e:	43db      	mvns	r3, r3
 8009750:	b29b      	uxth	r3, r3
 8009752:	4013      	ands	r3, r2
 8009754:	b29a      	uxth	r2, r3
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800975c:	2300      	movs	r3, #0
}
 800975e:	4618      	mov	r0, r3
 8009760:	3714      	adds	r7, #20
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr

0800976a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800976a:	b480      	push	{r7}
 800976c:	b085      	sub	sp, #20
 800976e:	af00      	add	r7, sp, #0
 8009770:	60f8      	str	r0, [r7, #12]
 8009772:	1d3b      	adds	r3, r7, #4
 8009774:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	2201      	movs	r2, #1
 800977c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2200      	movs	r2, #0
 8009784:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2200      	movs	r2, #0
 800978c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2200      	movs	r2, #0
 8009794:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	3714      	adds	r7, #20
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr
	...

080097a8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b09d      	sub	sp, #116	@ 0x74
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80097b2:	2300      	movs	r3, #0
 80097b4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	4413      	add	r3, r2
 80097c2:	881b      	ldrh	r3, [r3, #0]
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80097ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097ce:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	78db      	ldrb	r3, [r3, #3]
 80097d6:	2b03      	cmp	r3, #3
 80097d8:	d81f      	bhi.n	800981a <USB_ActivateEndpoint+0x72>
 80097da:	a201      	add	r2, pc, #4	@ (adr r2, 80097e0 <USB_ActivateEndpoint+0x38>)
 80097dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097e0:	080097f1 	.word	0x080097f1
 80097e4:	0800980d 	.word	0x0800980d
 80097e8:	08009823 	.word	0x08009823
 80097ec:	080097ff 	.word	0x080097ff
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80097f0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80097f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80097f8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 80097fc:	e012      	b.n	8009824 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80097fe:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009802:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8009806:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800980a:	e00b      	b.n	8009824 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800980c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009810:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009814:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8009818:	e004      	b.n	8009824 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800981a:	2301      	movs	r3, #1
 800981c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8009820:	e000      	b.n	8009824 <USB_ActivateEndpoint+0x7c>
      break;
 8009822:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	781b      	ldrb	r3, [r3, #0]
 800982a:	009b      	lsls	r3, r3, #2
 800982c:	441a      	add	r2, r3
 800982e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8009832:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009836:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800983a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800983e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009842:	b29b      	uxth	r3, r3
 8009844:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	009b      	lsls	r3, r3, #2
 800984e:	4413      	add	r3, r2
 8009850:	881b      	ldrh	r3, [r3, #0]
 8009852:	b29b      	uxth	r3, r3
 8009854:	b21b      	sxth	r3, r3
 8009856:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800985a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800985e:	b21a      	sxth	r2, r3
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	b21b      	sxth	r3, r3
 8009866:	4313      	orrs	r3, r2
 8009868:	b21b      	sxth	r3, r3
 800986a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	009b      	lsls	r3, r3, #2
 8009876:	441a      	add	r2, r3
 8009878:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800987c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009880:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009884:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009888:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800988c:	b29b      	uxth	r3, r3
 800988e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	7b1b      	ldrb	r3, [r3, #12]
 8009894:	2b00      	cmp	r3, #0
 8009896:	f040 8178 	bne.w	8009b8a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	785b      	ldrb	r3, [r3, #1]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	f000 8084 	beq.w	80099ac <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	61bb      	str	r3, [r7, #24]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	461a      	mov	r2, r3
 80098b2:	69bb      	ldr	r3, [r7, #24]
 80098b4:	4413      	add	r3, r2
 80098b6:	61bb      	str	r3, [r7, #24]
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	781b      	ldrb	r3, [r3, #0]
 80098bc:	00da      	lsls	r2, r3, #3
 80098be:	69bb      	ldr	r3, [r7, #24]
 80098c0:	4413      	add	r3, r2
 80098c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80098c6:	617b      	str	r3, [r7, #20]
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	88db      	ldrh	r3, [r3, #6]
 80098cc:	085b      	lsrs	r3, r3, #1
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	005b      	lsls	r3, r3, #1
 80098d2:	b29a      	uxth	r2, r3
 80098d4:	697b      	ldr	r3, [r7, #20]
 80098d6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80098d8:	687a      	ldr	r2, [r7, #4]
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	4413      	add	r3, r2
 80098e2:	881b      	ldrh	r3, [r3, #0]
 80098e4:	827b      	strh	r3, [r7, #18]
 80098e6:	8a7b      	ldrh	r3, [r7, #18]
 80098e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d01b      	beq.n	8009928 <USB_ActivateEndpoint+0x180>
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	4413      	add	r3, r2
 80098fa:	881b      	ldrh	r3, [r3, #0]
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009902:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009906:	823b      	strh	r3, [r7, #16]
 8009908:	687a      	ldr	r2, [r7, #4]
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	781b      	ldrb	r3, [r3, #0]
 800990e:	009b      	lsls	r3, r3, #2
 8009910:	441a      	add	r2, r3
 8009912:	8a3b      	ldrh	r3, [r7, #16]
 8009914:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009918:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800991c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009920:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009924:	b29b      	uxth	r3, r3
 8009926:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	78db      	ldrb	r3, [r3, #3]
 800992c:	2b01      	cmp	r3, #1
 800992e:	d020      	beq.n	8009972 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	009b      	lsls	r3, r3, #2
 8009938:	4413      	add	r3, r2
 800993a:	881b      	ldrh	r3, [r3, #0]
 800993c:	b29b      	uxth	r3, r3
 800993e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009942:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009946:	81bb      	strh	r3, [r7, #12]
 8009948:	89bb      	ldrh	r3, [r7, #12]
 800994a:	f083 0320 	eor.w	r3, r3, #32
 800994e:	81bb      	strh	r3, [r7, #12]
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	781b      	ldrb	r3, [r3, #0]
 8009956:	009b      	lsls	r3, r3, #2
 8009958:	441a      	add	r2, r3
 800995a:	89bb      	ldrh	r3, [r7, #12]
 800995c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009960:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009964:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009968:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800996c:	b29b      	uxth	r3, r3
 800996e:	8013      	strh	r3, [r2, #0]
 8009970:	e2d5      	b.n	8009f1e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	4413      	add	r3, r2
 800997c:	881b      	ldrh	r3, [r3, #0]
 800997e:	b29b      	uxth	r3, r3
 8009980:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009984:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009988:	81fb      	strh	r3, [r7, #14]
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	441a      	add	r2, r3
 8009994:	89fb      	ldrh	r3, [r7, #14]
 8009996:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800999a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800999e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80099a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	8013      	strh	r3, [r2, #0]
 80099aa:	e2b8      	b.n	8009f1e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	461a      	mov	r2, r3
 80099ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099bc:	4413      	add	r3, r2
 80099be:	633b      	str	r3, [r7, #48]	@ 0x30
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	00da      	lsls	r2, r3, #3
 80099c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c8:	4413      	add	r3, r2
 80099ca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80099ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	88db      	ldrh	r3, [r3, #6]
 80099d4:	085b      	lsrs	r3, r3, #1
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	005b      	lsls	r3, r3, #1
 80099da:	b29a      	uxth	r2, r3
 80099dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099de:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	461a      	mov	r2, r3
 80099ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099f0:	4413      	add	r3, r2
 80099f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	00da      	lsls	r2, r3, #3
 80099fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099fc:	4413      	add	r3, r2
 80099fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009a02:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a06:	881b      	ldrh	r3, [r3, #0]
 8009a08:	b29b      	uxth	r3, r3
 8009a0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a0e:	b29a      	uxth	r2, r3
 8009a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a12:	801a      	strh	r2, [r3, #0]
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	691b      	ldr	r3, [r3, #16]
 8009a18:	2b3e      	cmp	r3, #62	@ 0x3e
 8009a1a:	d91d      	bls.n	8009a58 <USB_ActivateEndpoint+0x2b0>
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	691b      	ldr	r3, [r3, #16]
 8009a20:	095b      	lsrs	r3, r3, #5
 8009a22:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	691b      	ldr	r3, [r3, #16]
 8009a28:	f003 031f 	and.w	r3, r3, #31
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d102      	bne.n	8009a36 <USB_ActivateEndpoint+0x28e>
 8009a30:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009a32:	3b01      	subs	r3, #1
 8009a34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a38:	881b      	ldrh	r3, [r3, #0]
 8009a3a:	b29a      	uxth	r2, r3
 8009a3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009a3e:	b29b      	uxth	r3, r3
 8009a40:	029b      	lsls	r3, r3, #10
 8009a42:	b29b      	uxth	r3, r3
 8009a44:	4313      	orrs	r3, r2
 8009a46:	b29b      	uxth	r3, r3
 8009a48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a50:	b29a      	uxth	r2, r3
 8009a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a54:	801a      	strh	r2, [r3, #0]
 8009a56:	e026      	b.n	8009aa6 <USB_ActivateEndpoint+0x2fe>
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	691b      	ldr	r3, [r3, #16]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d10a      	bne.n	8009a76 <USB_ActivateEndpoint+0x2ce>
 8009a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a62:	881b      	ldrh	r3, [r3, #0]
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a6e:	b29a      	uxth	r2, r3
 8009a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a72:	801a      	strh	r2, [r3, #0]
 8009a74:	e017      	b.n	8009aa6 <USB_ActivateEndpoint+0x2fe>
 8009a76:	683b      	ldr	r3, [r7, #0]
 8009a78:	691b      	ldr	r3, [r3, #16]
 8009a7a:	085b      	lsrs	r3, r3, #1
 8009a7c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	691b      	ldr	r3, [r3, #16]
 8009a82:	f003 0301 	and.w	r3, r3, #1
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d002      	beq.n	8009a90 <USB_ActivateEndpoint+0x2e8>
 8009a8a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a92:	881b      	ldrh	r3, [r3, #0]
 8009a94:	b29a      	uxth	r2, r3
 8009a96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	029b      	lsls	r3, r3, #10
 8009a9c:	b29b      	uxth	r3, r3
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	b29a      	uxth	r2, r3
 8009aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aa4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009aa6:	687a      	ldr	r2, [r7, #4]
 8009aa8:	683b      	ldr	r3, [r7, #0]
 8009aaa:	781b      	ldrb	r3, [r3, #0]
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	4413      	add	r3, r2
 8009ab0:	881b      	ldrh	r3, [r3, #0]
 8009ab2:	847b      	strh	r3, [r7, #34]	@ 0x22
 8009ab4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8009ab6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d01b      	beq.n	8009af6 <USB_ActivateEndpoint+0x34e>
 8009abe:	687a      	ldr	r2, [r7, #4]
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	4413      	add	r3, r2
 8009ac8:	881b      	ldrh	r3, [r3, #0]
 8009aca:	b29b      	uxth	r3, r3
 8009acc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ad0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ad4:	843b      	strh	r3, [r7, #32]
 8009ad6:	687a      	ldr	r2, [r7, #4]
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	441a      	add	r2, r3
 8009ae0:	8c3b      	ldrh	r3, [r7, #32]
 8009ae2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ae6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009aea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009aee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d124      	bne.n	8009b48 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	009b      	lsls	r3, r3, #2
 8009b06:	4413      	add	r3, r2
 8009b08:	881b      	ldrh	r3, [r3, #0]
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009b10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b14:	83bb      	strh	r3, [r7, #28]
 8009b16:	8bbb      	ldrh	r3, [r7, #28]
 8009b18:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009b1c:	83bb      	strh	r3, [r7, #28]
 8009b1e:	8bbb      	ldrh	r3, [r7, #28]
 8009b20:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009b24:	83bb      	strh	r3, [r7, #28]
 8009b26:	687a      	ldr	r2, [r7, #4]
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	441a      	add	r2, r3
 8009b30:	8bbb      	ldrh	r3, [r7, #28]
 8009b32:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b36:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	8013      	strh	r3, [r2, #0]
 8009b46:	e1ea      	b.n	8009f1e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	683b      	ldr	r3, [r7, #0]
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	4413      	add	r3, r2
 8009b52:	881b      	ldrh	r3, [r3, #0]
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009b5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009b5e:	83fb      	strh	r3, [r7, #30]
 8009b60:	8bfb      	ldrh	r3, [r7, #30]
 8009b62:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009b66:	83fb      	strh	r3, [r7, #30]
 8009b68:	687a      	ldr	r2, [r7, #4]
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	441a      	add	r2, r3
 8009b72:	8bfb      	ldrh	r3, [r7, #30]
 8009b74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009b78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009b7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009b84:	b29b      	uxth	r3, r3
 8009b86:	8013      	strh	r3, [r2, #0]
 8009b88:	e1c9      	b.n	8009f1e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	78db      	ldrb	r3, [r3, #3]
 8009b8e:	2b02      	cmp	r3, #2
 8009b90:	d11e      	bne.n	8009bd0 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	4413      	add	r3, r2
 8009b9c:	881b      	ldrh	r3, [r3, #0]
 8009b9e:	b29b      	uxth	r3, r3
 8009ba0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009ba4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ba8:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	441a      	add	r2, r3
 8009bb6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8009bba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009bbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009bc2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8009bc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	8013      	strh	r3, [r2, #0]
 8009bce:	e01d      	b.n	8009c0c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009bd0:	687a      	ldr	r2, [r7, #4]
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	4413      	add	r3, r2
 8009bda:	881b      	ldrh	r3, [r3, #0]
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8009be2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009be6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	009b      	lsls	r3, r3, #2
 8009bf2:	441a      	add	r2, r3
 8009bf4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8009bf8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009bfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c08:	b29b      	uxth	r3, r3
 8009c0a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	461a      	mov	r2, r3
 8009c1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c1c:	4413      	add	r3, r2
 8009c1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	00da      	lsls	r2, r3, #3
 8009c26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009c28:	4413      	add	r3, r2
 8009c2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009c2e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	891b      	ldrh	r3, [r3, #8]
 8009c34:	085b      	lsrs	r3, r3, #1
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	005b      	lsls	r3, r3, #1
 8009c3a:	b29a      	uxth	r2, r3
 8009c3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009c3e:	801a      	strh	r2, [r3, #0]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c50:	4413      	add	r3, r2
 8009c52:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	00da      	lsls	r2, r3, #3
 8009c5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c5c:	4413      	add	r3, r2
 8009c5e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8009c62:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	895b      	ldrh	r3, [r3, #10]
 8009c68:	085b      	lsrs	r3, r3, #1
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	005b      	lsls	r3, r3, #1
 8009c6e:	b29a      	uxth	r2, r3
 8009c70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c72:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	785b      	ldrb	r3, [r3, #1]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	f040 8093 	bne.w	8009da4 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c7e:	687a      	ldr	r2, [r7, #4]
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	009b      	lsls	r3, r3, #2
 8009c86:	4413      	add	r3, r2
 8009c88:	881b      	ldrh	r3, [r3, #0]
 8009c8a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8009c8e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009c92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d01b      	beq.n	8009cd2 <USB_ActivateEndpoint+0x52a>
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	781b      	ldrb	r3, [r3, #0]
 8009ca0:	009b      	lsls	r3, r3, #2
 8009ca2:	4413      	add	r3, r2
 8009ca4:	881b      	ldrh	r3, [r3, #0]
 8009ca6:	b29b      	uxth	r3, r3
 8009ca8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009cac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cb0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009cb2:	687a      	ldr	r2, [r7, #4]
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	781b      	ldrb	r3, [r3, #0]
 8009cb8:	009b      	lsls	r3, r3, #2
 8009cba:	441a      	add	r2, r3
 8009cbc:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009cbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009cc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009cc6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009cca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cce:	b29b      	uxth	r3, r3
 8009cd0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	4413      	add	r3, r2
 8009cdc:	881b      	ldrh	r3, [r3, #0]
 8009cde:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8009ce0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8009ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d01b      	beq.n	8009d22 <USB_ActivateEndpoint+0x57a>
 8009cea:	687a      	ldr	r2, [r7, #4]
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	781b      	ldrb	r3, [r3, #0]
 8009cf0:	009b      	lsls	r3, r3, #2
 8009cf2:	4413      	add	r3, r2
 8009cf4:	881b      	ldrh	r3, [r3, #0]
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009cfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d00:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	009b      	lsls	r3, r3, #2
 8009d0a:	441a      	add	r2, r3
 8009d0c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8009d0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d1a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009d22:	687a      	ldr	r2, [r7, #4]
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	009b      	lsls	r3, r3, #2
 8009d2a:	4413      	add	r3, r2
 8009d2c:	881b      	ldrh	r3, [r3, #0]
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009d34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d38:	873b      	strh	r3, [r7, #56]	@ 0x38
 8009d3a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8009d3c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009d40:	873b      	strh	r3, [r7, #56]	@ 0x38
 8009d42:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8009d44:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009d48:	873b      	strh	r3, [r7, #56]	@ 0x38
 8009d4a:	687a      	ldr	r2, [r7, #4]
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	009b      	lsls	r3, r3, #2
 8009d52:	441a      	add	r2, r3
 8009d54:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8009d56:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d5a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d66:	b29b      	uxth	r3, r3
 8009d68:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	781b      	ldrb	r3, [r3, #0]
 8009d70:	009b      	lsls	r3, r3, #2
 8009d72:	4413      	add	r3, r2
 8009d74:	881b      	ldrh	r3, [r3, #0]
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009d80:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8009d82:	687a      	ldr	r2, [r7, #4]
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	441a      	add	r2, r3
 8009d8c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009d8e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d92:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d9e:	b29b      	uxth	r3, r3
 8009da0:	8013      	strh	r3, [r2, #0]
 8009da2:	e0bc      	b.n	8009f1e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009da4:	687a      	ldr	r2, [r7, #4]
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	4413      	add	r3, r2
 8009dae:	881b      	ldrh	r3, [r3, #0]
 8009db0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8009db4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009db8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d01d      	beq.n	8009dfc <USB_ActivateEndpoint+0x654>
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	4413      	add	r3, r2
 8009dca:	881b      	ldrh	r3, [r3, #0]
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009dd6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	009b      	lsls	r3, r3, #2
 8009de2:	441a      	add	r2, r3
 8009de4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8009de8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009dec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009df0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009df4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009dfc:	687a      	ldr	r2, [r7, #4]
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	781b      	ldrb	r3, [r3, #0]
 8009e02:	009b      	lsls	r3, r3, #2
 8009e04:	4413      	add	r3, r2
 8009e06:	881b      	ldrh	r3, [r3, #0]
 8009e08:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8009e0c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009e10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d01d      	beq.n	8009e54 <USB_ActivateEndpoint+0x6ac>
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	009b      	lsls	r3, r3, #2
 8009e20:	4413      	add	r3, r2
 8009e22:	881b      	ldrh	r3, [r3, #0]
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e2e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8009e32:	687a      	ldr	r2, [r7, #4]
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	009b      	lsls	r3, r3, #2
 8009e3a:	441a      	add	r2, r3
 8009e3c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8009e40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e4c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	78db      	ldrb	r3, [r3, #3]
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d024      	beq.n	8009ea6 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	009b      	lsls	r3, r3, #2
 8009e64:	4413      	add	r3, r2
 8009e66:	881b      	ldrh	r3, [r3, #0]
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009e6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e72:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8009e76:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8009e7a:	f083 0320 	eor.w	r3, r3, #32
 8009e7e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	009b      	lsls	r3, r3, #2
 8009e8a:	441a      	add	r2, r3
 8009e8c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8009e90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009e94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009e98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	8013      	strh	r3, [r2, #0]
 8009ea4:	e01d      	b.n	8009ee2 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009ea6:	687a      	ldr	r2, [r7, #4]
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	781b      	ldrb	r3, [r3, #0]
 8009eac:	009b      	lsls	r3, r3, #2
 8009eae:	4413      	add	r3, r2
 8009eb0:	881b      	ldrh	r3, [r3, #0]
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009eb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ebc:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8009ec0:	687a      	ldr	r2, [r7, #4]
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	441a      	add	r2, r3
 8009eca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8009ece:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009ed2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009ed6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009eda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	781b      	ldrb	r3, [r3, #0]
 8009ee8:	009b      	lsls	r3, r3, #2
 8009eea:	4413      	add	r3, r2
 8009eec:	881b      	ldrh	r3, [r3, #0]
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009ef4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ef8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8009efc:	687a      	ldr	r2, [r7, #4]
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	781b      	ldrb	r3, [r3, #0]
 8009f02:	009b      	lsls	r3, r3, #2
 8009f04:	441a      	add	r2, r3
 8009f06:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8009f0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8009f1e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	3774      	adds	r7, #116	@ 0x74
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr
 8009f2e:	bf00      	nop

08009f30 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b08d      	sub	sp, #52	@ 0x34
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	7b1b      	ldrb	r3, [r3, #12]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	f040 808e 	bne.w	800a060 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	785b      	ldrb	r3, [r3, #1]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d044      	beq.n	8009fd6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	781b      	ldrb	r3, [r3, #0]
 8009f52:	009b      	lsls	r3, r3, #2
 8009f54:	4413      	add	r3, r2
 8009f56:	881b      	ldrh	r3, [r3, #0]
 8009f58:	81bb      	strh	r3, [r7, #12]
 8009f5a:	89bb      	ldrh	r3, [r7, #12]
 8009f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d01b      	beq.n	8009f9c <USB_DeactivateEndpoint+0x6c>
 8009f64:	687a      	ldr	r2, [r7, #4]
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	009b      	lsls	r3, r3, #2
 8009f6c:	4413      	add	r3, r2
 8009f6e:	881b      	ldrh	r3, [r3, #0]
 8009f70:	b29b      	uxth	r3, r3
 8009f72:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f7a:	817b      	strh	r3, [r7, #10]
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	009b      	lsls	r3, r3, #2
 8009f84:	441a      	add	r2, r3
 8009f86:	897b      	ldrh	r3, [r7, #10]
 8009f88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f94:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009f9c:	687a      	ldr	r2, [r7, #4]
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	4413      	add	r3, r2
 8009fa6:	881b      	ldrh	r3, [r3, #0]
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009fae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009fb2:	813b      	strh	r3, [r7, #8]
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	781b      	ldrb	r3, [r3, #0]
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	441a      	add	r2, r3
 8009fbe:	893b      	ldrh	r3, [r7, #8]
 8009fc0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009fc4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009fc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009fcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fd0:	b29b      	uxth	r3, r3
 8009fd2:	8013      	strh	r3, [r2, #0]
 8009fd4:	e192      	b.n	800a2fc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	781b      	ldrb	r3, [r3, #0]
 8009fdc:	009b      	lsls	r3, r3, #2
 8009fde:	4413      	add	r3, r2
 8009fe0:	881b      	ldrh	r3, [r3, #0]
 8009fe2:	827b      	strh	r3, [r7, #18]
 8009fe4:	8a7b      	ldrh	r3, [r7, #18]
 8009fe6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d01b      	beq.n	800a026 <USB_DeactivateEndpoint+0xf6>
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	781b      	ldrb	r3, [r3, #0]
 8009ff4:	009b      	lsls	r3, r3, #2
 8009ff6:	4413      	add	r3, r2
 8009ff8:	881b      	ldrh	r3, [r3, #0]
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a000:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a004:	823b      	strh	r3, [r7, #16]
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	441a      	add	r2, r3
 800a010:	8a3b      	ldrh	r3, [r7, #16]
 800a012:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a016:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a01a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a01e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a022:	b29b      	uxth	r3, r3
 800a024:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a026:	687a      	ldr	r2, [r7, #4]
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	009b      	lsls	r3, r3, #2
 800a02e:	4413      	add	r3, r2
 800a030:	881b      	ldrh	r3, [r3, #0]
 800a032:	b29b      	uxth	r3, r3
 800a034:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a038:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a03c:	81fb      	strh	r3, [r7, #14]
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	781b      	ldrb	r3, [r3, #0]
 800a044:	009b      	lsls	r3, r3, #2
 800a046:	441a      	add	r2, r3
 800a048:	89fb      	ldrh	r3, [r7, #14]
 800a04a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a04e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a052:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a056:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	8013      	strh	r3, [r2, #0]
 800a05e:	e14d      	b.n	800a2fc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	785b      	ldrb	r3, [r3, #1]
 800a064:	2b00      	cmp	r3, #0
 800a066:	f040 80a5 	bne.w	800a1b4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	4413      	add	r3, r2
 800a074:	881b      	ldrh	r3, [r3, #0]
 800a076:	843b      	strh	r3, [r7, #32]
 800a078:	8c3b      	ldrh	r3, [r7, #32]
 800a07a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d01b      	beq.n	800a0ba <USB_DeactivateEndpoint+0x18a>
 800a082:	687a      	ldr	r2, [r7, #4]
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	781b      	ldrb	r3, [r3, #0]
 800a088:	009b      	lsls	r3, r3, #2
 800a08a:	4413      	add	r3, r2
 800a08c:	881b      	ldrh	r3, [r3, #0]
 800a08e:	b29b      	uxth	r3, r3
 800a090:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a094:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a098:	83fb      	strh	r3, [r7, #30]
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	009b      	lsls	r3, r3, #2
 800a0a2:	441a      	add	r2, r3
 800a0a4:	8bfb      	ldrh	r3, [r7, #30]
 800a0a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a0aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a0ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a0b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0b6:	b29b      	uxth	r3, r3
 800a0b8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a0ba:	687a      	ldr	r2, [r7, #4]
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	009b      	lsls	r3, r3, #2
 800a0c2:	4413      	add	r3, r2
 800a0c4:	881b      	ldrh	r3, [r3, #0]
 800a0c6:	83bb      	strh	r3, [r7, #28]
 800a0c8:	8bbb      	ldrh	r3, [r7, #28]
 800a0ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d01b      	beq.n	800a10a <USB_DeactivateEndpoint+0x1da>
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	781b      	ldrb	r3, [r3, #0]
 800a0d8:	009b      	lsls	r3, r3, #2
 800a0da:	4413      	add	r3, r2
 800a0dc:	881b      	ldrh	r3, [r3, #0]
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a0e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0e8:	837b      	strh	r3, [r7, #26]
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	441a      	add	r2, r3
 800a0f4:	8b7b      	ldrh	r3, [r7, #26]
 800a0f6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a0fa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a0fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a102:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a106:	b29b      	uxth	r3, r3
 800a108:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a10a:	687a      	ldr	r2, [r7, #4]
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	009b      	lsls	r3, r3, #2
 800a112:	4413      	add	r3, r2
 800a114:	881b      	ldrh	r3, [r3, #0]
 800a116:	b29b      	uxth	r3, r3
 800a118:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a11c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a120:	833b      	strh	r3, [r7, #24]
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	441a      	add	r2, r3
 800a12c:	8b3b      	ldrh	r3, [r7, #24]
 800a12e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a132:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a136:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a13a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a13e:	b29b      	uxth	r3, r3
 800a140:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	781b      	ldrb	r3, [r3, #0]
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	4413      	add	r3, r2
 800a14c:	881b      	ldrh	r3, [r3, #0]
 800a14e:	b29b      	uxth	r3, r3
 800a150:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a154:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a158:	82fb      	strh	r3, [r7, #22]
 800a15a:	687a      	ldr	r2, [r7, #4]
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	781b      	ldrb	r3, [r3, #0]
 800a160:	009b      	lsls	r3, r3, #2
 800a162:	441a      	add	r2, r3
 800a164:	8afb      	ldrh	r3, [r7, #22]
 800a166:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a16a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a16e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a172:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a176:	b29b      	uxth	r3, r3
 800a178:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	009b      	lsls	r3, r3, #2
 800a182:	4413      	add	r3, r2
 800a184:	881b      	ldrh	r3, [r3, #0]
 800a186:	b29b      	uxth	r3, r3
 800a188:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a18c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a190:	82bb      	strh	r3, [r7, #20]
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	009b      	lsls	r3, r3, #2
 800a19a:	441a      	add	r2, r3
 800a19c:	8abb      	ldrh	r3, [r7, #20]
 800a19e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a1a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a1a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a1aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1ae:	b29b      	uxth	r3, r3
 800a1b0:	8013      	strh	r3, [r2, #0]
 800a1b2:	e0a3      	b.n	800a2fc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a1b4:	687a      	ldr	r2, [r7, #4]
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	4413      	add	r3, r2
 800a1be:	881b      	ldrh	r3, [r3, #0]
 800a1c0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800a1c2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a1c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d01b      	beq.n	800a204 <USB_DeactivateEndpoint+0x2d4>
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	781b      	ldrb	r3, [r3, #0]
 800a1d2:	009b      	lsls	r3, r3, #2
 800a1d4:	4413      	add	r3, r2
 800a1d6:	881b      	ldrh	r3, [r3, #0]
 800a1d8:	b29b      	uxth	r3, r3
 800a1da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a1de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1e2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800a1e4:	687a      	ldr	r2, [r7, #4]
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	009b      	lsls	r3, r3, #2
 800a1ec:	441a      	add	r2, r3
 800a1ee:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800a1f0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a1f4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a1f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a1fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a200:	b29b      	uxth	r3, r3
 800a202:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	781b      	ldrb	r3, [r3, #0]
 800a20a:	009b      	lsls	r3, r3, #2
 800a20c:	4413      	add	r3, r2
 800a20e:	881b      	ldrh	r3, [r3, #0]
 800a210:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800a212:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800a214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d01b      	beq.n	800a254 <USB_DeactivateEndpoint+0x324>
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	009b      	lsls	r3, r3, #2
 800a224:	4413      	add	r3, r2
 800a226:	881b      	ldrh	r3, [r3, #0]
 800a228:	b29b      	uxth	r3, r3
 800a22a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a22e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a232:	853b      	strh	r3, [r7, #40]	@ 0x28
 800a234:	687a      	ldr	r2, [r7, #4]
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	009b      	lsls	r3, r3, #2
 800a23c:	441a      	add	r2, r3
 800a23e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a240:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a244:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a248:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a24c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800a250:	b29b      	uxth	r3, r3
 800a252:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	683b      	ldr	r3, [r7, #0]
 800a258:	781b      	ldrb	r3, [r3, #0]
 800a25a:	009b      	lsls	r3, r3, #2
 800a25c:	4413      	add	r3, r2
 800a25e:	881b      	ldrh	r3, [r3, #0]
 800a260:	b29b      	uxth	r3, r3
 800a262:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a266:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a26a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800a26c:	687a      	ldr	r2, [r7, #4]
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	781b      	ldrb	r3, [r3, #0]
 800a272:	009b      	lsls	r3, r3, #2
 800a274:	441a      	add	r2, r3
 800a276:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a278:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a27c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a280:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a284:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a288:	b29b      	uxth	r3, r3
 800a28a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a28c:	687a      	ldr	r2, [r7, #4]
 800a28e:	683b      	ldr	r3, [r7, #0]
 800a290:	781b      	ldrb	r3, [r3, #0]
 800a292:	009b      	lsls	r3, r3, #2
 800a294:	4413      	add	r3, r2
 800a296:	881b      	ldrh	r3, [r3, #0]
 800a298:	b29b      	uxth	r3, r3
 800a29a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a29e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a2a2:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	781b      	ldrb	r3, [r3, #0]
 800a2aa:	009b      	lsls	r3, r3, #2
 800a2ac:	441a      	add	r2, r3
 800a2ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a2b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a2b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a2b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a2bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2c0:	b29b      	uxth	r3, r3
 800a2c2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a2c4:	687a      	ldr	r2, [r7, #4]
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	781b      	ldrb	r3, [r3, #0]
 800a2ca:	009b      	lsls	r3, r3, #2
 800a2cc:	4413      	add	r3, r2
 800a2ce:	881b      	ldrh	r3, [r3, #0]
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a2d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2da:	847b      	strh	r3, [r7, #34]	@ 0x22
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	781b      	ldrb	r3, [r3, #0]
 800a2e2:	009b      	lsls	r3, r3, #2
 800a2e4:	441a      	add	r2, r3
 800a2e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800a2e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a2ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a2f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a2f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a2f8:	b29b      	uxth	r3, r3
 800a2fa:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a2fc:	2300      	movs	r3, #0
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3734      	adds	r7, #52	@ 0x34
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr

0800a30a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a30a:	b580      	push	{r7, lr}
 800a30c:	b0c2      	sub	sp, #264	@ 0x108
 800a30e:	af00      	add	r7, sp, #0
 800a310:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a314:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a318:	6018      	str	r0, [r3, #0]
 800a31a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a31e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a322:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a324:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a328:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	785b      	ldrb	r3, [r3, #1]
 800a330:	2b01      	cmp	r3, #1
 800a332:	f040 86b7 	bne.w	800b0a4 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a336:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a33a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	699a      	ldr	r2, [r3, #24]
 800a342:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a346:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	691b      	ldr	r3, [r3, #16]
 800a34e:	429a      	cmp	r2, r3
 800a350:	d908      	bls.n	800a364 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800a352:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a356:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	691b      	ldr	r3, [r3, #16]
 800a35e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800a362:	e007      	b.n	800a374 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a364:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a368:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	699b      	ldr	r3, [r3, #24]
 800a370:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a378:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	7b1b      	ldrb	r3, [r3, #12]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d13a      	bne.n	800a3fa <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a384:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a388:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	6959      	ldr	r1, [r3, #20]
 800a390:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a394:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	88da      	ldrh	r2, [r3, #6]
 800a39c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3a0:	b29b      	uxth	r3, r3
 800a3a2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a3a6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a3aa:	6800      	ldr	r0, [r0, #0]
 800a3ac:	f001 fc98 	bl	800bce0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a3b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	613b      	str	r3, [r7, #16]
 800a3bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a3ca:	b29b      	uxth	r3, r3
 800a3cc:	461a      	mov	r2, r3
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	4413      	add	r3, r2
 800a3d2:	613b      	str	r3, [r7, #16]
 800a3d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	781b      	ldrb	r3, [r3, #0]
 800a3e0:	00da      	lsls	r2, r3, #3
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	4413      	add	r3, r2
 800a3e6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a3ea:	60fb      	str	r3, [r7, #12]
 800a3ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a3f0:	b29a      	uxth	r2, r3
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	801a      	strh	r2, [r3, #0]
 800a3f6:	f000 be1f 	b.w	800b038 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a3fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a3fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	78db      	ldrb	r3, [r3, #3]
 800a406:	2b02      	cmp	r3, #2
 800a408:	f040 8462 	bne.w	800acd0 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a40c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a410:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	6a1a      	ldr	r2, [r3, #32]
 800a418:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a41c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	691b      	ldr	r3, [r3, #16]
 800a424:	429a      	cmp	r2, r3
 800a426:	f240 83df 	bls.w	800abe8 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a42a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a42e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a432:	681a      	ldr	r2, [r3, #0]
 800a434:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a438:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	781b      	ldrb	r3, [r3, #0]
 800a440:	009b      	lsls	r3, r3, #2
 800a442:	4413      	add	r3, r2
 800a444:	881b      	ldrh	r3, [r3, #0]
 800a446:	b29b      	uxth	r3, r3
 800a448:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a44c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a450:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800a454:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a458:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a45c:	681a      	ldr	r2, [r3, #0]
 800a45e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a462:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	009b      	lsls	r3, r3, #2
 800a46c:	441a      	add	r2, r3
 800a46e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800a472:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a476:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a47a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800a47e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a482:	b29b      	uxth	r3, r3
 800a484:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a486:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a48a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	6a1a      	ldr	r2, [r3, #32]
 800a492:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a496:	1ad2      	subs	r2, r2, r3
 800a498:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a49c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a4a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a4ac:	681a      	ldr	r2, [r3, #0]
 800a4ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	781b      	ldrb	r3, [r3, #0]
 800a4ba:	009b      	lsls	r3, r3, #2
 800a4bc:	4413      	add	r3, r2
 800a4be:	881b      	ldrh	r3, [r3, #0]
 800a4c0:	b29b      	uxth	r3, r3
 800a4c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	f000 81c7 	beq.w	800a85a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a4cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	633b      	str	r3, [r7, #48]	@ 0x30
 800a4d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	785b      	ldrb	r3, [r3, #1]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d177      	bne.n	800a5d8 <USB_EPStartXfer+0x2ce>
 800a4e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a4f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a4f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a502:	b29b      	uxth	r3, r3
 800a504:	461a      	mov	r2, r3
 800a506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a508:	4413      	add	r3, r2
 800a50a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a50c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a510:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	781b      	ldrb	r3, [r3, #0]
 800a518:	00da      	lsls	r2, r3, #3
 800a51a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a51c:	4413      	add	r3, r2
 800a51e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a522:	627b      	str	r3, [r7, #36]	@ 0x24
 800a524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a526:	881b      	ldrh	r3, [r3, #0]
 800a528:	b29b      	uxth	r3, r3
 800a52a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a52e:	b29a      	uxth	r2, r3
 800a530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a532:	801a      	strh	r2, [r3, #0]
 800a534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a538:	2b3e      	cmp	r3, #62	@ 0x3e
 800a53a:	d921      	bls.n	800a580 <USB_EPStartXfer+0x276>
 800a53c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a540:	095b      	lsrs	r3, r3, #5
 800a542:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a546:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a54a:	f003 031f 	and.w	r3, r3, #31
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d104      	bne.n	800a55c <USB_EPStartXfer+0x252>
 800a552:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a556:	3b01      	subs	r3, #1
 800a558:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a55c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a55e:	881b      	ldrh	r3, [r3, #0]
 800a560:	b29a      	uxth	r2, r3
 800a562:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a566:	b29b      	uxth	r3, r3
 800a568:	029b      	lsls	r3, r3, #10
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	4313      	orrs	r3, r2
 800a56e:	b29b      	uxth	r3, r3
 800a570:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a574:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a578:	b29a      	uxth	r2, r3
 800a57a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a57c:	801a      	strh	r2, [r3, #0]
 800a57e:	e050      	b.n	800a622 <USB_EPStartXfer+0x318>
 800a580:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a584:	2b00      	cmp	r3, #0
 800a586:	d10a      	bne.n	800a59e <USB_EPStartXfer+0x294>
 800a588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a58a:	881b      	ldrh	r3, [r3, #0]
 800a58c:	b29b      	uxth	r3, r3
 800a58e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a592:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a596:	b29a      	uxth	r2, r3
 800a598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a59a:	801a      	strh	r2, [r3, #0]
 800a59c:	e041      	b.n	800a622 <USB_EPStartXfer+0x318>
 800a59e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5a2:	085b      	lsrs	r3, r3, #1
 800a5a4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a5a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a5ac:	f003 0301 	and.w	r3, r3, #1
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d004      	beq.n	800a5be <USB_EPStartXfer+0x2b4>
 800a5b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a5b8:	3301      	adds	r3, #1
 800a5ba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a5be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c0:	881b      	ldrh	r3, [r3, #0]
 800a5c2:	b29a      	uxth	r2, r3
 800a5c4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	029b      	lsls	r3, r3, #10
 800a5cc:	b29b      	uxth	r3, r3
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	b29a      	uxth	r2, r3
 800a5d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5d4:	801a      	strh	r2, [r3, #0]
 800a5d6:	e024      	b.n	800a622 <USB_EPStartXfer+0x318>
 800a5d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	785b      	ldrb	r3, [r3, #1]
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d11c      	bne.n	800a622 <USB_EPStartXfer+0x318>
 800a5e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a5ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a5f6:	b29b      	uxth	r3, r3
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5fc:	4413      	add	r3, r2
 800a5fe:	633b      	str	r3, [r7, #48]	@ 0x30
 800a600:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a604:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	00da      	lsls	r2, r3, #3
 800a60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a610:	4413      	add	r3, r2
 800a612:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a616:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a61c:	b29a      	uxth	r2, r3
 800a61e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a620:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a626:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	895b      	ldrh	r3, [r3, #10]
 800a62e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a636:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	6959      	ldr	r1, [r3, #20]
 800a63e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a642:	b29b      	uxth	r3, r3
 800a644:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a648:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a64c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a650:	6800      	ldr	r0, [r0, #0]
 800a652:	f001 fb45 	bl	800bce0 <USB_WritePMA>
            ep->xfer_buff += len;
 800a656:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a65a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	695a      	ldr	r2, [r3, #20]
 800a662:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a666:	441a      	add	r2, r3
 800a668:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a66c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a678:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	6a1a      	ldr	r2, [r3, #32]
 800a680:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a684:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	691b      	ldr	r3, [r3, #16]
 800a68c:	429a      	cmp	r2, r3
 800a68e:	d90f      	bls.n	800a6b0 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800a690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a694:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	6a1a      	ldr	r2, [r3, #32]
 800a69c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a6a0:	1ad2      	subs	r2, r2, r3
 800a6a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	621a      	str	r2, [r3, #32]
 800a6ae:	e00e      	b.n	800a6ce <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800a6b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	6a1b      	ldr	r3, [r3, #32]
 800a6bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800a6c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a6ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	785b      	ldrb	r3, [r3, #1]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d177      	bne.n	800a7ce <USB_EPStartXfer+0x4c4>
 800a6de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	61bb      	str	r3, [r7, #24]
 800a6ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a6ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a6f8:	b29b      	uxth	r3, r3
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	69bb      	ldr	r3, [r7, #24]
 800a6fe:	4413      	add	r3, r2
 800a700:	61bb      	str	r3, [r7, #24]
 800a702:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a706:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	00da      	lsls	r2, r3, #3
 800a710:	69bb      	ldr	r3, [r7, #24]
 800a712:	4413      	add	r3, r2
 800a714:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a718:	617b      	str	r3, [r7, #20]
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	881b      	ldrh	r3, [r3, #0]
 800a71e:	b29b      	uxth	r3, r3
 800a720:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a724:	b29a      	uxth	r2, r3
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	801a      	strh	r2, [r3, #0]
 800a72a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a72e:	2b3e      	cmp	r3, #62	@ 0x3e
 800a730:	d921      	bls.n	800a776 <USB_EPStartXfer+0x46c>
 800a732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a736:	095b      	lsrs	r3, r3, #5
 800a738:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a73c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a740:	f003 031f 	and.w	r3, r3, #31
 800a744:	2b00      	cmp	r3, #0
 800a746:	d104      	bne.n	800a752 <USB_EPStartXfer+0x448>
 800a748:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a74c:	3b01      	subs	r3, #1
 800a74e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	881b      	ldrh	r3, [r3, #0]
 800a756:	b29a      	uxth	r2, r3
 800a758:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a75c:	b29b      	uxth	r3, r3
 800a75e:	029b      	lsls	r3, r3, #10
 800a760:	b29b      	uxth	r3, r3
 800a762:	4313      	orrs	r3, r2
 800a764:	b29b      	uxth	r3, r3
 800a766:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a76a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a76e:	b29a      	uxth	r2, r3
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	801a      	strh	r2, [r3, #0]
 800a774:	e056      	b.n	800a824 <USB_EPStartXfer+0x51a>
 800a776:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d10a      	bne.n	800a794 <USB_EPStartXfer+0x48a>
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	881b      	ldrh	r3, [r3, #0]
 800a782:	b29b      	uxth	r3, r3
 800a784:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a788:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a78c:	b29a      	uxth	r2, r3
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	801a      	strh	r2, [r3, #0]
 800a792:	e047      	b.n	800a824 <USB_EPStartXfer+0x51a>
 800a794:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a798:	085b      	lsrs	r3, r3, #1
 800a79a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a79e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a7a2:	f003 0301 	and.w	r3, r3, #1
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d004      	beq.n	800a7b4 <USB_EPStartXfer+0x4aa>
 800a7aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a7ae:	3301      	adds	r3, #1
 800a7b0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	881b      	ldrh	r3, [r3, #0]
 800a7b8:	b29a      	uxth	r2, r3
 800a7ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a7be:	b29b      	uxth	r3, r3
 800a7c0:	029b      	lsls	r3, r3, #10
 800a7c2:	b29b      	uxth	r3, r3
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	b29a      	uxth	r2, r3
 800a7c8:	697b      	ldr	r3, [r7, #20]
 800a7ca:	801a      	strh	r2, [r3, #0]
 800a7cc:	e02a      	b.n	800a824 <USB_EPStartXfer+0x51a>
 800a7ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	785b      	ldrb	r3, [r3, #1]
 800a7da:	2b01      	cmp	r3, #1
 800a7dc:	d122      	bne.n	800a824 <USB_EPStartXfer+0x51a>
 800a7de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	623b      	str	r3, [r7, #32]
 800a7ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a7ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a7f8:	b29b      	uxth	r3, r3
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	6a3b      	ldr	r3, [r7, #32]
 800a7fe:	4413      	add	r3, r2
 800a800:	623b      	str	r3, [r7, #32]
 800a802:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a806:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	781b      	ldrb	r3, [r3, #0]
 800a80e:	00da      	lsls	r2, r3, #3
 800a810:	6a3b      	ldr	r3, [r7, #32]
 800a812:	4413      	add	r3, r2
 800a814:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a818:	61fb      	str	r3, [r7, #28]
 800a81a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a81e:	b29a      	uxth	r2, r3
 800a820:	69fb      	ldr	r3, [r7, #28]
 800a822:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a824:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a828:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	891b      	ldrh	r3, [r3, #8]
 800a830:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a834:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a838:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	6959      	ldr	r1, [r3, #20]
 800a840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a844:	b29b      	uxth	r3, r3
 800a846:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a84a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a84e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a852:	6800      	ldr	r0, [r0, #0]
 800a854:	f001 fa44 	bl	800bce0 <USB_WritePMA>
 800a858:	e3ee      	b.n	800b038 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a85a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a85e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	785b      	ldrb	r3, [r3, #1]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d177      	bne.n	800a95a <USB_EPStartXfer+0x650>
 800a86a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a86e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a876:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a87a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a884:	b29b      	uxth	r3, r3
 800a886:	461a      	mov	r2, r3
 800a888:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a88a:	4413      	add	r3, r2
 800a88c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a88e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a892:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	00da      	lsls	r2, r3, #3
 800a89c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a89e:	4413      	add	r3, r2
 800a8a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a8a4:	647b      	str	r3, [r7, #68]	@ 0x44
 800a8a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8a8:	881b      	ldrh	r3, [r3, #0]
 800a8aa:	b29b      	uxth	r3, r3
 800a8ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a8b0:	b29a      	uxth	r2, r3
 800a8b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8b4:	801a      	strh	r2, [r3, #0]
 800a8b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8ba:	2b3e      	cmp	r3, #62	@ 0x3e
 800a8bc:	d921      	bls.n	800a902 <USB_EPStartXfer+0x5f8>
 800a8be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8c2:	095b      	lsrs	r3, r3, #5
 800a8c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a8c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a8cc:	f003 031f 	and.w	r3, r3, #31
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d104      	bne.n	800a8de <USB_EPStartXfer+0x5d4>
 800a8d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a8d8:	3b01      	subs	r3, #1
 800a8da:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a8de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8e0:	881b      	ldrh	r3, [r3, #0]
 800a8e2:	b29a      	uxth	r2, r3
 800a8e4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a8e8:	b29b      	uxth	r3, r3
 800a8ea:	029b      	lsls	r3, r3, #10
 800a8ec:	b29b      	uxth	r3, r3
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	b29b      	uxth	r3, r3
 800a8f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8fa:	b29a      	uxth	r2, r3
 800a8fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a8fe:	801a      	strh	r2, [r3, #0]
 800a900:	e056      	b.n	800a9b0 <USB_EPStartXfer+0x6a6>
 800a902:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a906:	2b00      	cmp	r3, #0
 800a908:	d10a      	bne.n	800a920 <USB_EPStartXfer+0x616>
 800a90a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a90c:	881b      	ldrh	r3, [r3, #0]
 800a90e:	b29b      	uxth	r3, r3
 800a910:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a914:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a918:	b29a      	uxth	r2, r3
 800a91a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a91c:	801a      	strh	r2, [r3, #0]
 800a91e:	e047      	b.n	800a9b0 <USB_EPStartXfer+0x6a6>
 800a920:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a924:	085b      	lsrs	r3, r3, #1
 800a926:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a92a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a92e:	f003 0301 	and.w	r3, r3, #1
 800a932:	2b00      	cmp	r3, #0
 800a934:	d004      	beq.n	800a940 <USB_EPStartXfer+0x636>
 800a936:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a93a:	3301      	adds	r3, #1
 800a93c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a940:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a942:	881b      	ldrh	r3, [r3, #0]
 800a944:	b29a      	uxth	r2, r3
 800a946:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a94a:	b29b      	uxth	r3, r3
 800a94c:	029b      	lsls	r3, r3, #10
 800a94e:	b29b      	uxth	r3, r3
 800a950:	4313      	orrs	r3, r2
 800a952:	b29a      	uxth	r2, r3
 800a954:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a956:	801a      	strh	r2, [r3, #0]
 800a958:	e02a      	b.n	800a9b0 <USB_EPStartXfer+0x6a6>
 800a95a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a95e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	785b      	ldrb	r3, [r3, #1]
 800a966:	2b01      	cmp	r3, #1
 800a968:	d122      	bne.n	800a9b0 <USB_EPStartXfer+0x6a6>
 800a96a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a96e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	653b      	str	r3, [r7, #80]	@ 0x50
 800a976:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a97a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a984:	b29b      	uxth	r3, r3
 800a986:	461a      	mov	r2, r3
 800a988:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a98a:	4413      	add	r3, r2
 800a98c:	653b      	str	r3, [r7, #80]	@ 0x50
 800a98e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a992:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	781b      	ldrb	r3, [r3, #0]
 800a99a:	00da      	lsls	r2, r3, #3
 800a99c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a99e:	4413      	add	r3, r2
 800a9a0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a9a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a9a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9aa:	b29a      	uxth	r2, r3
 800a9ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9ae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a9b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	891b      	ldrh	r3, [r3, #8]
 800a9bc:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a9c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	6959      	ldr	r1, [r3, #20]
 800a9cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9d0:	b29b      	uxth	r3, r3
 800a9d2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800a9d6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800a9da:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800a9de:	6800      	ldr	r0, [r0, #0]
 800a9e0:	f001 f97e 	bl	800bce0 <USB_WritePMA>
            ep->xfer_buff += len;
 800a9e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	695a      	ldr	r2, [r3, #20]
 800a9f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800a9f4:	441a      	add	r2, r3
 800a9f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800a9fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800aa02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	6a1a      	ldr	r2, [r3, #32]
 800aa0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	691b      	ldr	r3, [r3, #16]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d90f      	bls.n	800aa3e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800aa1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	6a1a      	ldr	r2, [r3, #32]
 800aa2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aa2e:	1ad2      	subs	r2, r2, r3
 800aa30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	621a      	str	r2, [r3, #32]
 800aa3c:	e00e      	b.n	800aa5c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800aa3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	6a1b      	ldr	r3, [r3, #32]
 800aa4a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800aa4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800aa5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	643b      	str	r3, [r7, #64]	@ 0x40
 800aa68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	785b      	ldrb	r3, [r3, #1]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d177      	bne.n	800ab68 <USB_EPStartXfer+0x85e>
 800aa78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	63bb      	str	r3, [r7, #56]	@ 0x38
 800aa84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aa88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aa92:	b29b      	uxth	r3, r3
 800aa94:	461a      	mov	r2, r3
 800aa96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa98:	4413      	add	r3, r2
 800aa9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800aa9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aaa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	00da      	lsls	r2, r3, #3
 800aaaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaac:	4413      	add	r3, r2
 800aaae:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800aab2:	637b      	str	r3, [r7, #52]	@ 0x34
 800aab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aab6:	881b      	ldrh	r3, [r3, #0]
 800aab8:	b29b      	uxth	r3, r3
 800aaba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aabe:	b29a      	uxth	r2, r3
 800aac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aac2:	801a      	strh	r2, [r3, #0]
 800aac4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aac8:	2b3e      	cmp	r3, #62	@ 0x3e
 800aaca:	d921      	bls.n	800ab10 <USB_EPStartXfer+0x806>
 800aacc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aad0:	095b      	lsrs	r3, r3, #5
 800aad2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800aad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800aada:	f003 031f 	and.w	r3, r3, #31
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d104      	bne.n	800aaec <USB_EPStartXfer+0x7e2>
 800aae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aae6:	3b01      	subs	r3, #1
 800aae8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800aaec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaee:	881b      	ldrh	r3, [r3, #0]
 800aaf0:	b29a      	uxth	r2, r3
 800aaf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800aaf6:	b29b      	uxth	r3, r3
 800aaf8:	029b      	lsls	r3, r3, #10
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	4313      	orrs	r3, r2
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab08:	b29a      	uxth	r2, r3
 800ab0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab0c:	801a      	strh	r2, [r3, #0]
 800ab0e:	e050      	b.n	800abb2 <USB_EPStartXfer+0x8a8>
 800ab10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d10a      	bne.n	800ab2e <USB_EPStartXfer+0x824>
 800ab18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab1a:	881b      	ldrh	r3, [r3, #0]
 800ab1c:	b29b      	uxth	r3, r3
 800ab1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab26:	b29a      	uxth	r2, r3
 800ab28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab2a:	801a      	strh	r2, [r3, #0]
 800ab2c:	e041      	b.n	800abb2 <USB_EPStartXfer+0x8a8>
 800ab2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab32:	085b      	lsrs	r3, r3, #1
 800ab34:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ab38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ab3c:	f003 0301 	and.w	r3, r3, #1
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d004      	beq.n	800ab4e <USB_EPStartXfer+0x844>
 800ab44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab48:	3301      	adds	r3, #1
 800ab4a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ab4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab50:	881b      	ldrh	r3, [r3, #0]
 800ab52:	b29a      	uxth	r2, r3
 800ab54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ab58:	b29b      	uxth	r3, r3
 800ab5a:	029b      	lsls	r3, r3, #10
 800ab5c:	b29b      	uxth	r3, r3
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	b29a      	uxth	r2, r3
 800ab62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab64:	801a      	strh	r2, [r3, #0]
 800ab66:	e024      	b.n	800abb2 <USB_EPStartXfer+0x8a8>
 800ab68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	785b      	ldrb	r3, [r3, #1]
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d11c      	bne.n	800abb2 <USB_EPStartXfer+0x8a8>
 800ab78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab7c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	461a      	mov	r2, r3
 800ab8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ab8c:	4413      	add	r3, r2
 800ab8e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ab90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ab94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	00da      	lsls	r2, r3, #3
 800ab9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800aba0:	4413      	add	r3, r2
 800aba2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800aba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abac:	b29a      	uxth	r2, r3
 800abae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abb0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800abb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	895b      	ldrh	r3, [r3, #10]
 800abbe:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800abc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abc6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	6959      	ldr	r1, [r3, #20]
 800abce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800abd2:	b29b      	uxth	r3, r3
 800abd4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800abd8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800abdc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800abe0:	6800      	ldr	r0, [r0, #0]
 800abe2:	f001 f87d 	bl	800bce0 <USB_WritePMA>
 800abe6:	e227      	b.n	800b038 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800abe8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	6a1b      	ldr	r3, [r3, #32]
 800abf4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800abf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800abfc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	781b      	ldrb	r3, [r3, #0]
 800ac0e:	009b      	lsls	r3, r3, #2
 800ac10:	4413      	add	r3, r2
 800ac12:	881b      	ldrh	r3, [r3, #0]
 800ac14:	b29b      	uxth	r3, r3
 800ac16:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800ac1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ac1e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800ac22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac30:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	781b      	ldrb	r3, [r3, #0]
 800ac38:	009b      	lsls	r3, r3, #2
 800ac3a:	441a      	add	r2, r3
 800ac3c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800ac40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ac44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ac48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac50:	b29b      	uxth	r3, r3
 800ac52:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ac54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ac60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ac6e:	b29b      	uxth	r3, r3
 800ac70:	461a      	mov	r2, r3
 800ac72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac74:	4413      	add	r3, r2
 800ac76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ac78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	00da      	lsls	r2, r3, #3
 800ac86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac88:	4413      	add	r3, r2
 800ac8a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ac8e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ac90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ac94:	b29a      	uxth	r2, r3
 800ac96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ac98:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ac9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ac9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	891b      	ldrh	r3, [r3, #8]
 800aca6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800acaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	6959      	ldr	r1, [r3, #20]
 800acb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800acba:	b29b      	uxth	r3, r3
 800acbc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800acc0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800acc4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800acc8:	6800      	ldr	r0, [r0, #0]
 800acca:	f001 f809 	bl	800bce0 <USB_WritePMA>
 800acce:	e1b3      	b.n	800b038 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800acd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	6a1a      	ldr	r2, [r3, #32]
 800acdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ace0:	1ad2      	subs	r2, r2, r3
 800ace2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ace6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800acee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acf2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800acf6:	681a      	ldr	r2, [r3, #0]
 800acf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800acfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	009b      	lsls	r3, r3, #2
 800ad06:	4413      	add	r3, r2
 800ad08:	881b      	ldrh	r3, [r3, #0]
 800ad0a:	b29b      	uxth	r3, r3
 800ad0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	f000 80c6 	beq.w	800aea2 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ad16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	673b      	str	r3, [r7, #112]	@ 0x70
 800ad22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	785b      	ldrb	r3, [r3, #1]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d177      	bne.n	800ae22 <USB_EPStartXfer+0xb18>
 800ad32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ad3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ad4c:	b29b      	uxth	r3, r3
 800ad4e:	461a      	mov	r2, r3
 800ad50:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ad52:	4413      	add	r3, r2
 800ad54:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ad56:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ad5a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	781b      	ldrb	r3, [r3, #0]
 800ad62:	00da      	lsls	r2, r3, #3
 800ad64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ad66:	4413      	add	r3, r2
 800ad68:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ad6c:	667b      	str	r3, [r7, #100]	@ 0x64
 800ad6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad70:	881b      	ldrh	r3, [r3, #0]
 800ad72:	b29b      	uxth	r3, r3
 800ad74:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad78:	b29a      	uxth	r2, r3
 800ad7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad7c:	801a      	strh	r2, [r3, #0]
 800ad7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad82:	2b3e      	cmp	r3, #62	@ 0x3e
 800ad84:	d921      	bls.n	800adca <USB_EPStartXfer+0xac0>
 800ad86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad8a:	095b      	lsrs	r3, r3, #5
 800ad8c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ad90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad94:	f003 031f 	and.w	r3, r3, #31
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d104      	bne.n	800ada6 <USB_EPStartXfer+0xa9c>
 800ad9c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ada0:	3b01      	subs	r3, #1
 800ada2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ada6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ada8:	881b      	ldrh	r3, [r3, #0]
 800adaa:	b29a      	uxth	r2, r3
 800adac:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800adb0:	b29b      	uxth	r3, r3
 800adb2:	029b      	lsls	r3, r3, #10
 800adb4:	b29b      	uxth	r3, r3
 800adb6:	4313      	orrs	r3, r2
 800adb8:	b29b      	uxth	r3, r3
 800adba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800adbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adc2:	b29a      	uxth	r2, r3
 800adc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800adc6:	801a      	strh	r2, [r3, #0]
 800adc8:	e050      	b.n	800ae6c <USB_EPStartXfer+0xb62>
 800adca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adce:	2b00      	cmp	r3, #0
 800add0:	d10a      	bne.n	800ade8 <USB_EPStartXfer+0xade>
 800add2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800add4:	881b      	ldrh	r3, [r3, #0]
 800add6:	b29b      	uxth	r3, r3
 800add8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800addc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ade0:	b29a      	uxth	r2, r3
 800ade2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ade4:	801a      	strh	r2, [r3, #0]
 800ade6:	e041      	b.n	800ae6c <USB_EPStartXfer+0xb62>
 800ade8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adec:	085b      	lsrs	r3, r3, #1
 800adee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800adf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800adf6:	f003 0301 	and.w	r3, r3, #1
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d004      	beq.n	800ae08 <USB_EPStartXfer+0xafe>
 800adfe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ae02:	3301      	adds	r3, #1
 800ae04:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ae08:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ae0a:	881b      	ldrh	r3, [r3, #0]
 800ae0c:	b29a      	uxth	r2, r3
 800ae0e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	029b      	lsls	r3, r3, #10
 800ae16:	b29b      	uxth	r3, r3
 800ae18:	4313      	orrs	r3, r2
 800ae1a:	b29a      	uxth	r2, r3
 800ae1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ae1e:	801a      	strh	r2, [r3, #0]
 800ae20:	e024      	b.n	800ae6c <USB_EPStartXfer+0xb62>
 800ae22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	785b      	ldrb	r3, [r3, #1]
 800ae2e:	2b01      	cmp	r3, #1
 800ae30:	d11c      	bne.n	800ae6c <USB_EPStartXfer+0xb62>
 800ae32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae36:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ae40:	b29b      	uxth	r3, r3
 800ae42:	461a      	mov	r2, r3
 800ae44:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ae46:	4413      	add	r3, r2
 800ae48:	673b      	str	r3, [r7, #112]	@ 0x70
 800ae4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	00da      	lsls	r2, r3, #3
 800ae58:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ae5a:	4413      	add	r3, r2
 800ae5c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ae60:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ae62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae66:	b29a      	uxth	r2, r3
 800ae68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ae6a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800ae6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	895b      	ldrh	r3, [r3, #10]
 800ae78:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ae7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ae80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	6959      	ldr	r1, [r3, #20]
 800ae88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ae8c:	b29b      	uxth	r3, r3
 800ae8e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ae92:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ae96:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ae9a:	6800      	ldr	r0, [r0, #0]
 800ae9c:	f000 ff20 	bl	800bce0 <USB_WritePMA>
 800aea0:	e0ca      	b.n	800b038 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800aea2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aea6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	785b      	ldrb	r3, [r3, #1]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d177      	bne.n	800afa2 <USB_EPStartXfer+0xc98>
 800aeb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aeb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800aebe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aec2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800aecc:	b29b      	uxth	r3, r3
 800aece:	461a      	mov	r2, r3
 800aed0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800aed2:	4413      	add	r3, r2
 800aed4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800aed6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800aeda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	781b      	ldrb	r3, [r3, #0]
 800aee2:	00da      	lsls	r2, r3, #3
 800aee4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800aee6:	4413      	add	r3, r2
 800aee8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800aeec:	67bb      	str	r3, [r7, #120]	@ 0x78
 800aeee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aef0:	881b      	ldrh	r3, [r3, #0]
 800aef2:	b29b      	uxth	r3, r3
 800aef4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aef8:	b29a      	uxth	r2, r3
 800aefa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800aefc:	801a      	strh	r2, [r3, #0]
 800aefe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af02:	2b3e      	cmp	r3, #62	@ 0x3e
 800af04:	d921      	bls.n	800af4a <USB_EPStartXfer+0xc40>
 800af06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af0a:	095b      	lsrs	r3, r3, #5
 800af0c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800af10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af14:	f003 031f 	and.w	r3, r3, #31
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d104      	bne.n	800af26 <USB_EPStartXfer+0xc1c>
 800af1c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800af20:	3b01      	subs	r3, #1
 800af22:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800af26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af28:	881b      	ldrh	r3, [r3, #0]
 800af2a:	b29a      	uxth	r2, r3
 800af2c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800af30:	b29b      	uxth	r3, r3
 800af32:	029b      	lsls	r3, r3, #10
 800af34:	b29b      	uxth	r3, r3
 800af36:	4313      	orrs	r3, r2
 800af38:	b29b      	uxth	r3, r3
 800af3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af42:	b29a      	uxth	r2, r3
 800af44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af46:	801a      	strh	r2, [r3, #0]
 800af48:	e05c      	b.n	800b004 <USB_EPStartXfer+0xcfa>
 800af4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d10a      	bne.n	800af68 <USB_EPStartXfer+0xc5e>
 800af52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af54:	881b      	ldrh	r3, [r3, #0]
 800af56:	b29b      	uxth	r3, r3
 800af58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af60:	b29a      	uxth	r2, r3
 800af62:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af64:	801a      	strh	r2, [r3, #0]
 800af66:	e04d      	b.n	800b004 <USB_EPStartXfer+0xcfa>
 800af68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af6c:	085b      	lsrs	r3, r3, #1
 800af6e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800af72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800af76:	f003 0301 	and.w	r3, r3, #1
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d004      	beq.n	800af88 <USB_EPStartXfer+0xc7e>
 800af7e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800af82:	3301      	adds	r3, #1
 800af84:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800af88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af8a:	881b      	ldrh	r3, [r3, #0]
 800af8c:	b29a      	uxth	r2, r3
 800af8e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800af92:	b29b      	uxth	r3, r3
 800af94:	029b      	lsls	r3, r3, #10
 800af96:	b29b      	uxth	r3, r3
 800af98:	4313      	orrs	r3, r2
 800af9a:	b29a      	uxth	r2, r3
 800af9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af9e:	801a      	strh	r2, [r3, #0]
 800afa0:	e030      	b.n	800b004 <USB_EPStartXfer+0xcfa>
 800afa2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afa6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	785b      	ldrb	r3, [r3, #1]
 800afae:	2b01      	cmp	r3, #1
 800afb0:	d128      	bne.n	800b004 <USB_EPStartXfer+0xcfa>
 800afb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afb6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800afc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afc4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800afce:	b29b      	uxth	r3, r3
 800afd0:	461a      	mov	r2, r3
 800afd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800afd6:	4413      	add	r3, r2
 800afd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800afdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800afe0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	781b      	ldrb	r3, [r3, #0]
 800afe8:	00da      	lsls	r2, r3, #3
 800afea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800afee:	4413      	add	r3, r2
 800aff0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800aff4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800aff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800affc:	b29a      	uxth	r2, r3
 800affe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b002:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b004:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b008:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	891b      	ldrh	r3, [r3, #8]
 800b010:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b014:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b018:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	6959      	ldr	r1, [r3, #20]
 800b020:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b024:	b29b      	uxth	r3, r3
 800b026:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800b02a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800b02e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800b032:	6800      	ldr	r0, [r0, #0]
 800b034:	f000 fe54 	bl	800bce0 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b038:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b03c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b040:	681a      	ldr	r2, [r3, #0]
 800b042:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b046:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	781b      	ldrb	r3, [r3, #0]
 800b04e:	009b      	lsls	r3, r3, #2
 800b050:	4413      	add	r3, r2
 800b052:	881b      	ldrh	r3, [r3, #0]
 800b054:	b29b      	uxth	r3, r3
 800b056:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b05a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b05e:	817b      	strh	r3, [r7, #10]
 800b060:	897b      	ldrh	r3, [r7, #10]
 800b062:	f083 0310 	eor.w	r3, r3, #16
 800b066:	817b      	strh	r3, [r7, #10]
 800b068:	897b      	ldrh	r3, [r7, #10]
 800b06a:	f083 0320 	eor.w	r3, r3, #32
 800b06e:	817b      	strh	r3, [r7, #10]
 800b070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b074:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b078:	681a      	ldr	r2, [r3, #0]
 800b07a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b07e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	781b      	ldrb	r3, [r3, #0]
 800b086:	009b      	lsls	r3, r3, #2
 800b088:	441a      	add	r2, r3
 800b08a:	897b      	ldrh	r3, [r7, #10]
 800b08c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b090:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b094:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b098:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b09c:	b29b      	uxth	r3, r3
 800b09e:	8013      	strh	r3, [r2, #0]
 800b0a0:	f000 bcde 	b.w	800ba60 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b0a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	7b1b      	ldrb	r3, [r3, #12]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	f040 80bb 	bne.w	800b22c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b0b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	699a      	ldr	r2, [r3, #24]
 800b0c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	691b      	ldr	r3, [r3, #16]
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d917      	bls.n	800b102 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800b0d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	691b      	ldr	r3, [r3, #16]
 800b0de:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800b0e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	699a      	ldr	r2, [r3, #24]
 800b0ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b0f2:	1ad2      	subs	r2, r2, r3
 800b0f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b0f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	619a      	str	r2, [r3, #24]
 800b100:	e00e      	b.n	800b120 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800b102:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b106:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	699b      	ldr	r3, [r3, #24]
 800b10e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800b112:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b116:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	2200      	movs	r2, #0
 800b11e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b120:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b124:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b12e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b132:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b13c:	b29b      	uxth	r3, r3
 800b13e:	461a      	mov	r2, r3
 800b140:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b144:	4413      	add	r3, r2
 800b146:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800b14a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b14e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	781b      	ldrb	r3, [r3, #0]
 800b156:	00da      	lsls	r2, r3, #3
 800b158:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800b15c:	4413      	add	r3, r2
 800b15e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b162:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800b166:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b16a:	881b      	ldrh	r3, [r3, #0]
 800b16c:	b29b      	uxth	r3, r3
 800b16e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b172:	b29a      	uxth	r2, r3
 800b174:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b178:	801a      	strh	r2, [r3, #0]
 800b17a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b17e:	2b3e      	cmp	r3, #62	@ 0x3e
 800b180:	d924      	bls.n	800b1cc <USB_EPStartXfer+0xec2>
 800b182:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b186:	095b      	lsrs	r3, r3, #5
 800b188:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b18c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b190:	f003 031f 	and.w	r3, r3, #31
 800b194:	2b00      	cmp	r3, #0
 800b196:	d104      	bne.n	800b1a2 <USB_EPStartXfer+0xe98>
 800b198:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b19c:	3b01      	subs	r3, #1
 800b19e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b1a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b1a6:	881b      	ldrh	r3, [r3, #0]
 800b1a8:	b29a      	uxth	r2, r3
 800b1aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b1ae:	b29b      	uxth	r3, r3
 800b1b0:	029b      	lsls	r3, r3, #10
 800b1b2:	b29b      	uxth	r3, r3
 800b1b4:	4313      	orrs	r3, r2
 800b1b6:	b29b      	uxth	r3, r3
 800b1b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1c0:	b29a      	uxth	r2, r3
 800b1c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b1c6:	801a      	strh	r2, [r3, #0]
 800b1c8:	f000 bc10 	b.w	800b9ec <USB_EPStartXfer+0x16e2>
 800b1cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d10c      	bne.n	800b1ee <USB_EPStartXfer+0xee4>
 800b1d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b1d8:	881b      	ldrh	r3, [r3, #0]
 800b1da:	b29b      	uxth	r3, r3
 800b1dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b1e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b1e4:	b29a      	uxth	r2, r3
 800b1e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b1ea:	801a      	strh	r2, [r3, #0]
 800b1ec:	e3fe      	b.n	800b9ec <USB_EPStartXfer+0x16e2>
 800b1ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1f2:	085b      	lsrs	r3, r3, #1
 800b1f4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b1f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b1fc:	f003 0301 	and.w	r3, r3, #1
 800b200:	2b00      	cmp	r3, #0
 800b202:	d004      	beq.n	800b20e <USB_EPStartXfer+0xf04>
 800b204:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b208:	3301      	adds	r3, #1
 800b20a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800b20e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b212:	881b      	ldrh	r3, [r3, #0]
 800b214:	b29a      	uxth	r2, r3
 800b216:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800b21a:	b29b      	uxth	r3, r3
 800b21c:	029b      	lsls	r3, r3, #10
 800b21e:	b29b      	uxth	r3, r3
 800b220:	4313      	orrs	r3, r2
 800b222:	b29a      	uxth	r2, r3
 800b224:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b228:	801a      	strh	r2, [r3, #0]
 800b22a:	e3df      	b.n	800b9ec <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b22c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b230:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	78db      	ldrb	r3, [r3, #3]
 800b238:	2b02      	cmp	r3, #2
 800b23a:	f040 8218 	bne.w	800b66e <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b23e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b242:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	785b      	ldrb	r3, [r3, #1]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	f040 809d 	bne.w	800b38a <USB_EPStartXfer+0x1080>
 800b250:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b254:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b25e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b262:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b26c:	b29b      	uxth	r3, r3
 800b26e:	461a      	mov	r2, r3
 800b270:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b274:	4413      	add	r3, r2
 800b276:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b27a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b27e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	781b      	ldrb	r3, [r3, #0]
 800b286:	00da      	lsls	r2, r3, #3
 800b288:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b28c:	4413      	add	r3, r2
 800b28e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b292:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800b296:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b29a:	881b      	ldrh	r3, [r3, #0]
 800b29c:	b29b      	uxth	r3, r3
 800b29e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b2a2:	b29a      	uxth	r2, r3
 800b2a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b2a8:	801a      	strh	r2, [r3, #0]
 800b2aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	691b      	ldr	r3, [r3, #16]
 800b2b6:	2b3e      	cmp	r3, #62	@ 0x3e
 800b2b8:	d92b      	bls.n	800b312 <USB_EPStartXfer+0x1008>
 800b2ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	691b      	ldr	r3, [r3, #16]
 800b2c6:	095b      	lsrs	r3, r3, #5
 800b2c8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b2cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b2d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	691b      	ldr	r3, [r3, #16]
 800b2d8:	f003 031f 	and.w	r3, r3, #31
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d104      	bne.n	800b2ea <USB_EPStartXfer+0xfe0>
 800b2e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2e4:	3b01      	subs	r3, #1
 800b2e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b2ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b2ee:	881b      	ldrh	r3, [r3, #0]
 800b2f0:	b29a      	uxth	r2, r3
 800b2f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b2f6:	b29b      	uxth	r3, r3
 800b2f8:	029b      	lsls	r3, r3, #10
 800b2fa:	b29b      	uxth	r3, r3
 800b2fc:	4313      	orrs	r3, r2
 800b2fe:	b29b      	uxth	r3, r3
 800b300:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b304:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b308:	b29a      	uxth	r2, r3
 800b30a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b30e:	801a      	strh	r2, [r3, #0]
 800b310:	e070      	b.n	800b3f4 <USB_EPStartXfer+0x10ea>
 800b312:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b316:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	691b      	ldr	r3, [r3, #16]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d10c      	bne.n	800b33c <USB_EPStartXfer+0x1032>
 800b322:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b326:	881b      	ldrh	r3, [r3, #0]
 800b328:	b29b      	uxth	r3, r3
 800b32a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b32e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b332:	b29a      	uxth	r2, r3
 800b334:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b338:	801a      	strh	r2, [r3, #0]
 800b33a:	e05b      	b.n	800b3f4 <USB_EPStartXfer+0x10ea>
 800b33c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b340:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	691b      	ldr	r3, [r3, #16]
 800b348:	085b      	lsrs	r3, r3, #1
 800b34a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b34e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b352:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	691b      	ldr	r3, [r3, #16]
 800b35a:	f003 0301 	and.w	r3, r3, #1
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d004      	beq.n	800b36c <USB_EPStartXfer+0x1062>
 800b362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b366:	3301      	adds	r3, #1
 800b368:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800b36c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b370:	881b      	ldrh	r3, [r3, #0]
 800b372:	b29a      	uxth	r2, r3
 800b374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b378:	b29b      	uxth	r3, r3
 800b37a:	029b      	lsls	r3, r3, #10
 800b37c:	b29b      	uxth	r3, r3
 800b37e:	4313      	orrs	r3, r2
 800b380:	b29a      	uxth	r2, r3
 800b382:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800b386:	801a      	strh	r2, [r3, #0]
 800b388:	e034      	b.n	800b3f4 <USB_EPStartXfer+0x10ea>
 800b38a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b38e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	785b      	ldrb	r3, [r3, #1]
 800b396:	2b01      	cmp	r3, #1
 800b398:	d12c      	bne.n	800b3f4 <USB_EPStartXfer+0x10ea>
 800b39a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b39e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b3a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b3b6:	b29b      	uxth	r3, r3
 800b3b8:	461a      	mov	r2, r3
 800b3ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b3be:	4413      	add	r3, r2
 800b3c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b3c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	781b      	ldrb	r3, [r3, #0]
 800b3d0:	00da      	lsls	r2, r3, #3
 800b3d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800b3d6:	4413      	add	r3, r2
 800b3d8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b3dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b3e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	691b      	ldr	r3, [r3, #16]
 800b3ec:	b29a      	uxth	r2, r3
 800b3ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b3f2:	801a      	strh	r2, [r3, #0]
 800b3f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b3f8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b402:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b406:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	785b      	ldrb	r3, [r3, #1]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	f040 809d 	bne.w	800b54e <USB_EPStartXfer+0x1244>
 800b414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b418:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b422:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b426:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b430:	b29b      	uxth	r3, r3
 800b432:	461a      	mov	r2, r3
 800b434:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b438:	4413      	add	r3, r2
 800b43a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800b43e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b442:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	781b      	ldrb	r3, [r3, #0]
 800b44a:	00da      	lsls	r2, r3, #3
 800b44c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b450:	4413      	add	r3, r2
 800b452:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b456:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800b45a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b45e:	881b      	ldrh	r3, [r3, #0]
 800b460:	b29b      	uxth	r3, r3
 800b462:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b466:	b29a      	uxth	r2, r3
 800b468:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b46c:	801a      	strh	r2, [r3, #0]
 800b46e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b472:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	691b      	ldr	r3, [r3, #16]
 800b47a:	2b3e      	cmp	r3, #62	@ 0x3e
 800b47c:	d92b      	bls.n	800b4d6 <USB_EPStartXfer+0x11cc>
 800b47e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b482:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	691b      	ldr	r3, [r3, #16]
 800b48a:	095b      	lsrs	r3, r3, #5
 800b48c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b490:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b494:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	691b      	ldr	r3, [r3, #16]
 800b49c:	f003 031f 	and.w	r3, r3, #31
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d104      	bne.n	800b4ae <USB_EPStartXfer+0x11a4>
 800b4a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b4a8:	3b01      	subs	r3, #1
 800b4aa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b4ae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b4b2:	881b      	ldrh	r3, [r3, #0]
 800b4b4:	b29a      	uxth	r2, r3
 800b4b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	029b      	lsls	r3, r3, #10
 800b4be:	b29b      	uxth	r3, r3
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	b29b      	uxth	r3, r3
 800b4c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4cc:	b29a      	uxth	r2, r3
 800b4ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b4d2:	801a      	strh	r2, [r3, #0]
 800b4d4:	e069      	b.n	800b5aa <USB_EPStartXfer+0x12a0>
 800b4d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b4da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	691b      	ldr	r3, [r3, #16]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d10c      	bne.n	800b500 <USB_EPStartXfer+0x11f6>
 800b4e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b4ea:	881b      	ldrh	r3, [r3, #0]
 800b4ec:	b29b      	uxth	r3, r3
 800b4ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4f6:	b29a      	uxth	r2, r3
 800b4f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b4fc:	801a      	strh	r2, [r3, #0]
 800b4fe:	e054      	b.n	800b5aa <USB_EPStartXfer+0x12a0>
 800b500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b504:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	691b      	ldr	r3, [r3, #16]
 800b50c:	085b      	lsrs	r3, r3, #1
 800b50e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b512:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b516:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	691b      	ldr	r3, [r3, #16]
 800b51e:	f003 0301 	and.w	r3, r3, #1
 800b522:	2b00      	cmp	r3, #0
 800b524:	d004      	beq.n	800b530 <USB_EPStartXfer+0x1226>
 800b526:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b52a:	3301      	adds	r3, #1
 800b52c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800b530:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b534:	881b      	ldrh	r3, [r3, #0]
 800b536:	b29a      	uxth	r2, r3
 800b538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b53c:	b29b      	uxth	r3, r3
 800b53e:	029b      	lsls	r3, r3, #10
 800b540:	b29b      	uxth	r3, r3
 800b542:	4313      	orrs	r3, r2
 800b544:	b29a      	uxth	r2, r3
 800b546:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b54a:	801a      	strh	r2, [r3, #0]
 800b54c:	e02d      	b.n	800b5aa <USB_EPStartXfer+0x12a0>
 800b54e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b552:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	785b      	ldrb	r3, [r3, #1]
 800b55a:	2b01      	cmp	r3, #1
 800b55c:	d125      	bne.n	800b5aa <USB_EPStartXfer+0x12a0>
 800b55e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b562:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b56c:	b29b      	uxth	r3, r3
 800b56e:	461a      	mov	r2, r3
 800b570:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b574:	4413      	add	r3, r2
 800b576:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800b57a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b57e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	781b      	ldrb	r3, [r3, #0]
 800b586:	00da      	lsls	r2, r3, #3
 800b588:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800b58c:	4413      	add	r3, r2
 800b58e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b592:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800b596:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b59a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	691b      	ldr	r3, [r3, #16]
 800b5a2:	b29a      	uxth	r2, r3
 800b5a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b5a8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b5aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	69db      	ldr	r3, [r3, #28]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	f000 8218 	beq.w	800b9ec <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b5bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b5c4:	681a      	ldr	r2, [r3, #0]
 800b5c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b5ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	781b      	ldrb	r3, [r3, #0]
 800b5d2:	009b      	lsls	r3, r3, #2
 800b5d4:	4413      	add	r3, r2
 800b5d6:	881b      	ldrh	r3, [r3, #0]
 800b5d8:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b5dc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b5e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d005      	beq.n	800b5f4 <USB_EPStartXfer+0x12ea>
 800b5e8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b5ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d10d      	bne.n	800b610 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b5f4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b5f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	f040 81f5 	bne.w	800b9ec <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b602:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800b606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	f040 81ee 	bne.w	800b9ec <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b610:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b614:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b618:	681a      	ldr	r2, [r3, #0]
 800b61a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b61e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	781b      	ldrb	r3, [r3, #0]
 800b626:	009b      	lsls	r3, r3, #2
 800b628:	4413      	add	r3, r2
 800b62a:	881b      	ldrh	r3, [r3, #0]
 800b62c:	b29b      	uxth	r3, r3
 800b62e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b632:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b636:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800b63a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b63e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b642:	681a      	ldr	r2, [r3, #0]
 800b644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b648:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	781b      	ldrb	r3, [r3, #0]
 800b650:	009b      	lsls	r3, r3, #2
 800b652:	441a      	add	r2, r3
 800b654:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800b658:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800b65c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800b660:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b664:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800b668:	b29b      	uxth	r3, r3
 800b66a:	8013      	strh	r3, [r2, #0]
 800b66c:	e1be      	b.n	800b9ec <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b66e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b672:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	78db      	ldrb	r3, [r3, #3]
 800b67a:	2b01      	cmp	r3, #1
 800b67c:	f040 81b4 	bne.w	800b9e8 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b680:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b684:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	699a      	ldr	r2, [r3, #24]
 800b68c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b690:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	691b      	ldr	r3, [r3, #16]
 800b698:	429a      	cmp	r2, r3
 800b69a:	d917      	bls.n	800b6cc <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800b69c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	691b      	ldr	r3, [r3, #16]
 800b6a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800b6ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	699a      	ldr	r2, [r3, #24]
 800b6b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b6bc:	1ad2      	subs	r2, r2, r3
 800b6be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	619a      	str	r2, [r3, #24]
 800b6ca:	e00e      	b.n	800b6ea <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800b6cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	699b      	ldr	r3, [r3, #24]
 800b6d8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800b6dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b6ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b6ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	785b      	ldrb	r3, [r3, #1]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	f040 8085 	bne.w	800b806 <USB_EPStartXfer+0x14fc>
 800b6fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b700:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b70a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b70e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b718:	b29b      	uxth	r3, r3
 800b71a:	461a      	mov	r2, r3
 800b71c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b720:	4413      	add	r3, r2
 800b722:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800b726:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b72a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	781b      	ldrb	r3, [r3, #0]
 800b732:	00da      	lsls	r2, r3, #3
 800b734:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800b738:	4413      	add	r3, r2
 800b73a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b73e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b742:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b746:	881b      	ldrh	r3, [r3, #0]
 800b748:	b29b      	uxth	r3, r3
 800b74a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b74e:	b29a      	uxth	r2, r3
 800b750:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b754:	801a      	strh	r2, [r3, #0]
 800b756:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b75a:	2b3e      	cmp	r3, #62	@ 0x3e
 800b75c:	d923      	bls.n	800b7a6 <USB_EPStartXfer+0x149c>
 800b75e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b762:	095b      	lsrs	r3, r3, #5
 800b764:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b768:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b76c:	f003 031f 	and.w	r3, r3, #31
 800b770:	2b00      	cmp	r3, #0
 800b772:	d104      	bne.n	800b77e <USB_EPStartXfer+0x1474>
 800b774:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b778:	3b01      	subs	r3, #1
 800b77a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b77e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b782:	881b      	ldrh	r3, [r3, #0]
 800b784:	b29a      	uxth	r2, r3
 800b786:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	029b      	lsls	r3, r3, #10
 800b78e:	b29b      	uxth	r3, r3
 800b790:	4313      	orrs	r3, r2
 800b792:	b29b      	uxth	r3, r3
 800b794:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b798:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b79c:	b29a      	uxth	r2, r3
 800b79e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b7a2:	801a      	strh	r2, [r3, #0]
 800b7a4:	e060      	b.n	800b868 <USB_EPStartXfer+0x155e>
 800b7a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d10c      	bne.n	800b7c8 <USB_EPStartXfer+0x14be>
 800b7ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b7b2:	881b      	ldrh	r3, [r3, #0]
 800b7b4:	b29b      	uxth	r3, r3
 800b7b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7be:	b29a      	uxth	r2, r3
 800b7c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b7c4:	801a      	strh	r2, [r3, #0]
 800b7c6:	e04f      	b.n	800b868 <USB_EPStartXfer+0x155e>
 800b7c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7cc:	085b      	lsrs	r3, r3, #1
 800b7ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b7d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b7d6:	f003 0301 	and.w	r3, r3, #1
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d004      	beq.n	800b7e8 <USB_EPStartXfer+0x14de>
 800b7de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b7e2:	3301      	adds	r3, #1
 800b7e4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800b7e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b7ec:	881b      	ldrh	r3, [r3, #0]
 800b7ee:	b29a      	uxth	r2, r3
 800b7f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	029b      	lsls	r3, r3, #10
 800b7f8:	b29b      	uxth	r3, r3
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	b29a      	uxth	r2, r3
 800b7fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b802:	801a      	strh	r2, [r3, #0]
 800b804:	e030      	b.n	800b868 <USB_EPStartXfer+0x155e>
 800b806:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b80a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	785b      	ldrb	r3, [r3, #1]
 800b812:	2b01      	cmp	r3, #1
 800b814:	d128      	bne.n	800b868 <USB_EPStartXfer+0x155e>
 800b816:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b81a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b824:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b828:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b832:	b29b      	uxth	r3, r3
 800b834:	461a      	mov	r2, r3
 800b836:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b83a:	4413      	add	r3, r2
 800b83c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800b840:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b844:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	00da      	lsls	r2, r3, #3
 800b84e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b852:	4413      	add	r3, r2
 800b854:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800b858:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b85c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b860:	b29a      	uxth	r2, r3
 800b862:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800b866:	801a      	strh	r2, [r3, #0]
 800b868:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b86c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b876:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b87a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	785b      	ldrb	r3, [r3, #1]
 800b882:	2b00      	cmp	r3, #0
 800b884:	f040 8085 	bne.w	800b992 <USB_EPStartXfer+0x1688>
 800b888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b88c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b896:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b89a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b8a4:	b29b      	uxth	r3, r3
 800b8a6:	461a      	mov	r2, r3
 800b8a8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b8ac:	4413      	add	r3, r2
 800b8ae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800b8b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b8b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	781b      	ldrb	r3, [r3, #0]
 800b8be:	00da      	lsls	r2, r3, #3
 800b8c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800b8c4:	4413      	add	r3, r2
 800b8c6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b8ca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b8ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b8d2:	881b      	ldrh	r3, [r3, #0]
 800b8d4:	b29b      	uxth	r3, r3
 800b8d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b8da:	b29a      	uxth	r2, r3
 800b8dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b8e0:	801a      	strh	r2, [r3, #0]
 800b8e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8e6:	2b3e      	cmp	r3, #62	@ 0x3e
 800b8e8:	d923      	bls.n	800b932 <USB_EPStartXfer+0x1628>
 800b8ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8ee:	095b      	lsrs	r3, r3, #5
 800b8f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b8f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b8f8:	f003 031f 	and.w	r3, r3, #31
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d104      	bne.n	800b90a <USB_EPStartXfer+0x1600>
 800b900:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b904:	3b01      	subs	r3, #1
 800b906:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b90a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b90e:	881b      	ldrh	r3, [r3, #0]
 800b910:	b29a      	uxth	r2, r3
 800b912:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b916:	b29b      	uxth	r3, r3
 800b918:	029b      	lsls	r3, r3, #10
 800b91a:	b29b      	uxth	r3, r3
 800b91c:	4313      	orrs	r3, r2
 800b91e:	b29b      	uxth	r3, r3
 800b920:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b924:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b928:	b29a      	uxth	r2, r3
 800b92a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b92e:	801a      	strh	r2, [r3, #0]
 800b930:	e05c      	b.n	800b9ec <USB_EPStartXfer+0x16e2>
 800b932:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b936:	2b00      	cmp	r3, #0
 800b938:	d10c      	bne.n	800b954 <USB_EPStartXfer+0x164a>
 800b93a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b93e:	881b      	ldrh	r3, [r3, #0]
 800b940:	b29b      	uxth	r3, r3
 800b942:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b946:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b94a:	b29a      	uxth	r2, r3
 800b94c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b950:	801a      	strh	r2, [r3, #0]
 800b952:	e04b      	b.n	800b9ec <USB_EPStartXfer+0x16e2>
 800b954:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b958:	085b      	lsrs	r3, r3, #1
 800b95a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b95e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b962:	f003 0301 	and.w	r3, r3, #1
 800b966:	2b00      	cmp	r3, #0
 800b968:	d004      	beq.n	800b974 <USB_EPStartXfer+0x166a>
 800b96a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b96e:	3301      	adds	r3, #1
 800b970:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800b974:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b978:	881b      	ldrh	r3, [r3, #0]
 800b97a:	b29a      	uxth	r2, r3
 800b97c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b980:	b29b      	uxth	r3, r3
 800b982:	029b      	lsls	r3, r3, #10
 800b984:	b29b      	uxth	r3, r3
 800b986:	4313      	orrs	r3, r2
 800b988:	b29a      	uxth	r2, r3
 800b98a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b98e:	801a      	strh	r2, [r3, #0]
 800b990:	e02c      	b.n	800b9ec <USB_EPStartXfer+0x16e2>
 800b992:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b996:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	785b      	ldrb	r3, [r3, #1]
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	d124      	bne.n	800b9ec <USB_EPStartXfer+0x16e2>
 800b9a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800b9b0:	b29b      	uxth	r3, r3
 800b9b2:	461a      	mov	r2, r3
 800b9b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b9b8:	4413      	add	r3, r2
 800b9ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b9be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	781b      	ldrb	r3, [r3, #0]
 800b9ca:	00da      	lsls	r2, r3, #3
 800b9cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b9d0:	4413      	add	r3, r2
 800b9d2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800b9d6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b9da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800b9de:	b29a      	uxth	r2, r3
 800b9e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b9e4:	801a      	strh	r2, [r3, #0]
 800b9e6:	e001      	b.n	800b9ec <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800b9e8:	2301      	movs	r3, #1
 800b9ea:	e03a      	b.n	800ba62 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b9ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800b9f4:	681a      	ldr	r2, [r3, #0]
 800b9f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800b9fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	781b      	ldrb	r3, [r3, #0]
 800ba02:	009b      	lsls	r3, r3, #2
 800ba04:	4413      	add	r3, r2
 800ba06:	881b      	ldrh	r3, [r3, #0]
 800ba08:	b29b      	uxth	r3, r3
 800ba0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ba0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ba12:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ba16:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ba1a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800ba1e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ba22:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ba26:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800ba2a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800ba2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ba36:	681a      	ldr	r2, [r3, #0]
 800ba38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ba3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	781b      	ldrb	r3, [r3, #0]
 800ba44:	009b      	lsls	r3, r3, #2
 800ba46:	441a      	add	r2, r3
 800ba48:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800ba4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ba50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ba54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ba58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba5c:	b29b      	uxth	r3, r3
 800ba5e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800ba60:	2300      	movs	r3, #0
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}

0800ba6c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	b085      	sub	sp, #20
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	785b      	ldrb	r3, [r3, #1]
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d020      	beq.n	800bac0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800ba7e:	687a      	ldr	r2, [r7, #4]
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	781b      	ldrb	r3, [r3, #0]
 800ba84:	009b      	lsls	r3, r3, #2
 800ba86:	4413      	add	r3, r2
 800ba88:	881b      	ldrh	r3, [r3, #0]
 800ba8a:	b29b      	uxth	r3, r3
 800ba8c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ba90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba94:	81bb      	strh	r3, [r7, #12]
 800ba96:	89bb      	ldrh	r3, [r7, #12]
 800ba98:	f083 0310 	eor.w	r3, r3, #16
 800ba9c:	81bb      	strh	r3, [r7, #12]
 800ba9e:	687a      	ldr	r2, [r7, #4]
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	781b      	ldrb	r3, [r3, #0]
 800baa4:	009b      	lsls	r3, r3, #2
 800baa6:	441a      	add	r2, r3
 800baa8:	89bb      	ldrh	r3, [r7, #12]
 800baaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800baae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bab2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bab6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800baba:	b29b      	uxth	r3, r3
 800babc:	8013      	strh	r3, [r2, #0]
 800babe:	e01f      	b.n	800bb00 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800bac0:	687a      	ldr	r2, [r7, #4]
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	781b      	ldrb	r3, [r3, #0]
 800bac6:	009b      	lsls	r3, r3, #2
 800bac8:	4413      	add	r3, r2
 800baca:	881b      	ldrh	r3, [r3, #0]
 800bacc:	b29b      	uxth	r3, r3
 800bace:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bad2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bad6:	81fb      	strh	r3, [r7, #14]
 800bad8:	89fb      	ldrh	r3, [r7, #14]
 800bada:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800bade:	81fb      	strh	r3, [r7, #14]
 800bae0:	687a      	ldr	r2, [r7, #4]
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	781b      	ldrb	r3, [r3, #0]
 800bae6:	009b      	lsls	r3, r3, #2
 800bae8:	441a      	add	r2, r3
 800baea:	89fb      	ldrh	r3, [r7, #14]
 800baec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800baf0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800baf4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800baf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bafc:	b29b      	uxth	r3, r3
 800bafe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800bb00:	2300      	movs	r3, #0
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	3714      	adds	r7, #20
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr

0800bb0e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bb0e:	b480      	push	{r7}
 800bb10:	b087      	sub	sp, #28
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
 800bb16:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	7b1b      	ldrb	r3, [r3, #12]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	f040 809d 	bne.w	800bc5c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800bb22:	683b      	ldr	r3, [r7, #0]
 800bb24:	785b      	ldrb	r3, [r3, #1]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d04c      	beq.n	800bbc4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bb2a:	687a      	ldr	r2, [r7, #4]
 800bb2c:	683b      	ldr	r3, [r7, #0]
 800bb2e:	781b      	ldrb	r3, [r3, #0]
 800bb30:	009b      	lsls	r3, r3, #2
 800bb32:	4413      	add	r3, r2
 800bb34:	881b      	ldrh	r3, [r3, #0]
 800bb36:	823b      	strh	r3, [r7, #16]
 800bb38:	8a3b      	ldrh	r3, [r7, #16]
 800bb3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d01b      	beq.n	800bb7a <USB_EPClearStall+0x6c>
 800bb42:	687a      	ldr	r2, [r7, #4]
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	781b      	ldrb	r3, [r3, #0]
 800bb48:	009b      	lsls	r3, r3, #2
 800bb4a:	4413      	add	r3, r2
 800bb4c:	881b      	ldrh	r3, [r3, #0]
 800bb4e:	b29b      	uxth	r3, r3
 800bb50:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bb54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bb58:	81fb      	strh	r3, [r7, #14]
 800bb5a:	687a      	ldr	r2, [r7, #4]
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	781b      	ldrb	r3, [r3, #0]
 800bb60:	009b      	lsls	r3, r3, #2
 800bb62:	441a      	add	r2, r3
 800bb64:	89fb      	ldrh	r3, [r7, #14]
 800bb66:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bb6a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bb6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bb72:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800bb76:	b29b      	uxth	r3, r3
 800bb78:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	78db      	ldrb	r3, [r3, #3]
 800bb7e:	2b01      	cmp	r3, #1
 800bb80:	d06c      	beq.n	800bc5c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bb82:	687a      	ldr	r2, [r7, #4]
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	781b      	ldrb	r3, [r3, #0]
 800bb88:	009b      	lsls	r3, r3, #2
 800bb8a:	4413      	add	r3, r2
 800bb8c:	881b      	ldrh	r3, [r3, #0]
 800bb8e:	b29b      	uxth	r3, r3
 800bb90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bb94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bb98:	81bb      	strh	r3, [r7, #12]
 800bb9a:	89bb      	ldrh	r3, [r7, #12]
 800bb9c:	f083 0320 	eor.w	r3, r3, #32
 800bba0:	81bb      	strh	r3, [r7, #12]
 800bba2:	687a      	ldr	r2, [r7, #4]
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	781b      	ldrb	r3, [r3, #0]
 800bba8:	009b      	lsls	r3, r3, #2
 800bbaa:	441a      	add	r2, r3
 800bbac:	89bb      	ldrh	r3, [r7, #12]
 800bbae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bbb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bbb6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bbba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bbbe:	b29b      	uxth	r3, r3
 800bbc0:	8013      	strh	r3, [r2, #0]
 800bbc2:	e04b      	b.n	800bc5c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bbc4:	687a      	ldr	r2, [r7, #4]
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	781b      	ldrb	r3, [r3, #0]
 800bbca:	009b      	lsls	r3, r3, #2
 800bbcc:	4413      	add	r3, r2
 800bbce:	881b      	ldrh	r3, [r3, #0]
 800bbd0:	82fb      	strh	r3, [r7, #22]
 800bbd2:	8afb      	ldrh	r3, [r7, #22]
 800bbd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d01b      	beq.n	800bc14 <USB_EPClearStall+0x106>
 800bbdc:	687a      	ldr	r2, [r7, #4]
 800bbde:	683b      	ldr	r3, [r7, #0]
 800bbe0:	781b      	ldrb	r3, [r3, #0]
 800bbe2:	009b      	lsls	r3, r3, #2
 800bbe4:	4413      	add	r3, r2
 800bbe6:	881b      	ldrh	r3, [r3, #0]
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bbee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bbf2:	82bb      	strh	r3, [r7, #20]
 800bbf4:	687a      	ldr	r2, [r7, #4]
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	781b      	ldrb	r3, [r3, #0]
 800bbfa:	009b      	lsls	r3, r3, #2
 800bbfc:	441a      	add	r2, r3
 800bbfe:	8abb      	ldrh	r3, [r7, #20]
 800bc00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bc04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bc08:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800bc0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc10:	b29b      	uxth	r3, r3
 800bc12:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bc14:	687a      	ldr	r2, [r7, #4]
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	781b      	ldrb	r3, [r3, #0]
 800bc1a:	009b      	lsls	r3, r3, #2
 800bc1c:	4413      	add	r3, r2
 800bc1e:	881b      	ldrh	r3, [r3, #0]
 800bc20:	b29b      	uxth	r3, r3
 800bc22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bc26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bc2a:	827b      	strh	r3, [r7, #18]
 800bc2c:	8a7b      	ldrh	r3, [r7, #18]
 800bc2e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800bc32:	827b      	strh	r3, [r7, #18]
 800bc34:	8a7b      	ldrh	r3, [r7, #18]
 800bc36:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800bc3a:	827b      	strh	r3, [r7, #18]
 800bc3c:	687a      	ldr	r2, [r7, #4]
 800bc3e:	683b      	ldr	r3, [r7, #0]
 800bc40:	781b      	ldrb	r3, [r3, #0]
 800bc42:	009b      	lsls	r3, r3, #2
 800bc44:	441a      	add	r2, r3
 800bc46:	8a7b      	ldrh	r3, [r7, #18]
 800bc48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800bc4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800bc50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800bc54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc58:	b29b      	uxth	r3, r3
 800bc5a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800bc5c:	2300      	movs	r3, #0
}
 800bc5e:	4618      	mov	r0, r3
 800bc60:	371c      	adds	r7, #28
 800bc62:	46bd      	mov	sp, r7
 800bc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc68:	4770      	bx	lr

0800bc6a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800bc6a:	b480      	push	{r7}
 800bc6c:	b083      	sub	sp, #12
 800bc6e:	af00      	add	r7, sp, #0
 800bc70:	6078      	str	r0, [r7, #4]
 800bc72:	460b      	mov	r3, r1
 800bc74:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800bc76:	78fb      	ldrb	r3, [r7, #3]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d103      	bne.n	800bc84 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2280      	movs	r2, #128	@ 0x80
 800bc80:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800bc84:	2300      	movs	r3, #0
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	370c      	adds	r7, #12
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc90:	4770      	bx	lr

0800bc92 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800bc92:	b480      	push	{r7}
 800bc94:	b083      	sub	sp, #12
 800bc96:	af00      	add	r7, sp, #0
 800bc98:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bca0:	b29b      	uxth	r3, r3
 800bca2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bca6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bcaa:	b29a      	uxth	r2, r3
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800bcb2:	2300      	movs	r3, #0
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	370c      	adds	r7, #12
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbe:	4770      	bx	lr

0800bcc0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b085      	sub	sp, #20
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800bcce:	b29b      	uxth	r3, r3
 800bcd0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3714      	adds	r7, #20
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcde:	4770      	bx	lr

0800bce0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bce0:	b480      	push	{r7}
 800bce2:	b08b      	sub	sp, #44	@ 0x2c
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	60f8      	str	r0, [r7, #12]
 800bce8:	60b9      	str	r1, [r7, #8]
 800bcea:	4611      	mov	r1, r2
 800bcec:	461a      	mov	r2, r3
 800bcee:	460b      	mov	r3, r1
 800bcf0:	80fb      	strh	r3, [r7, #6]
 800bcf2:	4613      	mov	r3, r2
 800bcf4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bcf6:	88bb      	ldrh	r3, [r7, #4]
 800bcf8:	3301      	adds	r3, #1
 800bcfa:	085b      	lsrs	r3, r3, #1
 800bcfc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bd06:	88fa      	ldrh	r2, [r7, #6]
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	4413      	add	r3, r2
 800bd0c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bd10:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800bd12:	69bb      	ldr	r3, [r7, #24]
 800bd14:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd16:	e01c      	b.n	800bd52 <USB_WritePMA+0x72>
  {
    WrVal = pBuf[0];
 800bd18:	69fb      	ldr	r3, [r7, #28]
 800bd1a:	781b      	ldrb	r3, [r3, #0]
 800bd1c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800bd1e:	69fb      	ldr	r3, [r7, #28]
 800bd20:	3301      	adds	r3, #1
 800bd22:	781b      	ldrb	r3, [r3, #0]
 800bd24:	b21b      	sxth	r3, r3
 800bd26:	021b      	lsls	r3, r3, #8
 800bd28:	b21a      	sxth	r2, r3
 800bd2a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bd2e:	4313      	orrs	r3, r2
 800bd30:	b21b      	sxth	r3, r3
 800bd32:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800bd34:	6a3b      	ldr	r3, [r7, #32]
 800bd36:	8a7a      	ldrh	r2, [r7, #18]
 800bd38:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800bd3a:	6a3b      	ldr	r3, [r7, #32]
 800bd3c:	3302      	adds	r3, #2
 800bd3e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800bd40:	69fb      	ldr	r3, [r7, #28]
 800bd42:	3301      	adds	r3, #1
 800bd44:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800bd46:	69fb      	ldr	r3, [r7, #28]
 800bd48:	3301      	adds	r3, #1
 800bd4a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800bd4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd4e:	3b01      	subs	r3, #1
 800bd50:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d1df      	bne.n	800bd18 <USB_WritePMA+0x38>
  }
}
 800bd58:	bf00      	nop
 800bd5a:	bf00      	nop
 800bd5c:	372c      	adds	r7, #44	@ 0x2c
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd64:	4770      	bx	lr

0800bd66 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bd66:	b480      	push	{r7}
 800bd68:	b08b      	sub	sp, #44	@ 0x2c
 800bd6a:	af00      	add	r7, sp, #0
 800bd6c:	60f8      	str	r0, [r7, #12]
 800bd6e:	60b9      	str	r1, [r7, #8]
 800bd70:	4611      	mov	r1, r2
 800bd72:	461a      	mov	r2, r3
 800bd74:	460b      	mov	r3, r1
 800bd76:	80fb      	strh	r3, [r7, #6]
 800bd78:	4613      	mov	r3, r2
 800bd7a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800bd7c:	88bb      	ldrh	r3, [r7, #4]
 800bd7e:	085b      	lsrs	r3, r3, #1
 800bd80:	b29b      	uxth	r3, r3
 800bd82:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bd8c:	88fa      	ldrh	r2, [r7, #6]
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	4413      	add	r3, r2
 800bd92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bd96:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800bd98:	69bb      	ldr	r3, [r7, #24]
 800bd9a:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd9c:	e018      	b.n	800bdd0 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800bd9e:	6a3b      	ldr	r3, [r7, #32]
 800bda0:	881b      	ldrh	r3, [r3, #0]
 800bda2:	b29b      	uxth	r3, r3
 800bda4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800bda6:	6a3b      	ldr	r3, [r7, #32]
 800bda8:	3302      	adds	r3, #2
 800bdaa:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	b2da      	uxtb	r2, r3
 800bdb0:	69fb      	ldr	r3, [r7, #28]
 800bdb2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bdb4:	69fb      	ldr	r3, [r7, #28]
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	0a1b      	lsrs	r3, r3, #8
 800bdbe:	b2da      	uxtb	r2, r3
 800bdc0:	69fb      	ldr	r3, [r7, #28]
 800bdc2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bdc4:	69fb      	ldr	r3, [r7, #28]
 800bdc6:	3301      	adds	r3, #1
 800bdc8:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800bdca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdcc:	3b01      	subs	r3, #1
 800bdce:	627b      	str	r3, [r7, #36]	@ 0x24
 800bdd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d1e3      	bne.n	800bd9e <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800bdd6:	88bb      	ldrh	r3, [r7, #4]
 800bdd8:	f003 0301 	and.w	r3, r3, #1
 800bddc:	b29b      	uxth	r3, r3
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d007      	beq.n	800bdf2 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800bde2:	6a3b      	ldr	r3, [r7, #32]
 800bde4:	881b      	ldrh	r3, [r3, #0]
 800bde6:	b29b      	uxth	r3, r3
 800bde8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	b2da      	uxtb	r2, r3
 800bdee:	69fb      	ldr	r3, [r7, #28]
 800bdf0:	701a      	strb	r2, [r3, #0]
  }
}
 800bdf2:	bf00      	nop
 800bdf4:	372c      	adds	r7, #44	@ 0x2c
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfc:	4770      	bx	lr
	...

0800be00 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b084      	sub	sp, #16
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	460b      	mov	r3, r1
 800be0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800be0c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800be10:	f002 fc74 	bl	800e6fc <USBD_static_malloc>
 800be14:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d109      	bne.n	800be30 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	32b0      	adds	r2, #176	@ 0xb0
 800be26:	2100      	movs	r1, #0
 800be28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800be2c:	2302      	movs	r3, #2
 800be2e:	e0d4      	b.n	800bfda <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800be30:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800be34:	2100      	movs	r1, #0
 800be36:	68f8      	ldr	r0, [r7, #12]
 800be38:	f003 fa1f 	bl	800f27a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	32b0      	adds	r2, #176	@ 0xb0
 800be46:	68f9      	ldr	r1, [r7, #12]
 800be48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	32b0      	adds	r2, #176	@ 0xb0
 800be56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	7c1b      	ldrb	r3, [r3, #16]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d138      	bne.n	800beda <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800be68:	4b5e      	ldr	r3, [pc, #376]	@ (800bfe4 <USBD_CDC_Init+0x1e4>)
 800be6a:	7819      	ldrb	r1, [r3, #0]
 800be6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800be70:	2202      	movs	r2, #2
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f002 fae9 	bl	800e44a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800be78:	4b5a      	ldr	r3, [pc, #360]	@ (800bfe4 <USBD_CDC_Init+0x1e4>)
 800be7a:	781b      	ldrb	r3, [r3, #0]
 800be7c:	f003 020f 	and.w	r2, r3, #15
 800be80:	6879      	ldr	r1, [r7, #4]
 800be82:	4613      	mov	r3, r2
 800be84:	009b      	lsls	r3, r3, #2
 800be86:	4413      	add	r3, r2
 800be88:	009b      	lsls	r3, r3, #2
 800be8a:	440b      	add	r3, r1
 800be8c:	3324      	adds	r3, #36	@ 0x24
 800be8e:	2201      	movs	r2, #1
 800be90:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800be92:	4b55      	ldr	r3, [pc, #340]	@ (800bfe8 <USBD_CDC_Init+0x1e8>)
 800be94:	7819      	ldrb	r1, [r3, #0]
 800be96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800be9a:	2202      	movs	r2, #2
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f002 fad4 	bl	800e44a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bea2:	4b51      	ldr	r3, [pc, #324]	@ (800bfe8 <USBD_CDC_Init+0x1e8>)
 800bea4:	781b      	ldrb	r3, [r3, #0]
 800bea6:	f003 020f 	and.w	r2, r3, #15
 800beaa:	6879      	ldr	r1, [r7, #4]
 800beac:	4613      	mov	r3, r2
 800beae:	009b      	lsls	r3, r3, #2
 800beb0:	4413      	add	r3, r2
 800beb2:	009b      	lsls	r3, r3, #2
 800beb4:	440b      	add	r3, r1
 800beb6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800beba:	2201      	movs	r2, #1
 800bebc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bebe:	4b4b      	ldr	r3, [pc, #300]	@ (800bfec <USBD_CDC_Init+0x1ec>)
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	f003 020f 	and.w	r2, r3, #15
 800bec6:	6879      	ldr	r1, [r7, #4]
 800bec8:	4613      	mov	r3, r2
 800beca:	009b      	lsls	r3, r3, #2
 800becc:	4413      	add	r3, r2
 800bece:	009b      	lsls	r3, r3, #2
 800bed0:	440b      	add	r3, r1
 800bed2:	3326      	adds	r3, #38	@ 0x26
 800bed4:	2210      	movs	r2, #16
 800bed6:	801a      	strh	r2, [r3, #0]
 800bed8:	e035      	b.n	800bf46 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800beda:	4b42      	ldr	r3, [pc, #264]	@ (800bfe4 <USBD_CDC_Init+0x1e4>)
 800bedc:	7819      	ldrb	r1, [r3, #0]
 800bede:	2340      	movs	r3, #64	@ 0x40
 800bee0:	2202      	movs	r2, #2
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f002 fab1 	bl	800e44a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bee8:	4b3e      	ldr	r3, [pc, #248]	@ (800bfe4 <USBD_CDC_Init+0x1e4>)
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	f003 020f 	and.w	r2, r3, #15
 800bef0:	6879      	ldr	r1, [r7, #4]
 800bef2:	4613      	mov	r3, r2
 800bef4:	009b      	lsls	r3, r3, #2
 800bef6:	4413      	add	r3, r2
 800bef8:	009b      	lsls	r3, r3, #2
 800befa:	440b      	add	r3, r1
 800befc:	3324      	adds	r3, #36	@ 0x24
 800befe:	2201      	movs	r2, #1
 800bf00:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bf02:	4b39      	ldr	r3, [pc, #228]	@ (800bfe8 <USBD_CDC_Init+0x1e8>)
 800bf04:	7819      	ldrb	r1, [r3, #0]
 800bf06:	2340      	movs	r3, #64	@ 0x40
 800bf08:	2202      	movs	r2, #2
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f002 fa9d 	bl	800e44a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bf10:	4b35      	ldr	r3, [pc, #212]	@ (800bfe8 <USBD_CDC_Init+0x1e8>)
 800bf12:	781b      	ldrb	r3, [r3, #0]
 800bf14:	f003 020f 	and.w	r2, r3, #15
 800bf18:	6879      	ldr	r1, [r7, #4]
 800bf1a:	4613      	mov	r3, r2
 800bf1c:	009b      	lsls	r3, r3, #2
 800bf1e:	4413      	add	r3, r2
 800bf20:	009b      	lsls	r3, r3, #2
 800bf22:	440b      	add	r3, r1
 800bf24:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bf28:	2201      	movs	r2, #1
 800bf2a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bf2c:	4b2f      	ldr	r3, [pc, #188]	@ (800bfec <USBD_CDC_Init+0x1ec>)
 800bf2e:	781b      	ldrb	r3, [r3, #0]
 800bf30:	f003 020f 	and.w	r2, r3, #15
 800bf34:	6879      	ldr	r1, [r7, #4]
 800bf36:	4613      	mov	r3, r2
 800bf38:	009b      	lsls	r3, r3, #2
 800bf3a:	4413      	add	r3, r2
 800bf3c:	009b      	lsls	r3, r3, #2
 800bf3e:	440b      	add	r3, r1
 800bf40:	3326      	adds	r3, #38	@ 0x26
 800bf42:	2210      	movs	r2, #16
 800bf44:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bf46:	4b29      	ldr	r3, [pc, #164]	@ (800bfec <USBD_CDC_Init+0x1ec>)
 800bf48:	7819      	ldrb	r1, [r3, #0]
 800bf4a:	2308      	movs	r3, #8
 800bf4c:	2203      	movs	r2, #3
 800bf4e:	6878      	ldr	r0, [r7, #4]
 800bf50:	f002 fa7b 	bl	800e44a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bf54:	4b25      	ldr	r3, [pc, #148]	@ (800bfec <USBD_CDC_Init+0x1ec>)
 800bf56:	781b      	ldrb	r3, [r3, #0]
 800bf58:	f003 020f 	and.w	r2, r3, #15
 800bf5c:	6879      	ldr	r1, [r7, #4]
 800bf5e:	4613      	mov	r3, r2
 800bf60:	009b      	lsls	r3, r3, #2
 800bf62:	4413      	add	r3, r2
 800bf64:	009b      	lsls	r3, r3, #2
 800bf66:	440b      	add	r3, r1
 800bf68:	3324      	adds	r3, #36	@ 0x24
 800bf6a:	2201      	movs	r2, #1
 800bf6c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	2200      	movs	r2, #0
 800bf72:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bf7c:	687a      	ldr	r2, [r7, #4]
 800bf7e:	33b0      	adds	r3, #176	@ 0xb0
 800bf80:	009b      	lsls	r3, r3, #2
 800bf82:	4413      	add	r3, r2
 800bf84:	685b      	ldr	r3, [r3, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	2200      	movs	r2, #0
 800bf96:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d101      	bne.n	800bfa8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800bfa4:	2302      	movs	r3, #2
 800bfa6:	e018      	b.n	800bfda <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	7c1b      	ldrb	r3, [r3, #16]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d10a      	bne.n	800bfc6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bfb0:	4b0d      	ldr	r3, [pc, #52]	@ (800bfe8 <USBD_CDC_Init+0x1e8>)
 800bfb2:	7819      	ldrb	r1, [r3, #0]
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bfba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bfbe:	6878      	ldr	r0, [r7, #4]
 800bfc0:	f002 fb32 	bl	800e628 <USBD_LL_PrepareReceive>
 800bfc4:	e008      	b.n	800bfd8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bfc6:	4b08      	ldr	r3, [pc, #32]	@ (800bfe8 <USBD_CDC_Init+0x1e8>)
 800bfc8:	7819      	ldrb	r1, [r3, #0]
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bfd0:	2340      	movs	r3, #64	@ 0x40
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f002 fb28 	bl	800e628 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bfd8:	2300      	movs	r3, #0
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3710      	adds	r7, #16
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}
 800bfe2:	bf00      	nop
 800bfe4:	200000b7 	.word	0x200000b7
 800bfe8:	200000b8 	.word	0x200000b8
 800bfec:	200000b9 	.word	0x200000b9

0800bff0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b082      	sub	sp, #8
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
 800bff8:	460b      	mov	r3, r1
 800bffa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800bffc:	4b3a      	ldr	r3, [pc, #232]	@ (800c0e8 <USBD_CDC_DeInit+0xf8>)
 800bffe:	781b      	ldrb	r3, [r3, #0]
 800c000:	4619      	mov	r1, r3
 800c002:	6878      	ldr	r0, [r7, #4]
 800c004:	f002 fa47 	bl	800e496 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c008:	4b37      	ldr	r3, [pc, #220]	@ (800c0e8 <USBD_CDC_DeInit+0xf8>)
 800c00a:	781b      	ldrb	r3, [r3, #0]
 800c00c:	f003 020f 	and.w	r2, r3, #15
 800c010:	6879      	ldr	r1, [r7, #4]
 800c012:	4613      	mov	r3, r2
 800c014:	009b      	lsls	r3, r3, #2
 800c016:	4413      	add	r3, r2
 800c018:	009b      	lsls	r3, r3, #2
 800c01a:	440b      	add	r3, r1
 800c01c:	3324      	adds	r3, #36	@ 0x24
 800c01e:	2200      	movs	r2, #0
 800c020:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c022:	4b32      	ldr	r3, [pc, #200]	@ (800c0ec <USBD_CDC_DeInit+0xfc>)
 800c024:	781b      	ldrb	r3, [r3, #0]
 800c026:	4619      	mov	r1, r3
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f002 fa34 	bl	800e496 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c02e:	4b2f      	ldr	r3, [pc, #188]	@ (800c0ec <USBD_CDC_DeInit+0xfc>)
 800c030:	781b      	ldrb	r3, [r3, #0]
 800c032:	f003 020f 	and.w	r2, r3, #15
 800c036:	6879      	ldr	r1, [r7, #4]
 800c038:	4613      	mov	r3, r2
 800c03a:	009b      	lsls	r3, r3, #2
 800c03c:	4413      	add	r3, r2
 800c03e:	009b      	lsls	r3, r3, #2
 800c040:	440b      	add	r3, r1
 800c042:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c046:	2200      	movs	r2, #0
 800c048:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c04a:	4b29      	ldr	r3, [pc, #164]	@ (800c0f0 <USBD_CDC_DeInit+0x100>)
 800c04c:	781b      	ldrb	r3, [r3, #0]
 800c04e:	4619      	mov	r1, r3
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f002 fa20 	bl	800e496 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c056:	4b26      	ldr	r3, [pc, #152]	@ (800c0f0 <USBD_CDC_DeInit+0x100>)
 800c058:	781b      	ldrb	r3, [r3, #0]
 800c05a:	f003 020f 	and.w	r2, r3, #15
 800c05e:	6879      	ldr	r1, [r7, #4]
 800c060:	4613      	mov	r3, r2
 800c062:	009b      	lsls	r3, r3, #2
 800c064:	4413      	add	r3, r2
 800c066:	009b      	lsls	r3, r3, #2
 800c068:	440b      	add	r3, r1
 800c06a:	3324      	adds	r3, #36	@ 0x24
 800c06c:	2200      	movs	r2, #0
 800c06e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c070:	4b1f      	ldr	r3, [pc, #124]	@ (800c0f0 <USBD_CDC_DeInit+0x100>)
 800c072:	781b      	ldrb	r3, [r3, #0]
 800c074:	f003 020f 	and.w	r2, r3, #15
 800c078:	6879      	ldr	r1, [r7, #4]
 800c07a:	4613      	mov	r3, r2
 800c07c:	009b      	lsls	r3, r3, #2
 800c07e:	4413      	add	r3, r2
 800c080:	009b      	lsls	r3, r3, #2
 800c082:	440b      	add	r3, r1
 800c084:	3326      	adds	r3, #38	@ 0x26
 800c086:	2200      	movs	r2, #0
 800c088:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	32b0      	adds	r2, #176	@ 0xb0
 800c094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d01f      	beq.n	800c0dc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c0a2:	687a      	ldr	r2, [r7, #4]
 800c0a4:	33b0      	adds	r3, #176	@ 0xb0
 800c0a6:	009b      	lsls	r3, r3, #2
 800c0a8:	4413      	add	r3, r2
 800c0aa:	685b      	ldr	r3, [r3, #4]
 800c0ac:	685b      	ldr	r3, [r3, #4]
 800c0ae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	32b0      	adds	r2, #176	@ 0xb0
 800c0ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f002 fb2a 	bl	800e718 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	32b0      	adds	r2, #176	@ 0xb0
 800c0ce:	2100      	movs	r1, #0
 800c0d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c0dc:	2300      	movs	r3, #0
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3708      	adds	r7, #8
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	bd80      	pop	{r7, pc}
 800c0e6:	bf00      	nop
 800c0e8:	200000b7 	.word	0x200000b7
 800c0ec:	200000b8 	.word	0x200000b8
 800c0f0:	200000b9 	.word	0x200000b9

0800c0f4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b086      	sub	sp, #24
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	6078      	str	r0, [r7, #4]
 800c0fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	32b0      	adds	r2, #176	@ 0xb0
 800c108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c10c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c10e:	2300      	movs	r3, #0
 800c110:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c112:	2300      	movs	r3, #0
 800c114:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c116:	2300      	movs	r3, #0
 800c118:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d101      	bne.n	800c124 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c120:	2303      	movs	r3, #3
 800c122:	e0bf      	b.n	800c2a4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d050      	beq.n	800c1d2 <USBD_CDC_Setup+0xde>
 800c130:	2b20      	cmp	r3, #32
 800c132:	f040 80af 	bne.w	800c294 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	88db      	ldrh	r3, [r3, #6]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d03a      	beq.n	800c1b4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	781b      	ldrb	r3, [r3, #0]
 800c142:	b25b      	sxtb	r3, r3
 800c144:	2b00      	cmp	r3, #0
 800c146:	da1b      	bge.n	800c180 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c14e:	687a      	ldr	r2, [r7, #4]
 800c150:	33b0      	adds	r3, #176	@ 0xb0
 800c152:	009b      	lsls	r3, r3, #2
 800c154:	4413      	add	r3, r2
 800c156:	685b      	ldr	r3, [r3, #4]
 800c158:	689b      	ldr	r3, [r3, #8]
 800c15a:	683a      	ldr	r2, [r7, #0]
 800c15c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c15e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c160:	683a      	ldr	r2, [r7, #0]
 800c162:	88d2      	ldrh	r2, [r2, #6]
 800c164:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	88db      	ldrh	r3, [r3, #6]
 800c16a:	2b07      	cmp	r3, #7
 800c16c:	bf28      	it	cs
 800c16e:	2307      	movcs	r3, #7
 800c170:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	89fa      	ldrh	r2, [r7, #14]
 800c176:	4619      	mov	r1, r3
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f001 fd47 	bl	800dc0c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c17e:	e090      	b.n	800c2a2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	785a      	ldrb	r2, [r3, #1]
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	88db      	ldrh	r3, [r3, #6]
 800c18e:	2b3f      	cmp	r3, #63	@ 0x3f
 800c190:	d803      	bhi.n	800c19a <USBD_CDC_Setup+0xa6>
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	88db      	ldrh	r3, [r3, #6]
 800c196:	b2da      	uxtb	r2, r3
 800c198:	e000      	b.n	800c19c <USBD_CDC_Setup+0xa8>
 800c19a:	2240      	movs	r2, #64	@ 0x40
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c1a2:	6939      	ldr	r1, [r7, #16]
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800c1aa:	461a      	mov	r2, r3
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f001 fd59 	bl	800dc64 <USBD_CtlPrepareRx>
      break;
 800c1b2:	e076      	b.n	800c2a2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c1ba:	687a      	ldr	r2, [r7, #4]
 800c1bc:	33b0      	adds	r3, #176	@ 0xb0
 800c1be:	009b      	lsls	r3, r3, #2
 800c1c0:	4413      	add	r3, r2
 800c1c2:	685b      	ldr	r3, [r3, #4]
 800c1c4:	689b      	ldr	r3, [r3, #8]
 800c1c6:	683a      	ldr	r2, [r7, #0]
 800c1c8:	7850      	ldrb	r0, [r2, #1]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	6839      	ldr	r1, [r7, #0]
 800c1ce:	4798      	blx	r3
      break;
 800c1d0:	e067      	b.n	800c2a2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	785b      	ldrb	r3, [r3, #1]
 800c1d6:	2b0b      	cmp	r3, #11
 800c1d8:	d851      	bhi.n	800c27e <USBD_CDC_Setup+0x18a>
 800c1da:	a201      	add	r2, pc, #4	@ (adr r2, 800c1e0 <USBD_CDC_Setup+0xec>)
 800c1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1e0:	0800c211 	.word	0x0800c211
 800c1e4:	0800c28d 	.word	0x0800c28d
 800c1e8:	0800c27f 	.word	0x0800c27f
 800c1ec:	0800c27f 	.word	0x0800c27f
 800c1f0:	0800c27f 	.word	0x0800c27f
 800c1f4:	0800c27f 	.word	0x0800c27f
 800c1f8:	0800c27f 	.word	0x0800c27f
 800c1fc:	0800c27f 	.word	0x0800c27f
 800c200:	0800c27f 	.word	0x0800c27f
 800c204:	0800c27f 	.word	0x0800c27f
 800c208:	0800c23b 	.word	0x0800c23b
 800c20c:	0800c265 	.word	0x0800c265
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c216:	b2db      	uxtb	r3, r3
 800c218:	2b03      	cmp	r3, #3
 800c21a:	d107      	bne.n	800c22c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c21c:	f107 030a 	add.w	r3, r7, #10
 800c220:	2202      	movs	r2, #2
 800c222:	4619      	mov	r1, r3
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f001 fcf1 	bl	800dc0c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c22a:	e032      	b.n	800c292 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c22c:	6839      	ldr	r1, [r7, #0]
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f001 fc6f 	bl	800db12 <USBD_CtlError>
            ret = USBD_FAIL;
 800c234:	2303      	movs	r3, #3
 800c236:	75fb      	strb	r3, [r7, #23]
          break;
 800c238:	e02b      	b.n	800c292 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c240:	b2db      	uxtb	r3, r3
 800c242:	2b03      	cmp	r3, #3
 800c244:	d107      	bne.n	800c256 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c246:	f107 030d 	add.w	r3, r7, #13
 800c24a:	2201      	movs	r2, #1
 800c24c:	4619      	mov	r1, r3
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f001 fcdc 	bl	800dc0c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c254:	e01d      	b.n	800c292 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c256:	6839      	ldr	r1, [r7, #0]
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f001 fc5a 	bl	800db12 <USBD_CtlError>
            ret = USBD_FAIL;
 800c25e:	2303      	movs	r3, #3
 800c260:	75fb      	strb	r3, [r7, #23]
          break;
 800c262:	e016      	b.n	800c292 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c26a:	b2db      	uxtb	r3, r3
 800c26c:	2b03      	cmp	r3, #3
 800c26e:	d00f      	beq.n	800c290 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c270:	6839      	ldr	r1, [r7, #0]
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f001 fc4d 	bl	800db12 <USBD_CtlError>
            ret = USBD_FAIL;
 800c278:	2303      	movs	r3, #3
 800c27a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c27c:	e008      	b.n	800c290 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c27e:	6839      	ldr	r1, [r7, #0]
 800c280:	6878      	ldr	r0, [r7, #4]
 800c282:	f001 fc46 	bl	800db12 <USBD_CtlError>
          ret = USBD_FAIL;
 800c286:	2303      	movs	r3, #3
 800c288:	75fb      	strb	r3, [r7, #23]
          break;
 800c28a:	e002      	b.n	800c292 <USBD_CDC_Setup+0x19e>
          break;
 800c28c:	bf00      	nop
 800c28e:	e008      	b.n	800c2a2 <USBD_CDC_Setup+0x1ae>
          break;
 800c290:	bf00      	nop
      }
      break;
 800c292:	e006      	b.n	800c2a2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c294:	6839      	ldr	r1, [r7, #0]
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f001 fc3b 	bl	800db12 <USBD_CtlError>
      ret = USBD_FAIL;
 800c29c:	2303      	movs	r3, #3
 800c29e:	75fb      	strb	r3, [r7, #23]
      break;
 800c2a0:	bf00      	nop
  }

  return (uint8_t)ret;
 800c2a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3718      	adds	r7, #24
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}

0800c2ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b084      	sub	sp, #16
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	460b      	mov	r3, r1
 800c2b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c2be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	32b0      	adds	r2, #176	@ 0xb0
 800c2ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d101      	bne.n	800c2d6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c2d2:	2303      	movs	r3, #3
 800c2d4:	e065      	b.n	800c3a2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	32b0      	adds	r2, #176	@ 0xb0
 800c2e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2e4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c2e6:	78fb      	ldrb	r3, [r7, #3]
 800c2e8:	f003 020f 	and.w	r2, r3, #15
 800c2ec:	6879      	ldr	r1, [r7, #4]
 800c2ee:	4613      	mov	r3, r2
 800c2f0:	009b      	lsls	r3, r3, #2
 800c2f2:	4413      	add	r3, r2
 800c2f4:	009b      	lsls	r3, r3, #2
 800c2f6:	440b      	add	r3, r1
 800c2f8:	3318      	adds	r3, #24
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d02f      	beq.n	800c360 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c300:	78fb      	ldrb	r3, [r7, #3]
 800c302:	f003 020f 	and.w	r2, r3, #15
 800c306:	6879      	ldr	r1, [r7, #4]
 800c308:	4613      	mov	r3, r2
 800c30a:	009b      	lsls	r3, r3, #2
 800c30c:	4413      	add	r3, r2
 800c30e:	009b      	lsls	r3, r3, #2
 800c310:	440b      	add	r3, r1
 800c312:	3318      	adds	r3, #24
 800c314:	681a      	ldr	r2, [r3, #0]
 800c316:	78fb      	ldrb	r3, [r7, #3]
 800c318:	f003 010f 	and.w	r1, r3, #15
 800c31c:	68f8      	ldr	r0, [r7, #12]
 800c31e:	460b      	mov	r3, r1
 800c320:	009b      	lsls	r3, r3, #2
 800c322:	440b      	add	r3, r1
 800c324:	00db      	lsls	r3, r3, #3
 800c326:	4403      	add	r3, r0
 800c328:	3320      	adds	r3, #32
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	fbb2 f1f3 	udiv	r1, r2, r3
 800c330:	fb01 f303 	mul.w	r3, r1, r3
 800c334:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c336:	2b00      	cmp	r3, #0
 800c338:	d112      	bne.n	800c360 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c33a:	78fb      	ldrb	r3, [r7, #3]
 800c33c:	f003 020f 	and.w	r2, r3, #15
 800c340:	6879      	ldr	r1, [r7, #4]
 800c342:	4613      	mov	r3, r2
 800c344:	009b      	lsls	r3, r3, #2
 800c346:	4413      	add	r3, r2
 800c348:	009b      	lsls	r3, r3, #2
 800c34a:	440b      	add	r3, r1
 800c34c:	3318      	adds	r3, #24
 800c34e:	2200      	movs	r2, #0
 800c350:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c352:	78f9      	ldrb	r1, [r7, #3]
 800c354:	2300      	movs	r3, #0
 800c356:	2200      	movs	r2, #0
 800c358:	6878      	ldr	r0, [r7, #4]
 800c35a:	f002 f944 	bl	800e5e6 <USBD_LL_Transmit>
 800c35e:	e01f      	b.n	800c3a0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	2200      	movs	r2, #0
 800c364:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c36e:	687a      	ldr	r2, [r7, #4]
 800c370:	33b0      	adds	r3, #176	@ 0xb0
 800c372:	009b      	lsls	r3, r3, #2
 800c374:	4413      	add	r3, r2
 800c376:	685b      	ldr	r3, [r3, #4]
 800c378:	691b      	ldr	r3, [r3, #16]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d010      	beq.n	800c3a0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c384:	687a      	ldr	r2, [r7, #4]
 800c386:	33b0      	adds	r3, #176	@ 0xb0
 800c388:	009b      	lsls	r3, r3, #2
 800c38a:	4413      	add	r3, r2
 800c38c:	685b      	ldr	r3, [r3, #4]
 800c38e:	691b      	ldr	r3, [r3, #16]
 800c390:	68ba      	ldr	r2, [r7, #8]
 800c392:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800c396:	68ba      	ldr	r2, [r7, #8]
 800c398:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800c39c:	78fa      	ldrb	r2, [r7, #3]
 800c39e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c3a0:	2300      	movs	r3, #0
}
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	3710      	adds	r7, #16
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bd80      	pop	{r7, pc}

0800c3aa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c3aa:	b580      	push	{r7, lr}
 800c3ac:	b084      	sub	sp, #16
 800c3ae:	af00      	add	r7, sp, #0
 800c3b0:	6078      	str	r0, [r7, #4]
 800c3b2:	460b      	mov	r3, r1
 800c3b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	32b0      	adds	r2, #176	@ 0xb0
 800c3c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3c4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	32b0      	adds	r2, #176	@ 0xb0
 800c3d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d101      	bne.n	800c3dc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c3d8:	2303      	movs	r3, #3
 800c3da:	e01a      	b.n	800c412 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c3dc:	78fb      	ldrb	r3, [r7, #3]
 800c3de:	4619      	mov	r1, r3
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f002 f942 	bl	800e66a <USBD_LL_GetRxDataSize>
 800c3e6:	4602      	mov	r2, r0
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	33b0      	adds	r3, #176	@ 0xb0
 800c3f8:	009b      	lsls	r3, r3, #2
 800c3fa:	4413      	add	r3, r2
 800c3fc:	685b      	ldr	r3, [r3, #4]
 800c3fe:	68db      	ldr	r3, [r3, #12]
 800c400:	68fa      	ldr	r2, [r7, #12]
 800c402:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800c406:	68fa      	ldr	r2, [r7, #12]
 800c408:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800c40c:	4611      	mov	r1, r2
 800c40e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c410:	2300      	movs	r3, #0
}
 800c412:	4618      	mov	r0, r3
 800c414:	3710      	adds	r7, #16
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}

0800c41a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c41a:	b580      	push	{r7, lr}
 800c41c:	b084      	sub	sp, #16
 800c41e:	af00      	add	r7, sp, #0
 800c420:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	32b0      	adds	r2, #176	@ 0xb0
 800c42c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c430:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d101      	bne.n	800c43c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c438:	2303      	movs	r3, #3
 800c43a:	e024      	b.n	800c486 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c442:	687a      	ldr	r2, [r7, #4]
 800c444:	33b0      	adds	r3, #176	@ 0xb0
 800c446:	009b      	lsls	r3, r3, #2
 800c448:	4413      	add	r3, r2
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d019      	beq.n	800c484 <USBD_CDC_EP0_RxReady+0x6a>
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800c456:	2bff      	cmp	r3, #255	@ 0xff
 800c458:	d014      	beq.n	800c484 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c460:	687a      	ldr	r2, [r7, #4]
 800c462:	33b0      	adds	r3, #176	@ 0xb0
 800c464:	009b      	lsls	r3, r3, #2
 800c466:	4413      	add	r3, r2
 800c468:	685b      	ldr	r3, [r3, #4]
 800c46a:	689b      	ldr	r3, [r3, #8]
 800c46c:	68fa      	ldr	r2, [r7, #12]
 800c46e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800c472:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c474:	68fa      	ldr	r2, [r7, #12]
 800c476:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c47a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	22ff      	movs	r2, #255	@ 0xff
 800c480:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800c484:	2300      	movs	r3, #0
}
 800c486:	4618      	mov	r0, r3
 800c488:	3710      	adds	r7, #16
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}
	...

0800c490 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b086      	sub	sp, #24
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c498:	2182      	movs	r1, #130	@ 0x82
 800c49a:	4818      	ldr	r0, [pc, #96]	@ (800c4fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c49c:	f000 fcd9 	bl	800ce52 <USBD_GetEpDesc>
 800c4a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c4a2:	2101      	movs	r1, #1
 800c4a4:	4815      	ldr	r0, [pc, #84]	@ (800c4fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c4a6:	f000 fcd4 	bl	800ce52 <USBD_GetEpDesc>
 800c4aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c4ac:	2181      	movs	r1, #129	@ 0x81
 800c4ae:	4813      	ldr	r0, [pc, #76]	@ (800c4fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c4b0:	f000 fccf 	bl	800ce52 <USBD_GetEpDesc>
 800c4b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c4b6:	697b      	ldr	r3, [r7, #20]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d002      	beq.n	800c4c2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	2210      	movs	r2, #16
 800c4c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d006      	beq.n	800c4d6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c4c8:	693b      	ldr	r3, [r7, #16]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c4d0:	711a      	strb	r2, [r3, #4]
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d006      	beq.n	800c4ea <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c4e4:	711a      	strb	r2, [r3, #4]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2243      	movs	r2, #67	@ 0x43
 800c4ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c4f0:	4b02      	ldr	r3, [pc, #8]	@ (800c4fc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	3718      	adds	r7, #24
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}
 800c4fa:	bf00      	nop
 800c4fc:	20000074 	.word	0x20000074

0800c500 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b086      	sub	sp, #24
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c508:	2182      	movs	r1, #130	@ 0x82
 800c50a:	4818      	ldr	r0, [pc, #96]	@ (800c56c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c50c:	f000 fca1 	bl	800ce52 <USBD_GetEpDesc>
 800c510:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c512:	2101      	movs	r1, #1
 800c514:	4815      	ldr	r0, [pc, #84]	@ (800c56c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c516:	f000 fc9c 	bl	800ce52 <USBD_GetEpDesc>
 800c51a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c51c:	2181      	movs	r1, #129	@ 0x81
 800c51e:	4813      	ldr	r0, [pc, #76]	@ (800c56c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c520:	f000 fc97 	bl	800ce52 <USBD_GetEpDesc>
 800c524:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d002      	beq.n	800c532 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c52c:	697b      	ldr	r3, [r7, #20]
 800c52e:	2210      	movs	r2, #16
 800c530:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c532:	693b      	ldr	r3, [r7, #16]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d006      	beq.n	800c546 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c538:	693b      	ldr	r3, [r7, #16]
 800c53a:	2200      	movs	r2, #0
 800c53c:	711a      	strb	r2, [r3, #4]
 800c53e:	2200      	movs	r2, #0
 800c540:	f042 0202 	orr.w	r2, r2, #2
 800c544:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d006      	beq.n	800c55a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	2200      	movs	r2, #0
 800c550:	711a      	strb	r2, [r3, #4]
 800c552:	2200      	movs	r2, #0
 800c554:	f042 0202 	orr.w	r2, r2, #2
 800c558:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	2243      	movs	r2, #67	@ 0x43
 800c55e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c560:	4b02      	ldr	r3, [pc, #8]	@ (800c56c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c562:	4618      	mov	r0, r3
 800c564:	3718      	adds	r7, #24
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}
 800c56a:	bf00      	nop
 800c56c:	20000074 	.word	0x20000074

0800c570 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b086      	sub	sp, #24
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c578:	2182      	movs	r1, #130	@ 0x82
 800c57a:	4818      	ldr	r0, [pc, #96]	@ (800c5dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c57c:	f000 fc69 	bl	800ce52 <USBD_GetEpDesc>
 800c580:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c582:	2101      	movs	r1, #1
 800c584:	4815      	ldr	r0, [pc, #84]	@ (800c5dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c586:	f000 fc64 	bl	800ce52 <USBD_GetEpDesc>
 800c58a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c58c:	2181      	movs	r1, #129	@ 0x81
 800c58e:	4813      	ldr	r0, [pc, #76]	@ (800c5dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c590:	f000 fc5f 	bl	800ce52 <USBD_GetEpDesc>
 800c594:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d002      	beq.n	800c5a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c59c:	697b      	ldr	r3, [r7, #20]
 800c59e:	2210      	movs	r2, #16
 800c5a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c5a2:	693b      	ldr	r3, [r7, #16]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d006      	beq.n	800c5b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c5b0:	711a      	strb	r2, [r3, #4]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d006      	beq.n	800c5ca <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	2200      	movs	r2, #0
 800c5c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c5c4:	711a      	strb	r2, [r3, #4]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2243      	movs	r2, #67	@ 0x43
 800c5ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c5d0:	4b02      	ldr	r3, [pc, #8]	@ (800c5dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3718      	adds	r7, #24
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}
 800c5da:	bf00      	nop
 800c5dc:	20000074 	.word	0x20000074

0800c5e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b083      	sub	sp, #12
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	220a      	movs	r2, #10
 800c5ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c5ee:	4b03      	ldr	r3, [pc, #12]	@ (800c5fc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	370c      	adds	r7, #12
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fa:	4770      	bx	lr
 800c5fc:	20000030 	.word	0x20000030

0800c600 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c600:	b480      	push	{r7}
 800c602:	b083      	sub	sp, #12
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d101      	bne.n	800c614 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c610:	2303      	movs	r3, #3
 800c612:	e009      	b.n	800c628 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c61a:	687a      	ldr	r2, [r7, #4]
 800c61c:	33b0      	adds	r3, #176	@ 0xb0
 800c61e:	009b      	lsls	r3, r3, #2
 800c620:	4413      	add	r3, r2
 800c622:	683a      	ldr	r2, [r7, #0]
 800c624:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c626:	2300      	movs	r3, #0
}
 800c628:	4618      	mov	r0, r3
 800c62a:	370c      	adds	r7, #12
 800c62c:	46bd      	mov	sp, r7
 800c62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c632:	4770      	bx	lr

0800c634 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c634:	b480      	push	{r7}
 800c636:	b087      	sub	sp, #28
 800c638:	af00      	add	r7, sp, #0
 800c63a:	60f8      	str	r0, [r7, #12]
 800c63c:	60b9      	str	r1, [r7, #8]
 800c63e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	32b0      	adds	r2, #176	@ 0xb0
 800c64a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c64e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c650:	697b      	ldr	r3, [r7, #20]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d101      	bne.n	800c65a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c656:	2303      	movs	r3, #3
 800c658:	e008      	b.n	800c66c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c65a:	697b      	ldr	r3, [r7, #20]
 800c65c:	68ba      	ldr	r2, [r7, #8]
 800c65e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c662:	697b      	ldr	r3, [r7, #20]
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800c66a:	2300      	movs	r3, #0
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	371c      	adds	r7, #28
 800c670:	46bd      	mov	sp, r7
 800c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c676:	4770      	bx	lr

0800c678 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c678:	b480      	push	{r7}
 800c67a:	b085      	sub	sp, #20
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
 800c680:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	32b0      	adds	r2, #176	@ 0xb0
 800c68c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c690:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d101      	bne.n	800c69c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c698:	2303      	movs	r3, #3
 800c69a:	e004      	b.n	800c6a6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	683a      	ldr	r2, [r7, #0]
 800c6a0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800c6a4:	2300      	movs	r3, #0
}
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	3714      	adds	r7, #20
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b0:	4770      	bx	lr
	...

0800c6b4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b084      	sub	sp, #16
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	32b0      	adds	r2, #176	@ 0xb0
 800c6c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6ca:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800c6cc:	2301      	movs	r3, #1
 800c6ce:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d101      	bne.n	800c6da <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c6d6:	2303      	movs	r3, #3
 800c6d8:	e025      	b.n	800c726 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d11f      	bne.n	800c724 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	2201      	movs	r2, #1
 800c6e8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c6ec:	4b10      	ldr	r3, [pc, #64]	@ (800c730 <USBD_CDC_TransmitPacket+0x7c>)
 800c6ee:	781b      	ldrb	r3, [r3, #0]
 800c6f0:	f003 020f 	and.w	r2, r3, #15
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	4613      	mov	r3, r2
 800c6fe:	009b      	lsls	r3, r3, #2
 800c700:	4413      	add	r3, r2
 800c702:	009b      	lsls	r3, r3, #2
 800c704:	4403      	add	r3, r0
 800c706:	3318      	adds	r3, #24
 800c708:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c70a:	4b09      	ldr	r3, [pc, #36]	@ (800c730 <USBD_CDC_TransmitPacket+0x7c>)
 800c70c:	7819      	ldrb	r1, [r3, #0]
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	f001 ff63 	bl	800e5e6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c720:	2300      	movs	r3, #0
 800c722:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c724:	7bfb      	ldrb	r3, [r7, #15]
}
 800c726:	4618      	mov	r0, r3
 800c728:	3710      	adds	r7, #16
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bd80      	pop	{r7, pc}
 800c72e:	bf00      	nop
 800c730:	200000b7 	.word	0x200000b7

0800c734 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b084      	sub	sp, #16
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	32b0      	adds	r2, #176	@ 0xb0
 800c746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c74a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	32b0      	adds	r2, #176	@ 0xb0
 800c756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d101      	bne.n	800c762 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c75e:	2303      	movs	r3, #3
 800c760:	e018      	b.n	800c794 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	7c1b      	ldrb	r3, [r3, #16]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d10a      	bne.n	800c780 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c76a:	4b0c      	ldr	r3, [pc, #48]	@ (800c79c <USBD_CDC_ReceivePacket+0x68>)
 800c76c:	7819      	ldrb	r1, [r3, #0]
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c774:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f001 ff55 	bl	800e628 <USBD_LL_PrepareReceive>
 800c77e:	e008      	b.n	800c792 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c780:	4b06      	ldr	r3, [pc, #24]	@ (800c79c <USBD_CDC_ReceivePacket+0x68>)
 800c782:	7819      	ldrb	r1, [r3, #0]
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c78a:	2340      	movs	r3, #64	@ 0x40
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f001 ff4b 	bl	800e628 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c792:	2300      	movs	r3, #0
}
 800c794:	4618      	mov	r0, r3
 800c796:	3710      	adds	r7, #16
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}
 800c79c:	200000b8 	.word	0x200000b8

0800c7a0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b086      	sub	sp, #24
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	60f8      	str	r0, [r7, #12]
 800c7a8:	60b9      	str	r1, [r7, #8]
 800c7aa:	4613      	mov	r3, r2
 800c7ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d10a      	bne.n	800c7ca <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800c7b4:	4817      	ldr	r0, [pc, #92]	@ (800c814 <USBD_Init+0x74>)
 800c7b6:	f002 fd03 	bl	800f1c0 <iprintf>
 800c7ba:	4817      	ldr	r0, [pc, #92]	@ (800c818 <USBD_Init+0x78>)
 800c7bc:	f002 fd00 	bl	800f1c0 <iprintf>
 800c7c0:	200a      	movs	r0, #10
 800c7c2:	f002 fd0f 	bl	800f1e4 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c7c6:	2303      	movs	r3, #3
 800c7c8:	e01f      	b.n	800c80a <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	2200      	movs	r2, #0
 800c7de:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d003      	beq.n	800c7f0 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	68ba      	ldr	r2, [r7, #8]
 800c7ec:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	2201      	movs	r2, #1
 800c7f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	79fa      	ldrb	r2, [r7, #7]
 800c7fc:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c7fe:	68f8      	ldr	r0, [r7, #12]
 800c800:	f001 fda6 	bl	800e350 <USBD_LL_Init>
 800c804:	4603      	mov	r3, r0
 800c806:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c808:	7dfb      	ldrb	r3, [r7, #23]
}
 800c80a:	4618      	mov	r0, r3
 800c80c:	3718      	adds	r7, #24
 800c80e:	46bd      	mov	sp, r7
 800c810:	bd80      	pop	{r7, pc}
 800c812:	bf00      	nop
 800c814:	08011174 	.word	0x08011174
 800c818:	0801117c 	.word	0x0801117c

0800c81c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b084      	sub	sp, #16
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
 800c824:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c826:	2300      	movs	r3, #0
 800c828:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d10a      	bne.n	800c846 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 800c830:	481a      	ldr	r0, [pc, #104]	@ (800c89c <USBD_RegisterClass+0x80>)
 800c832:	f002 fcc5 	bl	800f1c0 <iprintf>
 800c836:	481a      	ldr	r0, [pc, #104]	@ (800c8a0 <USBD_RegisterClass+0x84>)
 800c838:	f002 fcc2 	bl	800f1c0 <iprintf>
 800c83c:	200a      	movs	r0, #10
 800c83e:	f002 fcd1 	bl	800f1e4 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c842:	2303      	movs	r3, #3
 800c844:	e025      	b.n	800c892 <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	683a      	ldr	r2, [r7, #0]
 800c84a:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	32ae      	adds	r2, #174	@ 0xae
 800c858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c85c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d00f      	beq.n	800c882 <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	32ae      	adds	r2, #174	@ 0xae
 800c86c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c872:	f107 020e 	add.w	r2, r7, #14
 800c876:	4610      	mov	r0, r2
 800c878:	4798      	blx	r3
 800c87a:	4602      	mov	r2, r0
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c888:	1c5a      	adds	r2, r3, #1
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c890:	2300      	movs	r3, #0
}
 800c892:	4618      	mov	r0, r3
 800c894:	3710      	adds	r7, #16
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}
 800c89a:	bf00      	nop
 800c89c:	08011174 	.word	0x08011174
 800c8a0:	08011194 	.word	0x08011194

0800c8a4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b082      	sub	sp, #8
 800c8a8:	af00      	add	r7, sp, #0
 800c8aa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f001 fdb1 	bl	800e414 <USBD_LL_Start>
 800c8b2:	4603      	mov	r3, r0
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3708      	adds	r7, #8
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}

0800c8bc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c8bc:	b480      	push	{r7}
 800c8be:	b083      	sub	sp, #12
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c8c4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	370c      	adds	r7, #12
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d0:	4770      	bx	lr

0800c8d2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c8d2:	b580      	push	{r7, lr}
 800c8d4:	b084      	sub	sp, #16
 800c8d6:	af00      	add	r7, sp, #0
 800c8d8:	6078      	str	r0, [r7, #4]
 800c8da:	460b      	mov	r3, r1
 800c8dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c8de:	2300      	movs	r3, #0
 800c8e0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d009      	beq.n	800c900 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	78fa      	ldrb	r2, [r7, #3]
 800c8f6:	4611      	mov	r1, r2
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	4798      	blx	r3
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c900:	7bfb      	ldrb	r3, [r7, #15]
}
 800c902:	4618      	mov	r0, r3
 800c904:	3710      	adds	r7, #16
 800c906:	46bd      	mov	sp, r7
 800c908:	bd80      	pop	{r7, pc}

0800c90a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c90a:	b580      	push	{r7, lr}
 800c90c:	b084      	sub	sp, #16
 800c90e:	af00      	add	r7, sp, #0
 800c910:	6078      	str	r0, [r7, #4]
 800c912:	460b      	mov	r3, r1
 800c914:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c916:	2300      	movs	r3, #0
 800c918:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c920:	685b      	ldr	r3, [r3, #4]
 800c922:	78fa      	ldrb	r2, [r7, #3]
 800c924:	4611      	mov	r1, r2
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	4798      	blx	r3
 800c92a:	4603      	mov	r3, r0
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d001      	beq.n	800c934 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c930:	2303      	movs	r3, #3
 800c932:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c934:	7bfb      	ldrb	r3, [r7, #15]
}
 800c936:	4618      	mov	r0, r3
 800c938:	3710      	adds	r7, #16
 800c93a:	46bd      	mov	sp, r7
 800c93c:	bd80      	pop	{r7, pc}

0800c93e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c93e:	b580      	push	{r7, lr}
 800c940:	b084      	sub	sp, #16
 800c942:	af00      	add	r7, sp, #0
 800c944:	6078      	str	r0, [r7, #4]
 800c946:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c94e:	6839      	ldr	r1, [r7, #0]
 800c950:	4618      	mov	r0, r3
 800c952:	f001 f8a4 	bl	800da9e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	2201      	movs	r2, #1
 800c95a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c964:	461a      	mov	r2, r3
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c972:	f003 031f 	and.w	r3, r3, #31
 800c976:	2b02      	cmp	r3, #2
 800c978:	d01a      	beq.n	800c9b0 <USBD_LL_SetupStage+0x72>
 800c97a:	2b02      	cmp	r3, #2
 800c97c:	d822      	bhi.n	800c9c4 <USBD_LL_SetupStage+0x86>
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d002      	beq.n	800c988 <USBD_LL_SetupStage+0x4a>
 800c982:	2b01      	cmp	r3, #1
 800c984:	d00a      	beq.n	800c99c <USBD_LL_SetupStage+0x5e>
 800c986:	e01d      	b.n	800c9c4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c98e:	4619      	mov	r1, r3
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f000 fad1 	bl	800cf38 <USBD_StdDevReq>
 800c996:	4603      	mov	r3, r0
 800c998:	73fb      	strb	r3, [r7, #15]
      break;
 800c99a:	e020      	b.n	800c9de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c9a2:	4619      	mov	r1, r3
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f000 fb39 	bl	800d01c <USBD_StdItfReq>
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	73fb      	strb	r3, [r7, #15]
      break;
 800c9ae:	e016      	b.n	800c9de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c9b6:	4619      	mov	r1, r3
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f000 fb9b 	bl	800d0f4 <USBD_StdEPReq>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	73fb      	strb	r3, [r7, #15]
      break;
 800c9c2:	e00c      	b.n	800c9de <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c9ca:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c9ce:	b2db      	uxtb	r3, r3
 800c9d0:	4619      	mov	r1, r3
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f001 fd7e 	bl	800e4d4 <USBD_LL_StallEP>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	73fb      	strb	r3, [r7, #15]
      break;
 800c9dc:	bf00      	nop
  }

  return ret;
 800c9de:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3710      	adds	r7, #16
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}

0800c9e8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b086      	sub	sp, #24
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	60f8      	str	r0, [r7, #12]
 800c9f0:	460b      	mov	r3, r1
 800c9f2:	607a      	str	r2, [r7, #4]
 800c9f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c9fa:	7afb      	ldrb	r3, [r7, #11]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d16e      	bne.n	800cade <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ca06:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ca0e:	2b03      	cmp	r3, #3
 800ca10:	f040 8098 	bne.w	800cb44 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ca14:	693b      	ldr	r3, [r7, #16]
 800ca16:	689a      	ldr	r2, [r3, #8]
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	68db      	ldr	r3, [r3, #12]
 800ca1c:	429a      	cmp	r2, r3
 800ca1e:	d913      	bls.n	800ca48 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	689a      	ldr	r2, [r3, #8]
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	68db      	ldr	r3, [r3, #12]
 800ca28:	1ad2      	subs	r2, r2, r3
 800ca2a:	693b      	ldr	r3, [r7, #16]
 800ca2c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ca2e:	693b      	ldr	r3, [r7, #16]
 800ca30:	68da      	ldr	r2, [r3, #12]
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	689b      	ldr	r3, [r3, #8]
 800ca36:	4293      	cmp	r3, r2
 800ca38:	bf28      	it	cs
 800ca3a:	4613      	movcs	r3, r2
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	6879      	ldr	r1, [r7, #4]
 800ca40:	68f8      	ldr	r0, [r7, #12]
 800ca42:	f001 f92c 	bl	800dc9e <USBD_CtlContinueRx>
 800ca46:	e07d      	b.n	800cb44 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ca4e:	f003 031f 	and.w	r3, r3, #31
 800ca52:	2b02      	cmp	r3, #2
 800ca54:	d014      	beq.n	800ca80 <USBD_LL_DataOutStage+0x98>
 800ca56:	2b02      	cmp	r3, #2
 800ca58:	d81d      	bhi.n	800ca96 <USBD_LL_DataOutStage+0xae>
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d002      	beq.n	800ca64 <USBD_LL_DataOutStage+0x7c>
 800ca5e:	2b01      	cmp	r3, #1
 800ca60:	d003      	beq.n	800ca6a <USBD_LL_DataOutStage+0x82>
 800ca62:	e018      	b.n	800ca96 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ca64:	2300      	movs	r3, #0
 800ca66:	75bb      	strb	r3, [r7, #22]
            break;
 800ca68:	e018      	b.n	800ca9c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ca70:	b2db      	uxtb	r3, r3
 800ca72:	4619      	mov	r1, r3
 800ca74:	68f8      	ldr	r0, [r7, #12]
 800ca76:	f000 f9d2 	bl	800ce1e <USBD_CoreFindIF>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	75bb      	strb	r3, [r7, #22]
            break;
 800ca7e:	e00d      	b.n	800ca9c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ca86:	b2db      	uxtb	r3, r3
 800ca88:	4619      	mov	r1, r3
 800ca8a:	68f8      	ldr	r0, [r7, #12]
 800ca8c:	f000 f9d4 	bl	800ce38 <USBD_CoreFindEP>
 800ca90:	4603      	mov	r3, r0
 800ca92:	75bb      	strb	r3, [r7, #22]
            break;
 800ca94:	e002      	b.n	800ca9c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ca96:	2300      	movs	r3, #0
 800ca98:	75bb      	strb	r3, [r7, #22]
            break;
 800ca9a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ca9c:	7dbb      	ldrb	r3, [r7, #22]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d119      	bne.n	800cad6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800caa8:	b2db      	uxtb	r3, r3
 800caaa:	2b03      	cmp	r3, #3
 800caac:	d113      	bne.n	800cad6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800caae:	7dba      	ldrb	r2, [r7, #22]
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	32ae      	adds	r2, #174	@ 0xae
 800cab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cab8:	691b      	ldr	r3, [r3, #16]
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d00b      	beq.n	800cad6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800cabe:	7dba      	ldrb	r2, [r7, #22]
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800cac6:	7dba      	ldrb	r2, [r7, #22]
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	32ae      	adds	r2, #174	@ 0xae
 800cacc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cad0:	691b      	ldr	r3, [r3, #16]
 800cad2:	68f8      	ldr	r0, [r7, #12]
 800cad4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cad6:	68f8      	ldr	r0, [r7, #12]
 800cad8:	f001 f8f2 	bl	800dcc0 <USBD_CtlSendStatus>
 800cadc:	e032      	b.n	800cb44 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800cade:	7afb      	ldrb	r3, [r7, #11]
 800cae0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cae4:	b2db      	uxtb	r3, r3
 800cae6:	4619      	mov	r1, r3
 800cae8:	68f8      	ldr	r0, [r7, #12]
 800caea:	f000 f9a5 	bl	800ce38 <USBD_CoreFindEP>
 800caee:	4603      	mov	r3, r0
 800caf0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800caf2:	7dbb      	ldrb	r3, [r7, #22]
 800caf4:	2bff      	cmp	r3, #255	@ 0xff
 800caf6:	d025      	beq.n	800cb44 <USBD_LL_DataOutStage+0x15c>
 800caf8:	7dbb      	ldrb	r3, [r7, #22]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d122      	bne.n	800cb44 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb04:	b2db      	uxtb	r3, r3
 800cb06:	2b03      	cmp	r3, #3
 800cb08:	d117      	bne.n	800cb3a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800cb0a:	7dba      	ldrb	r2, [r7, #22]
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	32ae      	adds	r2, #174	@ 0xae
 800cb10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb14:	699b      	ldr	r3, [r3, #24]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d00f      	beq.n	800cb3a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800cb1a:	7dba      	ldrb	r2, [r7, #22]
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800cb22:	7dba      	ldrb	r2, [r7, #22]
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	32ae      	adds	r2, #174	@ 0xae
 800cb28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb2c:	699b      	ldr	r3, [r3, #24]
 800cb2e:	7afa      	ldrb	r2, [r7, #11]
 800cb30:	4611      	mov	r1, r2
 800cb32:	68f8      	ldr	r0, [r7, #12]
 800cb34:	4798      	blx	r3
 800cb36:	4603      	mov	r3, r0
 800cb38:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800cb3a:	7dfb      	ldrb	r3, [r7, #23]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d001      	beq.n	800cb44 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800cb40:	7dfb      	ldrb	r3, [r7, #23]
 800cb42:	e000      	b.n	800cb46 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800cb44:	2300      	movs	r3, #0
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	3718      	adds	r7, #24
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd80      	pop	{r7, pc}

0800cb4e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cb4e:	b580      	push	{r7, lr}
 800cb50:	b086      	sub	sp, #24
 800cb52:	af00      	add	r7, sp, #0
 800cb54:	60f8      	str	r0, [r7, #12]
 800cb56:	460b      	mov	r3, r1
 800cb58:	607a      	str	r2, [r7, #4]
 800cb5a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800cb5c:	7afb      	ldrb	r3, [r7, #11]
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d16f      	bne.n	800cc42 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	3314      	adds	r3, #20
 800cb66:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cb6e:	2b02      	cmp	r3, #2
 800cb70:	d15a      	bne.n	800cc28 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800cb72:	693b      	ldr	r3, [r7, #16]
 800cb74:	689a      	ldr	r2, [r3, #8]
 800cb76:	693b      	ldr	r3, [r7, #16]
 800cb78:	68db      	ldr	r3, [r3, #12]
 800cb7a:	429a      	cmp	r2, r3
 800cb7c:	d914      	bls.n	800cba8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cb7e:	693b      	ldr	r3, [r7, #16]
 800cb80:	689a      	ldr	r2, [r3, #8]
 800cb82:	693b      	ldr	r3, [r7, #16]
 800cb84:	68db      	ldr	r3, [r3, #12]
 800cb86:	1ad2      	subs	r2, r2, r3
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800cb8c:	693b      	ldr	r3, [r7, #16]
 800cb8e:	689b      	ldr	r3, [r3, #8]
 800cb90:	461a      	mov	r2, r3
 800cb92:	6879      	ldr	r1, [r7, #4]
 800cb94:	68f8      	ldr	r0, [r7, #12]
 800cb96:	f001 f854 	bl	800dc42 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	2100      	movs	r1, #0
 800cba0:	68f8      	ldr	r0, [r7, #12]
 800cba2:	f001 fd41 	bl	800e628 <USBD_LL_PrepareReceive>
 800cba6:	e03f      	b.n	800cc28 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	68da      	ldr	r2, [r3, #12]
 800cbac:	693b      	ldr	r3, [r7, #16]
 800cbae:	689b      	ldr	r3, [r3, #8]
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	d11c      	bne.n	800cbee <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800cbb4:	693b      	ldr	r3, [r7, #16]
 800cbb6:	685a      	ldr	r2, [r3, #4]
 800cbb8:	693b      	ldr	r3, [r7, #16]
 800cbba:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cbbc:	429a      	cmp	r2, r3
 800cbbe:	d316      	bcc.n	800cbee <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	685a      	ldr	r2, [r3, #4]
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cbca:	429a      	cmp	r2, r3
 800cbcc:	d20f      	bcs.n	800cbee <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cbce:	2200      	movs	r2, #0
 800cbd0:	2100      	movs	r1, #0
 800cbd2:	68f8      	ldr	r0, [r7, #12]
 800cbd4:	f001 f835 	bl	800dc42 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	2100      	movs	r1, #0
 800cbe6:	68f8      	ldr	r0, [r7, #12]
 800cbe8:	f001 fd1e 	bl	800e628 <USBD_LL_PrepareReceive>
 800cbec:	e01c      	b.n	800cc28 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbf4:	b2db      	uxtb	r3, r3
 800cbf6:	2b03      	cmp	r3, #3
 800cbf8:	d10f      	bne.n	800cc1a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc00:	68db      	ldr	r3, [r3, #12]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d009      	beq.n	800cc1a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	2200      	movs	r2, #0
 800cc0a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc14:	68db      	ldr	r3, [r3, #12]
 800cc16:	68f8      	ldr	r0, [r7, #12]
 800cc18:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc1a:	2180      	movs	r1, #128	@ 0x80
 800cc1c:	68f8      	ldr	r0, [r7, #12]
 800cc1e:	f001 fc59 	bl	800e4d4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800cc22:	68f8      	ldr	r0, [r7, #12]
 800cc24:	f001 f85f 	bl	800dce6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d03a      	beq.n	800cca8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800cc32:	68f8      	ldr	r0, [r7, #12]
 800cc34:	f7ff fe42 	bl	800c8bc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800cc40:	e032      	b.n	800cca8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800cc42:	7afb      	ldrb	r3, [r7, #11]
 800cc44:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cc48:	b2db      	uxtb	r3, r3
 800cc4a:	4619      	mov	r1, r3
 800cc4c:	68f8      	ldr	r0, [r7, #12]
 800cc4e:	f000 f8f3 	bl	800ce38 <USBD_CoreFindEP>
 800cc52:	4603      	mov	r3, r0
 800cc54:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cc56:	7dfb      	ldrb	r3, [r7, #23]
 800cc58:	2bff      	cmp	r3, #255	@ 0xff
 800cc5a:	d025      	beq.n	800cca8 <USBD_LL_DataInStage+0x15a>
 800cc5c:	7dfb      	ldrb	r3, [r7, #23]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d122      	bne.n	800cca8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc68:	b2db      	uxtb	r3, r3
 800cc6a:	2b03      	cmp	r3, #3
 800cc6c:	d11c      	bne.n	800cca8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800cc6e:	7dfa      	ldrb	r2, [r7, #23]
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	32ae      	adds	r2, #174	@ 0xae
 800cc74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc78:	695b      	ldr	r3, [r3, #20]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d014      	beq.n	800cca8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800cc7e:	7dfa      	ldrb	r2, [r7, #23]
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800cc86:	7dfa      	ldrb	r2, [r7, #23]
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	32ae      	adds	r2, #174	@ 0xae
 800cc8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc90:	695b      	ldr	r3, [r3, #20]
 800cc92:	7afa      	ldrb	r2, [r7, #11]
 800cc94:	4611      	mov	r1, r2
 800cc96:	68f8      	ldr	r0, [r7, #12]
 800cc98:	4798      	blx	r3
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800cc9e:	7dbb      	ldrb	r3, [r7, #22]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d001      	beq.n	800cca8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800cca4:	7dbb      	ldrb	r3, [r7, #22]
 800cca6:	e000      	b.n	800ccaa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800cca8:	2300      	movs	r3, #0
}
 800ccaa:	4618      	mov	r0, r3
 800ccac:	3718      	adds	r7, #24
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd80      	pop	{r7, pc}

0800ccb2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ccb2:	b580      	push	{r7, lr}
 800ccb4:	b084      	sub	sp, #16
 800ccb6:	af00      	add	r7, sp, #0
 800ccb8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ccba:	2300      	movs	r3, #0
 800ccbc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2201      	movs	r2, #1
 800ccc2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2200      	movs	r2, #0
 800ccca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2200      	movs	r2, #0
 800cce0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d014      	beq.n	800cd18 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ccf4:	685b      	ldr	r3, [r3, #4]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d00e      	beq.n	800cd18 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd00:	685b      	ldr	r3, [r3, #4]
 800cd02:	687a      	ldr	r2, [r7, #4]
 800cd04:	6852      	ldr	r2, [r2, #4]
 800cd06:	b2d2      	uxtb	r2, r2
 800cd08:	4611      	mov	r1, r2
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	4798      	blx	r3
 800cd0e:	4603      	mov	r3, r0
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d001      	beq.n	800cd18 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800cd14:	2303      	movs	r3, #3
 800cd16:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cd18:	2340      	movs	r3, #64	@ 0x40
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	2100      	movs	r1, #0
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f001 fb93 	bl	800e44a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2201      	movs	r2, #1
 800cd28:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2240      	movs	r2, #64	@ 0x40
 800cd30:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cd34:	2340      	movs	r3, #64	@ 0x40
 800cd36:	2200      	movs	r2, #0
 800cd38:	2180      	movs	r1, #128	@ 0x80
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f001 fb85 	bl	800e44a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2201      	movs	r2, #1
 800cd44:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2240      	movs	r2, #64	@ 0x40
 800cd4a:	621a      	str	r2, [r3, #32]

  return ret;
 800cd4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	3710      	adds	r7, #16
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}

0800cd56 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cd56:	b480      	push	{r7}
 800cd58:	b083      	sub	sp, #12
 800cd5a:	af00      	add	r7, sp, #0
 800cd5c:	6078      	str	r0, [r7, #4]
 800cd5e:	460b      	mov	r3, r1
 800cd60:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	78fa      	ldrb	r2, [r7, #3]
 800cd66:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cd68:	2300      	movs	r3, #0
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	370c      	adds	r7, #12
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd74:	4770      	bx	lr

0800cd76 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cd76:	b480      	push	{r7}
 800cd78:	b083      	sub	sp, #12
 800cd7a:	af00      	add	r7, sp, #0
 800cd7c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd84:	b2db      	uxtb	r3, r3
 800cd86:	2b04      	cmp	r3, #4
 800cd88:	d006      	beq.n	800cd98 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd90:	b2da      	uxtb	r2, r3
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2204      	movs	r2, #4
 800cd9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800cda0:	2300      	movs	r3, #0
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	370c      	adds	r7, #12
 800cda6:	46bd      	mov	sp, r7
 800cda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdac:	4770      	bx	lr

0800cdae <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cdae:	b480      	push	{r7}
 800cdb0:	b083      	sub	sp, #12
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cdbc:	b2db      	uxtb	r3, r3
 800cdbe:	2b04      	cmp	r3, #4
 800cdc0:	d106      	bne.n	800cdd0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800cdc8:	b2da      	uxtb	r2, r3
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800cdd0:	2300      	movs	r3, #0
}
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	370c      	adds	r7, #12
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cddc:	4770      	bx	lr

0800cdde <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cdde:	b580      	push	{r7, lr}
 800cde0:	b082      	sub	sp, #8
 800cde2:	af00      	add	r7, sp, #0
 800cde4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cdec:	b2db      	uxtb	r3, r3
 800cdee:	2b03      	cmp	r3, #3
 800cdf0:	d110      	bne.n	800ce14 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d00b      	beq.n	800ce14 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce02:	69db      	ldr	r3, [r3, #28]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d005      	beq.n	800ce14 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce0e:	69db      	ldr	r3, [r3, #28]
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ce14:	2300      	movs	r3, #0
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3708      	adds	r7, #8
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}

0800ce1e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ce1e:	b480      	push	{r7}
 800ce20:	b083      	sub	sp, #12
 800ce22:	af00      	add	r7, sp, #0
 800ce24:	6078      	str	r0, [r7, #4]
 800ce26:	460b      	mov	r3, r1
 800ce28:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ce2a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ce2c:	4618      	mov	r0, r3
 800ce2e:	370c      	adds	r7, #12
 800ce30:	46bd      	mov	sp, r7
 800ce32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce36:	4770      	bx	lr

0800ce38 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ce38:	b480      	push	{r7}
 800ce3a:	b083      	sub	sp, #12
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
 800ce40:	460b      	mov	r3, r1
 800ce42:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ce44:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	370c      	adds	r7, #12
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce50:	4770      	bx	lr

0800ce52 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ce52:	b580      	push	{r7, lr}
 800ce54:	b086      	sub	sp, #24
 800ce56:	af00      	add	r7, sp, #0
 800ce58:	6078      	str	r0, [r7, #4]
 800ce5a:	460b      	mov	r3, r1
 800ce5c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ce66:	2300      	movs	r3, #0
 800ce68:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	885b      	ldrh	r3, [r3, #2]
 800ce6e:	b29b      	uxth	r3, r3
 800ce70:	68fa      	ldr	r2, [r7, #12]
 800ce72:	7812      	ldrb	r2, [r2, #0]
 800ce74:	4293      	cmp	r3, r2
 800ce76:	d91f      	bls.n	800ceb8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	781b      	ldrb	r3, [r3, #0]
 800ce7c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ce7e:	e013      	b.n	800cea8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ce80:	f107 030a 	add.w	r3, r7, #10
 800ce84:	4619      	mov	r1, r3
 800ce86:	6978      	ldr	r0, [r7, #20]
 800ce88:	f000 f81b 	bl	800cec2 <USBD_GetNextDesc>
 800ce8c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ce8e:	697b      	ldr	r3, [r7, #20]
 800ce90:	785b      	ldrb	r3, [r3, #1]
 800ce92:	2b05      	cmp	r3, #5
 800ce94:	d108      	bne.n	800cea8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ce96:	697b      	ldr	r3, [r7, #20]
 800ce98:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ce9a:	693b      	ldr	r3, [r7, #16]
 800ce9c:	789b      	ldrb	r3, [r3, #2]
 800ce9e:	78fa      	ldrb	r2, [r7, #3]
 800cea0:	429a      	cmp	r2, r3
 800cea2:	d008      	beq.n	800ceb6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800cea4:	2300      	movs	r3, #0
 800cea6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	885b      	ldrh	r3, [r3, #2]
 800ceac:	b29a      	uxth	r2, r3
 800ceae:	897b      	ldrh	r3, [r7, #10]
 800ceb0:	429a      	cmp	r2, r3
 800ceb2:	d8e5      	bhi.n	800ce80 <USBD_GetEpDesc+0x2e>
 800ceb4:	e000      	b.n	800ceb8 <USBD_GetEpDesc+0x66>
          break;
 800ceb6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ceb8:	693b      	ldr	r3, [r7, #16]
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3718      	adds	r7, #24
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}

0800cec2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800cec2:	b480      	push	{r7}
 800cec4:	b085      	sub	sp, #20
 800cec6:	af00      	add	r7, sp, #0
 800cec8:	6078      	str	r0, [r7, #4]
 800ceca:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	881b      	ldrh	r3, [r3, #0]
 800ced4:	68fa      	ldr	r2, [r7, #12]
 800ced6:	7812      	ldrb	r2, [r2, #0]
 800ced8:	4413      	add	r3, r2
 800ceda:	b29a      	uxth	r2, r3
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	781b      	ldrb	r3, [r3, #0]
 800cee4:	461a      	mov	r2, r3
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	4413      	add	r3, r2
 800ceea:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ceec:	68fb      	ldr	r3, [r7, #12]
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3714      	adds	r7, #20
 800cef2:	46bd      	mov	sp, r7
 800cef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef8:	4770      	bx	lr

0800cefa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cefa:	b480      	push	{r7}
 800cefc:	b087      	sub	sp, #28
 800cefe:	af00      	add	r7, sp, #0
 800cf00:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cf06:	697b      	ldr	r3, [r7, #20]
 800cf08:	781b      	ldrb	r3, [r3, #0]
 800cf0a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	3301      	adds	r3, #1
 800cf10:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cf12:	697b      	ldr	r3, [r7, #20]
 800cf14:	781b      	ldrb	r3, [r3, #0]
 800cf16:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cf18:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800cf1c:	021b      	lsls	r3, r3, #8
 800cf1e:	b21a      	sxth	r2, r3
 800cf20:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cf24:	4313      	orrs	r3, r2
 800cf26:	b21b      	sxth	r3, r3
 800cf28:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cf2a:	89fb      	ldrh	r3, [r7, #14]
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	371c      	adds	r7, #28
 800cf30:	46bd      	mov	sp, r7
 800cf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf36:	4770      	bx	lr

0800cf38 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b084      	sub	sp, #16
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf42:	2300      	movs	r3, #0
 800cf44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	781b      	ldrb	r3, [r3, #0]
 800cf4a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cf4e:	2b40      	cmp	r3, #64	@ 0x40
 800cf50:	d005      	beq.n	800cf5e <USBD_StdDevReq+0x26>
 800cf52:	2b40      	cmp	r3, #64	@ 0x40
 800cf54:	d857      	bhi.n	800d006 <USBD_StdDevReq+0xce>
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d00f      	beq.n	800cf7a <USBD_StdDevReq+0x42>
 800cf5a:	2b20      	cmp	r3, #32
 800cf5c:	d153      	bne.n	800d006 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	32ae      	adds	r2, #174	@ 0xae
 800cf68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf6c:	689b      	ldr	r3, [r3, #8]
 800cf6e:	6839      	ldr	r1, [r7, #0]
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	4798      	blx	r3
 800cf74:	4603      	mov	r3, r0
 800cf76:	73fb      	strb	r3, [r7, #15]
      break;
 800cf78:	e04a      	b.n	800d010 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cf7a:	683b      	ldr	r3, [r7, #0]
 800cf7c:	785b      	ldrb	r3, [r3, #1]
 800cf7e:	2b09      	cmp	r3, #9
 800cf80:	d83b      	bhi.n	800cffa <USBD_StdDevReq+0xc2>
 800cf82:	a201      	add	r2, pc, #4	@ (adr r2, 800cf88 <USBD_StdDevReq+0x50>)
 800cf84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf88:	0800cfdd 	.word	0x0800cfdd
 800cf8c:	0800cff1 	.word	0x0800cff1
 800cf90:	0800cffb 	.word	0x0800cffb
 800cf94:	0800cfe7 	.word	0x0800cfe7
 800cf98:	0800cffb 	.word	0x0800cffb
 800cf9c:	0800cfbb 	.word	0x0800cfbb
 800cfa0:	0800cfb1 	.word	0x0800cfb1
 800cfa4:	0800cffb 	.word	0x0800cffb
 800cfa8:	0800cfd3 	.word	0x0800cfd3
 800cfac:	0800cfc5 	.word	0x0800cfc5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cfb0:	6839      	ldr	r1, [r7, #0]
 800cfb2:	6878      	ldr	r0, [r7, #4]
 800cfb4:	f000 fa3c 	bl	800d430 <USBD_GetDescriptor>
          break;
 800cfb8:	e024      	b.n	800d004 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cfba:	6839      	ldr	r1, [r7, #0]
 800cfbc:	6878      	ldr	r0, [r7, #4]
 800cfbe:	f000 fbcb 	bl	800d758 <USBD_SetAddress>
          break;
 800cfc2:	e01f      	b.n	800d004 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cfc4:	6839      	ldr	r1, [r7, #0]
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f000 fc0a 	bl	800d7e0 <USBD_SetConfig>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	73fb      	strb	r3, [r7, #15]
          break;
 800cfd0:	e018      	b.n	800d004 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cfd2:	6839      	ldr	r1, [r7, #0]
 800cfd4:	6878      	ldr	r0, [r7, #4]
 800cfd6:	f000 fcad 	bl	800d934 <USBD_GetConfig>
          break;
 800cfda:	e013      	b.n	800d004 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cfdc:	6839      	ldr	r1, [r7, #0]
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f000 fcde 	bl	800d9a0 <USBD_GetStatus>
          break;
 800cfe4:	e00e      	b.n	800d004 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cfe6:	6839      	ldr	r1, [r7, #0]
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f000 fd0d 	bl	800da08 <USBD_SetFeature>
          break;
 800cfee:	e009      	b.n	800d004 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cff0:	6839      	ldr	r1, [r7, #0]
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f000 fd31 	bl	800da5a <USBD_ClrFeature>
          break;
 800cff8:	e004      	b.n	800d004 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800cffa:	6839      	ldr	r1, [r7, #0]
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f000 fd88 	bl	800db12 <USBD_CtlError>
          break;
 800d002:	bf00      	nop
      }
      break;
 800d004:	e004      	b.n	800d010 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d006:	6839      	ldr	r1, [r7, #0]
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f000 fd82 	bl	800db12 <USBD_CtlError>
      break;
 800d00e:	bf00      	nop
  }

  return ret;
 800d010:	7bfb      	ldrb	r3, [r7, #15]
}
 800d012:	4618      	mov	r0, r3
 800d014:	3710      	adds	r7, #16
 800d016:	46bd      	mov	sp, r7
 800d018:	bd80      	pop	{r7, pc}
 800d01a:	bf00      	nop

0800d01c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b084      	sub	sp, #16
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
 800d024:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d026:	2300      	movs	r3, #0
 800d028:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	781b      	ldrb	r3, [r3, #0]
 800d02e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d032:	2b40      	cmp	r3, #64	@ 0x40
 800d034:	d005      	beq.n	800d042 <USBD_StdItfReq+0x26>
 800d036:	2b40      	cmp	r3, #64	@ 0x40
 800d038:	d852      	bhi.n	800d0e0 <USBD_StdItfReq+0xc4>
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d001      	beq.n	800d042 <USBD_StdItfReq+0x26>
 800d03e:	2b20      	cmp	r3, #32
 800d040:	d14e      	bne.n	800d0e0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d048:	b2db      	uxtb	r3, r3
 800d04a:	3b01      	subs	r3, #1
 800d04c:	2b02      	cmp	r3, #2
 800d04e:	d840      	bhi.n	800d0d2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	889b      	ldrh	r3, [r3, #4]
 800d054:	b2db      	uxtb	r3, r3
 800d056:	2b01      	cmp	r3, #1
 800d058:	d836      	bhi.n	800d0c8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d05a:	683b      	ldr	r3, [r7, #0]
 800d05c:	889b      	ldrh	r3, [r3, #4]
 800d05e:	b2db      	uxtb	r3, r3
 800d060:	4619      	mov	r1, r3
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	f7ff fedb 	bl	800ce1e <USBD_CoreFindIF>
 800d068:	4603      	mov	r3, r0
 800d06a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d06c:	7bbb      	ldrb	r3, [r7, #14]
 800d06e:	2bff      	cmp	r3, #255	@ 0xff
 800d070:	d01d      	beq.n	800d0ae <USBD_StdItfReq+0x92>
 800d072:	7bbb      	ldrb	r3, [r7, #14]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d11a      	bne.n	800d0ae <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d078:	7bba      	ldrb	r2, [r7, #14]
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	32ae      	adds	r2, #174	@ 0xae
 800d07e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d082:	689b      	ldr	r3, [r3, #8]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d00f      	beq.n	800d0a8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d088:	7bba      	ldrb	r2, [r7, #14]
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d090:	7bba      	ldrb	r2, [r7, #14]
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	32ae      	adds	r2, #174	@ 0xae
 800d096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d09a:	689b      	ldr	r3, [r3, #8]
 800d09c:	6839      	ldr	r1, [r7, #0]
 800d09e:	6878      	ldr	r0, [r7, #4]
 800d0a0:	4798      	blx	r3
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d0a6:	e004      	b.n	800d0b2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d0a8:	2303      	movs	r3, #3
 800d0aa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d0ac:	e001      	b.n	800d0b2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d0ae:	2303      	movs	r3, #3
 800d0b0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d0b2:	683b      	ldr	r3, [r7, #0]
 800d0b4:	88db      	ldrh	r3, [r3, #6]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d110      	bne.n	800d0dc <USBD_StdItfReq+0xc0>
 800d0ba:	7bfb      	ldrb	r3, [r7, #15]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d10d      	bne.n	800d0dc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	f000 fdfd 	bl	800dcc0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d0c6:	e009      	b.n	800d0dc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d0c8:	6839      	ldr	r1, [r7, #0]
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f000 fd21 	bl	800db12 <USBD_CtlError>
          break;
 800d0d0:	e004      	b.n	800d0dc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d0d2:	6839      	ldr	r1, [r7, #0]
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f000 fd1c 	bl	800db12 <USBD_CtlError>
          break;
 800d0da:	e000      	b.n	800d0de <USBD_StdItfReq+0xc2>
          break;
 800d0dc:	bf00      	nop
      }
      break;
 800d0de:	e004      	b.n	800d0ea <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d0e0:	6839      	ldr	r1, [r7, #0]
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f000 fd15 	bl	800db12 <USBD_CtlError>
      break;
 800d0e8:	bf00      	nop
  }

  return ret;
 800d0ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	3710      	adds	r7, #16
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bd80      	pop	{r7, pc}

0800d0f4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b084      	sub	sp, #16
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
 800d0fc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d0fe:	2300      	movs	r3, #0
 800d100:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	889b      	ldrh	r3, [r3, #4]
 800d106:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	781b      	ldrb	r3, [r3, #0]
 800d10c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d110:	2b40      	cmp	r3, #64	@ 0x40
 800d112:	d007      	beq.n	800d124 <USBD_StdEPReq+0x30>
 800d114:	2b40      	cmp	r3, #64	@ 0x40
 800d116:	f200 817f 	bhi.w	800d418 <USBD_StdEPReq+0x324>
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d02a      	beq.n	800d174 <USBD_StdEPReq+0x80>
 800d11e:	2b20      	cmp	r3, #32
 800d120:	f040 817a 	bne.w	800d418 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d124:	7bbb      	ldrb	r3, [r7, #14]
 800d126:	4619      	mov	r1, r3
 800d128:	6878      	ldr	r0, [r7, #4]
 800d12a:	f7ff fe85 	bl	800ce38 <USBD_CoreFindEP>
 800d12e:	4603      	mov	r3, r0
 800d130:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d132:	7b7b      	ldrb	r3, [r7, #13]
 800d134:	2bff      	cmp	r3, #255	@ 0xff
 800d136:	f000 8174 	beq.w	800d422 <USBD_StdEPReq+0x32e>
 800d13a:	7b7b      	ldrb	r3, [r7, #13]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	f040 8170 	bne.w	800d422 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d142:	7b7a      	ldrb	r2, [r7, #13]
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d14a:	7b7a      	ldrb	r2, [r7, #13]
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	32ae      	adds	r2, #174	@ 0xae
 800d150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d154:	689b      	ldr	r3, [r3, #8]
 800d156:	2b00      	cmp	r3, #0
 800d158:	f000 8163 	beq.w	800d422 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d15c:	7b7a      	ldrb	r2, [r7, #13]
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	32ae      	adds	r2, #174	@ 0xae
 800d162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d166:	689b      	ldr	r3, [r3, #8]
 800d168:	6839      	ldr	r1, [r7, #0]
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	4798      	blx	r3
 800d16e:	4603      	mov	r3, r0
 800d170:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d172:	e156      	b.n	800d422 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	785b      	ldrb	r3, [r3, #1]
 800d178:	2b03      	cmp	r3, #3
 800d17a:	d008      	beq.n	800d18e <USBD_StdEPReq+0x9a>
 800d17c:	2b03      	cmp	r3, #3
 800d17e:	f300 8145 	bgt.w	800d40c <USBD_StdEPReq+0x318>
 800d182:	2b00      	cmp	r3, #0
 800d184:	f000 809b 	beq.w	800d2be <USBD_StdEPReq+0x1ca>
 800d188:	2b01      	cmp	r3, #1
 800d18a:	d03c      	beq.n	800d206 <USBD_StdEPReq+0x112>
 800d18c:	e13e      	b.n	800d40c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d194:	b2db      	uxtb	r3, r3
 800d196:	2b02      	cmp	r3, #2
 800d198:	d002      	beq.n	800d1a0 <USBD_StdEPReq+0xac>
 800d19a:	2b03      	cmp	r3, #3
 800d19c:	d016      	beq.n	800d1cc <USBD_StdEPReq+0xd8>
 800d19e:	e02c      	b.n	800d1fa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d1a0:	7bbb      	ldrb	r3, [r7, #14]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d00d      	beq.n	800d1c2 <USBD_StdEPReq+0xce>
 800d1a6:	7bbb      	ldrb	r3, [r7, #14]
 800d1a8:	2b80      	cmp	r3, #128	@ 0x80
 800d1aa:	d00a      	beq.n	800d1c2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d1ac:	7bbb      	ldrb	r3, [r7, #14]
 800d1ae:	4619      	mov	r1, r3
 800d1b0:	6878      	ldr	r0, [r7, #4]
 800d1b2:	f001 f98f 	bl	800e4d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d1b6:	2180      	movs	r1, #128	@ 0x80
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f001 f98b 	bl	800e4d4 <USBD_LL_StallEP>
 800d1be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d1c0:	e020      	b.n	800d204 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d1c2:	6839      	ldr	r1, [r7, #0]
 800d1c4:	6878      	ldr	r0, [r7, #4]
 800d1c6:	f000 fca4 	bl	800db12 <USBD_CtlError>
              break;
 800d1ca:	e01b      	b.n	800d204 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d1cc:	683b      	ldr	r3, [r7, #0]
 800d1ce:	885b      	ldrh	r3, [r3, #2]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d10e      	bne.n	800d1f2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d1d4:	7bbb      	ldrb	r3, [r7, #14]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d00b      	beq.n	800d1f2 <USBD_StdEPReq+0xfe>
 800d1da:	7bbb      	ldrb	r3, [r7, #14]
 800d1dc:	2b80      	cmp	r3, #128	@ 0x80
 800d1de:	d008      	beq.n	800d1f2 <USBD_StdEPReq+0xfe>
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	88db      	ldrh	r3, [r3, #6]
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d104      	bne.n	800d1f2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d1e8:	7bbb      	ldrb	r3, [r7, #14]
 800d1ea:	4619      	mov	r1, r3
 800d1ec:	6878      	ldr	r0, [r7, #4]
 800d1ee:	f001 f971 	bl	800e4d4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d1f2:	6878      	ldr	r0, [r7, #4]
 800d1f4:	f000 fd64 	bl	800dcc0 <USBD_CtlSendStatus>

              break;
 800d1f8:	e004      	b.n	800d204 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d1fa:	6839      	ldr	r1, [r7, #0]
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f000 fc88 	bl	800db12 <USBD_CtlError>
              break;
 800d202:	bf00      	nop
          }
          break;
 800d204:	e107      	b.n	800d416 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d20c:	b2db      	uxtb	r3, r3
 800d20e:	2b02      	cmp	r3, #2
 800d210:	d002      	beq.n	800d218 <USBD_StdEPReq+0x124>
 800d212:	2b03      	cmp	r3, #3
 800d214:	d016      	beq.n	800d244 <USBD_StdEPReq+0x150>
 800d216:	e04b      	b.n	800d2b0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d218:	7bbb      	ldrb	r3, [r7, #14]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d00d      	beq.n	800d23a <USBD_StdEPReq+0x146>
 800d21e:	7bbb      	ldrb	r3, [r7, #14]
 800d220:	2b80      	cmp	r3, #128	@ 0x80
 800d222:	d00a      	beq.n	800d23a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d224:	7bbb      	ldrb	r3, [r7, #14]
 800d226:	4619      	mov	r1, r3
 800d228:	6878      	ldr	r0, [r7, #4]
 800d22a:	f001 f953 	bl	800e4d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d22e:	2180      	movs	r1, #128	@ 0x80
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	f001 f94f 	bl	800e4d4 <USBD_LL_StallEP>
 800d236:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d238:	e040      	b.n	800d2bc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d23a:	6839      	ldr	r1, [r7, #0]
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f000 fc68 	bl	800db12 <USBD_CtlError>
              break;
 800d242:	e03b      	b.n	800d2bc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d244:	683b      	ldr	r3, [r7, #0]
 800d246:	885b      	ldrh	r3, [r3, #2]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d136      	bne.n	800d2ba <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d24c:	7bbb      	ldrb	r3, [r7, #14]
 800d24e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d252:	2b00      	cmp	r3, #0
 800d254:	d004      	beq.n	800d260 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d256:	7bbb      	ldrb	r3, [r7, #14]
 800d258:	4619      	mov	r1, r3
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f001 f959 	bl	800e512 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f000 fd2d 	bl	800dcc0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d266:	7bbb      	ldrb	r3, [r7, #14]
 800d268:	4619      	mov	r1, r3
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f7ff fde4 	bl	800ce38 <USBD_CoreFindEP>
 800d270:	4603      	mov	r3, r0
 800d272:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d274:	7b7b      	ldrb	r3, [r7, #13]
 800d276:	2bff      	cmp	r3, #255	@ 0xff
 800d278:	d01f      	beq.n	800d2ba <USBD_StdEPReq+0x1c6>
 800d27a:	7b7b      	ldrb	r3, [r7, #13]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d11c      	bne.n	800d2ba <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d280:	7b7a      	ldrb	r2, [r7, #13]
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d288:	7b7a      	ldrb	r2, [r7, #13]
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	32ae      	adds	r2, #174	@ 0xae
 800d28e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d292:	689b      	ldr	r3, [r3, #8]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d010      	beq.n	800d2ba <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d298:	7b7a      	ldrb	r2, [r7, #13]
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	32ae      	adds	r2, #174	@ 0xae
 800d29e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2a2:	689b      	ldr	r3, [r3, #8]
 800d2a4:	6839      	ldr	r1, [r7, #0]
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	4798      	blx	r3
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d2ae:	e004      	b.n	800d2ba <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d2b0:	6839      	ldr	r1, [r7, #0]
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	f000 fc2d 	bl	800db12 <USBD_CtlError>
              break;
 800d2b8:	e000      	b.n	800d2bc <USBD_StdEPReq+0x1c8>
              break;
 800d2ba:	bf00      	nop
          }
          break;
 800d2bc:	e0ab      	b.n	800d416 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d2c4:	b2db      	uxtb	r3, r3
 800d2c6:	2b02      	cmp	r3, #2
 800d2c8:	d002      	beq.n	800d2d0 <USBD_StdEPReq+0x1dc>
 800d2ca:	2b03      	cmp	r3, #3
 800d2cc:	d032      	beq.n	800d334 <USBD_StdEPReq+0x240>
 800d2ce:	e097      	b.n	800d400 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d2d0:	7bbb      	ldrb	r3, [r7, #14]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d007      	beq.n	800d2e6 <USBD_StdEPReq+0x1f2>
 800d2d6:	7bbb      	ldrb	r3, [r7, #14]
 800d2d8:	2b80      	cmp	r3, #128	@ 0x80
 800d2da:	d004      	beq.n	800d2e6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d2dc:	6839      	ldr	r1, [r7, #0]
 800d2de:	6878      	ldr	r0, [r7, #4]
 800d2e0:	f000 fc17 	bl	800db12 <USBD_CtlError>
                break;
 800d2e4:	e091      	b.n	800d40a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d2e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	da0b      	bge.n	800d306 <USBD_StdEPReq+0x212>
 800d2ee:	7bbb      	ldrb	r3, [r7, #14]
 800d2f0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d2f4:	4613      	mov	r3, r2
 800d2f6:	009b      	lsls	r3, r3, #2
 800d2f8:	4413      	add	r3, r2
 800d2fa:	009b      	lsls	r3, r3, #2
 800d2fc:	3310      	adds	r3, #16
 800d2fe:	687a      	ldr	r2, [r7, #4]
 800d300:	4413      	add	r3, r2
 800d302:	3304      	adds	r3, #4
 800d304:	e00b      	b.n	800d31e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d306:	7bbb      	ldrb	r3, [r7, #14]
 800d308:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d30c:	4613      	mov	r3, r2
 800d30e:	009b      	lsls	r3, r3, #2
 800d310:	4413      	add	r3, r2
 800d312:	009b      	lsls	r3, r3, #2
 800d314:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d318:	687a      	ldr	r2, [r7, #4]
 800d31a:	4413      	add	r3, r2
 800d31c:	3304      	adds	r3, #4
 800d31e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d320:	68bb      	ldr	r3, [r7, #8]
 800d322:	2200      	movs	r2, #0
 800d324:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d326:	68bb      	ldr	r3, [r7, #8]
 800d328:	2202      	movs	r2, #2
 800d32a:	4619      	mov	r1, r3
 800d32c:	6878      	ldr	r0, [r7, #4]
 800d32e:	f000 fc6d 	bl	800dc0c <USBD_CtlSendData>
              break;
 800d332:	e06a      	b.n	800d40a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d334:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	da11      	bge.n	800d360 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d33c:	7bbb      	ldrb	r3, [r7, #14]
 800d33e:	f003 020f 	and.w	r2, r3, #15
 800d342:	6879      	ldr	r1, [r7, #4]
 800d344:	4613      	mov	r3, r2
 800d346:	009b      	lsls	r3, r3, #2
 800d348:	4413      	add	r3, r2
 800d34a:	009b      	lsls	r3, r3, #2
 800d34c:	440b      	add	r3, r1
 800d34e:	3324      	adds	r3, #36	@ 0x24
 800d350:	881b      	ldrh	r3, [r3, #0]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d117      	bne.n	800d386 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d356:	6839      	ldr	r1, [r7, #0]
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	f000 fbda 	bl	800db12 <USBD_CtlError>
                  break;
 800d35e:	e054      	b.n	800d40a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d360:	7bbb      	ldrb	r3, [r7, #14]
 800d362:	f003 020f 	and.w	r2, r3, #15
 800d366:	6879      	ldr	r1, [r7, #4]
 800d368:	4613      	mov	r3, r2
 800d36a:	009b      	lsls	r3, r3, #2
 800d36c:	4413      	add	r3, r2
 800d36e:	009b      	lsls	r3, r3, #2
 800d370:	440b      	add	r3, r1
 800d372:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d376:	881b      	ldrh	r3, [r3, #0]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d104      	bne.n	800d386 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d37c:	6839      	ldr	r1, [r7, #0]
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f000 fbc7 	bl	800db12 <USBD_CtlError>
                  break;
 800d384:	e041      	b.n	800d40a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d386:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	da0b      	bge.n	800d3a6 <USBD_StdEPReq+0x2b2>
 800d38e:	7bbb      	ldrb	r3, [r7, #14]
 800d390:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d394:	4613      	mov	r3, r2
 800d396:	009b      	lsls	r3, r3, #2
 800d398:	4413      	add	r3, r2
 800d39a:	009b      	lsls	r3, r3, #2
 800d39c:	3310      	adds	r3, #16
 800d39e:	687a      	ldr	r2, [r7, #4]
 800d3a0:	4413      	add	r3, r2
 800d3a2:	3304      	adds	r3, #4
 800d3a4:	e00b      	b.n	800d3be <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d3a6:	7bbb      	ldrb	r3, [r7, #14]
 800d3a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d3ac:	4613      	mov	r3, r2
 800d3ae:	009b      	lsls	r3, r3, #2
 800d3b0:	4413      	add	r3, r2
 800d3b2:	009b      	lsls	r3, r3, #2
 800d3b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d3b8:	687a      	ldr	r2, [r7, #4]
 800d3ba:	4413      	add	r3, r2
 800d3bc:	3304      	adds	r3, #4
 800d3be:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d3c0:	7bbb      	ldrb	r3, [r7, #14]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d002      	beq.n	800d3cc <USBD_StdEPReq+0x2d8>
 800d3c6:	7bbb      	ldrb	r3, [r7, #14]
 800d3c8:	2b80      	cmp	r3, #128	@ 0x80
 800d3ca:	d103      	bne.n	800d3d4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	601a      	str	r2, [r3, #0]
 800d3d2:	e00e      	b.n	800d3f2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d3d4:	7bbb      	ldrb	r3, [r7, #14]
 800d3d6:	4619      	mov	r1, r3
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	f001 f8b9 	bl	800e550 <USBD_LL_IsStallEP>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d003      	beq.n	800d3ec <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	2201      	movs	r2, #1
 800d3e8:	601a      	str	r2, [r3, #0]
 800d3ea:	e002      	b.n	800d3f2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d3ec:	68bb      	ldr	r3, [r7, #8]
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	2202      	movs	r2, #2
 800d3f6:	4619      	mov	r1, r3
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	f000 fc07 	bl	800dc0c <USBD_CtlSendData>
              break;
 800d3fe:	e004      	b.n	800d40a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d400:	6839      	ldr	r1, [r7, #0]
 800d402:	6878      	ldr	r0, [r7, #4]
 800d404:	f000 fb85 	bl	800db12 <USBD_CtlError>
              break;
 800d408:	bf00      	nop
          }
          break;
 800d40a:	e004      	b.n	800d416 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d40c:	6839      	ldr	r1, [r7, #0]
 800d40e:	6878      	ldr	r0, [r7, #4]
 800d410:	f000 fb7f 	bl	800db12 <USBD_CtlError>
          break;
 800d414:	bf00      	nop
      }
      break;
 800d416:	e005      	b.n	800d424 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d418:	6839      	ldr	r1, [r7, #0]
 800d41a:	6878      	ldr	r0, [r7, #4]
 800d41c:	f000 fb79 	bl	800db12 <USBD_CtlError>
      break;
 800d420:	e000      	b.n	800d424 <USBD_StdEPReq+0x330>
      break;
 800d422:	bf00      	nop
  }

  return ret;
 800d424:	7bfb      	ldrb	r3, [r7, #15]
}
 800d426:	4618      	mov	r0, r3
 800d428:	3710      	adds	r7, #16
 800d42a:	46bd      	mov	sp, r7
 800d42c:	bd80      	pop	{r7, pc}
	...

0800d430 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b084      	sub	sp, #16
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
 800d438:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d43a:	2300      	movs	r3, #0
 800d43c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d43e:	2300      	movs	r3, #0
 800d440:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d442:	2300      	movs	r3, #0
 800d444:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	885b      	ldrh	r3, [r3, #2]
 800d44a:	0a1b      	lsrs	r3, r3, #8
 800d44c:	b29b      	uxth	r3, r3
 800d44e:	3b01      	subs	r3, #1
 800d450:	2b0e      	cmp	r3, #14
 800d452:	f200 8152 	bhi.w	800d6fa <USBD_GetDescriptor+0x2ca>
 800d456:	a201      	add	r2, pc, #4	@ (adr r2, 800d45c <USBD_GetDescriptor+0x2c>)
 800d458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d45c:	0800d4cd 	.word	0x0800d4cd
 800d460:	0800d4e5 	.word	0x0800d4e5
 800d464:	0800d525 	.word	0x0800d525
 800d468:	0800d6fb 	.word	0x0800d6fb
 800d46c:	0800d6fb 	.word	0x0800d6fb
 800d470:	0800d69b 	.word	0x0800d69b
 800d474:	0800d6c7 	.word	0x0800d6c7
 800d478:	0800d6fb 	.word	0x0800d6fb
 800d47c:	0800d6fb 	.word	0x0800d6fb
 800d480:	0800d6fb 	.word	0x0800d6fb
 800d484:	0800d6fb 	.word	0x0800d6fb
 800d488:	0800d6fb 	.word	0x0800d6fb
 800d48c:	0800d6fb 	.word	0x0800d6fb
 800d490:	0800d6fb 	.word	0x0800d6fb
 800d494:	0800d499 	.word	0x0800d499
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d49e:	69db      	ldr	r3, [r3, #28]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d00b      	beq.n	800d4bc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d4aa:	69db      	ldr	r3, [r3, #28]
 800d4ac:	687a      	ldr	r2, [r7, #4]
 800d4ae:	7c12      	ldrb	r2, [r2, #16]
 800d4b0:	f107 0108 	add.w	r1, r7, #8
 800d4b4:	4610      	mov	r0, r2
 800d4b6:	4798      	blx	r3
 800d4b8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d4ba:	e126      	b.n	800d70a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d4bc:	6839      	ldr	r1, [r7, #0]
 800d4be:	6878      	ldr	r0, [r7, #4]
 800d4c0:	f000 fb27 	bl	800db12 <USBD_CtlError>
        err++;
 800d4c4:	7afb      	ldrb	r3, [r7, #11]
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	72fb      	strb	r3, [r7, #11]
      break;
 800d4ca:	e11e      	b.n	800d70a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	687a      	ldr	r2, [r7, #4]
 800d4d6:	7c12      	ldrb	r2, [r2, #16]
 800d4d8:	f107 0108 	add.w	r1, r7, #8
 800d4dc:	4610      	mov	r0, r2
 800d4de:	4798      	blx	r3
 800d4e0:	60f8      	str	r0, [r7, #12]
      break;
 800d4e2:	e112      	b.n	800d70a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	7c1b      	ldrb	r3, [r3, #16]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d10d      	bne.n	800d508 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d4f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4f4:	f107 0208 	add.w	r2, r7, #8
 800d4f8:	4610      	mov	r0, r2
 800d4fa:	4798      	blx	r3
 800d4fc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	3301      	adds	r3, #1
 800d502:	2202      	movs	r2, #2
 800d504:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d506:	e100      	b.n	800d70a <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d50e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d510:	f107 0208 	add.w	r2, r7, #8
 800d514:	4610      	mov	r0, r2
 800d516:	4798      	blx	r3
 800d518:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	3301      	adds	r3, #1
 800d51e:	2202      	movs	r2, #2
 800d520:	701a      	strb	r2, [r3, #0]
      break;
 800d522:	e0f2      	b.n	800d70a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d524:	683b      	ldr	r3, [r7, #0]
 800d526:	885b      	ldrh	r3, [r3, #2]
 800d528:	b2db      	uxtb	r3, r3
 800d52a:	2b05      	cmp	r3, #5
 800d52c:	f200 80ac 	bhi.w	800d688 <USBD_GetDescriptor+0x258>
 800d530:	a201      	add	r2, pc, #4	@ (adr r2, 800d538 <USBD_GetDescriptor+0x108>)
 800d532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d536:	bf00      	nop
 800d538:	0800d551 	.word	0x0800d551
 800d53c:	0800d585 	.word	0x0800d585
 800d540:	0800d5b9 	.word	0x0800d5b9
 800d544:	0800d5ed 	.word	0x0800d5ed
 800d548:	0800d621 	.word	0x0800d621
 800d54c:	0800d655 	.word	0x0800d655
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d556:	685b      	ldr	r3, [r3, #4]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d00b      	beq.n	800d574 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d562:	685b      	ldr	r3, [r3, #4]
 800d564:	687a      	ldr	r2, [r7, #4]
 800d566:	7c12      	ldrb	r2, [r2, #16]
 800d568:	f107 0108 	add.w	r1, r7, #8
 800d56c:	4610      	mov	r0, r2
 800d56e:	4798      	blx	r3
 800d570:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d572:	e091      	b.n	800d698 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d574:	6839      	ldr	r1, [r7, #0]
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	f000 facb 	bl	800db12 <USBD_CtlError>
            err++;
 800d57c:	7afb      	ldrb	r3, [r7, #11]
 800d57e:	3301      	adds	r3, #1
 800d580:	72fb      	strb	r3, [r7, #11]
          break;
 800d582:	e089      	b.n	800d698 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d58a:	689b      	ldr	r3, [r3, #8]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d00b      	beq.n	800d5a8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d596:	689b      	ldr	r3, [r3, #8]
 800d598:	687a      	ldr	r2, [r7, #4]
 800d59a:	7c12      	ldrb	r2, [r2, #16]
 800d59c:	f107 0108 	add.w	r1, r7, #8
 800d5a0:	4610      	mov	r0, r2
 800d5a2:	4798      	blx	r3
 800d5a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d5a6:	e077      	b.n	800d698 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d5a8:	6839      	ldr	r1, [r7, #0]
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	f000 fab1 	bl	800db12 <USBD_CtlError>
            err++;
 800d5b0:	7afb      	ldrb	r3, [r7, #11]
 800d5b2:	3301      	adds	r3, #1
 800d5b4:	72fb      	strb	r3, [r7, #11]
          break;
 800d5b6:	e06f      	b.n	800d698 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5be:	68db      	ldr	r3, [r3, #12]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d00b      	beq.n	800d5dc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5ca:	68db      	ldr	r3, [r3, #12]
 800d5cc:	687a      	ldr	r2, [r7, #4]
 800d5ce:	7c12      	ldrb	r2, [r2, #16]
 800d5d0:	f107 0108 	add.w	r1, r7, #8
 800d5d4:	4610      	mov	r0, r2
 800d5d6:	4798      	blx	r3
 800d5d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d5da:	e05d      	b.n	800d698 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d5dc:	6839      	ldr	r1, [r7, #0]
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f000 fa97 	bl	800db12 <USBD_CtlError>
            err++;
 800d5e4:	7afb      	ldrb	r3, [r7, #11]
 800d5e6:	3301      	adds	r3, #1
 800d5e8:	72fb      	strb	r3, [r7, #11]
          break;
 800d5ea:	e055      	b.n	800d698 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5f2:	691b      	ldr	r3, [r3, #16]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d00b      	beq.n	800d610 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5fe:	691b      	ldr	r3, [r3, #16]
 800d600:	687a      	ldr	r2, [r7, #4]
 800d602:	7c12      	ldrb	r2, [r2, #16]
 800d604:	f107 0108 	add.w	r1, r7, #8
 800d608:	4610      	mov	r0, r2
 800d60a:	4798      	blx	r3
 800d60c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d60e:	e043      	b.n	800d698 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d610:	6839      	ldr	r1, [r7, #0]
 800d612:	6878      	ldr	r0, [r7, #4]
 800d614:	f000 fa7d 	bl	800db12 <USBD_CtlError>
            err++;
 800d618:	7afb      	ldrb	r3, [r7, #11]
 800d61a:	3301      	adds	r3, #1
 800d61c:	72fb      	strb	r3, [r7, #11]
          break;
 800d61e:	e03b      	b.n	800d698 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d626:	695b      	ldr	r3, [r3, #20]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d00b      	beq.n	800d644 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d632:	695b      	ldr	r3, [r3, #20]
 800d634:	687a      	ldr	r2, [r7, #4]
 800d636:	7c12      	ldrb	r2, [r2, #16]
 800d638:	f107 0108 	add.w	r1, r7, #8
 800d63c:	4610      	mov	r0, r2
 800d63e:	4798      	blx	r3
 800d640:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d642:	e029      	b.n	800d698 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d644:	6839      	ldr	r1, [r7, #0]
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f000 fa63 	bl	800db12 <USBD_CtlError>
            err++;
 800d64c:	7afb      	ldrb	r3, [r7, #11]
 800d64e:	3301      	adds	r3, #1
 800d650:	72fb      	strb	r3, [r7, #11]
          break;
 800d652:	e021      	b.n	800d698 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d65a:	699b      	ldr	r3, [r3, #24]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d00b      	beq.n	800d678 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d666:	699b      	ldr	r3, [r3, #24]
 800d668:	687a      	ldr	r2, [r7, #4]
 800d66a:	7c12      	ldrb	r2, [r2, #16]
 800d66c:	f107 0108 	add.w	r1, r7, #8
 800d670:	4610      	mov	r0, r2
 800d672:	4798      	blx	r3
 800d674:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d676:	e00f      	b.n	800d698 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d678:	6839      	ldr	r1, [r7, #0]
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f000 fa49 	bl	800db12 <USBD_CtlError>
            err++;
 800d680:	7afb      	ldrb	r3, [r7, #11]
 800d682:	3301      	adds	r3, #1
 800d684:	72fb      	strb	r3, [r7, #11]
          break;
 800d686:	e007      	b.n	800d698 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d688:	6839      	ldr	r1, [r7, #0]
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f000 fa41 	bl	800db12 <USBD_CtlError>
          err++;
 800d690:	7afb      	ldrb	r3, [r7, #11]
 800d692:	3301      	adds	r3, #1
 800d694:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d696:	bf00      	nop
      }
      break;
 800d698:	e037      	b.n	800d70a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	7c1b      	ldrb	r3, [r3, #16]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d109      	bne.n	800d6b6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d6a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d6aa:	f107 0208 	add.w	r2, r7, #8
 800d6ae:	4610      	mov	r0, r2
 800d6b0:	4798      	blx	r3
 800d6b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d6b4:	e029      	b.n	800d70a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d6b6:	6839      	ldr	r1, [r7, #0]
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	f000 fa2a 	bl	800db12 <USBD_CtlError>
        err++;
 800d6be:	7afb      	ldrb	r3, [r7, #11]
 800d6c0:	3301      	adds	r3, #1
 800d6c2:	72fb      	strb	r3, [r7, #11]
      break;
 800d6c4:	e021      	b.n	800d70a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	7c1b      	ldrb	r3, [r3, #16]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d10d      	bne.n	800d6ea <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d6d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6d6:	f107 0208 	add.w	r2, r7, #8
 800d6da:	4610      	mov	r0, r2
 800d6dc:	4798      	blx	r3
 800d6de:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	3301      	adds	r3, #1
 800d6e4:	2207      	movs	r2, #7
 800d6e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d6e8:	e00f      	b.n	800d70a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d6ea:	6839      	ldr	r1, [r7, #0]
 800d6ec:	6878      	ldr	r0, [r7, #4]
 800d6ee:	f000 fa10 	bl	800db12 <USBD_CtlError>
        err++;
 800d6f2:	7afb      	ldrb	r3, [r7, #11]
 800d6f4:	3301      	adds	r3, #1
 800d6f6:	72fb      	strb	r3, [r7, #11]
      break;
 800d6f8:	e007      	b.n	800d70a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d6fa:	6839      	ldr	r1, [r7, #0]
 800d6fc:	6878      	ldr	r0, [r7, #4]
 800d6fe:	f000 fa08 	bl	800db12 <USBD_CtlError>
      err++;
 800d702:	7afb      	ldrb	r3, [r7, #11]
 800d704:	3301      	adds	r3, #1
 800d706:	72fb      	strb	r3, [r7, #11]
      break;
 800d708:	bf00      	nop
  }

  if (err != 0U)
 800d70a:	7afb      	ldrb	r3, [r7, #11]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d11e      	bne.n	800d74e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	88db      	ldrh	r3, [r3, #6]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d016      	beq.n	800d746 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d718:	893b      	ldrh	r3, [r7, #8]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d00e      	beq.n	800d73c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	88da      	ldrh	r2, [r3, #6]
 800d722:	893b      	ldrh	r3, [r7, #8]
 800d724:	4293      	cmp	r3, r2
 800d726:	bf28      	it	cs
 800d728:	4613      	movcs	r3, r2
 800d72a:	b29b      	uxth	r3, r3
 800d72c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d72e:	893b      	ldrh	r3, [r7, #8]
 800d730:	461a      	mov	r2, r3
 800d732:	68f9      	ldr	r1, [r7, #12]
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f000 fa69 	bl	800dc0c <USBD_CtlSendData>
 800d73a:	e009      	b.n	800d750 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d73c:	6839      	ldr	r1, [r7, #0]
 800d73e:	6878      	ldr	r0, [r7, #4]
 800d740:	f000 f9e7 	bl	800db12 <USBD_CtlError>
 800d744:	e004      	b.n	800d750 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f000 faba 	bl	800dcc0 <USBD_CtlSendStatus>
 800d74c:	e000      	b.n	800d750 <USBD_GetDescriptor+0x320>
    return;
 800d74e:	bf00      	nop
  }
}
 800d750:	3710      	adds	r7, #16
 800d752:	46bd      	mov	sp, r7
 800d754:	bd80      	pop	{r7, pc}
 800d756:	bf00      	nop

0800d758 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b084      	sub	sp, #16
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
 800d760:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	889b      	ldrh	r3, [r3, #4]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d131      	bne.n	800d7ce <USBD_SetAddress+0x76>
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	88db      	ldrh	r3, [r3, #6]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d12d      	bne.n	800d7ce <USBD_SetAddress+0x76>
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	885b      	ldrh	r3, [r3, #2]
 800d776:	2b7f      	cmp	r3, #127	@ 0x7f
 800d778:	d829      	bhi.n	800d7ce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	885b      	ldrh	r3, [r3, #2]
 800d77e:	b2db      	uxtb	r3, r3
 800d780:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d784:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d78c:	b2db      	uxtb	r3, r3
 800d78e:	2b03      	cmp	r3, #3
 800d790:	d104      	bne.n	800d79c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d792:	6839      	ldr	r1, [r7, #0]
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	f000 f9bc 	bl	800db12 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d79a:	e01d      	b.n	800d7d8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	7bfa      	ldrb	r2, [r7, #15]
 800d7a0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d7a4:	7bfb      	ldrb	r3, [r7, #15]
 800d7a6:	4619      	mov	r1, r3
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f000 fefd 	bl	800e5a8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f000 fa86 	bl	800dcc0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d7b4:	7bfb      	ldrb	r3, [r7, #15]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d004      	beq.n	800d7c4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2202      	movs	r2, #2
 800d7be:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7c2:	e009      	b.n	800d7d8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2201      	movs	r2, #1
 800d7c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7cc:	e004      	b.n	800d7d8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d7ce:	6839      	ldr	r1, [r7, #0]
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	f000 f99e 	bl	800db12 <USBD_CtlError>
  }
}
 800d7d6:	bf00      	nop
 800d7d8:	bf00      	nop
 800d7da:	3710      	adds	r7, #16
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}

0800d7e0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b084      	sub	sp, #16
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
 800d7e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	885b      	ldrh	r3, [r3, #2]
 800d7f2:	b2da      	uxtb	r2, r3
 800d7f4:	4b4e      	ldr	r3, [pc, #312]	@ (800d930 <USBD_SetConfig+0x150>)
 800d7f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d7f8:	4b4d      	ldr	r3, [pc, #308]	@ (800d930 <USBD_SetConfig+0x150>)
 800d7fa:	781b      	ldrb	r3, [r3, #0]
 800d7fc:	2b01      	cmp	r3, #1
 800d7fe:	d905      	bls.n	800d80c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d800:	6839      	ldr	r1, [r7, #0]
 800d802:	6878      	ldr	r0, [r7, #4]
 800d804:	f000 f985 	bl	800db12 <USBD_CtlError>
    return USBD_FAIL;
 800d808:	2303      	movs	r3, #3
 800d80a:	e08c      	b.n	800d926 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d812:	b2db      	uxtb	r3, r3
 800d814:	2b02      	cmp	r3, #2
 800d816:	d002      	beq.n	800d81e <USBD_SetConfig+0x3e>
 800d818:	2b03      	cmp	r3, #3
 800d81a:	d029      	beq.n	800d870 <USBD_SetConfig+0x90>
 800d81c:	e075      	b.n	800d90a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d81e:	4b44      	ldr	r3, [pc, #272]	@ (800d930 <USBD_SetConfig+0x150>)
 800d820:	781b      	ldrb	r3, [r3, #0]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d020      	beq.n	800d868 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d826:	4b42      	ldr	r3, [pc, #264]	@ (800d930 <USBD_SetConfig+0x150>)
 800d828:	781b      	ldrb	r3, [r3, #0]
 800d82a:	461a      	mov	r2, r3
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d830:	4b3f      	ldr	r3, [pc, #252]	@ (800d930 <USBD_SetConfig+0x150>)
 800d832:	781b      	ldrb	r3, [r3, #0]
 800d834:	4619      	mov	r1, r3
 800d836:	6878      	ldr	r0, [r7, #4]
 800d838:	f7ff f84b 	bl	800c8d2 <USBD_SetClassConfig>
 800d83c:	4603      	mov	r3, r0
 800d83e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d840:	7bfb      	ldrb	r3, [r7, #15]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d008      	beq.n	800d858 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d846:	6839      	ldr	r1, [r7, #0]
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f000 f962 	bl	800db12 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2202      	movs	r2, #2
 800d852:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d856:	e065      	b.n	800d924 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d858:	6878      	ldr	r0, [r7, #4]
 800d85a:	f000 fa31 	bl	800dcc0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	2203      	movs	r2, #3
 800d862:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d866:	e05d      	b.n	800d924 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f000 fa29 	bl	800dcc0 <USBD_CtlSendStatus>
      break;
 800d86e:	e059      	b.n	800d924 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d870:	4b2f      	ldr	r3, [pc, #188]	@ (800d930 <USBD_SetConfig+0x150>)
 800d872:	781b      	ldrb	r3, [r3, #0]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d112      	bne.n	800d89e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2202      	movs	r2, #2
 800d87c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d880:	4b2b      	ldr	r3, [pc, #172]	@ (800d930 <USBD_SetConfig+0x150>)
 800d882:	781b      	ldrb	r3, [r3, #0]
 800d884:	461a      	mov	r2, r3
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d88a:	4b29      	ldr	r3, [pc, #164]	@ (800d930 <USBD_SetConfig+0x150>)
 800d88c:	781b      	ldrb	r3, [r3, #0]
 800d88e:	4619      	mov	r1, r3
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f7ff f83a 	bl	800c90a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f000 fa12 	bl	800dcc0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d89c:	e042      	b.n	800d924 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d89e:	4b24      	ldr	r3, [pc, #144]	@ (800d930 <USBD_SetConfig+0x150>)
 800d8a0:	781b      	ldrb	r3, [r3, #0]
 800d8a2:	461a      	mov	r2, r3
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	685b      	ldr	r3, [r3, #4]
 800d8a8:	429a      	cmp	r2, r3
 800d8aa:	d02a      	beq.n	800d902 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	685b      	ldr	r3, [r3, #4]
 800d8b0:	b2db      	uxtb	r3, r3
 800d8b2:	4619      	mov	r1, r3
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f7ff f828 	bl	800c90a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d8ba:	4b1d      	ldr	r3, [pc, #116]	@ (800d930 <USBD_SetConfig+0x150>)
 800d8bc:	781b      	ldrb	r3, [r3, #0]
 800d8be:	461a      	mov	r2, r3
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d8c4:	4b1a      	ldr	r3, [pc, #104]	@ (800d930 <USBD_SetConfig+0x150>)
 800d8c6:	781b      	ldrb	r3, [r3, #0]
 800d8c8:	4619      	mov	r1, r3
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	f7ff f801 	bl	800c8d2 <USBD_SetClassConfig>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d8d4:	7bfb      	ldrb	r3, [r7, #15]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d00f      	beq.n	800d8fa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d8da:	6839      	ldr	r1, [r7, #0]
 800d8dc:	6878      	ldr	r0, [r7, #4]
 800d8de:	f000 f918 	bl	800db12 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	685b      	ldr	r3, [r3, #4]
 800d8e6:	b2db      	uxtb	r3, r3
 800d8e8:	4619      	mov	r1, r3
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f7ff f80d 	bl	800c90a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2202      	movs	r2, #2
 800d8f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d8f8:	e014      	b.n	800d924 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d8fa:	6878      	ldr	r0, [r7, #4]
 800d8fc:	f000 f9e0 	bl	800dcc0 <USBD_CtlSendStatus>
      break;
 800d900:	e010      	b.n	800d924 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f000 f9dc 	bl	800dcc0 <USBD_CtlSendStatus>
      break;
 800d908:	e00c      	b.n	800d924 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d90a:	6839      	ldr	r1, [r7, #0]
 800d90c:	6878      	ldr	r0, [r7, #4]
 800d90e:	f000 f900 	bl	800db12 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d912:	4b07      	ldr	r3, [pc, #28]	@ (800d930 <USBD_SetConfig+0x150>)
 800d914:	781b      	ldrb	r3, [r3, #0]
 800d916:	4619      	mov	r1, r3
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f7fe fff6 	bl	800c90a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d91e:	2303      	movs	r3, #3
 800d920:	73fb      	strb	r3, [r7, #15]
      break;
 800d922:	bf00      	nop
  }

  return ret;
 800d924:	7bfb      	ldrb	r3, [r7, #15]
}
 800d926:	4618      	mov	r0, r3
 800d928:	3710      	adds	r7, #16
 800d92a:	46bd      	mov	sp, r7
 800d92c:	bd80      	pop	{r7, pc}
 800d92e:	bf00      	nop
 800d930:	20000550 	.word	0x20000550

0800d934 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b082      	sub	sp, #8
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
 800d93c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	88db      	ldrh	r3, [r3, #6]
 800d942:	2b01      	cmp	r3, #1
 800d944:	d004      	beq.n	800d950 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d946:	6839      	ldr	r1, [r7, #0]
 800d948:	6878      	ldr	r0, [r7, #4]
 800d94a:	f000 f8e2 	bl	800db12 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d94e:	e023      	b.n	800d998 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d956:	b2db      	uxtb	r3, r3
 800d958:	2b02      	cmp	r3, #2
 800d95a:	dc02      	bgt.n	800d962 <USBD_GetConfig+0x2e>
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	dc03      	bgt.n	800d968 <USBD_GetConfig+0x34>
 800d960:	e015      	b.n	800d98e <USBD_GetConfig+0x5a>
 800d962:	2b03      	cmp	r3, #3
 800d964:	d00b      	beq.n	800d97e <USBD_GetConfig+0x4a>
 800d966:	e012      	b.n	800d98e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	2200      	movs	r2, #0
 800d96c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	3308      	adds	r3, #8
 800d972:	2201      	movs	r2, #1
 800d974:	4619      	mov	r1, r3
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	f000 f948 	bl	800dc0c <USBD_CtlSendData>
        break;
 800d97c:	e00c      	b.n	800d998 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	3304      	adds	r3, #4
 800d982:	2201      	movs	r2, #1
 800d984:	4619      	mov	r1, r3
 800d986:	6878      	ldr	r0, [r7, #4]
 800d988:	f000 f940 	bl	800dc0c <USBD_CtlSendData>
        break;
 800d98c:	e004      	b.n	800d998 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d98e:	6839      	ldr	r1, [r7, #0]
 800d990:	6878      	ldr	r0, [r7, #4]
 800d992:	f000 f8be 	bl	800db12 <USBD_CtlError>
        break;
 800d996:	bf00      	nop
}
 800d998:	bf00      	nop
 800d99a:	3708      	adds	r7, #8
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}

0800d9a0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b082      	sub	sp, #8
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
 800d9a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d9b0:	b2db      	uxtb	r3, r3
 800d9b2:	3b01      	subs	r3, #1
 800d9b4:	2b02      	cmp	r3, #2
 800d9b6:	d81e      	bhi.n	800d9f6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d9b8:	683b      	ldr	r3, [r7, #0]
 800d9ba:	88db      	ldrh	r3, [r3, #6]
 800d9bc:	2b02      	cmp	r3, #2
 800d9be:	d004      	beq.n	800d9ca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d9c0:	6839      	ldr	r1, [r7, #0]
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	f000 f8a5 	bl	800db12 <USBD_CtlError>
        break;
 800d9c8:	e01a      	b.n	800da00 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	2201      	movs	r2, #1
 800d9ce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d005      	beq.n	800d9e6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	68db      	ldr	r3, [r3, #12]
 800d9de:	f043 0202 	orr.w	r2, r3, #2
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	330c      	adds	r3, #12
 800d9ea:	2202      	movs	r2, #2
 800d9ec:	4619      	mov	r1, r3
 800d9ee:	6878      	ldr	r0, [r7, #4]
 800d9f0:	f000 f90c 	bl	800dc0c <USBD_CtlSendData>
      break;
 800d9f4:	e004      	b.n	800da00 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d9f6:	6839      	ldr	r1, [r7, #0]
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f000 f88a 	bl	800db12 <USBD_CtlError>
      break;
 800d9fe:	bf00      	nop
  }
}
 800da00:	bf00      	nop
 800da02:	3708      	adds	r7, #8
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}

0800da08 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b082      	sub	sp, #8
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
 800da10:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	885b      	ldrh	r3, [r3, #2]
 800da16:	2b01      	cmp	r3, #1
 800da18:	d107      	bne.n	800da2a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	2201      	movs	r2, #1
 800da1e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	f000 f94c 	bl	800dcc0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800da28:	e013      	b.n	800da52 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	885b      	ldrh	r3, [r3, #2]
 800da2e:	2b02      	cmp	r3, #2
 800da30:	d10b      	bne.n	800da4a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	889b      	ldrh	r3, [r3, #4]
 800da36:	0a1b      	lsrs	r3, r3, #8
 800da38:	b29b      	uxth	r3, r3
 800da3a:	b2da      	uxtb	r2, r3
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f000 f93c 	bl	800dcc0 <USBD_CtlSendStatus>
}
 800da48:	e003      	b.n	800da52 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800da4a:	6839      	ldr	r1, [r7, #0]
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f000 f860 	bl	800db12 <USBD_CtlError>
}
 800da52:	bf00      	nop
 800da54:	3708      	adds	r7, #8
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}

0800da5a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da5a:	b580      	push	{r7, lr}
 800da5c:	b082      	sub	sp, #8
 800da5e:	af00      	add	r7, sp, #0
 800da60:	6078      	str	r0, [r7, #4]
 800da62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da6a:	b2db      	uxtb	r3, r3
 800da6c:	3b01      	subs	r3, #1
 800da6e:	2b02      	cmp	r3, #2
 800da70:	d80b      	bhi.n	800da8a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	885b      	ldrh	r3, [r3, #2]
 800da76:	2b01      	cmp	r3, #1
 800da78:	d10c      	bne.n	800da94 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	2200      	movs	r2, #0
 800da7e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f000 f91c 	bl	800dcc0 <USBD_CtlSendStatus>
      }
      break;
 800da88:	e004      	b.n	800da94 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800da8a:	6839      	ldr	r1, [r7, #0]
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f000 f840 	bl	800db12 <USBD_CtlError>
      break;
 800da92:	e000      	b.n	800da96 <USBD_ClrFeature+0x3c>
      break;
 800da94:	bf00      	nop
  }
}
 800da96:	bf00      	nop
 800da98:	3708      	adds	r7, #8
 800da9a:	46bd      	mov	sp, r7
 800da9c:	bd80      	pop	{r7, pc}

0800da9e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800da9e:	b580      	push	{r7, lr}
 800daa0:	b084      	sub	sp, #16
 800daa2:	af00      	add	r7, sp, #0
 800daa4:	6078      	str	r0, [r7, #4]
 800daa6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	781a      	ldrb	r2, [r3, #0]
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	3301      	adds	r3, #1
 800dab8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	781a      	ldrb	r2, [r3, #0]
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	3301      	adds	r3, #1
 800dac6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800dac8:	68f8      	ldr	r0, [r7, #12]
 800daca:	f7ff fa16 	bl	800cefa <SWAPBYTE>
 800dace:	4603      	mov	r3, r0
 800dad0:	461a      	mov	r2, r3
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	3301      	adds	r3, #1
 800dada:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	3301      	adds	r3, #1
 800dae0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800dae2:	68f8      	ldr	r0, [r7, #12]
 800dae4:	f7ff fa09 	bl	800cefa <SWAPBYTE>
 800dae8:	4603      	mov	r3, r0
 800daea:	461a      	mov	r2, r3
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	3301      	adds	r3, #1
 800daf4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	3301      	adds	r3, #1
 800dafa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800dafc:	68f8      	ldr	r0, [r7, #12]
 800dafe:	f7ff f9fc 	bl	800cefa <SWAPBYTE>
 800db02:	4603      	mov	r3, r0
 800db04:	461a      	mov	r2, r3
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	80da      	strh	r2, [r3, #6]
}
 800db0a:	bf00      	nop
 800db0c:	3710      	adds	r7, #16
 800db0e:	46bd      	mov	sp, r7
 800db10:	bd80      	pop	{r7, pc}

0800db12 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db12:	b580      	push	{r7, lr}
 800db14:	b082      	sub	sp, #8
 800db16:	af00      	add	r7, sp, #0
 800db18:	6078      	str	r0, [r7, #4]
 800db1a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800db1c:	2180      	movs	r1, #128	@ 0x80
 800db1e:	6878      	ldr	r0, [r7, #4]
 800db20:	f000 fcd8 	bl	800e4d4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800db24:	2100      	movs	r1, #0
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f000 fcd4 	bl	800e4d4 <USBD_LL_StallEP>
}
 800db2c:	bf00      	nop
 800db2e:	3708      	adds	r7, #8
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}

0800db34 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b086      	sub	sp, #24
 800db38:	af00      	add	r7, sp, #0
 800db3a:	60f8      	str	r0, [r7, #12]
 800db3c:	60b9      	str	r1, [r7, #8]
 800db3e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800db40:	2300      	movs	r3, #0
 800db42:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d042      	beq.n	800dbd0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800db4e:	6938      	ldr	r0, [r7, #16]
 800db50:	f000 f842 	bl	800dbd8 <USBD_GetLen>
 800db54:	4603      	mov	r3, r0
 800db56:	3301      	adds	r3, #1
 800db58:	005b      	lsls	r3, r3, #1
 800db5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800db5e:	d808      	bhi.n	800db72 <USBD_GetString+0x3e>
 800db60:	6938      	ldr	r0, [r7, #16]
 800db62:	f000 f839 	bl	800dbd8 <USBD_GetLen>
 800db66:	4603      	mov	r3, r0
 800db68:	3301      	adds	r3, #1
 800db6a:	b29b      	uxth	r3, r3
 800db6c:	005b      	lsls	r3, r3, #1
 800db6e:	b29a      	uxth	r2, r3
 800db70:	e001      	b.n	800db76 <USBD_GetString+0x42>
 800db72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800db7a:	7dfb      	ldrb	r3, [r7, #23]
 800db7c:	68ba      	ldr	r2, [r7, #8]
 800db7e:	4413      	add	r3, r2
 800db80:	687a      	ldr	r2, [r7, #4]
 800db82:	7812      	ldrb	r2, [r2, #0]
 800db84:	701a      	strb	r2, [r3, #0]
  idx++;
 800db86:	7dfb      	ldrb	r3, [r7, #23]
 800db88:	3301      	adds	r3, #1
 800db8a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800db8c:	7dfb      	ldrb	r3, [r7, #23]
 800db8e:	68ba      	ldr	r2, [r7, #8]
 800db90:	4413      	add	r3, r2
 800db92:	2203      	movs	r2, #3
 800db94:	701a      	strb	r2, [r3, #0]
  idx++;
 800db96:	7dfb      	ldrb	r3, [r7, #23]
 800db98:	3301      	adds	r3, #1
 800db9a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800db9c:	e013      	b.n	800dbc6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800db9e:	7dfb      	ldrb	r3, [r7, #23]
 800dba0:	68ba      	ldr	r2, [r7, #8]
 800dba2:	4413      	add	r3, r2
 800dba4:	693a      	ldr	r2, [r7, #16]
 800dba6:	7812      	ldrb	r2, [r2, #0]
 800dba8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800dbaa:	693b      	ldr	r3, [r7, #16]
 800dbac:	3301      	adds	r3, #1
 800dbae:	613b      	str	r3, [r7, #16]
    idx++;
 800dbb0:	7dfb      	ldrb	r3, [r7, #23]
 800dbb2:	3301      	adds	r3, #1
 800dbb4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800dbb6:	7dfb      	ldrb	r3, [r7, #23]
 800dbb8:	68ba      	ldr	r2, [r7, #8]
 800dbba:	4413      	add	r3, r2
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	701a      	strb	r2, [r3, #0]
    idx++;
 800dbc0:	7dfb      	ldrb	r3, [r7, #23]
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800dbc6:	693b      	ldr	r3, [r7, #16]
 800dbc8:	781b      	ldrb	r3, [r3, #0]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d1e7      	bne.n	800db9e <USBD_GetString+0x6a>
 800dbce:	e000      	b.n	800dbd2 <USBD_GetString+0x9e>
    return;
 800dbd0:	bf00      	nop
  }
}
 800dbd2:	3718      	adds	r7, #24
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}

0800dbd8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800dbd8:	b480      	push	{r7}
 800dbda:	b085      	sub	sp, #20
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800dbe8:	e005      	b.n	800dbf6 <USBD_GetLen+0x1e>
  {
    len++;
 800dbea:	7bfb      	ldrb	r3, [r7, #15]
 800dbec:	3301      	adds	r3, #1
 800dbee:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800dbf0:	68bb      	ldr	r3, [r7, #8]
 800dbf2:	3301      	adds	r3, #1
 800dbf4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	781b      	ldrb	r3, [r3, #0]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d1f5      	bne.n	800dbea <USBD_GetLen+0x12>
  }

  return len;
 800dbfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	3714      	adds	r7, #20
 800dc04:	46bd      	mov	sp, r7
 800dc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0a:	4770      	bx	lr

0800dc0c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b084      	sub	sp, #16
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	60f8      	str	r0, [r7, #12]
 800dc14:	60b9      	str	r1, [r7, #8]
 800dc16:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	2202      	movs	r2, #2
 800dc1c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	687a      	ldr	r2, [r7, #4]
 800dc24:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	687a      	ldr	r2, [r7, #4]
 800dc2a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	68ba      	ldr	r2, [r7, #8]
 800dc30:	2100      	movs	r1, #0
 800dc32:	68f8      	ldr	r0, [r7, #12]
 800dc34:	f000 fcd7 	bl	800e5e6 <USBD_LL_Transmit>

  return USBD_OK;
 800dc38:	2300      	movs	r3, #0
}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	3710      	adds	r7, #16
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}

0800dc42 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dc42:	b580      	push	{r7, lr}
 800dc44:	b084      	sub	sp, #16
 800dc46:	af00      	add	r7, sp, #0
 800dc48:	60f8      	str	r0, [r7, #12]
 800dc4a:	60b9      	str	r1, [r7, #8]
 800dc4c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	68ba      	ldr	r2, [r7, #8]
 800dc52:	2100      	movs	r1, #0
 800dc54:	68f8      	ldr	r0, [r7, #12]
 800dc56:	f000 fcc6 	bl	800e5e6 <USBD_LL_Transmit>

  return USBD_OK;
 800dc5a:	2300      	movs	r3, #0
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	3710      	adds	r7, #16
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}

0800dc64 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b084      	sub	sp, #16
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	60f8      	str	r0, [r7, #12]
 800dc6c:	60b9      	str	r1, [r7, #8]
 800dc6e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	2203      	movs	r2, #3
 800dc74:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	687a      	ldr	r2, [r7, #4]
 800dc7c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	687a      	ldr	r2, [r7, #4]
 800dc84:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	68ba      	ldr	r2, [r7, #8]
 800dc8c:	2100      	movs	r1, #0
 800dc8e:	68f8      	ldr	r0, [r7, #12]
 800dc90:	f000 fcca 	bl	800e628 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dc94:	2300      	movs	r3, #0
}
 800dc96:	4618      	mov	r0, r3
 800dc98:	3710      	adds	r7, #16
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}

0800dc9e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800dc9e:	b580      	push	{r7, lr}
 800dca0:	b084      	sub	sp, #16
 800dca2:	af00      	add	r7, sp, #0
 800dca4:	60f8      	str	r0, [r7, #12]
 800dca6:	60b9      	str	r1, [r7, #8]
 800dca8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	68ba      	ldr	r2, [r7, #8]
 800dcae:	2100      	movs	r1, #0
 800dcb0:	68f8      	ldr	r0, [r7, #12]
 800dcb2:	f000 fcb9 	bl	800e628 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dcb6:	2300      	movs	r3, #0
}
 800dcb8:	4618      	mov	r0, r3
 800dcba:	3710      	adds	r7, #16
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	bd80      	pop	{r7, pc}

0800dcc0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b082      	sub	sp, #8
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	2204      	movs	r2, #4
 800dccc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	2100      	movs	r1, #0
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f000 fc85 	bl	800e5e6 <USBD_LL_Transmit>

  return USBD_OK;
 800dcdc:	2300      	movs	r3, #0
}
 800dcde:	4618      	mov	r0, r3
 800dce0:	3708      	adds	r7, #8
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}

0800dce6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dce6:	b580      	push	{r7, lr}
 800dce8:	b082      	sub	sp, #8
 800dcea:	af00      	add	r7, sp, #0
 800dcec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	2205      	movs	r2, #5
 800dcf2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	2100      	movs	r1, #0
 800dcfc:	6878      	ldr	r0, [r7, #4]
 800dcfe:	f000 fc93 	bl	800e628 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dd02:	2300      	movs	r3, #0
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3708      	adds	r7, #8
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}

0800dd0c <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800dd10:	2200      	movs	r2, #0
 800dd12:	4912      	ldr	r1, [pc, #72]	@ (800dd5c <MX_USB_Device_Init+0x50>)
 800dd14:	4812      	ldr	r0, [pc, #72]	@ (800dd60 <MX_USB_Device_Init+0x54>)
 800dd16:	f7fe fd43 	bl	800c7a0 <USBD_Init>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d001      	beq.n	800dd24 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800dd20:	f7f3 fb8e 	bl	8001440 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800dd24:	490f      	ldr	r1, [pc, #60]	@ (800dd64 <MX_USB_Device_Init+0x58>)
 800dd26:	480e      	ldr	r0, [pc, #56]	@ (800dd60 <MX_USB_Device_Init+0x54>)
 800dd28:	f7fe fd78 	bl	800c81c <USBD_RegisterClass>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d001      	beq.n	800dd36 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800dd32:	f7f3 fb85 	bl	8001440 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800dd36:	490c      	ldr	r1, [pc, #48]	@ (800dd68 <MX_USB_Device_Init+0x5c>)
 800dd38:	4809      	ldr	r0, [pc, #36]	@ (800dd60 <MX_USB_Device_Init+0x54>)
 800dd3a:	f7fe fc61 	bl	800c600 <USBD_CDC_RegisterInterface>
 800dd3e:	4603      	mov	r3, r0
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d001      	beq.n	800dd48 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800dd44:	f7f3 fb7c 	bl	8001440 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800dd48:	4805      	ldr	r0, [pc, #20]	@ (800dd60 <MX_USB_Device_Init+0x54>)
 800dd4a:	f7fe fdab 	bl	800c8a4 <USBD_Start>
 800dd4e:	4603      	mov	r3, r0
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d001      	beq.n	800dd58 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800dd54:	f7f3 fb74 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800dd58:	bf00      	nop
 800dd5a:	bd80      	pop	{r7, pc}
 800dd5c:	200000d0 	.word	0x200000d0
 800dd60:	20000554 	.word	0x20000554
 800dd64:	2000003c 	.word	0x2000003c
 800dd68:	200000bc 	.word	0x200000bc

0800dd6c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800dd70:	2200      	movs	r2, #0
 800dd72:	4905      	ldr	r1, [pc, #20]	@ (800dd88 <CDC_Init_FS+0x1c>)
 800dd74:	4805      	ldr	r0, [pc, #20]	@ (800dd8c <CDC_Init_FS+0x20>)
 800dd76:	f7fe fc5d 	bl	800c634 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800dd7a:	4905      	ldr	r1, [pc, #20]	@ (800dd90 <CDC_Init_FS+0x24>)
 800dd7c:	4803      	ldr	r0, [pc, #12]	@ (800dd8c <CDC_Init_FS+0x20>)
 800dd7e:	f7fe fc7b 	bl	800c678 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800dd82:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800dd84:	4618      	mov	r0, r3
 800dd86:	bd80      	pop	{r7, pc}
 800dd88:	20001030 	.word	0x20001030
 800dd8c:	20000554 	.word	0x20000554
 800dd90:	20000830 	.word	0x20000830

0800dd94 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800dd94:	b480      	push	{r7}
 800dd96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800dd98:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda2:	4770      	bx	lr

0800dda4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dda4:	b480      	push	{r7}
 800dda6:	b083      	sub	sp, #12
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	4603      	mov	r3, r0
 800ddac:	6039      	str	r1, [r7, #0]
 800ddae:	71fb      	strb	r3, [r7, #7]
 800ddb0:	4613      	mov	r3, r2
 800ddb2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ddb4:	79fb      	ldrb	r3, [r7, #7]
 800ddb6:	2b23      	cmp	r3, #35	@ 0x23
 800ddb8:	d84a      	bhi.n	800de50 <CDC_Control_FS+0xac>
 800ddba:	a201      	add	r2, pc, #4	@ (adr r2, 800ddc0 <CDC_Control_FS+0x1c>)
 800ddbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddc0:	0800de51 	.word	0x0800de51
 800ddc4:	0800de51 	.word	0x0800de51
 800ddc8:	0800de51 	.word	0x0800de51
 800ddcc:	0800de51 	.word	0x0800de51
 800ddd0:	0800de51 	.word	0x0800de51
 800ddd4:	0800de51 	.word	0x0800de51
 800ddd8:	0800de51 	.word	0x0800de51
 800dddc:	0800de51 	.word	0x0800de51
 800dde0:	0800de51 	.word	0x0800de51
 800dde4:	0800de51 	.word	0x0800de51
 800dde8:	0800de51 	.word	0x0800de51
 800ddec:	0800de51 	.word	0x0800de51
 800ddf0:	0800de51 	.word	0x0800de51
 800ddf4:	0800de51 	.word	0x0800de51
 800ddf8:	0800de51 	.word	0x0800de51
 800ddfc:	0800de51 	.word	0x0800de51
 800de00:	0800de51 	.word	0x0800de51
 800de04:	0800de51 	.word	0x0800de51
 800de08:	0800de51 	.word	0x0800de51
 800de0c:	0800de51 	.word	0x0800de51
 800de10:	0800de51 	.word	0x0800de51
 800de14:	0800de51 	.word	0x0800de51
 800de18:	0800de51 	.word	0x0800de51
 800de1c:	0800de51 	.word	0x0800de51
 800de20:	0800de51 	.word	0x0800de51
 800de24:	0800de51 	.word	0x0800de51
 800de28:	0800de51 	.word	0x0800de51
 800de2c:	0800de51 	.word	0x0800de51
 800de30:	0800de51 	.word	0x0800de51
 800de34:	0800de51 	.word	0x0800de51
 800de38:	0800de51 	.word	0x0800de51
 800de3c:	0800de51 	.word	0x0800de51
 800de40:	0800de51 	.word	0x0800de51
 800de44:	0800de51 	.word	0x0800de51
 800de48:	0800de51 	.word	0x0800de51
 800de4c:	0800de51 	.word	0x0800de51
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800de50:	bf00      	nop
  }

  return (USBD_OK);
 800de52:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800de54:	4618      	mov	r0, r3
 800de56:	370c      	adds	r7, #12
 800de58:	46bd      	mov	sp, r7
 800de5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5e:	4770      	bx	lr

0800de60 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b082      	sub	sp, #8
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
 800de68:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800de6a:	6879      	ldr	r1, [r7, #4]
 800de6c:	4805      	ldr	r0, [pc, #20]	@ (800de84 <CDC_Receive_FS+0x24>)
 800de6e:	f7fe fc03 	bl	800c678 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800de72:	4804      	ldr	r0, [pc, #16]	@ (800de84 <CDC_Receive_FS+0x24>)
 800de74:	f7fe fc5e 	bl	800c734 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800de78:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800de7a:	4618      	mov	r0, r3
 800de7c:	3708      	adds	r7, #8
 800de7e:	46bd      	mov	sp, r7
 800de80:	bd80      	pop	{r7, pc}
 800de82:	bf00      	nop
 800de84:	20000554 	.word	0x20000554

0800de88 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b084      	sub	sp, #16
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
 800de90:	460b      	mov	r3, r1
 800de92:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800de94:	2300      	movs	r3, #0
 800de96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800de98:	4b0d      	ldr	r3, [pc, #52]	@ (800ded0 <CDC_Transmit_FS+0x48>)
 800de9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800de9e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d001      	beq.n	800deae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800deaa:	2301      	movs	r3, #1
 800deac:	e00b      	b.n	800dec6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800deae:	887b      	ldrh	r3, [r7, #2]
 800deb0:	461a      	mov	r2, r3
 800deb2:	6879      	ldr	r1, [r7, #4]
 800deb4:	4806      	ldr	r0, [pc, #24]	@ (800ded0 <CDC_Transmit_FS+0x48>)
 800deb6:	f7fe fbbd 	bl	800c634 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800deba:	4805      	ldr	r0, [pc, #20]	@ (800ded0 <CDC_Transmit_FS+0x48>)
 800debc:	f7fe fbfa 	bl	800c6b4 <USBD_CDC_TransmitPacket>
 800dec0:	4603      	mov	r3, r0
 800dec2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800dec4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dec6:	4618      	mov	r0, r3
 800dec8:	3710      	adds	r7, #16
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}
 800dece:	bf00      	nop
 800ded0:	20000554 	.word	0x20000554

0800ded4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ded4:	b480      	push	{r7}
 800ded6:	b087      	sub	sp, #28
 800ded8:	af00      	add	r7, sp, #0
 800deda:	60f8      	str	r0, [r7, #12]
 800dedc:	60b9      	str	r1, [r7, #8]
 800dede:	4613      	mov	r3, r2
 800dee0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800dee2:	2300      	movs	r3, #0
 800dee4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800dee6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800deea:	4618      	mov	r0, r3
 800deec:	371c      	adds	r7, #28
 800deee:	46bd      	mov	sp, r7
 800def0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def4:	4770      	bx	lr
	...

0800def8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800def8:	b480      	push	{r7}
 800defa:	b083      	sub	sp, #12
 800defc:	af00      	add	r7, sp, #0
 800defe:	4603      	mov	r3, r0
 800df00:	6039      	str	r1, [r7, #0]
 800df02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	2212      	movs	r2, #18
 800df08:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800df0a:	4b03      	ldr	r3, [pc, #12]	@ (800df18 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800df0c:	4618      	mov	r0, r3
 800df0e:	370c      	adds	r7, #12
 800df10:	46bd      	mov	sp, r7
 800df12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df16:	4770      	bx	lr
 800df18:	200000f0 	.word	0x200000f0

0800df1c <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df1c:	b480      	push	{r7}
 800df1e:	b083      	sub	sp, #12
 800df20:	af00      	add	r7, sp, #0
 800df22:	4603      	mov	r3, r0
 800df24:	6039      	str	r1, [r7, #0]
 800df26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	2204      	movs	r2, #4
 800df2c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800df2e:	4b03      	ldr	r3, [pc, #12]	@ (800df3c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800df30:	4618      	mov	r0, r3
 800df32:	370c      	adds	r7, #12
 800df34:	46bd      	mov	sp, r7
 800df36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df3a:	4770      	bx	lr
 800df3c:	20000104 	.word	0x20000104

0800df40 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b082      	sub	sp, #8
 800df44:	af00      	add	r7, sp, #0
 800df46:	4603      	mov	r3, r0
 800df48:	6039      	str	r1, [r7, #0]
 800df4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800df4c:	79fb      	ldrb	r3, [r7, #7]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d105      	bne.n	800df5e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800df52:	683a      	ldr	r2, [r7, #0]
 800df54:	4907      	ldr	r1, [pc, #28]	@ (800df74 <USBD_CDC_ProductStrDescriptor+0x34>)
 800df56:	4808      	ldr	r0, [pc, #32]	@ (800df78 <USBD_CDC_ProductStrDescriptor+0x38>)
 800df58:	f7ff fdec 	bl	800db34 <USBD_GetString>
 800df5c:	e004      	b.n	800df68 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800df5e:	683a      	ldr	r2, [r7, #0]
 800df60:	4904      	ldr	r1, [pc, #16]	@ (800df74 <USBD_CDC_ProductStrDescriptor+0x34>)
 800df62:	4805      	ldr	r0, [pc, #20]	@ (800df78 <USBD_CDC_ProductStrDescriptor+0x38>)
 800df64:	f7ff fde6 	bl	800db34 <USBD_GetString>
  }
  return USBD_StrDesc;
 800df68:	4b02      	ldr	r3, [pc, #8]	@ (800df74 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800df6a:	4618      	mov	r0, r3
 800df6c:	3708      	adds	r7, #8
 800df6e:	46bd      	mov	sp, r7
 800df70:	bd80      	pop	{r7, pc}
 800df72:	bf00      	nop
 800df74:	20001830 	.word	0x20001830
 800df78:	080111ac 	.word	0x080111ac

0800df7c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b082      	sub	sp, #8
 800df80:	af00      	add	r7, sp, #0
 800df82:	4603      	mov	r3, r0
 800df84:	6039      	str	r1, [r7, #0]
 800df86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800df88:	683a      	ldr	r2, [r7, #0]
 800df8a:	4904      	ldr	r1, [pc, #16]	@ (800df9c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800df8c:	4804      	ldr	r0, [pc, #16]	@ (800dfa0 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800df8e:	f7ff fdd1 	bl	800db34 <USBD_GetString>
  return USBD_StrDesc;
 800df92:	4b02      	ldr	r3, [pc, #8]	@ (800df9c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800df94:	4618      	mov	r0, r3
 800df96:	3708      	adds	r7, #8
 800df98:	46bd      	mov	sp, r7
 800df9a:	bd80      	pop	{r7, pc}
 800df9c:	20001830 	.word	0x20001830
 800dfa0:	080111c4 	.word	0x080111c4

0800dfa4 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b082      	sub	sp, #8
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	4603      	mov	r3, r0
 800dfac:	6039      	str	r1, [r7, #0]
 800dfae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dfb0:	683b      	ldr	r3, [r7, #0]
 800dfb2:	221a      	movs	r2, #26
 800dfb4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dfb6:	f000 f843 	bl	800e040 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800dfba:	4b02      	ldr	r3, [pc, #8]	@ (800dfc4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	3708      	adds	r7, #8
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	bd80      	pop	{r7, pc}
 800dfc4:	20000108 	.word	0x20000108

0800dfc8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b082      	sub	sp, #8
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	4603      	mov	r3, r0
 800dfd0:	6039      	str	r1, [r7, #0]
 800dfd2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dfd4:	79fb      	ldrb	r3, [r7, #7]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d105      	bne.n	800dfe6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800dfda:	683a      	ldr	r2, [r7, #0]
 800dfdc:	4907      	ldr	r1, [pc, #28]	@ (800dffc <USBD_CDC_ConfigStrDescriptor+0x34>)
 800dfde:	4808      	ldr	r0, [pc, #32]	@ (800e000 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800dfe0:	f7ff fda8 	bl	800db34 <USBD_GetString>
 800dfe4:	e004      	b.n	800dff0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800dfe6:	683a      	ldr	r2, [r7, #0]
 800dfe8:	4904      	ldr	r1, [pc, #16]	@ (800dffc <USBD_CDC_ConfigStrDescriptor+0x34>)
 800dfea:	4805      	ldr	r0, [pc, #20]	@ (800e000 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800dfec:	f7ff fda2 	bl	800db34 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dff0:	4b02      	ldr	r3, [pc, #8]	@ (800dffc <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800dff2:	4618      	mov	r0, r3
 800dff4:	3708      	adds	r7, #8
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd80      	pop	{r7, pc}
 800dffa:	bf00      	nop
 800dffc:	20001830 	.word	0x20001830
 800e000:	080111d8 	.word	0x080111d8

0800e004 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b082      	sub	sp, #8
 800e008:	af00      	add	r7, sp, #0
 800e00a:	4603      	mov	r3, r0
 800e00c:	6039      	str	r1, [r7, #0]
 800e00e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e010:	79fb      	ldrb	r3, [r7, #7]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d105      	bne.n	800e022 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800e016:	683a      	ldr	r2, [r7, #0]
 800e018:	4907      	ldr	r1, [pc, #28]	@ (800e038 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800e01a:	4808      	ldr	r0, [pc, #32]	@ (800e03c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800e01c:	f7ff fd8a 	bl	800db34 <USBD_GetString>
 800e020:	e004      	b.n	800e02c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800e022:	683a      	ldr	r2, [r7, #0]
 800e024:	4904      	ldr	r1, [pc, #16]	@ (800e038 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800e026:	4805      	ldr	r0, [pc, #20]	@ (800e03c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800e028:	f7ff fd84 	bl	800db34 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e02c:	4b02      	ldr	r3, [pc, #8]	@ (800e038 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800e02e:	4618      	mov	r0, r3
 800e030:	3708      	adds	r7, #8
 800e032:	46bd      	mov	sp, r7
 800e034:	bd80      	pop	{r7, pc}
 800e036:	bf00      	nop
 800e038:	20001830 	.word	0x20001830
 800e03c:	080111e4 	.word	0x080111e4

0800e040 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b084      	sub	sp, #16
 800e044:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e046:	4b0f      	ldr	r3, [pc, #60]	@ (800e084 <Get_SerialNum+0x44>)
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e04c:	4b0e      	ldr	r3, [pc, #56]	@ (800e088 <Get_SerialNum+0x48>)
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e052:	4b0e      	ldr	r3, [pc, #56]	@ (800e08c <Get_SerialNum+0x4c>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e058:	68fa      	ldr	r2, [r7, #12]
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	4413      	add	r3, r2
 800e05e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e060:	68fb      	ldr	r3, [r7, #12]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d009      	beq.n	800e07a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e066:	2208      	movs	r2, #8
 800e068:	4909      	ldr	r1, [pc, #36]	@ (800e090 <Get_SerialNum+0x50>)
 800e06a:	68f8      	ldr	r0, [r7, #12]
 800e06c:	f000 f814 	bl	800e098 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e070:	2204      	movs	r2, #4
 800e072:	4908      	ldr	r1, [pc, #32]	@ (800e094 <Get_SerialNum+0x54>)
 800e074:	68b8      	ldr	r0, [r7, #8]
 800e076:	f000 f80f 	bl	800e098 <IntToUnicode>
  }
}
 800e07a:	bf00      	nop
 800e07c:	3710      	adds	r7, #16
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}
 800e082:	bf00      	nop
 800e084:	1fff7590 	.word	0x1fff7590
 800e088:	1fff7594 	.word	0x1fff7594
 800e08c:	1fff7598 	.word	0x1fff7598
 800e090:	2000010a 	.word	0x2000010a
 800e094:	2000011a 	.word	0x2000011a

0800e098 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e098:	b480      	push	{r7}
 800e09a:	b087      	sub	sp, #28
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	60f8      	str	r0, [r7, #12]
 800e0a0:	60b9      	str	r1, [r7, #8]
 800e0a2:	4613      	mov	r3, r2
 800e0a4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	75fb      	strb	r3, [r7, #23]
 800e0ae:	e027      	b.n	800e100 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	0f1b      	lsrs	r3, r3, #28
 800e0b4:	2b09      	cmp	r3, #9
 800e0b6:	d80b      	bhi.n	800e0d0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	0f1b      	lsrs	r3, r3, #28
 800e0bc:	b2da      	uxtb	r2, r3
 800e0be:	7dfb      	ldrb	r3, [r7, #23]
 800e0c0:	005b      	lsls	r3, r3, #1
 800e0c2:	4619      	mov	r1, r3
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	440b      	add	r3, r1
 800e0c8:	3230      	adds	r2, #48	@ 0x30
 800e0ca:	b2d2      	uxtb	r2, r2
 800e0cc:	701a      	strb	r2, [r3, #0]
 800e0ce:	e00a      	b.n	800e0e6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	0f1b      	lsrs	r3, r3, #28
 800e0d4:	b2da      	uxtb	r2, r3
 800e0d6:	7dfb      	ldrb	r3, [r7, #23]
 800e0d8:	005b      	lsls	r3, r3, #1
 800e0da:	4619      	mov	r1, r3
 800e0dc:	68bb      	ldr	r3, [r7, #8]
 800e0de:	440b      	add	r3, r1
 800e0e0:	3237      	adds	r2, #55	@ 0x37
 800e0e2:	b2d2      	uxtb	r2, r2
 800e0e4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	011b      	lsls	r3, r3, #4
 800e0ea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e0ec:	7dfb      	ldrb	r3, [r7, #23]
 800e0ee:	005b      	lsls	r3, r3, #1
 800e0f0:	3301      	adds	r3, #1
 800e0f2:	68ba      	ldr	r2, [r7, #8]
 800e0f4:	4413      	add	r3, r2
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e0fa:	7dfb      	ldrb	r3, [r7, #23]
 800e0fc:	3301      	adds	r3, #1
 800e0fe:	75fb      	strb	r3, [r7, #23]
 800e100:	7dfa      	ldrb	r2, [r7, #23]
 800e102:	79fb      	ldrb	r3, [r7, #7]
 800e104:	429a      	cmp	r2, r3
 800e106:	d3d3      	bcc.n	800e0b0 <IntToUnicode+0x18>
  }
}
 800e108:	bf00      	nop
 800e10a:	bf00      	nop
 800e10c:	371c      	adds	r7, #28
 800e10e:	46bd      	mov	sp, r7
 800e110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e114:	4770      	bx	lr

0800e116 <LL_AHB2_GRP1_EnableClock>:
{
 800e116:	b480      	push	{r7}
 800e118:	b085      	sub	sp, #20
 800e11a:	af00      	add	r7, sp, #0
 800e11c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800e11e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e122:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e124:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	4313      	orrs	r3, r2
 800e12c:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800e12e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e132:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	4013      	ands	r3, r2
 800e138:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e13a:	68fb      	ldr	r3, [r7, #12]
}
 800e13c:	bf00      	nop
 800e13e:	3714      	adds	r7, #20
 800e140:	46bd      	mov	sp, r7
 800e142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e146:	4770      	bx	lr

0800e148 <LL_APB1_GRP1_EnableClock>:
{
 800e148:	b480      	push	{r7}
 800e14a:	b085      	sub	sp, #20
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800e150:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e154:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e156:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	4313      	orrs	r3, r2
 800e15e:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800e160:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e164:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	4013      	ands	r3, r2
 800e16a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e16c:	68fb      	ldr	r3, [r7, #12]
}
 800e16e:	bf00      	nop
 800e170:	3714      	adds	r7, #20
 800e172:	46bd      	mov	sp, r7
 800e174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e178:	4770      	bx	lr
	...

0800e17c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e17c:	b580      	push	{r7, lr}
 800e17e:	b088      	sub	sp, #32
 800e180:	af00      	add	r7, sp, #0
 800e182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e184:	f107 030c 	add.w	r3, r7, #12
 800e188:	2200      	movs	r2, #0
 800e18a:	601a      	str	r2, [r3, #0]
 800e18c:	605a      	str	r2, [r3, #4]
 800e18e:	609a      	str	r2, [r3, #8]
 800e190:	60da      	str	r2, [r3, #12]
 800e192:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	4a17      	ldr	r2, [pc, #92]	@ (800e1f8 <HAL_PCD_MspInit+0x7c>)
 800e19a:	4293      	cmp	r3, r2
 800e19c:	d128      	bne.n	800e1f0 <HAL_PCD_MspInit+0x74>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e19e:	2001      	movs	r0, #1
 800e1a0:	f7ff ffb9 	bl	800e116 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 800e1a4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800e1a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e1aa:	2302      	movs	r3, #2
 800e1ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800e1b6:	230a      	movs	r3, #10
 800e1b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e1ba:	f107 030c 	add.w	r3, r7, #12
 800e1be:	4619      	mov	r1, r3
 800e1c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800e1c4:	f7f5 fd08 	bl	8003bd8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e1c8:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 800e1cc:	f7ff ffbc 	bl	800e148 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	2100      	movs	r1, #0
 800e1d4:	2013      	movs	r0, #19
 800e1d6:	f7f5 f9e8 	bl	80035aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 800e1da:	2013      	movs	r0, #19
 800e1dc:	f7f5 f9ff 	bl	80035de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	2100      	movs	r1, #0
 800e1e4:	2014      	movs	r0, #20
 800e1e6:	f7f5 f9e0 	bl	80035aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800e1ea:	2014      	movs	r0, #20
 800e1ec:	f7f5 f9f7 	bl	80035de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800e1f0:	bf00      	nop
 800e1f2:	3720      	adds	r7, #32
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	bd80      	pop	{r7, pc}
 800e1f8:	40006800 	.word	0x40006800

0800e1fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b082      	sub	sp, #8
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800e210:	4619      	mov	r1, r3
 800e212:	4610      	mov	r0, r2
 800e214:	f7fe fb93 	bl	800c93e <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800e218:	bf00      	nop
 800e21a:	3708      	adds	r7, #8
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}

0800e220 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b082      	sub	sp, #8
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
 800e228:	460b      	mov	r3, r1
 800e22a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800e232:	78fa      	ldrb	r2, [r7, #3]
 800e234:	6879      	ldr	r1, [r7, #4]
 800e236:	4613      	mov	r3, r2
 800e238:	009b      	lsls	r3, r3, #2
 800e23a:	4413      	add	r3, r2
 800e23c:	00db      	lsls	r3, r3, #3
 800e23e:	440b      	add	r3, r1
 800e240:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e244:	681a      	ldr	r2, [r3, #0]
 800e246:	78fb      	ldrb	r3, [r7, #3]
 800e248:	4619      	mov	r1, r3
 800e24a:	f7fe fbcd 	bl	800c9e8 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800e24e:	bf00      	nop
 800e250:	3708      	adds	r7, #8
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}

0800e256 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e256:	b580      	push	{r7, lr}
 800e258:	b082      	sub	sp, #8
 800e25a:	af00      	add	r7, sp, #0
 800e25c:	6078      	str	r0, [r7, #4]
 800e25e:	460b      	mov	r3, r1
 800e260:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 800e268:	78fa      	ldrb	r2, [r7, #3]
 800e26a:	6879      	ldr	r1, [r7, #4]
 800e26c:	4613      	mov	r3, r2
 800e26e:	009b      	lsls	r3, r3, #2
 800e270:	4413      	add	r3, r2
 800e272:	00db      	lsls	r3, r3, #3
 800e274:	440b      	add	r3, r1
 800e276:	3324      	adds	r3, #36	@ 0x24
 800e278:	681a      	ldr	r2, [r3, #0]
 800e27a:	78fb      	ldrb	r3, [r7, #3]
 800e27c:	4619      	mov	r1, r3
 800e27e:	f7fe fc66 	bl	800cb4e <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800e282:	bf00      	nop
 800e284:	3708      	adds	r7, #8
 800e286:	46bd      	mov	sp, r7
 800e288:	bd80      	pop	{r7, pc}

0800e28a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e28a:	b580      	push	{r7, lr}
 800e28c:	b082      	sub	sp, #8
 800e28e:	af00      	add	r7, sp, #0
 800e290:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e298:	4618      	mov	r0, r3
 800e29a:	f7fe fda0 	bl	800cdde <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800e29e:	bf00      	nop
 800e2a0:	3708      	adds	r7, #8
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	bd80      	pop	{r7, pc}

0800e2a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2a6:	b580      	push	{r7, lr}
 800e2a8:	b084      	sub	sp, #16
 800e2aa:	af00      	add	r7, sp, #0
 800e2ac:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e2ae:	2301      	movs	r3, #1
 800e2b0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	795b      	ldrb	r3, [r3, #5]
 800e2b6:	2b02      	cmp	r3, #2
 800e2b8:	d001      	beq.n	800e2be <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e2ba:	f7f3 f8c1 	bl	8001440 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e2c4:	7bfa      	ldrb	r2, [r7, #15]
 800e2c6:	4611      	mov	r1, r2
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	f7fe fd44 	bl	800cd56 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	f7fe fcec 	bl	800ccb2 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800e2da:	bf00      	nop
 800e2dc:	3710      	adds	r7, #16
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}
	...

0800e2e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b082      	sub	sp, #8
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	f7fe fd3f 	bl	800cd76 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	7a5b      	ldrb	r3, [r3, #9]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d005      	beq.n	800e30c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e300:	4b04      	ldr	r3, [pc, #16]	@ (800e314 <HAL_PCD_SuspendCallback+0x30>)
 800e302:	691b      	ldr	r3, [r3, #16]
 800e304:	4a03      	ldr	r2, [pc, #12]	@ (800e314 <HAL_PCD_SuspendCallback+0x30>)
 800e306:	f043 0306 	orr.w	r3, r3, #6
 800e30a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800e30c:	bf00      	nop
 800e30e:	3708      	adds	r7, #8
 800e310:	46bd      	mov	sp, r7
 800e312:	bd80      	pop	{r7, pc}
 800e314:	e000ed00 	.word	0xe000ed00

0800e318 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b082      	sub	sp, #8
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	7a5b      	ldrb	r3, [r3, #9]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d007      	beq.n	800e338 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e328:	4b08      	ldr	r3, [pc, #32]	@ (800e34c <HAL_PCD_ResumeCallback+0x34>)
 800e32a:	691b      	ldr	r3, [r3, #16]
 800e32c:	4a07      	ldr	r2, [pc, #28]	@ (800e34c <HAL_PCD_ResumeCallback+0x34>)
 800e32e:	f023 0306 	bic.w	r3, r3, #6
 800e332:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800e334:	f000 f9fa 	bl	800e72c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e33e:	4618      	mov	r0, r3
 800e340:	f7fe fd35 	bl	800cdae <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800e344:	bf00      	nop
 800e346:	3708      	adds	r7, #8
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd80      	pop	{r7, pc}
 800e34c:	e000ed00 	.word	0xe000ed00

0800e350 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b082      	sub	sp, #8
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800e358:	4a2c      	ldr	r2, [pc, #176]	@ (800e40c <USBD_LL_Init+0xbc>)
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	4a2a      	ldr	r2, [pc, #168]	@ (800e40c <USBD_LL_Init+0xbc>)
 800e364:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 800e368:	f7f8 fa98 	bl	800689c <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 800e36c:	4b27      	ldr	r3, [pc, #156]	@ (800e40c <USBD_LL_Init+0xbc>)
 800e36e:	4a28      	ldr	r2, [pc, #160]	@ (800e410 <USBD_LL_Init+0xc0>)
 800e370:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e372:	4b26      	ldr	r3, [pc, #152]	@ (800e40c <USBD_LL_Init+0xbc>)
 800e374:	2208      	movs	r2, #8
 800e376:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e378:	4b24      	ldr	r3, [pc, #144]	@ (800e40c <USBD_LL_Init+0xbc>)
 800e37a:	2202      	movs	r2, #2
 800e37c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e37e:	4b23      	ldr	r3, [pc, #140]	@ (800e40c <USBD_LL_Init+0xbc>)
 800e380:	2202      	movs	r2, #2
 800e382:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800e384:	4b21      	ldr	r3, [pc, #132]	@ (800e40c <USBD_LL_Init+0xbc>)
 800e386:	2200      	movs	r2, #0
 800e388:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e38a:	4b20      	ldr	r3, [pc, #128]	@ (800e40c <USBD_LL_Init+0xbc>)
 800e38c:	2200      	movs	r2, #0
 800e38e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800e390:	4b1e      	ldr	r3, [pc, #120]	@ (800e40c <USBD_LL_Init+0xbc>)
 800e392:	2200      	movs	r2, #0
 800e394:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e396:	4b1d      	ldr	r3, [pc, #116]	@ (800e40c <USBD_LL_Init+0xbc>)
 800e398:	2200      	movs	r2, #0
 800e39a:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e39c:	481b      	ldr	r0, [pc, #108]	@ (800e40c <USBD_LL_Init+0xbc>)
 800e39e:	f7f6 fd2b 	bl	8004df8 <HAL_PCD_Init>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d001      	beq.n	800e3ac <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 800e3a8:	f7f3 f84a 	bl	8001440 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e3b2:	2318      	movs	r3, #24
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	2100      	movs	r1, #0
 800e3b8:	f7f8 f9e4 	bl	8006784 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e3c2:	2358      	movs	r3, #88	@ 0x58
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	2180      	movs	r1, #128	@ 0x80
 800e3c8:	f7f8 f9dc 	bl	8006784 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e3d2:	23c0      	movs	r3, #192	@ 0xc0
 800e3d4:	2200      	movs	r2, #0
 800e3d6:	2181      	movs	r1, #129	@ 0x81
 800e3d8:	f7f8 f9d4 	bl	8006784 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e3e2:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	2101      	movs	r1, #1
 800e3ea:	f7f8 f9cb 	bl	8006784 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e3f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800e3f8:	2200      	movs	r2, #0
 800e3fa:	2182      	movs	r1, #130	@ 0x82
 800e3fc:	f7f8 f9c2 	bl	8006784 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800e400:	2300      	movs	r3, #0
}
 800e402:	4618      	mov	r0, r3
 800e404:	3708      	adds	r7, #8
 800e406:	46bd      	mov	sp, r7
 800e408:	bd80      	pop	{r7, pc}
 800e40a:	bf00      	nop
 800e40c:	20001a30 	.word	0x20001a30
 800e410:	40006800 	.word	0x40006800

0800e414 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b084      	sub	sp, #16
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e41c:	2300      	movs	r3, #0
 800e41e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e420:	2300      	movs	r3, #0
 800e422:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e42a:	4618      	mov	r0, r3
 800e42c:	f7f6 fdb2 	bl	8004f94 <HAL_PCD_Start>
 800e430:	4603      	mov	r3, r0
 800e432:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e434:	7bfb      	ldrb	r3, [r7, #15]
 800e436:	4618      	mov	r0, r3
 800e438:	f000 f97e 	bl	800e738 <USBD_Get_USB_Status>
 800e43c:	4603      	mov	r3, r0
 800e43e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e440:	7bbb      	ldrb	r3, [r7, #14]
}
 800e442:	4618      	mov	r0, r3
 800e444:	3710      	adds	r7, #16
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}

0800e44a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e44a:	b580      	push	{r7, lr}
 800e44c:	b084      	sub	sp, #16
 800e44e:	af00      	add	r7, sp, #0
 800e450:	6078      	str	r0, [r7, #4]
 800e452:	4608      	mov	r0, r1
 800e454:	4611      	mov	r1, r2
 800e456:	461a      	mov	r2, r3
 800e458:	4603      	mov	r3, r0
 800e45a:	70fb      	strb	r3, [r7, #3]
 800e45c:	460b      	mov	r3, r1
 800e45e:	70bb      	strb	r3, [r7, #2]
 800e460:	4613      	mov	r3, r2
 800e462:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e464:	2300      	movs	r3, #0
 800e466:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e468:	2300      	movs	r3, #0
 800e46a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e472:	78bb      	ldrb	r3, [r7, #2]
 800e474:	883a      	ldrh	r2, [r7, #0]
 800e476:	78f9      	ldrb	r1, [r7, #3]
 800e478:	f7f6 fef9 	bl	800526e <HAL_PCD_EP_Open>
 800e47c:	4603      	mov	r3, r0
 800e47e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e480:	7bfb      	ldrb	r3, [r7, #15]
 800e482:	4618      	mov	r0, r3
 800e484:	f000 f958 	bl	800e738 <USBD_Get_USB_Status>
 800e488:	4603      	mov	r3, r0
 800e48a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e48c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e48e:	4618      	mov	r0, r3
 800e490:	3710      	adds	r7, #16
 800e492:	46bd      	mov	sp, r7
 800e494:	bd80      	pop	{r7, pc}

0800e496 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e496:	b580      	push	{r7, lr}
 800e498:	b084      	sub	sp, #16
 800e49a:	af00      	add	r7, sp, #0
 800e49c:	6078      	str	r0, [r7, #4]
 800e49e:	460b      	mov	r3, r1
 800e4a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e4b0:	78fa      	ldrb	r2, [r7, #3]
 800e4b2:	4611      	mov	r1, r2
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f7f6 ff37 	bl	8005328 <HAL_PCD_EP_Close>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4be:	7bfb      	ldrb	r3, [r7, #15]
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f000 f939 	bl	800e738 <USBD_Get_USB_Status>
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e4ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	3710      	adds	r7, #16
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd80      	pop	{r7, pc}

0800e4d4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b084      	sub	sp, #16
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
 800e4dc:	460b      	mov	r3, r1
 800e4de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e4ee:	78fa      	ldrb	r2, [r7, #3]
 800e4f0:	4611      	mov	r1, r2
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	f7f6 ffe0 	bl	80054b8 <HAL_PCD_EP_SetStall>
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4fc:	7bfb      	ldrb	r3, [r7, #15]
 800e4fe:	4618      	mov	r0, r3
 800e500:	f000 f91a 	bl	800e738 <USBD_Get_USB_Status>
 800e504:	4603      	mov	r3, r0
 800e506:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e508:	7bbb      	ldrb	r3, [r7, #14]
}
 800e50a:	4618      	mov	r0, r3
 800e50c:	3710      	adds	r7, #16
 800e50e:	46bd      	mov	sp, r7
 800e510:	bd80      	pop	{r7, pc}

0800e512 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e512:	b580      	push	{r7, lr}
 800e514:	b084      	sub	sp, #16
 800e516:	af00      	add	r7, sp, #0
 800e518:	6078      	str	r0, [r7, #4]
 800e51a:	460b      	mov	r3, r1
 800e51c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e51e:	2300      	movs	r3, #0
 800e520:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e522:	2300      	movs	r3, #0
 800e524:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e52c:	78fa      	ldrb	r2, [r7, #3]
 800e52e:	4611      	mov	r1, r2
 800e530:	4618      	mov	r0, r3
 800e532:	f7f7 f813 	bl	800555c <HAL_PCD_EP_ClrStall>
 800e536:	4603      	mov	r3, r0
 800e538:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e53a:	7bfb      	ldrb	r3, [r7, #15]
 800e53c:	4618      	mov	r0, r3
 800e53e:	f000 f8fb 	bl	800e738 <USBD_Get_USB_Status>
 800e542:	4603      	mov	r3, r0
 800e544:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e546:	7bbb      	ldrb	r3, [r7, #14]
}
 800e548:	4618      	mov	r0, r3
 800e54a:	3710      	adds	r7, #16
 800e54c:	46bd      	mov	sp, r7
 800e54e:	bd80      	pop	{r7, pc}

0800e550 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e550:	b480      	push	{r7}
 800e552:	b085      	sub	sp, #20
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
 800e558:	460b      	mov	r3, r1
 800e55a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e562:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e564:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	da0b      	bge.n	800e584 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e56c:	78fb      	ldrb	r3, [r7, #3]
 800e56e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e572:	68f9      	ldr	r1, [r7, #12]
 800e574:	4613      	mov	r3, r2
 800e576:	009b      	lsls	r3, r3, #2
 800e578:	4413      	add	r3, r2
 800e57a:	00db      	lsls	r3, r3, #3
 800e57c:	440b      	add	r3, r1
 800e57e:	3312      	adds	r3, #18
 800e580:	781b      	ldrb	r3, [r3, #0]
 800e582:	e00b      	b.n	800e59c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e584:	78fb      	ldrb	r3, [r7, #3]
 800e586:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e58a:	68f9      	ldr	r1, [r7, #12]
 800e58c:	4613      	mov	r3, r2
 800e58e:	009b      	lsls	r3, r3, #2
 800e590:	4413      	add	r3, r2
 800e592:	00db      	lsls	r3, r3, #3
 800e594:	440b      	add	r3, r1
 800e596:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800e59a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e59c:	4618      	mov	r0, r3
 800e59e:	3714      	adds	r7, #20
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a6:	4770      	bx	lr

0800e5a8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b084      	sub	sp, #16
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
 800e5b0:	460b      	mov	r3, r1
 800e5b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5b8:	2300      	movs	r3, #0
 800e5ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e5c2:	78fa      	ldrb	r2, [r7, #3]
 800e5c4:	4611      	mov	r1, r2
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	f7f6 fe2d 	bl	8005226 <HAL_PCD_SetAddress>
 800e5cc:	4603      	mov	r3, r0
 800e5ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e5d0:	7bfb      	ldrb	r3, [r7, #15]
 800e5d2:	4618      	mov	r0, r3
 800e5d4:	f000 f8b0 	bl	800e738 <USBD_Get_USB_Status>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e5dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e5de:	4618      	mov	r0, r3
 800e5e0:	3710      	adds	r7, #16
 800e5e2:	46bd      	mov	sp, r7
 800e5e4:	bd80      	pop	{r7, pc}

0800e5e6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e5e6:	b580      	push	{r7, lr}
 800e5e8:	b086      	sub	sp, #24
 800e5ea:	af00      	add	r7, sp, #0
 800e5ec:	60f8      	str	r0, [r7, #12]
 800e5ee:	607a      	str	r2, [r7, #4]
 800e5f0:	603b      	str	r3, [r7, #0]
 800e5f2:	460b      	mov	r3, r1
 800e5f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e604:	7af9      	ldrb	r1, [r7, #11]
 800e606:	683b      	ldr	r3, [r7, #0]
 800e608:	687a      	ldr	r2, [r7, #4]
 800e60a:	f7f6 ff1e 	bl	800544a <HAL_PCD_EP_Transmit>
 800e60e:	4603      	mov	r3, r0
 800e610:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e612:	7dfb      	ldrb	r3, [r7, #23]
 800e614:	4618      	mov	r0, r3
 800e616:	f000 f88f 	bl	800e738 <USBD_Get_USB_Status>
 800e61a:	4603      	mov	r3, r0
 800e61c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e61e:	7dbb      	ldrb	r3, [r7, #22]
}
 800e620:	4618      	mov	r0, r3
 800e622:	3718      	adds	r7, #24
 800e624:	46bd      	mov	sp, r7
 800e626:	bd80      	pop	{r7, pc}

0800e628 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e628:	b580      	push	{r7, lr}
 800e62a:	b086      	sub	sp, #24
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	60f8      	str	r0, [r7, #12]
 800e630:	607a      	str	r2, [r7, #4]
 800e632:	603b      	str	r3, [r7, #0]
 800e634:	460b      	mov	r3, r1
 800e636:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e638:	2300      	movs	r3, #0
 800e63a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e63c:	2300      	movs	r3, #0
 800e63e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e646:	7af9      	ldrb	r1, [r7, #11]
 800e648:	683b      	ldr	r3, [r7, #0]
 800e64a:	687a      	ldr	r2, [r7, #4]
 800e64c:	f7f6 feb4 	bl	80053b8 <HAL_PCD_EP_Receive>
 800e650:	4603      	mov	r3, r0
 800e652:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e654:	7dfb      	ldrb	r3, [r7, #23]
 800e656:	4618      	mov	r0, r3
 800e658:	f000 f86e 	bl	800e738 <USBD_Get_USB_Status>
 800e65c:	4603      	mov	r3, r0
 800e65e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e660:	7dbb      	ldrb	r3, [r7, #22]
}
 800e662:	4618      	mov	r0, r3
 800e664:	3718      	adds	r7, #24
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}

0800e66a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e66a:	b580      	push	{r7, lr}
 800e66c:	b082      	sub	sp, #8
 800e66e:	af00      	add	r7, sp, #0
 800e670:	6078      	str	r0, [r7, #4]
 800e672:	460b      	mov	r3, r1
 800e674:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e67c:	78fa      	ldrb	r2, [r7, #3]
 800e67e:	4611      	mov	r1, r2
 800e680:	4618      	mov	r0, r3
 800e682:	f7f6 feca 	bl	800541a <HAL_PCD_EP_GetRxCount>
 800e686:	4603      	mov	r3, r0
}
 800e688:	4618      	mov	r0, r3
 800e68a:	3708      	adds	r7, #8
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bd80      	pop	{r7, pc}

0800e690 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b082      	sub	sp, #8
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
 800e698:	460b      	mov	r3, r1
 800e69a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800e69c:	78fb      	ldrb	r3, [r7, #3]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d002      	beq.n	800e6a8 <HAL_PCDEx_LPM_Callback+0x18>
 800e6a2:	2b01      	cmp	r3, #1
 800e6a4:	d013      	beq.n	800e6ce <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800e6a6:	e023      	b.n	800e6f0 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	7a5b      	ldrb	r3, [r3, #9]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d007      	beq.n	800e6c0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e6b0:	f000 f83c 	bl	800e72c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e6b4:	4b10      	ldr	r3, [pc, #64]	@ (800e6f8 <HAL_PCDEx_LPM_Callback+0x68>)
 800e6b6:	691b      	ldr	r3, [r3, #16]
 800e6b8:	4a0f      	ldr	r2, [pc, #60]	@ (800e6f8 <HAL_PCDEx_LPM_Callback+0x68>)
 800e6ba:	f023 0306 	bic.w	r3, r3, #6
 800e6be:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	f7fe fb71 	bl	800cdae <USBD_LL_Resume>
    break;
 800e6cc:	e010      	b.n	800e6f0 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	f7fe fb4e 	bl	800cd76 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	7a5b      	ldrb	r3, [r3, #9]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d005      	beq.n	800e6ee <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e6e2:	4b05      	ldr	r3, [pc, #20]	@ (800e6f8 <HAL_PCDEx_LPM_Callback+0x68>)
 800e6e4:	691b      	ldr	r3, [r3, #16]
 800e6e6:	4a04      	ldr	r2, [pc, #16]	@ (800e6f8 <HAL_PCDEx_LPM_Callback+0x68>)
 800e6e8:	f043 0306 	orr.w	r3, r3, #6
 800e6ec:	6113      	str	r3, [r2, #16]
    break;
 800e6ee:	bf00      	nop
}
 800e6f0:	bf00      	nop
 800e6f2:	3708      	adds	r7, #8
 800e6f4:	46bd      	mov	sp, r7
 800e6f6:	bd80      	pop	{r7, pc}
 800e6f8:	e000ed00 	.word	0xe000ed00

0800e6fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e6fc:	b480      	push	{r7}
 800e6fe:	b083      	sub	sp, #12
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e704:	4b03      	ldr	r3, [pc, #12]	@ (800e714 <USBD_static_malloc+0x18>)
}
 800e706:	4618      	mov	r0, r3
 800e708:	370c      	adds	r7, #12
 800e70a:	46bd      	mov	sp, r7
 800e70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e710:	4770      	bx	lr
 800e712:	bf00      	nop
 800e714:	20001d0c 	.word	0x20001d0c

0800e718 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e718:	b480      	push	{r7}
 800e71a:	b083      	sub	sp, #12
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800e720:	bf00      	nop
 800e722:	370c      	adds	r7, #12
 800e724:	46bd      	mov	sp, r7
 800e726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72a:	4770      	bx	lr

0800e72c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e730:	f7f2 fc94 	bl	800105c <SystemClock_Config>
}
 800e734:	bf00      	nop
 800e736:	bd80      	pop	{r7, pc}

0800e738 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e738:	b480      	push	{r7}
 800e73a:	b085      	sub	sp, #20
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	4603      	mov	r3, r0
 800e740:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e742:	2300      	movs	r3, #0
 800e744:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e746:	79fb      	ldrb	r3, [r7, #7]
 800e748:	2b03      	cmp	r3, #3
 800e74a:	d817      	bhi.n	800e77c <USBD_Get_USB_Status+0x44>
 800e74c:	a201      	add	r2, pc, #4	@ (adr r2, 800e754 <USBD_Get_USB_Status+0x1c>)
 800e74e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e752:	bf00      	nop
 800e754:	0800e765 	.word	0x0800e765
 800e758:	0800e76b 	.word	0x0800e76b
 800e75c:	0800e771 	.word	0x0800e771
 800e760:	0800e777 	.word	0x0800e777
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e764:	2300      	movs	r3, #0
 800e766:	73fb      	strb	r3, [r7, #15]
    break;
 800e768:	e00b      	b.n	800e782 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e76a:	2303      	movs	r3, #3
 800e76c:	73fb      	strb	r3, [r7, #15]
    break;
 800e76e:	e008      	b.n	800e782 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e770:	2301      	movs	r3, #1
 800e772:	73fb      	strb	r3, [r7, #15]
    break;
 800e774:	e005      	b.n	800e782 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e776:	2303      	movs	r3, #3
 800e778:	73fb      	strb	r3, [r7, #15]
    break;
 800e77a:	e002      	b.n	800e782 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e77c:	2303      	movs	r3, #3
 800e77e:	73fb      	strb	r3, [r7, #15]
    break;
 800e780:	bf00      	nop
  }
  return usb_status;
 800e782:	7bfb      	ldrb	r3, [r7, #15]
}
 800e784:	4618      	mov	r0, r3
 800e786:	3714      	adds	r7, #20
 800e788:	46bd      	mov	sp, r7
 800e78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78e:	4770      	bx	lr

0800e790 <__cvt>:
 800e790:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e794:	ec57 6b10 	vmov	r6, r7, d0
 800e798:	2f00      	cmp	r7, #0
 800e79a:	460c      	mov	r4, r1
 800e79c:	4619      	mov	r1, r3
 800e79e:	463b      	mov	r3, r7
 800e7a0:	bfbb      	ittet	lt
 800e7a2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800e7a6:	461f      	movlt	r7, r3
 800e7a8:	2300      	movge	r3, #0
 800e7aa:	232d      	movlt	r3, #45	@ 0x2d
 800e7ac:	700b      	strb	r3, [r1, #0]
 800e7ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e7b0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800e7b4:	4691      	mov	r9, r2
 800e7b6:	f023 0820 	bic.w	r8, r3, #32
 800e7ba:	bfbc      	itt	lt
 800e7bc:	4632      	movlt	r2, r6
 800e7be:	4616      	movlt	r6, r2
 800e7c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e7c4:	d005      	beq.n	800e7d2 <__cvt+0x42>
 800e7c6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800e7ca:	d100      	bne.n	800e7ce <__cvt+0x3e>
 800e7cc:	3401      	adds	r4, #1
 800e7ce:	2102      	movs	r1, #2
 800e7d0:	e000      	b.n	800e7d4 <__cvt+0x44>
 800e7d2:	2103      	movs	r1, #3
 800e7d4:	ab03      	add	r3, sp, #12
 800e7d6:	9301      	str	r3, [sp, #4]
 800e7d8:	ab02      	add	r3, sp, #8
 800e7da:	9300      	str	r3, [sp, #0]
 800e7dc:	ec47 6b10 	vmov	d0, r6, r7
 800e7e0:	4653      	mov	r3, sl
 800e7e2:	4622      	mov	r2, r4
 800e7e4:	f000 fe60 	bl	800f4a8 <_dtoa_r>
 800e7e8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800e7ec:	4605      	mov	r5, r0
 800e7ee:	d119      	bne.n	800e824 <__cvt+0x94>
 800e7f0:	f019 0f01 	tst.w	r9, #1
 800e7f4:	d00e      	beq.n	800e814 <__cvt+0x84>
 800e7f6:	eb00 0904 	add.w	r9, r0, r4
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	4630      	mov	r0, r6
 800e800:	4639      	mov	r1, r7
 800e802:	f7f2 f939 	bl	8000a78 <__aeabi_dcmpeq>
 800e806:	b108      	cbz	r0, 800e80c <__cvt+0x7c>
 800e808:	f8cd 900c 	str.w	r9, [sp, #12]
 800e80c:	2230      	movs	r2, #48	@ 0x30
 800e80e:	9b03      	ldr	r3, [sp, #12]
 800e810:	454b      	cmp	r3, r9
 800e812:	d31e      	bcc.n	800e852 <__cvt+0xc2>
 800e814:	9b03      	ldr	r3, [sp, #12]
 800e816:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e818:	1b5b      	subs	r3, r3, r5
 800e81a:	4628      	mov	r0, r5
 800e81c:	6013      	str	r3, [r2, #0]
 800e81e:	b004      	add	sp, #16
 800e820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e824:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800e828:	eb00 0904 	add.w	r9, r0, r4
 800e82c:	d1e5      	bne.n	800e7fa <__cvt+0x6a>
 800e82e:	7803      	ldrb	r3, [r0, #0]
 800e830:	2b30      	cmp	r3, #48	@ 0x30
 800e832:	d10a      	bne.n	800e84a <__cvt+0xba>
 800e834:	2200      	movs	r2, #0
 800e836:	2300      	movs	r3, #0
 800e838:	4630      	mov	r0, r6
 800e83a:	4639      	mov	r1, r7
 800e83c:	f7f2 f91c 	bl	8000a78 <__aeabi_dcmpeq>
 800e840:	b918      	cbnz	r0, 800e84a <__cvt+0xba>
 800e842:	f1c4 0401 	rsb	r4, r4, #1
 800e846:	f8ca 4000 	str.w	r4, [sl]
 800e84a:	f8da 3000 	ldr.w	r3, [sl]
 800e84e:	4499      	add	r9, r3
 800e850:	e7d3      	b.n	800e7fa <__cvt+0x6a>
 800e852:	1c59      	adds	r1, r3, #1
 800e854:	9103      	str	r1, [sp, #12]
 800e856:	701a      	strb	r2, [r3, #0]
 800e858:	e7d9      	b.n	800e80e <__cvt+0x7e>

0800e85a <__exponent>:
 800e85a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e85c:	2900      	cmp	r1, #0
 800e85e:	bfba      	itte	lt
 800e860:	4249      	neglt	r1, r1
 800e862:	232d      	movlt	r3, #45	@ 0x2d
 800e864:	232b      	movge	r3, #43	@ 0x2b
 800e866:	2909      	cmp	r1, #9
 800e868:	7002      	strb	r2, [r0, #0]
 800e86a:	7043      	strb	r3, [r0, #1]
 800e86c:	dd29      	ble.n	800e8c2 <__exponent+0x68>
 800e86e:	f10d 0307 	add.w	r3, sp, #7
 800e872:	461d      	mov	r5, r3
 800e874:	270a      	movs	r7, #10
 800e876:	461a      	mov	r2, r3
 800e878:	fbb1 f6f7 	udiv	r6, r1, r7
 800e87c:	fb07 1416 	mls	r4, r7, r6, r1
 800e880:	3430      	adds	r4, #48	@ 0x30
 800e882:	f802 4c01 	strb.w	r4, [r2, #-1]
 800e886:	460c      	mov	r4, r1
 800e888:	2c63      	cmp	r4, #99	@ 0x63
 800e88a:	f103 33ff 	add.w	r3, r3, #4294967295
 800e88e:	4631      	mov	r1, r6
 800e890:	dcf1      	bgt.n	800e876 <__exponent+0x1c>
 800e892:	3130      	adds	r1, #48	@ 0x30
 800e894:	1e94      	subs	r4, r2, #2
 800e896:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e89a:	1c41      	adds	r1, r0, #1
 800e89c:	4623      	mov	r3, r4
 800e89e:	42ab      	cmp	r3, r5
 800e8a0:	d30a      	bcc.n	800e8b8 <__exponent+0x5e>
 800e8a2:	f10d 0309 	add.w	r3, sp, #9
 800e8a6:	1a9b      	subs	r3, r3, r2
 800e8a8:	42ac      	cmp	r4, r5
 800e8aa:	bf88      	it	hi
 800e8ac:	2300      	movhi	r3, #0
 800e8ae:	3302      	adds	r3, #2
 800e8b0:	4403      	add	r3, r0
 800e8b2:	1a18      	subs	r0, r3, r0
 800e8b4:	b003      	add	sp, #12
 800e8b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8b8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800e8bc:	f801 6f01 	strb.w	r6, [r1, #1]!
 800e8c0:	e7ed      	b.n	800e89e <__exponent+0x44>
 800e8c2:	2330      	movs	r3, #48	@ 0x30
 800e8c4:	3130      	adds	r1, #48	@ 0x30
 800e8c6:	7083      	strb	r3, [r0, #2]
 800e8c8:	70c1      	strb	r1, [r0, #3]
 800e8ca:	1d03      	adds	r3, r0, #4
 800e8cc:	e7f1      	b.n	800e8b2 <__exponent+0x58>
	...

0800e8d0 <_printf_float>:
 800e8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8d4:	b08d      	sub	sp, #52	@ 0x34
 800e8d6:	460c      	mov	r4, r1
 800e8d8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800e8dc:	4616      	mov	r6, r2
 800e8de:	461f      	mov	r7, r3
 800e8e0:	4605      	mov	r5, r0
 800e8e2:	f000 fcd3 	bl	800f28c <_localeconv_r>
 800e8e6:	6803      	ldr	r3, [r0, #0]
 800e8e8:	9304      	str	r3, [sp, #16]
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f7f1 fc98 	bl	8000220 <strlen>
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	930a      	str	r3, [sp, #40]	@ 0x28
 800e8f4:	f8d8 3000 	ldr.w	r3, [r8]
 800e8f8:	9005      	str	r0, [sp, #20]
 800e8fa:	3307      	adds	r3, #7
 800e8fc:	f023 0307 	bic.w	r3, r3, #7
 800e900:	f103 0208 	add.w	r2, r3, #8
 800e904:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e908:	f8d4 b000 	ldr.w	fp, [r4]
 800e90c:	f8c8 2000 	str.w	r2, [r8]
 800e910:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e914:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800e918:	9307      	str	r3, [sp, #28]
 800e91a:	f8cd 8018 	str.w	r8, [sp, #24]
 800e91e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800e922:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e926:	4b9c      	ldr	r3, [pc, #624]	@ (800eb98 <_printf_float+0x2c8>)
 800e928:	f04f 32ff 	mov.w	r2, #4294967295
 800e92c:	f7f2 f8d6 	bl	8000adc <__aeabi_dcmpun>
 800e930:	bb70      	cbnz	r0, 800e990 <_printf_float+0xc0>
 800e932:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e936:	4b98      	ldr	r3, [pc, #608]	@ (800eb98 <_printf_float+0x2c8>)
 800e938:	f04f 32ff 	mov.w	r2, #4294967295
 800e93c:	f7f2 f8b0 	bl	8000aa0 <__aeabi_dcmple>
 800e940:	bb30      	cbnz	r0, 800e990 <_printf_float+0xc0>
 800e942:	2200      	movs	r2, #0
 800e944:	2300      	movs	r3, #0
 800e946:	4640      	mov	r0, r8
 800e948:	4649      	mov	r1, r9
 800e94a:	f7f2 f89f 	bl	8000a8c <__aeabi_dcmplt>
 800e94e:	b110      	cbz	r0, 800e956 <_printf_float+0x86>
 800e950:	232d      	movs	r3, #45	@ 0x2d
 800e952:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e956:	4a91      	ldr	r2, [pc, #580]	@ (800eb9c <_printf_float+0x2cc>)
 800e958:	4b91      	ldr	r3, [pc, #580]	@ (800eba0 <_printf_float+0x2d0>)
 800e95a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800e95e:	bf8c      	ite	hi
 800e960:	4690      	movhi	r8, r2
 800e962:	4698      	movls	r8, r3
 800e964:	2303      	movs	r3, #3
 800e966:	6123      	str	r3, [r4, #16]
 800e968:	f02b 0304 	bic.w	r3, fp, #4
 800e96c:	6023      	str	r3, [r4, #0]
 800e96e:	f04f 0900 	mov.w	r9, #0
 800e972:	9700      	str	r7, [sp, #0]
 800e974:	4633      	mov	r3, r6
 800e976:	aa0b      	add	r2, sp, #44	@ 0x2c
 800e978:	4621      	mov	r1, r4
 800e97a:	4628      	mov	r0, r5
 800e97c:	f000 f9d2 	bl	800ed24 <_printf_common>
 800e980:	3001      	adds	r0, #1
 800e982:	f040 808d 	bne.w	800eaa0 <_printf_float+0x1d0>
 800e986:	f04f 30ff 	mov.w	r0, #4294967295
 800e98a:	b00d      	add	sp, #52	@ 0x34
 800e98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e990:	4642      	mov	r2, r8
 800e992:	464b      	mov	r3, r9
 800e994:	4640      	mov	r0, r8
 800e996:	4649      	mov	r1, r9
 800e998:	f7f2 f8a0 	bl	8000adc <__aeabi_dcmpun>
 800e99c:	b140      	cbz	r0, 800e9b0 <_printf_float+0xe0>
 800e99e:	464b      	mov	r3, r9
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	bfbc      	itt	lt
 800e9a4:	232d      	movlt	r3, #45	@ 0x2d
 800e9a6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800e9aa:	4a7e      	ldr	r2, [pc, #504]	@ (800eba4 <_printf_float+0x2d4>)
 800e9ac:	4b7e      	ldr	r3, [pc, #504]	@ (800eba8 <_printf_float+0x2d8>)
 800e9ae:	e7d4      	b.n	800e95a <_printf_float+0x8a>
 800e9b0:	6863      	ldr	r3, [r4, #4]
 800e9b2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800e9b6:	9206      	str	r2, [sp, #24]
 800e9b8:	1c5a      	adds	r2, r3, #1
 800e9ba:	d13b      	bne.n	800ea34 <_printf_float+0x164>
 800e9bc:	2306      	movs	r3, #6
 800e9be:	6063      	str	r3, [r4, #4]
 800e9c0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	6022      	str	r2, [r4, #0]
 800e9c8:	9303      	str	r3, [sp, #12]
 800e9ca:	ab0a      	add	r3, sp, #40	@ 0x28
 800e9cc:	e9cd a301 	strd	sl, r3, [sp, #4]
 800e9d0:	ab09      	add	r3, sp, #36	@ 0x24
 800e9d2:	9300      	str	r3, [sp, #0]
 800e9d4:	6861      	ldr	r1, [r4, #4]
 800e9d6:	ec49 8b10 	vmov	d0, r8, r9
 800e9da:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800e9de:	4628      	mov	r0, r5
 800e9e0:	f7ff fed6 	bl	800e790 <__cvt>
 800e9e4:	9b06      	ldr	r3, [sp, #24]
 800e9e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e9e8:	2b47      	cmp	r3, #71	@ 0x47
 800e9ea:	4680      	mov	r8, r0
 800e9ec:	d129      	bne.n	800ea42 <_printf_float+0x172>
 800e9ee:	1cc8      	adds	r0, r1, #3
 800e9f0:	db02      	blt.n	800e9f8 <_printf_float+0x128>
 800e9f2:	6863      	ldr	r3, [r4, #4]
 800e9f4:	4299      	cmp	r1, r3
 800e9f6:	dd41      	ble.n	800ea7c <_printf_float+0x1ac>
 800e9f8:	f1aa 0a02 	sub.w	sl, sl, #2
 800e9fc:	fa5f fa8a 	uxtb.w	sl, sl
 800ea00:	3901      	subs	r1, #1
 800ea02:	4652      	mov	r2, sl
 800ea04:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ea08:	9109      	str	r1, [sp, #36]	@ 0x24
 800ea0a:	f7ff ff26 	bl	800e85a <__exponent>
 800ea0e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ea10:	1813      	adds	r3, r2, r0
 800ea12:	2a01      	cmp	r2, #1
 800ea14:	4681      	mov	r9, r0
 800ea16:	6123      	str	r3, [r4, #16]
 800ea18:	dc02      	bgt.n	800ea20 <_printf_float+0x150>
 800ea1a:	6822      	ldr	r2, [r4, #0]
 800ea1c:	07d2      	lsls	r2, r2, #31
 800ea1e:	d501      	bpl.n	800ea24 <_printf_float+0x154>
 800ea20:	3301      	adds	r3, #1
 800ea22:	6123      	str	r3, [r4, #16]
 800ea24:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d0a2      	beq.n	800e972 <_printf_float+0xa2>
 800ea2c:	232d      	movs	r3, #45	@ 0x2d
 800ea2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ea32:	e79e      	b.n	800e972 <_printf_float+0xa2>
 800ea34:	9a06      	ldr	r2, [sp, #24]
 800ea36:	2a47      	cmp	r2, #71	@ 0x47
 800ea38:	d1c2      	bne.n	800e9c0 <_printf_float+0xf0>
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d1c0      	bne.n	800e9c0 <_printf_float+0xf0>
 800ea3e:	2301      	movs	r3, #1
 800ea40:	e7bd      	b.n	800e9be <_printf_float+0xee>
 800ea42:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ea46:	d9db      	bls.n	800ea00 <_printf_float+0x130>
 800ea48:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ea4c:	d118      	bne.n	800ea80 <_printf_float+0x1b0>
 800ea4e:	2900      	cmp	r1, #0
 800ea50:	6863      	ldr	r3, [r4, #4]
 800ea52:	dd0b      	ble.n	800ea6c <_printf_float+0x19c>
 800ea54:	6121      	str	r1, [r4, #16]
 800ea56:	b913      	cbnz	r3, 800ea5e <_printf_float+0x18e>
 800ea58:	6822      	ldr	r2, [r4, #0]
 800ea5a:	07d0      	lsls	r0, r2, #31
 800ea5c:	d502      	bpl.n	800ea64 <_printf_float+0x194>
 800ea5e:	3301      	adds	r3, #1
 800ea60:	440b      	add	r3, r1
 800ea62:	6123      	str	r3, [r4, #16]
 800ea64:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ea66:	f04f 0900 	mov.w	r9, #0
 800ea6a:	e7db      	b.n	800ea24 <_printf_float+0x154>
 800ea6c:	b913      	cbnz	r3, 800ea74 <_printf_float+0x1a4>
 800ea6e:	6822      	ldr	r2, [r4, #0]
 800ea70:	07d2      	lsls	r2, r2, #31
 800ea72:	d501      	bpl.n	800ea78 <_printf_float+0x1a8>
 800ea74:	3302      	adds	r3, #2
 800ea76:	e7f4      	b.n	800ea62 <_printf_float+0x192>
 800ea78:	2301      	movs	r3, #1
 800ea7a:	e7f2      	b.n	800ea62 <_printf_float+0x192>
 800ea7c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ea80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea82:	4299      	cmp	r1, r3
 800ea84:	db05      	blt.n	800ea92 <_printf_float+0x1c2>
 800ea86:	6823      	ldr	r3, [r4, #0]
 800ea88:	6121      	str	r1, [r4, #16]
 800ea8a:	07d8      	lsls	r0, r3, #31
 800ea8c:	d5ea      	bpl.n	800ea64 <_printf_float+0x194>
 800ea8e:	1c4b      	adds	r3, r1, #1
 800ea90:	e7e7      	b.n	800ea62 <_printf_float+0x192>
 800ea92:	2900      	cmp	r1, #0
 800ea94:	bfd4      	ite	le
 800ea96:	f1c1 0202 	rsble	r2, r1, #2
 800ea9a:	2201      	movgt	r2, #1
 800ea9c:	4413      	add	r3, r2
 800ea9e:	e7e0      	b.n	800ea62 <_printf_float+0x192>
 800eaa0:	6823      	ldr	r3, [r4, #0]
 800eaa2:	055a      	lsls	r2, r3, #21
 800eaa4:	d407      	bmi.n	800eab6 <_printf_float+0x1e6>
 800eaa6:	6923      	ldr	r3, [r4, #16]
 800eaa8:	4642      	mov	r2, r8
 800eaaa:	4631      	mov	r1, r6
 800eaac:	4628      	mov	r0, r5
 800eaae:	47b8      	blx	r7
 800eab0:	3001      	adds	r0, #1
 800eab2:	d12b      	bne.n	800eb0c <_printf_float+0x23c>
 800eab4:	e767      	b.n	800e986 <_printf_float+0xb6>
 800eab6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800eaba:	f240 80dd 	bls.w	800ec78 <_printf_float+0x3a8>
 800eabe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800eac2:	2200      	movs	r2, #0
 800eac4:	2300      	movs	r3, #0
 800eac6:	f7f1 ffd7 	bl	8000a78 <__aeabi_dcmpeq>
 800eaca:	2800      	cmp	r0, #0
 800eacc:	d033      	beq.n	800eb36 <_printf_float+0x266>
 800eace:	4a37      	ldr	r2, [pc, #220]	@ (800ebac <_printf_float+0x2dc>)
 800ead0:	2301      	movs	r3, #1
 800ead2:	4631      	mov	r1, r6
 800ead4:	4628      	mov	r0, r5
 800ead6:	47b8      	blx	r7
 800ead8:	3001      	adds	r0, #1
 800eada:	f43f af54 	beq.w	800e986 <_printf_float+0xb6>
 800eade:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800eae2:	4543      	cmp	r3, r8
 800eae4:	db02      	blt.n	800eaec <_printf_float+0x21c>
 800eae6:	6823      	ldr	r3, [r4, #0]
 800eae8:	07d8      	lsls	r0, r3, #31
 800eaea:	d50f      	bpl.n	800eb0c <_printf_float+0x23c>
 800eaec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eaf0:	4631      	mov	r1, r6
 800eaf2:	4628      	mov	r0, r5
 800eaf4:	47b8      	blx	r7
 800eaf6:	3001      	adds	r0, #1
 800eaf8:	f43f af45 	beq.w	800e986 <_printf_float+0xb6>
 800eafc:	f04f 0900 	mov.w	r9, #0
 800eb00:	f108 38ff 	add.w	r8, r8, #4294967295
 800eb04:	f104 0a1a 	add.w	sl, r4, #26
 800eb08:	45c8      	cmp	r8, r9
 800eb0a:	dc09      	bgt.n	800eb20 <_printf_float+0x250>
 800eb0c:	6823      	ldr	r3, [r4, #0]
 800eb0e:	079b      	lsls	r3, r3, #30
 800eb10:	f100 8103 	bmi.w	800ed1a <_printf_float+0x44a>
 800eb14:	68e0      	ldr	r0, [r4, #12]
 800eb16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eb18:	4298      	cmp	r0, r3
 800eb1a:	bfb8      	it	lt
 800eb1c:	4618      	movlt	r0, r3
 800eb1e:	e734      	b.n	800e98a <_printf_float+0xba>
 800eb20:	2301      	movs	r3, #1
 800eb22:	4652      	mov	r2, sl
 800eb24:	4631      	mov	r1, r6
 800eb26:	4628      	mov	r0, r5
 800eb28:	47b8      	blx	r7
 800eb2a:	3001      	adds	r0, #1
 800eb2c:	f43f af2b 	beq.w	800e986 <_printf_float+0xb6>
 800eb30:	f109 0901 	add.w	r9, r9, #1
 800eb34:	e7e8      	b.n	800eb08 <_printf_float+0x238>
 800eb36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	dc39      	bgt.n	800ebb0 <_printf_float+0x2e0>
 800eb3c:	4a1b      	ldr	r2, [pc, #108]	@ (800ebac <_printf_float+0x2dc>)
 800eb3e:	2301      	movs	r3, #1
 800eb40:	4631      	mov	r1, r6
 800eb42:	4628      	mov	r0, r5
 800eb44:	47b8      	blx	r7
 800eb46:	3001      	adds	r0, #1
 800eb48:	f43f af1d 	beq.w	800e986 <_printf_float+0xb6>
 800eb4c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800eb50:	ea59 0303 	orrs.w	r3, r9, r3
 800eb54:	d102      	bne.n	800eb5c <_printf_float+0x28c>
 800eb56:	6823      	ldr	r3, [r4, #0]
 800eb58:	07d9      	lsls	r1, r3, #31
 800eb5a:	d5d7      	bpl.n	800eb0c <_printf_float+0x23c>
 800eb5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eb60:	4631      	mov	r1, r6
 800eb62:	4628      	mov	r0, r5
 800eb64:	47b8      	blx	r7
 800eb66:	3001      	adds	r0, #1
 800eb68:	f43f af0d 	beq.w	800e986 <_printf_float+0xb6>
 800eb6c:	f04f 0a00 	mov.w	sl, #0
 800eb70:	f104 0b1a 	add.w	fp, r4, #26
 800eb74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb76:	425b      	negs	r3, r3
 800eb78:	4553      	cmp	r3, sl
 800eb7a:	dc01      	bgt.n	800eb80 <_printf_float+0x2b0>
 800eb7c:	464b      	mov	r3, r9
 800eb7e:	e793      	b.n	800eaa8 <_printf_float+0x1d8>
 800eb80:	2301      	movs	r3, #1
 800eb82:	465a      	mov	r2, fp
 800eb84:	4631      	mov	r1, r6
 800eb86:	4628      	mov	r0, r5
 800eb88:	47b8      	blx	r7
 800eb8a:	3001      	adds	r0, #1
 800eb8c:	f43f aefb 	beq.w	800e986 <_printf_float+0xb6>
 800eb90:	f10a 0a01 	add.w	sl, sl, #1
 800eb94:	e7ee      	b.n	800eb74 <_printf_float+0x2a4>
 800eb96:	bf00      	nop
 800eb98:	7fefffff 	.word	0x7fefffff
 800eb9c:	080112c4 	.word	0x080112c4
 800eba0:	080112c0 	.word	0x080112c0
 800eba4:	080112cc 	.word	0x080112cc
 800eba8:	080112c8 	.word	0x080112c8
 800ebac:	080112d0 	.word	0x080112d0
 800ebb0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ebb2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ebb6:	4553      	cmp	r3, sl
 800ebb8:	bfa8      	it	ge
 800ebba:	4653      	movge	r3, sl
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	4699      	mov	r9, r3
 800ebc0:	dc36      	bgt.n	800ec30 <_printf_float+0x360>
 800ebc2:	f04f 0b00 	mov.w	fp, #0
 800ebc6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ebca:	f104 021a 	add.w	r2, r4, #26
 800ebce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ebd0:	9306      	str	r3, [sp, #24]
 800ebd2:	eba3 0309 	sub.w	r3, r3, r9
 800ebd6:	455b      	cmp	r3, fp
 800ebd8:	dc31      	bgt.n	800ec3e <_printf_float+0x36e>
 800ebda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebdc:	459a      	cmp	sl, r3
 800ebde:	dc3a      	bgt.n	800ec56 <_printf_float+0x386>
 800ebe0:	6823      	ldr	r3, [r4, #0]
 800ebe2:	07da      	lsls	r2, r3, #31
 800ebe4:	d437      	bmi.n	800ec56 <_printf_float+0x386>
 800ebe6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebe8:	ebaa 0903 	sub.w	r9, sl, r3
 800ebec:	9b06      	ldr	r3, [sp, #24]
 800ebee:	ebaa 0303 	sub.w	r3, sl, r3
 800ebf2:	4599      	cmp	r9, r3
 800ebf4:	bfa8      	it	ge
 800ebf6:	4699      	movge	r9, r3
 800ebf8:	f1b9 0f00 	cmp.w	r9, #0
 800ebfc:	dc33      	bgt.n	800ec66 <_printf_float+0x396>
 800ebfe:	f04f 0800 	mov.w	r8, #0
 800ec02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ec06:	f104 0b1a 	add.w	fp, r4, #26
 800ec0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec0c:	ebaa 0303 	sub.w	r3, sl, r3
 800ec10:	eba3 0309 	sub.w	r3, r3, r9
 800ec14:	4543      	cmp	r3, r8
 800ec16:	f77f af79 	ble.w	800eb0c <_printf_float+0x23c>
 800ec1a:	2301      	movs	r3, #1
 800ec1c:	465a      	mov	r2, fp
 800ec1e:	4631      	mov	r1, r6
 800ec20:	4628      	mov	r0, r5
 800ec22:	47b8      	blx	r7
 800ec24:	3001      	adds	r0, #1
 800ec26:	f43f aeae 	beq.w	800e986 <_printf_float+0xb6>
 800ec2a:	f108 0801 	add.w	r8, r8, #1
 800ec2e:	e7ec      	b.n	800ec0a <_printf_float+0x33a>
 800ec30:	4642      	mov	r2, r8
 800ec32:	4631      	mov	r1, r6
 800ec34:	4628      	mov	r0, r5
 800ec36:	47b8      	blx	r7
 800ec38:	3001      	adds	r0, #1
 800ec3a:	d1c2      	bne.n	800ebc2 <_printf_float+0x2f2>
 800ec3c:	e6a3      	b.n	800e986 <_printf_float+0xb6>
 800ec3e:	2301      	movs	r3, #1
 800ec40:	4631      	mov	r1, r6
 800ec42:	4628      	mov	r0, r5
 800ec44:	9206      	str	r2, [sp, #24]
 800ec46:	47b8      	blx	r7
 800ec48:	3001      	adds	r0, #1
 800ec4a:	f43f ae9c 	beq.w	800e986 <_printf_float+0xb6>
 800ec4e:	9a06      	ldr	r2, [sp, #24]
 800ec50:	f10b 0b01 	add.w	fp, fp, #1
 800ec54:	e7bb      	b.n	800ebce <_printf_float+0x2fe>
 800ec56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec5a:	4631      	mov	r1, r6
 800ec5c:	4628      	mov	r0, r5
 800ec5e:	47b8      	blx	r7
 800ec60:	3001      	adds	r0, #1
 800ec62:	d1c0      	bne.n	800ebe6 <_printf_float+0x316>
 800ec64:	e68f      	b.n	800e986 <_printf_float+0xb6>
 800ec66:	9a06      	ldr	r2, [sp, #24]
 800ec68:	464b      	mov	r3, r9
 800ec6a:	4442      	add	r2, r8
 800ec6c:	4631      	mov	r1, r6
 800ec6e:	4628      	mov	r0, r5
 800ec70:	47b8      	blx	r7
 800ec72:	3001      	adds	r0, #1
 800ec74:	d1c3      	bne.n	800ebfe <_printf_float+0x32e>
 800ec76:	e686      	b.n	800e986 <_printf_float+0xb6>
 800ec78:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800ec7c:	f1ba 0f01 	cmp.w	sl, #1
 800ec80:	dc01      	bgt.n	800ec86 <_printf_float+0x3b6>
 800ec82:	07db      	lsls	r3, r3, #31
 800ec84:	d536      	bpl.n	800ecf4 <_printf_float+0x424>
 800ec86:	2301      	movs	r3, #1
 800ec88:	4642      	mov	r2, r8
 800ec8a:	4631      	mov	r1, r6
 800ec8c:	4628      	mov	r0, r5
 800ec8e:	47b8      	blx	r7
 800ec90:	3001      	adds	r0, #1
 800ec92:	f43f ae78 	beq.w	800e986 <_printf_float+0xb6>
 800ec96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec9a:	4631      	mov	r1, r6
 800ec9c:	4628      	mov	r0, r5
 800ec9e:	47b8      	blx	r7
 800eca0:	3001      	adds	r0, #1
 800eca2:	f43f ae70 	beq.w	800e986 <_printf_float+0xb6>
 800eca6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ecaa:	2200      	movs	r2, #0
 800ecac:	2300      	movs	r3, #0
 800ecae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ecb2:	f7f1 fee1 	bl	8000a78 <__aeabi_dcmpeq>
 800ecb6:	b9c0      	cbnz	r0, 800ecea <_printf_float+0x41a>
 800ecb8:	4653      	mov	r3, sl
 800ecba:	f108 0201 	add.w	r2, r8, #1
 800ecbe:	4631      	mov	r1, r6
 800ecc0:	4628      	mov	r0, r5
 800ecc2:	47b8      	blx	r7
 800ecc4:	3001      	adds	r0, #1
 800ecc6:	d10c      	bne.n	800ece2 <_printf_float+0x412>
 800ecc8:	e65d      	b.n	800e986 <_printf_float+0xb6>
 800ecca:	2301      	movs	r3, #1
 800eccc:	465a      	mov	r2, fp
 800ecce:	4631      	mov	r1, r6
 800ecd0:	4628      	mov	r0, r5
 800ecd2:	47b8      	blx	r7
 800ecd4:	3001      	adds	r0, #1
 800ecd6:	f43f ae56 	beq.w	800e986 <_printf_float+0xb6>
 800ecda:	f108 0801 	add.w	r8, r8, #1
 800ecde:	45d0      	cmp	r8, sl
 800ece0:	dbf3      	blt.n	800ecca <_printf_float+0x3fa>
 800ece2:	464b      	mov	r3, r9
 800ece4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800ece8:	e6df      	b.n	800eaaa <_printf_float+0x1da>
 800ecea:	f04f 0800 	mov.w	r8, #0
 800ecee:	f104 0b1a 	add.w	fp, r4, #26
 800ecf2:	e7f4      	b.n	800ecde <_printf_float+0x40e>
 800ecf4:	2301      	movs	r3, #1
 800ecf6:	4642      	mov	r2, r8
 800ecf8:	e7e1      	b.n	800ecbe <_printf_float+0x3ee>
 800ecfa:	2301      	movs	r3, #1
 800ecfc:	464a      	mov	r2, r9
 800ecfe:	4631      	mov	r1, r6
 800ed00:	4628      	mov	r0, r5
 800ed02:	47b8      	blx	r7
 800ed04:	3001      	adds	r0, #1
 800ed06:	f43f ae3e 	beq.w	800e986 <_printf_float+0xb6>
 800ed0a:	f108 0801 	add.w	r8, r8, #1
 800ed0e:	68e3      	ldr	r3, [r4, #12]
 800ed10:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ed12:	1a5b      	subs	r3, r3, r1
 800ed14:	4543      	cmp	r3, r8
 800ed16:	dcf0      	bgt.n	800ecfa <_printf_float+0x42a>
 800ed18:	e6fc      	b.n	800eb14 <_printf_float+0x244>
 800ed1a:	f04f 0800 	mov.w	r8, #0
 800ed1e:	f104 0919 	add.w	r9, r4, #25
 800ed22:	e7f4      	b.n	800ed0e <_printf_float+0x43e>

0800ed24 <_printf_common>:
 800ed24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed28:	4616      	mov	r6, r2
 800ed2a:	4698      	mov	r8, r3
 800ed2c:	688a      	ldr	r2, [r1, #8]
 800ed2e:	690b      	ldr	r3, [r1, #16]
 800ed30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ed34:	4293      	cmp	r3, r2
 800ed36:	bfb8      	it	lt
 800ed38:	4613      	movlt	r3, r2
 800ed3a:	6033      	str	r3, [r6, #0]
 800ed3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ed40:	4607      	mov	r7, r0
 800ed42:	460c      	mov	r4, r1
 800ed44:	b10a      	cbz	r2, 800ed4a <_printf_common+0x26>
 800ed46:	3301      	adds	r3, #1
 800ed48:	6033      	str	r3, [r6, #0]
 800ed4a:	6823      	ldr	r3, [r4, #0]
 800ed4c:	0699      	lsls	r1, r3, #26
 800ed4e:	bf42      	ittt	mi
 800ed50:	6833      	ldrmi	r3, [r6, #0]
 800ed52:	3302      	addmi	r3, #2
 800ed54:	6033      	strmi	r3, [r6, #0]
 800ed56:	6825      	ldr	r5, [r4, #0]
 800ed58:	f015 0506 	ands.w	r5, r5, #6
 800ed5c:	d106      	bne.n	800ed6c <_printf_common+0x48>
 800ed5e:	f104 0a19 	add.w	sl, r4, #25
 800ed62:	68e3      	ldr	r3, [r4, #12]
 800ed64:	6832      	ldr	r2, [r6, #0]
 800ed66:	1a9b      	subs	r3, r3, r2
 800ed68:	42ab      	cmp	r3, r5
 800ed6a:	dc26      	bgt.n	800edba <_printf_common+0x96>
 800ed6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ed70:	6822      	ldr	r2, [r4, #0]
 800ed72:	3b00      	subs	r3, #0
 800ed74:	bf18      	it	ne
 800ed76:	2301      	movne	r3, #1
 800ed78:	0692      	lsls	r2, r2, #26
 800ed7a:	d42b      	bmi.n	800edd4 <_printf_common+0xb0>
 800ed7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ed80:	4641      	mov	r1, r8
 800ed82:	4638      	mov	r0, r7
 800ed84:	47c8      	blx	r9
 800ed86:	3001      	adds	r0, #1
 800ed88:	d01e      	beq.n	800edc8 <_printf_common+0xa4>
 800ed8a:	6823      	ldr	r3, [r4, #0]
 800ed8c:	6922      	ldr	r2, [r4, #16]
 800ed8e:	f003 0306 	and.w	r3, r3, #6
 800ed92:	2b04      	cmp	r3, #4
 800ed94:	bf02      	ittt	eq
 800ed96:	68e5      	ldreq	r5, [r4, #12]
 800ed98:	6833      	ldreq	r3, [r6, #0]
 800ed9a:	1aed      	subeq	r5, r5, r3
 800ed9c:	68a3      	ldr	r3, [r4, #8]
 800ed9e:	bf0c      	ite	eq
 800eda0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eda4:	2500      	movne	r5, #0
 800eda6:	4293      	cmp	r3, r2
 800eda8:	bfc4      	itt	gt
 800edaa:	1a9b      	subgt	r3, r3, r2
 800edac:	18ed      	addgt	r5, r5, r3
 800edae:	2600      	movs	r6, #0
 800edb0:	341a      	adds	r4, #26
 800edb2:	42b5      	cmp	r5, r6
 800edb4:	d11a      	bne.n	800edec <_printf_common+0xc8>
 800edb6:	2000      	movs	r0, #0
 800edb8:	e008      	b.n	800edcc <_printf_common+0xa8>
 800edba:	2301      	movs	r3, #1
 800edbc:	4652      	mov	r2, sl
 800edbe:	4641      	mov	r1, r8
 800edc0:	4638      	mov	r0, r7
 800edc2:	47c8      	blx	r9
 800edc4:	3001      	adds	r0, #1
 800edc6:	d103      	bne.n	800edd0 <_printf_common+0xac>
 800edc8:	f04f 30ff 	mov.w	r0, #4294967295
 800edcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edd0:	3501      	adds	r5, #1
 800edd2:	e7c6      	b.n	800ed62 <_printf_common+0x3e>
 800edd4:	18e1      	adds	r1, r4, r3
 800edd6:	1c5a      	adds	r2, r3, #1
 800edd8:	2030      	movs	r0, #48	@ 0x30
 800edda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800edde:	4422      	add	r2, r4
 800ede0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ede4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ede8:	3302      	adds	r3, #2
 800edea:	e7c7      	b.n	800ed7c <_printf_common+0x58>
 800edec:	2301      	movs	r3, #1
 800edee:	4622      	mov	r2, r4
 800edf0:	4641      	mov	r1, r8
 800edf2:	4638      	mov	r0, r7
 800edf4:	47c8      	blx	r9
 800edf6:	3001      	adds	r0, #1
 800edf8:	d0e6      	beq.n	800edc8 <_printf_common+0xa4>
 800edfa:	3601      	adds	r6, #1
 800edfc:	e7d9      	b.n	800edb2 <_printf_common+0x8e>
	...

0800ee00 <_printf_i>:
 800ee00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ee04:	7e0f      	ldrb	r7, [r1, #24]
 800ee06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ee08:	2f78      	cmp	r7, #120	@ 0x78
 800ee0a:	4691      	mov	r9, r2
 800ee0c:	4680      	mov	r8, r0
 800ee0e:	460c      	mov	r4, r1
 800ee10:	469a      	mov	sl, r3
 800ee12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ee16:	d807      	bhi.n	800ee28 <_printf_i+0x28>
 800ee18:	2f62      	cmp	r7, #98	@ 0x62
 800ee1a:	d80a      	bhi.n	800ee32 <_printf_i+0x32>
 800ee1c:	2f00      	cmp	r7, #0
 800ee1e:	f000 80d1 	beq.w	800efc4 <_printf_i+0x1c4>
 800ee22:	2f58      	cmp	r7, #88	@ 0x58
 800ee24:	f000 80b8 	beq.w	800ef98 <_printf_i+0x198>
 800ee28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ee2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ee30:	e03a      	b.n	800eea8 <_printf_i+0xa8>
 800ee32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ee36:	2b15      	cmp	r3, #21
 800ee38:	d8f6      	bhi.n	800ee28 <_printf_i+0x28>
 800ee3a:	a101      	add	r1, pc, #4	@ (adr r1, 800ee40 <_printf_i+0x40>)
 800ee3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ee40:	0800ee99 	.word	0x0800ee99
 800ee44:	0800eead 	.word	0x0800eead
 800ee48:	0800ee29 	.word	0x0800ee29
 800ee4c:	0800ee29 	.word	0x0800ee29
 800ee50:	0800ee29 	.word	0x0800ee29
 800ee54:	0800ee29 	.word	0x0800ee29
 800ee58:	0800eead 	.word	0x0800eead
 800ee5c:	0800ee29 	.word	0x0800ee29
 800ee60:	0800ee29 	.word	0x0800ee29
 800ee64:	0800ee29 	.word	0x0800ee29
 800ee68:	0800ee29 	.word	0x0800ee29
 800ee6c:	0800efab 	.word	0x0800efab
 800ee70:	0800eed7 	.word	0x0800eed7
 800ee74:	0800ef65 	.word	0x0800ef65
 800ee78:	0800ee29 	.word	0x0800ee29
 800ee7c:	0800ee29 	.word	0x0800ee29
 800ee80:	0800efcd 	.word	0x0800efcd
 800ee84:	0800ee29 	.word	0x0800ee29
 800ee88:	0800eed7 	.word	0x0800eed7
 800ee8c:	0800ee29 	.word	0x0800ee29
 800ee90:	0800ee29 	.word	0x0800ee29
 800ee94:	0800ef6d 	.word	0x0800ef6d
 800ee98:	6833      	ldr	r3, [r6, #0]
 800ee9a:	1d1a      	adds	r2, r3, #4
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	6032      	str	r2, [r6, #0]
 800eea0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eea4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800eea8:	2301      	movs	r3, #1
 800eeaa:	e09c      	b.n	800efe6 <_printf_i+0x1e6>
 800eeac:	6833      	ldr	r3, [r6, #0]
 800eeae:	6820      	ldr	r0, [r4, #0]
 800eeb0:	1d19      	adds	r1, r3, #4
 800eeb2:	6031      	str	r1, [r6, #0]
 800eeb4:	0606      	lsls	r6, r0, #24
 800eeb6:	d501      	bpl.n	800eebc <_printf_i+0xbc>
 800eeb8:	681d      	ldr	r5, [r3, #0]
 800eeba:	e003      	b.n	800eec4 <_printf_i+0xc4>
 800eebc:	0645      	lsls	r5, r0, #25
 800eebe:	d5fb      	bpl.n	800eeb8 <_printf_i+0xb8>
 800eec0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800eec4:	2d00      	cmp	r5, #0
 800eec6:	da03      	bge.n	800eed0 <_printf_i+0xd0>
 800eec8:	232d      	movs	r3, #45	@ 0x2d
 800eeca:	426d      	negs	r5, r5
 800eecc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eed0:	4858      	ldr	r0, [pc, #352]	@ (800f034 <_printf_i+0x234>)
 800eed2:	230a      	movs	r3, #10
 800eed4:	e011      	b.n	800eefa <_printf_i+0xfa>
 800eed6:	6821      	ldr	r1, [r4, #0]
 800eed8:	6833      	ldr	r3, [r6, #0]
 800eeda:	0608      	lsls	r0, r1, #24
 800eedc:	f853 5b04 	ldr.w	r5, [r3], #4
 800eee0:	d402      	bmi.n	800eee8 <_printf_i+0xe8>
 800eee2:	0649      	lsls	r1, r1, #25
 800eee4:	bf48      	it	mi
 800eee6:	b2ad      	uxthmi	r5, r5
 800eee8:	2f6f      	cmp	r7, #111	@ 0x6f
 800eeea:	4852      	ldr	r0, [pc, #328]	@ (800f034 <_printf_i+0x234>)
 800eeec:	6033      	str	r3, [r6, #0]
 800eeee:	bf14      	ite	ne
 800eef0:	230a      	movne	r3, #10
 800eef2:	2308      	moveq	r3, #8
 800eef4:	2100      	movs	r1, #0
 800eef6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800eefa:	6866      	ldr	r6, [r4, #4]
 800eefc:	60a6      	str	r6, [r4, #8]
 800eefe:	2e00      	cmp	r6, #0
 800ef00:	db05      	blt.n	800ef0e <_printf_i+0x10e>
 800ef02:	6821      	ldr	r1, [r4, #0]
 800ef04:	432e      	orrs	r6, r5
 800ef06:	f021 0104 	bic.w	r1, r1, #4
 800ef0a:	6021      	str	r1, [r4, #0]
 800ef0c:	d04b      	beq.n	800efa6 <_printf_i+0x1a6>
 800ef0e:	4616      	mov	r6, r2
 800ef10:	fbb5 f1f3 	udiv	r1, r5, r3
 800ef14:	fb03 5711 	mls	r7, r3, r1, r5
 800ef18:	5dc7      	ldrb	r7, [r0, r7]
 800ef1a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ef1e:	462f      	mov	r7, r5
 800ef20:	42bb      	cmp	r3, r7
 800ef22:	460d      	mov	r5, r1
 800ef24:	d9f4      	bls.n	800ef10 <_printf_i+0x110>
 800ef26:	2b08      	cmp	r3, #8
 800ef28:	d10b      	bne.n	800ef42 <_printf_i+0x142>
 800ef2a:	6823      	ldr	r3, [r4, #0]
 800ef2c:	07df      	lsls	r7, r3, #31
 800ef2e:	d508      	bpl.n	800ef42 <_printf_i+0x142>
 800ef30:	6923      	ldr	r3, [r4, #16]
 800ef32:	6861      	ldr	r1, [r4, #4]
 800ef34:	4299      	cmp	r1, r3
 800ef36:	bfde      	ittt	le
 800ef38:	2330      	movle	r3, #48	@ 0x30
 800ef3a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ef3e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ef42:	1b92      	subs	r2, r2, r6
 800ef44:	6122      	str	r2, [r4, #16]
 800ef46:	f8cd a000 	str.w	sl, [sp]
 800ef4a:	464b      	mov	r3, r9
 800ef4c:	aa03      	add	r2, sp, #12
 800ef4e:	4621      	mov	r1, r4
 800ef50:	4640      	mov	r0, r8
 800ef52:	f7ff fee7 	bl	800ed24 <_printf_common>
 800ef56:	3001      	adds	r0, #1
 800ef58:	d14a      	bne.n	800eff0 <_printf_i+0x1f0>
 800ef5a:	f04f 30ff 	mov.w	r0, #4294967295
 800ef5e:	b004      	add	sp, #16
 800ef60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef64:	6823      	ldr	r3, [r4, #0]
 800ef66:	f043 0320 	orr.w	r3, r3, #32
 800ef6a:	6023      	str	r3, [r4, #0]
 800ef6c:	4832      	ldr	r0, [pc, #200]	@ (800f038 <_printf_i+0x238>)
 800ef6e:	2778      	movs	r7, #120	@ 0x78
 800ef70:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ef74:	6823      	ldr	r3, [r4, #0]
 800ef76:	6831      	ldr	r1, [r6, #0]
 800ef78:	061f      	lsls	r7, r3, #24
 800ef7a:	f851 5b04 	ldr.w	r5, [r1], #4
 800ef7e:	d402      	bmi.n	800ef86 <_printf_i+0x186>
 800ef80:	065f      	lsls	r7, r3, #25
 800ef82:	bf48      	it	mi
 800ef84:	b2ad      	uxthmi	r5, r5
 800ef86:	6031      	str	r1, [r6, #0]
 800ef88:	07d9      	lsls	r1, r3, #31
 800ef8a:	bf44      	itt	mi
 800ef8c:	f043 0320 	orrmi.w	r3, r3, #32
 800ef90:	6023      	strmi	r3, [r4, #0]
 800ef92:	b11d      	cbz	r5, 800ef9c <_printf_i+0x19c>
 800ef94:	2310      	movs	r3, #16
 800ef96:	e7ad      	b.n	800eef4 <_printf_i+0xf4>
 800ef98:	4826      	ldr	r0, [pc, #152]	@ (800f034 <_printf_i+0x234>)
 800ef9a:	e7e9      	b.n	800ef70 <_printf_i+0x170>
 800ef9c:	6823      	ldr	r3, [r4, #0]
 800ef9e:	f023 0320 	bic.w	r3, r3, #32
 800efa2:	6023      	str	r3, [r4, #0]
 800efa4:	e7f6      	b.n	800ef94 <_printf_i+0x194>
 800efa6:	4616      	mov	r6, r2
 800efa8:	e7bd      	b.n	800ef26 <_printf_i+0x126>
 800efaa:	6833      	ldr	r3, [r6, #0]
 800efac:	6825      	ldr	r5, [r4, #0]
 800efae:	6961      	ldr	r1, [r4, #20]
 800efb0:	1d18      	adds	r0, r3, #4
 800efb2:	6030      	str	r0, [r6, #0]
 800efb4:	062e      	lsls	r6, r5, #24
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	d501      	bpl.n	800efbe <_printf_i+0x1be>
 800efba:	6019      	str	r1, [r3, #0]
 800efbc:	e002      	b.n	800efc4 <_printf_i+0x1c4>
 800efbe:	0668      	lsls	r0, r5, #25
 800efc0:	d5fb      	bpl.n	800efba <_printf_i+0x1ba>
 800efc2:	8019      	strh	r1, [r3, #0]
 800efc4:	2300      	movs	r3, #0
 800efc6:	6123      	str	r3, [r4, #16]
 800efc8:	4616      	mov	r6, r2
 800efca:	e7bc      	b.n	800ef46 <_printf_i+0x146>
 800efcc:	6833      	ldr	r3, [r6, #0]
 800efce:	1d1a      	adds	r2, r3, #4
 800efd0:	6032      	str	r2, [r6, #0]
 800efd2:	681e      	ldr	r6, [r3, #0]
 800efd4:	6862      	ldr	r2, [r4, #4]
 800efd6:	2100      	movs	r1, #0
 800efd8:	4630      	mov	r0, r6
 800efda:	f7f1 f8d1 	bl	8000180 <memchr>
 800efde:	b108      	cbz	r0, 800efe4 <_printf_i+0x1e4>
 800efe0:	1b80      	subs	r0, r0, r6
 800efe2:	6060      	str	r0, [r4, #4]
 800efe4:	6863      	ldr	r3, [r4, #4]
 800efe6:	6123      	str	r3, [r4, #16]
 800efe8:	2300      	movs	r3, #0
 800efea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800efee:	e7aa      	b.n	800ef46 <_printf_i+0x146>
 800eff0:	6923      	ldr	r3, [r4, #16]
 800eff2:	4632      	mov	r2, r6
 800eff4:	4649      	mov	r1, r9
 800eff6:	4640      	mov	r0, r8
 800eff8:	47d0      	blx	sl
 800effa:	3001      	adds	r0, #1
 800effc:	d0ad      	beq.n	800ef5a <_printf_i+0x15a>
 800effe:	6823      	ldr	r3, [r4, #0]
 800f000:	079b      	lsls	r3, r3, #30
 800f002:	d413      	bmi.n	800f02c <_printf_i+0x22c>
 800f004:	68e0      	ldr	r0, [r4, #12]
 800f006:	9b03      	ldr	r3, [sp, #12]
 800f008:	4298      	cmp	r0, r3
 800f00a:	bfb8      	it	lt
 800f00c:	4618      	movlt	r0, r3
 800f00e:	e7a6      	b.n	800ef5e <_printf_i+0x15e>
 800f010:	2301      	movs	r3, #1
 800f012:	4632      	mov	r2, r6
 800f014:	4649      	mov	r1, r9
 800f016:	4640      	mov	r0, r8
 800f018:	47d0      	blx	sl
 800f01a:	3001      	adds	r0, #1
 800f01c:	d09d      	beq.n	800ef5a <_printf_i+0x15a>
 800f01e:	3501      	adds	r5, #1
 800f020:	68e3      	ldr	r3, [r4, #12]
 800f022:	9903      	ldr	r1, [sp, #12]
 800f024:	1a5b      	subs	r3, r3, r1
 800f026:	42ab      	cmp	r3, r5
 800f028:	dcf2      	bgt.n	800f010 <_printf_i+0x210>
 800f02a:	e7eb      	b.n	800f004 <_printf_i+0x204>
 800f02c:	2500      	movs	r5, #0
 800f02e:	f104 0619 	add.w	r6, r4, #25
 800f032:	e7f5      	b.n	800f020 <_printf_i+0x220>
 800f034:	080112d2 	.word	0x080112d2
 800f038:	080112e3 	.word	0x080112e3

0800f03c <std>:
 800f03c:	2300      	movs	r3, #0
 800f03e:	b510      	push	{r4, lr}
 800f040:	4604      	mov	r4, r0
 800f042:	e9c0 3300 	strd	r3, r3, [r0]
 800f046:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f04a:	6083      	str	r3, [r0, #8]
 800f04c:	8181      	strh	r1, [r0, #12]
 800f04e:	6643      	str	r3, [r0, #100]	@ 0x64
 800f050:	81c2      	strh	r2, [r0, #14]
 800f052:	6183      	str	r3, [r0, #24]
 800f054:	4619      	mov	r1, r3
 800f056:	2208      	movs	r2, #8
 800f058:	305c      	adds	r0, #92	@ 0x5c
 800f05a:	f000 f90e 	bl	800f27a <memset>
 800f05e:	4b0d      	ldr	r3, [pc, #52]	@ (800f094 <std+0x58>)
 800f060:	6263      	str	r3, [r4, #36]	@ 0x24
 800f062:	4b0d      	ldr	r3, [pc, #52]	@ (800f098 <std+0x5c>)
 800f064:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f066:	4b0d      	ldr	r3, [pc, #52]	@ (800f09c <std+0x60>)
 800f068:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f06a:	4b0d      	ldr	r3, [pc, #52]	@ (800f0a0 <std+0x64>)
 800f06c:	6323      	str	r3, [r4, #48]	@ 0x30
 800f06e:	4b0d      	ldr	r3, [pc, #52]	@ (800f0a4 <std+0x68>)
 800f070:	6224      	str	r4, [r4, #32]
 800f072:	429c      	cmp	r4, r3
 800f074:	d006      	beq.n	800f084 <std+0x48>
 800f076:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f07a:	4294      	cmp	r4, r2
 800f07c:	d002      	beq.n	800f084 <std+0x48>
 800f07e:	33d0      	adds	r3, #208	@ 0xd0
 800f080:	429c      	cmp	r4, r3
 800f082:	d105      	bne.n	800f090 <std+0x54>
 800f084:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f08c:	f000 b972 	b.w	800f374 <__retarget_lock_init_recursive>
 800f090:	bd10      	pop	{r4, pc}
 800f092:	bf00      	nop
 800f094:	0800f1f5 	.word	0x0800f1f5
 800f098:	0800f217 	.word	0x0800f217
 800f09c:	0800f24f 	.word	0x0800f24f
 800f0a0:	0800f273 	.word	0x0800f273
 800f0a4:	20001f2c 	.word	0x20001f2c

0800f0a8 <stdio_exit_handler>:
 800f0a8:	4a02      	ldr	r2, [pc, #8]	@ (800f0b4 <stdio_exit_handler+0xc>)
 800f0aa:	4903      	ldr	r1, [pc, #12]	@ (800f0b8 <stdio_exit_handler+0x10>)
 800f0ac:	4803      	ldr	r0, [pc, #12]	@ (800f0bc <stdio_exit_handler+0x14>)
 800f0ae:	f000 b869 	b.w	800f184 <_fwalk_sglue>
 800f0b2:	bf00      	nop
 800f0b4:	20000124 	.word	0x20000124
 800f0b8:	08010cc9 	.word	0x08010cc9
 800f0bc:	20000134 	.word	0x20000134

0800f0c0 <cleanup_stdio>:
 800f0c0:	6841      	ldr	r1, [r0, #4]
 800f0c2:	4b0c      	ldr	r3, [pc, #48]	@ (800f0f4 <cleanup_stdio+0x34>)
 800f0c4:	4299      	cmp	r1, r3
 800f0c6:	b510      	push	{r4, lr}
 800f0c8:	4604      	mov	r4, r0
 800f0ca:	d001      	beq.n	800f0d0 <cleanup_stdio+0x10>
 800f0cc:	f001 fdfc 	bl	8010cc8 <_fflush_r>
 800f0d0:	68a1      	ldr	r1, [r4, #8]
 800f0d2:	4b09      	ldr	r3, [pc, #36]	@ (800f0f8 <cleanup_stdio+0x38>)
 800f0d4:	4299      	cmp	r1, r3
 800f0d6:	d002      	beq.n	800f0de <cleanup_stdio+0x1e>
 800f0d8:	4620      	mov	r0, r4
 800f0da:	f001 fdf5 	bl	8010cc8 <_fflush_r>
 800f0de:	68e1      	ldr	r1, [r4, #12]
 800f0e0:	4b06      	ldr	r3, [pc, #24]	@ (800f0fc <cleanup_stdio+0x3c>)
 800f0e2:	4299      	cmp	r1, r3
 800f0e4:	d004      	beq.n	800f0f0 <cleanup_stdio+0x30>
 800f0e6:	4620      	mov	r0, r4
 800f0e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0ec:	f001 bdec 	b.w	8010cc8 <_fflush_r>
 800f0f0:	bd10      	pop	{r4, pc}
 800f0f2:	bf00      	nop
 800f0f4:	20001f2c 	.word	0x20001f2c
 800f0f8:	20001f94 	.word	0x20001f94
 800f0fc:	20001ffc 	.word	0x20001ffc

0800f100 <global_stdio_init.part.0>:
 800f100:	b510      	push	{r4, lr}
 800f102:	4b0b      	ldr	r3, [pc, #44]	@ (800f130 <global_stdio_init.part.0+0x30>)
 800f104:	4c0b      	ldr	r4, [pc, #44]	@ (800f134 <global_stdio_init.part.0+0x34>)
 800f106:	4a0c      	ldr	r2, [pc, #48]	@ (800f138 <global_stdio_init.part.0+0x38>)
 800f108:	601a      	str	r2, [r3, #0]
 800f10a:	4620      	mov	r0, r4
 800f10c:	2200      	movs	r2, #0
 800f10e:	2104      	movs	r1, #4
 800f110:	f7ff ff94 	bl	800f03c <std>
 800f114:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f118:	2201      	movs	r2, #1
 800f11a:	2109      	movs	r1, #9
 800f11c:	f7ff ff8e 	bl	800f03c <std>
 800f120:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f124:	2202      	movs	r2, #2
 800f126:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f12a:	2112      	movs	r1, #18
 800f12c:	f7ff bf86 	b.w	800f03c <std>
 800f130:	20002064 	.word	0x20002064
 800f134:	20001f2c 	.word	0x20001f2c
 800f138:	0800f0a9 	.word	0x0800f0a9

0800f13c <__sfp_lock_acquire>:
 800f13c:	4801      	ldr	r0, [pc, #4]	@ (800f144 <__sfp_lock_acquire+0x8>)
 800f13e:	f000 b91a 	b.w	800f376 <__retarget_lock_acquire_recursive>
 800f142:	bf00      	nop
 800f144:	2000206d 	.word	0x2000206d

0800f148 <__sfp_lock_release>:
 800f148:	4801      	ldr	r0, [pc, #4]	@ (800f150 <__sfp_lock_release+0x8>)
 800f14a:	f000 b915 	b.w	800f378 <__retarget_lock_release_recursive>
 800f14e:	bf00      	nop
 800f150:	2000206d 	.word	0x2000206d

0800f154 <__sinit>:
 800f154:	b510      	push	{r4, lr}
 800f156:	4604      	mov	r4, r0
 800f158:	f7ff fff0 	bl	800f13c <__sfp_lock_acquire>
 800f15c:	6a23      	ldr	r3, [r4, #32]
 800f15e:	b11b      	cbz	r3, 800f168 <__sinit+0x14>
 800f160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f164:	f7ff bff0 	b.w	800f148 <__sfp_lock_release>
 800f168:	4b04      	ldr	r3, [pc, #16]	@ (800f17c <__sinit+0x28>)
 800f16a:	6223      	str	r3, [r4, #32]
 800f16c:	4b04      	ldr	r3, [pc, #16]	@ (800f180 <__sinit+0x2c>)
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d1f5      	bne.n	800f160 <__sinit+0xc>
 800f174:	f7ff ffc4 	bl	800f100 <global_stdio_init.part.0>
 800f178:	e7f2      	b.n	800f160 <__sinit+0xc>
 800f17a:	bf00      	nop
 800f17c:	0800f0c1 	.word	0x0800f0c1
 800f180:	20002064 	.word	0x20002064

0800f184 <_fwalk_sglue>:
 800f184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f188:	4607      	mov	r7, r0
 800f18a:	4688      	mov	r8, r1
 800f18c:	4614      	mov	r4, r2
 800f18e:	2600      	movs	r6, #0
 800f190:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f194:	f1b9 0901 	subs.w	r9, r9, #1
 800f198:	d505      	bpl.n	800f1a6 <_fwalk_sglue+0x22>
 800f19a:	6824      	ldr	r4, [r4, #0]
 800f19c:	2c00      	cmp	r4, #0
 800f19e:	d1f7      	bne.n	800f190 <_fwalk_sglue+0xc>
 800f1a0:	4630      	mov	r0, r6
 800f1a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1a6:	89ab      	ldrh	r3, [r5, #12]
 800f1a8:	2b01      	cmp	r3, #1
 800f1aa:	d907      	bls.n	800f1bc <_fwalk_sglue+0x38>
 800f1ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f1b0:	3301      	adds	r3, #1
 800f1b2:	d003      	beq.n	800f1bc <_fwalk_sglue+0x38>
 800f1b4:	4629      	mov	r1, r5
 800f1b6:	4638      	mov	r0, r7
 800f1b8:	47c0      	blx	r8
 800f1ba:	4306      	orrs	r6, r0
 800f1bc:	3568      	adds	r5, #104	@ 0x68
 800f1be:	e7e9      	b.n	800f194 <_fwalk_sglue+0x10>

0800f1c0 <iprintf>:
 800f1c0:	b40f      	push	{r0, r1, r2, r3}
 800f1c2:	b507      	push	{r0, r1, r2, lr}
 800f1c4:	4906      	ldr	r1, [pc, #24]	@ (800f1e0 <iprintf+0x20>)
 800f1c6:	ab04      	add	r3, sp, #16
 800f1c8:	6808      	ldr	r0, [r1, #0]
 800f1ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1ce:	6881      	ldr	r1, [r0, #8]
 800f1d0:	9301      	str	r3, [sp, #4]
 800f1d2:	f001 fbdd 	bl	8010990 <_vfiprintf_r>
 800f1d6:	b003      	add	sp, #12
 800f1d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f1dc:	b004      	add	sp, #16
 800f1de:	4770      	bx	lr
 800f1e0:	20000130 	.word	0x20000130

0800f1e4 <putchar>:
 800f1e4:	4b02      	ldr	r3, [pc, #8]	@ (800f1f0 <putchar+0xc>)
 800f1e6:	4601      	mov	r1, r0
 800f1e8:	6818      	ldr	r0, [r3, #0]
 800f1ea:	6882      	ldr	r2, [r0, #8]
 800f1ec:	f001 bd94 	b.w	8010d18 <_putc_r>
 800f1f0:	20000130 	.word	0x20000130

0800f1f4 <__sread>:
 800f1f4:	b510      	push	{r4, lr}
 800f1f6:	460c      	mov	r4, r1
 800f1f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1fc:	f000 f86c 	bl	800f2d8 <_read_r>
 800f200:	2800      	cmp	r0, #0
 800f202:	bfab      	itete	ge
 800f204:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f206:	89a3      	ldrhlt	r3, [r4, #12]
 800f208:	181b      	addge	r3, r3, r0
 800f20a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f20e:	bfac      	ite	ge
 800f210:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f212:	81a3      	strhlt	r3, [r4, #12]
 800f214:	bd10      	pop	{r4, pc}

0800f216 <__swrite>:
 800f216:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f21a:	461f      	mov	r7, r3
 800f21c:	898b      	ldrh	r3, [r1, #12]
 800f21e:	05db      	lsls	r3, r3, #23
 800f220:	4605      	mov	r5, r0
 800f222:	460c      	mov	r4, r1
 800f224:	4616      	mov	r6, r2
 800f226:	d505      	bpl.n	800f234 <__swrite+0x1e>
 800f228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f22c:	2302      	movs	r3, #2
 800f22e:	2200      	movs	r2, #0
 800f230:	f000 f840 	bl	800f2b4 <_lseek_r>
 800f234:	89a3      	ldrh	r3, [r4, #12]
 800f236:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f23a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f23e:	81a3      	strh	r3, [r4, #12]
 800f240:	4632      	mov	r2, r6
 800f242:	463b      	mov	r3, r7
 800f244:	4628      	mov	r0, r5
 800f246:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f24a:	f000 b857 	b.w	800f2fc <_write_r>

0800f24e <__sseek>:
 800f24e:	b510      	push	{r4, lr}
 800f250:	460c      	mov	r4, r1
 800f252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f256:	f000 f82d 	bl	800f2b4 <_lseek_r>
 800f25a:	1c43      	adds	r3, r0, #1
 800f25c:	89a3      	ldrh	r3, [r4, #12]
 800f25e:	bf15      	itete	ne
 800f260:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f262:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f266:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f26a:	81a3      	strheq	r3, [r4, #12]
 800f26c:	bf18      	it	ne
 800f26e:	81a3      	strhne	r3, [r4, #12]
 800f270:	bd10      	pop	{r4, pc}

0800f272 <__sclose>:
 800f272:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f276:	f000 b80d 	b.w	800f294 <_close_r>

0800f27a <memset>:
 800f27a:	4402      	add	r2, r0
 800f27c:	4603      	mov	r3, r0
 800f27e:	4293      	cmp	r3, r2
 800f280:	d100      	bne.n	800f284 <memset+0xa>
 800f282:	4770      	bx	lr
 800f284:	f803 1b01 	strb.w	r1, [r3], #1
 800f288:	e7f9      	b.n	800f27e <memset+0x4>
	...

0800f28c <_localeconv_r>:
 800f28c:	4800      	ldr	r0, [pc, #0]	@ (800f290 <_localeconv_r+0x4>)
 800f28e:	4770      	bx	lr
 800f290:	20000270 	.word	0x20000270

0800f294 <_close_r>:
 800f294:	b538      	push	{r3, r4, r5, lr}
 800f296:	4d06      	ldr	r5, [pc, #24]	@ (800f2b0 <_close_r+0x1c>)
 800f298:	2300      	movs	r3, #0
 800f29a:	4604      	mov	r4, r0
 800f29c:	4608      	mov	r0, r1
 800f29e:	602b      	str	r3, [r5, #0]
 800f2a0:	f7f2 fac8 	bl	8001834 <_close>
 800f2a4:	1c43      	adds	r3, r0, #1
 800f2a6:	d102      	bne.n	800f2ae <_close_r+0x1a>
 800f2a8:	682b      	ldr	r3, [r5, #0]
 800f2aa:	b103      	cbz	r3, 800f2ae <_close_r+0x1a>
 800f2ac:	6023      	str	r3, [r4, #0]
 800f2ae:	bd38      	pop	{r3, r4, r5, pc}
 800f2b0:	20002068 	.word	0x20002068

0800f2b4 <_lseek_r>:
 800f2b4:	b538      	push	{r3, r4, r5, lr}
 800f2b6:	4d07      	ldr	r5, [pc, #28]	@ (800f2d4 <_lseek_r+0x20>)
 800f2b8:	4604      	mov	r4, r0
 800f2ba:	4608      	mov	r0, r1
 800f2bc:	4611      	mov	r1, r2
 800f2be:	2200      	movs	r2, #0
 800f2c0:	602a      	str	r2, [r5, #0]
 800f2c2:	461a      	mov	r2, r3
 800f2c4:	f7f2 fadd 	bl	8001882 <_lseek>
 800f2c8:	1c43      	adds	r3, r0, #1
 800f2ca:	d102      	bne.n	800f2d2 <_lseek_r+0x1e>
 800f2cc:	682b      	ldr	r3, [r5, #0]
 800f2ce:	b103      	cbz	r3, 800f2d2 <_lseek_r+0x1e>
 800f2d0:	6023      	str	r3, [r4, #0]
 800f2d2:	bd38      	pop	{r3, r4, r5, pc}
 800f2d4:	20002068 	.word	0x20002068

0800f2d8 <_read_r>:
 800f2d8:	b538      	push	{r3, r4, r5, lr}
 800f2da:	4d07      	ldr	r5, [pc, #28]	@ (800f2f8 <_read_r+0x20>)
 800f2dc:	4604      	mov	r4, r0
 800f2de:	4608      	mov	r0, r1
 800f2e0:	4611      	mov	r1, r2
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	602a      	str	r2, [r5, #0]
 800f2e6:	461a      	mov	r2, r3
 800f2e8:	f7f2 fa6b 	bl	80017c2 <_read>
 800f2ec:	1c43      	adds	r3, r0, #1
 800f2ee:	d102      	bne.n	800f2f6 <_read_r+0x1e>
 800f2f0:	682b      	ldr	r3, [r5, #0]
 800f2f2:	b103      	cbz	r3, 800f2f6 <_read_r+0x1e>
 800f2f4:	6023      	str	r3, [r4, #0]
 800f2f6:	bd38      	pop	{r3, r4, r5, pc}
 800f2f8:	20002068 	.word	0x20002068

0800f2fc <_write_r>:
 800f2fc:	b538      	push	{r3, r4, r5, lr}
 800f2fe:	4d07      	ldr	r5, [pc, #28]	@ (800f31c <_write_r+0x20>)
 800f300:	4604      	mov	r4, r0
 800f302:	4608      	mov	r0, r1
 800f304:	4611      	mov	r1, r2
 800f306:	2200      	movs	r2, #0
 800f308:	602a      	str	r2, [r5, #0]
 800f30a:	461a      	mov	r2, r3
 800f30c:	f7f2 fa76 	bl	80017fc <_write>
 800f310:	1c43      	adds	r3, r0, #1
 800f312:	d102      	bne.n	800f31a <_write_r+0x1e>
 800f314:	682b      	ldr	r3, [r5, #0]
 800f316:	b103      	cbz	r3, 800f31a <_write_r+0x1e>
 800f318:	6023      	str	r3, [r4, #0]
 800f31a:	bd38      	pop	{r3, r4, r5, pc}
 800f31c:	20002068 	.word	0x20002068

0800f320 <__errno>:
 800f320:	4b01      	ldr	r3, [pc, #4]	@ (800f328 <__errno+0x8>)
 800f322:	6818      	ldr	r0, [r3, #0]
 800f324:	4770      	bx	lr
 800f326:	bf00      	nop
 800f328:	20000130 	.word	0x20000130

0800f32c <__libc_init_array>:
 800f32c:	b570      	push	{r4, r5, r6, lr}
 800f32e:	4d0d      	ldr	r5, [pc, #52]	@ (800f364 <__libc_init_array+0x38>)
 800f330:	4c0d      	ldr	r4, [pc, #52]	@ (800f368 <__libc_init_array+0x3c>)
 800f332:	1b64      	subs	r4, r4, r5
 800f334:	10a4      	asrs	r4, r4, #2
 800f336:	2600      	movs	r6, #0
 800f338:	42a6      	cmp	r6, r4
 800f33a:	d109      	bne.n	800f350 <__libc_init_array+0x24>
 800f33c:	4d0b      	ldr	r5, [pc, #44]	@ (800f36c <__libc_init_array+0x40>)
 800f33e:	4c0c      	ldr	r4, [pc, #48]	@ (800f370 <__libc_init_array+0x44>)
 800f340:	f001 fef6 	bl	8011130 <_init>
 800f344:	1b64      	subs	r4, r4, r5
 800f346:	10a4      	asrs	r4, r4, #2
 800f348:	2600      	movs	r6, #0
 800f34a:	42a6      	cmp	r6, r4
 800f34c:	d105      	bne.n	800f35a <__libc_init_array+0x2e>
 800f34e:	bd70      	pop	{r4, r5, r6, pc}
 800f350:	f855 3b04 	ldr.w	r3, [r5], #4
 800f354:	4798      	blx	r3
 800f356:	3601      	adds	r6, #1
 800f358:	e7ee      	b.n	800f338 <__libc_init_array+0xc>
 800f35a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f35e:	4798      	blx	r3
 800f360:	3601      	adds	r6, #1
 800f362:	e7f2      	b.n	800f34a <__libc_init_array+0x1e>
 800f364:	0801163c 	.word	0x0801163c
 800f368:	0801163c 	.word	0x0801163c
 800f36c:	0801163c 	.word	0x0801163c
 800f370:	08011640 	.word	0x08011640

0800f374 <__retarget_lock_init_recursive>:
 800f374:	4770      	bx	lr

0800f376 <__retarget_lock_acquire_recursive>:
 800f376:	4770      	bx	lr

0800f378 <__retarget_lock_release_recursive>:
 800f378:	4770      	bx	lr

0800f37a <memcpy>:
 800f37a:	440a      	add	r2, r1
 800f37c:	4291      	cmp	r1, r2
 800f37e:	f100 33ff 	add.w	r3, r0, #4294967295
 800f382:	d100      	bne.n	800f386 <memcpy+0xc>
 800f384:	4770      	bx	lr
 800f386:	b510      	push	{r4, lr}
 800f388:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f38c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f390:	4291      	cmp	r1, r2
 800f392:	d1f9      	bne.n	800f388 <memcpy+0xe>
 800f394:	bd10      	pop	{r4, pc}

0800f396 <quorem>:
 800f396:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f39a:	6903      	ldr	r3, [r0, #16]
 800f39c:	690c      	ldr	r4, [r1, #16]
 800f39e:	42a3      	cmp	r3, r4
 800f3a0:	4607      	mov	r7, r0
 800f3a2:	db7e      	blt.n	800f4a2 <quorem+0x10c>
 800f3a4:	3c01      	subs	r4, #1
 800f3a6:	f101 0814 	add.w	r8, r1, #20
 800f3aa:	00a3      	lsls	r3, r4, #2
 800f3ac:	f100 0514 	add.w	r5, r0, #20
 800f3b0:	9300      	str	r3, [sp, #0]
 800f3b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f3b6:	9301      	str	r3, [sp, #4]
 800f3b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f3bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f3c0:	3301      	adds	r3, #1
 800f3c2:	429a      	cmp	r2, r3
 800f3c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f3c8:	fbb2 f6f3 	udiv	r6, r2, r3
 800f3cc:	d32e      	bcc.n	800f42c <quorem+0x96>
 800f3ce:	f04f 0a00 	mov.w	sl, #0
 800f3d2:	46c4      	mov	ip, r8
 800f3d4:	46ae      	mov	lr, r5
 800f3d6:	46d3      	mov	fp, sl
 800f3d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f3dc:	b298      	uxth	r0, r3
 800f3de:	fb06 a000 	mla	r0, r6, r0, sl
 800f3e2:	0c02      	lsrs	r2, r0, #16
 800f3e4:	0c1b      	lsrs	r3, r3, #16
 800f3e6:	fb06 2303 	mla	r3, r6, r3, r2
 800f3ea:	f8de 2000 	ldr.w	r2, [lr]
 800f3ee:	b280      	uxth	r0, r0
 800f3f0:	b292      	uxth	r2, r2
 800f3f2:	1a12      	subs	r2, r2, r0
 800f3f4:	445a      	add	r2, fp
 800f3f6:	f8de 0000 	ldr.w	r0, [lr]
 800f3fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f3fe:	b29b      	uxth	r3, r3
 800f400:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f404:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f408:	b292      	uxth	r2, r2
 800f40a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f40e:	45e1      	cmp	r9, ip
 800f410:	f84e 2b04 	str.w	r2, [lr], #4
 800f414:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f418:	d2de      	bcs.n	800f3d8 <quorem+0x42>
 800f41a:	9b00      	ldr	r3, [sp, #0]
 800f41c:	58eb      	ldr	r3, [r5, r3]
 800f41e:	b92b      	cbnz	r3, 800f42c <quorem+0x96>
 800f420:	9b01      	ldr	r3, [sp, #4]
 800f422:	3b04      	subs	r3, #4
 800f424:	429d      	cmp	r5, r3
 800f426:	461a      	mov	r2, r3
 800f428:	d32f      	bcc.n	800f48a <quorem+0xf4>
 800f42a:	613c      	str	r4, [r7, #16]
 800f42c:	4638      	mov	r0, r7
 800f42e:	f001 f97d 	bl	801072c <__mcmp>
 800f432:	2800      	cmp	r0, #0
 800f434:	db25      	blt.n	800f482 <quorem+0xec>
 800f436:	4629      	mov	r1, r5
 800f438:	2000      	movs	r0, #0
 800f43a:	f858 2b04 	ldr.w	r2, [r8], #4
 800f43e:	f8d1 c000 	ldr.w	ip, [r1]
 800f442:	fa1f fe82 	uxth.w	lr, r2
 800f446:	fa1f f38c 	uxth.w	r3, ip
 800f44a:	eba3 030e 	sub.w	r3, r3, lr
 800f44e:	4403      	add	r3, r0
 800f450:	0c12      	lsrs	r2, r2, #16
 800f452:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f456:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f45a:	b29b      	uxth	r3, r3
 800f45c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f460:	45c1      	cmp	r9, r8
 800f462:	f841 3b04 	str.w	r3, [r1], #4
 800f466:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f46a:	d2e6      	bcs.n	800f43a <quorem+0xa4>
 800f46c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f470:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f474:	b922      	cbnz	r2, 800f480 <quorem+0xea>
 800f476:	3b04      	subs	r3, #4
 800f478:	429d      	cmp	r5, r3
 800f47a:	461a      	mov	r2, r3
 800f47c:	d30b      	bcc.n	800f496 <quorem+0x100>
 800f47e:	613c      	str	r4, [r7, #16]
 800f480:	3601      	adds	r6, #1
 800f482:	4630      	mov	r0, r6
 800f484:	b003      	add	sp, #12
 800f486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f48a:	6812      	ldr	r2, [r2, #0]
 800f48c:	3b04      	subs	r3, #4
 800f48e:	2a00      	cmp	r2, #0
 800f490:	d1cb      	bne.n	800f42a <quorem+0x94>
 800f492:	3c01      	subs	r4, #1
 800f494:	e7c6      	b.n	800f424 <quorem+0x8e>
 800f496:	6812      	ldr	r2, [r2, #0]
 800f498:	3b04      	subs	r3, #4
 800f49a:	2a00      	cmp	r2, #0
 800f49c:	d1ef      	bne.n	800f47e <quorem+0xe8>
 800f49e:	3c01      	subs	r4, #1
 800f4a0:	e7ea      	b.n	800f478 <quorem+0xe2>
 800f4a2:	2000      	movs	r0, #0
 800f4a4:	e7ee      	b.n	800f484 <quorem+0xee>
	...

0800f4a8 <_dtoa_r>:
 800f4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4ac:	69c7      	ldr	r7, [r0, #28]
 800f4ae:	b097      	sub	sp, #92	@ 0x5c
 800f4b0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800f4b4:	ec55 4b10 	vmov	r4, r5, d0
 800f4b8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800f4ba:	9107      	str	r1, [sp, #28]
 800f4bc:	4681      	mov	r9, r0
 800f4be:	920c      	str	r2, [sp, #48]	@ 0x30
 800f4c0:	9311      	str	r3, [sp, #68]	@ 0x44
 800f4c2:	b97f      	cbnz	r7, 800f4e4 <_dtoa_r+0x3c>
 800f4c4:	2010      	movs	r0, #16
 800f4c6:	f000 fe09 	bl	80100dc <malloc>
 800f4ca:	4602      	mov	r2, r0
 800f4cc:	f8c9 001c 	str.w	r0, [r9, #28]
 800f4d0:	b920      	cbnz	r0, 800f4dc <_dtoa_r+0x34>
 800f4d2:	4ba9      	ldr	r3, [pc, #676]	@ (800f778 <_dtoa_r+0x2d0>)
 800f4d4:	21ef      	movs	r1, #239	@ 0xef
 800f4d6:	48a9      	ldr	r0, [pc, #676]	@ (800f77c <_dtoa_r+0x2d4>)
 800f4d8:	f001 fcf6 	bl	8010ec8 <__assert_func>
 800f4dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f4e0:	6007      	str	r7, [r0, #0]
 800f4e2:	60c7      	str	r7, [r0, #12]
 800f4e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f4e8:	6819      	ldr	r1, [r3, #0]
 800f4ea:	b159      	cbz	r1, 800f504 <_dtoa_r+0x5c>
 800f4ec:	685a      	ldr	r2, [r3, #4]
 800f4ee:	604a      	str	r2, [r1, #4]
 800f4f0:	2301      	movs	r3, #1
 800f4f2:	4093      	lsls	r3, r2
 800f4f4:	608b      	str	r3, [r1, #8]
 800f4f6:	4648      	mov	r0, r9
 800f4f8:	f000 fee6 	bl	80102c8 <_Bfree>
 800f4fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f500:	2200      	movs	r2, #0
 800f502:	601a      	str	r2, [r3, #0]
 800f504:	1e2b      	subs	r3, r5, #0
 800f506:	bfb9      	ittee	lt
 800f508:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f50c:	9305      	strlt	r3, [sp, #20]
 800f50e:	2300      	movge	r3, #0
 800f510:	6033      	strge	r3, [r6, #0]
 800f512:	9f05      	ldr	r7, [sp, #20]
 800f514:	4b9a      	ldr	r3, [pc, #616]	@ (800f780 <_dtoa_r+0x2d8>)
 800f516:	bfbc      	itt	lt
 800f518:	2201      	movlt	r2, #1
 800f51a:	6032      	strlt	r2, [r6, #0]
 800f51c:	43bb      	bics	r3, r7
 800f51e:	d112      	bne.n	800f546 <_dtoa_r+0x9e>
 800f520:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f522:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f526:	6013      	str	r3, [r2, #0]
 800f528:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f52c:	4323      	orrs	r3, r4
 800f52e:	f000 855a 	beq.w	800ffe6 <_dtoa_r+0xb3e>
 800f532:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f534:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800f794 <_dtoa_r+0x2ec>
 800f538:	2b00      	cmp	r3, #0
 800f53a:	f000 855c 	beq.w	800fff6 <_dtoa_r+0xb4e>
 800f53e:	f10a 0303 	add.w	r3, sl, #3
 800f542:	f000 bd56 	b.w	800fff2 <_dtoa_r+0xb4a>
 800f546:	ed9d 7b04 	vldr	d7, [sp, #16]
 800f54a:	2200      	movs	r2, #0
 800f54c:	ec51 0b17 	vmov	r0, r1, d7
 800f550:	2300      	movs	r3, #0
 800f552:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800f556:	f7f1 fa8f 	bl	8000a78 <__aeabi_dcmpeq>
 800f55a:	4680      	mov	r8, r0
 800f55c:	b158      	cbz	r0, 800f576 <_dtoa_r+0xce>
 800f55e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800f560:	2301      	movs	r3, #1
 800f562:	6013      	str	r3, [r2, #0]
 800f564:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f566:	b113      	cbz	r3, 800f56e <_dtoa_r+0xc6>
 800f568:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f56a:	4b86      	ldr	r3, [pc, #536]	@ (800f784 <_dtoa_r+0x2dc>)
 800f56c:	6013      	str	r3, [r2, #0]
 800f56e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800f798 <_dtoa_r+0x2f0>
 800f572:	f000 bd40 	b.w	800fff6 <_dtoa_r+0xb4e>
 800f576:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800f57a:	aa14      	add	r2, sp, #80	@ 0x50
 800f57c:	a915      	add	r1, sp, #84	@ 0x54
 800f57e:	4648      	mov	r0, r9
 800f580:	f001 f984 	bl	801088c <__d2b>
 800f584:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f588:	9002      	str	r0, [sp, #8]
 800f58a:	2e00      	cmp	r6, #0
 800f58c:	d078      	beq.n	800f680 <_dtoa_r+0x1d8>
 800f58e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f590:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800f594:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f598:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f59c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f5a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f5a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f5a8:	4619      	mov	r1, r3
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	4b76      	ldr	r3, [pc, #472]	@ (800f788 <_dtoa_r+0x2e0>)
 800f5ae:	f7f0 fe43 	bl	8000238 <__aeabi_dsub>
 800f5b2:	a36b      	add	r3, pc, #428	@ (adr r3, 800f760 <_dtoa_r+0x2b8>)
 800f5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5b8:	f7f0 fff6 	bl	80005a8 <__aeabi_dmul>
 800f5bc:	a36a      	add	r3, pc, #424	@ (adr r3, 800f768 <_dtoa_r+0x2c0>)
 800f5be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5c2:	f7f0 fe3b 	bl	800023c <__adddf3>
 800f5c6:	4604      	mov	r4, r0
 800f5c8:	4630      	mov	r0, r6
 800f5ca:	460d      	mov	r5, r1
 800f5cc:	f7f0 ff82 	bl	80004d4 <__aeabi_i2d>
 800f5d0:	a367      	add	r3, pc, #412	@ (adr r3, 800f770 <_dtoa_r+0x2c8>)
 800f5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5d6:	f7f0 ffe7 	bl	80005a8 <__aeabi_dmul>
 800f5da:	4602      	mov	r2, r0
 800f5dc:	460b      	mov	r3, r1
 800f5de:	4620      	mov	r0, r4
 800f5e0:	4629      	mov	r1, r5
 800f5e2:	f7f0 fe2b 	bl	800023c <__adddf3>
 800f5e6:	4604      	mov	r4, r0
 800f5e8:	460d      	mov	r5, r1
 800f5ea:	f7f1 fa8d 	bl	8000b08 <__aeabi_d2iz>
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	4607      	mov	r7, r0
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	4620      	mov	r0, r4
 800f5f6:	4629      	mov	r1, r5
 800f5f8:	f7f1 fa48 	bl	8000a8c <__aeabi_dcmplt>
 800f5fc:	b140      	cbz	r0, 800f610 <_dtoa_r+0x168>
 800f5fe:	4638      	mov	r0, r7
 800f600:	f7f0 ff68 	bl	80004d4 <__aeabi_i2d>
 800f604:	4622      	mov	r2, r4
 800f606:	462b      	mov	r3, r5
 800f608:	f7f1 fa36 	bl	8000a78 <__aeabi_dcmpeq>
 800f60c:	b900      	cbnz	r0, 800f610 <_dtoa_r+0x168>
 800f60e:	3f01      	subs	r7, #1
 800f610:	2f16      	cmp	r7, #22
 800f612:	d852      	bhi.n	800f6ba <_dtoa_r+0x212>
 800f614:	4b5d      	ldr	r3, [pc, #372]	@ (800f78c <_dtoa_r+0x2e4>)
 800f616:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f61e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f622:	f7f1 fa33 	bl	8000a8c <__aeabi_dcmplt>
 800f626:	2800      	cmp	r0, #0
 800f628:	d049      	beq.n	800f6be <_dtoa_r+0x216>
 800f62a:	3f01      	subs	r7, #1
 800f62c:	2300      	movs	r3, #0
 800f62e:	9310      	str	r3, [sp, #64]	@ 0x40
 800f630:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f632:	1b9b      	subs	r3, r3, r6
 800f634:	1e5a      	subs	r2, r3, #1
 800f636:	bf45      	ittet	mi
 800f638:	f1c3 0301 	rsbmi	r3, r3, #1
 800f63c:	9300      	strmi	r3, [sp, #0]
 800f63e:	2300      	movpl	r3, #0
 800f640:	2300      	movmi	r3, #0
 800f642:	9206      	str	r2, [sp, #24]
 800f644:	bf54      	ite	pl
 800f646:	9300      	strpl	r3, [sp, #0]
 800f648:	9306      	strmi	r3, [sp, #24]
 800f64a:	2f00      	cmp	r7, #0
 800f64c:	db39      	blt.n	800f6c2 <_dtoa_r+0x21a>
 800f64e:	9b06      	ldr	r3, [sp, #24]
 800f650:	970d      	str	r7, [sp, #52]	@ 0x34
 800f652:	443b      	add	r3, r7
 800f654:	9306      	str	r3, [sp, #24]
 800f656:	2300      	movs	r3, #0
 800f658:	9308      	str	r3, [sp, #32]
 800f65a:	9b07      	ldr	r3, [sp, #28]
 800f65c:	2b09      	cmp	r3, #9
 800f65e:	d863      	bhi.n	800f728 <_dtoa_r+0x280>
 800f660:	2b05      	cmp	r3, #5
 800f662:	bfc4      	itt	gt
 800f664:	3b04      	subgt	r3, #4
 800f666:	9307      	strgt	r3, [sp, #28]
 800f668:	9b07      	ldr	r3, [sp, #28]
 800f66a:	f1a3 0302 	sub.w	r3, r3, #2
 800f66e:	bfcc      	ite	gt
 800f670:	2400      	movgt	r4, #0
 800f672:	2401      	movle	r4, #1
 800f674:	2b03      	cmp	r3, #3
 800f676:	d863      	bhi.n	800f740 <_dtoa_r+0x298>
 800f678:	e8df f003 	tbb	[pc, r3]
 800f67c:	2b375452 	.word	0x2b375452
 800f680:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800f684:	441e      	add	r6, r3
 800f686:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f68a:	2b20      	cmp	r3, #32
 800f68c:	bfc1      	itttt	gt
 800f68e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f692:	409f      	lslgt	r7, r3
 800f694:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f698:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f69c:	bfd6      	itet	le
 800f69e:	f1c3 0320 	rsble	r3, r3, #32
 800f6a2:	ea47 0003 	orrgt.w	r0, r7, r3
 800f6a6:	fa04 f003 	lslle.w	r0, r4, r3
 800f6aa:	f7f0 ff03 	bl	80004b4 <__aeabi_ui2d>
 800f6ae:	2201      	movs	r2, #1
 800f6b0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f6b4:	3e01      	subs	r6, #1
 800f6b6:	9212      	str	r2, [sp, #72]	@ 0x48
 800f6b8:	e776      	b.n	800f5a8 <_dtoa_r+0x100>
 800f6ba:	2301      	movs	r3, #1
 800f6bc:	e7b7      	b.n	800f62e <_dtoa_r+0x186>
 800f6be:	9010      	str	r0, [sp, #64]	@ 0x40
 800f6c0:	e7b6      	b.n	800f630 <_dtoa_r+0x188>
 800f6c2:	9b00      	ldr	r3, [sp, #0]
 800f6c4:	1bdb      	subs	r3, r3, r7
 800f6c6:	9300      	str	r3, [sp, #0]
 800f6c8:	427b      	negs	r3, r7
 800f6ca:	9308      	str	r3, [sp, #32]
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	930d      	str	r3, [sp, #52]	@ 0x34
 800f6d0:	e7c3      	b.n	800f65a <_dtoa_r+0x1b2>
 800f6d2:	2301      	movs	r3, #1
 800f6d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f6d8:	eb07 0b03 	add.w	fp, r7, r3
 800f6dc:	f10b 0301 	add.w	r3, fp, #1
 800f6e0:	2b01      	cmp	r3, #1
 800f6e2:	9303      	str	r3, [sp, #12]
 800f6e4:	bfb8      	it	lt
 800f6e6:	2301      	movlt	r3, #1
 800f6e8:	e006      	b.n	800f6f8 <_dtoa_r+0x250>
 800f6ea:	2301      	movs	r3, #1
 800f6ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800f6ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	dd28      	ble.n	800f746 <_dtoa_r+0x29e>
 800f6f4:	469b      	mov	fp, r3
 800f6f6:	9303      	str	r3, [sp, #12]
 800f6f8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800f6fc:	2100      	movs	r1, #0
 800f6fe:	2204      	movs	r2, #4
 800f700:	f102 0514 	add.w	r5, r2, #20
 800f704:	429d      	cmp	r5, r3
 800f706:	d926      	bls.n	800f756 <_dtoa_r+0x2ae>
 800f708:	6041      	str	r1, [r0, #4]
 800f70a:	4648      	mov	r0, r9
 800f70c:	f000 fd9c 	bl	8010248 <_Balloc>
 800f710:	4682      	mov	sl, r0
 800f712:	2800      	cmp	r0, #0
 800f714:	d142      	bne.n	800f79c <_dtoa_r+0x2f4>
 800f716:	4b1e      	ldr	r3, [pc, #120]	@ (800f790 <_dtoa_r+0x2e8>)
 800f718:	4602      	mov	r2, r0
 800f71a:	f240 11af 	movw	r1, #431	@ 0x1af
 800f71e:	e6da      	b.n	800f4d6 <_dtoa_r+0x2e>
 800f720:	2300      	movs	r3, #0
 800f722:	e7e3      	b.n	800f6ec <_dtoa_r+0x244>
 800f724:	2300      	movs	r3, #0
 800f726:	e7d5      	b.n	800f6d4 <_dtoa_r+0x22c>
 800f728:	2401      	movs	r4, #1
 800f72a:	2300      	movs	r3, #0
 800f72c:	9307      	str	r3, [sp, #28]
 800f72e:	9409      	str	r4, [sp, #36]	@ 0x24
 800f730:	f04f 3bff 	mov.w	fp, #4294967295
 800f734:	2200      	movs	r2, #0
 800f736:	f8cd b00c 	str.w	fp, [sp, #12]
 800f73a:	2312      	movs	r3, #18
 800f73c:	920c      	str	r2, [sp, #48]	@ 0x30
 800f73e:	e7db      	b.n	800f6f8 <_dtoa_r+0x250>
 800f740:	2301      	movs	r3, #1
 800f742:	9309      	str	r3, [sp, #36]	@ 0x24
 800f744:	e7f4      	b.n	800f730 <_dtoa_r+0x288>
 800f746:	f04f 0b01 	mov.w	fp, #1
 800f74a:	f8cd b00c 	str.w	fp, [sp, #12]
 800f74e:	465b      	mov	r3, fp
 800f750:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800f754:	e7d0      	b.n	800f6f8 <_dtoa_r+0x250>
 800f756:	3101      	adds	r1, #1
 800f758:	0052      	lsls	r2, r2, #1
 800f75a:	e7d1      	b.n	800f700 <_dtoa_r+0x258>
 800f75c:	f3af 8000 	nop.w
 800f760:	636f4361 	.word	0x636f4361
 800f764:	3fd287a7 	.word	0x3fd287a7
 800f768:	8b60c8b3 	.word	0x8b60c8b3
 800f76c:	3fc68a28 	.word	0x3fc68a28
 800f770:	509f79fb 	.word	0x509f79fb
 800f774:	3fd34413 	.word	0x3fd34413
 800f778:	08011301 	.word	0x08011301
 800f77c:	08011318 	.word	0x08011318
 800f780:	7ff00000 	.word	0x7ff00000
 800f784:	080112d1 	.word	0x080112d1
 800f788:	3ff80000 	.word	0x3ff80000
 800f78c:	08011468 	.word	0x08011468
 800f790:	08011370 	.word	0x08011370
 800f794:	080112fd 	.word	0x080112fd
 800f798:	080112d0 	.word	0x080112d0
 800f79c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800f7a0:	6018      	str	r0, [r3, #0]
 800f7a2:	9b03      	ldr	r3, [sp, #12]
 800f7a4:	2b0e      	cmp	r3, #14
 800f7a6:	f200 80a1 	bhi.w	800f8ec <_dtoa_r+0x444>
 800f7aa:	2c00      	cmp	r4, #0
 800f7ac:	f000 809e 	beq.w	800f8ec <_dtoa_r+0x444>
 800f7b0:	2f00      	cmp	r7, #0
 800f7b2:	dd33      	ble.n	800f81c <_dtoa_r+0x374>
 800f7b4:	4b9c      	ldr	r3, [pc, #624]	@ (800fa28 <_dtoa_r+0x580>)
 800f7b6:	f007 020f 	and.w	r2, r7, #15
 800f7ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f7be:	ed93 7b00 	vldr	d7, [r3]
 800f7c2:	05f8      	lsls	r0, r7, #23
 800f7c4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800f7c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800f7cc:	d516      	bpl.n	800f7fc <_dtoa_r+0x354>
 800f7ce:	4b97      	ldr	r3, [pc, #604]	@ (800fa2c <_dtoa_r+0x584>)
 800f7d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f7d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f7d8:	f7f1 f810 	bl	80007fc <__aeabi_ddiv>
 800f7dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f7e0:	f004 040f 	and.w	r4, r4, #15
 800f7e4:	2603      	movs	r6, #3
 800f7e6:	4d91      	ldr	r5, [pc, #580]	@ (800fa2c <_dtoa_r+0x584>)
 800f7e8:	b954      	cbnz	r4, 800f800 <_dtoa_r+0x358>
 800f7ea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f7ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f7f2:	f7f1 f803 	bl	80007fc <__aeabi_ddiv>
 800f7f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f7fa:	e028      	b.n	800f84e <_dtoa_r+0x3a6>
 800f7fc:	2602      	movs	r6, #2
 800f7fe:	e7f2      	b.n	800f7e6 <_dtoa_r+0x33e>
 800f800:	07e1      	lsls	r1, r4, #31
 800f802:	d508      	bpl.n	800f816 <_dtoa_r+0x36e>
 800f804:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800f808:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f80c:	f7f0 fecc 	bl	80005a8 <__aeabi_dmul>
 800f810:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f814:	3601      	adds	r6, #1
 800f816:	1064      	asrs	r4, r4, #1
 800f818:	3508      	adds	r5, #8
 800f81a:	e7e5      	b.n	800f7e8 <_dtoa_r+0x340>
 800f81c:	f000 80af 	beq.w	800f97e <_dtoa_r+0x4d6>
 800f820:	427c      	negs	r4, r7
 800f822:	4b81      	ldr	r3, [pc, #516]	@ (800fa28 <_dtoa_r+0x580>)
 800f824:	4d81      	ldr	r5, [pc, #516]	@ (800fa2c <_dtoa_r+0x584>)
 800f826:	f004 020f 	and.w	r2, r4, #15
 800f82a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f832:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800f836:	f7f0 feb7 	bl	80005a8 <__aeabi_dmul>
 800f83a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f83e:	1124      	asrs	r4, r4, #4
 800f840:	2300      	movs	r3, #0
 800f842:	2602      	movs	r6, #2
 800f844:	2c00      	cmp	r4, #0
 800f846:	f040 808f 	bne.w	800f968 <_dtoa_r+0x4c0>
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d1d3      	bne.n	800f7f6 <_dtoa_r+0x34e>
 800f84e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f850:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800f854:	2b00      	cmp	r3, #0
 800f856:	f000 8094 	beq.w	800f982 <_dtoa_r+0x4da>
 800f85a:	4b75      	ldr	r3, [pc, #468]	@ (800fa30 <_dtoa_r+0x588>)
 800f85c:	2200      	movs	r2, #0
 800f85e:	4620      	mov	r0, r4
 800f860:	4629      	mov	r1, r5
 800f862:	f7f1 f913 	bl	8000a8c <__aeabi_dcmplt>
 800f866:	2800      	cmp	r0, #0
 800f868:	f000 808b 	beq.w	800f982 <_dtoa_r+0x4da>
 800f86c:	9b03      	ldr	r3, [sp, #12]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	f000 8087 	beq.w	800f982 <_dtoa_r+0x4da>
 800f874:	f1bb 0f00 	cmp.w	fp, #0
 800f878:	dd34      	ble.n	800f8e4 <_dtoa_r+0x43c>
 800f87a:	4620      	mov	r0, r4
 800f87c:	4b6d      	ldr	r3, [pc, #436]	@ (800fa34 <_dtoa_r+0x58c>)
 800f87e:	2200      	movs	r2, #0
 800f880:	4629      	mov	r1, r5
 800f882:	f7f0 fe91 	bl	80005a8 <__aeabi_dmul>
 800f886:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f88a:	f107 38ff 	add.w	r8, r7, #4294967295
 800f88e:	3601      	adds	r6, #1
 800f890:	465c      	mov	r4, fp
 800f892:	4630      	mov	r0, r6
 800f894:	f7f0 fe1e 	bl	80004d4 <__aeabi_i2d>
 800f898:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f89c:	f7f0 fe84 	bl	80005a8 <__aeabi_dmul>
 800f8a0:	4b65      	ldr	r3, [pc, #404]	@ (800fa38 <_dtoa_r+0x590>)
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	f7f0 fcca 	bl	800023c <__adddf3>
 800f8a8:	4605      	mov	r5, r0
 800f8aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800f8ae:	2c00      	cmp	r4, #0
 800f8b0:	d16a      	bne.n	800f988 <_dtoa_r+0x4e0>
 800f8b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f8b6:	4b61      	ldr	r3, [pc, #388]	@ (800fa3c <_dtoa_r+0x594>)
 800f8b8:	2200      	movs	r2, #0
 800f8ba:	f7f0 fcbd 	bl	8000238 <__aeabi_dsub>
 800f8be:	4602      	mov	r2, r0
 800f8c0:	460b      	mov	r3, r1
 800f8c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f8c6:	462a      	mov	r2, r5
 800f8c8:	4633      	mov	r3, r6
 800f8ca:	f7f1 f8fd 	bl	8000ac8 <__aeabi_dcmpgt>
 800f8ce:	2800      	cmp	r0, #0
 800f8d0:	f040 8298 	bne.w	800fe04 <_dtoa_r+0x95c>
 800f8d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f8d8:	462a      	mov	r2, r5
 800f8da:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800f8de:	f7f1 f8d5 	bl	8000a8c <__aeabi_dcmplt>
 800f8e2:	bb38      	cbnz	r0, 800f934 <_dtoa_r+0x48c>
 800f8e4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800f8e8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800f8ec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	f2c0 8157 	blt.w	800fba2 <_dtoa_r+0x6fa>
 800f8f4:	2f0e      	cmp	r7, #14
 800f8f6:	f300 8154 	bgt.w	800fba2 <_dtoa_r+0x6fa>
 800f8fa:	4b4b      	ldr	r3, [pc, #300]	@ (800fa28 <_dtoa_r+0x580>)
 800f8fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f900:	ed93 7b00 	vldr	d7, [r3]
 800f904:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f906:	2b00      	cmp	r3, #0
 800f908:	ed8d 7b00 	vstr	d7, [sp]
 800f90c:	f280 80e5 	bge.w	800fada <_dtoa_r+0x632>
 800f910:	9b03      	ldr	r3, [sp, #12]
 800f912:	2b00      	cmp	r3, #0
 800f914:	f300 80e1 	bgt.w	800fada <_dtoa_r+0x632>
 800f918:	d10c      	bne.n	800f934 <_dtoa_r+0x48c>
 800f91a:	4b48      	ldr	r3, [pc, #288]	@ (800fa3c <_dtoa_r+0x594>)
 800f91c:	2200      	movs	r2, #0
 800f91e:	ec51 0b17 	vmov	r0, r1, d7
 800f922:	f7f0 fe41 	bl	80005a8 <__aeabi_dmul>
 800f926:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f92a:	f7f1 f8c3 	bl	8000ab4 <__aeabi_dcmpge>
 800f92e:	2800      	cmp	r0, #0
 800f930:	f000 8266 	beq.w	800fe00 <_dtoa_r+0x958>
 800f934:	2400      	movs	r4, #0
 800f936:	4625      	mov	r5, r4
 800f938:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f93a:	4656      	mov	r6, sl
 800f93c:	ea6f 0803 	mvn.w	r8, r3
 800f940:	2700      	movs	r7, #0
 800f942:	4621      	mov	r1, r4
 800f944:	4648      	mov	r0, r9
 800f946:	f000 fcbf 	bl	80102c8 <_Bfree>
 800f94a:	2d00      	cmp	r5, #0
 800f94c:	f000 80bd 	beq.w	800faca <_dtoa_r+0x622>
 800f950:	b12f      	cbz	r7, 800f95e <_dtoa_r+0x4b6>
 800f952:	42af      	cmp	r7, r5
 800f954:	d003      	beq.n	800f95e <_dtoa_r+0x4b6>
 800f956:	4639      	mov	r1, r7
 800f958:	4648      	mov	r0, r9
 800f95a:	f000 fcb5 	bl	80102c8 <_Bfree>
 800f95e:	4629      	mov	r1, r5
 800f960:	4648      	mov	r0, r9
 800f962:	f000 fcb1 	bl	80102c8 <_Bfree>
 800f966:	e0b0      	b.n	800faca <_dtoa_r+0x622>
 800f968:	07e2      	lsls	r2, r4, #31
 800f96a:	d505      	bpl.n	800f978 <_dtoa_r+0x4d0>
 800f96c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f970:	f7f0 fe1a 	bl	80005a8 <__aeabi_dmul>
 800f974:	3601      	adds	r6, #1
 800f976:	2301      	movs	r3, #1
 800f978:	1064      	asrs	r4, r4, #1
 800f97a:	3508      	adds	r5, #8
 800f97c:	e762      	b.n	800f844 <_dtoa_r+0x39c>
 800f97e:	2602      	movs	r6, #2
 800f980:	e765      	b.n	800f84e <_dtoa_r+0x3a6>
 800f982:	9c03      	ldr	r4, [sp, #12]
 800f984:	46b8      	mov	r8, r7
 800f986:	e784      	b.n	800f892 <_dtoa_r+0x3ea>
 800f988:	4b27      	ldr	r3, [pc, #156]	@ (800fa28 <_dtoa_r+0x580>)
 800f98a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f98c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f990:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f994:	4454      	add	r4, sl
 800f996:	2900      	cmp	r1, #0
 800f998:	d054      	beq.n	800fa44 <_dtoa_r+0x59c>
 800f99a:	4929      	ldr	r1, [pc, #164]	@ (800fa40 <_dtoa_r+0x598>)
 800f99c:	2000      	movs	r0, #0
 800f99e:	f7f0 ff2d 	bl	80007fc <__aeabi_ddiv>
 800f9a2:	4633      	mov	r3, r6
 800f9a4:	462a      	mov	r2, r5
 800f9a6:	f7f0 fc47 	bl	8000238 <__aeabi_dsub>
 800f9aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800f9ae:	4656      	mov	r6, sl
 800f9b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f9b4:	f7f1 f8a8 	bl	8000b08 <__aeabi_d2iz>
 800f9b8:	4605      	mov	r5, r0
 800f9ba:	f7f0 fd8b 	bl	80004d4 <__aeabi_i2d>
 800f9be:	4602      	mov	r2, r0
 800f9c0:	460b      	mov	r3, r1
 800f9c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f9c6:	f7f0 fc37 	bl	8000238 <__aeabi_dsub>
 800f9ca:	3530      	adds	r5, #48	@ 0x30
 800f9cc:	4602      	mov	r2, r0
 800f9ce:	460b      	mov	r3, r1
 800f9d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f9d4:	f806 5b01 	strb.w	r5, [r6], #1
 800f9d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f9dc:	f7f1 f856 	bl	8000a8c <__aeabi_dcmplt>
 800f9e0:	2800      	cmp	r0, #0
 800f9e2:	d172      	bne.n	800faca <_dtoa_r+0x622>
 800f9e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f9e8:	4911      	ldr	r1, [pc, #68]	@ (800fa30 <_dtoa_r+0x588>)
 800f9ea:	2000      	movs	r0, #0
 800f9ec:	f7f0 fc24 	bl	8000238 <__aeabi_dsub>
 800f9f0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800f9f4:	f7f1 f84a 	bl	8000a8c <__aeabi_dcmplt>
 800f9f8:	2800      	cmp	r0, #0
 800f9fa:	f040 80b4 	bne.w	800fb66 <_dtoa_r+0x6be>
 800f9fe:	42a6      	cmp	r6, r4
 800fa00:	f43f af70 	beq.w	800f8e4 <_dtoa_r+0x43c>
 800fa04:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800fa08:	4b0a      	ldr	r3, [pc, #40]	@ (800fa34 <_dtoa_r+0x58c>)
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	f7f0 fdcc 	bl	80005a8 <__aeabi_dmul>
 800fa10:	4b08      	ldr	r3, [pc, #32]	@ (800fa34 <_dtoa_r+0x58c>)
 800fa12:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fa16:	2200      	movs	r2, #0
 800fa18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fa1c:	f7f0 fdc4 	bl	80005a8 <__aeabi_dmul>
 800fa20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fa24:	e7c4      	b.n	800f9b0 <_dtoa_r+0x508>
 800fa26:	bf00      	nop
 800fa28:	08011468 	.word	0x08011468
 800fa2c:	08011440 	.word	0x08011440
 800fa30:	3ff00000 	.word	0x3ff00000
 800fa34:	40240000 	.word	0x40240000
 800fa38:	401c0000 	.word	0x401c0000
 800fa3c:	40140000 	.word	0x40140000
 800fa40:	3fe00000 	.word	0x3fe00000
 800fa44:	4631      	mov	r1, r6
 800fa46:	4628      	mov	r0, r5
 800fa48:	f7f0 fdae 	bl	80005a8 <__aeabi_dmul>
 800fa4c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800fa50:	9413      	str	r4, [sp, #76]	@ 0x4c
 800fa52:	4656      	mov	r6, sl
 800fa54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fa58:	f7f1 f856 	bl	8000b08 <__aeabi_d2iz>
 800fa5c:	4605      	mov	r5, r0
 800fa5e:	f7f0 fd39 	bl	80004d4 <__aeabi_i2d>
 800fa62:	4602      	mov	r2, r0
 800fa64:	460b      	mov	r3, r1
 800fa66:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fa6a:	f7f0 fbe5 	bl	8000238 <__aeabi_dsub>
 800fa6e:	3530      	adds	r5, #48	@ 0x30
 800fa70:	f806 5b01 	strb.w	r5, [r6], #1
 800fa74:	4602      	mov	r2, r0
 800fa76:	460b      	mov	r3, r1
 800fa78:	42a6      	cmp	r6, r4
 800fa7a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fa7e:	f04f 0200 	mov.w	r2, #0
 800fa82:	d124      	bne.n	800face <_dtoa_r+0x626>
 800fa84:	4baf      	ldr	r3, [pc, #700]	@ (800fd44 <_dtoa_r+0x89c>)
 800fa86:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800fa8a:	f7f0 fbd7 	bl	800023c <__adddf3>
 800fa8e:	4602      	mov	r2, r0
 800fa90:	460b      	mov	r3, r1
 800fa92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fa96:	f7f1 f817 	bl	8000ac8 <__aeabi_dcmpgt>
 800fa9a:	2800      	cmp	r0, #0
 800fa9c:	d163      	bne.n	800fb66 <_dtoa_r+0x6be>
 800fa9e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800faa2:	49a8      	ldr	r1, [pc, #672]	@ (800fd44 <_dtoa_r+0x89c>)
 800faa4:	2000      	movs	r0, #0
 800faa6:	f7f0 fbc7 	bl	8000238 <__aeabi_dsub>
 800faaa:	4602      	mov	r2, r0
 800faac:	460b      	mov	r3, r1
 800faae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fab2:	f7f0 ffeb 	bl	8000a8c <__aeabi_dcmplt>
 800fab6:	2800      	cmp	r0, #0
 800fab8:	f43f af14 	beq.w	800f8e4 <_dtoa_r+0x43c>
 800fabc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800fabe:	1e73      	subs	r3, r6, #1
 800fac0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fac2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fac6:	2b30      	cmp	r3, #48	@ 0x30
 800fac8:	d0f8      	beq.n	800fabc <_dtoa_r+0x614>
 800faca:	4647      	mov	r7, r8
 800facc:	e03b      	b.n	800fb46 <_dtoa_r+0x69e>
 800face:	4b9e      	ldr	r3, [pc, #632]	@ (800fd48 <_dtoa_r+0x8a0>)
 800fad0:	f7f0 fd6a 	bl	80005a8 <__aeabi_dmul>
 800fad4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fad8:	e7bc      	b.n	800fa54 <_dtoa_r+0x5ac>
 800fada:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800fade:	4656      	mov	r6, sl
 800fae0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fae4:	4620      	mov	r0, r4
 800fae6:	4629      	mov	r1, r5
 800fae8:	f7f0 fe88 	bl	80007fc <__aeabi_ddiv>
 800faec:	f7f1 f80c 	bl	8000b08 <__aeabi_d2iz>
 800faf0:	4680      	mov	r8, r0
 800faf2:	f7f0 fcef 	bl	80004d4 <__aeabi_i2d>
 800faf6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fafa:	f7f0 fd55 	bl	80005a8 <__aeabi_dmul>
 800fafe:	4602      	mov	r2, r0
 800fb00:	460b      	mov	r3, r1
 800fb02:	4620      	mov	r0, r4
 800fb04:	4629      	mov	r1, r5
 800fb06:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800fb0a:	f7f0 fb95 	bl	8000238 <__aeabi_dsub>
 800fb0e:	f806 4b01 	strb.w	r4, [r6], #1
 800fb12:	9d03      	ldr	r5, [sp, #12]
 800fb14:	eba6 040a 	sub.w	r4, r6, sl
 800fb18:	42a5      	cmp	r5, r4
 800fb1a:	4602      	mov	r2, r0
 800fb1c:	460b      	mov	r3, r1
 800fb1e:	d133      	bne.n	800fb88 <_dtoa_r+0x6e0>
 800fb20:	f7f0 fb8c 	bl	800023c <__adddf3>
 800fb24:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb28:	4604      	mov	r4, r0
 800fb2a:	460d      	mov	r5, r1
 800fb2c:	f7f0 ffcc 	bl	8000ac8 <__aeabi_dcmpgt>
 800fb30:	b9c0      	cbnz	r0, 800fb64 <_dtoa_r+0x6bc>
 800fb32:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb36:	4620      	mov	r0, r4
 800fb38:	4629      	mov	r1, r5
 800fb3a:	f7f0 ff9d 	bl	8000a78 <__aeabi_dcmpeq>
 800fb3e:	b110      	cbz	r0, 800fb46 <_dtoa_r+0x69e>
 800fb40:	f018 0f01 	tst.w	r8, #1
 800fb44:	d10e      	bne.n	800fb64 <_dtoa_r+0x6bc>
 800fb46:	9902      	ldr	r1, [sp, #8]
 800fb48:	4648      	mov	r0, r9
 800fb4a:	f000 fbbd 	bl	80102c8 <_Bfree>
 800fb4e:	2300      	movs	r3, #0
 800fb50:	7033      	strb	r3, [r6, #0]
 800fb52:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800fb54:	3701      	adds	r7, #1
 800fb56:	601f      	str	r7, [r3, #0]
 800fb58:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	f000 824b 	beq.w	800fff6 <_dtoa_r+0xb4e>
 800fb60:	601e      	str	r6, [r3, #0]
 800fb62:	e248      	b.n	800fff6 <_dtoa_r+0xb4e>
 800fb64:	46b8      	mov	r8, r7
 800fb66:	4633      	mov	r3, r6
 800fb68:	461e      	mov	r6, r3
 800fb6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fb6e:	2a39      	cmp	r2, #57	@ 0x39
 800fb70:	d106      	bne.n	800fb80 <_dtoa_r+0x6d8>
 800fb72:	459a      	cmp	sl, r3
 800fb74:	d1f8      	bne.n	800fb68 <_dtoa_r+0x6c0>
 800fb76:	2230      	movs	r2, #48	@ 0x30
 800fb78:	f108 0801 	add.w	r8, r8, #1
 800fb7c:	f88a 2000 	strb.w	r2, [sl]
 800fb80:	781a      	ldrb	r2, [r3, #0]
 800fb82:	3201      	adds	r2, #1
 800fb84:	701a      	strb	r2, [r3, #0]
 800fb86:	e7a0      	b.n	800faca <_dtoa_r+0x622>
 800fb88:	4b6f      	ldr	r3, [pc, #444]	@ (800fd48 <_dtoa_r+0x8a0>)
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	f7f0 fd0c 	bl	80005a8 <__aeabi_dmul>
 800fb90:	2200      	movs	r2, #0
 800fb92:	2300      	movs	r3, #0
 800fb94:	4604      	mov	r4, r0
 800fb96:	460d      	mov	r5, r1
 800fb98:	f7f0 ff6e 	bl	8000a78 <__aeabi_dcmpeq>
 800fb9c:	2800      	cmp	r0, #0
 800fb9e:	d09f      	beq.n	800fae0 <_dtoa_r+0x638>
 800fba0:	e7d1      	b.n	800fb46 <_dtoa_r+0x69e>
 800fba2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fba4:	2a00      	cmp	r2, #0
 800fba6:	f000 80ea 	beq.w	800fd7e <_dtoa_r+0x8d6>
 800fbaa:	9a07      	ldr	r2, [sp, #28]
 800fbac:	2a01      	cmp	r2, #1
 800fbae:	f300 80cd 	bgt.w	800fd4c <_dtoa_r+0x8a4>
 800fbb2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800fbb4:	2a00      	cmp	r2, #0
 800fbb6:	f000 80c1 	beq.w	800fd3c <_dtoa_r+0x894>
 800fbba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800fbbe:	9c08      	ldr	r4, [sp, #32]
 800fbc0:	9e00      	ldr	r6, [sp, #0]
 800fbc2:	9a00      	ldr	r2, [sp, #0]
 800fbc4:	441a      	add	r2, r3
 800fbc6:	9200      	str	r2, [sp, #0]
 800fbc8:	9a06      	ldr	r2, [sp, #24]
 800fbca:	2101      	movs	r1, #1
 800fbcc:	441a      	add	r2, r3
 800fbce:	4648      	mov	r0, r9
 800fbd0:	9206      	str	r2, [sp, #24]
 800fbd2:	f000 fc2d 	bl	8010430 <__i2b>
 800fbd6:	4605      	mov	r5, r0
 800fbd8:	b166      	cbz	r6, 800fbf4 <_dtoa_r+0x74c>
 800fbda:	9b06      	ldr	r3, [sp, #24]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	dd09      	ble.n	800fbf4 <_dtoa_r+0x74c>
 800fbe0:	42b3      	cmp	r3, r6
 800fbe2:	9a00      	ldr	r2, [sp, #0]
 800fbe4:	bfa8      	it	ge
 800fbe6:	4633      	movge	r3, r6
 800fbe8:	1ad2      	subs	r2, r2, r3
 800fbea:	9200      	str	r2, [sp, #0]
 800fbec:	9a06      	ldr	r2, [sp, #24]
 800fbee:	1af6      	subs	r6, r6, r3
 800fbf0:	1ad3      	subs	r3, r2, r3
 800fbf2:	9306      	str	r3, [sp, #24]
 800fbf4:	9b08      	ldr	r3, [sp, #32]
 800fbf6:	b30b      	cbz	r3, 800fc3c <_dtoa_r+0x794>
 800fbf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbfa:	2b00      	cmp	r3, #0
 800fbfc:	f000 80c6 	beq.w	800fd8c <_dtoa_r+0x8e4>
 800fc00:	2c00      	cmp	r4, #0
 800fc02:	f000 80c0 	beq.w	800fd86 <_dtoa_r+0x8de>
 800fc06:	4629      	mov	r1, r5
 800fc08:	4622      	mov	r2, r4
 800fc0a:	4648      	mov	r0, r9
 800fc0c:	f000 fcc8 	bl	80105a0 <__pow5mult>
 800fc10:	9a02      	ldr	r2, [sp, #8]
 800fc12:	4601      	mov	r1, r0
 800fc14:	4605      	mov	r5, r0
 800fc16:	4648      	mov	r0, r9
 800fc18:	f000 fc20 	bl	801045c <__multiply>
 800fc1c:	9902      	ldr	r1, [sp, #8]
 800fc1e:	4680      	mov	r8, r0
 800fc20:	4648      	mov	r0, r9
 800fc22:	f000 fb51 	bl	80102c8 <_Bfree>
 800fc26:	9b08      	ldr	r3, [sp, #32]
 800fc28:	1b1b      	subs	r3, r3, r4
 800fc2a:	9308      	str	r3, [sp, #32]
 800fc2c:	f000 80b1 	beq.w	800fd92 <_dtoa_r+0x8ea>
 800fc30:	9a08      	ldr	r2, [sp, #32]
 800fc32:	4641      	mov	r1, r8
 800fc34:	4648      	mov	r0, r9
 800fc36:	f000 fcb3 	bl	80105a0 <__pow5mult>
 800fc3a:	9002      	str	r0, [sp, #8]
 800fc3c:	2101      	movs	r1, #1
 800fc3e:	4648      	mov	r0, r9
 800fc40:	f000 fbf6 	bl	8010430 <__i2b>
 800fc44:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fc46:	4604      	mov	r4, r0
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	f000 81d8 	beq.w	800fffe <_dtoa_r+0xb56>
 800fc4e:	461a      	mov	r2, r3
 800fc50:	4601      	mov	r1, r0
 800fc52:	4648      	mov	r0, r9
 800fc54:	f000 fca4 	bl	80105a0 <__pow5mult>
 800fc58:	9b07      	ldr	r3, [sp, #28]
 800fc5a:	2b01      	cmp	r3, #1
 800fc5c:	4604      	mov	r4, r0
 800fc5e:	f300 809f 	bgt.w	800fda0 <_dtoa_r+0x8f8>
 800fc62:	9b04      	ldr	r3, [sp, #16]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	f040 8097 	bne.w	800fd98 <_dtoa_r+0x8f0>
 800fc6a:	9b05      	ldr	r3, [sp, #20]
 800fc6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	f040 8093 	bne.w	800fd9c <_dtoa_r+0x8f4>
 800fc76:	9b05      	ldr	r3, [sp, #20]
 800fc78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fc7c:	0d1b      	lsrs	r3, r3, #20
 800fc7e:	051b      	lsls	r3, r3, #20
 800fc80:	b133      	cbz	r3, 800fc90 <_dtoa_r+0x7e8>
 800fc82:	9b00      	ldr	r3, [sp, #0]
 800fc84:	3301      	adds	r3, #1
 800fc86:	9300      	str	r3, [sp, #0]
 800fc88:	9b06      	ldr	r3, [sp, #24]
 800fc8a:	3301      	adds	r3, #1
 800fc8c:	9306      	str	r3, [sp, #24]
 800fc8e:	2301      	movs	r3, #1
 800fc90:	9308      	str	r3, [sp, #32]
 800fc92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	f000 81b8 	beq.w	801000a <_dtoa_r+0xb62>
 800fc9a:	6923      	ldr	r3, [r4, #16]
 800fc9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fca0:	6918      	ldr	r0, [r3, #16]
 800fca2:	f000 fb79 	bl	8010398 <__hi0bits>
 800fca6:	f1c0 0020 	rsb	r0, r0, #32
 800fcaa:	9b06      	ldr	r3, [sp, #24]
 800fcac:	4418      	add	r0, r3
 800fcae:	f010 001f 	ands.w	r0, r0, #31
 800fcb2:	f000 8082 	beq.w	800fdba <_dtoa_r+0x912>
 800fcb6:	f1c0 0320 	rsb	r3, r0, #32
 800fcba:	2b04      	cmp	r3, #4
 800fcbc:	dd73      	ble.n	800fda6 <_dtoa_r+0x8fe>
 800fcbe:	9b00      	ldr	r3, [sp, #0]
 800fcc0:	f1c0 001c 	rsb	r0, r0, #28
 800fcc4:	4403      	add	r3, r0
 800fcc6:	9300      	str	r3, [sp, #0]
 800fcc8:	9b06      	ldr	r3, [sp, #24]
 800fcca:	4403      	add	r3, r0
 800fccc:	4406      	add	r6, r0
 800fcce:	9306      	str	r3, [sp, #24]
 800fcd0:	9b00      	ldr	r3, [sp, #0]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	dd05      	ble.n	800fce2 <_dtoa_r+0x83a>
 800fcd6:	9902      	ldr	r1, [sp, #8]
 800fcd8:	461a      	mov	r2, r3
 800fcda:	4648      	mov	r0, r9
 800fcdc:	f000 fcba 	bl	8010654 <__lshift>
 800fce0:	9002      	str	r0, [sp, #8]
 800fce2:	9b06      	ldr	r3, [sp, #24]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	dd05      	ble.n	800fcf4 <_dtoa_r+0x84c>
 800fce8:	4621      	mov	r1, r4
 800fcea:	461a      	mov	r2, r3
 800fcec:	4648      	mov	r0, r9
 800fcee:	f000 fcb1 	bl	8010654 <__lshift>
 800fcf2:	4604      	mov	r4, r0
 800fcf4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d061      	beq.n	800fdbe <_dtoa_r+0x916>
 800fcfa:	9802      	ldr	r0, [sp, #8]
 800fcfc:	4621      	mov	r1, r4
 800fcfe:	f000 fd15 	bl	801072c <__mcmp>
 800fd02:	2800      	cmp	r0, #0
 800fd04:	da5b      	bge.n	800fdbe <_dtoa_r+0x916>
 800fd06:	2300      	movs	r3, #0
 800fd08:	9902      	ldr	r1, [sp, #8]
 800fd0a:	220a      	movs	r2, #10
 800fd0c:	4648      	mov	r0, r9
 800fd0e:	f000 fafd 	bl	801030c <__multadd>
 800fd12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd14:	9002      	str	r0, [sp, #8]
 800fd16:	f107 38ff 	add.w	r8, r7, #4294967295
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	f000 8177 	beq.w	801000e <_dtoa_r+0xb66>
 800fd20:	4629      	mov	r1, r5
 800fd22:	2300      	movs	r3, #0
 800fd24:	220a      	movs	r2, #10
 800fd26:	4648      	mov	r0, r9
 800fd28:	f000 faf0 	bl	801030c <__multadd>
 800fd2c:	f1bb 0f00 	cmp.w	fp, #0
 800fd30:	4605      	mov	r5, r0
 800fd32:	dc6f      	bgt.n	800fe14 <_dtoa_r+0x96c>
 800fd34:	9b07      	ldr	r3, [sp, #28]
 800fd36:	2b02      	cmp	r3, #2
 800fd38:	dc49      	bgt.n	800fdce <_dtoa_r+0x926>
 800fd3a:	e06b      	b.n	800fe14 <_dtoa_r+0x96c>
 800fd3c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800fd3e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800fd42:	e73c      	b.n	800fbbe <_dtoa_r+0x716>
 800fd44:	3fe00000 	.word	0x3fe00000
 800fd48:	40240000 	.word	0x40240000
 800fd4c:	9b03      	ldr	r3, [sp, #12]
 800fd4e:	1e5c      	subs	r4, r3, #1
 800fd50:	9b08      	ldr	r3, [sp, #32]
 800fd52:	42a3      	cmp	r3, r4
 800fd54:	db09      	blt.n	800fd6a <_dtoa_r+0x8c2>
 800fd56:	1b1c      	subs	r4, r3, r4
 800fd58:	9b03      	ldr	r3, [sp, #12]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	f6bf af30 	bge.w	800fbc0 <_dtoa_r+0x718>
 800fd60:	9b00      	ldr	r3, [sp, #0]
 800fd62:	9a03      	ldr	r2, [sp, #12]
 800fd64:	1a9e      	subs	r6, r3, r2
 800fd66:	2300      	movs	r3, #0
 800fd68:	e72b      	b.n	800fbc2 <_dtoa_r+0x71a>
 800fd6a:	9b08      	ldr	r3, [sp, #32]
 800fd6c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fd6e:	9408      	str	r4, [sp, #32]
 800fd70:	1ae3      	subs	r3, r4, r3
 800fd72:	441a      	add	r2, r3
 800fd74:	9e00      	ldr	r6, [sp, #0]
 800fd76:	9b03      	ldr	r3, [sp, #12]
 800fd78:	920d      	str	r2, [sp, #52]	@ 0x34
 800fd7a:	2400      	movs	r4, #0
 800fd7c:	e721      	b.n	800fbc2 <_dtoa_r+0x71a>
 800fd7e:	9c08      	ldr	r4, [sp, #32]
 800fd80:	9e00      	ldr	r6, [sp, #0]
 800fd82:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800fd84:	e728      	b.n	800fbd8 <_dtoa_r+0x730>
 800fd86:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800fd8a:	e751      	b.n	800fc30 <_dtoa_r+0x788>
 800fd8c:	9a08      	ldr	r2, [sp, #32]
 800fd8e:	9902      	ldr	r1, [sp, #8]
 800fd90:	e750      	b.n	800fc34 <_dtoa_r+0x78c>
 800fd92:	f8cd 8008 	str.w	r8, [sp, #8]
 800fd96:	e751      	b.n	800fc3c <_dtoa_r+0x794>
 800fd98:	2300      	movs	r3, #0
 800fd9a:	e779      	b.n	800fc90 <_dtoa_r+0x7e8>
 800fd9c:	9b04      	ldr	r3, [sp, #16]
 800fd9e:	e777      	b.n	800fc90 <_dtoa_r+0x7e8>
 800fda0:	2300      	movs	r3, #0
 800fda2:	9308      	str	r3, [sp, #32]
 800fda4:	e779      	b.n	800fc9a <_dtoa_r+0x7f2>
 800fda6:	d093      	beq.n	800fcd0 <_dtoa_r+0x828>
 800fda8:	9a00      	ldr	r2, [sp, #0]
 800fdaa:	331c      	adds	r3, #28
 800fdac:	441a      	add	r2, r3
 800fdae:	9200      	str	r2, [sp, #0]
 800fdb0:	9a06      	ldr	r2, [sp, #24]
 800fdb2:	441a      	add	r2, r3
 800fdb4:	441e      	add	r6, r3
 800fdb6:	9206      	str	r2, [sp, #24]
 800fdb8:	e78a      	b.n	800fcd0 <_dtoa_r+0x828>
 800fdba:	4603      	mov	r3, r0
 800fdbc:	e7f4      	b.n	800fda8 <_dtoa_r+0x900>
 800fdbe:	9b03      	ldr	r3, [sp, #12]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	46b8      	mov	r8, r7
 800fdc4:	dc20      	bgt.n	800fe08 <_dtoa_r+0x960>
 800fdc6:	469b      	mov	fp, r3
 800fdc8:	9b07      	ldr	r3, [sp, #28]
 800fdca:	2b02      	cmp	r3, #2
 800fdcc:	dd1e      	ble.n	800fe0c <_dtoa_r+0x964>
 800fdce:	f1bb 0f00 	cmp.w	fp, #0
 800fdd2:	f47f adb1 	bne.w	800f938 <_dtoa_r+0x490>
 800fdd6:	4621      	mov	r1, r4
 800fdd8:	465b      	mov	r3, fp
 800fdda:	2205      	movs	r2, #5
 800fddc:	4648      	mov	r0, r9
 800fdde:	f000 fa95 	bl	801030c <__multadd>
 800fde2:	4601      	mov	r1, r0
 800fde4:	4604      	mov	r4, r0
 800fde6:	9802      	ldr	r0, [sp, #8]
 800fde8:	f000 fca0 	bl	801072c <__mcmp>
 800fdec:	2800      	cmp	r0, #0
 800fdee:	f77f ada3 	ble.w	800f938 <_dtoa_r+0x490>
 800fdf2:	4656      	mov	r6, sl
 800fdf4:	2331      	movs	r3, #49	@ 0x31
 800fdf6:	f806 3b01 	strb.w	r3, [r6], #1
 800fdfa:	f108 0801 	add.w	r8, r8, #1
 800fdfe:	e59f      	b.n	800f940 <_dtoa_r+0x498>
 800fe00:	9c03      	ldr	r4, [sp, #12]
 800fe02:	46b8      	mov	r8, r7
 800fe04:	4625      	mov	r5, r4
 800fe06:	e7f4      	b.n	800fdf2 <_dtoa_r+0x94a>
 800fe08:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800fe0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	f000 8101 	beq.w	8010016 <_dtoa_r+0xb6e>
 800fe14:	2e00      	cmp	r6, #0
 800fe16:	dd05      	ble.n	800fe24 <_dtoa_r+0x97c>
 800fe18:	4629      	mov	r1, r5
 800fe1a:	4632      	mov	r2, r6
 800fe1c:	4648      	mov	r0, r9
 800fe1e:	f000 fc19 	bl	8010654 <__lshift>
 800fe22:	4605      	mov	r5, r0
 800fe24:	9b08      	ldr	r3, [sp, #32]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d05c      	beq.n	800fee4 <_dtoa_r+0xa3c>
 800fe2a:	6869      	ldr	r1, [r5, #4]
 800fe2c:	4648      	mov	r0, r9
 800fe2e:	f000 fa0b 	bl	8010248 <_Balloc>
 800fe32:	4606      	mov	r6, r0
 800fe34:	b928      	cbnz	r0, 800fe42 <_dtoa_r+0x99a>
 800fe36:	4b82      	ldr	r3, [pc, #520]	@ (8010040 <_dtoa_r+0xb98>)
 800fe38:	4602      	mov	r2, r0
 800fe3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800fe3e:	f7ff bb4a 	b.w	800f4d6 <_dtoa_r+0x2e>
 800fe42:	692a      	ldr	r2, [r5, #16]
 800fe44:	3202      	adds	r2, #2
 800fe46:	0092      	lsls	r2, r2, #2
 800fe48:	f105 010c 	add.w	r1, r5, #12
 800fe4c:	300c      	adds	r0, #12
 800fe4e:	f7ff fa94 	bl	800f37a <memcpy>
 800fe52:	2201      	movs	r2, #1
 800fe54:	4631      	mov	r1, r6
 800fe56:	4648      	mov	r0, r9
 800fe58:	f000 fbfc 	bl	8010654 <__lshift>
 800fe5c:	f10a 0301 	add.w	r3, sl, #1
 800fe60:	9300      	str	r3, [sp, #0]
 800fe62:	eb0a 030b 	add.w	r3, sl, fp
 800fe66:	9308      	str	r3, [sp, #32]
 800fe68:	9b04      	ldr	r3, [sp, #16]
 800fe6a:	f003 0301 	and.w	r3, r3, #1
 800fe6e:	462f      	mov	r7, r5
 800fe70:	9306      	str	r3, [sp, #24]
 800fe72:	4605      	mov	r5, r0
 800fe74:	9b00      	ldr	r3, [sp, #0]
 800fe76:	9802      	ldr	r0, [sp, #8]
 800fe78:	4621      	mov	r1, r4
 800fe7a:	f103 3bff 	add.w	fp, r3, #4294967295
 800fe7e:	f7ff fa8a 	bl	800f396 <quorem>
 800fe82:	4603      	mov	r3, r0
 800fe84:	3330      	adds	r3, #48	@ 0x30
 800fe86:	9003      	str	r0, [sp, #12]
 800fe88:	4639      	mov	r1, r7
 800fe8a:	9802      	ldr	r0, [sp, #8]
 800fe8c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe8e:	f000 fc4d 	bl	801072c <__mcmp>
 800fe92:	462a      	mov	r2, r5
 800fe94:	9004      	str	r0, [sp, #16]
 800fe96:	4621      	mov	r1, r4
 800fe98:	4648      	mov	r0, r9
 800fe9a:	f000 fc63 	bl	8010764 <__mdiff>
 800fe9e:	68c2      	ldr	r2, [r0, #12]
 800fea0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fea2:	4606      	mov	r6, r0
 800fea4:	bb02      	cbnz	r2, 800fee8 <_dtoa_r+0xa40>
 800fea6:	4601      	mov	r1, r0
 800fea8:	9802      	ldr	r0, [sp, #8]
 800feaa:	f000 fc3f 	bl	801072c <__mcmp>
 800feae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800feb0:	4602      	mov	r2, r0
 800feb2:	4631      	mov	r1, r6
 800feb4:	4648      	mov	r0, r9
 800feb6:	920c      	str	r2, [sp, #48]	@ 0x30
 800feb8:	9309      	str	r3, [sp, #36]	@ 0x24
 800feba:	f000 fa05 	bl	80102c8 <_Bfree>
 800febe:	9b07      	ldr	r3, [sp, #28]
 800fec0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800fec2:	9e00      	ldr	r6, [sp, #0]
 800fec4:	ea42 0103 	orr.w	r1, r2, r3
 800fec8:	9b06      	ldr	r3, [sp, #24]
 800feca:	4319      	orrs	r1, r3
 800fecc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fece:	d10d      	bne.n	800feec <_dtoa_r+0xa44>
 800fed0:	2b39      	cmp	r3, #57	@ 0x39
 800fed2:	d027      	beq.n	800ff24 <_dtoa_r+0xa7c>
 800fed4:	9a04      	ldr	r2, [sp, #16]
 800fed6:	2a00      	cmp	r2, #0
 800fed8:	dd01      	ble.n	800fede <_dtoa_r+0xa36>
 800feda:	9b03      	ldr	r3, [sp, #12]
 800fedc:	3331      	adds	r3, #49	@ 0x31
 800fede:	f88b 3000 	strb.w	r3, [fp]
 800fee2:	e52e      	b.n	800f942 <_dtoa_r+0x49a>
 800fee4:	4628      	mov	r0, r5
 800fee6:	e7b9      	b.n	800fe5c <_dtoa_r+0x9b4>
 800fee8:	2201      	movs	r2, #1
 800feea:	e7e2      	b.n	800feb2 <_dtoa_r+0xa0a>
 800feec:	9904      	ldr	r1, [sp, #16]
 800feee:	2900      	cmp	r1, #0
 800fef0:	db04      	blt.n	800fefc <_dtoa_r+0xa54>
 800fef2:	9807      	ldr	r0, [sp, #28]
 800fef4:	4301      	orrs	r1, r0
 800fef6:	9806      	ldr	r0, [sp, #24]
 800fef8:	4301      	orrs	r1, r0
 800fefa:	d120      	bne.n	800ff3e <_dtoa_r+0xa96>
 800fefc:	2a00      	cmp	r2, #0
 800fefe:	ddee      	ble.n	800fede <_dtoa_r+0xa36>
 800ff00:	9902      	ldr	r1, [sp, #8]
 800ff02:	9300      	str	r3, [sp, #0]
 800ff04:	2201      	movs	r2, #1
 800ff06:	4648      	mov	r0, r9
 800ff08:	f000 fba4 	bl	8010654 <__lshift>
 800ff0c:	4621      	mov	r1, r4
 800ff0e:	9002      	str	r0, [sp, #8]
 800ff10:	f000 fc0c 	bl	801072c <__mcmp>
 800ff14:	2800      	cmp	r0, #0
 800ff16:	9b00      	ldr	r3, [sp, #0]
 800ff18:	dc02      	bgt.n	800ff20 <_dtoa_r+0xa78>
 800ff1a:	d1e0      	bne.n	800fede <_dtoa_r+0xa36>
 800ff1c:	07da      	lsls	r2, r3, #31
 800ff1e:	d5de      	bpl.n	800fede <_dtoa_r+0xa36>
 800ff20:	2b39      	cmp	r3, #57	@ 0x39
 800ff22:	d1da      	bne.n	800feda <_dtoa_r+0xa32>
 800ff24:	2339      	movs	r3, #57	@ 0x39
 800ff26:	f88b 3000 	strb.w	r3, [fp]
 800ff2a:	4633      	mov	r3, r6
 800ff2c:	461e      	mov	r6, r3
 800ff2e:	3b01      	subs	r3, #1
 800ff30:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ff34:	2a39      	cmp	r2, #57	@ 0x39
 800ff36:	d04e      	beq.n	800ffd6 <_dtoa_r+0xb2e>
 800ff38:	3201      	adds	r2, #1
 800ff3a:	701a      	strb	r2, [r3, #0]
 800ff3c:	e501      	b.n	800f942 <_dtoa_r+0x49a>
 800ff3e:	2a00      	cmp	r2, #0
 800ff40:	dd03      	ble.n	800ff4a <_dtoa_r+0xaa2>
 800ff42:	2b39      	cmp	r3, #57	@ 0x39
 800ff44:	d0ee      	beq.n	800ff24 <_dtoa_r+0xa7c>
 800ff46:	3301      	adds	r3, #1
 800ff48:	e7c9      	b.n	800fede <_dtoa_r+0xa36>
 800ff4a:	9a00      	ldr	r2, [sp, #0]
 800ff4c:	9908      	ldr	r1, [sp, #32]
 800ff4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ff52:	428a      	cmp	r2, r1
 800ff54:	d028      	beq.n	800ffa8 <_dtoa_r+0xb00>
 800ff56:	9902      	ldr	r1, [sp, #8]
 800ff58:	2300      	movs	r3, #0
 800ff5a:	220a      	movs	r2, #10
 800ff5c:	4648      	mov	r0, r9
 800ff5e:	f000 f9d5 	bl	801030c <__multadd>
 800ff62:	42af      	cmp	r7, r5
 800ff64:	9002      	str	r0, [sp, #8]
 800ff66:	f04f 0300 	mov.w	r3, #0
 800ff6a:	f04f 020a 	mov.w	r2, #10
 800ff6e:	4639      	mov	r1, r7
 800ff70:	4648      	mov	r0, r9
 800ff72:	d107      	bne.n	800ff84 <_dtoa_r+0xadc>
 800ff74:	f000 f9ca 	bl	801030c <__multadd>
 800ff78:	4607      	mov	r7, r0
 800ff7a:	4605      	mov	r5, r0
 800ff7c:	9b00      	ldr	r3, [sp, #0]
 800ff7e:	3301      	adds	r3, #1
 800ff80:	9300      	str	r3, [sp, #0]
 800ff82:	e777      	b.n	800fe74 <_dtoa_r+0x9cc>
 800ff84:	f000 f9c2 	bl	801030c <__multadd>
 800ff88:	4629      	mov	r1, r5
 800ff8a:	4607      	mov	r7, r0
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	220a      	movs	r2, #10
 800ff90:	4648      	mov	r0, r9
 800ff92:	f000 f9bb 	bl	801030c <__multadd>
 800ff96:	4605      	mov	r5, r0
 800ff98:	e7f0      	b.n	800ff7c <_dtoa_r+0xad4>
 800ff9a:	f1bb 0f00 	cmp.w	fp, #0
 800ff9e:	bfcc      	ite	gt
 800ffa0:	465e      	movgt	r6, fp
 800ffa2:	2601      	movle	r6, #1
 800ffa4:	4456      	add	r6, sl
 800ffa6:	2700      	movs	r7, #0
 800ffa8:	9902      	ldr	r1, [sp, #8]
 800ffaa:	9300      	str	r3, [sp, #0]
 800ffac:	2201      	movs	r2, #1
 800ffae:	4648      	mov	r0, r9
 800ffb0:	f000 fb50 	bl	8010654 <__lshift>
 800ffb4:	4621      	mov	r1, r4
 800ffb6:	9002      	str	r0, [sp, #8]
 800ffb8:	f000 fbb8 	bl	801072c <__mcmp>
 800ffbc:	2800      	cmp	r0, #0
 800ffbe:	dcb4      	bgt.n	800ff2a <_dtoa_r+0xa82>
 800ffc0:	d102      	bne.n	800ffc8 <_dtoa_r+0xb20>
 800ffc2:	9b00      	ldr	r3, [sp, #0]
 800ffc4:	07db      	lsls	r3, r3, #31
 800ffc6:	d4b0      	bmi.n	800ff2a <_dtoa_r+0xa82>
 800ffc8:	4633      	mov	r3, r6
 800ffca:	461e      	mov	r6, r3
 800ffcc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ffd0:	2a30      	cmp	r2, #48	@ 0x30
 800ffd2:	d0fa      	beq.n	800ffca <_dtoa_r+0xb22>
 800ffd4:	e4b5      	b.n	800f942 <_dtoa_r+0x49a>
 800ffd6:	459a      	cmp	sl, r3
 800ffd8:	d1a8      	bne.n	800ff2c <_dtoa_r+0xa84>
 800ffda:	2331      	movs	r3, #49	@ 0x31
 800ffdc:	f108 0801 	add.w	r8, r8, #1
 800ffe0:	f88a 3000 	strb.w	r3, [sl]
 800ffe4:	e4ad      	b.n	800f942 <_dtoa_r+0x49a>
 800ffe6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ffe8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8010044 <_dtoa_r+0xb9c>
 800ffec:	b11b      	cbz	r3, 800fff6 <_dtoa_r+0xb4e>
 800ffee:	f10a 0308 	add.w	r3, sl, #8
 800fff2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800fff4:	6013      	str	r3, [r2, #0]
 800fff6:	4650      	mov	r0, sl
 800fff8:	b017      	add	sp, #92	@ 0x5c
 800fffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fffe:	9b07      	ldr	r3, [sp, #28]
 8010000:	2b01      	cmp	r3, #1
 8010002:	f77f ae2e 	ble.w	800fc62 <_dtoa_r+0x7ba>
 8010006:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010008:	9308      	str	r3, [sp, #32]
 801000a:	2001      	movs	r0, #1
 801000c:	e64d      	b.n	800fcaa <_dtoa_r+0x802>
 801000e:	f1bb 0f00 	cmp.w	fp, #0
 8010012:	f77f aed9 	ble.w	800fdc8 <_dtoa_r+0x920>
 8010016:	4656      	mov	r6, sl
 8010018:	9802      	ldr	r0, [sp, #8]
 801001a:	4621      	mov	r1, r4
 801001c:	f7ff f9bb 	bl	800f396 <quorem>
 8010020:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8010024:	f806 3b01 	strb.w	r3, [r6], #1
 8010028:	eba6 020a 	sub.w	r2, r6, sl
 801002c:	4593      	cmp	fp, r2
 801002e:	ddb4      	ble.n	800ff9a <_dtoa_r+0xaf2>
 8010030:	9902      	ldr	r1, [sp, #8]
 8010032:	2300      	movs	r3, #0
 8010034:	220a      	movs	r2, #10
 8010036:	4648      	mov	r0, r9
 8010038:	f000 f968 	bl	801030c <__multadd>
 801003c:	9002      	str	r0, [sp, #8]
 801003e:	e7eb      	b.n	8010018 <_dtoa_r+0xb70>
 8010040:	08011370 	.word	0x08011370
 8010044:	080112f4 	.word	0x080112f4

08010048 <_free_r>:
 8010048:	b538      	push	{r3, r4, r5, lr}
 801004a:	4605      	mov	r5, r0
 801004c:	2900      	cmp	r1, #0
 801004e:	d041      	beq.n	80100d4 <_free_r+0x8c>
 8010050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010054:	1f0c      	subs	r4, r1, #4
 8010056:	2b00      	cmp	r3, #0
 8010058:	bfb8      	it	lt
 801005a:	18e4      	addlt	r4, r4, r3
 801005c:	f000 f8e8 	bl	8010230 <__malloc_lock>
 8010060:	4a1d      	ldr	r2, [pc, #116]	@ (80100d8 <_free_r+0x90>)
 8010062:	6813      	ldr	r3, [r2, #0]
 8010064:	b933      	cbnz	r3, 8010074 <_free_r+0x2c>
 8010066:	6063      	str	r3, [r4, #4]
 8010068:	6014      	str	r4, [r2, #0]
 801006a:	4628      	mov	r0, r5
 801006c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010070:	f000 b8e4 	b.w	801023c <__malloc_unlock>
 8010074:	42a3      	cmp	r3, r4
 8010076:	d908      	bls.n	801008a <_free_r+0x42>
 8010078:	6820      	ldr	r0, [r4, #0]
 801007a:	1821      	adds	r1, r4, r0
 801007c:	428b      	cmp	r3, r1
 801007e:	bf01      	itttt	eq
 8010080:	6819      	ldreq	r1, [r3, #0]
 8010082:	685b      	ldreq	r3, [r3, #4]
 8010084:	1809      	addeq	r1, r1, r0
 8010086:	6021      	streq	r1, [r4, #0]
 8010088:	e7ed      	b.n	8010066 <_free_r+0x1e>
 801008a:	461a      	mov	r2, r3
 801008c:	685b      	ldr	r3, [r3, #4]
 801008e:	b10b      	cbz	r3, 8010094 <_free_r+0x4c>
 8010090:	42a3      	cmp	r3, r4
 8010092:	d9fa      	bls.n	801008a <_free_r+0x42>
 8010094:	6811      	ldr	r1, [r2, #0]
 8010096:	1850      	adds	r0, r2, r1
 8010098:	42a0      	cmp	r0, r4
 801009a:	d10b      	bne.n	80100b4 <_free_r+0x6c>
 801009c:	6820      	ldr	r0, [r4, #0]
 801009e:	4401      	add	r1, r0
 80100a0:	1850      	adds	r0, r2, r1
 80100a2:	4283      	cmp	r3, r0
 80100a4:	6011      	str	r1, [r2, #0]
 80100a6:	d1e0      	bne.n	801006a <_free_r+0x22>
 80100a8:	6818      	ldr	r0, [r3, #0]
 80100aa:	685b      	ldr	r3, [r3, #4]
 80100ac:	6053      	str	r3, [r2, #4]
 80100ae:	4408      	add	r0, r1
 80100b0:	6010      	str	r0, [r2, #0]
 80100b2:	e7da      	b.n	801006a <_free_r+0x22>
 80100b4:	d902      	bls.n	80100bc <_free_r+0x74>
 80100b6:	230c      	movs	r3, #12
 80100b8:	602b      	str	r3, [r5, #0]
 80100ba:	e7d6      	b.n	801006a <_free_r+0x22>
 80100bc:	6820      	ldr	r0, [r4, #0]
 80100be:	1821      	adds	r1, r4, r0
 80100c0:	428b      	cmp	r3, r1
 80100c2:	bf04      	itt	eq
 80100c4:	6819      	ldreq	r1, [r3, #0]
 80100c6:	685b      	ldreq	r3, [r3, #4]
 80100c8:	6063      	str	r3, [r4, #4]
 80100ca:	bf04      	itt	eq
 80100cc:	1809      	addeq	r1, r1, r0
 80100ce:	6021      	streq	r1, [r4, #0]
 80100d0:	6054      	str	r4, [r2, #4]
 80100d2:	e7ca      	b.n	801006a <_free_r+0x22>
 80100d4:	bd38      	pop	{r3, r4, r5, pc}
 80100d6:	bf00      	nop
 80100d8:	20002074 	.word	0x20002074

080100dc <malloc>:
 80100dc:	4b02      	ldr	r3, [pc, #8]	@ (80100e8 <malloc+0xc>)
 80100de:	4601      	mov	r1, r0
 80100e0:	6818      	ldr	r0, [r3, #0]
 80100e2:	f000 b825 	b.w	8010130 <_malloc_r>
 80100e6:	bf00      	nop
 80100e8:	20000130 	.word	0x20000130

080100ec <sbrk_aligned>:
 80100ec:	b570      	push	{r4, r5, r6, lr}
 80100ee:	4e0f      	ldr	r6, [pc, #60]	@ (801012c <sbrk_aligned+0x40>)
 80100f0:	460c      	mov	r4, r1
 80100f2:	6831      	ldr	r1, [r6, #0]
 80100f4:	4605      	mov	r5, r0
 80100f6:	b911      	cbnz	r1, 80100fe <sbrk_aligned+0x12>
 80100f8:	f000 fed6 	bl	8010ea8 <_sbrk_r>
 80100fc:	6030      	str	r0, [r6, #0]
 80100fe:	4621      	mov	r1, r4
 8010100:	4628      	mov	r0, r5
 8010102:	f000 fed1 	bl	8010ea8 <_sbrk_r>
 8010106:	1c43      	adds	r3, r0, #1
 8010108:	d103      	bne.n	8010112 <sbrk_aligned+0x26>
 801010a:	f04f 34ff 	mov.w	r4, #4294967295
 801010e:	4620      	mov	r0, r4
 8010110:	bd70      	pop	{r4, r5, r6, pc}
 8010112:	1cc4      	adds	r4, r0, #3
 8010114:	f024 0403 	bic.w	r4, r4, #3
 8010118:	42a0      	cmp	r0, r4
 801011a:	d0f8      	beq.n	801010e <sbrk_aligned+0x22>
 801011c:	1a21      	subs	r1, r4, r0
 801011e:	4628      	mov	r0, r5
 8010120:	f000 fec2 	bl	8010ea8 <_sbrk_r>
 8010124:	3001      	adds	r0, #1
 8010126:	d1f2      	bne.n	801010e <sbrk_aligned+0x22>
 8010128:	e7ef      	b.n	801010a <sbrk_aligned+0x1e>
 801012a:	bf00      	nop
 801012c:	20002070 	.word	0x20002070

08010130 <_malloc_r>:
 8010130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010134:	1ccd      	adds	r5, r1, #3
 8010136:	f025 0503 	bic.w	r5, r5, #3
 801013a:	3508      	adds	r5, #8
 801013c:	2d0c      	cmp	r5, #12
 801013e:	bf38      	it	cc
 8010140:	250c      	movcc	r5, #12
 8010142:	2d00      	cmp	r5, #0
 8010144:	4606      	mov	r6, r0
 8010146:	db01      	blt.n	801014c <_malloc_r+0x1c>
 8010148:	42a9      	cmp	r1, r5
 801014a:	d904      	bls.n	8010156 <_malloc_r+0x26>
 801014c:	230c      	movs	r3, #12
 801014e:	6033      	str	r3, [r6, #0]
 8010150:	2000      	movs	r0, #0
 8010152:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010156:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801022c <_malloc_r+0xfc>
 801015a:	f000 f869 	bl	8010230 <__malloc_lock>
 801015e:	f8d8 3000 	ldr.w	r3, [r8]
 8010162:	461c      	mov	r4, r3
 8010164:	bb44      	cbnz	r4, 80101b8 <_malloc_r+0x88>
 8010166:	4629      	mov	r1, r5
 8010168:	4630      	mov	r0, r6
 801016a:	f7ff ffbf 	bl	80100ec <sbrk_aligned>
 801016e:	1c43      	adds	r3, r0, #1
 8010170:	4604      	mov	r4, r0
 8010172:	d158      	bne.n	8010226 <_malloc_r+0xf6>
 8010174:	f8d8 4000 	ldr.w	r4, [r8]
 8010178:	4627      	mov	r7, r4
 801017a:	2f00      	cmp	r7, #0
 801017c:	d143      	bne.n	8010206 <_malloc_r+0xd6>
 801017e:	2c00      	cmp	r4, #0
 8010180:	d04b      	beq.n	801021a <_malloc_r+0xea>
 8010182:	6823      	ldr	r3, [r4, #0]
 8010184:	4639      	mov	r1, r7
 8010186:	4630      	mov	r0, r6
 8010188:	eb04 0903 	add.w	r9, r4, r3
 801018c:	f000 fe8c 	bl	8010ea8 <_sbrk_r>
 8010190:	4581      	cmp	r9, r0
 8010192:	d142      	bne.n	801021a <_malloc_r+0xea>
 8010194:	6821      	ldr	r1, [r4, #0]
 8010196:	1a6d      	subs	r5, r5, r1
 8010198:	4629      	mov	r1, r5
 801019a:	4630      	mov	r0, r6
 801019c:	f7ff ffa6 	bl	80100ec <sbrk_aligned>
 80101a0:	3001      	adds	r0, #1
 80101a2:	d03a      	beq.n	801021a <_malloc_r+0xea>
 80101a4:	6823      	ldr	r3, [r4, #0]
 80101a6:	442b      	add	r3, r5
 80101a8:	6023      	str	r3, [r4, #0]
 80101aa:	f8d8 3000 	ldr.w	r3, [r8]
 80101ae:	685a      	ldr	r2, [r3, #4]
 80101b0:	bb62      	cbnz	r2, 801020c <_malloc_r+0xdc>
 80101b2:	f8c8 7000 	str.w	r7, [r8]
 80101b6:	e00f      	b.n	80101d8 <_malloc_r+0xa8>
 80101b8:	6822      	ldr	r2, [r4, #0]
 80101ba:	1b52      	subs	r2, r2, r5
 80101bc:	d420      	bmi.n	8010200 <_malloc_r+0xd0>
 80101be:	2a0b      	cmp	r2, #11
 80101c0:	d917      	bls.n	80101f2 <_malloc_r+0xc2>
 80101c2:	1961      	adds	r1, r4, r5
 80101c4:	42a3      	cmp	r3, r4
 80101c6:	6025      	str	r5, [r4, #0]
 80101c8:	bf18      	it	ne
 80101ca:	6059      	strne	r1, [r3, #4]
 80101cc:	6863      	ldr	r3, [r4, #4]
 80101ce:	bf08      	it	eq
 80101d0:	f8c8 1000 	streq.w	r1, [r8]
 80101d4:	5162      	str	r2, [r4, r5]
 80101d6:	604b      	str	r3, [r1, #4]
 80101d8:	4630      	mov	r0, r6
 80101da:	f000 f82f 	bl	801023c <__malloc_unlock>
 80101de:	f104 000b 	add.w	r0, r4, #11
 80101e2:	1d23      	adds	r3, r4, #4
 80101e4:	f020 0007 	bic.w	r0, r0, #7
 80101e8:	1ac2      	subs	r2, r0, r3
 80101ea:	bf1c      	itt	ne
 80101ec:	1a1b      	subne	r3, r3, r0
 80101ee:	50a3      	strne	r3, [r4, r2]
 80101f0:	e7af      	b.n	8010152 <_malloc_r+0x22>
 80101f2:	6862      	ldr	r2, [r4, #4]
 80101f4:	42a3      	cmp	r3, r4
 80101f6:	bf0c      	ite	eq
 80101f8:	f8c8 2000 	streq.w	r2, [r8]
 80101fc:	605a      	strne	r2, [r3, #4]
 80101fe:	e7eb      	b.n	80101d8 <_malloc_r+0xa8>
 8010200:	4623      	mov	r3, r4
 8010202:	6864      	ldr	r4, [r4, #4]
 8010204:	e7ae      	b.n	8010164 <_malloc_r+0x34>
 8010206:	463c      	mov	r4, r7
 8010208:	687f      	ldr	r7, [r7, #4]
 801020a:	e7b6      	b.n	801017a <_malloc_r+0x4a>
 801020c:	461a      	mov	r2, r3
 801020e:	685b      	ldr	r3, [r3, #4]
 8010210:	42a3      	cmp	r3, r4
 8010212:	d1fb      	bne.n	801020c <_malloc_r+0xdc>
 8010214:	2300      	movs	r3, #0
 8010216:	6053      	str	r3, [r2, #4]
 8010218:	e7de      	b.n	80101d8 <_malloc_r+0xa8>
 801021a:	230c      	movs	r3, #12
 801021c:	6033      	str	r3, [r6, #0]
 801021e:	4630      	mov	r0, r6
 8010220:	f000 f80c 	bl	801023c <__malloc_unlock>
 8010224:	e794      	b.n	8010150 <_malloc_r+0x20>
 8010226:	6005      	str	r5, [r0, #0]
 8010228:	e7d6      	b.n	80101d8 <_malloc_r+0xa8>
 801022a:	bf00      	nop
 801022c:	20002074 	.word	0x20002074

08010230 <__malloc_lock>:
 8010230:	4801      	ldr	r0, [pc, #4]	@ (8010238 <__malloc_lock+0x8>)
 8010232:	f7ff b8a0 	b.w	800f376 <__retarget_lock_acquire_recursive>
 8010236:	bf00      	nop
 8010238:	2000206c 	.word	0x2000206c

0801023c <__malloc_unlock>:
 801023c:	4801      	ldr	r0, [pc, #4]	@ (8010244 <__malloc_unlock+0x8>)
 801023e:	f7ff b89b 	b.w	800f378 <__retarget_lock_release_recursive>
 8010242:	bf00      	nop
 8010244:	2000206c 	.word	0x2000206c

08010248 <_Balloc>:
 8010248:	b570      	push	{r4, r5, r6, lr}
 801024a:	69c6      	ldr	r6, [r0, #28]
 801024c:	4604      	mov	r4, r0
 801024e:	460d      	mov	r5, r1
 8010250:	b976      	cbnz	r6, 8010270 <_Balloc+0x28>
 8010252:	2010      	movs	r0, #16
 8010254:	f7ff ff42 	bl	80100dc <malloc>
 8010258:	4602      	mov	r2, r0
 801025a:	61e0      	str	r0, [r4, #28]
 801025c:	b920      	cbnz	r0, 8010268 <_Balloc+0x20>
 801025e:	4b18      	ldr	r3, [pc, #96]	@ (80102c0 <_Balloc+0x78>)
 8010260:	4818      	ldr	r0, [pc, #96]	@ (80102c4 <_Balloc+0x7c>)
 8010262:	216b      	movs	r1, #107	@ 0x6b
 8010264:	f000 fe30 	bl	8010ec8 <__assert_func>
 8010268:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801026c:	6006      	str	r6, [r0, #0]
 801026e:	60c6      	str	r6, [r0, #12]
 8010270:	69e6      	ldr	r6, [r4, #28]
 8010272:	68f3      	ldr	r3, [r6, #12]
 8010274:	b183      	cbz	r3, 8010298 <_Balloc+0x50>
 8010276:	69e3      	ldr	r3, [r4, #28]
 8010278:	68db      	ldr	r3, [r3, #12]
 801027a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801027e:	b9b8      	cbnz	r0, 80102b0 <_Balloc+0x68>
 8010280:	2101      	movs	r1, #1
 8010282:	fa01 f605 	lsl.w	r6, r1, r5
 8010286:	1d72      	adds	r2, r6, #5
 8010288:	0092      	lsls	r2, r2, #2
 801028a:	4620      	mov	r0, r4
 801028c:	f000 fe3a 	bl	8010f04 <_calloc_r>
 8010290:	b160      	cbz	r0, 80102ac <_Balloc+0x64>
 8010292:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010296:	e00e      	b.n	80102b6 <_Balloc+0x6e>
 8010298:	2221      	movs	r2, #33	@ 0x21
 801029a:	2104      	movs	r1, #4
 801029c:	4620      	mov	r0, r4
 801029e:	f000 fe31 	bl	8010f04 <_calloc_r>
 80102a2:	69e3      	ldr	r3, [r4, #28]
 80102a4:	60f0      	str	r0, [r6, #12]
 80102a6:	68db      	ldr	r3, [r3, #12]
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d1e4      	bne.n	8010276 <_Balloc+0x2e>
 80102ac:	2000      	movs	r0, #0
 80102ae:	bd70      	pop	{r4, r5, r6, pc}
 80102b0:	6802      	ldr	r2, [r0, #0]
 80102b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80102b6:	2300      	movs	r3, #0
 80102b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80102bc:	e7f7      	b.n	80102ae <_Balloc+0x66>
 80102be:	bf00      	nop
 80102c0:	08011301 	.word	0x08011301
 80102c4:	08011381 	.word	0x08011381

080102c8 <_Bfree>:
 80102c8:	b570      	push	{r4, r5, r6, lr}
 80102ca:	69c6      	ldr	r6, [r0, #28]
 80102cc:	4605      	mov	r5, r0
 80102ce:	460c      	mov	r4, r1
 80102d0:	b976      	cbnz	r6, 80102f0 <_Bfree+0x28>
 80102d2:	2010      	movs	r0, #16
 80102d4:	f7ff ff02 	bl	80100dc <malloc>
 80102d8:	4602      	mov	r2, r0
 80102da:	61e8      	str	r0, [r5, #28]
 80102dc:	b920      	cbnz	r0, 80102e8 <_Bfree+0x20>
 80102de:	4b09      	ldr	r3, [pc, #36]	@ (8010304 <_Bfree+0x3c>)
 80102e0:	4809      	ldr	r0, [pc, #36]	@ (8010308 <_Bfree+0x40>)
 80102e2:	218f      	movs	r1, #143	@ 0x8f
 80102e4:	f000 fdf0 	bl	8010ec8 <__assert_func>
 80102e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80102ec:	6006      	str	r6, [r0, #0]
 80102ee:	60c6      	str	r6, [r0, #12]
 80102f0:	b13c      	cbz	r4, 8010302 <_Bfree+0x3a>
 80102f2:	69eb      	ldr	r3, [r5, #28]
 80102f4:	6862      	ldr	r2, [r4, #4]
 80102f6:	68db      	ldr	r3, [r3, #12]
 80102f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80102fc:	6021      	str	r1, [r4, #0]
 80102fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010302:	bd70      	pop	{r4, r5, r6, pc}
 8010304:	08011301 	.word	0x08011301
 8010308:	08011381 	.word	0x08011381

0801030c <__multadd>:
 801030c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010310:	690d      	ldr	r5, [r1, #16]
 8010312:	4607      	mov	r7, r0
 8010314:	460c      	mov	r4, r1
 8010316:	461e      	mov	r6, r3
 8010318:	f101 0c14 	add.w	ip, r1, #20
 801031c:	2000      	movs	r0, #0
 801031e:	f8dc 3000 	ldr.w	r3, [ip]
 8010322:	b299      	uxth	r1, r3
 8010324:	fb02 6101 	mla	r1, r2, r1, r6
 8010328:	0c1e      	lsrs	r6, r3, #16
 801032a:	0c0b      	lsrs	r3, r1, #16
 801032c:	fb02 3306 	mla	r3, r2, r6, r3
 8010330:	b289      	uxth	r1, r1
 8010332:	3001      	adds	r0, #1
 8010334:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010338:	4285      	cmp	r5, r0
 801033a:	f84c 1b04 	str.w	r1, [ip], #4
 801033e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010342:	dcec      	bgt.n	801031e <__multadd+0x12>
 8010344:	b30e      	cbz	r6, 801038a <__multadd+0x7e>
 8010346:	68a3      	ldr	r3, [r4, #8]
 8010348:	42ab      	cmp	r3, r5
 801034a:	dc19      	bgt.n	8010380 <__multadd+0x74>
 801034c:	6861      	ldr	r1, [r4, #4]
 801034e:	4638      	mov	r0, r7
 8010350:	3101      	adds	r1, #1
 8010352:	f7ff ff79 	bl	8010248 <_Balloc>
 8010356:	4680      	mov	r8, r0
 8010358:	b928      	cbnz	r0, 8010366 <__multadd+0x5a>
 801035a:	4602      	mov	r2, r0
 801035c:	4b0c      	ldr	r3, [pc, #48]	@ (8010390 <__multadd+0x84>)
 801035e:	480d      	ldr	r0, [pc, #52]	@ (8010394 <__multadd+0x88>)
 8010360:	21ba      	movs	r1, #186	@ 0xba
 8010362:	f000 fdb1 	bl	8010ec8 <__assert_func>
 8010366:	6922      	ldr	r2, [r4, #16]
 8010368:	3202      	adds	r2, #2
 801036a:	f104 010c 	add.w	r1, r4, #12
 801036e:	0092      	lsls	r2, r2, #2
 8010370:	300c      	adds	r0, #12
 8010372:	f7ff f802 	bl	800f37a <memcpy>
 8010376:	4621      	mov	r1, r4
 8010378:	4638      	mov	r0, r7
 801037a:	f7ff ffa5 	bl	80102c8 <_Bfree>
 801037e:	4644      	mov	r4, r8
 8010380:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010384:	3501      	adds	r5, #1
 8010386:	615e      	str	r6, [r3, #20]
 8010388:	6125      	str	r5, [r4, #16]
 801038a:	4620      	mov	r0, r4
 801038c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010390:	08011370 	.word	0x08011370
 8010394:	08011381 	.word	0x08011381

08010398 <__hi0bits>:
 8010398:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801039c:	4603      	mov	r3, r0
 801039e:	bf36      	itet	cc
 80103a0:	0403      	lslcc	r3, r0, #16
 80103a2:	2000      	movcs	r0, #0
 80103a4:	2010      	movcc	r0, #16
 80103a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80103aa:	bf3c      	itt	cc
 80103ac:	021b      	lslcc	r3, r3, #8
 80103ae:	3008      	addcc	r0, #8
 80103b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80103b4:	bf3c      	itt	cc
 80103b6:	011b      	lslcc	r3, r3, #4
 80103b8:	3004      	addcc	r0, #4
 80103ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80103be:	bf3c      	itt	cc
 80103c0:	009b      	lslcc	r3, r3, #2
 80103c2:	3002      	addcc	r0, #2
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	db05      	blt.n	80103d4 <__hi0bits+0x3c>
 80103c8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80103cc:	f100 0001 	add.w	r0, r0, #1
 80103d0:	bf08      	it	eq
 80103d2:	2020      	moveq	r0, #32
 80103d4:	4770      	bx	lr

080103d6 <__lo0bits>:
 80103d6:	6803      	ldr	r3, [r0, #0]
 80103d8:	4602      	mov	r2, r0
 80103da:	f013 0007 	ands.w	r0, r3, #7
 80103de:	d00b      	beq.n	80103f8 <__lo0bits+0x22>
 80103e0:	07d9      	lsls	r1, r3, #31
 80103e2:	d421      	bmi.n	8010428 <__lo0bits+0x52>
 80103e4:	0798      	lsls	r0, r3, #30
 80103e6:	bf49      	itett	mi
 80103e8:	085b      	lsrmi	r3, r3, #1
 80103ea:	089b      	lsrpl	r3, r3, #2
 80103ec:	2001      	movmi	r0, #1
 80103ee:	6013      	strmi	r3, [r2, #0]
 80103f0:	bf5c      	itt	pl
 80103f2:	6013      	strpl	r3, [r2, #0]
 80103f4:	2002      	movpl	r0, #2
 80103f6:	4770      	bx	lr
 80103f8:	b299      	uxth	r1, r3
 80103fa:	b909      	cbnz	r1, 8010400 <__lo0bits+0x2a>
 80103fc:	0c1b      	lsrs	r3, r3, #16
 80103fe:	2010      	movs	r0, #16
 8010400:	b2d9      	uxtb	r1, r3
 8010402:	b909      	cbnz	r1, 8010408 <__lo0bits+0x32>
 8010404:	3008      	adds	r0, #8
 8010406:	0a1b      	lsrs	r3, r3, #8
 8010408:	0719      	lsls	r1, r3, #28
 801040a:	bf04      	itt	eq
 801040c:	091b      	lsreq	r3, r3, #4
 801040e:	3004      	addeq	r0, #4
 8010410:	0799      	lsls	r1, r3, #30
 8010412:	bf04      	itt	eq
 8010414:	089b      	lsreq	r3, r3, #2
 8010416:	3002      	addeq	r0, #2
 8010418:	07d9      	lsls	r1, r3, #31
 801041a:	d403      	bmi.n	8010424 <__lo0bits+0x4e>
 801041c:	085b      	lsrs	r3, r3, #1
 801041e:	f100 0001 	add.w	r0, r0, #1
 8010422:	d003      	beq.n	801042c <__lo0bits+0x56>
 8010424:	6013      	str	r3, [r2, #0]
 8010426:	4770      	bx	lr
 8010428:	2000      	movs	r0, #0
 801042a:	4770      	bx	lr
 801042c:	2020      	movs	r0, #32
 801042e:	4770      	bx	lr

08010430 <__i2b>:
 8010430:	b510      	push	{r4, lr}
 8010432:	460c      	mov	r4, r1
 8010434:	2101      	movs	r1, #1
 8010436:	f7ff ff07 	bl	8010248 <_Balloc>
 801043a:	4602      	mov	r2, r0
 801043c:	b928      	cbnz	r0, 801044a <__i2b+0x1a>
 801043e:	4b05      	ldr	r3, [pc, #20]	@ (8010454 <__i2b+0x24>)
 8010440:	4805      	ldr	r0, [pc, #20]	@ (8010458 <__i2b+0x28>)
 8010442:	f240 1145 	movw	r1, #325	@ 0x145
 8010446:	f000 fd3f 	bl	8010ec8 <__assert_func>
 801044a:	2301      	movs	r3, #1
 801044c:	6144      	str	r4, [r0, #20]
 801044e:	6103      	str	r3, [r0, #16]
 8010450:	bd10      	pop	{r4, pc}
 8010452:	bf00      	nop
 8010454:	08011370 	.word	0x08011370
 8010458:	08011381 	.word	0x08011381

0801045c <__multiply>:
 801045c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010460:	4617      	mov	r7, r2
 8010462:	690a      	ldr	r2, [r1, #16]
 8010464:	693b      	ldr	r3, [r7, #16]
 8010466:	429a      	cmp	r2, r3
 8010468:	bfa8      	it	ge
 801046a:	463b      	movge	r3, r7
 801046c:	4689      	mov	r9, r1
 801046e:	bfa4      	itt	ge
 8010470:	460f      	movge	r7, r1
 8010472:	4699      	movge	r9, r3
 8010474:	693d      	ldr	r5, [r7, #16]
 8010476:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801047a:	68bb      	ldr	r3, [r7, #8]
 801047c:	6879      	ldr	r1, [r7, #4]
 801047e:	eb05 060a 	add.w	r6, r5, sl
 8010482:	42b3      	cmp	r3, r6
 8010484:	b085      	sub	sp, #20
 8010486:	bfb8      	it	lt
 8010488:	3101      	addlt	r1, #1
 801048a:	f7ff fedd 	bl	8010248 <_Balloc>
 801048e:	b930      	cbnz	r0, 801049e <__multiply+0x42>
 8010490:	4602      	mov	r2, r0
 8010492:	4b41      	ldr	r3, [pc, #260]	@ (8010598 <__multiply+0x13c>)
 8010494:	4841      	ldr	r0, [pc, #260]	@ (801059c <__multiply+0x140>)
 8010496:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801049a:	f000 fd15 	bl	8010ec8 <__assert_func>
 801049e:	f100 0414 	add.w	r4, r0, #20
 80104a2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80104a6:	4623      	mov	r3, r4
 80104a8:	2200      	movs	r2, #0
 80104aa:	4573      	cmp	r3, lr
 80104ac:	d320      	bcc.n	80104f0 <__multiply+0x94>
 80104ae:	f107 0814 	add.w	r8, r7, #20
 80104b2:	f109 0114 	add.w	r1, r9, #20
 80104b6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80104ba:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80104be:	9302      	str	r3, [sp, #8]
 80104c0:	1beb      	subs	r3, r5, r7
 80104c2:	3b15      	subs	r3, #21
 80104c4:	f023 0303 	bic.w	r3, r3, #3
 80104c8:	3304      	adds	r3, #4
 80104ca:	3715      	adds	r7, #21
 80104cc:	42bd      	cmp	r5, r7
 80104ce:	bf38      	it	cc
 80104d0:	2304      	movcc	r3, #4
 80104d2:	9301      	str	r3, [sp, #4]
 80104d4:	9b02      	ldr	r3, [sp, #8]
 80104d6:	9103      	str	r1, [sp, #12]
 80104d8:	428b      	cmp	r3, r1
 80104da:	d80c      	bhi.n	80104f6 <__multiply+0x9a>
 80104dc:	2e00      	cmp	r6, #0
 80104de:	dd03      	ble.n	80104e8 <__multiply+0x8c>
 80104e0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d055      	beq.n	8010594 <__multiply+0x138>
 80104e8:	6106      	str	r6, [r0, #16]
 80104ea:	b005      	add	sp, #20
 80104ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104f0:	f843 2b04 	str.w	r2, [r3], #4
 80104f4:	e7d9      	b.n	80104aa <__multiply+0x4e>
 80104f6:	f8b1 a000 	ldrh.w	sl, [r1]
 80104fa:	f1ba 0f00 	cmp.w	sl, #0
 80104fe:	d01f      	beq.n	8010540 <__multiply+0xe4>
 8010500:	46c4      	mov	ip, r8
 8010502:	46a1      	mov	r9, r4
 8010504:	2700      	movs	r7, #0
 8010506:	f85c 2b04 	ldr.w	r2, [ip], #4
 801050a:	f8d9 3000 	ldr.w	r3, [r9]
 801050e:	fa1f fb82 	uxth.w	fp, r2
 8010512:	b29b      	uxth	r3, r3
 8010514:	fb0a 330b 	mla	r3, sl, fp, r3
 8010518:	443b      	add	r3, r7
 801051a:	f8d9 7000 	ldr.w	r7, [r9]
 801051e:	0c12      	lsrs	r2, r2, #16
 8010520:	0c3f      	lsrs	r7, r7, #16
 8010522:	fb0a 7202 	mla	r2, sl, r2, r7
 8010526:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801052a:	b29b      	uxth	r3, r3
 801052c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010530:	4565      	cmp	r5, ip
 8010532:	f849 3b04 	str.w	r3, [r9], #4
 8010536:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801053a:	d8e4      	bhi.n	8010506 <__multiply+0xaa>
 801053c:	9b01      	ldr	r3, [sp, #4]
 801053e:	50e7      	str	r7, [r4, r3]
 8010540:	9b03      	ldr	r3, [sp, #12]
 8010542:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010546:	3104      	adds	r1, #4
 8010548:	f1b9 0f00 	cmp.w	r9, #0
 801054c:	d020      	beq.n	8010590 <__multiply+0x134>
 801054e:	6823      	ldr	r3, [r4, #0]
 8010550:	4647      	mov	r7, r8
 8010552:	46a4      	mov	ip, r4
 8010554:	f04f 0a00 	mov.w	sl, #0
 8010558:	f8b7 b000 	ldrh.w	fp, [r7]
 801055c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8010560:	fb09 220b 	mla	r2, r9, fp, r2
 8010564:	4452      	add	r2, sl
 8010566:	b29b      	uxth	r3, r3
 8010568:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801056c:	f84c 3b04 	str.w	r3, [ip], #4
 8010570:	f857 3b04 	ldr.w	r3, [r7], #4
 8010574:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010578:	f8bc 3000 	ldrh.w	r3, [ip]
 801057c:	fb09 330a 	mla	r3, r9, sl, r3
 8010580:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8010584:	42bd      	cmp	r5, r7
 8010586:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801058a:	d8e5      	bhi.n	8010558 <__multiply+0xfc>
 801058c:	9a01      	ldr	r2, [sp, #4]
 801058e:	50a3      	str	r3, [r4, r2]
 8010590:	3404      	adds	r4, #4
 8010592:	e79f      	b.n	80104d4 <__multiply+0x78>
 8010594:	3e01      	subs	r6, #1
 8010596:	e7a1      	b.n	80104dc <__multiply+0x80>
 8010598:	08011370 	.word	0x08011370
 801059c:	08011381 	.word	0x08011381

080105a0 <__pow5mult>:
 80105a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105a4:	4615      	mov	r5, r2
 80105a6:	f012 0203 	ands.w	r2, r2, #3
 80105aa:	4607      	mov	r7, r0
 80105ac:	460e      	mov	r6, r1
 80105ae:	d007      	beq.n	80105c0 <__pow5mult+0x20>
 80105b0:	4c25      	ldr	r4, [pc, #148]	@ (8010648 <__pow5mult+0xa8>)
 80105b2:	3a01      	subs	r2, #1
 80105b4:	2300      	movs	r3, #0
 80105b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80105ba:	f7ff fea7 	bl	801030c <__multadd>
 80105be:	4606      	mov	r6, r0
 80105c0:	10ad      	asrs	r5, r5, #2
 80105c2:	d03d      	beq.n	8010640 <__pow5mult+0xa0>
 80105c4:	69fc      	ldr	r4, [r7, #28]
 80105c6:	b97c      	cbnz	r4, 80105e8 <__pow5mult+0x48>
 80105c8:	2010      	movs	r0, #16
 80105ca:	f7ff fd87 	bl	80100dc <malloc>
 80105ce:	4602      	mov	r2, r0
 80105d0:	61f8      	str	r0, [r7, #28]
 80105d2:	b928      	cbnz	r0, 80105e0 <__pow5mult+0x40>
 80105d4:	4b1d      	ldr	r3, [pc, #116]	@ (801064c <__pow5mult+0xac>)
 80105d6:	481e      	ldr	r0, [pc, #120]	@ (8010650 <__pow5mult+0xb0>)
 80105d8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80105dc:	f000 fc74 	bl	8010ec8 <__assert_func>
 80105e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80105e4:	6004      	str	r4, [r0, #0]
 80105e6:	60c4      	str	r4, [r0, #12]
 80105e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80105ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80105f0:	b94c      	cbnz	r4, 8010606 <__pow5mult+0x66>
 80105f2:	f240 2171 	movw	r1, #625	@ 0x271
 80105f6:	4638      	mov	r0, r7
 80105f8:	f7ff ff1a 	bl	8010430 <__i2b>
 80105fc:	2300      	movs	r3, #0
 80105fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8010602:	4604      	mov	r4, r0
 8010604:	6003      	str	r3, [r0, #0]
 8010606:	f04f 0900 	mov.w	r9, #0
 801060a:	07eb      	lsls	r3, r5, #31
 801060c:	d50a      	bpl.n	8010624 <__pow5mult+0x84>
 801060e:	4631      	mov	r1, r6
 8010610:	4622      	mov	r2, r4
 8010612:	4638      	mov	r0, r7
 8010614:	f7ff ff22 	bl	801045c <__multiply>
 8010618:	4631      	mov	r1, r6
 801061a:	4680      	mov	r8, r0
 801061c:	4638      	mov	r0, r7
 801061e:	f7ff fe53 	bl	80102c8 <_Bfree>
 8010622:	4646      	mov	r6, r8
 8010624:	106d      	asrs	r5, r5, #1
 8010626:	d00b      	beq.n	8010640 <__pow5mult+0xa0>
 8010628:	6820      	ldr	r0, [r4, #0]
 801062a:	b938      	cbnz	r0, 801063c <__pow5mult+0x9c>
 801062c:	4622      	mov	r2, r4
 801062e:	4621      	mov	r1, r4
 8010630:	4638      	mov	r0, r7
 8010632:	f7ff ff13 	bl	801045c <__multiply>
 8010636:	6020      	str	r0, [r4, #0]
 8010638:	f8c0 9000 	str.w	r9, [r0]
 801063c:	4604      	mov	r4, r0
 801063e:	e7e4      	b.n	801060a <__pow5mult+0x6a>
 8010640:	4630      	mov	r0, r6
 8010642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010646:	bf00      	nop
 8010648:	08011434 	.word	0x08011434
 801064c:	08011301 	.word	0x08011301
 8010650:	08011381 	.word	0x08011381

08010654 <__lshift>:
 8010654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010658:	460c      	mov	r4, r1
 801065a:	6849      	ldr	r1, [r1, #4]
 801065c:	6923      	ldr	r3, [r4, #16]
 801065e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010662:	68a3      	ldr	r3, [r4, #8]
 8010664:	4607      	mov	r7, r0
 8010666:	4691      	mov	r9, r2
 8010668:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801066c:	f108 0601 	add.w	r6, r8, #1
 8010670:	42b3      	cmp	r3, r6
 8010672:	db0b      	blt.n	801068c <__lshift+0x38>
 8010674:	4638      	mov	r0, r7
 8010676:	f7ff fde7 	bl	8010248 <_Balloc>
 801067a:	4605      	mov	r5, r0
 801067c:	b948      	cbnz	r0, 8010692 <__lshift+0x3e>
 801067e:	4602      	mov	r2, r0
 8010680:	4b28      	ldr	r3, [pc, #160]	@ (8010724 <__lshift+0xd0>)
 8010682:	4829      	ldr	r0, [pc, #164]	@ (8010728 <__lshift+0xd4>)
 8010684:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010688:	f000 fc1e 	bl	8010ec8 <__assert_func>
 801068c:	3101      	adds	r1, #1
 801068e:	005b      	lsls	r3, r3, #1
 8010690:	e7ee      	b.n	8010670 <__lshift+0x1c>
 8010692:	2300      	movs	r3, #0
 8010694:	f100 0114 	add.w	r1, r0, #20
 8010698:	f100 0210 	add.w	r2, r0, #16
 801069c:	4618      	mov	r0, r3
 801069e:	4553      	cmp	r3, sl
 80106a0:	db33      	blt.n	801070a <__lshift+0xb6>
 80106a2:	6920      	ldr	r0, [r4, #16]
 80106a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80106a8:	f104 0314 	add.w	r3, r4, #20
 80106ac:	f019 091f 	ands.w	r9, r9, #31
 80106b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80106b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80106b8:	d02b      	beq.n	8010712 <__lshift+0xbe>
 80106ba:	f1c9 0e20 	rsb	lr, r9, #32
 80106be:	468a      	mov	sl, r1
 80106c0:	2200      	movs	r2, #0
 80106c2:	6818      	ldr	r0, [r3, #0]
 80106c4:	fa00 f009 	lsl.w	r0, r0, r9
 80106c8:	4310      	orrs	r0, r2
 80106ca:	f84a 0b04 	str.w	r0, [sl], #4
 80106ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80106d2:	459c      	cmp	ip, r3
 80106d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80106d8:	d8f3      	bhi.n	80106c2 <__lshift+0x6e>
 80106da:	ebac 0304 	sub.w	r3, ip, r4
 80106de:	3b15      	subs	r3, #21
 80106e0:	f023 0303 	bic.w	r3, r3, #3
 80106e4:	3304      	adds	r3, #4
 80106e6:	f104 0015 	add.w	r0, r4, #21
 80106ea:	4560      	cmp	r0, ip
 80106ec:	bf88      	it	hi
 80106ee:	2304      	movhi	r3, #4
 80106f0:	50ca      	str	r2, [r1, r3]
 80106f2:	b10a      	cbz	r2, 80106f8 <__lshift+0xa4>
 80106f4:	f108 0602 	add.w	r6, r8, #2
 80106f8:	3e01      	subs	r6, #1
 80106fa:	4638      	mov	r0, r7
 80106fc:	612e      	str	r6, [r5, #16]
 80106fe:	4621      	mov	r1, r4
 8010700:	f7ff fde2 	bl	80102c8 <_Bfree>
 8010704:	4628      	mov	r0, r5
 8010706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801070a:	f842 0f04 	str.w	r0, [r2, #4]!
 801070e:	3301      	adds	r3, #1
 8010710:	e7c5      	b.n	801069e <__lshift+0x4a>
 8010712:	3904      	subs	r1, #4
 8010714:	f853 2b04 	ldr.w	r2, [r3], #4
 8010718:	f841 2f04 	str.w	r2, [r1, #4]!
 801071c:	459c      	cmp	ip, r3
 801071e:	d8f9      	bhi.n	8010714 <__lshift+0xc0>
 8010720:	e7ea      	b.n	80106f8 <__lshift+0xa4>
 8010722:	bf00      	nop
 8010724:	08011370 	.word	0x08011370
 8010728:	08011381 	.word	0x08011381

0801072c <__mcmp>:
 801072c:	690a      	ldr	r2, [r1, #16]
 801072e:	4603      	mov	r3, r0
 8010730:	6900      	ldr	r0, [r0, #16]
 8010732:	1a80      	subs	r0, r0, r2
 8010734:	b530      	push	{r4, r5, lr}
 8010736:	d10e      	bne.n	8010756 <__mcmp+0x2a>
 8010738:	3314      	adds	r3, #20
 801073a:	3114      	adds	r1, #20
 801073c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010740:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010744:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010748:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801074c:	4295      	cmp	r5, r2
 801074e:	d003      	beq.n	8010758 <__mcmp+0x2c>
 8010750:	d205      	bcs.n	801075e <__mcmp+0x32>
 8010752:	f04f 30ff 	mov.w	r0, #4294967295
 8010756:	bd30      	pop	{r4, r5, pc}
 8010758:	42a3      	cmp	r3, r4
 801075a:	d3f3      	bcc.n	8010744 <__mcmp+0x18>
 801075c:	e7fb      	b.n	8010756 <__mcmp+0x2a>
 801075e:	2001      	movs	r0, #1
 8010760:	e7f9      	b.n	8010756 <__mcmp+0x2a>
	...

08010764 <__mdiff>:
 8010764:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010768:	4689      	mov	r9, r1
 801076a:	4606      	mov	r6, r0
 801076c:	4611      	mov	r1, r2
 801076e:	4648      	mov	r0, r9
 8010770:	4614      	mov	r4, r2
 8010772:	f7ff ffdb 	bl	801072c <__mcmp>
 8010776:	1e05      	subs	r5, r0, #0
 8010778:	d112      	bne.n	80107a0 <__mdiff+0x3c>
 801077a:	4629      	mov	r1, r5
 801077c:	4630      	mov	r0, r6
 801077e:	f7ff fd63 	bl	8010248 <_Balloc>
 8010782:	4602      	mov	r2, r0
 8010784:	b928      	cbnz	r0, 8010792 <__mdiff+0x2e>
 8010786:	4b3f      	ldr	r3, [pc, #252]	@ (8010884 <__mdiff+0x120>)
 8010788:	f240 2137 	movw	r1, #567	@ 0x237
 801078c:	483e      	ldr	r0, [pc, #248]	@ (8010888 <__mdiff+0x124>)
 801078e:	f000 fb9b 	bl	8010ec8 <__assert_func>
 8010792:	2301      	movs	r3, #1
 8010794:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010798:	4610      	mov	r0, r2
 801079a:	b003      	add	sp, #12
 801079c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107a0:	bfbc      	itt	lt
 80107a2:	464b      	movlt	r3, r9
 80107a4:	46a1      	movlt	r9, r4
 80107a6:	4630      	mov	r0, r6
 80107a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80107ac:	bfba      	itte	lt
 80107ae:	461c      	movlt	r4, r3
 80107b0:	2501      	movlt	r5, #1
 80107b2:	2500      	movge	r5, #0
 80107b4:	f7ff fd48 	bl	8010248 <_Balloc>
 80107b8:	4602      	mov	r2, r0
 80107ba:	b918      	cbnz	r0, 80107c4 <__mdiff+0x60>
 80107bc:	4b31      	ldr	r3, [pc, #196]	@ (8010884 <__mdiff+0x120>)
 80107be:	f240 2145 	movw	r1, #581	@ 0x245
 80107c2:	e7e3      	b.n	801078c <__mdiff+0x28>
 80107c4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80107c8:	6926      	ldr	r6, [r4, #16]
 80107ca:	60c5      	str	r5, [r0, #12]
 80107cc:	f109 0310 	add.w	r3, r9, #16
 80107d0:	f109 0514 	add.w	r5, r9, #20
 80107d4:	f104 0e14 	add.w	lr, r4, #20
 80107d8:	f100 0b14 	add.w	fp, r0, #20
 80107dc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80107e0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80107e4:	9301      	str	r3, [sp, #4]
 80107e6:	46d9      	mov	r9, fp
 80107e8:	f04f 0c00 	mov.w	ip, #0
 80107ec:	9b01      	ldr	r3, [sp, #4]
 80107ee:	f85e 0b04 	ldr.w	r0, [lr], #4
 80107f2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80107f6:	9301      	str	r3, [sp, #4]
 80107f8:	fa1f f38a 	uxth.w	r3, sl
 80107fc:	4619      	mov	r1, r3
 80107fe:	b283      	uxth	r3, r0
 8010800:	1acb      	subs	r3, r1, r3
 8010802:	0c00      	lsrs	r0, r0, #16
 8010804:	4463      	add	r3, ip
 8010806:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801080a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801080e:	b29b      	uxth	r3, r3
 8010810:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010814:	4576      	cmp	r6, lr
 8010816:	f849 3b04 	str.w	r3, [r9], #4
 801081a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801081e:	d8e5      	bhi.n	80107ec <__mdiff+0x88>
 8010820:	1b33      	subs	r3, r6, r4
 8010822:	3b15      	subs	r3, #21
 8010824:	f023 0303 	bic.w	r3, r3, #3
 8010828:	3415      	adds	r4, #21
 801082a:	3304      	adds	r3, #4
 801082c:	42a6      	cmp	r6, r4
 801082e:	bf38      	it	cc
 8010830:	2304      	movcc	r3, #4
 8010832:	441d      	add	r5, r3
 8010834:	445b      	add	r3, fp
 8010836:	461e      	mov	r6, r3
 8010838:	462c      	mov	r4, r5
 801083a:	4544      	cmp	r4, r8
 801083c:	d30e      	bcc.n	801085c <__mdiff+0xf8>
 801083e:	f108 0103 	add.w	r1, r8, #3
 8010842:	1b49      	subs	r1, r1, r5
 8010844:	f021 0103 	bic.w	r1, r1, #3
 8010848:	3d03      	subs	r5, #3
 801084a:	45a8      	cmp	r8, r5
 801084c:	bf38      	it	cc
 801084e:	2100      	movcc	r1, #0
 8010850:	440b      	add	r3, r1
 8010852:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010856:	b191      	cbz	r1, 801087e <__mdiff+0x11a>
 8010858:	6117      	str	r7, [r2, #16]
 801085a:	e79d      	b.n	8010798 <__mdiff+0x34>
 801085c:	f854 1b04 	ldr.w	r1, [r4], #4
 8010860:	46e6      	mov	lr, ip
 8010862:	0c08      	lsrs	r0, r1, #16
 8010864:	fa1c fc81 	uxtah	ip, ip, r1
 8010868:	4471      	add	r1, lr
 801086a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801086e:	b289      	uxth	r1, r1
 8010870:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010874:	f846 1b04 	str.w	r1, [r6], #4
 8010878:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801087c:	e7dd      	b.n	801083a <__mdiff+0xd6>
 801087e:	3f01      	subs	r7, #1
 8010880:	e7e7      	b.n	8010852 <__mdiff+0xee>
 8010882:	bf00      	nop
 8010884:	08011370 	.word	0x08011370
 8010888:	08011381 	.word	0x08011381

0801088c <__d2b>:
 801088c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010890:	460f      	mov	r7, r1
 8010892:	2101      	movs	r1, #1
 8010894:	ec59 8b10 	vmov	r8, r9, d0
 8010898:	4616      	mov	r6, r2
 801089a:	f7ff fcd5 	bl	8010248 <_Balloc>
 801089e:	4604      	mov	r4, r0
 80108a0:	b930      	cbnz	r0, 80108b0 <__d2b+0x24>
 80108a2:	4602      	mov	r2, r0
 80108a4:	4b23      	ldr	r3, [pc, #140]	@ (8010934 <__d2b+0xa8>)
 80108a6:	4824      	ldr	r0, [pc, #144]	@ (8010938 <__d2b+0xac>)
 80108a8:	f240 310f 	movw	r1, #783	@ 0x30f
 80108ac:	f000 fb0c 	bl	8010ec8 <__assert_func>
 80108b0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80108b4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80108b8:	b10d      	cbz	r5, 80108be <__d2b+0x32>
 80108ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80108be:	9301      	str	r3, [sp, #4]
 80108c0:	f1b8 0300 	subs.w	r3, r8, #0
 80108c4:	d023      	beq.n	801090e <__d2b+0x82>
 80108c6:	4668      	mov	r0, sp
 80108c8:	9300      	str	r3, [sp, #0]
 80108ca:	f7ff fd84 	bl	80103d6 <__lo0bits>
 80108ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 80108d2:	b1d0      	cbz	r0, 801090a <__d2b+0x7e>
 80108d4:	f1c0 0320 	rsb	r3, r0, #32
 80108d8:	fa02 f303 	lsl.w	r3, r2, r3
 80108dc:	430b      	orrs	r3, r1
 80108de:	40c2      	lsrs	r2, r0
 80108e0:	6163      	str	r3, [r4, #20]
 80108e2:	9201      	str	r2, [sp, #4]
 80108e4:	9b01      	ldr	r3, [sp, #4]
 80108e6:	61a3      	str	r3, [r4, #24]
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	bf0c      	ite	eq
 80108ec:	2201      	moveq	r2, #1
 80108ee:	2202      	movne	r2, #2
 80108f0:	6122      	str	r2, [r4, #16]
 80108f2:	b1a5      	cbz	r5, 801091e <__d2b+0x92>
 80108f4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80108f8:	4405      	add	r5, r0
 80108fa:	603d      	str	r5, [r7, #0]
 80108fc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010900:	6030      	str	r0, [r6, #0]
 8010902:	4620      	mov	r0, r4
 8010904:	b003      	add	sp, #12
 8010906:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801090a:	6161      	str	r1, [r4, #20]
 801090c:	e7ea      	b.n	80108e4 <__d2b+0x58>
 801090e:	a801      	add	r0, sp, #4
 8010910:	f7ff fd61 	bl	80103d6 <__lo0bits>
 8010914:	9b01      	ldr	r3, [sp, #4]
 8010916:	6163      	str	r3, [r4, #20]
 8010918:	3020      	adds	r0, #32
 801091a:	2201      	movs	r2, #1
 801091c:	e7e8      	b.n	80108f0 <__d2b+0x64>
 801091e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010922:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010926:	6038      	str	r0, [r7, #0]
 8010928:	6918      	ldr	r0, [r3, #16]
 801092a:	f7ff fd35 	bl	8010398 <__hi0bits>
 801092e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010932:	e7e5      	b.n	8010900 <__d2b+0x74>
 8010934:	08011370 	.word	0x08011370
 8010938:	08011381 	.word	0x08011381

0801093c <__sfputc_r>:
 801093c:	6893      	ldr	r3, [r2, #8]
 801093e:	3b01      	subs	r3, #1
 8010940:	2b00      	cmp	r3, #0
 8010942:	b410      	push	{r4}
 8010944:	6093      	str	r3, [r2, #8]
 8010946:	da08      	bge.n	801095a <__sfputc_r+0x1e>
 8010948:	6994      	ldr	r4, [r2, #24]
 801094a:	42a3      	cmp	r3, r4
 801094c:	db01      	blt.n	8010952 <__sfputc_r+0x16>
 801094e:	290a      	cmp	r1, #10
 8010950:	d103      	bne.n	801095a <__sfputc_r+0x1e>
 8010952:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010956:	f000 ba13 	b.w	8010d80 <__swbuf_r>
 801095a:	6813      	ldr	r3, [r2, #0]
 801095c:	1c58      	adds	r0, r3, #1
 801095e:	6010      	str	r0, [r2, #0]
 8010960:	7019      	strb	r1, [r3, #0]
 8010962:	4608      	mov	r0, r1
 8010964:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010968:	4770      	bx	lr

0801096a <__sfputs_r>:
 801096a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801096c:	4606      	mov	r6, r0
 801096e:	460f      	mov	r7, r1
 8010970:	4614      	mov	r4, r2
 8010972:	18d5      	adds	r5, r2, r3
 8010974:	42ac      	cmp	r4, r5
 8010976:	d101      	bne.n	801097c <__sfputs_r+0x12>
 8010978:	2000      	movs	r0, #0
 801097a:	e007      	b.n	801098c <__sfputs_r+0x22>
 801097c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010980:	463a      	mov	r2, r7
 8010982:	4630      	mov	r0, r6
 8010984:	f7ff ffda 	bl	801093c <__sfputc_r>
 8010988:	1c43      	adds	r3, r0, #1
 801098a:	d1f3      	bne.n	8010974 <__sfputs_r+0xa>
 801098c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010990 <_vfiprintf_r>:
 8010990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010994:	460d      	mov	r5, r1
 8010996:	b09d      	sub	sp, #116	@ 0x74
 8010998:	4614      	mov	r4, r2
 801099a:	4698      	mov	r8, r3
 801099c:	4606      	mov	r6, r0
 801099e:	b118      	cbz	r0, 80109a8 <_vfiprintf_r+0x18>
 80109a0:	6a03      	ldr	r3, [r0, #32]
 80109a2:	b90b      	cbnz	r3, 80109a8 <_vfiprintf_r+0x18>
 80109a4:	f7fe fbd6 	bl	800f154 <__sinit>
 80109a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80109aa:	07d9      	lsls	r1, r3, #31
 80109ac:	d405      	bmi.n	80109ba <_vfiprintf_r+0x2a>
 80109ae:	89ab      	ldrh	r3, [r5, #12]
 80109b0:	059a      	lsls	r2, r3, #22
 80109b2:	d402      	bmi.n	80109ba <_vfiprintf_r+0x2a>
 80109b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80109b6:	f7fe fcde 	bl	800f376 <__retarget_lock_acquire_recursive>
 80109ba:	89ab      	ldrh	r3, [r5, #12]
 80109bc:	071b      	lsls	r3, r3, #28
 80109be:	d501      	bpl.n	80109c4 <_vfiprintf_r+0x34>
 80109c0:	692b      	ldr	r3, [r5, #16]
 80109c2:	b99b      	cbnz	r3, 80109ec <_vfiprintf_r+0x5c>
 80109c4:	4629      	mov	r1, r5
 80109c6:	4630      	mov	r0, r6
 80109c8:	f000 fa18 	bl	8010dfc <__swsetup_r>
 80109cc:	b170      	cbz	r0, 80109ec <_vfiprintf_r+0x5c>
 80109ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80109d0:	07dc      	lsls	r4, r3, #31
 80109d2:	d504      	bpl.n	80109de <_vfiprintf_r+0x4e>
 80109d4:	f04f 30ff 	mov.w	r0, #4294967295
 80109d8:	b01d      	add	sp, #116	@ 0x74
 80109da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109de:	89ab      	ldrh	r3, [r5, #12]
 80109e0:	0598      	lsls	r0, r3, #22
 80109e2:	d4f7      	bmi.n	80109d4 <_vfiprintf_r+0x44>
 80109e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80109e6:	f7fe fcc7 	bl	800f378 <__retarget_lock_release_recursive>
 80109ea:	e7f3      	b.n	80109d4 <_vfiprintf_r+0x44>
 80109ec:	2300      	movs	r3, #0
 80109ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80109f0:	2320      	movs	r3, #32
 80109f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80109f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80109fa:	2330      	movs	r3, #48	@ 0x30
 80109fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010bac <_vfiprintf_r+0x21c>
 8010a00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010a04:	f04f 0901 	mov.w	r9, #1
 8010a08:	4623      	mov	r3, r4
 8010a0a:	469a      	mov	sl, r3
 8010a0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a10:	b10a      	cbz	r2, 8010a16 <_vfiprintf_r+0x86>
 8010a12:	2a25      	cmp	r2, #37	@ 0x25
 8010a14:	d1f9      	bne.n	8010a0a <_vfiprintf_r+0x7a>
 8010a16:	ebba 0b04 	subs.w	fp, sl, r4
 8010a1a:	d00b      	beq.n	8010a34 <_vfiprintf_r+0xa4>
 8010a1c:	465b      	mov	r3, fp
 8010a1e:	4622      	mov	r2, r4
 8010a20:	4629      	mov	r1, r5
 8010a22:	4630      	mov	r0, r6
 8010a24:	f7ff ffa1 	bl	801096a <__sfputs_r>
 8010a28:	3001      	adds	r0, #1
 8010a2a:	f000 80a7 	beq.w	8010b7c <_vfiprintf_r+0x1ec>
 8010a2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010a30:	445a      	add	r2, fp
 8010a32:	9209      	str	r2, [sp, #36]	@ 0x24
 8010a34:	f89a 3000 	ldrb.w	r3, [sl]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	f000 809f 	beq.w	8010b7c <_vfiprintf_r+0x1ec>
 8010a3e:	2300      	movs	r3, #0
 8010a40:	f04f 32ff 	mov.w	r2, #4294967295
 8010a44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010a48:	f10a 0a01 	add.w	sl, sl, #1
 8010a4c:	9304      	str	r3, [sp, #16]
 8010a4e:	9307      	str	r3, [sp, #28]
 8010a50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010a54:	931a      	str	r3, [sp, #104]	@ 0x68
 8010a56:	4654      	mov	r4, sl
 8010a58:	2205      	movs	r2, #5
 8010a5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a5e:	4853      	ldr	r0, [pc, #332]	@ (8010bac <_vfiprintf_r+0x21c>)
 8010a60:	f7ef fb8e 	bl	8000180 <memchr>
 8010a64:	9a04      	ldr	r2, [sp, #16]
 8010a66:	b9d8      	cbnz	r0, 8010aa0 <_vfiprintf_r+0x110>
 8010a68:	06d1      	lsls	r1, r2, #27
 8010a6a:	bf44      	itt	mi
 8010a6c:	2320      	movmi	r3, #32
 8010a6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010a72:	0713      	lsls	r3, r2, #28
 8010a74:	bf44      	itt	mi
 8010a76:	232b      	movmi	r3, #43	@ 0x2b
 8010a78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010a7c:	f89a 3000 	ldrb.w	r3, [sl]
 8010a80:	2b2a      	cmp	r3, #42	@ 0x2a
 8010a82:	d015      	beq.n	8010ab0 <_vfiprintf_r+0x120>
 8010a84:	9a07      	ldr	r2, [sp, #28]
 8010a86:	4654      	mov	r4, sl
 8010a88:	2000      	movs	r0, #0
 8010a8a:	f04f 0c0a 	mov.w	ip, #10
 8010a8e:	4621      	mov	r1, r4
 8010a90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010a94:	3b30      	subs	r3, #48	@ 0x30
 8010a96:	2b09      	cmp	r3, #9
 8010a98:	d94b      	bls.n	8010b32 <_vfiprintf_r+0x1a2>
 8010a9a:	b1b0      	cbz	r0, 8010aca <_vfiprintf_r+0x13a>
 8010a9c:	9207      	str	r2, [sp, #28]
 8010a9e:	e014      	b.n	8010aca <_vfiprintf_r+0x13a>
 8010aa0:	eba0 0308 	sub.w	r3, r0, r8
 8010aa4:	fa09 f303 	lsl.w	r3, r9, r3
 8010aa8:	4313      	orrs	r3, r2
 8010aaa:	9304      	str	r3, [sp, #16]
 8010aac:	46a2      	mov	sl, r4
 8010aae:	e7d2      	b.n	8010a56 <_vfiprintf_r+0xc6>
 8010ab0:	9b03      	ldr	r3, [sp, #12]
 8010ab2:	1d19      	adds	r1, r3, #4
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	9103      	str	r1, [sp, #12]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	bfbb      	ittet	lt
 8010abc:	425b      	neglt	r3, r3
 8010abe:	f042 0202 	orrlt.w	r2, r2, #2
 8010ac2:	9307      	strge	r3, [sp, #28]
 8010ac4:	9307      	strlt	r3, [sp, #28]
 8010ac6:	bfb8      	it	lt
 8010ac8:	9204      	strlt	r2, [sp, #16]
 8010aca:	7823      	ldrb	r3, [r4, #0]
 8010acc:	2b2e      	cmp	r3, #46	@ 0x2e
 8010ace:	d10a      	bne.n	8010ae6 <_vfiprintf_r+0x156>
 8010ad0:	7863      	ldrb	r3, [r4, #1]
 8010ad2:	2b2a      	cmp	r3, #42	@ 0x2a
 8010ad4:	d132      	bne.n	8010b3c <_vfiprintf_r+0x1ac>
 8010ad6:	9b03      	ldr	r3, [sp, #12]
 8010ad8:	1d1a      	adds	r2, r3, #4
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	9203      	str	r2, [sp, #12]
 8010ade:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010ae2:	3402      	adds	r4, #2
 8010ae4:	9305      	str	r3, [sp, #20]
 8010ae6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010bbc <_vfiprintf_r+0x22c>
 8010aea:	7821      	ldrb	r1, [r4, #0]
 8010aec:	2203      	movs	r2, #3
 8010aee:	4650      	mov	r0, sl
 8010af0:	f7ef fb46 	bl	8000180 <memchr>
 8010af4:	b138      	cbz	r0, 8010b06 <_vfiprintf_r+0x176>
 8010af6:	9b04      	ldr	r3, [sp, #16]
 8010af8:	eba0 000a 	sub.w	r0, r0, sl
 8010afc:	2240      	movs	r2, #64	@ 0x40
 8010afe:	4082      	lsls	r2, r0
 8010b00:	4313      	orrs	r3, r2
 8010b02:	3401      	adds	r4, #1
 8010b04:	9304      	str	r3, [sp, #16]
 8010b06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b0a:	4829      	ldr	r0, [pc, #164]	@ (8010bb0 <_vfiprintf_r+0x220>)
 8010b0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010b10:	2206      	movs	r2, #6
 8010b12:	f7ef fb35 	bl	8000180 <memchr>
 8010b16:	2800      	cmp	r0, #0
 8010b18:	d03f      	beq.n	8010b9a <_vfiprintf_r+0x20a>
 8010b1a:	4b26      	ldr	r3, [pc, #152]	@ (8010bb4 <_vfiprintf_r+0x224>)
 8010b1c:	bb1b      	cbnz	r3, 8010b66 <_vfiprintf_r+0x1d6>
 8010b1e:	9b03      	ldr	r3, [sp, #12]
 8010b20:	3307      	adds	r3, #7
 8010b22:	f023 0307 	bic.w	r3, r3, #7
 8010b26:	3308      	adds	r3, #8
 8010b28:	9303      	str	r3, [sp, #12]
 8010b2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b2c:	443b      	add	r3, r7
 8010b2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b30:	e76a      	b.n	8010a08 <_vfiprintf_r+0x78>
 8010b32:	fb0c 3202 	mla	r2, ip, r2, r3
 8010b36:	460c      	mov	r4, r1
 8010b38:	2001      	movs	r0, #1
 8010b3a:	e7a8      	b.n	8010a8e <_vfiprintf_r+0xfe>
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	3401      	adds	r4, #1
 8010b40:	9305      	str	r3, [sp, #20]
 8010b42:	4619      	mov	r1, r3
 8010b44:	f04f 0c0a 	mov.w	ip, #10
 8010b48:	4620      	mov	r0, r4
 8010b4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010b4e:	3a30      	subs	r2, #48	@ 0x30
 8010b50:	2a09      	cmp	r2, #9
 8010b52:	d903      	bls.n	8010b5c <_vfiprintf_r+0x1cc>
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d0c6      	beq.n	8010ae6 <_vfiprintf_r+0x156>
 8010b58:	9105      	str	r1, [sp, #20]
 8010b5a:	e7c4      	b.n	8010ae6 <_vfiprintf_r+0x156>
 8010b5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010b60:	4604      	mov	r4, r0
 8010b62:	2301      	movs	r3, #1
 8010b64:	e7f0      	b.n	8010b48 <_vfiprintf_r+0x1b8>
 8010b66:	ab03      	add	r3, sp, #12
 8010b68:	9300      	str	r3, [sp, #0]
 8010b6a:	462a      	mov	r2, r5
 8010b6c:	4b12      	ldr	r3, [pc, #72]	@ (8010bb8 <_vfiprintf_r+0x228>)
 8010b6e:	a904      	add	r1, sp, #16
 8010b70:	4630      	mov	r0, r6
 8010b72:	f7fd fead 	bl	800e8d0 <_printf_float>
 8010b76:	4607      	mov	r7, r0
 8010b78:	1c78      	adds	r0, r7, #1
 8010b7a:	d1d6      	bne.n	8010b2a <_vfiprintf_r+0x19a>
 8010b7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010b7e:	07d9      	lsls	r1, r3, #31
 8010b80:	d405      	bmi.n	8010b8e <_vfiprintf_r+0x1fe>
 8010b82:	89ab      	ldrh	r3, [r5, #12]
 8010b84:	059a      	lsls	r2, r3, #22
 8010b86:	d402      	bmi.n	8010b8e <_vfiprintf_r+0x1fe>
 8010b88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010b8a:	f7fe fbf5 	bl	800f378 <__retarget_lock_release_recursive>
 8010b8e:	89ab      	ldrh	r3, [r5, #12]
 8010b90:	065b      	lsls	r3, r3, #25
 8010b92:	f53f af1f 	bmi.w	80109d4 <_vfiprintf_r+0x44>
 8010b96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010b98:	e71e      	b.n	80109d8 <_vfiprintf_r+0x48>
 8010b9a:	ab03      	add	r3, sp, #12
 8010b9c:	9300      	str	r3, [sp, #0]
 8010b9e:	462a      	mov	r2, r5
 8010ba0:	4b05      	ldr	r3, [pc, #20]	@ (8010bb8 <_vfiprintf_r+0x228>)
 8010ba2:	a904      	add	r1, sp, #16
 8010ba4:	4630      	mov	r0, r6
 8010ba6:	f7fe f92b 	bl	800ee00 <_printf_i>
 8010baa:	e7e4      	b.n	8010b76 <_vfiprintf_r+0x1e6>
 8010bac:	080113da 	.word	0x080113da
 8010bb0:	080113e4 	.word	0x080113e4
 8010bb4:	0800e8d1 	.word	0x0800e8d1
 8010bb8:	0801096b 	.word	0x0801096b
 8010bbc:	080113e0 	.word	0x080113e0

08010bc0 <__sflush_r>:
 8010bc0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bc8:	0716      	lsls	r6, r2, #28
 8010bca:	4605      	mov	r5, r0
 8010bcc:	460c      	mov	r4, r1
 8010bce:	d454      	bmi.n	8010c7a <__sflush_r+0xba>
 8010bd0:	684b      	ldr	r3, [r1, #4]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	dc02      	bgt.n	8010bdc <__sflush_r+0x1c>
 8010bd6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	dd48      	ble.n	8010c6e <__sflush_r+0xae>
 8010bdc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010bde:	2e00      	cmp	r6, #0
 8010be0:	d045      	beq.n	8010c6e <__sflush_r+0xae>
 8010be2:	2300      	movs	r3, #0
 8010be4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010be8:	682f      	ldr	r7, [r5, #0]
 8010bea:	6a21      	ldr	r1, [r4, #32]
 8010bec:	602b      	str	r3, [r5, #0]
 8010bee:	d030      	beq.n	8010c52 <__sflush_r+0x92>
 8010bf0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8010bf2:	89a3      	ldrh	r3, [r4, #12]
 8010bf4:	0759      	lsls	r1, r3, #29
 8010bf6:	d505      	bpl.n	8010c04 <__sflush_r+0x44>
 8010bf8:	6863      	ldr	r3, [r4, #4]
 8010bfa:	1ad2      	subs	r2, r2, r3
 8010bfc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8010bfe:	b10b      	cbz	r3, 8010c04 <__sflush_r+0x44>
 8010c00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010c02:	1ad2      	subs	r2, r2, r3
 8010c04:	2300      	movs	r3, #0
 8010c06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010c08:	6a21      	ldr	r1, [r4, #32]
 8010c0a:	4628      	mov	r0, r5
 8010c0c:	47b0      	blx	r6
 8010c0e:	1c43      	adds	r3, r0, #1
 8010c10:	89a3      	ldrh	r3, [r4, #12]
 8010c12:	d106      	bne.n	8010c22 <__sflush_r+0x62>
 8010c14:	6829      	ldr	r1, [r5, #0]
 8010c16:	291d      	cmp	r1, #29
 8010c18:	d82b      	bhi.n	8010c72 <__sflush_r+0xb2>
 8010c1a:	4a2a      	ldr	r2, [pc, #168]	@ (8010cc4 <__sflush_r+0x104>)
 8010c1c:	40ca      	lsrs	r2, r1
 8010c1e:	07d6      	lsls	r6, r2, #31
 8010c20:	d527      	bpl.n	8010c72 <__sflush_r+0xb2>
 8010c22:	2200      	movs	r2, #0
 8010c24:	6062      	str	r2, [r4, #4]
 8010c26:	04d9      	lsls	r1, r3, #19
 8010c28:	6922      	ldr	r2, [r4, #16]
 8010c2a:	6022      	str	r2, [r4, #0]
 8010c2c:	d504      	bpl.n	8010c38 <__sflush_r+0x78>
 8010c2e:	1c42      	adds	r2, r0, #1
 8010c30:	d101      	bne.n	8010c36 <__sflush_r+0x76>
 8010c32:	682b      	ldr	r3, [r5, #0]
 8010c34:	b903      	cbnz	r3, 8010c38 <__sflush_r+0x78>
 8010c36:	6560      	str	r0, [r4, #84]	@ 0x54
 8010c38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010c3a:	602f      	str	r7, [r5, #0]
 8010c3c:	b1b9      	cbz	r1, 8010c6e <__sflush_r+0xae>
 8010c3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010c42:	4299      	cmp	r1, r3
 8010c44:	d002      	beq.n	8010c4c <__sflush_r+0x8c>
 8010c46:	4628      	mov	r0, r5
 8010c48:	f7ff f9fe 	bl	8010048 <_free_r>
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	6363      	str	r3, [r4, #52]	@ 0x34
 8010c50:	e00d      	b.n	8010c6e <__sflush_r+0xae>
 8010c52:	2301      	movs	r3, #1
 8010c54:	4628      	mov	r0, r5
 8010c56:	47b0      	blx	r6
 8010c58:	4602      	mov	r2, r0
 8010c5a:	1c50      	adds	r0, r2, #1
 8010c5c:	d1c9      	bne.n	8010bf2 <__sflush_r+0x32>
 8010c5e:	682b      	ldr	r3, [r5, #0]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d0c6      	beq.n	8010bf2 <__sflush_r+0x32>
 8010c64:	2b1d      	cmp	r3, #29
 8010c66:	d001      	beq.n	8010c6c <__sflush_r+0xac>
 8010c68:	2b16      	cmp	r3, #22
 8010c6a:	d11e      	bne.n	8010caa <__sflush_r+0xea>
 8010c6c:	602f      	str	r7, [r5, #0]
 8010c6e:	2000      	movs	r0, #0
 8010c70:	e022      	b.n	8010cb8 <__sflush_r+0xf8>
 8010c72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010c76:	b21b      	sxth	r3, r3
 8010c78:	e01b      	b.n	8010cb2 <__sflush_r+0xf2>
 8010c7a:	690f      	ldr	r7, [r1, #16]
 8010c7c:	2f00      	cmp	r7, #0
 8010c7e:	d0f6      	beq.n	8010c6e <__sflush_r+0xae>
 8010c80:	0793      	lsls	r3, r2, #30
 8010c82:	680e      	ldr	r6, [r1, #0]
 8010c84:	bf08      	it	eq
 8010c86:	694b      	ldreq	r3, [r1, #20]
 8010c88:	600f      	str	r7, [r1, #0]
 8010c8a:	bf18      	it	ne
 8010c8c:	2300      	movne	r3, #0
 8010c8e:	eba6 0807 	sub.w	r8, r6, r7
 8010c92:	608b      	str	r3, [r1, #8]
 8010c94:	f1b8 0f00 	cmp.w	r8, #0
 8010c98:	dde9      	ble.n	8010c6e <__sflush_r+0xae>
 8010c9a:	6a21      	ldr	r1, [r4, #32]
 8010c9c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010c9e:	4643      	mov	r3, r8
 8010ca0:	463a      	mov	r2, r7
 8010ca2:	4628      	mov	r0, r5
 8010ca4:	47b0      	blx	r6
 8010ca6:	2800      	cmp	r0, #0
 8010ca8:	dc08      	bgt.n	8010cbc <__sflush_r+0xfc>
 8010caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010cb2:	81a3      	strh	r3, [r4, #12]
 8010cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8010cb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cbc:	4407      	add	r7, r0
 8010cbe:	eba8 0800 	sub.w	r8, r8, r0
 8010cc2:	e7e7      	b.n	8010c94 <__sflush_r+0xd4>
 8010cc4:	20400001 	.word	0x20400001

08010cc8 <_fflush_r>:
 8010cc8:	b538      	push	{r3, r4, r5, lr}
 8010cca:	690b      	ldr	r3, [r1, #16]
 8010ccc:	4605      	mov	r5, r0
 8010cce:	460c      	mov	r4, r1
 8010cd0:	b913      	cbnz	r3, 8010cd8 <_fflush_r+0x10>
 8010cd2:	2500      	movs	r5, #0
 8010cd4:	4628      	mov	r0, r5
 8010cd6:	bd38      	pop	{r3, r4, r5, pc}
 8010cd8:	b118      	cbz	r0, 8010ce2 <_fflush_r+0x1a>
 8010cda:	6a03      	ldr	r3, [r0, #32]
 8010cdc:	b90b      	cbnz	r3, 8010ce2 <_fflush_r+0x1a>
 8010cde:	f7fe fa39 	bl	800f154 <__sinit>
 8010ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d0f3      	beq.n	8010cd2 <_fflush_r+0xa>
 8010cea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010cec:	07d0      	lsls	r0, r2, #31
 8010cee:	d404      	bmi.n	8010cfa <_fflush_r+0x32>
 8010cf0:	0599      	lsls	r1, r3, #22
 8010cf2:	d402      	bmi.n	8010cfa <_fflush_r+0x32>
 8010cf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010cf6:	f7fe fb3e 	bl	800f376 <__retarget_lock_acquire_recursive>
 8010cfa:	4628      	mov	r0, r5
 8010cfc:	4621      	mov	r1, r4
 8010cfe:	f7ff ff5f 	bl	8010bc0 <__sflush_r>
 8010d02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010d04:	07da      	lsls	r2, r3, #31
 8010d06:	4605      	mov	r5, r0
 8010d08:	d4e4      	bmi.n	8010cd4 <_fflush_r+0xc>
 8010d0a:	89a3      	ldrh	r3, [r4, #12]
 8010d0c:	059b      	lsls	r3, r3, #22
 8010d0e:	d4e1      	bmi.n	8010cd4 <_fflush_r+0xc>
 8010d10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010d12:	f7fe fb31 	bl	800f378 <__retarget_lock_release_recursive>
 8010d16:	e7dd      	b.n	8010cd4 <_fflush_r+0xc>

08010d18 <_putc_r>:
 8010d18:	b570      	push	{r4, r5, r6, lr}
 8010d1a:	460d      	mov	r5, r1
 8010d1c:	4614      	mov	r4, r2
 8010d1e:	4606      	mov	r6, r0
 8010d20:	b118      	cbz	r0, 8010d2a <_putc_r+0x12>
 8010d22:	6a03      	ldr	r3, [r0, #32]
 8010d24:	b90b      	cbnz	r3, 8010d2a <_putc_r+0x12>
 8010d26:	f7fe fa15 	bl	800f154 <__sinit>
 8010d2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010d2c:	07d8      	lsls	r0, r3, #31
 8010d2e:	d405      	bmi.n	8010d3c <_putc_r+0x24>
 8010d30:	89a3      	ldrh	r3, [r4, #12]
 8010d32:	0599      	lsls	r1, r3, #22
 8010d34:	d402      	bmi.n	8010d3c <_putc_r+0x24>
 8010d36:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010d38:	f7fe fb1d 	bl	800f376 <__retarget_lock_acquire_recursive>
 8010d3c:	68a3      	ldr	r3, [r4, #8]
 8010d3e:	3b01      	subs	r3, #1
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	60a3      	str	r3, [r4, #8]
 8010d44:	da05      	bge.n	8010d52 <_putc_r+0x3a>
 8010d46:	69a2      	ldr	r2, [r4, #24]
 8010d48:	4293      	cmp	r3, r2
 8010d4a:	db12      	blt.n	8010d72 <_putc_r+0x5a>
 8010d4c:	b2eb      	uxtb	r3, r5
 8010d4e:	2b0a      	cmp	r3, #10
 8010d50:	d00f      	beq.n	8010d72 <_putc_r+0x5a>
 8010d52:	6823      	ldr	r3, [r4, #0]
 8010d54:	1c5a      	adds	r2, r3, #1
 8010d56:	6022      	str	r2, [r4, #0]
 8010d58:	701d      	strb	r5, [r3, #0]
 8010d5a:	b2ed      	uxtb	r5, r5
 8010d5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010d5e:	07da      	lsls	r2, r3, #31
 8010d60:	d405      	bmi.n	8010d6e <_putc_r+0x56>
 8010d62:	89a3      	ldrh	r3, [r4, #12]
 8010d64:	059b      	lsls	r3, r3, #22
 8010d66:	d402      	bmi.n	8010d6e <_putc_r+0x56>
 8010d68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010d6a:	f7fe fb05 	bl	800f378 <__retarget_lock_release_recursive>
 8010d6e:	4628      	mov	r0, r5
 8010d70:	bd70      	pop	{r4, r5, r6, pc}
 8010d72:	4629      	mov	r1, r5
 8010d74:	4622      	mov	r2, r4
 8010d76:	4630      	mov	r0, r6
 8010d78:	f000 f802 	bl	8010d80 <__swbuf_r>
 8010d7c:	4605      	mov	r5, r0
 8010d7e:	e7ed      	b.n	8010d5c <_putc_r+0x44>

08010d80 <__swbuf_r>:
 8010d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010d82:	460e      	mov	r6, r1
 8010d84:	4614      	mov	r4, r2
 8010d86:	4605      	mov	r5, r0
 8010d88:	b118      	cbz	r0, 8010d92 <__swbuf_r+0x12>
 8010d8a:	6a03      	ldr	r3, [r0, #32]
 8010d8c:	b90b      	cbnz	r3, 8010d92 <__swbuf_r+0x12>
 8010d8e:	f7fe f9e1 	bl	800f154 <__sinit>
 8010d92:	69a3      	ldr	r3, [r4, #24]
 8010d94:	60a3      	str	r3, [r4, #8]
 8010d96:	89a3      	ldrh	r3, [r4, #12]
 8010d98:	071a      	lsls	r2, r3, #28
 8010d9a:	d501      	bpl.n	8010da0 <__swbuf_r+0x20>
 8010d9c:	6923      	ldr	r3, [r4, #16]
 8010d9e:	b943      	cbnz	r3, 8010db2 <__swbuf_r+0x32>
 8010da0:	4621      	mov	r1, r4
 8010da2:	4628      	mov	r0, r5
 8010da4:	f000 f82a 	bl	8010dfc <__swsetup_r>
 8010da8:	b118      	cbz	r0, 8010db2 <__swbuf_r+0x32>
 8010daa:	f04f 37ff 	mov.w	r7, #4294967295
 8010dae:	4638      	mov	r0, r7
 8010db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010db2:	6823      	ldr	r3, [r4, #0]
 8010db4:	6922      	ldr	r2, [r4, #16]
 8010db6:	1a98      	subs	r0, r3, r2
 8010db8:	6963      	ldr	r3, [r4, #20]
 8010dba:	b2f6      	uxtb	r6, r6
 8010dbc:	4283      	cmp	r3, r0
 8010dbe:	4637      	mov	r7, r6
 8010dc0:	dc05      	bgt.n	8010dce <__swbuf_r+0x4e>
 8010dc2:	4621      	mov	r1, r4
 8010dc4:	4628      	mov	r0, r5
 8010dc6:	f7ff ff7f 	bl	8010cc8 <_fflush_r>
 8010dca:	2800      	cmp	r0, #0
 8010dcc:	d1ed      	bne.n	8010daa <__swbuf_r+0x2a>
 8010dce:	68a3      	ldr	r3, [r4, #8]
 8010dd0:	3b01      	subs	r3, #1
 8010dd2:	60a3      	str	r3, [r4, #8]
 8010dd4:	6823      	ldr	r3, [r4, #0]
 8010dd6:	1c5a      	adds	r2, r3, #1
 8010dd8:	6022      	str	r2, [r4, #0]
 8010dda:	701e      	strb	r6, [r3, #0]
 8010ddc:	6962      	ldr	r2, [r4, #20]
 8010dde:	1c43      	adds	r3, r0, #1
 8010de0:	429a      	cmp	r2, r3
 8010de2:	d004      	beq.n	8010dee <__swbuf_r+0x6e>
 8010de4:	89a3      	ldrh	r3, [r4, #12]
 8010de6:	07db      	lsls	r3, r3, #31
 8010de8:	d5e1      	bpl.n	8010dae <__swbuf_r+0x2e>
 8010dea:	2e0a      	cmp	r6, #10
 8010dec:	d1df      	bne.n	8010dae <__swbuf_r+0x2e>
 8010dee:	4621      	mov	r1, r4
 8010df0:	4628      	mov	r0, r5
 8010df2:	f7ff ff69 	bl	8010cc8 <_fflush_r>
 8010df6:	2800      	cmp	r0, #0
 8010df8:	d0d9      	beq.n	8010dae <__swbuf_r+0x2e>
 8010dfa:	e7d6      	b.n	8010daa <__swbuf_r+0x2a>

08010dfc <__swsetup_r>:
 8010dfc:	b538      	push	{r3, r4, r5, lr}
 8010dfe:	4b29      	ldr	r3, [pc, #164]	@ (8010ea4 <__swsetup_r+0xa8>)
 8010e00:	4605      	mov	r5, r0
 8010e02:	6818      	ldr	r0, [r3, #0]
 8010e04:	460c      	mov	r4, r1
 8010e06:	b118      	cbz	r0, 8010e10 <__swsetup_r+0x14>
 8010e08:	6a03      	ldr	r3, [r0, #32]
 8010e0a:	b90b      	cbnz	r3, 8010e10 <__swsetup_r+0x14>
 8010e0c:	f7fe f9a2 	bl	800f154 <__sinit>
 8010e10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e14:	0719      	lsls	r1, r3, #28
 8010e16:	d422      	bmi.n	8010e5e <__swsetup_r+0x62>
 8010e18:	06da      	lsls	r2, r3, #27
 8010e1a:	d407      	bmi.n	8010e2c <__swsetup_r+0x30>
 8010e1c:	2209      	movs	r2, #9
 8010e1e:	602a      	str	r2, [r5, #0]
 8010e20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010e24:	81a3      	strh	r3, [r4, #12]
 8010e26:	f04f 30ff 	mov.w	r0, #4294967295
 8010e2a:	e033      	b.n	8010e94 <__swsetup_r+0x98>
 8010e2c:	0758      	lsls	r0, r3, #29
 8010e2e:	d512      	bpl.n	8010e56 <__swsetup_r+0x5a>
 8010e30:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010e32:	b141      	cbz	r1, 8010e46 <__swsetup_r+0x4a>
 8010e34:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010e38:	4299      	cmp	r1, r3
 8010e3a:	d002      	beq.n	8010e42 <__swsetup_r+0x46>
 8010e3c:	4628      	mov	r0, r5
 8010e3e:	f7ff f903 	bl	8010048 <_free_r>
 8010e42:	2300      	movs	r3, #0
 8010e44:	6363      	str	r3, [r4, #52]	@ 0x34
 8010e46:	89a3      	ldrh	r3, [r4, #12]
 8010e48:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010e4c:	81a3      	strh	r3, [r4, #12]
 8010e4e:	2300      	movs	r3, #0
 8010e50:	6063      	str	r3, [r4, #4]
 8010e52:	6923      	ldr	r3, [r4, #16]
 8010e54:	6023      	str	r3, [r4, #0]
 8010e56:	89a3      	ldrh	r3, [r4, #12]
 8010e58:	f043 0308 	orr.w	r3, r3, #8
 8010e5c:	81a3      	strh	r3, [r4, #12]
 8010e5e:	6923      	ldr	r3, [r4, #16]
 8010e60:	b94b      	cbnz	r3, 8010e76 <__swsetup_r+0x7a>
 8010e62:	89a3      	ldrh	r3, [r4, #12]
 8010e64:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010e68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010e6c:	d003      	beq.n	8010e76 <__swsetup_r+0x7a>
 8010e6e:	4621      	mov	r1, r4
 8010e70:	4628      	mov	r0, r5
 8010e72:	f000 f8b3 	bl	8010fdc <__smakebuf_r>
 8010e76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010e7a:	f013 0201 	ands.w	r2, r3, #1
 8010e7e:	d00a      	beq.n	8010e96 <__swsetup_r+0x9a>
 8010e80:	2200      	movs	r2, #0
 8010e82:	60a2      	str	r2, [r4, #8]
 8010e84:	6962      	ldr	r2, [r4, #20]
 8010e86:	4252      	negs	r2, r2
 8010e88:	61a2      	str	r2, [r4, #24]
 8010e8a:	6922      	ldr	r2, [r4, #16]
 8010e8c:	b942      	cbnz	r2, 8010ea0 <__swsetup_r+0xa4>
 8010e8e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010e92:	d1c5      	bne.n	8010e20 <__swsetup_r+0x24>
 8010e94:	bd38      	pop	{r3, r4, r5, pc}
 8010e96:	0799      	lsls	r1, r3, #30
 8010e98:	bf58      	it	pl
 8010e9a:	6962      	ldrpl	r2, [r4, #20]
 8010e9c:	60a2      	str	r2, [r4, #8]
 8010e9e:	e7f4      	b.n	8010e8a <__swsetup_r+0x8e>
 8010ea0:	2000      	movs	r0, #0
 8010ea2:	e7f7      	b.n	8010e94 <__swsetup_r+0x98>
 8010ea4:	20000130 	.word	0x20000130

08010ea8 <_sbrk_r>:
 8010ea8:	b538      	push	{r3, r4, r5, lr}
 8010eaa:	4d06      	ldr	r5, [pc, #24]	@ (8010ec4 <_sbrk_r+0x1c>)
 8010eac:	2300      	movs	r3, #0
 8010eae:	4604      	mov	r4, r0
 8010eb0:	4608      	mov	r0, r1
 8010eb2:	602b      	str	r3, [r5, #0]
 8010eb4:	f7f0 fcf2 	bl	800189c <_sbrk>
 8010eb8:	1c43      	adds	r3, r0, #1
 8010eba:	d102      	bne.n	8010ec2 <_sbrk_r+0x1a>
 8010ebc:	682b      	ldr	r3, [r5, #0]
 8010ebe:	b103      	cbz	r3, 8010ec2 <_sbrk_r+0x1a>
 8010ec0:	6023      	str	r3, [r4, #0]
 8010ec2:	bd38      	pop	{r3, r4, r5, pc}
 8010ec4:	20002068 	.word	0x20002068

08010ec8 <__assert_func>:
 8010ec8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010eca:	4614      	mov	r4, r2
 8010ecc:	461a      	mov	r2, r3
 8010ece:	4b09      	ldr	r3, [pc, #36]	@ (8010ef4 <__assert_func+0x2c>)
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	4605      	mov	r5, r0
 8010ed4:	68d8      	ldr	r0, [r3, #12]
 8010ed6:	b14c      	cbz	r4, 8010eec <__assert_func+0x24>
 8010ed8:	4b07      	ldr	r3, [pc, #28]	@ (8010ef8 <__assert_func+0x30>)
 8010eda:	9100      	str	r1, [sp, #0]
 8010edc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010ee0:	4906      	ldr	r1, [pc, #24]	@ (8010efc <__assert_func+0x34>)
 8010ee2:	462b      	mov	r3, r5
 8010ee4:	f000 f842 	bl	8010f6c <fiprintf>
 8010ee8:	f000 f8d6 	bl	8011098 <abort>
 8010eec:	4b04      	ldr	r3, [pc, #16]	@ (8010f00 <__assert_func+0x38>)
 8010eee:	461c      	mov	r4, r3
 8010ef0:	e7f3      	b.n	8010eda <__assert_func+0x12>
 8010ef2:	bf00      	nop
 8010ef4:	20000130 	.word	0x20000130
 8010ef8:	080113f5 	.word	0x080113f5
 8010efc:	08011402 	.word	0x08011402
 8010f00:	08011430 	.word	0x08011430

08010f04 <_calloc_r>:
 8010f04:	b570      	push	{r4, r5, r6, lr}
 8010f06:	fba1 5402 	umull	r5, r4, r1, r2
 8010f0a:	b934      	cbnz	r4, 8010f1a <_calloc_r+0x16>
 8010f0c:	4629      	mov	r1, r5
 8010f0e:	f7ff f90f 	bl	8010130 <_malloc_r>
 8010f12:	4606      	mov	r6, r0
 8010f14:	b928      	cbnz	r0, 8010f22 <_calloc_r+0x1e>
 8010f16:	4630      	mov	r0, r6
 8010f18:	bd70      	pop	{r4, r5, r6, pc}
 8010f1a:	220c      	movs	r2, #12
 8010f1c:	6002      	str	r2, [r0, #0]
 8010f1e:	2600      	movs	r6, #0
 8010f20:	e7f9      	b.n	8010f16 <_calloc_r+0x12>
 8010f22:	462a      	mov	r2, r5
 8010f24:	4621      	mov	r1, r4
 8010f26:	f7fe f9a8 	bl	800f27a <memset>
 8010f2a:	e7f4      	b.n	8010f16 <_calloc_r+0x12>

08010f2c <__ascii_mbtowc>:
 8010f2c:	b082      	sub	sp, #8
 8010f2e:	b901      	cbnz	r1, 8010f32 <__ascii_mbtowc+0x6>
 8010f30:	a901      	add	r1, sp, #4
 8010f32:	b142      	cbz	r2, 8010f46 <__ascii_mbtowc+0x1a>
 8010f34:	b14b      	cbz	r3, 8010f4a <__ascii_mbtowc+0x1e>
 8010f36:	7813      	ldrb	r3, [r2, #0]
 8010f38:	600b      	str	r3, [r1, #0]
 8010f3a:	7812      	ldrb	r2, [r2, #0]
 8010f3c:	1e10      	subs	r0, r2, #0
 8010f3e:	bf18      	it	ne
 8010f40:	2001      	movne	r0, #1
 8010f42:	b002      	add	sp, #8
 8010f44:	4770      	bx	lr
 8010f46:	4610      	mov	r0, r2
 8010f48:	e7fb      	b.n	8010f42 <__ascii_mbtowc+0x16>
 8010f4a:	f06f 0001 	mvn.w	r0, #1
 8010f4e:	e7f8      	b.n	8010f42 <__ascii_mbtowc+0x16>

08010f50 <__ascii_wctomb>:
 8010f50:	4603      	mov	r3, r0
 8010f52:	4608      	mov	r0, r1
 8010f54:	b141      	cbz	r1, 8010f68 <__ascii_wctomb+0x18>
 8010f56:	2aff      	cmp	r2, #255	@ 0xff
 8010f58:	d904      	bls.n	8010f64 <__ascii_wctomb+0x14>
 8010f5a:	228a      	movs	r2, #138	@ 0x8a
 8010f5c:	601a      	str	r2, [r3, #0]
 8010f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8010f62:	4770      	bx	lr
 8010f64:	700a      	strb	r2, [r1, #0]
 8010f66:	2001      	movs	r0, #1
 8010f68:	4770      	bx	lr
	...

08010f6c <fiprintf>:
 8010f6c:	b40e      	push	{r1, r2, r3}
 8010f6e:	b503      	push	{r0, r1, lr}
 8010f70:	4601      	mov	r1, r0
 8010f72:	ab03      	add	r3, sp, #12
 8010f74:	4805      	ldr	r0, [pc, #20]	@ (8010f8c <fiprintf+0x20>)
 8010f76:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f7a:	6800      	ldr	r0, [r0, #0]
 8010f7c:	9301      	str	r3, [sp, #4]
 8010f7e:	f7ff fd07 	bl	8010990 <_vfiprintf_r>
 8010f82:	b002      	add	sp, #8
 8010f84:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f88:	b003      	add	sp, #12
 8010f8a:	4770      	bx	lr
 8010f8c:	20000130 	.word	0x20000130

08010f90 <__swhatbuf_r>:
 8010f90:	b570      	push	{r4, r5, r6, lr}
 8010f92:	460c      	mov	r4, r1
 8010f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f98:	2900      	cmp	r1, #0
 8010f9a:	b096      	sub	sp, #88	@ 0x58
 8010f9c:	4615      	mov	r5, r2
 8010f9e:	461e      	mov	r6, r3
 8010fa0:	da0d      	bge.n	8010fbe <__swhatbuf_r+0x2e>
 8010fa2:	89a3      	ldrh	r3, [r4, #12]
 8010fa4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010fa8:	f04f 0100 	mov.w	r1, #0
 8010fac:	bf14      	ite	ne
 8010fae:	2340      	movne	r3, #64	@ 0x40
 8010fb0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010fb4:	2000      	movs	r0, #0
 8010fb6:	6031      	str	r1, [r6, #0]
 8010fb8:	602b      	str	r3, [r5, #0]
 8010fba:	b016      	add	sp, #88	@ 0x58
 8010fbc:	bd70      	pop	{r4, r5, r6, pc}
 8010fbe:	466a      	mov	r2, sp
 8010fc0:	f000 f848 	bl	8011054 <_fstat_r>
 8010fc4:	2800      	cmp	r0, #0
 8010fc6:	dbec      	blt.n	8010fa2 <__swhatbuf_r+0x12>
 8010fc8:	9901      	ldr	r1, [sp, #4]
 8010fca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010fce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010fd2:	4259      	negs	r1, r3
 8010fd4:	4159      	adcs	r1, r3
 8010fd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010fda:	e7eb      	b.n	8010fb4 <__swhatbuf_r+0x24>

08010fdc <__smakebuf_r>:
 8010fdc:	898b      	ldrh	r3, [r1, #12]
 8010fde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010fe0:	079d      	lsls	r5, r3, #30
 8010fe2:	4606      	mov	r6, r0
 8010fe4:	460c      	mov	r4, r1
 8010fe6:	d507      	bpl.n	8010ff8 <__smakebuf_r+0x1c>
 8010fe8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010fec:	6023      	str	r3, [r4, #0]
 8010fee:	6123      	str	r3, [r4, #16]
 8010ff0:	2301      	movs	r3, #1
 8010ff2:	6163      	str	r3, [r4, #20]
 8010ff4:	b003      	add	sp, #12
 8010ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010ff8:	ab01      	add	r3, sp, #4
 8010ffa:	466a      	mov	r2, sp
 8010ffc:	f7ff ffc8 	bl	8010f90 <__swhatbuf_r>
 8011000:	9f00      	ldr	r7, [sp, #0]
 8011002:	4605      	mov	r5, r0
 8011004:	4639      	mov	r1, r7
 8011006:	4630      	mov	r0, r6
 8011008:	f7ff f892 	bl	8010130 <_malloc_r>
 801100c:	b948      	cbnz	r0, 8011022 <__smakebuf_r+0x46>
 801100e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011012:	059a      	lsls	r2, r3, #22
 8011014:	d4ee      	bmi.n	8010ff4 <__smakebuf_r+0x18>
 8011016:	f023 0303 	bic.w	r3, r3, #3
 801101a:	f043 0302 	orr.w	r3, r3, #2
 801101e:	81a3      	strh	r3, [r4, #12]
 8011020:	e7e2      	b.n	8010fe8 <__smakebuf_r+0xc>
 8011022:	89a3      	ldrh	r3, [r4, #12]
 8011024:	6020      	str	r0, [r4, #0]
 8011026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801102a:	81a3      	strh	r3, [r4, #12]
 801102c:	9b01      	ldr	r3, [sp, #4]
 801102e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011032:	b15b      	cbz	r3, 801104c <__smakebuf_r+0x70>
 8011034:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011038:	4630      	mov	r0, r6
 801103a:	f000 f81d 	bl	8011078 <_isatty_r>
 801103e:	b128      	cbz	r0, 801104c <__smakebuf_r+0x70>
 8011040:	89a3      	ldrh	r3, [r4, #12]
 8011042:	f023 0303 	bic.w	r3, r3, #3
 8011046:	f043 0301 	orr.w	r3, r3, #1
 801104a:	81a3      	strh	r3, [r4, #12]
 801104c:	89a3      	ldrh	r3, [r4, #12]
 801104e:	431d      	orrs	r5, r3
 8011050:	81a5      	strh	r5, [r4, #12]
 8011052:	e7cf      	b.n	8010ff4 <__smakebuf_r+0x18>

08011054 <_fstat_r>:
 8011054:	b538      	push	{r3, r4, r5, lr}
 8011056:	4d07      	ldr	r5, [pc, #28]	@ (8011074 <_fstat_r+0x20>)
 8011058:	2300      	movs	r3, #0
 801105a:	4604      	mov	r4, r0
 801105c:	4608      	mov	r0, r1
 801105e:	4611      	mov	r1, r2
 8011060:	602b      	str	r3, [r5, #0]
 8011062:	f7f0 fbf3 	bl	800184c <_fstat>
 8011066:	1c43      	adds	r3, r0, #1
 8011068:	d102      	bne.n	8011070 <_fstat_r+0x1c>
 801106a:	682b      	ldr	r3, [r5, #0]
 801106c:	b103      	cbz	r3, 8011070 <_fstat_r+0x1c>
 801106e:	6023      	str	r3, [r4, #0]
 8011070:	bd38      	pop	{r3, r4, r5, pc}
 8011072:	bf00      	nop
 8011074:	20002068 	.word	0x20002068

08011078 <_isatty_r>:
 8011078:	b538      	push	{r3, r4, r5, lr}
 801107a:	4d06      	ldr	r5, [pc, #24]	@ (8011094 <_isatty_r+0x1c>)
 801107c:	2300      	movs	r3, #0
 801107e:	4604      	mov	r4, r0
 8011080:	4608      	mov	r0, r1
 8011082:	602b      	str	r3, [r5, #0]
 8011084:	f7f0 fbf2 	bl	800186c <_isatty>
 8011088:	1c43      	adds	r3, r0, #1
 801108a:	d102      	bne.n	8011092 <_isatty_r+0x1a>
 801108c:	682b      	ldr	r3, [r5, #0]
 801108e:	b103      	cbz	r3, 8011092 <_isatty_r+0x1a>
 8011090:	6023      	str	r3, [r4, #0]
 8011092:	bd38      	pop	{r3, r4, r5, pc}
 8011094:	20002068 	.word	0x20002068

08011098 <abort>:
 8011098:	b508      	push	{r3, lr}
 801109a:	2006      	movs	r0, #6
 801109c:	f000 f82c 	bl	80110f8 <raise>
 80110a0:	2001      	movs	r0, #1
 80110a2:	f7f0 fb83 	bl	80017ac <_exit>

080110a6 <_raise_r>:
 80110a6:	291f      	cmp	r1, #31
 80110a8:	b538      	push	{r3, r4, r5, lr}
 80110aa:	4605      	mov	r5, r0
 80110ac:	460c      	mov	r4, r1
 80110ae:	d904      	bls.n	80110ba <_raise_r+0x14>
 80110b0:	2316      	movs	r3, #22
 80110b2:	6003      	str	r3, [r0, #0]
 80110b4:	f04f 30ff 	mov.w	r0, #4294967295
 80110b8:	bd38      	pop	{r3, r4, r5, pc}
 80110ba:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80110bc:	b112      	cbz	r2, 80110c4 <_raise_r+0x1e>
 80110be:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80110c2:	b94b      	cbnz	r3, 80110d8 <_raise_r+0x32>
 80110c4:	4628      	mov	r0, r5
 80110c6:	f000 f831 	bl	801112c <_getpid_r>
 80110ca:	4622      	mov	r2, r4
 80110cc:	4601      	mov	r1, r0
 80110ce:	4628      	mov	r0, r5
 80110d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80110d4:	f000 b818 	b.w	8011108 <_kill_r>
 80110d8:	2b01      	cmp	r3, #1
 80110da:	d00a      	beq.n	80110f2 <_raise_r+0x4c>
 80110dc:	1c59      	adds	r1, r3, #1
 80110de:	d103      	bne.n	80110e8 <_raise_r+0x42>
 80110e0:	2316      	movs	r3, #22
 80110e2:	6003      	str	r3, [r0, #0]
 80110e4:	2001      	movs	r0, #1
 80110e6:	e7e7      	b.n	80110b8 <_raise_r+0x12>
 80110e8:	2100      	movs	r1, #0
 80110ea:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80110ee:	4620      	mov	r0, r4
 80110f0:	4798      	blx	r3
 80110f2:	2000      	movs	r0, #0
 80110f4:	e7e0      	b.n	80110b8 <_raise_r+0x12>
	...

080110f8 <raise>:
 80110f8:	4b02      	ldr	r3, [pc, #8]	@ (8011104 <raise+0xc>)
 80110fa:	4601      	mov	r1, r0
 80110fc:	6818      	ldr	r0, [r3, #0]
 80110fe:	f7ff bfd2 	b.w	80110a6 <_raise_r>
 8011102:	bf00      	nop
 8011104:	20000130 	.word	0x20000130

08011108 <_kill_r>:
 8011108:	b538      	push	{r3, r4, r5, lr}
 801110a:	4d07      	ldr	r5, [pc, #28]	@ (8011128 <_kill_r+0x20>)
 801110c:	2300      	movs	r3, #0
 801110e:	4604      	mov	r4, r0
 8011110:	4608      	mov	r0, r1
 8011112:	4611      	mov	r1, r2
 8011114:	602b      	str	r3, [r5, #0]
 8011116:	f7f0 fb39 	bl	800178c <_kill>
 801111a:	1c43      	adds	r3, r0, #1
 801111c:	d102      	bne.n	8011124 <_kill_r+0x1c>
 801111e:	682b      	ldr	r3, [r5, #0]
 8011120:	b103      	cbz	r3, 8011124 <_kill_r+0x1c>
 8011122:	6023      	str	r3, [r4, #0]
 8011124:	bd38      	pop	{r3, r4, r5, pc}
 8011126:	bf00      	nop
 8011128:	20002068 	.word	0x20002068

0801112c <_getpid_r>:
 801112c:	f7f0 bb26 	b.w	800177c <_getpid>

08011130 <_init>:
 8011130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011132:	bf00      	nop
 8011134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011136:	bc08      	pop	{r3}
 8011138:	469e      	mov	lr, r3
 801113a:	4770      	bx	lr

0801113c <_fini>:
 801113c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801113e:	bf00      	nop
 8011140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011142:	bc08      	pop	{r3}
 8011144:	469e      	mov	lr, r3
 8011146:	4770      	bx	lr
