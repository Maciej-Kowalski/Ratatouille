
ratatouille_transfer_audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000147e0  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000500  08014920  08014920  00015920  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014e20  08014e20  00015e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014e28  08014e28  00015e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08014e2c  08014e2c  00015e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000002e8  20000008  08014e30  00016008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001ffc  200002f0  08015118  000162f0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200022ec  08015118  000172ec  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000162f0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002dae8  00000000  00000000  00016320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000057c8  00000000  00000000  00043e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002b48  00000000  00000000  000495d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00002161  00000000  00000000  0004c118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002ab65  00000000  00000000  0004e279  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002f2e0  00000000  00000000  00078dde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001009b6  00000000  00000000  000a80be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a8a74  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ca04  00000000  00000000  001a8ab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000008b  00000000  00000000  001b54bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200002f0 	.word	0x200002f0
 800015c:	00000000 	.word	0x00000000
 8000160:	08014908 	.word	0x08014908

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200002f4 	.word	0x200002f4
 800017c:	08014908 	.word	0x08014908

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	@ 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b96a 	b.w	8000e44 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9d08      	ldr	r5, [sp, #32]
 8000b8e:	460c      	mov	r4, r1
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d14e      	bne.n	8000c32 <__udivmoddi4+0xaa>
 8000b94:	4694      	mov	ip, r2
 8000b96:	458c      	cmp	ip, r1
 8000b98:	4686      	mov	lr, r0
 8000b9a:	fab2 f282 	clz	r2, r2
 8000b9e:	d962      	bls.n	8000c66 <__udivmoddi4+0xde>
 8000ba0:	b14a      	cbz	r2, 8000bb6 <__udivmoddi4+0x2e>
 8000ba2:	f1c2 0320 	rsb	r3, r2, #32
 8000ba6:	4091      	lsls	r1, r2
 8000ba8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb0:	4319      	orrs	r1, r3
 8000bb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bba:	fa1f f68c 	uxth.w	r6, ip
 8000bbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000bca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bce:	fb04 f106 	mul.w	r1, r4, r6
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	d90a      	bls.n	8000bec <__udivmoddi4+0x64>
 8000bd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bde:	f080 8112 	bcs.w	8000e06 <__udivmoddi4+0x27e>
 8000be2:	4299      	cmp	r1, r3
 8000be4:	f240 810f 	bls.w	8000e06 <__udivmoddi4+0x27e>
 8000be8:	3c02      	subs	r4, #2
 8000bea:	4463      	add	r3, ip
 8000bec:	1a59      	subs	r1, r3, r1
 8000bee:	fa1f f38e 	uxth.w	r3, lr
 8000bf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000bfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bfe:	fb00 f606 	mul.w	r6, r0, r6
 8000c02:	429e      	cmp	r6, r3
 8000c04:	d90a      	bls.n	8000c1c <__udivmoddi4+0x94>
 8000c06:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c0e:	f080 80fc 	bcs.w	8000e0a <__udivmoddi4+0x282>
 8000c12:	429e      	cmp	r6, r3
 8000c14:	f240 80f9 	bls.w	8000e0a <__udivmoddi4+0x282>
 8000c18:	4463      	add	r3, ip
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	1b9b      	subs	r3, r3, r6
 8000c1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c22:	2100      	movs	r1, #0
 8000c24:	b11d      	cbz	r5, 8000c2e <__udivmoddi4+0xa6>
 8000c26:	40d3      	lsrs	r3, r2
 8000c28:	2200      	movs	r2, #0
 8000c2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c32:	428b      	cmp	r3, r1
 8000c34:	d905      	bls.n	8000c42 <__udivmoddi4+0xba>
 8000c36:	b10d      	cbz	r5, 8000c3c <__udivmoddi4+0xb4>
 8000c38:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4608      	mov	r0, r1
 8000c40:	e7f5      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000c42:	fab3 f183 	clz	r1, r3
 8000c46:	2900      	cmp	r1, #0
 8000c48:	d146      	bne.n	8000cd8 <__udivmoddi4+0x150>
 8000c4a:	42a3      	cmp	r3, r4
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xcc>
 8000c4e:	4290      	cmp	r0, r2
 8000c50:	f0c0 80f0 	bcc.w	8000e34 <__udivmoddi4+0x2ac>
 8000c54:	1a86      	subs	r6, r0, r2
 8000c56:	eb64 0303 	sbc.w	r3, r4, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	2d00      	cmp	r5, #0
 8000c5e:	d0e6      	beq.n	8000c2e <__udivmoddi4+0xa6>
 8000c60:	e9c5 6300 	strd	r6, r3, [r5]
 8000c64:	e7e3      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000c66:	2a00      	cmp	r2, #0
 8000c68:	f040 8090 	bne.w	8000d8c <__udivmoddi4+0x204>
 8000c6c:	eba1 040c 	sub.w	r4, r1, ip
 8000c70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c74:	fa1f f78c 	uxth.w	r7, ip
 8000c78:	2101      	movs	r1, #1
 8000c7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c82:	fb08 4416 	mls	r4, r8, r6, r4
 8000c86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c8a:	fb07 f006 	mul.w	r0, r7, r6
 8000c8e:	4298      	cmp	r0, r3
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x11c>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x11a>
 8000c9c:	4298      	cmp	r0, r3
 8000c9e:	f200 80cd 	bhi.w	8000e3c <__udivmoddi4+0x2b4>
 8000ca2:	4626      	mov	r6, r4
 8000ca4:	1a1c      	subs	r4, r3, r0
 8000ca6:	fa1f f38e 	uxth.w	r3, lr
 8000caa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cae:	fb08 4410 	mls	r4, r8, r0, r4
 8000cb2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cb6:	fb00 f707 	mul.w	r7, r0, r7
 8000cba:	429f      	cmp	r7, r3
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x148>
 8000cbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000cc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x146>
 8000cc8:	429f      	cmp	r7, r3
 8000cca:	f200 80b0 	bhi.w	8000e2e <__udivmoddi4+0x2a6>
 8000cce:	4620      	mov	r0, r4
 8000cd0:	1bdb      	subs	r3, r3, r7
 8000cd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cd6:	e7a5      	b.n	8000c24 <__udivmoddi4+0x9c>
 8000cd8:	f1c1 0620 	rsb	r6, r1, #32
 8000cdc:	408b      	lsls	r3, r1
 8000cde:	fa22 f706 	lsr.w	r7, r2, r6
 8000ce2:	431f      	orrs	r7, r3
 8000ce4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ce8:	fa04 f301 	lsl.w	r3, r4, r1
 8000cec:	ea43 030c 	orr.w	r3, r3, ip
 8000cf0:	40f4      	lsrs	r4, r6
 8000cf2:	fa00 f801 	lsl.w	r8, r0, r1
 8000cf6:	0c38      	lsrs	r0, r7, #16
 8000cf8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000d00:	fa1f fc87 	uxth.w	ip, r7
 8000d04:	fb00 441e 	mls	r4, r0, lr, r4
 8000d08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d10:	45a1      	cmp	r9, r4
 8000d12:	fa02 f201 	lsl.w	r2, r2, r1
 8000d16:	d90a      	bls.n	8000d2e <__udivmoddi4+0x1a6>
 8000d18:	193c      	adds	r4, r7, r4
 8000d1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d1e:	f080 8084 	bcs.w	8000e2a <__udivmoddi4+0x2a2>
 8000d22:	45a1      	cmp	r9, r4
 8000d24:	f240 8081 	bls.w	8000e2a <__udivmoddi4+0x2a2>
 8000d28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d2c:	443c      	add	r4, r7
 8000d2e:	eba4 0409 	sub.w	r4, r4, r9
 8000d32:	fa1f f983 	uxth.w	r9, r3
 8000d36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d46:	45a4      	cmp	ip, r4
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x1d2>
 8000d4a:	193c      	adds	r4, r7, r4
 8000d4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d50:	d267      	bcs.n	8000e22 <__udivmoddi4+0x29a>
 8000d52:	45a4      	cmp	ip, r4
 8000d54:	d965      	bls.n	8000e22 <__udivmoddi4+0x29a>
 8000d56:	3b02      	subs	r3, #2
 8000d58:	443c      	add	r4, r7
 8000d5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000d62:	eba4 040c 	sub.w	r4, r4, ip
 8000d66:	429c      	cmp	r4, r3
 8000d68:	46ce      	mov	lr, r9
 8000d6a:	469c      	mov	ip, r3
 8000d6c:	d351      	bcc.n	8000e12 <__udivmoddi4+0x28a>
 8000d6e:	d04e      	beq.n	8000e0e <__udivmoddi4+0x286>
 8000d70:	b155      	cbz	r5, 8000d88 <__udivmoddi4+0x200>
 8000d72:	ebb8 030e 	subs.w	r3, r8, lr
 8000d76:	eb64 040c 	sbc.w	r4, r4, ip
 8000d7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000d7e:	40cb      	lsrs	r3, r1
 8000d80:	431e      	orrs	r6, r3
 8000d82:	40cc      	lsrs	r4, r1
 8000d84:	e9c5 6400 	strd	r6, r4, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	e750      	b.n	8000c2e <__udivmoddi4+0xa6>
 8000d8c:	f1c2 0320 	rsb	r3, r2, #32
 8000d90:	fa20 f103 	lsr.w	r1, r0, r3
 8000d94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d98:	fa24 f303 	lsr.w	r3, r4, r3
 8000d9c:	4094      	lsls	r4, r2
 8000d9e:	430c      	orrs	r4, r1
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da8:	fa1f f78c 	uxth.w	r7, ip
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3110 	mls	r1, r8, r0, r3
 8000db4:	0c23      	lsrs	r3, r4, #16
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f107 	mul.w	r1, r0, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x24c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dca:	d22c      	bcs.n	8000e26 <__udivmoddi4+0x29e>
 8000dcc:	4299      	cmp	r1, r3
 8000dce:	d92a      	bls.n	8000e26 <__udivmoddi4+0x29e>
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	4463      	add	r3, ip
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ddc:	fb08 3311 	mls	r3, r8, r1, r3
 8000de0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de4:	fb01 f307 	mul.w	r3, r1, r7
 8000de8:	42a3      	cmp	r3, r4
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x276>
 8000dec:	eb1c 0404 	adds.w	r4, ip, r4
 8000df0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000df4:	d213      	bcs.n	8000e1e <__udivmoddi4+0x296>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d911      	bls.n	8000e1e <__udivmoddi4+0x296>
 8000dfa:	3902      	subs	r1, #2
 8000dfc:	4464      	add	r4, ip
 8000dfe:	1ae4      	subs	r4, r4, r3
 8000e00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e04:	e739      	b.n	8000c7a <__udivmoddi4+0xf2>
 8000e06:	4604      	mov	r4, r0
 8000e08:	e6f0      	b.n	8000bec <__udivmoddi4+0x64>
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	e706      	b.n	8000c1c <__udivmoddi4+0x94>
 8000e0e:	45c8      	cmp	r8, r9
 8000e10:	d2ae      	bcs.n	8000d70 <__udivmoddi4+0x1e8>
 8000e12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e1a:	3801      	subs	r0, #1
 8000e1c:	e7a8      	b.n	8000d70 <__udivmoddi4+0x1e8>
 8000e1e:	4631      	mov	r1, r6
 8000e20:	e7ed      	b.n	8000dfe <__udivmoddi4+0x276>
 8000e22:	4603      	mov	r3, r0
 8000e24:	e799      	b.n	8000d5a <__udivmoddi4+0x1d2>
 8000e26:	4630      	mov	r0, r6
 8000e28:	e7d4      	b.n	8000dd4 <__udivmoddi4+0x24c>
 8000e2a:	46d6      	mov	lr, sl
 8000e2c:	e77f      	b.n	8000d2e <__udivmoddi4+0x1a6>
 8000e2e:	4463      	add	r3, ip
 8000e30:	3802      	subs	r0, #2
 8000e32:	e74d      	b.n	8000cd0 <__udivmoddi4+0x148>
 8000e34:	4606      	mov	r6, r0
 8000e36:	4623      	mov	r3, r4
 8000e38:	4608      	mov	r0, r1
 8000e3a:	e70f      	b.n	8000c5c <__udivmoddi4+0xd4>
 8000e3c:	3e02      	subs	r6, #2
 8000e3e:	4463      	add	r3, ip
 8000e40:	e730      	b.n	8000ca4 <__udivmoddi4+0x11c>
 8000e42:	bf00      	nop

08000e44 <__aeabi_idiv0>:
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop

08000e48 <bmi160_get_regs>:
/*!
 * @brief This API reads the data from the given register address
 * of sensor.
 */
int8_t bmi160_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b087      	sub	sp, #28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60b9      	str	r1, [r7, #8]
 8000e50:	607b      	str	r3, [r7, #4]
 8000e52:	4603      	mov	r3, r0
 8000e54:	73fb      	strb	r3, [r7, #15]
 8000e56:	4613      	mov	r3, r2
 8000e58:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	75fb      	strb	r3, [r7, #23]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->read == NULL))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d003      	beq.n	8000e6c <bmi160_get_regs+0x24>
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	69db      	ldr	r3, [r3, #28]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d102      	bne.n	8000e72 <bmi160_get_regs+0x2a>
    {
        rslt = BMI160_E_NULL_PTR;
 8000e6c:	23ff      	movs	r3, #255	@ 0xff
 8000e6e:	75fb      	strb	r3, [r7, #23]
 8000e70:	e017      	b.n	8000ea2 <bmi160_get_regs+0x5a>
    }
    else if (len == 0)
 8000e72:	89bb      	ldrh	r3, [r7, #12]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d102      	bne.n	8000e7e <bmi160_get_regs+0x36>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 8000e78:	23f4      	movs	r3, #244	@ 0xf4
 8000e7a:	75fb      	strb	r3, [r7, #23]
 8000e7c:	e011      	b.n	8000ea2 <bmi160_get_regs+0x5a>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	789b      	ldrb	r3, [r3, #2]
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d103      	bne.n	8000e8e <bmi160_get_regs+0x46>
        {
            reg_addr = (reg_addr | BMI160_SPI_RD_MASK);
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e8c:	73fb      	strb	r3, [r7, #15]
        }

        rslt = dev->read(dev->id, reg_addr, data, len);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	69dc      	ldr	r4, [r3, #28]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	7858      	ldrb	r0, [r3, #1]
 8000e96:	89bb      	ldrh	r3, [r7, #12]
 8000e98:	7bf9      	ldrb	r1, [r7, #15]
 8000e9a:	68ba      	ldr	r2, [r7, #8]
 8000e9c:	47a0      	blx	r4
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000ea2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	371c      	adds	r7, #28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd90      	pop	{r4, r7, pc}

08000eae <bmi160_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of sensor.
 */
int8_t bmi160_set_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 8000eae:	b590      	push	{r4, r7, lr}
 8000eb0:	b087      	sub	sp, #28
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	4603      	mov	r3, r0
 8000eba:	73fb      	strb	r3, [r7, #15]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	75fb      	strb	r3, [r7, #23]
    uint8_t count = 0;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	75bb      	strb	r3, [r7, #22]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->write == NULL))
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <bmi160_set_regs+0x28>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6a1b      	ldr	r3, [r3, #32]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d102      	bne.n	8000edc <bmi160_set_regs+0x2e>
    {
        rslt = BMI160_E_NULL_PTR;
 8000ed6:	23ff      	movs	r3, #255	@ 0xff
 8000ed8:	75fb      	strb	r3, [r7, #23]
 8000eda:	e045      	b.n	8000f68 <bmi160_set_regs+0xba>
    }
    else if (len == 0)
 8000edc:	89bb      	ldrh	r3, [r7, #12]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d102      	bne.n	8000ee8 <bmi160_set_regs+0x3a>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 8000ee2:	23f4      	movs	r3, #244	@ 0xf4
 8000ee4:	75fb      	strb	r3, [r7, #23]
 8000ee6:	e03f      	b.n	8000f68 <bmi160_set_regs+0xba>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	789b      	ldrb	r3, [r3, #2]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d103      	bne.n	8000ef8 <bmi160_set_regs+0x4a>
        {
            reg_addr = (reg_addr & BMI160_SPI_WR_MASK);
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000ef6:	73fb      	strb	r3, [r7, #15]
        }

        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	7a1b      	ldrb	r3, [r3, #8]
 8000efc:	2b11      	cmp	r3, #17
 8000efe:	d003      	beq.n	8000f08 <bmi160_set_regs+0x5a>
            (dev->prev_gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	7c1b      	ldrb	r3, [r3, #16]
        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 8000f04:	2b15      	cmp	r3, #21
 8000f06:	d124      	bne.n	8000f52 <bmi160_set_regs+0xa4>
        {
            rslt = dev->write(dev->id, reg_addr, data, len);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6a1c      	ldr	r4, [r3, #32]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	7858      	ldrb	r0, [r3, #1]
 8000f10:	89bb      	ldrh	r3, [r7, #12]
 8000f12:	7bf9      	ldrb	r1, [r7, #15]
 8000f14:	68ba      	ldr	r2, [r7, #8]
 8000f16:	47a0      	blx	r4
 8000f18:	4603      	mov	r3, r0
 8000f1a:	75fb      	strb	r3, [r7, #23]

            /* Kindly refer bmi160 data sheet section 3.2.4 */
            dev->delay_ms(1);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f20:	2001      	movs	r0, #1
 8000f22:	4798      	blx	r3
 8000f24:	e01a      	b.n	8000f5c <bmi160_set_regs+0xae>
        {
            /*Burst write is not allowed in
             * suspend & low power mode */
            for (; count < len; count++)
            {
                rslt = dev->write(dev->id, reg_addr, &data[count], 1);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6a1c      	ldr	r4, [r3, #32]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	7858      	ldrb	r0, [r3, #1]
 8000f2e:	7dbb      	ldrb	r3, [r7, #22]
 8000f30:	68ba      	ldr	r2, [r7, #8]
 8000f32:	441a      	add	r2, r3
 8000f34:	7bf9      	ldrb	r1, [r7, #15]
 8000f36:	2301      	movs	r3, #1
 8000f38:	47a0      	blx	r4
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	75fb      	strb	r3, [r7, #23]
                reg_addr++;
 8000f3e:	7bfb      	ldrb	r3, [r7, #15]
 8000f40:	3301      	adds	r3, #1
 8000f42:	73fb      	strb	r3, [r7, #15]

                /* Kindly refer bmi160 data sheet section 3.2.4 */
                dev->delay_ms(1);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f48:	2001      	movs	r0, #1
 8000f4a:	4798      	blx	r3
            for (; count < len; count++)
 8000f4c:	7dbb      	ldrb	r3, [r7, #22]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	75bb      	strb	r3, [r7, #22]
 8000f52:	7dbb      	ldrb	r3, [r7, #22]
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	89ba      	ldrh	r2, [r7, #12]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d8e4      	bhi.n	8000f26 <bmi160_set_regs+0x78>

            }
        }

        if (rslt != BMI160_OK)
 8000f5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <bmi160_set_regs+0xba>
        {
            rslt = BMI160_E_COM_FAIL;
 8000f64:	23fe      	movs	r3, #254	@ 0xfe
 8000f66:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8000f68:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	371c      	adds	r7, #28
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd90      	pop	{r4, r7, pc}

08000f74 <bmi160_init>:
 *  @brief This API is the entry point for sensor.It performs
 *  the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of bmi160 sensor.
 */
int8_t bmi160_init(struct bmi160_dev *dev)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;
    uint8_t try = 3;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f000 fccd 	bl	8001920 <null_ptr_check>
 8000f86:	4603      	mov	r3, r0
 8000f88:	73fb      	strb	r3, [r7, #15]

    /* Dummy read of 0x7F register to enable SPI Interface
     * if SPI is used */
    if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 8000f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d10c      	bne.n	8000fac <bmi160_init+0x38>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	789b      	ldrb	r3, [r3, #2]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d108      	bne.n	8000fac <bmi160_init+0x38>
    {
        rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 8000f9a:	f107 010d 	add.w	r1, r7, #13
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	207f      	movs	r0, #127	@ 0x7f
 8000fa4:	f7ff ff50 	bl	8000e48 <bmi160_get_regs>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	73fb      	strb	r3, [r7, #15]
    }

    if (rslt == BMI160_OK)
 8000fac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d127      	bne.n	8001004 <bmi160_init+0x90>
    {
        /* Assign chip id as zero */
        dev->chip_id = 0;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]

        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 8000fba:	e007      	b.n	8000fcc <bmi160_init+0x58>
        {
            /* Read chip_id */
            rslt = bmi160_get_regs(BMI160_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8000fbc:	6879      	ldr	r1, [r7, #4]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	2000      	movs	r0, #0
 8000fc4:	f7ff ff40 	bl	8000e48 <bmi160_get_regs>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	73fb      	strb	r3, [r7, #15]
        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 8000fcc:	7bbb      	ldrb	r3, [r7, #14]
 8000fce:	1e5a      	subs	r2, r3, #1
 8000fd0:	73ba      	strb	r2, [r7, #14]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <bmi160_init+0x6a>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2bd1      	cmp	r3, #209	@ 0xd1
 8000fdc:	d1ee      	bne.n	8000fbc <bmi160_init+0x48>
        }

        if ((rslt == BMI160_OK) && (dev->chip_id == BMI160_CHIP_ID))
 8000fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d10c      	bne.n	8001000 <bmi160_init+0x8c>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2bd1      	cmp	r3, #209	@ 0xd1
 8000fec:	d108      	bne.n	8001000 <bmi160_init+0x8c>
        {
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	22ff      	movs	r2, #255	@ 0xff
 8000ff2:	70da      	strb	r2, [r3, #3]

            /* Soft reset */
            rslt = bmi160_soft_reset(dev);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f000 f80b 	bl	8001010 <bmi160_soft_reset>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	73fb      	strb	r3, [r7, #15]
 8000ffe:	e001      	b.n	8001004 <bmi160_init+0x90>
        }
        else
        {
            rslt = BMI160_E_DEV_NOT_FOUND;
 8001000:	23fd      	movs	r3, #253	@ 0xfd
 8001002:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001004:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3710      	adds	r7, #16
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <bmi160_soft_reset>:
/*!
 * @brief This API resets and restarts the device.
 * All register values are overwritten with default parameters.
 */
int8_t bmi160_soft_reset(struct bmi160_dev *dev)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = BMI160_SOFT_RESET_CMD;
 8001018:	23b6      	movs	r3, #182	@ 0xb6
 800101a:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d003      	beq.n	800102a <bmi160_soft_reset+0x1a>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001026:	2b00      	cmp	r3, #0
 8001028:	d102      	bne.n	8001030 <bmi160_soft_reset+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 800102a:	23ff      	movs	r3, #255	@ 0xff
 800102c:	73fb      	strb	r3, [r7, #15]
 800102e:	e024      	b.n	800107a <bmi160_soft_reset+0x6a>
    }
    else
    {
        /* Reset the device */
        rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &data, 1, dev);
 8001030:	f107 010e 	add.w	r1, r7, #14
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2201      	movs	r2, #1
 8001038:	207e      	movs	r0, #126	@ 0x7e
 800103a:	f7ff ff38 	bl	8000eae <bmi160_set_regs>
 800103e:	4603      	mov	r3, r0
 8001040:	73fb      	strb	r3, [r7, #15]
        dev->delay_ms(BMI160_SOFT_RESET_DELAY_MS);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001046:	2001      	movs	r0, #1
 8001048:	4798      	blx	r3
        if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 800104a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d10c      	bne.n	800106c <bmi160_soft_reset+0x5c>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	789b      	ldrb	r3, [r3, #2]
 8001056:	2b01      	cmp	r3, #1
 8001058:	d108      	bne.n	800106c <bmi160_soft_reset+0x5c>
        {
            /* Dummy read of 0x7F register to enable SPI Interface
             * if SPI is used */
            rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 800105a:	f107 010e 	add.w	r1, r7, #14
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2201      	movs	r2, #1
 8001062:	207f      	movs	r0, #127	@ 0x7f
 8001064:	f7ff fef0 	bl	8000e48 <bmi160_get_regs>
 8001068:	4603      	mov	r3, r0
 800106a:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI160_OK)
 800106c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d102      	bne.n	800107a <bmi160_soft_reset+0x6a>
        {
            /* Update the default parameters */
            default_param_settg(dev);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f000 fc73 	bl	8001960 <default_param_settg>
        }
    }

    return rslt;
 800107a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <bmi160_set_sens_conf>:
/*!
 * @brief This API configures the power mode, range and bandwidth
 * of sensor.
 */
int8_t bmi160_set_sens_conf(struct bmi160_dev *dev)
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b084      	sub	sp, #16
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMI160_OK;
 800108e:	2300      	movs	r3, #0
 8001090:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <bmi160_set_sens_conf+0x1a>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800109c:	2b00      	cmp	r3, #0
 800109e:	d102      	bne.n	80010a6 <bmi160_set_sens_conf+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 80010a0:	23ff      	movs	r3, #255	@ 0xff
 80010a2:	73fb      	strb	r3, [r7, #15]
 80010a4:	e01f      	b.n	80010e6 <bmi160_set_sens_conf+0x60>
    }
    else
    {
        rslt = set_accel_conf(dev);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f000 fc84 	bl	80019b4 <set_accel_conf>
 80010ac:	4603      	mov	r3, r0
 80010ae:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80010b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d116      	bne.n	80010e6 <bmi160_set_sens_conf+0x60>
        {
            rslt = set_gyro_conf(dev);
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f000 fdbf 	bl	8001c3c <set_gyro_conf>
 80010be:	4603      	mov	r3, r0
 80010c0:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80010c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d10d      	bne.n	80010e6 <bmi160_set_sens_conf+0x60>
            {
                /* write power mode for accel and gyro */
                rslt = bmi160_set_power_mode(dev);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f000 f811 	bl	80010f2 <bmi160_set_power_mode>
 80010d0:	4603      	mov	r3, r0
 80010d2:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 80010d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d104      	bne.n	80010e6 <bmi160_set_sens_conf+0x60>
                {
                    rslt = check_invalid_settg(dev);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f000 fd78 	bl	8001bd2 <check_invalid_settg>
 80010e2:	4603      	mov	r3, r0
 80010e4:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80010e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <bmi160_set_power_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmi160_set_power_mode(struct bmi160_dev *dev)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b084      	sub	sp, #16
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <bmi160_set_power_mode+0x1a>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001108:	2b00      	cmp	r3, #0
 800110a:	d102      	bne.n	8001112 <bmi160_set_power_mode+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 800110c:	23ff      	movs	r3, #255	@ 0xff
 800110e:	73fb      	strb	r3, [r7, #15]
 8001110:	e00d      	b.n	800112e <bmi160_set_power_mode+0x3c>
    }
    else
    {
        rslt = set_accel_pwr(dev);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f000 fe9b 	bl	8001e4e <set_accel_pwr>
 8001118:	4603      	mov	r3, r0
 800111a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800111c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d104      	bne.n	800112e <bmi160_set_power_mode+0x3c>
        {
            rslt = set_gyro_pwr(dev);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f000 ff29 	bl	8001f7c <set_gyro_pwr>
 800112a:	4603      	mov	r3, r0
 800112c:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800112e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001132:	4618      	mov	r0, r3
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <bmi160_set_int_config>:
/*!
 * @brief This API configures the necessary interrupt based on
 *  the user settings in the bmi160_int_settg structure instance.
 */
int8_t bmi160_set_int_config(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	73fb      	strb	r3, [r7, #15]

    switch (int_config->int_type)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	785b      	ldrb	r3, [r3, #1]
 800114e:	2b0d      	cmp	r3, #13
 8001150:	d879      	bhi.n	8001246 <bmi160_set_int_config+0x10a>
 8001152:	a201      	add	r2, pc, #4	@ (adr r2, 8001158 <bmi160_set_int_config+0x1c>)
 8001154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001158:	08001191 	.word	0x08001191
 800115c:	0800119f 	.word	0x0800119f
 8001160:	080011c9 	.word	0x080011c9
 8001164:	080011bb 	.word	0x080011bb
 8001168:	080011bb 	.word	0x080011bb
 800116c:	080011d7 	.word	0x080011d7
 8001170:	080011e5 	.word	0x080011e5
 8001174:	08001201 	.word	0x08001201
 8001178:	080011f3 	.word	0x080011f3
 800117c:	080011ad 	.word	0x080011ad
 8001180:	0800120f 	.word	0x0800120f
 8001184:	0800121d 	.word	0x0800121d
 8001188:	0800122b 	.word	0x0800122b
 800118c:	08001239 	.word	0x08001239
    {
        case BMI160_ACC_ANY_MOTION_INT:

            /*Any-motion  interrupt*/
            rslt = set_accel_any_motion_int(int_config, dev);
 8001190:	6839      	ldr	r1, [r7, #0]
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f000 f95a 	bl	800144c <set_accel_any_motion_int>
 8001198:	4603      	mov	r3, r0
 800119a:	73fb      	strb	r3, [r7, #15]
            break;
 800119c:	e054      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_SIG_MOTION_INT:

            /* Significant motion interrupt */
            rslt = set_accel_sig_motion_int(int_config, dev);
 800119e:	6839      	ldr	r1, [r7, #0]
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 f9ed 	bl	8001580 <set_accel_sig_motion_int>
 80011a6:	4603      	mov	r3, r0
 80011a8:	73fb      	strb	r3, [r7, #15]
            break;
 80011aa:	e04d      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_SLOW_NO_MOTION_INT:

            /* Slow or no motion interrupt */
            rslt = set_accel_no_motion_int(int_config, dev);
 80011ac:	6839      	ldr	r1, [r7, #0]
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f000 fa14 	bl	80015dc <set_accel_no_motion_int>
 80011b4:	4603      	mov	r3, r0
 80011b6:	73fb      	strb	r3, [r7, #15]
            break;
 80011b8:	e046      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_DOUBLE_TAP_INT:
        case BMI160_ACC_SINGLE_TAP_INT:

            /* Double tap and single tap Interrupt */
            rslt = set_accel_tap_int(int_config, dev);
 80011ba:	6839      	ldr	r1, [r7, #0]
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f000 f973 	bl	80014a8 <set_accel_tap_int>
 80011c2:	4603      	mov	r3, r0
 80011c4:	73fb      	strb	r3, [r7, #15]
            break;
 80011c6:	e03f      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_STEP_DETECT_INT:

            /* Step detector interrupt */
            rslt = set_accel_step_detect_int(int_config, dev);
 80011c8:	6839      	ldr	r1, [r7, #0]
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f000 fa34 	bl	8001638 <set_accel_step_detect_int>
 80011d0:	4603      	mov	r3, r0
 80011d2:	73fb      	strb	r3, [r7, #15]
            break;
 80011d4:	e038      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_ORIENT_INT:

            /* Orientation interrupt */
            rslt = set_accel_orientation_int(int_config, dev);
 80011d6:	6839      	ldr	r1, [r7, #0]
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f000 fa6e 	bl	80016ba <set_accel_orientation_int>
 80011de:	4603      	mov	r3, r0
 80011e0:	73fb      	strb	r3, [r7, #15]
            break;
 80011e2:	e031      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_FLAT_INT:

            /* Flat detection interrupt */
            rslt = set_accel_flat_detect_int(int_config, dev);
 80011e4:	6839      	ldr	r1, [r7, #0]
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f000 faa8 	bl	800173c <set_accel_flat_detect_int>
 80011ec:	4603      	mov	r3, r0
 80011ee:	73fb      	strb	r3, [r7, #15]
            break;
 80011f0:	e02a      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_LOW_G_INT:

            /* Low-g interrupt */
            rslt = set_accel_low_g_int(int_config, dev);
 80011f2:	6839      	ldr	r1, [r7, #0]
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f000 fae2 	bl	80017be <set_accel_low_g_int>
 80011fa:	4603      	mov	r3, r0
 80011fc:	73fb      	strb	r3, [r7, #15]
            break;
 80011fe:	e023      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_HIGH_G_INT:

            /* High-g interrupt */
            rslt = set_accel_high_g_int(int_config, dev);
 8001200:	6839      	ldr	r1, [r7, #0]
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f000 fb26 	bl	8001854 <set_accel_high_g_int>
 8001208:	4603      	mov	r3, r0
 800120a:	73fb      	strb	r3, [r7, #15]
            break;
 800120c:	e01c      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_DATA_RDY_INT:

            /* Data ready interrupt */
            rslt = set_accel_gyro_data_ready_int(int_config, dev);
 800120e:	6839      	ldr	r1, [r7, #0]
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f000 f982 	bl	800151a <set_accel_gyro_data_ready_int>
 8001216:	4603      	mov	r3, r0
 8001218:	73fb      	strb	r3, [r7, #15]
            break;
 800121a:	e015      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_FIFO_FULL_INT:

            /* Fifo full interrupt */
            rslt = set_fifo_full_int(int_config, dev);
 800121c:	6839      	ldr	r1, [r7, #0]
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f002 fa00 	bl	8003624 <set_fifo_full_int>
 8001224:	4603      	mov	r3, r0
 8001226:	73fb      	strb	r3, [r7, #15]
            break;
 8001228:	e00e      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_FIFO_WATERMARK_INT:

            /* Fifo water-mark interrupt */
            rslt = set_fifo_watermark_int(int_config, dev);
 800122a:	6839      	ldr	r1, [r7, #0]
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f002 fa60 	bl	80036f2 <set_fifo_watermark_int>
 8001232:	4603      	mov	r3, r0
 8001234:	73fb      	strb	r3, [r7, #15]
            break;
 8001236:	e007      	b.n	8001248 <bmi160_set_int_config+0x10c>
        case BMI160_FIFO_TAG_INT_PIN:

            /* Fifo tagging feature support */
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8001238:	6839      	ldr	r1, [r7, #0]
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f000 fb55 	bl	80018ea <set_intr_pin_config>
 8001240:	4603      	mov	r3, r0
 8001242:	73fb      	strb	r3, [r7, #15]
            break;
 8001244:	e000      	b.n	8001248 <bmi160_set_int_config+0x10c>
        default:
            break;
 8001246:	bf00      	nop
    }

    return rslt;
 8001248:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <bmi160_start_foc>:
 *  Gyro FOC always targets value of 0 dps
 */
int8_t bmi160_start_foc(const struct bmi160_foc_conf *foc_conf,
                        struct bmi160_offsets *offset,
                        struct bmi160_dev const *dev)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f000 fb5d 	bl	8001920 <null_ptr_check>
 8001266:	4603      	mov	r3, r0
 8001268:	75fb      	strb	r3, [r7, #23]
    if (rslt != BMI160_OK)
 800126a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d002      	beq.n	8001278 <bmi160_start_foc+0x24>
    {
        rslt = BMI160_E_NULL_PTR;
 8001272:	23ff      	movs	r3, #255	@ 0xff
 8001274:	75fb      	strb	r3, [r7, #23]
 8001276:	e068      	b.n	800134a <bmi160_start_foc+0xf6>
    }
    else
    {
        /* Set the offset enable bits */
        rslt = configure_offset_enable(foc_conf, dev);
 8001278:	6879      	ldr	r1, [r7, #4]
 800127a:	68f8      	ldr	r0, [r7, #12]
 800127c:	f002 fac0 	bl	8003800 <configure_offset_enable>
 8001280:	4603      	mov	r3, r0
 8001282:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8001284:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d15e      	bne.n	800134a <bmi160_start_foc+0xf6>
        {
            /* Read the FOC config from the sensor */
            rslt = bmi160_get_regs(BMI160_FOC_CONF_ADDR, &data, 1, dev);
 800128c:	f107 0116 	add.w	r1, r7, #22
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2201      	movs	r2, #1
 8001294:	2069      	movs	r0, #105	@ 0x69
 8001296:	f7ff fdd7 	bl	8000e48 <bmi160_get_regs>
 800129a:	4603      	mov	r3, r0
 800129c:	75fb      	strb	r3, [r7, #23]

            /* Set the FOC config for gyro */
            data = BMI160_SET_BITS(data, BMI160_GYRO_FOC_EN, foc_conf->foc_gyr_en);
 800129e:	7dbb      	ldrb	r3, [r7, #22]
 80012a0:	b25b      	sxtb	r3, r3
 80012a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80012a6:	b25a      	sxtb	r2, r3
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	019b      	lsls	r3, r3, #6
 80012ae:	b25b      	sxtb	r3, r3
 80012b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012b4:	b25b      	sxtb	r3, r3
 80012b6:	4313      	orrs	r3, r2
 80012b8:	b25b      	sxtb	r3, r3
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	75bb      	strb	r3, [r7, #22]

            /* Set the FOC config for accel xyz axes */
            data = BMI160_SET_BITS(data, BMI160_ACCEL_FOC_X_CONF, foc_conf->foc_acc_x);
 80012be:	7dbb      	ldrb	r3, [r7, #22]
 80012c0:	b25b      	sxtb	r3, r3
 80012c2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80012c6:	b25a      	sxtb	r2, r3
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	785b      	ldrb	r3, [r3, #1]
 80012cc:	011b      	lsls	r3, r3, #4
 80012ce:	b25b      	sxtb	r3, r3
 80012d0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80012d4:	b25b      	sxtb	r3, r3
 80012d6:	4313      	orrs	r3, r2
 80012d8:	b25b      	sxtb	r3, r3
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	75bb      	strb	r3, [r7, #22]
            data = BMI160_SET_BITS(data, BMI160_ACCEL_FOC_Y_CONF, foc_conf->foc_acc_y);
 80012de:	7dbb      	ldrb	r3, [r7, #22]
 80012e0:	b25b      	sxtb	r3, r3
 80012e2:	f023 030c 	bic.w	r3, r3, #12
 80012e6:	b25a      	sxtb	r2, r3
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	789b      	ldrb	r3, [r3, #2]
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	b25b      	sxtb	r3, r3
 80012f0:	f003 030c 	and.w	r3, r3, #12
 80012f4:	b25b      	sxtb	r3, r3
 80012f6:	4313      	orrs	r3, r2
 80012f8:	b25b      	sxtb	r3, r3
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	75bb      	strb	r3, [r7, #22]
            data = BMI160_SET_BITS_POS_0(data, BMI160_ACCEL_FOC_Z_CONF, foc_conf->foc_acc_z);
 80012fe:	7dbb      	ldrb	r3, [r7, #22]
 8001300:	b25b      	sxtb	r3, r3
 8001302:	f023 0303 	bic.w	r3, r3, #3
 8001306:	b25a      	sxtb	r2, r3
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	78db      	ldrb	r3, [r3, #3]
 800130c:	b25b      	sxtb	r3, r3
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	b25b      	sxtb	r3, r3
 8001314:	4313      	orrs	r3, r2
 8001316:	b25b      	sxtb	r3, r3
 8001318:	b2db      	uxtb	r3, r3
 800131a:	75bb      	strb	r3, [r7, #22]
            if (rslt == BMI160_OK)
 800131c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d112      	bne.n	800134a <bmi160_start_foc+0xf6>
            {
                /* Set the FOC config in the sensor */
                rslt = bmi160_set_regs(BMI160_FOC_CONF_ADDR, &data, 1, dev);
 8001324:	f107 0116 	add.w	r1, r7, #22
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2201      	movs	r2, #1
 800132c:	2069      	movs	r0, #105	@ 0x69
 800132e:	f7ff fdbe 	bl	8000eae <bmi160_set_regs>
 8001332:	4603      	mov	r3, r0
 8001334:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMI160_OK)
 8001336:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d105      	bne.n	800134a <bmi160_start_foc+0xf6>
                {
                    /* Procedure to trigger
                     * FOC and check status */
                    rslt = trigger_foc(offset, dev);
 800133e:	6879      	ldr	r1, [r7, #4]
 8001340:	68b8      	ldr	r0, [r7, #8]
 8001342:	f002 faa7 	bl	8003894 <trigger_foc>
 8001346:	4603      	mov	r3, r0
 8001348:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    }

    return rslt;
 800134a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800134e:	4618      	mov	r0, r3
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}

08001356 <bmi160_get_offsets>:

/*!
 *  @brief This API reads and stores the offset values of accel and gyro
 */
int8_t bmi160_get_offsets(struct bmi160_offsets *offset, const struct bmi160_dev *dev)
{
 8001356:	b580      	push	{r7, lr}
 8001358:	b088      	sub	sp, #32
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	6039      	str	r1, [r7, #0]
    uint8_t lsb, msb;
    int16_t offset_msb, offset_lsb;
    int16_t offset_data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001360:	6838      	ldr	r0, [r7, #0]
 8001362:	f000 fadd 	bl	8001920 <null_ptr_check>
 8001366:	4603      	mov	r3, r0
 8001368:	77fb      	strb	r3, [r7, #31]
    if (rslt != BMI160_OK)
 800136a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d002      	beq.n	8001378 <bmi160_get_offsets+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8001372:	23ff      	movs	r3, #255	@ 0xff
 8001374:	77fb      	strb	r3, [r7, #31]
 8001376:	e063      	b.n	8001440 <bmi160_get_offsets+0xea>
    }
    else
    {
        /* Read the FOC config from the sensor */
        rslt = bmi160_get_regs(BMI160_OFFSET_ADDR, data, 7, dev);
 8001378:	f107 010c 	add.w	r1, r7, #12
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	2207      	movs	r2, #7
 8001380:	2071      	movs	r0, #113	@ 0x71
 8001382:	f7ff fd61 	bl	8000e48 <bmi160_get_regs>
 8001386:	4603      	mov	r3, r0
 8001388:	77fb      	strb	r3, [r7, #31]

        /* Accel offsets */
        offset->off_acc_x = (int8_t)data[0];
 800138a:	7b3b      	ldrb	r3, [r7, #12]
 800138c:	b25a      	sxtb	r2, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	701a      	strb	r2, [r3, #0]
        offset->off_acc_y = (int8_t)data[1];
 8001392:	7b7b      	ldrb	r3, [r7, #13]
 8001394:	b25a      	sxtb	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	705a      	strb	r2, [r3, #1]
        offset->off_acc_z = (int8_t)data[2];
 800139a:	7bbb      	ldrb	r3, [r7, #14]
 800139c:	b25a      	sxtb	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	709a      	strb	r2, [r3, #2]

        /* Gyro x-axis offset */
        lsb = data[3];
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS_POS_0(data[6], BMI160_GYRO_OFFSET_X);
 80013a6:	7cbb      	ldrb	r3, [r7, #18]
 80013a8:	f003 0303 	and.w	r3, r3, #3
 80013ac:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 80013ae:	7f7b      	ldrb	r3, [r7, #29]
 80013b0:	039b      	lsls	r3, r3, #14
 80013b2:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 80013b4:	7fbb      	ldrb	r3, [r7, #30]
 80013b6:	019b      	lsls	r3, r3, #6
 80013b8:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 80013ba:	8b7a      	ldrh	r2, [r7, #26]
 80013bc:	8b3b      	ldrh	r3, [r7, #24]
 80013be:	4313      	orrs	r3, r2
 80013c0:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_x = (int16_t)(offset_data / 64);
 80013c2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	da00      	bge.n	80013cc <bmi160_get_offsets+0x76>
 80013ca:	333f      	adds	r3, #63	@ 0x3f
 80013cc:	119b      	asrs	r3, r3, #6
 80013ce:	b21a      	sxth	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	809a      	strh	r2, [r3, #4]

        /* Gyro y-axis offset */
        lsb = data[4];
 80013d4:	7c3b      	ldrb	r3, [r7, #16]
 80013d6:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Y);
 80013d8:	7cbb      	ldrb	r3, [r7, #18]
 80013da:	109b      	asrs	r3, r3, #2
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	f003 0303 	and.w	r3, r3, #3
 80013e2:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 80013e4:	7f7b      	ldrb	r3, [r7, #29]
 80013e6:	039b      	lsls	r3, r3, #14
 80013e8:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 80013ea:	7fbb      	ldrb	r3, [r7, #30]
 80013ec:	019b      	lsls	r3, r3, #6
 80013ee:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 80013f0:	8b7a      	ldrh	r2, [r7, #26]
 80013f2:	8b3b      	ldrh	r3, [r7, #24]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_y = (int16_t)(offset_data / 64);
 80013f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	da00      	bge.n	8001402 <bmi160_get_offsets+0xac>
 8001400:	333f      	adds	r3, #63	@ 0x3f
 8001402:	119b      	asrs	r3, r3, #6
 8001404:	b21a      	sxth	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	80da      	strh	r2, [r3, #6]

        /* Gyro z-axis offset */
        lsb = data[5];
 800140a:	7c7b      	ldrb	r3, [r7, #17]
 800140c:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Z);
 800140e:	7cbb      	ldrb	r3, [r7, #18]
 8001410:	111b      	asrs	r3, r3, #4
 8001412:	b2db      	uxtb	r3, r3
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 800141a:	7f7b      	ldrb	r3, [r7, #29]
 800141c:	039b      	lsls	r3, r3, #14
 800141e:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 8001420:	7fbb      	ldrb	r3, [r7, #30]
 8001422:	019b      	lsls	r3, r3, #6
 8001424:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 8001426:	8b7a      	ldrh	r2, [r7, #26]
 8001428:	8b3b      	ldrh	r3, [r7, #24]
 800142a:	4313      	orrs	r3, r2
 800142c:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_z = (int16_t)(offset_data / 64);
 800142e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001432:	2b00      	cmp	r3, #0
 8001434:	da00      	bge.n	8001438 <bmi160_get_offsets+0xe2>
 8001436:	333f      	adds	r3, #63	@ 0x3f
 8001438:	119b      	asrs	r3, r3, #6
 800143a:	b21a      	sxth	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	811a      	strh	r2, [r3, #8]
    }

    return rslt;
 8001440:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001444:	4618      	mov	r0, r3
 8001446:	3720      	adds	r7, #32
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <set_accel_any_motion_int>:
 * @brief This API sets the any-motion interrupt of the sensor.
 * This interrupt occurs when accel values exceeds preset threshold
 * for a certain period of time.
 */
static int8_t set_accel_any_motion_int(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001456:	6838      	ldr	r0, [r7, #0]
 8001458:	f000 fa62 	bl	8001920 <null_ptr_check>
 800145c:	4603      	mov	r3, r0
 800145e:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8001460:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d102      	bne.n	800146e <set_accel_any_motion_int+0x22>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d102      	bne.n	8001474 <set_accel_any_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 800146e:	23ff      	movs	r3, #255	@ 0xff
 8001470:	73fb      	strb	r3, [r7, #15]
 8001472:	e013      	b.n	800149c <set_accel_any_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg = &(int_config->int_type_cfg.acc_any_motion_int);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3304      	adds	r3, #4
 8001478:	60bb      	str	r3, [r7, #8]
        rslt = enable_accel_any_motion_int(any_motion_int_cfg, dev);
 800147a:	6839      	ldr	r1, [r7, #0]
 800147c:	68b8      	ldr	r0, [r7, #8]
 800147e:	f000 fdc1 	bl	8002004 <enable_accel_any_motion_int>
 8001482:	4603      	mov	r3, r0
 8001484:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d106      	bne.n	800149c <set_accel_any_motion_int+0x50>
        {
            rslt = config_any_motion_int_settg(int_config, any_motion_int_cfg, dev);
 800148e:	683a      	ldr	r2, [r7, #0]
 8001490:	68b9      	ldr	r1, [r7, #8]
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 ffef 	bl	8002476 <config_any_motion_int_settg>
 8001498:	4603      	mov	r3, r0
 800149a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800149c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <set_accel_tap_int>:
/*!
 * @brief This API sets tap interrupts.Interrupt is fired when
 * tap movements happen.
 */
static int8_t set_accel_tap_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80014b2:	6838      	ldr	r0, [r7, #0]
 80014b4:	f000 fa34 	bl	8001920 <null_ptr_check>
 80014b8:	4603      	mov	r3, r0
 80014ba:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80014bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d102      	bne.n	80014ca <set_accel_tap_int+0x22>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d102      	bne.n	80014d0 <set_accel_tap_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80014ca:	23ff      	movs	r3, #255	@ 0xff
 80014cc:	73fb      	strb	r3, [r7, #15]
 80014ce:	e01e      	b.n	800150e <set_accel_tap_int+0x66>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_tap_int_cfg *tap_int_cfg = &(int_config->int_type_cfg.acc_tap_int);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	3304      	adds	r3, #4
 80014d4:	60bb      	str	r3, [r7, #8]
        rslt = enable_tap_int(int_config, tap_int_cfg, dev);
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	68b9      	ldr	r1, [r7, #8]
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f001 fb29 	bl	8002b32 <enable_tap_int>
 80014e0:	4603      	mov	r3, r0
 80014e2:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80014e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d110      	bne.n	800150e <set_accel_tap_int+0x66>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 80014ec:	6839      	ldr	r1, [r7, #0]
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 f9fb 	bl	80018ea <set_intr_pin_config>
 80014f4:	4603      	mov	r3, r0
 80014f6:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80014f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d106      	bne.n	800150e <set_accel_tap_int+0x66>
            {
                rslt = config_tap_int_settg(int_config, tap_int_cfg, dev);
 8001500:	683a      	ldr	r2, [r7, #0]
 8001502:	68b9      	ldr	r1, [r7, #8]
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f001 fb67 	bl	8002bd8 <config_tap_int_settg>
 800150a:	4603      	mov	r3, r0
 800150c:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800150e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001512:	4618      	mov	r0, r3
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <set_accel_gyro_data_ready_int>:
/*!
 * @brief This API sets the data ready interrupt for both accel and gyro.
 * This interrupt occurs when new accel and gyro data comes.
 */
static int8_t set_accel_gyro_data_ready_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001524:	6838      	ldr	r0, [r7, #0]
 8001526:	f000 f9fb 	bl	8001920 <null_ptr_check>
 800152a:	4603      	mov	r3, r0
 800152c:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 800152e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d102      	bne.n	800153c <set_accel_gyro_data_ready_int+0x22>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d102      	bne.n	8001542 <set_accel_gyro_data_ready_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 800153c:	23ff      	movs	r3, #255	@ 0xff
 800153e:	73fb      	strb	r3, [r7, #15]
 8001540:	e018      	b.n	8001574 <set_accel_gyro_data_ready_int+0x5a>
    }
    else
    {
        rslt = enable_data_ready_int(dev);
 8001542:	6838      	ldr	r0, [r7, #0]
 8001544:	f000 ffd0 	bl	80024e8 <enable_data_ready_int>
 8001548:	4603      	mov	r3, r0
 800154a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800154c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d10f      	bne.n	8001574 <set_accel_gyro_data_ready_int+0x5a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8001554:	6839      	ldr	r1, [r7, #0]
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f000 f9c7 	bl	80018ea <set_intr_pin_config>
 800155c:	4603      	mov	r3, r0
 800155e:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001560:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d105      	bne.n	8001574 <set_accel_gyro_data_ready_int+0x5a>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 8001568:	6839      	ldr	r1, [r7, #0]
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 fe84 	bl	8002278 <map_hardware_interrupt>
 8001570:	4603      	mov	r3, r0
 8001572:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001574:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <set_accel_sig_motion_int>:
/*!
 * @brief This API sets the significant motion interrupt of the sensor.This
 * interrupt occurs when there is change in user location.
 */
static int8_t set_accel_sig_motion_int(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800158a:	6838      	ldr	r0, [r7, #0]
 800158c:	f000 f9c8 	bl	8001920 <null_ptr_check>
 8001590:	4603      	mov	r3, r0
 8001592:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8001594:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d102      	bne.n	80015a2 <set_accel_sig_motion_int+0x22>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d102      	bne.n	80015a8 <set_accel_sig_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80015a2:	23ff      	movs	r3, #255	@ 0xff
 80015a4:	73fb      	strb	r3, [r7, #15]
 80015a6:	e013      	b.n	80015d0 <set_accel_sig_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg = &(int_config->int_type_cfg.acc_sig_motion_int);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3304      	adds	r3, #4
 80015ac:	60bb      	str	r3, [r7, #8]
        rslt = enable_sig_motion_int(sig_mot_int_cfg, dev);
 80015ae:	6839      	ldr	r1, [r7, #0]
 80015b0:	68b8      	ldr	r0, [r7, #8]
 80015b2:	f001 f8ef 	bl	8002794 <enable_sig_motion_int>
 80015b6:	4603      	mov	r3, r0
 80015b8:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80015ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d106      	bne.n	80015d0 <set_accel_sig_motion_int+0x50>
        {
            rslt = config_sig_motion_int_settg(int_config, sig_mot_int_cfg, dev);
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	68b9      	ldr	r1, [r7, #8]
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f001 f925 	bl	8002816 <config_sig_motion_int_settg>
 80015cc:	4603      	mov	r3, r0
 80015ce:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80015d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3710      	adds	r7, #16
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <set_accel_no_motion_int>:
 * Slow motion is similar to any motion interrupt.No motion interrupt
 * occurs when slope bet. two accel values falls below preset threshold
 * for preset duration.
 */
static int8_t set_accel_no_motion_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80015e6:	6838      	ldr	r0, [r7, #0]
 80015e8:	f000 f99a 	bl	8001920 <null_ptr_check>
 80015ec:	4603      	mov	r3, r0
 80015ee:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80015f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d102      	bne.n	80015fe <set_accel_no_motion_int+0x22>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d102      	bne.n	8001604 <set_accel_no_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80015fe:	23ff      	movs	r3, #255	@ 0xff
 8001600:	73fb      	strb	r3, [r7, #15]
 8001602:	e013      	b.n	800162c <set_accel_no_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg = &(int_config->int_type_cfg.acc_no_motion_int);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	3304      	adds	r3, #4
 8001608:	60bb      	str	r3, [r7, #8]
        rslt = enable_no_motion_int(no_mot_int_cfg, dev);
 800160a:	6839      	ldr	r1, [r7, #0]
 800160c:	68b8      	ldr	r0, [r7, #8]
 800160e:	f000 ff98 	bl	8002542 <enable_no_motion_int>
 8001612:	4603      	mov	r3, r0
 8001614:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d106      	bne.n	800162c <set_accel_no_motion_int+0x50>
        {
            /* Configure the INT PIN settings*/
            rslt = config_no_motion_int_settg(int_config, no_mot_int_cfg, dev);
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	68b9      	ldr	r1, [r7, #8]
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f000 ffe2 	bl	80025ec <config_no_motion_int_settg>
 8001628:	4603      	mov	r3, r0
 800162a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800162c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <set_accel_step_detect_int>:
 * @brief This API sets the step detection interrupt.This interrupt
 * occurs when the single step causes accel values to go above
 * preset threshold.
 */
static int8_t set_accel_step_detect_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001642:	6838      	ldr	r0, [r7, #0]
 8001644:	f000 f96c 	bl	8001920 <null_ptr_check>
 8001648:	4603      	mov	r3, r0
 800164a:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 800164c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d102      	bne.n	800165a <set_accel_step_detect_int+0x22>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d102      	bne.n	8001660 <set_accel_step_detect_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 800165a:	23ff      	movs	r3, #255	@ 0xff
 800165c:	73fb      	strb	r3, [r7, #15]
 800165e:	e026      	b.n	80016ae <set_accel_step_detect_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg = &(int_config->int_type_cfg.acc_step_detect_int);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3304      	adds	r3, #4
 8001664:	60bb      	str	r3, [r7, #8]
        rslt = enable_step_detect_int(step_detect_int_cfg, dev);
 8001666:	6839      	ldr	r1, [r7, #0]
 8001668:	68b8      	ldr	r0, [r7, #8]
 800166a:	f001 f9a9 	bl	80029c0 <enable_step_detect_int>
 800166e:	4603      	mov	r3, r0
 8001670:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d119      	bne.n	80016ae <set_accel_step_detect_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 800167a:	6839      	ldr	r1, [r7, #0]
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f000 f934 	bl	80018ea <set_intr_pin_config>
 8001682:	4603      	mov	r3, r0
 8001684:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10f      	bne.n	80016ae <set_accel_step_detect_int+0x76>
            {
                rslt = map_feature_interrupt(int_config, dev);
 800168e:	6839      	ldr	r1, [r7, #0]
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f000 fd57 	bl	8002144 <map_feature_interrupt>
 8001696:	4603      	mov	r3, r0
 8001698:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 800169a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d105      	bne.n	80016ae <set_accel_step_detect_int+0x76>
                {
                    rslt = config_step_detect(step_detect_int_cfg, dev);
 80016a2:	6839      	ldr	r1, [r7, #0]
 80016a4:	68b8      	ldr	r0, [r7, #8]
 80016a6:	f001 f9c4 	bl	8002a32 <config_step_detect>
 80016aa:	4603      	mov	r3, r0
 80016ac:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80016ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3710      	adds	r7, #16
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <set_accel_orientation_int>:
 * @brief This API sets the orientation interrupt of the sensor.This
 * interrupt occurs when there is orientation change in the sensor
 * with respect to gravitational field vector g.
 */
static int8_t set_accel_orientation_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b084      	sub	sp, #16
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
 80016c2:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80016c4:	6838      	ldr	r0, [r7, #0]
 80016c6:	f000 f92b 	bl	8001920 <null_ptr_check>
 80016ca:	4603      	mov	r3, r0
 80016cc:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80016ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d102      	bne.n	80016dc <set_accel_orientation_int+0x22>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d102      	bne.n	80016e2 <set_accel_orientation_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80016dc:	23ff      	movs	r3, #255	@ 0xff
 80016de:	73fb      	strb	r3, [r7, #15]
 80016e0:	e026      	b.n	8001730 <set_accel_orientation_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_orient_int_cfg *orient_int_cfg = &(int_config->int_type_cfg.acc_orient_int);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3304      	adds	r3, #4
 80016e6:	60bb      	str	r3, [r7, #8]
        rslt = enable_orient_int(orient_int_cfg, dev);
 80016e8:	6839      	ldr	r1, [r7, #0]
 80016ea:	68b8      	ldr	r0, [r7, #8]
 80016ec:	f001 fb78 	bl	8002de0 <enable_orient_int>
 80016f0:	4603      	mov	r3, r0
 80016f2:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80016f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d119      	bne.n	8001730 <set_accel_orientation_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 80016fc:	6839      	ldr	r1, [r7, #0]
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f000 f8f3 	bl	80018ea <set_intr_pin_config>
 8001704:	4603      	mov	r3, r0
 8001706:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001708:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d10f      	bne.n	8001730 <set_accel_orientation_int+0x76>
            {
                /* map INT pin to orient interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 8001710:	6839      	ldr	r1, [r7, #0]
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 fd16 	bl	8002144 <map_feature_interrupt>
 8001718:	4603      	mov	r3, r0
 800171a:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 800171c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d105      	bne.n	8001730 <set_accel_orientation_int+0x76>
                {
                    /* configure the
                     * orientation setting*/
                    rslt = config_orient_int_settg(orient_int_cfg, dev);
 8001724:	6839      	ldr	r1, [r7, #0]
 8001726:	68b8      	ldr	r0, [r7, #8]
 8001728:	f001 fb93 	bl	8002e52 <config_orient_int_settg>
 800172c:	4603      	mov	r3, r0
 800172e:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001730:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <set_accel_flat_detect_int>:
/*!
 * @brief This API sets the flat interrupt of the sensor.This interrupt
 * occurs in case of flat orientation
 */
static int8_t set_accel_flat_detect_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001746:	6838      	ldr	r0, [r7, #0]
 8001748:	f000 f8ea 	bl	8001920 <null_ptr_check>
 800174c:	4603      	mov	r3, r0
 800174e:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8001750:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d102      	bne.n	800175e <set_accel_flat_detect_int+0x22>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d102      	bne.n	8001764 <set_accel_flat_detect_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 800175e:	23ff      	movs	r3, #255	@ 0xff
 8001760:	73fb      	strb	r3, [r7, #15]
 8001762:	e026      	b.n	80017b2 <set_accel_flat_detect_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_flat_detect_int_cfg *flat_detect_int = &(int_config->int_type_cfg.acc_flat_int);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3304      	adds	r3, #4
 8001768:	60bb      	str	r3, [r7, #8]

        /* enable the flat interrupt */
        rslt = enable_flat_int(flat_detect_int, dev);
 800176a:	6839      	ldr	r1, [r7, #0]
 800176c:	68b8      	ldr	r0, [r7, #8]
 800176e:	f001 fbff 	bl	8002f70 <enable_flat_int>
 8001772:	4603      	mov	r3, r0
 8001774:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001776:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d119      	bne.n	80017b2 <set_accel_flat_detect_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 800177e:	6839      	ldr	r1, [r7, #0]
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f000 f8b2 	bl	80018ea <set_intr_pin_config>
 8001786:	4603      	mov	r3, r0
 8001788:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800178a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d10f      	bne.n	80017b2 <set_accel_flat_detect_int+0x76>
            {
                /* map INT pin to flat interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 8001792:	6839      	ldr	r1, [r7, #0]
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f000 fcd5 	bl	8002144 <map_feature_interrupt>
 800179a:	4603      	mov	r3, r0
 800179c:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 800179e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d105      	bne.n	80017b2 <set_accel_flat_detect_int+0x76>
                {
                    /* configure the flat setting*/
                    rslt = config_flat_int_settg(flat_detect_int, dev);
 80017a6:	6839      	ldr	r1, [r7, #0]
 80017a8:	68b8      	ldr	r0, [r7, #8]
 80017aa:	f001 fc17 	bl	8002fdc <config_flat_int_settg>
 80017ae:	4603      	mov	r3, r0
 80017b0:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80017b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}

080017be <set_accel_low_g_int>:
/*!
 * @brief This API sets the low-g interrupt of the sensor.This interrupt
 * occurs during free-fall.
 */
static int8_t set_accel_low_g_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b084      	sub	sp, #16
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80017c8:	6838      	ldr	r0, [r7, #0]
 80017ca:	f000 f8a9 	bl	8001920 <null_ptr_check>
 80017ce:	4603      	mov	r3, r0
 80017d0:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80017d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d102      	bne.n	80017e0 <set_accel_low_g_int+0x22>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d102      	bne.n	80017e6 <set_accel_low_g_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80017e0:	23ff      	movs	r3, #255	@ 0xff
 80017e2:	73fb      	strb	r3, [r7, #15]
 80017e4:	e030      	b.n	8001848 <set_accel_low_g_int+0x8a>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_low_g_int_cfg *low_g_int = &(int_config->int_type_cfg.acc_low_g_int);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	3304      	adds	r3, #4
 80017ea:	60bb      	str	r3, [r7, #8]

        /* Enable the low-g interrupt*/
        rslt = enable_low_g_int(low_g_int, dev);
 80017ec:	6839      	ldr	r1, [r7, #0]
 80017ee:	68b8      	ldr	r0, [r7, #8]
 80017f0:	f001 fc50 	bl	8003094 <enable_low_g_int>
 80017f4:	4603      	mov	r3, r0
 80017f6:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80017f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d123      	bne.n	8001848 <set_accel_low_g_int+0x8a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8001800:	6839      	ldr	r1, [r7, #0]
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f000 f871 	bl	80018ea <set_intr_pin_config>
 8001808:	4603      	mov	r3, r0
 800180a:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800180c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d119      	bne.n	8001848 <set_accel_low_g_int+0x8a>
            {
                /* Map INT pin to low-g interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 8001814:	6839      	ldr	r1, [r7, #0]
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 fc94 	bl	8002144 <map_feature_interrupt>
 800181c:	4603      	mov	r3, r0
 800181e:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8001820:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d10f      	bne.n	8001848 <set_accel_low_g_int+0x8a>
                {
                    /* configure the data source
                     * for low-g interrupt*/
                    rslt = config_low_g_data_src(low_g_int, dev);
 8001828:	6839      	ldr	r1, [r7, #0]
 800182a:	68b8      	ldr	r0, [r7, #8]
 800182c:	f001 fc6b 	bl	8003106 <config_low_g_data_src>
 8001830:	4603      	mov	r3, r0
 8001832:	73fb      	strb	r3, [r7, #15]
                    if (rslt == BMI160_OK)
 8001834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d105      	bne.n	8001848 <set_accel_low_g_int+0x8a>
                    {
                        rslt = config_low_g_int_settg(low_g_int, dev);
 800183c:	6839      	ldr	r1, [r7, #0]
 800183e:	68b8      	ldr	r0, [r7, #8]
 8001840:	f001 fc98 	bl	8003174 <config_low_g_int_settg>
 8001844:	4603      	mov	r3, r0
 8001846:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001848:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <set_accel_high_g_int>:
 * occurs if the absolute value of acceleration data of any enabled axis
 * exceeds the programmed threshold and the sign of the value does not
 * change for a preset duration.
 */
static int8_t set_accel_high_g_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800185e:	6838      	ldr	r0, [r7, #0]
 8001860:	f000 f85e 	bl	8001920 <null_ptr_check>
 8001864:	4603      	mov	r3, r0
 8001866:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8001868:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d102      	bne.n	8001876 <set_accel_high_g_int+0x22>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d102      	bne.n	800187c <set_accel_high_g_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8001876:	23ff      	movs	r3, #255	@ 0xff
 8001878:	73fb      	strb	r3, [r7, #15]
 800187a:	e030      	b.n	80018de <set_accel_high_g_int+0x8a>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_high_g_int_cfg *high_g_int_cfg = &(int_config->int_type_cfg.acc_high_g_int);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3304      	adds	r3, #4
 8001880:	60bb      	str	r3, [r7, #8]

        /* Enable the high-g interrupt */
        rslt = enable_high_g_int(high_g_int_cfg, dev);
 8001882:	6839      	ldr	r1, [r7, #0]
 8001884:	68b8      	ldr	r0, [r7, #8]
 8001886:	f001 fccd 	bl	8003224 <enable_high_g_int>
 800188a:	4603      	mov	r3, r0
 800188c:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800188e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d123      	bne.n	80018de <set_accel_high_g_int+0x8a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8001896:	6839      	ldr	r1, [r7, #0]
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f000 f826 	bl	80018ea <set_intr_pin_config>
 800189e:	4603      	mov	r3, r0
 80018a0:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80018a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d119      	bne.n	80018de <set_accel_high_g_int+0x8a>
            {
                /* Map INT pin to high-g interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 80018aa:	6839      	ldr	r1, [r7, #0]
 80018ac:	6878      	ldr	r0, [r7, #4]
 80018ae:	f000 fc49 	bl	8002144 <map_feature_interrupt>
 80018b2:	4603      	mov	r3, r0
 80018b4:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 80018b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10f      	bne.n	80018de <set_accel_high_g_int+0x8a>
                {
                    /* configure the data source
                     * for high-g interrupt*/
                    rslt = config_high_g_data_src(high_g_int_cfg, dev);
 80018be:	6839      	ldr	r1, [r7, #0]
 80018c0:	68b8      	ldr	r0, [r7, #8]
 80018c2:	f001 fd0a 	bl	80032da <config_high_g_data_src>
 80018c6:	4603      	mov	r3, r0
 80018c8:	73fb      	strb	r3, [r7, #15]
                    if (rslt == BMI160_OK)
 80018ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d105      	bne.n	80018de <set_accel_high_g_int+0x8a>
                    {
                        rslt = config_high_g_int_settg(high_g_int_cfg, dev);
 80018d2:	6839      	ldr	r1, [r7, #0]
 80018d4:	68b8      	ldr	r0, [r7, #8]
 80018d6:	f001 fd37 	bl	8003348 <config_high_g_int_settg>
 80018da:	4603      	mov	r3, r0
 80018dc:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80018de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <set_intr_pin_config>:
/*!
 * @brief This API configures the pins to fire the
 * interrupt signal when it occurs.
 */
static int8_t set_intr_pin_config(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b084      	sub	sp, #16
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
 80018f2:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* configure the behavioural settings of interrupt pin */
    rslt = config_int_out_ctrl(int_config, dev);
 80018f4:	6839      	ldr	r1, [r7, #0]
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f001 fd6c 	bl	80033d4 <config_int_out_ctrl>
 80018fc:	4603      	mov	r3, r0
 80018fe:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001900:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d105      	bne.n	8001914 <set_intr_pin_config+0x2a>
    {
        rslt = config_int_latch(int_config, dev);
 8001908:	6839      	ldr	r1, [r7, #0]
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f001 fe27 	bl	800355e <config_int_latch>
 8001910:	4603      	mov	r3, r0
 8001912:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001914:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3710      	adds	r7, #16
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi160_dev *dev)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00b      	beq.n	8001946 <null_ptr_check+0x26>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69db      	ldr	r3, [r3, #28]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d007      	beq.n	8001946 <null_ptr_check+0x26>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a1b      	ldr	r3, [r3, #32]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d003      	beq.n	8001946 <null_ptr_check+0x26>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001942:	2b00      	cmp	r3, #0
 8001944:	d102      	bne.n	800194c <null_ptr_check+0x2c>
    {
        rslt = BMI160_E_NULL_PTR;
 8001946:	23ff      	movs	r3, #255	@ 0xff
 8001948:	73fb      	strb	r3, [r7, #15]
 800194a:	e001      	b.n	8001950 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI160_OK;
 800194c:	2300      	movs	r3, #0
 800194e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001950:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <default_param_settg>:
/*!
 * @brief This API sets the default configuration parameters of accel & gyro.
 * Also maintain the previous state of configurations.
 */
static void default_param_settg(struct bmi160_dev *dev)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
    /* Initializing accel and gyro params with
     * default values */
    dev->accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2202      	movs	r2, #2
 800196c:	71da      	strb	r2, [r3, #7]
    dev->accel_cfg.odr = BMI160_ACCEL_ODR_100HZ;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2208      	movs	r2, #8
 8001972:	715a      	strb	r2, [r3, #5]
    dev->accel_cfg.power = BMI160_ACCEL_SUSPEND_MODE;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2210      	movs	r2, #16
 8001978:	711a      	strb	r2, [r3, #4]
    dev->accel_cfg.range = BMI160_ACCEL_RANGE_2G;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2203      	movs	r2, #3
 800197e:	719a      	strb	r2, [r3, #6]
    dev->gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2202      	movs	r2, #2
 8001984:	73da      	strb	r2, [r3, #15]
    dev->gyro_cfg.odr = BMI160_GYRO_ODR_100HZ;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2208      	movs	r2, #8
 800198a:	735a      	strb	r2, [r3, #13]
    dev->gyro_cfg.power = BMI160_GYRO_SUSPEND_MODE;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2214      	movs	r2, #20
 8001990:	731a      	strb	r2, [r3, #12]
    dev->gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	739a      	strb	r2, [r3, #14]

    /* To maintain the previous state of accel configuration */
    dev->prev_accel_cfg = dev->accel_cfg;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6852      	ldr	r2, [r2, #4]
 800199e:	609a      	str	r2, [r3, #8]

    /* To maintain the previous state of gyro configuration */
    dev->prev_gyro_cfg = dev->gyro_cfg;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68d2      	ldr	r2, [r2, #12]
 80019a6:	611a      	str	r2, [r3, #16]
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <set_accel_conf>:

/*!
 * @brief This API set the accel configuration.
 */
static int8_t set_accel_conf(struct bmi160_dev *dev)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 80019bc:	2300      	movs	r3, #0
 80019be:	81bb      	strh	r3, [r7, #12]

    rslt = check_accel_config(data, dev);
 80019c0:	f107 030c 	add.w	r3, r7, #12
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 f833 	bl	8001a32 <check_accel_config>
 80019cc:	4603      	mov	r3, r0
 80019ce:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80019d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d126      	bne.n	8001a26 <set_accel_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, &data[0], 1, dev);
 80019d8:	f107 010c 	add.w	r1, r7, #12
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	2040      	movs	r0, #64	@ 0x40
 80019e2:	f7ff fa64 	bl	8000eae <bmi160_set_regs>
 80019e6:	4603      	mov	r3, r0
 80019e8:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80019ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d119      	bne.n	8001a26 <set_accel_conf+0x72>
        {
            dev->prev_accel_cfg.odr = dev->accel_cfg.odr;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	795a      	ldrb	r2, [r3, #5]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	725a      	strb	r2, [r3, #9]
            dev->prev_accel_cfg.bw = dev->accel_cfg.bw;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	79da      	ldrb	r2, [r3, #7]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	72da      	strb	r2, [r3, #11]

            /* write accel range */
            rslt = bmi160_set_regs(BMI160_ACCEL_RANGE_ADDR, &data[1], 1, dev);
 8001a02:	f107 030c 	add.w	r3, r7, #12
 8001a06:	1c59      	adds	r1, r3, #1
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	2041      	movs	r0, #65	@ 0x41
 8001a0e:	f7ff fa4e 	bl	8000eae <bmi160_set_regs>
 8001a12:	4603      	mov	r3, r0
 8001a14:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d103      	bne.n	8001a26 <set_accel_conf+0x72>
            {
                dev->prev_accel_cfg.range = dev->accel_cfg.range;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	799a      	ldrb	r2, [r3, #6]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	729a      	strb	r2, [r3, #10]
            }
        }
    }

    return rslt;
 8001a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <check_accel_config>:

/*!
 * @brief This API check the accel configuration.
 */
static int8_t check_accel_config(uint8_t *data, const struct bmi160_dev *dev)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b084      	sub	sp, #16
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read accel Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 2, dev);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	2202      	movs	r2, #2
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	2040      	movs	r0, #64	@ 0x40
 8001a44:	f7ff fa00 	bl	8000e48 <bmi160_get_regs>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d11b      	bne.n	8001a8c <check_accel_config+0x5a>
    {
        rslt = process_accel_odr(&data[0], dev);
 8001a54:	6839      	ldr	r1, [r7, #0]
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 f81e 	bl	8001a98 <process_accel_odr>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001a60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d111      	bne.n	8001a8c <check_accel_config+0x5a>
        {
            rslt = process_accel_bw(&data[0], dev);
 8001a68:	6839      	ldr	r1, [r7, #0]
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 f848 	bl	8001b00 <process_accel_bw>
 8001a70:	4603      	mov	r3, r0
 8001a72:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001a74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d107      	bne.n	8001a8c <check_accel_config+0x5a>
            {
                rslt = process_accel_range(&data[1], dev);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	6839      	ldr	r1, [r7, #0]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 f871 	bl	8001b6a <process_accel_range>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3710      	adds	r7, #16
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}

08001a98 <process_accel_odr>:

/*!
 * @brief This API process the accel odr.
 */
static int8_t process_accel_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.odr <= BMI160_ACCEL_ODR_1600HZ)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	795b      	ldrb	r3, [r3, #5]
 8001ab2:	2b0c      	cmp	r3, #12
 8001ab4:	d81a      	bhi.n	8001aec <process_accel_odr+0x54>
    {
        if (dev->accel_cfg.odr != dev->prev_accel_cfg.odr)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	795a      	ldrb	r2, [r3, #5]
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	7a5b      	ldrb	r3, [r3, #9]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d016      	beq.n	8001af0 <process_accel_odr+0x58>
        {
            odr = (uint8_t)dev->accel_cfg.odr;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	795b      	ldrb	r3, [r3, #5]
 8001ac6:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_ODR_MASK;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	f023 030f 	bic.w	r3, r3, #15
 8001ad0:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_ACCEL_ODR_MASK);
 8001ad2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	b25a      	sxtb	r2, r3
 8001adc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	b25b      	sxtb	r3, r3
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	701a      	strb	r2, [r3, #0]
 8001aea:	e001      	b.n	8001af0 <process_accel_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001aec:	23fc      	movs	r3, #252	@ 0xfc
 8001aee:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3714      	adds	r7, #20
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <process_accel_bw>:

/*!
 * @brief This API process the accel bandwidth.
 */
static int8_t process_accel_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.bw <= BMI160_ACCEL_BW_RES_AVG128)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	79db      	ldrb	r3, [r3, #7]
 8001b1a:	2b07      	cmp	r3, #7
 8001b1c:	d81b      	bhi.n	8001b56 <process_accel_bw+0x56>
    {
        if (dev->accel_cfg.bw != dev->prev_accel_cfg.bw)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	79da      	ldrb	r2, [r3, #7]
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	7adb      	ldrb	r3, [r3, #11]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d017      	beq.n	8001b5a <process_accel_bw+0x5a>
        {
            bw = (uint8_t)dev->accel_cfg.bw;
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	79db      	ldrb	r3, [r3, #7]
 8001b2e:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_BW_MASK;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b38:	73bb      	strb	r3, [r7, #14]

            /* Adding bandwidth */
            *data = temp | ((bw << 4) & BMI160_ACCEL_BW_MASK);
 8001b3a:	7b7b      	ldrb	r3, [r7, #13]
 8001b3c:	011b      	lsls	r3, r3, #4
 8001b3e:	b25b      	sxtb	r3, r3
 8001b40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b44:	b25a      	sxtb	r2, r3
 8001b46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	b25b      	sxtb	r3, r3
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	701a      	strb	r2, [r3, #0]
 8001b54:	e001      	b.n	8001b5a <process_accel_bw+0x5a>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001b56:	23fc      	movs	r3, #252	@ 0xfc
 8001b58:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr

08001b6a <process_accel_range>:

/*!
 * @brief This API process the accel range.
 */
static int8_t process_accel_range(uint8_t *data, const struct bmi160_dev *dev)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b085      	sub	sp, #20
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.range <= BMI160_ACCEL_RANGE_16G)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	799b      	ldrb	r3, [r3, #6]
 8001b84:	2b0c      	cmp	r3, #12
 8001b86:	d81a      	bhi.n	8001bbe <process_accel_range+0x54>
    {
        if (dev->accel_cfg.range != dev->prev_accel_cfg.range)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	799a      	ldrb	r2, [r3, #6]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	7a9b      	ldrb	r3, [r3, #10]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d016      	beq.n	8001bc2 <process_accel_range+0x58>
        {
            range = (uint8_t)dev->accel_cfg.range;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	799b      	ldrb	r3, [r3, #6]
 8001b98:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_RANGE_MASK;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	f023 030f 	bic.w	r3, r3, #15
 8001ba2:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_ACCEL_RANGE_MASK);
 8001ba4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001ba8:	f003 030f 	and.w	r3, r3, #15
 8001bac:	b25a      	sxtb	r2, r3
 8001bae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	b25b      	sxtb	r3, r3
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	701a      	strb	r2, [r3, #0]
 8001bbc:	e001      	b.n	8001bc2 <process_accel_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001bbe:	23fc      	movs	r3, #252	@ 0xfc
 8001bc0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <check_invalid_settg>:
/*!
 * @brief This API checks the invalid settings for ODR & Bw for
 * Accel and Gyro.
 */
static int8_t check_invalid_settg(const struct bmi160_dev *dev)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b084      	sub	sp, #16
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	73bb      	strb	r3, [r7, #14]

    /* read the error reg */
    rslt = bmi160_get_regs(BMI160_ERROR_REG_ADDR, &data, 1, dev);
 8001bde:	f107 010e 	add.w	r1, r7, #14
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2201      	movs	r2, #1
 8001be6:	2002      	movs	r0, #2
 8001be8:	f7ff f92e 	bl	8000e48 <bmi160_get_regs>
 8001bec:	4603      	mov	r3, r0
 8001bee:	73fb      	strb	r3, [r7, #15]
    data = data >> 1;
 8001bf0:	7bbb      	ldrb	r3, [r7, #14]
 8001bf2:	085b      	lsrs	r3, r3, #1
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	73bb      	strb	r3, [r7, #14]
    data = data & BMI160_ERR_REG_MASK;
 8001bf8:	7bbb      	ldrb	r3, [r7, #14]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	73bb      	strb	r3, [r7, #14]
    if (data == 1)
 8001c02:	7bbb      	ldrb	r3, [r7, #14]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d102      	bne.n	8001c0e <check_invalid_settg+0x3c>
    {
        rslt = BMI160_E_ACCEL_ODR_BW_INVALID;
 8001c08:	23fa      	movs	r3, #250	@ 0xfa
 8001c0a:	73fb      	strb	r3, [r7, #15]
 8001c0c:	e010      	b.n	8001c30 <check_invalid_settg+0x5e>
    }
    else if (data == 2)
 8001c0e:	7bbb      	ldrb	r3, [r7, #14]
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d102      	bne.n	8001c1a <check_invalid_settg+0x48>
    {
        rslt = BMI160_E_GYRO_ODR_BW_INVALID;
 8001c14:	23f9      	movs	r3, #249	@ 0xf9
 8001c16:	73fb      	strb	r3, [r7, #15]
 8001c18:	e00a      	b.n	8001c30 <check_invalid_settg+0x5e>
    }
    else if (data == 3)
 8001c1a:	7bbb      	ldrb	r3, [r7, #14]
 8001c1c:	2b03      	cmp	r3, #3
 8001c1e:	d102      	bne.n	8001c26 <check_invalid_settg+0x54>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INT_INVALID;
 8001c20:	23f8      	movs	r3, #248	@ 0xf8
 8001c22:	73fb      	strb	r3, [r7, #15]
 8001c24:	e004      	b.n	8001c30 <check_invalid_settg+0x5e>
    }
    else if (data == 7)
 8001c26:	7bbb      	ldrb	r3, [r7, #14]
 8001c28:	2b07      	cmp	r3, #7
 8001c2a:	d101      	bne.n	8001c30 <check_invalid_settg+0x5e>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INVALID;
 8001c2c:	23f7      	movs	r3, #247	@ 0xf7
 8001c2e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001c30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <set_gyro_conf>:
static int8_t set_gyro_conf(struct bmi160_dev *dev)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 8001c44:	2300      	movs	r3, #0
 8001c46:	81bb      	strh	r3, [r7, #12]

    rslt = check_gyro_config(data, dev);
 8001c48:	f107 030c 	add.w	r3, r7, #12
 8001c4c:	6879      	ldr	r1, [r7, #4]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 f833 	bl	8001cba <check_gyro_config>
 8001c54:	4603      	mov	r3, r0
 8001c56:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001c58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d126      	bne.n	8001cae <set_gyro_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_GYRO_CONFIG_ADDR, &data[0], 1, dev);
 8001c60:	f107 010c 	add.w	r1, r7, #12
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	2042      	movs	r0, #66	@ 0x42
 8001c6a:	f7ff f920 	bl	8000eae <bmi160_set_regs>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d119      	bne.n	8001cae <set_gyro_conf+0x72>
        {
            dev->prev_gyro_cfg.odr = dev->gyro_cfg.odr;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	7b5a      	ldrb	r2, [r3, #13]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	745a      	strb	r2, [r3, #17]
            dev->prev_gyro_cfg.bw = dev->gyro_cfg.bw;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	7bda      	ldrb	r2, [r3, #15]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	74da      	strb	r2, [r3, #19]

            /* Write gyro range */
            rslt = bmi160_set_regs(BMI160_GYRO_RANGE_ADDR, &data[1], 1, dev);
 8001c8a:	f107 030c 	add.w	r3, r7, #12
 8001c8e:	1c59      	adds	r1, r3, #1
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	2043      	movs	r0, #67	@ 0x43
 8001c96:	f7ff f90a 	bl	8000eae <bmi160_set_regs>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d103      	bne.n	8001cae <set_gyro_conf+0x72>
            {
                dev->prev_gyro_cfg.range = dev->gyro_cfg.range;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	7b9a      	ldrb	r2, [r3, #14]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	749a      	strb	r2, [r3, #18]
            }
        }
    }

    return rslt;
 8001cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <check_gyro_config>:

/*!
 * @brief This API check the gyro configuration.
 */
static int8_t check_gyro_config(uint8_t *data, const struct bmi160_dev *dev)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b084      	sub	sp, #16
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read gyro Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_GYRO_CONFIG_ADDR, data, 2, dev);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	2042      	movs	r0, #66	@ 0x42
 8001ccc:	f7ff f8bc 	bl	8000e48 <bmi160_get_regs>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001cd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d11b      	bne.n	8001d14 <check_gyro_config+0x5a>
    {
        rslt = process_gyro_odr(&data[0], dev);
 8001cdc:	6839      	ldr	r1, [r7, #0]
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 f81e 	bl	8001d20 <process_gyro_odr>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001ce8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d111      	bne.n	8001d14 <check_gyro_config+0x5a>
        {
            rslt = process_gyro_bw(&data[0], dev);
 8001cf0:	6839      	ldr	r1, [r7, #0]
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f848 	bl	8001d88 <process_gyro_bw>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001cfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d107      	bne.n	8001d14 <check_gyro_config+0x5a>
            {
                rslt = process_gyro_range(&data[1], dev);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3301      	adds	r3, #1
 8001d08:	6839      	ldr	r1, [r7, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 f86b 	bl	8001de6 <process_gyro_range>
 8001d10:	4603      	mov	r3, r0
 8001d12:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001d14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <process_gyro_odr>:

/*!
 * @brief This API process the gyro odr.
 */
static int8_t process_gyro_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.odr <= BMI160_GYRO_ODR_3200HZ)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	7b5b      	ldrb	r3, [r3, #13]
 8001d3a:	2b0d      	cmp	r3, #13
 8001d3c:	d81a      	bhi.n	8001d74 <process_gyro_odr+0x54>
    {
        if (dev->gyro_cfg.odr != dev->prev_gyro_cfg.odr)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	7b5a      	ldrb	r2, [r3, #13]
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	7c5b      	ldrb	r3, [r3, #17]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d016      	beq.n	8001d78 <process_gyro_odr+0x58>
        {
            odr = (uint8_t)dev->gyro_cfg.odr;
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	7b5b      	ldrb	r3, [r3, #13]
 8001d4e:	737b      	strb	r3, [r7, #13]
            temp = (*data & ~BMI160_GYRO_ODR_MASK);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	f023 030f 	bic.w	r3, r3, #15
 8001d58:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_GYRO_ODR_MASK);
 8001d5a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	b25a      	sxtb	r2, r3
 8001d64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	b25b      	sxtb	r3, r3
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	701a      	strb	r2, [r3, #0]
 8001d72:	e001      	b.n	8001d78 <process_gyro_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001d74:	23fc      	movs	r3, #252	@ 0xfc
 8001d76:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001d78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <process_gyro_bw>:

/*!
 * @brief This API process the gyro bandwidth.
 */
static int8_t process_gyro_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001d92:	2300      	movs	r3, #0
 8001d94:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001d96:	2300      	movs	r3, #0
 8001d98:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.bw <= BMI160_GYRO_BW_NORMAL_MODE)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	7bdb      	ldrb	r3, [r3, #15]
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d815      	bhi.n	8001dd2 <process_gyro_bw+0x4a>
    {
        bw = (uint8_t)dev->gyro_cfg.bw;
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	7bdb      	ldrb	r3, [r3, #15]
 8001daa:	737b      	strb	r3, [r7, #13]
        temp = *data & ~BMI160_GYRO_BW_MASK;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001db4:	73bb      	strb	r3, [r7, #14]

        /* Adding bandwidth */
        *data = temp | ((bw << 4) & BMI160_GYRO_BW_MASK);
 8001db6:	7b7b      	ldrb	r3, [r7, #13]
 8001db8:	011b      	lsls	r3, r3, #4
 8001dba:	b25b      	sxtb	r3, r3
 8001dbc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001dc0:	b25a      	sxtb	r2, r3
 8001dc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	b25b      	sxtb	r3, r3
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	701a      	strb	r2, [r3, #0]
 8001dd0:	e001      	b.n	8001dd6 <process_gyro_bw+0x4e>
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001dd2:	23fc      	movs	r3, #252	@ 0xfc
 8001dd4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <process_gyro_range>:

/*!
 * @brief This API process the gyro range.
 */
static int8_t process_gyro_range(uint8_t *data, const struct bmi160_dev *dev)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b085      	sub	sp, #20
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
 8001dee:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.range <= BMI160_GYRO_RANGE_125_DPS)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	7b9b      	ldrb	r3, [r3, #14]
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d81a      	bhi.n	8001e3a <process_gyro_range+0x54>
    {
        if (dev->gyro_cfg.range != dev->prev_gyro_cfg.range)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	7b9a      	ldrb	r2, [r3, #14]
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	7c9b      	ldrb	r3, [r3, #18]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d016      	beq.n	8001e3e <process_gyro_range+0x58>
        {
            range = (uint8_t)dev->gyro_cfg.range;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	7b9b      	ldrb	r3, [r3, #14]
 8001e14:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_GYRO_RANGE_MASK;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	f023 0307 	bic.w	r3, r3, #7
 8001e1e:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_GYRO_RANGE_MASK);
 8001e20:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	b25a      	sxtb	r2, r3
 8001e2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	b25b      	sxtb	r3, r3
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	701a      	strb	r2, [r3, #0]
 8001e38:	e001      	b.n	8001e3e <process_gyro_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001e3a:	23fc      	movs	r3, #252	@ 0xfc
 8001e3c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <set_accel_pwr>:

/*!
 * @brief This API sets the accel power.
 */
static int8_t set_accel_pwr(struct bmi160_dev *dev)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b084      	sub	sp, #16
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	73fb      	strb	r3, [r7, #15]
    uint8_t data = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	73bb      	strb	r3, [r7, #14]

    if ((dev->accel_cfg.power >= BMI160_ACCEL_SUSPEND_MODE) && (dev->accel_cfg.power <= BMI160_ACCEL_LOWPOWER_MODE))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	791b      	ldrb	r3, [r3, #4]
 8001e62:	2b0f      	cmp	r3, #15
 8001e64:	d92b      	bls.n	8001ebe <set_accel_pwr+0x70>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	791b      	ldrb	r3, [r3, #4]
 8001e6a:	2b12      	cmp	r3, #18
 8001e6c:	d827      	bhi.n	8001ebe <set_accel_pwr+0x70>
    {
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	791a      	ldrb	r2, [r3, #4]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	7a1b      	ldrb	r3, [r3, #8]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d024      	beq.n	8001ec4 <set_accel_pwr+0x76>
        {
            rslt = process_under_sampling(&data, dev);
 8001e7a:	f107 030e 	add.w	r3, r7, #14
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 f826 	bl	8001ed2 <process_under_sampling>
 8001e86:	4603      	mov	r3, r0
 8001e88:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d118      	bne.n	8001ec4 <set_accel_pwr+0x76>
            {
                /* Write accel power */
                rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->accel_cfg.power, 1, dev);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	1d19      	adds	r1, r3, #4
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	207e      	movs	r0, #126	@ 0x7e
 8001e9c:	f7ff f807 	bl	8000eae <bmi160_set_regs>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	73fb      	strb	r3, [r7, #15]

                /* Add delay of 3.8 ms - refer data sheet table 24*/
                if (dev->prev_accel_cfg.power == BMI160_ACCEL_SUSPEND_MODE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	7a1b      	ldrb	r3, [r3, #8]
 8001ea8:	2b10      	cmp	r3, #16
 8001eaa:	d103      	bne.n	8001eb4 <set_accel_pwr+0x66>
                {
                    dev->delay_ms(BMI160_ACCEL_DELAY_MS);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb0:	2005      	movs	r0, #5
 8001eb2:	4798      	blx	r3
                }

                dev->prev_accel_cfg.power = dev->accel_cfg.power;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	791a      	ldrb	r2, [r3, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	721a      	strb	r2, [r3, #8]
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8001ebc:	e002      	b.n	8001ec4 <set_accel_pwr+0x76>
            }
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 8001ebe:	23f3      	movs	r3, #243	@ 0xf3
 8001ec0:	73fb      	strb	r3, [r7, #15]
 8001ec2:	e000      	b.n	8001ec6 <set_accel_pwr+0x78>
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8001ec4:	bf00      	nop
    }

    return rslt;
 8001ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <process_under_sampling>:

/*!
 * @brief This API process the undersampling setting of Accel.
 */
static int8_t process_under_sampling(uint8_t *data, const struct bmi160_dev *dev)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b084      	sub	sp, #16
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
 8001eda:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	73bb      	strb	r3, [r7, #14]
    uint8_t pre_filter[2] = { 0 };
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	81bb      	strh	r3, [r7, #12]

    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	2040      	movs	r0, #64	@ 0x40
 8001eec:	f7fe ffac 	bl	8000e48 <bmi160_get_regs>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001ef4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d139      	bne.n	8001f70 <process_under_sampling+0x9e>
    {
        if (dev->accel_cfg.power == BMI160_ACCEL_LOWPOWER_MODE)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	791b      	ldrb	r3, [r3, #4]
 8001f00:	2b12      	cmp	r3, #18
 8001f02:	d120      	bne.n	8001f46 <process_under_sampling+0x74>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f0c:	73bb      	strb	r3, [r7, #14]

            /* Set under-sampling parameter */
            *data = temp | ((1 << 7) & BMI160_ACCEL_UNDERSAMPLING_MASK);
 8001f0e:	7bbb      	ldrb	r3, [r7, #14]
 8001f10:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001f14:	b2da      	uxtb	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	2040      	movs	r0, #64	@ 0x40
 8001f22:	f7fe ffc4 	bl	8000eae <bmi160_set_regs>
 8001f26:	4603      	mov	r3, r0
 8001f28:	73fb      	strb	r3, [r7, #15]

            /* Disable the pre-filter data in low power mode */
            if (rslt == BMI160_OK)
 8001f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d11e      	bne.n	8001f70 <process_under_sampling+0x9e>
            {
                /* Disable the Pre-filter data*/
                rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, pre_filter, 2, dev);
 8001f32:	f107 010c 	add.w	r1, r7, #12
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	2202      	movs	r2, #2
 8001f3a:	2058      	movs	r0, #88	@ 0x58
 8001f3c:	f7fe ffb7 	bl	8000eae <bmi160_set_regs>
 8001f40:	4603      	mov	r3, r0
 8001f42:	73fb      	strb	r3, [r7, #15]
 8001f44:	e014      	b.n	8001f70 <process_under_sampling+0x9e>
            }
        }
        else if (*data & BMI160_ACCEL_UNDERSAMPLING_MASK)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	b25b      	sxtb	r3, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	da0f      	bge.n	8001f70 <process_under_sampling+0x9e>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f58:	73bb      	strb	r3, [r7, #14]

            /* Disable under-sampling parameter if already enabled */
            *data = temp;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	7bba      	ldrb	r2, [r7, #14]
 8001f5e:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	2201      	movs	r2, #1
 8001f64:	6879      	ldr	r1, [r7, #4]
 8001f66:	2040      	movs	r0, #64	@ 0x40
 8001f68:	f7fe ffa1 	bl	8000eae <bmi160_set_regs>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <set_gyro_pwr>:

/*!
 * @brief This API sets the gyro power mode.
 */
static int8_t set_gyro_pwr(struct bmi160_dev *dev)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8001f84:	2300      	movs	r3, #0
 8001f86:	73fb      	strb	r3, [r7, #15]

    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	7b1b      	ldrb	r3, [r3, #12]
 8001f8c:	2b14      	cmp	r3, #20
 8001f8e:	d007      	beq.n	8001fa0 <set_gyro_pwr+0x24>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	7b1b      	ldrb	r3, [r3, #12]
 8001f94:	2b15      	cmp	r3, #21
 8001f96:	d003      	beq.n	8001fa0 <set_gyro_pwr+0x24>
        (dev->gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	7b1b      	ldrb	r3, [r3, #12]
    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 8001f9c:	2b17      	cmp	r3, #23
 8001f9e:	d129      	bne.n	8001ff4 <set_gyro_pwr+0x78>
    {
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	7b1a      	ldrb	r2, [r3, #12]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	7c1b      	ldrb	r3, [r3, #16]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d025      	beq.n	8001ff8 <set_gyro_pwr+0x7c>
        {
            /* Write gyro power */
            rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->gyro_cfg.power, 1, dev);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f103 010c 	add.w	r1, r3, #12
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	207e      	movs	r0, #126	@ 0x7e
 8001fb8:	f7fe ff79 	bl	8000eae <bmi160_set_regs>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	73fb      	strb	r3, [r7, #15]
            if (dev->prev_gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	7c1b      	ldrb	r3, [r3, #16]
 8001fc4:	2b14      	cmp	r3, #20
 8001fc6:	d104      	bne.n	8001fd2 <set_gyro_pwr+0x56>
            {
                /* Delay of 80 ms - datasheet Table 24 */
                dev->delay_ms(BMI160_GYRO_DELAY_MS);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fcc:	2050      	movs	r0, #80	@ 0x50
 8001fce:	4798      	blx	r3
 8001fd0:	e00b      	b.n	8001fea <set_gyro_pwr+0x6e>
            }
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	7c1b      	ldrb	r3, [r3, #16]
 8001fd6:	2b17      	cmp	r3, #23
 8001fd8:	d107      	bne.n	8001fea <set_gyro_pwr+0x6e>
                     (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	7b1b      	ldrb	r3, [r3, #12]
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 8001fde:	2b15      	cmp	r3, #21
 8001fe0:	d103      	bne.n	8001fea <set_gyro_pwr+0x6e>
            {
                /* This delay is required for transition from
                 * fast-startup mode to normal mode - datasheet Table 3 */
                dev->delay_ms(10);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe6:	200a      	movs	r0, #10
 8001fe8:	4798      	blx	r3
            else
            {
                /* do nothing */
            }

            dev->prev_gyro_cfg.power = dev->gyro_cfg.power;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	7b1a      	ldrb	r2, [r3, #12]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	741a      	strb	r2, [r3, #16]
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 8001ff2:	e001      	b.n	8001ff8 <set_gyro_pwr+0x7c>
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 8001ff4:	23f3      	movs	r3, #243	@ 0xf3
 8001ff6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3710      	adds	r7, #16
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <enable_accel_any_motion_int>:
/*!
 * @brief This API enables the any-motion interrupt for accel.
 */
static int8_t enable_accel_any_motion_int(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                          struct bmi160_dev *dev)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800200e:	2300      	movs	r3, #0
 8002010:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002012:	2300      	movs	r3, #0
 8002014:	73bb      	strb	r3, [r7, #14]

    /* Enable any motion x, any motion y, any motion z
     * in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8002016:	f107 010d 	add.w	r1, r7, #13
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	2201      	movs	r2, #1
 800201e:	2050      	movs	r0, #80	@ 0x50
 8002020:	f7fe ff12 	bl	8000e48 <bmi160_get_regs>
 8002024:	4603      	mov	r3, r0
 8002026:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002028:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d151      	bne.n	80020d4 <enable_accel_any_motion_int+0xd0>
    {
        if (any_motion_int_cfg->anymotion_en == BMI160_ENABLE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d039      	beq.n	80020b2 <enable_accel_any_motion_int+0xae>
        {
            temp = data & ~BMI160_ANY_MOTION_X_INT_EN_MASK;
 800203e:	7b7b      	ldrb	r3, [r7, #13]
 8002040:	f023 0301 	bic.w	r3, r3, #1
 8002044:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion x axis */
            data = temp | (any_motion_int_cfg->anymotion_x & BMI160_ANY_MOTION_X_INT_EN_MASK);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800204e:	b2db      	uxtb	r3, r3
 8002050:	461a      	mov	r2, r3
 8002052:	7bbb      	ldrb	r3, [r7, #14]
 8002054:	4313      	orrs	r3, r2
 8002056:	b2db      	uxtb	r3, r3
 8002058:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_ANY_MOTION_Y_INT_EN_MASK;
 800205a:	7b7b      	ldrb	r3, [r7, #13]
 800205c:	f023 0302 	bic.w	r3, r3, #2
 8002060:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion y axis */
            data = temp | ((any_motion_int_cfg->anymotion_y << 1) & BMI160_ANY_MOTION_Y_INT_EN_MASK);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800206a:	b2db      	uxtb	r3, r3
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	b25b      	sxtb	r3, r3
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	b25a      	sxtb	r2, r3
 8002076:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800207a:	4313      	orrs	r3, r2
 800207c:	b25b      	sxtb	r3, r3
 800207e:	b2db      	uxtb	r3, r3
 8002080:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_ANY_MOTION_Z_INT_EN_MASK;
 8002082:	7b7b      	ldrb	r3, [r7, #13]
 8002084:	f023 0304 	bic.w	r3, r3, #4
 8002088:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion z axis */
            data = temp | ((any_motion_int_cfg->anymotion_z << 2) & BMI160_ANY_MOTION_Z_INT_EN_MASK);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002092:	b2db      	uxtb	r3, r3
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	b25b      	sxtb	r3, r3
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	b25a      	sxtb	r2, r3
 800209e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	b25b      	sxtb	r3, r3
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	737b      	strb	r3, [r7, #13]

            /* any-motion feature selected*/
            dev->any_sig_sel = BMI160_ANY_MOTION_ENABLED;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	2200      	movs	r2, #0
 80020ae:	70da      	strb	r2, [r3, #3]
 80020b0:	e007      	b.n	80020c2 <enable_accel_any_motion_int+0xbe>
        }
        else
        {
            data = data & ~BMI160_ANY_MOTION_ALL_INT_EN_MASK;
 80020b2:	7b7b      	ldrb	r3, [r7, #13]
 80020b4:	f023 0307 	bic.w	r3, r3, #7
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	737b      	strb	r3, [r7, #13]

            /* neither any-motion feature nor sig-motion selected */
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	22ff      	movs	r2, #255	@ 0xff
 80020c0:	70da      	strb	r2, [r3, #3]
        }

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 80020c2:	f107 010d 	add.w	r1, r7, #13
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	2201      	movs	r2, #1
 80020ca:	2050      	movs	r0, #80	@ 0x50
 80020cc:	f7fe feef 	bl	8000eae <bmi160_set_regs>
 80020d0:	4603      	mov	r3, r0
 80020d2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80020d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <disable_sig_motion_int>:

/*!
 * @brief This API disable the sig-motion interrupt.
 */
static int8_t disable_sig_motion_int(const struct bmi160_dev *dev)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 80020e8:	2300      	movs	r3, #0
 80020ea:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	73bb      	strb	r3, [r7, #14]

    /* Disabling Significant motion interrupt if enabled */
    rslt = bmi160_get_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 80020f0:	f107 010d 	add.w	r1, r7, #13
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	2062      	movs	r0, #98	@ 0x62
 80020fa:	f7fe fea5 	bl	8000e48 <bmi160_get_regs>
 80020fe:	4603      	mov	r3, r0
 8002100:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d115      	bne.n	8002136 <disable_sig_motion_int+0x56>
    {
        temp = (data & BMI160_SIG_MOTION_SEL_MASK);
 800210a:	7b7b      	ldrb	r3, [r7, #13]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	73bb      	strb	r3, [r7, #14]
        if (temp)
 8002112:	7bbb      	ldrb	r3, [r7, #14]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00e      	beq.n	8002136 <disable_sig_motion_int+0x56>
        {
            temp = data & ~BMI160_SIG_MOTION_SEL_MASK;
 8002118:	7b7b      	ldrb	r3, [r7, #13]
 800211a:	f023 0302 	bic.w	r3, r3, #2
 800211e:	73bb      	strb	r3, [r7, #14]
            data = temp;
 8002120:	7bbb      	ldrb	r3, [r7, #14]
 8002122:	737b      	strb	r3, [r7, #13]

            /* Write data to register */
            rslt = bmi160_set_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 8002124:	f107 010d 	add.w	r1, r7, #13
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	2062      	movs	r0, #98	@ 0x62
 800212e:	f7fe febe 	bl	8000eae <bmi160_set_regs>
 8002132:	4603      	mov	r3, r0
 8002134:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8002136:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800213a:	4618      	mov	r0, r3
 800213c:	3710      	adds	r7, #16
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
	...

08002144 <map_feature_interrupt>:
/*!
 *  @brief This API is used to map/unmap the Any/Sig motion, Step det/Low-g,
 *  Double tap, Single tap, Orientation, Flat, High-G, Nomotion interrupt pins.
 */
static int8_t map_feature_interrupt(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data[3] = { 0, 0, 0 };
 800214e:	4a48      	ldr	r2, [pc, #288]	@ (8002270 <map_feature_interrupt+0x12c>)
 8002150:	f107 030c 	add.w	r3, r7, #12
 8002154:	6812      	ldr	r2, [r2, #0]
 8002156:	4611      	mov	r1, r2
 8002158:	8019      	strh	r1, [r3, #0]
 800215a:	3302      	adds	r3, #2
 800215c:	0c12      	lsrs	r2, r2, #16
 800215e:	701a      	strb	r2, [r3, #0]
    uint8_t temp[3] = { 0, 0, 0 };
 8002160:	4a43      	ldr	r2, [pc, #268]	@ (8002270 <map_feature_interrupt+0x12c>)
 8002162:	f107 0308 	add.w	r3, r7, #8
 8002166:	6812      	ldr	r2, [r2, #0]
 8002168:	4611      	mov	r1, r2
 800216a:	8019      	strh	r1, [r3, #0]
 800216c:	3302      	adds	r3, #2
 800216e:	0c12      	lsrs	r2, r2, #16
 8002170:	701a      	strb	r2, [r3, #0]

    rslt = bmi160_get_regs(BMI160_INT_MAP_0_ADDR, data, 3, dev);
 8002172:	f107 010c 	add.w	r1, r7, #12
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	2203      	movs	r2, #3
 800217a:	2055      	movs	r0, #85	@ 0x55
 800217c:	f7fe fe64 	bl	8000e48 <bmi160_get_regs>
 8002180:	4603      	mov	r3, r0
 8002182:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d16a      	bne.n	8002262 <map_feature_interrupt+0x11e>
    {
        temp[0] = data[0] & ~int_mask_lookup_table[int_config->int_type];
 800218c:	7b3b      	ldrb	r3, [r7, #12]
 800218e:	b25a      	sxtb	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	785b      	ldrb	r3, [r3, #1]
 8002194:	4619      	mov	r1, r3
 8002196:	4b37      	ldr	r3, [pc, #220]	@ (8002274 <map_feature_interrupt+0x130>)
 8002198:	5c5b      	ldrb	r3, [r3, r1]
 800219a:	b25b      	sxtb	r3, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	b25b      	sxtb	r3, r3
 80021a0:	4013      	ands	r3, r2
 80021a2:	b25b      	sxtb	r3, r3
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	723b      	strb	r3, [r7, #8]
        temp[2] = data[2] & ~int_mask_lookup_table[int_config->int_type];
 80021a8:	7bbb      	ldrb	r3, [r7, #14]
 80021aa:	b25a      	sxtb	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	785b      	ldrb	r3, [r3, #1]
 80021b0:	4619      	mov	r1, r3
 80021b2:	4b30      	ldr	r3, [pc, #192]	@ (8002274 <map_feature_interrupt+0x130>)
 80021b4:	5c5b      	ldrb	r3, [r3, r1]
 80021b6:	b25b      	sxtb	r3, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	b25b      	sxtb	r3, r3
 80021bc:	4013      	ands	r3, r2
 80021be:	b25b      	sxtb	r3, r3
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	72bb      	strb	r3, [r7, #10]
        switch (int_config->int_channel)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b03      	cmp	r3, #3
 80021ca:	d83b      	bhi.n	8002244 <map_feature_interrupt+0x100>
 80021cc:	a201      	add	r2, pc, #4	@ (adr r2, 80021d4 <map_feature_interrupt+0x90>)
 80021ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021d2:	bf00      	nop
 80021d4:	080021e5 	.word	0x080021e5
 80021d8:	080021ef 	.word	0x080021ef
 80021dc:	08002207 	.word	0x08002207
 80021e0:	0800221f 	.word	0x0800221f
        {
            case BMI160_INT_CHANNEL_NONE:
                data[0] = temp[0];
 80021e4:	7a3b      	ldrb	r3, [r7, #8]
 80021e6:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2];
 80021e8:	7abb      	ldrb	r3, [r7, #10]
 80021ea:	73bb      	strb	r3, [r7, #14]
                break;
 80021ec:	e02c      	b.n	8002248 <map_feature_interrupt+0x104>
            case BMI160_INT_CHANNEL_1:
                data[0] = temp[0] | int_mask_lookup_table[int_config->int_type];
 80021ee:	7a3a      	ldrb	r2, [r7, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	785b      	ldrb	r3, [r3, #1]
 80021f4:	4619      	mov	r1, r3
 80021f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002274 <map_feature_interrupt+0x130>)
 80021f8:	5c5b      	ldrb	r3, [r3, r1]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2];
 8002200:	7abb      	ldrb	r3, [r7, #10]
 8002202:	73bb      	strb	r3, [r7, #14]
                break;
 8002204:	e020      	b.n	8002248 <map_feature_interrupt+0x104>
            case BMI160_INT_CHANNEL_2:
                data[2] = temp[2] | int_mask_lookup_table[int_config->int_type];
 8002206:	7aba      	ldrb	r2, [r7, #10]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	785b      	ldrb	r3, [r3, #1]
 800220c:	4619      	mov	r1, r3
 800220e:	4b19      	ldr	r3, [pc, #100]	@ (8002274 <map_feature_interrupt+0x130>)
 8002210:	5c5b      	ldrb	r3, [r3, r1]
 8002212:	4313      	orrs	r3, r2
 8002214:	b2db      	uxtb	r3, r3
 8002216:	73bb      	strb	r3, [r7, #14]
                data[0] = temp[0];
 8002218:	7a3b      	ldrb	r3, [r7, #8]
 800221a:	733b      	strb	r3, [r7, #12]
                break;
 800221c:	e014      	b.n	8002248 <map_feature_interrupt+0x104>
            case BMI160_INT_CHANNEL_BOTH:
                data[0] = temp[0] | int_mask_lookup_table[int_config->int_type];
 800221e:	7a3a      	ldrb	r2, [r7, #8]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	785b      	ldrb	r3, [r3, #1]
 8002224:	4619      	mov	r1, r3
 8002226:	4b13      	ldr	r3, [pc, #76]	@ (8002274 <map_feature_interrupt+0x130>)
 8002228:	5c5b      	ldrb	r3, [r3, r1]
 800222a:	4313      	orrs	r3, r2
 800222c:	b2db      	uxtb	r3, r3
 800222e:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2] | int_mask_lookup_table[int_config->int_type];
 8002230:	7aba      	ldrb	r2, [r7, #10]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	785b      	ldrb	r3, [r3, #1]
 8002236:	4619      	mov	r1, r3
 8002238:	4b0e      	ldr	r3, [pc, #56]	@ (8002274 <map_feature_interrupt+0x130>)
 800223a:	5c5b      	ldrb	r3, [r3, r1]
 800223c:	4313      	orrs	r3, r2
 800223e:	b2db      	uxtb	r3, r3
 8002240:	73bb      	strb	r3, [r7, #14]
                break;
 8002242:	e001      	b.n	8002248 <map_feature_interrupt+0x104>
            default:
                rslt = BMI160_E_OUT_OF_RANGE;
 8002244:	23fc      	movs	r3, #252	@ 0xfc
 8002246:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMI160_OK)
 8002248:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d108      	bne.n	8002262 <map_feature_interrupt+0x11e>
        {
            rslt = bmi160_set_regs(BMI160_INT_MAP_0_ADDR, data, 3, dev);
 8002250:	f107 010c 	add.w	r1, r7, #12
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	2203      	movs	r2, #3
 8002258:	2055      	movs	r0, #85	@ 0x55
 800225a:	f7fe fe28 	bl	8000eae <bmi160_set_regs>
 800225e:	4603      	mov	r3, r0
 8002260:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8002262:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002266:	4618      	mov	r0, r3
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	08014920 	.word	0x08014920
 8002274:	080149d0 	.word	0x080149d0

08002278 <map_hardware_interrupt>:
/*!
 *  @brief This API is used to map/unmap the Dataready(Accel & Gyro), FIFO full
 *  and FIFO watermark interrupt.
 */
static int8_t map_hardware_interrupt(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002282:	2300      	movs	r3, #0
 8002284:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_MAP_1_ADDR, &data, 1, dev);
 800228a:	f107 010d 	add.w	r1, r7, #13
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	2201      	movs	r2, #1
 8002292:	2056      	movs	r0, #86	@ 0x56
 8002294:	f7fe fdd8 	bl	8000e48 <bmi160_get_regs>
 8002298:	4603      	mov	r3, r0
 800229a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800229c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d168      	bne.n	8002376 <map_hardware_interrupt+0xfe>
    {
        temp = data & ~int_mask_lookup_table[int_config->int_type];
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	785b      	ldrb	r3, [r3, #1]
 80022a8:	461a      	mov	r2, r3
 80022aa:	4b36      	ldr	r3, [pc, #216]	@ (8002384 <map_hardware_interrupt+0x10c>)
 80022ac:	5c9b      	ldrb	r3, [r3, r2]
 80022ae:	b25b      	sxtb	r3, r3
 80022b0:	43db      	mvns	r3, r3
 80022b2:	b25a      	sxtb	r2, r3
 80022b4:	7b7b      	ldrb	r3, [r7, #13]
 80022b6:	b25b      	sxtb	r3, r3
 80022b8:	4013      	ands	r3, r2
 80022ba:	b25b      	sxtb	r3, r3
 80022bc:	73bb      	strb	r3, [r7, #14]
        temp = temp & ~((uint8_t)(int_mask_lookup_table[int_config->int_type] << 4));
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	785b      	ldrb	r3, [r3, #1]
 80022c2:	461a      	mov	r2, r3
 80022c4:	4b2f      	ldr	r3, [pc, #188]	@ (8002384 <map_hardware_interrupt+0x10c>)
 80022c6:	5c9b      	ldrb	r3, [r3, r2]
 80022c8:	011b      	lsls	r3, r3, #4
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	43db      	mvns	r3, r3
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	b25a      	sxtb	r2, r3
 80022d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80022d6:	4013      	ands	r3, r2
 80022d8:	b25b      	sxtb	r3, r3
 80022da:	73bb      	strb	r3, [r7, #14]
        switch (int_config->int_channel)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b03      	cmp	r3, #3
 80022e2:	d839      	bhi.n	8002358 <map_hardware_interrupt+0xe0>
 80022e4:	a201      	add	r2, pc, #4	@ (adr r2, 80022ec <map_hardware_interrupt+0x74>)
 80022e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ea:	bf00      	nop
 80022ec:	080022fd 	.word	0x080022fd
 80022f0:	08002303 	.word	0x08002303
 80022f4:	0800231b 	.word	0x0800231b
 80022f8:	0800232f 	.word	0x0800232f
        {
            case BMI160_INT_CHANNEL_NONE:
                data = temp;
 80022fc:	7bbb      	ldrb	r3, [r7, #14]
 80022fe:	737b      	strb	r3, [r7, #13]
                break;
 8002300:	e02c      	b.n	800235c <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_1:
                data = temp | (uint8_t)((int_mask_lookup_table[int_config->int_type]) << 4);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	785b      	ldrb	r3, [r3, #1]
 8002306:	461a      	mov	r2, r3
 8002308:	4b1e      	ldr	r3, [pc, #120]	@ (8002384 <map_hardware_interrupt+0x10c>)
 800230a:	5c9b      	ldrb	r3, [r3, r2]
 800230c:	011b      	lsls	r3, r3, #4
 800230e:	b2da      	uxtb	r2, r3
 8002310:	7bbb      	ldrb	r3, [r7, #14]
 8002312:	4313      	orrs	r3, r2
 8002314:	b2db      	uxtb	r3, r3
 8002316:	737b      	strb	r3, [r7, #13]
                break;
 8002318:	e020      	b.n	800235c <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_2:
                data = temp | int_mask_lookup_table[int_config->int_type];
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	785b      	ldrb	r3, [r3, #1]
 800231e:	461a      	mov	r2, r3
 8002320:	4b18      	ldr	r3, [pc, #96]	@ (8002384 <map_hardware_interrupt+0x10c>)
 8002322:	5c9a      	ldrb	r2, [r3, r2]
 8002324:	7bbb      	ldrb	r3, [r7, #14]
 8002326:	4313      	orrs	r3, r2
 8002328:	b2db      	uxtb	r3, r3
 800232a:	737b      	strb	r3, [r7, #13]
                break;
 800232c:	e016      	b.n	800235c <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_BOTH:
                data = temp | int_mask_lookup_table[int_config->int_type];
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	785b      	ldrb	r3, [r3, #1]
 8002332:	461a      	mov	r2, r3
 8002334:	4b13      	ldr	r3, [pc, #76]	@ (8002384 <map_hardware_interrupt+0x10c>)
 8002336:	5c9a      	ldrb	r2, [r3, r2]
 8002338:	7bbb      	ldrb	r3, [r7, #14]
 800233a:	4313      	orrs	r3, r2
 800233c:	b2db      	uxtb	r3, r3
 800233e:	737b      	strb	r3, [r7, #13]
                data = data | (uint8_t)((int_mask_lookup_table[int_config->int_type]) << 4);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	785b      	ldrb	r3, [r3, #1]
 8002344:	461a      	mov	r2, r3
 8002346:	4b0f      	ldr	r3, [pc, #60]	@ (8002384 <map_hardware_interrupt+0x10c>)
 8002348:	5c9b      	ldrb	r3, [r3, r2]
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	b2da      	uxtb	r2, r3
 800234e:	7b7b      	ldrb	r3, [r7, #13]
 8002350:	4313      	orrs	r3, r2
 8002352:	b2db      	uxtb	r3, r3
 8002354:	737b      	strb	r3, [r7, #13]
                break;
 8002356:	e001      	b.n	800235c <map_hardware_interrupt+0xe4>
            default:
                rslt = BMI160_E_OUT_OF_RANGE;
 8002358:	23fc      	movs	r3, #252	@ 0xfc
 800235a:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMI160_OK)
 800235c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d108      	bne.n	8002376 <map_hardware_interrupt+0xfe>
        {
            rslt = bmi160_set_regs(BMI160_INT_MAP_1_ADDR, &data, 1, dev);
 8002364:	f107 010d 	add.w	r1, r7, #13
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	2201      	movs	r2, #1
 800236c:	2056      	movs	r0, #86	@ 0x56
 800236e:	f7fe fd9e 	bl	8000eae <bmi160_set_regs>
 8002372:	4603      	mov	r3, r0
 8002374:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8002376:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	080149d0 	.word	0x080149d0

08002388 <config_any_motion_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for any-motion interrupt.
 */
static int8_t config_any_motion_src(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                    const struct bmi160_dev *dev)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002392:	2300      	movs	r3, #0
 8002394:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 800239a:	f107 010d 	add.w	r1, r7, #13
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	2201      	movs	r2, #1
 80023a2:	2059      	movs	r0, #89	@ 0x59
 80023a4:	f7fe fd50 	bl	8000e48 <bmi160_get_regs>
 80023a8:	4603      	mov	r3, r0
 80023aa:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80023ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d119      	bne.n	80023e8 <config_any_motion_src+0x60>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 80023b4:	7b7b      	ldrb	r3, [r7, #13]
 80023b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80023ba:	73bb      	strb	r3, [r7, #14]
        data = temp | ((any_motion_int_cfg->anymotion_data_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	01db      	lsls	r3, r3, #7
 80023c8:	b25a      	sxtb	r2, r3
 80023ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	b25b      	sxtb	r3, r3
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 80023d6:	f107 010d 	add.w	r1, r7, #13
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	2201      	movs	r2, #1
 80023de:	2059      	movs	r0, #89	@ 0x59
 80023e0:	f7fe fd65 	bl	8000eae <bmi160_set_regs>
 80023e4:	4603      	mov	r3, r0
 80023e6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80023e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <config_any_dur_threshold>:
 * @brief This API configure the duration and threshold of
 * any-motion interrupt.
 */
static int8_t config_any_dur_threshold(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                       const struct bmi160_dev *dev)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	733b      	strb	r3, [r7, #12]
    uint8_t temp = 0;
 8002402:	2300      	movs	r3, #0
 8002404:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[2] = { 0 };
 8002406:	2300      	movs	r3, #0
 8002408:	813b      	strh	r3, [r7, #8]
    uint8_t dur;

    /* Configure Int Motion 0 register */
    rslt = bmi160_get_regs(BMI160_INT_MOTION_0_ADDR, &data, 1, dev);
 800240a:	f107 010c 	add.w	r1, r7, #12
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	2201      	movs	r2, #1
 8002412:	205f      	movs	r0, #95	@ 0x5f
 8002414:	f7fe fd18 	bl	8000e48 <bmi160_get_regs>
 8002418:	4603      	mov	r3, r0
 800241a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800241c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d122      	bne.n	800246a <config_any_dur_threshold+0x76>
    {
        /* slope duration */
        dur = (uint8_t)any_motion_int_cfg->anymotion_dur;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	f3c3 1301 	ubfx	r3, r3, #4, #2
 800242c:	b2db      	uxtb	r3, r3
 800242e:	737b      	strb	r3, [r7, #13]
        temp = data & ~BMI160_SLOPE_INT_DUR_MASK;
 8002430:	7b3b      	ldrb	r3, [r7, #12]
 8002432:	f023 0303 	bic.w	r3, r3, #3
 8002436:	73bb      	strb	r3, [r7, #14]
        data = temp | (dur & BMI160_MOTION_SRC_INT_MASK);
 8002438:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800243c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002440:	b25a      	sxtb	r2, r3
 8002442:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002446:	4313      	orrs	r3, r2
 8002448:	b25b      	sxtb	r3, r3
 800244a:	b2db      	uxtb	r3, r3
 800244c:	733b      	strb	r3, [r7, #12]
        data_array[0] = data;
 800244e:	7b3b      	ldrb	r3, [r7, #12]
 8002450:	723b      	strb	r3, [r7, #8]

        /* add slope threshold */
        data_array[1] = any_motion_int_cfg->anymotion_thr;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	785b      	ldrb	r3, [r3, #1]
 8002456:	727b      	strb	r3, [r7, #9]
        /* INT MOTION 0 and INT MOTION 1 address lie consecutively,
         * hence writing data to respective registers at one go */

        /* Writing to Int_motion 0 and
         * Int_motion 1 Address simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_MOTION_0_ADDR, data_array, 2, dev);
 8002458:	f107 0108 	add.w	r1, r7, #8
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	2202      	movs	r2, #2
 8002460:	205f      	movs	r0, #95	@ 0x5f
 8002462:	f7fe fd24 	bl	8000eae <bmi160_set_regs>
 8002466:	4603      	mov	r3, r0
 8002468:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800246a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <config_any_motion_int_settg>:
 * @brief This API configure necessary setting of any-motion interrupt.
 */
static int8_t config_any_motion_int_settg(const struct bmi160_int_settg *int_config,
                                          const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                          const struct bmi160_dev *dev)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b086      	sub	sp, #24
 800247a:	af00      	add	r7, sp, #0
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f7ff fa30 	bl	80018ea <set_intr_pin_config>
 800248a:	4603      	mov	r3, r0
 800248c:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 800248e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d122      	bne.n	80024dc <config_any_motion_int_settg+0x66>
    {
        rslt = disable_sig_motion_int(dev);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff fe22 	bl	80020e0 <disable_sig_motion_int>
 800249c:	4603      	mov	r3, r0
 800249e:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 80024a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d119      	bne.n	80024dc <config_any_motion_int_settg+0x66>
        {
            rslt = map_feature_interrupt(int_config, dev);
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f7ff fe4a 	bl	8002144 <map_feature_interrupt>
 80024b0:	4603      	mov	r3, r0
 80024b2:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 80024b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10f      	bne.n	80024dc <config_any_motion_int_settg+0x66>
            {
                rslt = config_any_motion_src(any_motion_int_cfg, dev);
 80024bc:	6879      	ldr	r1, [r7, #4]
 80024be:	68b8      	ldr	r0, [r7, #8]
 80024c0:	f7ff ff62 	bl	8002388 <config_any_motion_src>
 80024c4:	4603      	mov	r3, r0
 80024c6:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMI160_OK)
 80024c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d105      	bne.n	80024dc <config_any_motion_int_settg+0x66>
                {
                    rslt = config_any_dur_threshold(any_motion_int_cfg, dev);
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	68b8      	ldr	r0, [r7, #8]
 80024d4:	f7ff ff8e 	bl	80023f4 <config_any_dur_threshold>
 80024d8:	4603      	mov	r3, r0
 80024da:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    }

    return rslt;
 80024dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <enable_data_ready_int>:

/*!
 * @brief This API enable the data ready interrupt.
 */
static int8_t enable_data_ready_int(const struct bmi160_dev *dev)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80024f8:	f107 010d 	add.w	r1, r7, #13
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	2051      	movs	r0, #81	@ 0x51
 8002502:	f7fe fca1 	bl	8000e48 <bmi160_get_regs>
 8002506:	4603      	mov	r3, r0
 8002508:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800250a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d111      	bne.n	8002536 <enable_data_ready_int+0x4e>
    {
        temp = data & ~BMI160_DATA_RDY_INT_EN_MASK;
 8002512:	7b7b      	ldrb	r3, [r7, #13]
 8002514:	f023 0310 	bic.w	r3, r3, #16
 8002518:	73bb      	strb	r3, [r7, #14]
        data = temp | ((1 << 4) & BMI160_DATA_RDY_INT_EN_MASK);
 800251a:	7bbb      	ldrb	r3, [r7, #14]
 800251c:	f043 0310 	orr.w	r3, r3, #16
 8002520:	b2db      	uxtb	r3, r3
 8002522:	737b      	strb	r3, [r7, #13]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8002524:	f107 010d 	add.w	r1, r7, #13
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	2051      	movs	r0, #81	@ 0x51
 800252e:	f7fe fcbe 	bl	8000eae <bmi160_set_regs>
 8002532:	4603      	mov	r3, r0
 8002534:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002536:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <enable_no_motion_int>:
/*!
 * @brief This API enables the no motion/slow motion interrupt.
 */
static int8_t enable_no_motion_int(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                   const struct bmi160_dev *dev)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b084      	sub	sp, #16
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
 800254a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800254c:	2300      	movs	r3, #0
 800254e:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002550:	2300      	movs	r3, #0
 8002552:	73bb      	strb	r3, [r7, #14]

    /* Enable no motion x, no motion y, no motion z
     * in Int Enable 2 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 8002554:	f107 010d 	add.w	r1, r7, #13
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	2201      	movs	r2, #1
 800255c:	2052      	movs	r0, #82	@ 0x52
 800255e:	f7fe fc73 	bl	8000e48 <bmi160_get_regs>
 8002562:	4603      	mov	r3, r0
 8002564:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d138      	bne.n	80025e0 <enable_no_motion_int+0x9e>
    {
        if (no_mot_int_cfg->no_motion_x == 1)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	f003 0301 	and.w	r3, r3, #1
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b00      	cmp	r3, #0
 800257a:	d008      	beq.n	800258e <enable_no_motion_int+0x4c>
        {
            temp = data & ~BMI160_NO_MOTION_X_INT_EN_MASK;
 800257c:	7b7b      	ldrb	r3, [r7, #13]
 800257e:	f023 0301 	bic.w	r3, r3, #1
 8002582:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | (1 & BMI160_NO_MOTION_X_INT_EN_MASK);
 8002584:	7bbb      	ldrb	r3, [r7, #14]
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	b2db      	uxtb	r3, r3
 800258c:	737b      	strb	r3, [r7, #13]
        }

        if (no_mot_int_cfg->no_motion_y == 1)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b00      	cmp	r3, #0
 800259a:	d008      	beq.n	80025ae <enable_no_motion_int+0x6c>
        {
            temp = data & ~BMI160_NO_MOTION_Y_INT_EN_MASK;
 800259c:	7b7b      	ldrb	r3, [r7, #13]
 800259e:	f023 0302 	bic.w	r3, r3, #2
 80025a2:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | ((1 << 1) & BMI160_NO_MOTION_Y_INT_EN_MASK);
 80025a4:	7bbb      	ldrb	r3, [r7, #14]
 80025a6:	f043 0302 	orr.w	r3, r3, #2
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	737b      	strb	r3, [r7, #13]
        }

        if (no_mot_int_cfg->no_motion_z == 1)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	f003 0304 	and.w	r3, r3, #4
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d008      	beq.n	80025ce <enable_no_motion_int+0x8c>
        {
            temp = data & ~BMI160_NO_MOTION_Z_INT_EN_MASK;
 80025bc:	7b7b      	ldrb	r3, [r7, #13]
 80025be:	f023 0304 	bic.w	r3, r3, #4
 80025c2:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | ((1 << 2) & BMI160_NO_MOTION_Z_INT_EN_MASK);
 80025c4:	7bbb      	ldrb	r3, [r7, #14]
 80025c6:	f043 0304 	orr.w	r3, r3, #4
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	737b      	strb	r3, [r7, #13]
        }

        /* write data to Int Enable 2 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 80025ce:	f107 010d 	add.w	r1, r7, #13
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	2201      	movs	r2, #1
 80025d6:	2052      	movs	r0, #82	@ 0x52
 80025d8:	f7fe fc69 	bl	8000eae <bmi160_set_regs>
 80025dc:	4603      	mov	r3, r0
 80025de:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80025e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <config_no_motion_int_settg>:
 * no motion/slow motion interrupt.
 */
static int8_t config_no_motion_int_settg(const struct bmi160_int_settg *int_config,
                                         const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                         const struct bmi160_dev *dev)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f7ff f975 	bl	80018ea <set_intr_pin_config>
 8002600:	4603      	mov	r3, r0
 8002602:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8002604:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d119      	bne.n	8002640 <config_no_motion_int_settg+0x54>
    {
        rslt = map_feature_interrupt(int_config, dev);
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f7ff fd98 	bl	8002144 <map_feature_interrupt>
 8002614:	4603      	mov	r3, r0
 8002616:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8002618:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d10f      	bne.n	8002640 <config_no_motion_int_settg+0x54>
        {
            rslt = config_no_motion_data_src(no_mot_int_cfg, dev);
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	68b8      	ldr	r0, [r7, #8]
 8002624:	f000 f812 	bl	800264c <config_no_motion_data_src>
 8002628:	4603      	mov	r3, r0
 800262a:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 800262c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d105      	bne.n	8002640 <config_no_motion_int_settg+0x54>
            {
                rslt = config_no_motion_dur_thr(no_mot_int_cfg, dev);
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	68b8      	ldr	r0, [r7, #8]
 8002638:	f000 f83e 	bl	80026b8 <config_no_motion_dur_thr>
 800263c:	4603      	mov	r3, r0
 800263e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8002640:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <config_no_motion_data_src>:
/*!
 * @brief This API configure the source of interrupt for no motion.
 */
static int8_t config_no_motion_data_src(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                        const struct bmi160_dev *dev)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b084      	sub	sp, #16
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002656:	2300      	movs	r3, #0
 8002658:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 800265a:	2300      	movs	r3, #0
 800265c:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 800265e:	f107 010d 	add.w	r1, r7, #13
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	2201      	movs	r2, #1
 8002666:	2059      	movs	r0, #89	@ 0x59
 8002668:	f7fe fbee 	bl	8000e48 <bmi160_get_regs>
 800266c:	4603      	mov	r3, r0
 800266e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002670:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d119      	bne.n	80026ac <config_no_motion_data_src+0x60>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 8002678:	7b7b      	ldrb	r3, [r7, #13]
 800267a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800267e:	73bb      	strb	r3, [r7, #14]
        data = temp | ((no_mot_int_cfg->no_motion_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	785b      	ldrb	r3, [r3, #1]
 8002684:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002688:	b2db      	uxtb	r3, r3
 800268a:	01db      	lsls	r3, r3, #7
 800268c:	b25a      	sxtb	r2, r3
 800268e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002692:	4313      	orrs	r3, r2
 8002694:	b25b      	sxtb	r3, r3
 8002696:	b2db      	uxtb	r3, r3
 8002698:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 800269a:	f107 010d 	add.w	r1, r7, #13
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2201      	movs	r2, #1
 80026a2:	2059      	movs	r0, #89	@ 0x59
 80026a4:	f7fe fc03 	bl	8000eae <bmi160_set_regs>
 80026a8:	4603      	mov	r3, r0
 80026aa:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80026ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3710      	adds	r7, #16
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <config_no_motion_dur_thr>:
 * @brief This API configure the duration and threshold of
 * no motion/slow motion interrupt along with selection of no/slow motion.
 */
static int8_t config_no_motion_dur_thr(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                       const struct bmi160_dev *dev)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80026c2:	2300      	movs	r3, #0
 80026c4:	72fb      	strb	r3, [r7, #11]
    uint8_t temp = 0;
 80026c6:	2300      	movs	r3, #0
 80026c8:	73bb      	strb	r3, [r7, #14]
    uint8_t temp_1 = 0;
 80026ca:	2300      	movs	r3, #0
 80026cc:	737b      	strb	r3, [r7, #13]
    uint8_t reg_addr;
    uint8_t data_array[2] = { 0 };
 80026ce:	2300      	movs	r3, #0
 80026d0:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_MOTION register */
    reg_addr = BMI160_INT_MOTION_0_ADDR;
 80026d2:	235f      	movs	r3, #95	@ 0x5f
 80026d4:	733b      	strb	r3, [r7, #12]
    rslt = bmi160_get_regs(reg_addr, &data, 1, dev);
 80026d6:	f107 010b 	add.w	r1, r7, #11
 80026da:	7b38      	ldrb	r0, [r7, #12]
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	2201      	movs	r2, #1
 80026e0:	f7fe fbb2 	bl	8000e48 <bmi160_get_regs>
 80026e4:	4603      	mov	r3, r0
 80026e6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80026e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d14b      	bne.n	8002788 <config_no_motion_dur_thr+0xd0>
    {
        temp = data & ~BMI160_NO_MOTION_INT_DUR_MASK;
 80026f0:	7afb      	ldrb	r3, [r7, #11]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	73bb      	strb	r3, [r7, #14]

        /* Adding no_motion duration */
        data = temp | ((no_mot_int_cfg->no_motion_dur << 2) & BMI160_NO_MOTION_INT_DUR_MASK);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	881b      	ldrh	r3, [r3, #0]
 80026fc:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8002700:	b2db      	uxtb	r3, r3
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	b25a      	sxtb	r2, r3
 8002706:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800270a:	4313      	orrs	r3, r2
 800270c:	b25b      	sxtb	r3, r3
 800270e:	b2db      	uxtb	r3, r3
 8002710:	72fb      	strb	r3, [r7, #11]

        /* Write data to NO_MOTION 0 address */
        rslt = bmi160_set_regs(reg_addr, &data, 1, dev);
 8002712:	f107 010b 	add.w	r1, r7, #11
 8002716:	7b38      	ldrb	r0, [r7, #12]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	2201      	movs	r2, #1
 800271c:	f7fe fbc7 	bl	8000eae <bmi160_set_regs>
 8002720:	4603      	mov	r3, r0
 8002722:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8002724:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d12d      	bne.n	8002788 <config_no_motion_dur_thr+0xd0>
        {
            reg_addr = BMI160_INT_MOTION_3_ADDR;
 800272c:	2362      	movs	r3, #98	@ 0x62
 800272e:	733b      	strb	r3, [r7, #12]
            rslt = bmi160_get_regs(reg_addr, &data, 1, dev);
 8002730:	f107 010b 	add.w	r1, r7, #11
 8002734:	7b38      	ldrb	r0, [r7, #12]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2201      	movs	r2, #1
 800273a:	f7fe fb85 	bl	8000e48 <bmi160_get_regs>
 800273e:	4603      	mov	r3, r0
 8002740:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8002742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d11e      	bne.n	8002788 <config_no_motion_dur_thr+0xd0>
            {
                temp = data & ~BMI160_NO_MOTION_SEL_BIT_MASK;
 800274a:	7afb      	ldrb	r3, [r7, #11]
 800274c:	f023 0301 	bic.w	r3, r3, #1
 8002750:	73bb      	strb	r3, [r7, #14]

                /* Adding no_motion_sel bit */
                temp_1 = (no_mot_int_cfg->no_motion_sel & BMI160_NO_MOTION_SEL_BIT_MASK);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	785b      	ldrb	r3, [r3, #1]
 8002756:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800275a:	b2db      	uxtb	r3, r3
 800275c:	737b      	strb	r3, [r7, #13]
                data = (temp | temp_1);
 800275e:	7bba      	ldrb	r2, [r7, #14]
 8002760:	7b7b      	ldrb	r3, [r7, #13]
 8002762:	4313      	orrs	r3, r2
 8002764:	b2db      	uxtb	r3, r3
 8002766:	72fb      	strb	r3, [r7, #11]
                data_array[1] = data;
 8002768:	7afb      	ldrb	r3, [r7, #11]
 800276a:	727b      	strb	r3, [r7, #9]

                /* Adding no motion threshold */
                data_array[0] = no_mot_int_cfg->no_motion_thres;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	789b      	ldrb	r3, [r3, #2]
 8002770:	723b      	strb	r3, [r7, #8]
                reg_addr = BMI160_INT_MOTION_2_ADDR;
 8002772:	2361      	movs	r3, #97	@ 0x61
 8002774:	733b      	strb	r3, [r7, #12]

                /* writing data to INT_MOTION 2 and INT_MOTION 3
                 * address simultaneously */
                rslt = bmi160_set_regs(reg_addr, data_array, 2, dev);
 8002776:	f107 0108 	add.w	r1, r7, #8
 800277a:	7b38      	ldrb	r0, [r7, #12]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	2202      	movs	r2, #2
 8002780:	f7fe fb95 	bl	8000eae <bmi160_set_regs>
 8002784:	4603      	mov	r3, r0
 8002786:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8002788:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800278c:	4618      	mov	r0, r3
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <enable_sig_motion_int>:

/*!
 * @brief This API enables the sig-motion motion interrupt.
 */
static int8_t enable_sig_motion_int(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg, struct bmi160_dev *dev)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800279e:	2300      	movs	r3, #0
 80027a0:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80027a2:	2300      	movs	r3, #0
 80027a4:	73bb      	strb	r3, [r7, #14]

    /* For significant motion,enable any motion x,any motion y,
     * any motion z in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 80027a6:	f107 010d 	add.w	r1, r7, #13
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2201      	movs	r2, #1
 80027ae:	2050      	movs	r0, #80	@ 0x50
 80027b0:	f7fe fb4a 	bl	8000e48 <bmi160_get_regs>
 80027b4:	4603      	mov	r3, r0
 80027b6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80027b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d124      	bne.n	800280a <enable_sig_motion_int+0x76>
    {
        if (sig_mot_int_cfg->sig_en == BMI160_ENABLE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	f003 0320 	and.w	r3, r3, #32
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00c      	beq.n	80027e8 <enable_sig_motion_int+0x54>
        {
            temp = data & ~BMI160_SIG_MOTION_INT_EN_MASK;
 80027ce:	7b7b      	ldrb	r3, [r7, #13]
 80027d0:	f023 0307 	bic.w	r3, r3, #7
 80027d4:	73bb      	strb	r3, [r7, #14]
            data = temp | (7 & BMI160_SIG_MOTION_INT_EN_MASK);
 80027d6:	7bbb      	ldrb	r3, [r7, #14]
 80027d8:	f043 0307 	orr.w	r3, r3, #7
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	737b      	strb	r3, [r7, #13]

            /* sig-motion feature selected*/
            dev->any_sig_sel = BMI160_SIG_MOTION_ENABLED;
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	2201      	movs	r2, #1
 80027e4:	70da      	strb	r2, [r3, #3]
 80027e6:	e007      	b.n	80027f8 <enable_sig_motion_int+0x64>
        }
        else
        {
            data = data & ~BMI160_SIG_MOTION_INT_EN_MASK;
 80027e8:	7b7b      	ldrb	r3, [r7, #13]
 80027ea:	f023 0307 	bic.w	r3, r3, #7
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	737b      	strb	r3, [r7, #13]

            /* neither any-motion feature nor sig-motion selected */
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	22ff      	movs	r2, #255	@ 0xff
 80027f6:	70da      	strb	r2, [r3, #3]
        }

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 80027f8:	f107 010d 	add.w	r1, r7, #13
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	2201      	movs	r2, #1
 8002800:	2050      	movs	r0, #80	@ 0x50
 8002802:	f7fe fb54 	bl	8000eae <bmi160_set_regs>
 8002806:	4603      	mov	r3, r0
 8002808:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800280a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <config_sig_motion_int_settg>:
 * significant motion interrupt.
 */
static int8_t config_sig_motion_int_settg(const struct bmi160_int_settg *int_config,
                                          const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                          const struct bmi160_dev *dev)
{
 8002816:	b580      	push	{r7, lr}
 8002818:	b086      	sub	sp, #24
 800281a:	af00      	add	r7, sp, #0
 800281c:	60f8      	str	r0, [r7, #12]
 800281e:	60b9      	str	r1, [r7, #8]
 8002820:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	68f8      	ldr	r0, [r7, #12]
 8002826:	f7ff f860 	bl	80018ea <set_intr_pin_config>
 800282a:	4603      	mov	r3, r0
 800282c:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 800282e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d119      	bne.n	800286a <config_sig_motion_int_settg+0x54>
    {
        rslt = map_feature_interrupt(int_config, dev);
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f7ff fc83 	bl	8002144 <map_feature_interrupt>
 800283e:	4603      	mov	r3, r0
 8002840:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8002842:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10f      	bne.n	800286a <config_sig_motion_int_settg+0x54>
        {
            rslt = config_sig_motion_data_src(sig_mot_int_cfg, dev);
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	68b8      	ldr	r0, [r7, #8]
 800284e:	f000 f812 	bl	8002876 <config_sig_motion_data_src>
 8002852:	4603      	mov	r3, r0
 8002854:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 8002856:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d105      	bne.n	800286a <config_sig_motion_int_settg+0x54>
            {
                rslt = config_sig_dur_threshold(sig_mot_int_cfg, dev);
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	68b8      	ldr	r0, [r7, #8]
 8002862:	f000 f83e 	bl	80028e2 <config_sig_dur_threshold>
 8002866:	4603      	mov	r3, r0
 8002868:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 800286a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <config_sig_motion_data_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for sig motion interrupt.
 */
static int8_t config_sig_motion_data_src(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                         const struct bmi160_dev *dev)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b084      	sub	sp, #16
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
 800287e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002880:	2300      	movs	r3, #0
 8002882:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002884:	2300      	movs	r3, #0
 8002886:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8002888:	f107 010d 	add.w	r1, r7, #13
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	2201      	movs	r2, #1
 8002890:	2059      	movs	r0, #89	@ 0x59
 8002892:	f7fe fad9 	bl	8000e48 <bmi160_get_regs>
 8002896:	4603      	mov	r3, r0
 8002898:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800289a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d119      	bne.n	80028d6 <config_sig_motion_data_src+0x60>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 80028a2:	7b7b      	ldrb	r3, [r7, #13]
 80028a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028a8:	73bb      	strb	r3, [r7, #14]
        data = temp | ((sig_mot_int_cfg->sig_data_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	01db      	lsls	r3, r3, #7
 80028b6:	b25a      	sxtb	r2, r3
 80028b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80028bc:	4313      	orrs	r3, r2
 80028be:	b25b      	sxtb	r3, r3
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 80028c4:	f107 010d 	add.w	r1, r7, #13
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	2201      	movs	r2, #1
 80028cc:	2059      	movs	r0, #89	@ 0x59
 80028ce:	f7fe faee 	bl	8000eae <bmi160_set_regs>
 80028d2:	4603      	mov	r3, r0
 80028d4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80028d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <config_sig_dur_threshold>:
 * @brief This API configure the threshold, skip and proof time of
 * sig motion interrupt.
 */
static int8_t config_sig_dur_threshold(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                       const struct bmi160_dev *dev)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b084      	sub	sp, #16
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;
    uint8_t temp = 0;
 80028ec:	2300      	movs	r3, #0
 80028ee:	73bb      	strb	r3, [r7, #14]

    /* Configuring INT_MOTION registers */

    /* Write significant motion threshold.
     * This threshold is same as any motion threshold */
    data = sig_mot_int_cfg->sig_mot_thres;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	785b      	ldrb	r3, [r3, #1]
 80028f4:	737b      	strb	r3, [r7, #13]

    /* Write data to INT_MOTION 1 address */
    rslt = bmi160_set_regs(BMI160_INT_MOTION_1_ADDR, &data, 1, dev);
 80028f6:	f107 010d 	add.w	r1, r7, #13
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	2201      	movs	r2, #1
 80028fe:	2060      	movs	r0, #96	@ 0x60
 8002900:	f7fe fad5 	bl	8000eae <bmi160_set_regs>
 8002904:	4603      	mov	r3, r0
 8002906:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d151      	bne.n	80029b4 <config_sig_dur_threshold+0xd2>
    {
        rslt = bmi160_get_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 8002910:	f107 010d 	add.w	r1, r7, #13
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	2201      	movs	r2, #1
 8002918:	2062      	movs	r0, #98	@ 0x62
 800291a:	f7fe fa95 	bl	8000e48 <bmi160_get_regs>
 800291e:	4603      	mov	r3, r0
 8002920:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8002922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d144      	bne.n	80029b4 <config_sig_dur_threshold+0xd2>
        {
            temp = data & ~BMI160_SIG_MOTION_SKIP_MASK;
 800292a:	7b7b      	ldrb	r3, [r7, #13]
 800292c:	f023 030c 	bic.w	r3, r3, #12
 8002930:	73bb      	strb	r3, [r7, #14]

            /* adding skip time of sig_motion interrupt*/
            data = temp | ((sig_mot_int_cfg->sig_mot_skip << 2) & BMI160_SIG_MOTION_SKIP_MASK);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800293a:	b2db      	uxtb	r3, r3
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	b25b      	sxtb	r3, r3
 8002940:	f003 030c 	and.w	r3, r3, #12
 8002944:	b25a      	sxtb	r2, r3
 8002946:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800294a:	4313      	orrs	r3, r2
 800294c:	b25b      	sxtb	r3, r3
 800294e:	b2db      	uxtb	r3, r3
 8002950:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_SIG_MOTION_PROOF_MASK;
 8002952:	7b7b      	ldrb	r3, [r7, #13]
 8002954:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002958:	73bb      	strb	r3, [r7, #14]

            /* adding proof time of sig_motion interrupt */
            data = temp | ((sig_mot_int_cfg->sig_mot_proof << 4) & BMI160_SIG_MOTION_PROOF_MASK);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002962:	b2db      	uxtb	r3, r3
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	b25b      	sxtb	r3, r3
 8002968:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800296c:	b25a      	sxtb	r2, r3
 800296e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002972:	4313      	orrs	r3, r2
 8002974:	b25b      	sxtb	r3, r3
 8002976:	b2db      	uxtb	r3, r3
 8002978:	737b      	strb	r3, [r7, #13]

            /* configure the int_sig_mot_sel bit to select
             * significant motion interrupt */
            temp = data & ~BMI160_SIG_MOTION_SEL_MASK;
 800297a:	7b7b      	ldrb	r3, [r7, #13]
 800297c:	f023 0302 	bic.w	r3, r3, #2
 8002980:	73bb      	strb	r3, [r7, #14]
            data = temp | ((sig_mot_int_cfg->sig_en << 1) & BMI160_SIG_MOTION_SEL_MASK);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800298a:	b2db      	uxtb	r3, r3
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	b25b      	sxtb	r3, r3
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	b25a      	sxtb	r2, r3
 8002996:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800299a:	4313      	orrs	r3, r2
 800299c:	b25b      	sxtb	r3, r3
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	737b      	strb	r3, [r7, #13]
            rslt = bmi160_set_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 80029a2:	f107 010d 	add.w	r1, r7, #13
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2201      	movs	r2, #1
 80029aa:	2062      	movs	r0, #98	@ 0x62
 80029ac:	f7fe fa7f 	bl	8000eae <bmi160_set_regs>
 80029b0:	4603      	mov	r3, r0
 80029b2:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80029b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <enable_step_detect_int>:
/*!
 * @brief This API enables the step detector interrupt.
 */
static int8_t enable_step_detect_int(const struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg,
                                     const struct bmi160_dev *dev)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 2 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 80029d2:	f107 010d 	add.w	r1, r7, #13
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	2201      	movs	r2, #1
 80029da:	2052      	movs	r0, #82	@ 0x52
 80029dc:	f7fe fa34 	bl	8000e48 <bmi160_get_regs>
 80029e0:	4603      	mov	r3, r0
 80029e2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80029e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d11c      	bne.n	8002a26 <enable_step_detect_int+0x66>
    {
        temp = data & ~BMI160_STEP_DETECT_INT_EN_MASK;
 80029ec:	7b7b      	ldrb	r3, [r7, #13]
 80029ee:	f023 0308 	bic.w	r3, r3, #8
 80029f2:	73bb      	strb	r3, [r7, #14]
        data = temp | ((step_detect_int_cfg->step_detector_en << 3) & BMI160_STEP_DETECT_INT_EN_MASK);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	b25b      	sxtb	r3, r3
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	b25a      	sxtb	r2, r3
 8002a08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	b25b      	sxtb	r3, r3
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	737b      	strb	r3, [r7, #13]

        /* Writing data to INT ENABLE 2 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 8002a14:	f107 010d 	add.w	r1, r7, #13
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	2052      	movs	r0, #82	@ 0x52
 8002a1e:	f7fe fa46 	bl	8000eae <bmi160_set_regs>
 8002a22:	4603      	mov	r3, r0
 8002a24:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <config_step_detect>:
/*!
 * @brief This API configure the step detector parameter.
 */
static int8_t config_step_detect(const struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg,
                                 const struct bmi160_dev *dev)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b084      	sub	sp, #16
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
 8002a3a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	73fb      	strb	r3, [r7, #15]
    uint8_t data_array[2] = { 0 };
 8002a40:	2300      	movs	r3, #0
 8002a42:	81bb      	strh	r3, [r7, #12]

    if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_NORMAL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d104      	bne.n	8002a5c <config_step_detect+0x2a>
    {
        /* Normal mode setting */
        data_array[0] = 0x15;
 8002a52:	2315      	movs	r3, #21
 8002a54:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x03;
 8002a56:	2303      	movs	r3, #3
 8002a58:	737b      	strb	r3, [r7, #13]
 8002a5a:	e05b      	b.n	8002b14 <config_step_detect+0xe2>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_SENSITIVE)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b40      	cmp	r3, #64	@ 0x40
 8002a68:	d104      	bne.n	8002a74 <config_step_detect+0x42>
    {
        /* Sensitive mode setting */
        data_array[0] = 0x2D;
 8002a6a:	232d      	movs	r3, #45	@ 0x2d
 8002a6c:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x00;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	737b      	strb	r3, [r7, #13]
 8002a72:	e04f      	b.n	8002b14 <config_step_detect+0xe2>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_ROBUST)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b80      	cmp	r3, #128	@ 0x80
 8002a80:	d104      	bne.n	8002a8c <config_step_detect+0x5a>
    {
        /* Robust mode setting */
        data_array[0] = 0x1D;
 8002a82:	231d      	movs	r3, #29
 8002a84:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x07;
 8002a86:	2307      	movs	r3, #7
 8002a88:	737b      	strb	r3, [r7, #13]
 8002a8a:	e043      	b.n	8002b14 <config_step_detect+0xe2>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_USER_DEFINE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2bc0      	cmp	r3, #192	@ 0xc0
 8002a98:	d13c      	bne.n	8002b14 <config_step_detect+0xe2>
    {
        /* Non recommended User defined setting */
        /* Configuring STEP_CONFIG register */
        rslt = bmi160_get_regs(BMI160_INT_STEP_CONFIG_0_ADDR, &data_array[0], 2, dev);
 8002a9a:	f107 010c 	add.w	r1, r7, #12
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	2202      	movs	r2, #2
 8002aa2:	207a      	movs	r0, #122	@ 0x7a
 8002aa4:	f7fe f9d0 	bl	8000e48 <bmi160_get_regs>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	73bb      	strb	r3, [r7, #14]
        if (rslt == BMI160_OK)
 8002aac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d12f      	bne.n	8002b14 <config_step_detect+0xe2>
        {
            temp = data_array[0] & ~BMI160_STEP_DETECT_MIN_THRES_MASK;
 8002ab4:	7b3b      	ldrb	r3, [r7, #12]
 8002ab6:	f023 0318 	bic.w	r3, r3, #24
 8002aba:	73fb      	strb	r3, [r7, #15]

            /* Adding min_threshold */
            data_array[0] = temp | ((step_detect_int_cfg->min_threshold << 3) & BMI160_STEP_DETECT_MIN_THRES_MASK);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	b25b      	sxtb	r3, r3
 8002aca:	f003 0318 	and.w	r3, r3, #24
 8002ace:	b25a      	sxtb	r2, r3
 8002ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	b25b      	sxtb	r3, r3
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	733b      	strb	r3, [r7, #12]
            temp = data_array[0] & ~BMI160_STEP_DETECT_STEPTIME_MIN_MASK;
 8002adc:	7b3b      	ldrb	r3, [r7, #12]
 8002ade:	f023 0307 	bic.w	r3, r3, #7
 8002ae2:	73fb      	strb	r3, [r7, #15]

            /* Adding steptime_min */
            data_array[0] = temp | ((step_detect_int_cfg->steptime_min) & BMI160_STEP_DETECT_STEPTIME_MIN_MASK);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	461a      	mov	r2, r3
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	733b      	strb	r3, [r7, #12]
            temp = data_array[1] & ~BMI160_STEP_MIN_BUF_MASK;
 8002af8:	7b7b      	ldrb	r3, [r7, #13]
 8002afa:	f023 0307 	bic.w	r3, r3, #7
 8002afe:	73fb      	strb	r3, [r7, #15]

            /* Adding steptime_min */
            data_array[1] = temp | ((step_detect_int_cfg->step_min_buf) & BMI160_STEP_MIN_BUF_MASK);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	785b      	ldrb	r3, [r3, #1]
 8002b04:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	737b      	strb	r3, [r7, #13]
        }
    }

    /* Write data to STEP_CONFIG register */
    rslt = bmi160_set_regs(BMI160_INT_STEP_CONFIG_0_ADDR, data_array, 2, dev);
 8002b14:	f107 010c 	add.w	r1, r7, #12
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	207a      	movs	r0, #122	@ 0x7a
 8002b1e:	f7fe f9c6 	bl	8000eae <bmi160_set_regs>
 8002b22:	4603      	mov	r3, r0
 8002b24:	73bb      	strb	r3, [r7, #14]

    return rslt;
 8002b26:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <enable_tap_int>:
 * @brief This API enables the single/double tap interrupt.
 */
static int8_t enable_tap_int(const struct bmi160_int_settg *int_config,
                             const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                             const struct bmi160_dev *dev)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b086      	sub	sp, #24
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	60f8      	str	r0, [r7, #12]
 8002b3a:	60b9      	str	r1, [r7, #8]
 8002b3c:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	757b      	strb	r3, [r7, #21]
    uint8_t temp = 0;
 8002b42:	2300      	movs	r3, #0
 8002b44:	75bb      	strb	r3, [r7, #22]

    /* Enable single tap or double tap interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8002b46:	f107 0115 	add.w	r1, r7, #21
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	2050      	movs	r0, #80	@ 0x50
 8002b50:	f7fe f97a 	bl	8000e48 <bmi160_get_regs>
 8002b54:	4603      	mov	r3, r0
 8002b56:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8002b58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d135      	bne.n	8002bcc <enable_tap_int+0x9a>
    {
        if (int_config->int_type == BMI160_ACC_SINGLE_TAP_INT)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	785b      	ldrb	r3, [r3, #1]
 8002b64:	2b04      	cmp	r3, #4
 8002b66:	d114      	bne.n	8002b92 <enable_tap_int+0x60>
        {
            temp = data & ~BMI160_SINGLE_TAP_INT_EN_MASK;
 8002b68:	7d7b      	ldrb	r3, [r7, #21]
 8002b6a:	f023 0320 	bic.w	r3, r3, #32
 8002b6e:	75bb      	strb	r3, [r7, #22]
            data = temp | ((tap_int_cfg->tap_en << 5) & BMI160_SINGLE_TAP_INT_EN_MASK);
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	785b      	ldrb	r3, [r3, #1]
 8002b74:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	015b      	lsls	r3, r3, #5
 8002b7c:	b25b      	sxtb	r3, r3
 8002b7e:	f003 0320 	and.w	r3, r3, #32
 8002b82:	b25a      	sxtb	r2, r3
 8002b84:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	b25b      	sxtb	r3, r3
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	757b      	strb	r3, [r7, #21]
 8002b90:	e013      	b.n	8002bba <enable_tap_int+0x88>
        }
        else
        {
            temp = data & ~BMI160_DOUBLE_TAP_INT_EN_MASK;
 8002b92:	7d7b      	ldrb	r3, [r7, #21]
 8002b94:	f023 0310 	bic.w	r3, r3, #16
 8002b98:	75bb      	strb	r3, [r7, #22]
            data = temp | ((tap_int_cfg->tap_en << 4) & BMI160_DOUBLE_TAP_INT_EN_MASK);
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	785b      	ldrb	r3, [r3, #1]
 8002b9e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	011b      	lsls	r3, r3, #4
 8002ba6:	b25b      	sxtb	r3, r3
 8002ba8:	f003 0310 	and.w	r3, r3, #16
 8002bac:	b25a      	sxtb	r2, r3
 8002bae:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	b25b      	sxtb	r3, r3
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	757b      	strb	r3, [r7, #21]
        }

        /* Write to Enable 0 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8002bba:	f107 0115 	add.w	r1, r7, #21
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	2050      	movs	r0, #80	@ 0x50
 8002bc4:	f7fe f973 	bl	8000eae <bmi160_set_regs>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8002bcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3718      	adds	r7, #24
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <config_tap_int_settg>:
 * tap interrupt.
 */
static int8_t config_tap_int_settg(const struct bmi160_int_settg *int_config,
                                   const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                                   const struct bmi160_dev *dev)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f7fe fe7f 	bl	80018ea <set_intr_pin_config>
 8002bec:	4603      	mov	r3, r0
 8002bee:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8002bf0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d11a      	bne.n	8002c2e <config_tap_int_settg+0x56>
    {
        rslt = map_feature_interrupt(int_config, dev);
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f7ff faa2 	bl	8002144 <map_feature_interrupt>
 8002c00:	4603      	mov	r3, r0
 8002c02:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8002c04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d110      	bne.n	8002c2e <config_tap_int_settg+0x56>
        {
            rslt = config_tap_data_src(tap_int_cfg, dev);
 8002c0c:	6879      	ldr	r1, [r7, #4]
 8002c0e:	68b8      	ldr	r0, [r7, #8]
 8002c10:	f000 f813 	bl	8002c3a <config_tap_data_src>
 8002c14:	4603      	mov	r3, r0
 8002c16:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 8002c18:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d106      	bne.n	8002c2e <config_tap_int_settg+0x56>
            {
                rslt = config_tap_param(int_config, tap_int_cfg, dev);
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	68b9      	ldr	r1, [r7, #8]
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f000 f841 	bl	8002cac <config_tap_param>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8002c2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3718      	adds	r7, #24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <config_tap_data_src>:
/*!
 * @brief This API configure the source of data(filter & pre-filter)
 * for tap interrupt.
 */
static int8_t config_tap_data_src(const struct bmi160_acc_tap_int_cfg *tap_int_cfg, const struct bmi160_dev *dev)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b084      	sub	sp, #16
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
 8002c42:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002c44:	2300      	movs	r3, #0
 8002c46:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8002c4c:	f107 010d 	add.w	r1, r7, #13
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	2201      	movs	r2, #1
 8002c54:	2058      	movs	r0, #88	@ 0x58
 8002c56:	f7fe f8f7 	bl	8000e48 <bmi160_get_regs>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d11c      	bne.n	8002ca0 <config_tap_data_src+0x66>
    {
        temp = data & ~BMI160_TAP_SRC_INT_MASK;
 8002c66:	7b7b      	ldrb	r3, [r7, #13]
 8002c68:	f023 0308 	bic.w	r3, r3, #8
 8002c6c:	73bb      	strb	r3, [r7, #14]
        data = temp | ((tap_int_cfg->tap_data_src << 3) & BMI160_TAP_SRC_INT_MASK);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	785b      	ldrb	r3, [r3, #1]
 8002c72:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	00db      	lsls	r3, r3, #3
 8002c7a:	b25b      	sxtb	r3, r3
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	b25a      	sxtb	r2, r3
 8002c82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	b25b      	sxtb	r3, r3
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8002c8e:	f107 010d 	add.w	r1, r7, #13
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	2201      	movs	r2, #1
 8002c96:	2058      	movs	r0, #88	@ 0x58
 8002c98:	f7fe f909 	bl	8000eae <bmi160_set_regs>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002ca0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3710      	adds	r7, #16
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}

08002cac <config_tap_param>:
 * Threshold, quite, shock, and duration.
 */
static int8_t config_tap_param(const struct bmi160_int_settg *int_config,
                               const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                               const struct bmi160_dev *dev)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t temp = 0;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	777b      	strb	r3, [r7, #29]
    uint8_t data = 0;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	77bb      	strb	r3, [r7, #30]
    uint8_t data_array[2] = { 0 };
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	82bb      	strh	r3, [r7, #20]
    uint8_t count = 0;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	773b      	strb	r3, [r7, #28]
    uint8_t dur, shock, quiet, thres;

    /* Configure tap 0 register for tap shock,tap quiet duration
     * in case of single tap interrupt */
    rslt = bmi160_get_regs(BMI160_INT_TAP_0_ADDR, data_array, 2, dev);
 8002cc8:	f107 0114 	add.w	r1, r7, #20
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	2063      	movs	r0, #99	@ 0x63
 8002cd2:	f7fe f8b9 	bl	8000e48 <bmi160_get_regs>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMI160_OK)
 8002cda:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d178      	bne.n	8002dd4 <config_tap_param+0x128>
    {
        data = data_array[count];
 8002ce2:	7f3b      	ldrb	r3, [r7, #28]
 8002ce4:	3320      	adds	r3, #32
 8002ce6:	443b      	add	r3, r7
 8002ce8:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002cec:	77bb      	strb	r3, [r7, #30]
        if (int_config->int_type == BMI160_ACC_DOUBLE_TAP_INT)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	785b      	ldrb	r3, [r3, #1]
 8002cf2:	2b03      	cmp	r3, #3
 8002cf4:	d113      	bne.n	8002d1e <config_tap_param+0x72>
        {
            dur = (uint8_t)tap_int_cfg->tap_dur;
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	f3c3 13c2 	ubfx	r3, r3, #7, #3
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	76fb      	strb	r3, [r7, #27]
            temp = (data & ~BMI160_TAP_DUR_MASK);
 8002d02:	7fbb      	ldrb	r3, [r7, #30]
 8002d04:	f023 0307 	bic.w	r3, r3, #7
 8002d08:	777b      	strb	r3, [r7, #29]

            /* Add tap duration data in case of
             * double tap interrupt */
            data = temp | (dur & BMI160_TAP_DUR_MASK);
 8002d0a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	b25a      	sxtb	r2, r3
 8002d14:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	b25b      	sxtb	r3, r3
 8002d1c:	77bb      	strb	r3, [r7, #30]
        }

        shock = (uint8_t)tap_int_cfg->tap_shock;
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	76bb      	strb	r3, [r7, #26]
        temp = data & ~BMI160_TAP_SHOCK_DUR_MASK;
 8002d2a:	7fbb      	ldrb	r3, [r7, #30]
 8002d2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d30:	777b      	strb	r3, [r7, #29]
        data = temp | ((shock << 6) & BMI160_TAP_SHOCK_DUR_MASK);
 8002d32:	7ebb      	ldrb	r3, [r7, #26]
 8002d34:	019b      	lsls	r3, r3, #6
 8002d36:	b25b      	sxtb	r3, r3
 8002d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d3c:	b25a      	sxtb	r2, r3
 8002d3e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	b25b      	sxtb	r3, r3
 8002d46:	77bb      	strb	r3, [r7, #30]
        quiet = (uint8_t)tap_int_cfg->tap_quiet;
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	767b      	strb	r3, [r7, #25]
        temp = data & ~BMI160_TAP_QUIET_DUR_MASK;
 8002d54:	7fbb      	ldrb	r3, [r7, #30]
 8002d56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d5a:	777b      	strb	r3, [r7, #29]
        data = temp | ((quiet << 7) & BMI160_TAP_QUIET_DUR_MASK);
 8002d5c:	7e7b      	ldrb	r3, [r7, #25]
 8002d5e:	01db      	lsls	r3, r3, #7
 8002d60:	b25a      	sxtb	r2, r3
 8002d62:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	b25b      	sxtb	r3, r3
 8002d6a:	77bb      	strb	r3, [r7, #30]
        data_array[count++] = data;
 8002d6c:	7f3b      	ldrb	r3, [r7, #28]
 8002d6e:	1c5a      	adds	r2, r3, #1
 8002d70:	773a      	strb	r2, [r7, #28]
 8002d72:	3320      	adds	r3, #32
 8002d74:	443b      	add	r3, r7
 8002d76:	7fba      	ldrb	r2, [r7, #30]
 8002d78:	f803 2c0c 	strb.w	r2, [r3, #-12]
        data = data_array[count];
 8002d7c:	7f3b      	ldrb	r3, [r7, #28]
 8002d7e:	3320      	adds	r3, #32
 8002d80:	443b      	add	r3, r7
 8002d82:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002d86:	77bb      	strb	r3, [r7, #30]
        thres = (uint8_t)tap_int_cfg->tap_thr;
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	763b      	strb	r3, [r7, #24]
        temp = data & ~BMI160_TAP_THRES_MASK;
 8002d94:	7fbb      	ldrb	r3, [r7, #30]
 8002d96:	f023 031f 	bic.w	r3, r3, #31
 8002d9a:	777b      	strb	r3, [r7, #29]
        data = temp | (thres & BMI160_TAP_THRES_MASK);
 8002d9c:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002da0:	f003 031f 	and.w	r3, r3, #31
 8002da4:	b25a      	sxtb	r2, r3
 8002da6:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	b25b      	sxtb	r3, r3
 8002dae:	77bb      	strb	r3, [r7, #30]
        data_array[count++] = data;
 8002db0:	7f3b      	ldrb	r3, [r7, #28]
 8002db2:	1c5a      	adds	r2, r3, #1
 8002db4:	773a      	strb	r2, [r7, #28]
 8002db6:	3320      	adds	r3, #32
 8002db8:	443b      	add	r3, r7
 8002dba:	7fba      	ldrb	r2, [r7, #30]
 8002dbc:	f803 2c0c 	strb.w	r2, [r3, #-12]

        /* TAP 0 and TAP 1 address lie consecutively,
         * hence writing data to respective registers at one go */

        /* Writing to Tap 0 and Tap 1 Address simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_TAP_0_ADDR, data_array, count, dev);
 8002dc0:	7f3b      	ldrb	r3, [r7, #28]
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	f107 0114 	add.w	r1, r7, #20
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2063      	movs	r0, #99	@ 0x63
 8002dcc:	f7fe f86f 	bl	8000eae <bmi160_set_regs>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8002dd4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3720      	adds	r7, #32
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <enable_orient_int>:

/*!
 * @brief This API enables the orient interrupt.
 */
static int8_t enable_orient_int(const struct bmi160_acc_orient_int_cfg *orient_int_cfg, const struct bmi160_dev *dev)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002dea:	2300      	movs	r3, #0
 8002dec:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8002df2:	f107 010d 	add.w	r1, r7, #13
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	2050      	movs	r0, #80	@ 0x50
 8002dfc:	f7fe f824 	bl	8000e48 <bmi160_get_regs>
 8002e00:	4603      	mov	r3, r0
 8002e02:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002e04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d11c      	bne.n	8002e46 <enable_orient_int+0x66>
    {
        temp = data & ~BMI160_ORIENT_INT_EN_MASK;
 8002e0c:	7b7b      	ldrb	r3, [r7, #13]
 8002e0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e12:	73bb      	strb	r3, [r7, #14]
        data = temp | ((orient_int_cfg->orient_en << 6) & BMI160_ORIENT_INT_EN_MASK);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	789b      	ldrb	r3, [r3, #2]
 8002e18:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	019b      	lsls	r3, r3, #6
 8002e20:	b25b      	sxtb	r3, r3
 8002e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e26:	b25a      	sxtb	r2, r3
 8002e28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	b25b      	sxtb	r3, r3
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8002e34:	f107 010d 	add.w	r1, r7, #13
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	2050      	movs	r0, #80	@ 0x50
 8002e3e:	f7fe f836 	bl	8000eae <bmi160_set_regs>
 8002e42:	4603      	mov	r3, r0
 8002e44:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <config_orient_int_settg>:
/*!
 * @brief This API configure the necessary setting of orientation interrupt.
 */
static int8_t config_orient_int_settg(const struct bmi160_acc_orient_int_cfg *orient_int_cfg,
                                      const struct bmi160_dev *dev)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b084      	sub	sp, #16
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	6078      	str	r0, [r7, #4]
 8002e5a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	73bb      	strb	r3, [r7, #14]
    uint8_t temp = 0;
 8002e60:	2300      	movs	r3, #0
 8002e62:	737b      	strb	r3, [r7, #13]
    uint8_t data_array[2] = { 0, 0 };
 8002e64:	2300      	movs	r3, #0
 8002e66:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_ORIENT registers */
    rslt = bmi160_get_regs(BMI160_INT_ORIENT_0_ADDR, data_array, 2, dev);
 8002e68:	f107 0108 	add.w	r1, r7, #8
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	2202      	movs	r2, #2
 8002e70:	2065      	movs	r0, #101	@ 0x65
 8002e72:	f7fd ffe9 	bl	8000e48 <bmi160_get_regs>
 8002e76:	4603      	mov	r3, r0
 8002e78:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d170      	bne.n	8002f64 <config_orient_int_settg+0x112>
    {
        data = data_array[0];
 8002e82:	7a3b      	ldrb	r3, [r7, #8]
 8002e84:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_MODE_MASK;
 8002e86:	7bbb      	ldrb	r3, [r7, #14]
 8002e88:	f023 0303 	bic.w	r3, r3, #3
 8002e8c:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation mode */
        data = temp | ((orient_int_cfg->orient_mode) & BMI160_ORIENT_MODE_MASK);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	461a      	mov	r2, r3
 8002e9a:	7b7b      	ldrb	r3, [r7, #13]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_BLOCK_MASK;
 8002ea0:	7bbb      	ldrb	r3, [r7, #14]
 8002ea2:	f023 030c 	bic.w	r3, r3, #12
 8002ea6:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation blocking */
        data = temp | ((orient_int_cfg->orient_blocking << 2) & BMI160_ORIENT_BLOCK_MASK);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	b25b      	sxtb	r3, r3
 8002eb6:	f003 030c 	and.w	r3, r3, #12
 8002eba:	b25a      	sxtb	r2, r3
 8002ebc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	b25b      	sxtb	r3, r3
 8002ec4:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_HYST_MASK;
 8002ec6:	7bbb      	ldrb	r3, [r7, #14]
 8002ec8:	f003 030f 	and.w	r3, r3, #15
 8002ecc:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation hysteresis */
        data = temp | ((orient_int_cfg->orient_hyst << 4) & BMI160_ORIENT_HYST_MASK);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	011b      	lsls	r3, r3, #4
 8002eda:	b25a      	sxtb	r2, r3
 8002edc:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	b25b      	sxtb	r3, r3
 8002ee4:	73bb      	strb	r3, [r7, #14]
        data_array[0] = data;
 8002ee6:	7bbb      	ldrb	r3, [r7, #14]
 8002ee8:	723b      	strb	r3, [r7, #8]
        data = data_array[1];
 8002eea:	7a7b      	ldrb	r3, [r7, #9]
 8002eec:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_THETA_MASK;
 8002eee:	7bbb      	ldrb	r3, [r7, #14]
 8002ef0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ef4:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation threshold */
        data = temp | ((orient_int_cfg->orient_theta) & BMI160_ORIENT_THETA_MASK);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	785b      	ldrb	r3, [r3, #1]
 8002efa:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	461a      	mov	r2, r3
 8002f02:	7b7b      	ldrb	r3, [r7, #13]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_UD_ENABLE;
 8002f08:	7bbb      	ldrb	r3, [r7, #14]
 8002f0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f0e:	737b      	strb	r3, [r7, #13]

        /* Adding Orient_ud_en */
        data = temp | ((orient_int_cfg->orient_ud_en << 6) & BMI160_ORIENT_UD_ENABLE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	785b      	ldrb	r3, [r3, #1]
 8002f14:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	019b      	lsls	r3, r3, #6
 8002f1c:	b25b      	sxtb	r3, r3
 8002f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f22:	b25a      	sxtb	r2, r3
 8002f24:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	b25b      	sxtb	r3, r3
 8002f2c:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_AXES_EN_MASK;
 8002f2e:	7bbb      	ldrb	r3, [r7, #14]
 8002f30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f34:	737b      	strb	r3, [r7, #13]

        /* Adding axes_en */
        data = temp | ((orient_int_cfg->axes_ex << 7) & BMI160_AXES_EN_MASK);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	785b      	ldrb	r3, [r3, #1]
 8002f3a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	01db      	lsls	r3, r3, #7
 8002f42:	b25a      	sxtb	r2, r3
 8002f44:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	b25b      	sxtb	r3, r3
 8002f4c:	73bb      	strb	r3, [r7, #14]
        data_array[1] = data;
 8002f4e:	7bbb      	ldrb	r3, [r7, #14]
 8002f50:	727b      	strb	r3, [r7, #9]

        /* Writing data to INT_ORIENT 0 and INT_ORIENT 1
         * registers simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_ORIENT_0_ADDR, data_array, 2, dev);
 8002f52:	f107 0108 	add.w	r1, r7, #8
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2202      	movs	r2, #2
 8002f5a:	2065      	movs	r0, #101	@ 0x65
 8002f5c:	f7fd ffa7 	bl	8000eae <bmi160_set_regs>
 8002f60:	4603      	mov	r3, r0
 8002f62:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002f64:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <enable_flat_int>:

/*!
 * @brief This API enables the flat interrupt.
 */
static int8_t enable_flat_int(const struct bmi160_acc_flat_detect_int_cfg *flat_int, const struct bmi160_dev *dev)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
 8002f78:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	73bb      	strb	r3, [r7, #14]

    /* Enable flat interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8002f82:	f107 010d 	add.w	r1, r7, #13
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	2050      	movs	r0, #80	@ 0x50
 8002f8c:	f7fd ff5c 	bl	8000e48 <bmi160_get_regs>
 8002f90:	4603      	mov	r3, r0
 8002f92:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002f94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d119      	bne.n	8002fd0 <enable_flat_int+0x60>
    {
        temp = data & ~BMI160_FLAT_INT_EN_MASK;
 8002f9c:	7b7b      	ldrb	r3, [r7, #13]
 8002f9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002fa2:	73bb      	strb	r3, [r7, #14]
        data = temp | ((flat_int->flat_en << 7) & BMI160_FLAT_INT_EN_MASK);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	785b      	ldrb	r3, [r3, #1]
 8002fa8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	01db      	lsls	r3, r3, #7
 8002fb0:	b25a      	sxtb	r2, r3
 8002fb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	b25b      	sxtb	r3, r3
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8002fbe:	f107 010d 	add.w	r1, r7, #13
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	2050      	movs	r0, #80	@ 0x50
 8002fc8:	f7fd ff71 	bl	8000eae <bmi160_set_regs>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002fd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <config_flat_int_settg>:

/*!
 * @brief This API configure the necessary setting of flat interrupt.
 */
static int8_t config_flat_int_settg(const struct bmi160_acc_flat_detect_int_cfg *flat_int, const struct bmi160_dev *dev)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	73bb      	strb	r3, [r7, #14]
    uint8_t temp = 0;
 8002fea:	2300      	movs	r3, #0
 8002fec:	737b      	strb	r3, [r7, #13]
    uint8_t data_array[2] = { 0, 0 };
 8002fee:	2300      	movs	r3, #0
 8002ff0:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_FLAT register */
    rslt = bmi160_get_regs(BMI160_INT_FLAT_0_ADDR, data_array, 2, dev);
 8002ff2:	f107 0108 	add.w	r1, r7, #8
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	2067      	movs	r0, #103	@ 0x67
 8002ffc:	f7fd ff24 	bl	8000e48 <bmi160_get_regs>
 8003000:	4603      	mov	r3, r0
 8003002:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003004:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d13d      	bne.n	8003088 <config_flat_int_settg+0xac>
    {
        data = data_array[0];
 800300c:	7a3b      	ldrb	r3, [r7, #8]
 800300e:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_THRES_MASK;
 8003010:	7bbb      	ldrb	r3, [r7, #14]
 8003012:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003016:	737b      	strb	r3, [r7, #13]

        /* Adding flat theta */
        data = temp | ((flat_int->flat_theta) & BMI160_FLAT_THRES_MASK);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8003020:	b2db      	uxtb	r3, r3
 8003022:	461a      	mov	r2, r3
 8003024:	7b7b      	ldrb	r3, [r7, #13]
 8003026:	4313      	orrs	r3, r2
 8003028:	73bb      	strb	r3, [r7, #14]
        data_array[0] = data;
 800302a:	7bbb      	ldrb	r3, [r7, #14]
 800302c:	723b      	strb	r3, [r7, #8]
        data = data_array[1];
 800302e:	7a7b      	ldrb	r3, [r7, #9]
 8003030:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_HOLD_TIME_MASK;
 8003032:	7bbb      	ldrb	r3, [r7, #14]
 8003034:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003038:	737b      	strb	r3, [r7, #13]

        /* Adding flat hold time */
        data = temp | ((flat_int->flat_hold_time << 4) & BMI160_FLAT_HOLD_TIME_MASK);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	785b      	ldrb	r3, [r3, #1]
 800303e:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8003042:	b2db      	uxtb	r3, r3
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	b25b      	sxtb	r3, r3
 8003048:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800304c:	b25a      	sxtb	r2, r3
 800304e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003052:	4313      	orrs	r3, r2
 8003054:	b25b      	sxtb	r3, r3
 8003056:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_HYST_MASK;
 8003058:	7bbb      	ldrb	r3, [r7, #14]
 800305a:	f023 0307 	bic.w	r3, r3, #7
 800305e:	737b      	strb	r3, [r7, #13]

        /* Adding flat hysteresis */
        data = temp | ((flat_int->flat_hy) & BMI160_FLAT_HYST_MASK);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	f3c3 1382 	ubfx	r3, r3, #6, #3
 8003068:	b2db      	uxtb	r3, r3
 800306a:	461a      	mov	r2, r3
 800306c:	7b7b      	ldrb	r3, [r7, #13]
 800306e:	4313      	orrs	r3, r2
 8003070:	73bb      	strb	r3, [r7, #14]
        data_array[1] = data;
 8003072:	7bbb      	ldrb	r3, [r7, #14]
 8003074:	727b      	strb	r3, [r7, #9]

        /* Writing data to INT_FLAT 0 and INT_FLAT 1
         * registers simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_FLAT_0_ADDR, data_array, 2, dev);
 8003076:	f107 0108 	add.w	r1, r7, #8
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	2202      	movs	r2, #2
 800307e:	2067      	movs	r0, #103	@ 0x67
 8003080:	f7fd ff15 	bl	8000eae <bmi160_set_regs>
 8003084:	4603      	mov	r3, r0
 8003086:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003088:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <enable_low_g_int>:

/*!
 * @brief This API enables the Low-g interrupt.
 */
static int8_t enable_low_g_int(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800309e:	2300      	movs	r3, #0
 80030a0:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80030a2:	2300      	movs	r3, #0
 80030a4:	73bb      	strb	r3, [r7, #14]

    /* Enable low-g interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80030a6:	f107 010d 	add.w	r1, r7, #13
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2201      	movs	r2, #1
 80030ae:	2051      	movs	r0, #81	@ 0x51
 80030b0:	f7fd feca 	bl	8000e48 <bmi160_get_regs>
 80030b4:	4603      	mov	r3, r0
 80030b6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80030b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d11c      	bne.n	80030fa <enable_low_g_int+0x66>
    {
        temp = data & ~BMI160_LOW_G_INT_EN_MASK;
 80030c0:	7b7b      	ldrb	r3, [r7, #13]
 80030c2:	f023 0308 	bic.w	r3, r3, #8
 80030c6:	73bb      	strb	r3, [r7, #14]
        data = temp | ((low_g_int->low_en << 3) & BMI160_LOW_G_INT_EN_MASK);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	789b      	ldrb	r3, [r3, #2]
 80030cc:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	b25b      	sxtb	r3, r3
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	b25a      	sxtb	r2, r3
 80030dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	b25b      	sxtb	r3, r3
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80030e8:	f107 010d 	add.w	r1, r7, #13
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	2201      	movs	r2, #1
 80030f0:	2051      	movs	r0, #81	@ 0x51
 80030f2:	f7fd fedc 	bl	8000eae <bmi160_set_regs>
 80030f6:	4603      	mov	r3, r0
 80030f8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80030fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3710      	adds	r7, #16
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <config_low_g_data_src>:
/*!
 * @brief This API configure the source of data(filter & pre-filter)
 * for low-g interrupt.
 */
static int8_t config_low_g_data_src(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b084      	sub	sp, #16
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
 800310e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8003110:	2300      	movs	r3, #0
 8003112:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8003114:	2300      	movs	r3, #0
 8003116:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8003118:	f107 010d 	add.w	r1, r7, #13
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	2201      	movs	r2, #1
 8003120:	2058      	movs	r0, #88	@ 0x58
 8003122:	f7fd fe91 	bl	8000e48 <bmi160_get_regs>
 8003126:	4603      	mov	r3, r0
 8003128:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800312a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d119      	bne.n	8003166 <config_low_g_data_src+0x60>
    {
        temp = data & ~BMI160_LOW_HIGH_SRC_INT_MASK;
 8003132:	7b7b      	ldrb	r3, [r7, #13]
 8003134:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003138:	73bb      	strb	r3, [r7, #14]
        data = temp | ((low_g_int->low_data_src << 7) & BMI160_LOW_HIGH_SRC_INT_MASK);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	789b      	ldrb	r3, [r3, #2]
 800313e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003142:	b2db      	uxtb	r3, r3
 8003144:	01db      	lsls	r3, r3, #7
 8003146:	b25a      	sxtb	r2, r3
 8003148:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800314c:	4313      	orrs	r3, r2
 800314e:	b25b      	sxtb	r3, r3
 8003150:	b2db      	uxtb	r3, r3
 8003152:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8003154:	f107 010d 	add.w	r1, r7, #13
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	2201      	movs	r2, #1
 800315c:	2058      	movs	r0, #88	@ 0x58
 800315e:	f7fd fea6 	bl	8000eae <bmi160_set_regs>
 8003162:	4603      	mov	r3, r0
 8003164:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003166:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
	...

08003174 <config_low_g_int_settg>:

/*!
 * @brief This API configure the necessary setting of low-g interrupt.
 */
static int8_t config_low_g_int_settg(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 800317e:	2300      	movs	r3, #0
 8003180:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[3] = { 0, 0, 0 };
 8003182:	4a27      	ldr	r2, [pc, #156]	@ (8003220 <config_low_g_int_settg+0xac>)
 8003184:	f107 0308 	add.w	r3, r7, #8
 8003188:	6812      	ldr	r2, [r2, #0]
 800318a:	4611      	mov	r1, r2
 800318c:	8019      	strh	r1, [r3, #0]
 800318e:	3302      	adds	r3, #2
 8003190:	0c12      	lsrs	r2, r2, #16
 8003192:	701a      	strb	r2, [r3, #0]

    /* Configuring INT_LOWHIGH register for low-g interrupt */
    rslt = bmi160_get_regs(BMI160_INT_LOWHIGH_2_ADDR, &data_array[2], 1, dev);
 8003194:	f107 0308 	add.w	r3, r7, #8
 8003198:	1c99      	adds	r1, r3, #2
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	2201      	movs	r2, #1
 800319e:	205c      	movs	r0, #92	@ 0x5c
 80031a0:	f7fd fe52 	bl	8000e48 <bmi160_get_regs>
 80031a4:	4603      	mov	r3, r0
 80031a6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80031a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d130      	bne.n	8003212 <config_low_g_int_settg+0x9e>
    {
        temp = data_array[2] & ~BMI160_LOW_G_HYST_MASK;
 80031b0:	7abb      	ldrb	r3, [r7, #10]
 80031b2:	f023 0303 	bic.w	r3, r3, #3
 80031b6:	73bb      	strb	r3, [r7, #14]

        /* Adding low-g hysteresis */
        data_array[2] = temp | (low_g_int->low_hyst & BMI160_LOW_G_HYST_MASK);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	789b      	ldrb	r3, [r3, #2]
 80031bc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	461a      	mov	r2, r3
 80031c4:	7bbb      	ldrb	r3, [r7, #14]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	72bb      	strb	r3, [r7, #10]
        temp = data_array[2] & ~BMI160_LOW_G_LOW_MODE_MASK;
 80031cc:	7abb      	ldrb	r3, [r7, #10]
 80031ce:	f023 0304 	bic.w	r3, r3, #4
 80031d2:	73bb      	strb	r3, [r7, #14]

        /* Adding low-mode */
        data_array[2] = temp | ((low_g_int->low_mode << 2) & BMI160_LOW_G_LOW_MODE_MASK);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	789b      	ldrb	r3, [r3, #2]
 80031d8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	b25b      	sxtb	r3, r3
 80031e2:	f003 0304 	and.w	r3, r3, #4
 80031e6:	b25a      	sxtb	r2, r3
 80031e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	b25b      	sxtb	r3, r3
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	72bb      	strb	r3, [r7, #10]

        /* Adding low-g threshold */
        data_array[1] = low_g_int->low_thres;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	785b      	ldrb	r3, [r3, #1]
 80031f8:	727b      	strb	r3, [r7, #9]

        /* Adding low-g interrupt delay */
        data_array[0] = low_g_int->low_dur;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	723b      	strb	r3, [r7, #8]

        /* Writing data to INT_LOWHIGH 0,1,2 registers simultaneously*/
        rslt = bmi160_set_regs(BMI160_INT_LOWHIGH_0_ADDR, data_array, 3, dev);
 8003200:	f107 0108 	add.w	r1, r7, #8
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	2203      	movs	r2, #3
 8003208:	205a      	movs	r0, #90	@ 0x5a
 800320a:	f7fd fe50 	bl	8000eae <bmi160_set_regs>
 800320e:	4603      	mov	r3, r0
 8003210:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003212:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	08014920 	.word	0x08014920

08003224 <enable_high_g_int>:

/*!
 * @brief This API enables the high-g interrupt.
 */
static int8_t enable_high_g_int(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg, const struct bmi160_dev *dev)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800322e:	2300      	movs	r3, #0
 8003230:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8003232:	2300      	movs	r3, #0
 8003234:	73bb      	strb	r3, [r7, #14]

    /* Enable low-g interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8003236:	f107 010d 	add.w	r1, r7, #13
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2201      	movs	r2, #1
 800323e:	2051      	movs	r0, #81	@ 0x51
 8003240:	f7fd fe02 	bl	8000e48 <bmi160_get_regs>
 8003244:	4603      	mov	r3, r0
 8003246:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003248:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d13e      	bne.n	80032ce <enable_high_g_int+0xaa>
    {
        /* Adding high-g X-axis */
        temp = data & ~BMI160_HIGH_G_X_INT_EN_MASK;
 8003250:	7b7b      	ldrb	r3, [r7, #13]
 8003252:	f023 0301 	bic.w	r3, r3, #1
 8003256:	73bb      	strb	r3, [r7, #14]
        data = temp | (high_g_int_cfg->high_g_x & BMI160_HIGH_G_X_INT_EN_MASK);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003260:	b2db      	uxtb	r3, r3
 8003262:	461a      	mov	r2, r3
 8003264:	7bbb      	ldrb	r3, [r7, #14]
 8003266:	4313      	orrs	r3, r2
 8003268:	b2db      	uxtb	r3, r3
 800326a:	737b      	strb	r3, [r7, #13]

        /* Adding high-g Y-axis */
        temp = data & ~BMI160_HIGH_G_Y_INT_EN_MASK;
 800326c:	7b7b      	ldrb	r3, [r7, #13]
 800326e:	f023 0302 	bic.w	r3, r3, #2
 8003272:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_g_y << 1) & BMI160_HIGH_G_Y_INT_EN_MASK);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800327c:	b2db      	uxtb	r3, r3
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	b25b      	sxtb	r3, r3
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	b25a      	sxtb	r2, r3
 8003288:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800328c:	4313      	orrs	r3, r2
 800328e:	b25b      	sxtb	r3, r3
 8003290:	b2db      	uxtb	r3, r3
 8003292:	737b      	strb	r3, [r7, #13]

        /* Adding high-g Z-axis */
        temp = data & ~BMI160_HIGH_G_Z_INT_EN_MASK;
 8003294:	7b7b      	ldrb	r3, [r7, #13]
 8003296:	f023 0304 	bic.w	r3, r3, #4
 800329a:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_g_z << 2) & BMI160_HIGH_G_Z_INT_EN_MASK);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	b25b      	sxtb	r3, r3
 80032aa:	f003 0304 	and.w	r3, r3, #4
 80032ae:	b25a      	sxtb	r2, r3
 80032b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80032b4:	4313      	orrs	r3, r2
 80032b6:	b25b      	sxtb	r3, r3
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80032bc:	f107 010d 	add.w	r1, r7, #13
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	2201      	movs	r2, #1
 80032c4:	2051      	movs	r0, #81	@ 0x51
 80032c6:	f7fd fdf2 	bl	8000eae <bmi160_set_regs>
 80032ca:	4603      	mov	r3, r0
 80032cc:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80032ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3710      	adds	r7, #16
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <config_high_g_data_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for high-g interrupt.
 */
static int8_t config_high_g_data_src(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg,
                                     const struct bmi160_dev *dev)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b084      	sub	sp, #16
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
 80032e2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80032e4:	2300      	movs	r3, #0
 80032e6:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 80032ec:	f107 010d 	add.w	r1, r7, #13
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	2201      	movs	r2, #1
 80032f4:	2058      	movs	r0, #88	@ 0x58
 80032f6:	f7fd fda7 	bl	8000e48 <bmi160_get_regs>
 80032fa:	4603      	mov	r3, r0
 80032fc:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80032fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d119      	bne.n	800333a <config_high_g_data_src+0x60>
    {
        temp = data & ~BMI160_LOW_HIGH_SRC_INT_MASK;
 8003306:	7b7b      	ldrb	r3, [r7, #13]
 8003308:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800330c:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_data_src << 7) & BMI160_LOW_HIGH_SRC_INT_MASK);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003316:	b2db      	uxtb	r3, r3
 8003318:	01db      	lsls	r3, r3, #7
 800331a:	b25a      	sxtb	r2, r3
 800331c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003320:	4313      	orrs	r3, r2
 8003322:	b25b      	sxtb	r3, r3
 8003324:	b2db      	uxtb	r3, r3
 8003326:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 8003328:	f107 010d 	add.w	r1, r7, #13
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	2201      	movs	r2, #1
 8003330:	2058      	movs	r0, #88	@ 0x58
 8003332:	f7fd fdbc 	bl	8000eae <bmi160_set_regs>
 8003336:	4603      	mov	r3, r0
 8003338:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800333a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800333e:	4618      	mov	r0, r3
 8003340:	3710      	adds	r7, #16
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
	...

08003348 <config_high_g_int_settg>:
/*!
 * @brief This API configure the necessary setting of high-g interrupt.
 */
static int8_t config_high_g_int_settg(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg,
                                      const struct bmi160_dev *dev)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[3] = { 0, 0, 0 };
 8003356:	4a1e      	ldr	r2, [pc, #120]	@ (80033d0 <config_high_g_int_settg+0x88>)
 8003358:	f107 0308 	add.w	r3, r7, #8
 800335c:	6812      	ldr	r2, [r2, #0]
 800335e:	4611      	mov	r1, r2
 8003360:	8019      	strh	r1, [r3, #0]
 8003362:	3302      	adds	r3, #2
 8003364:	0c12      	lsrs	r2, r2, #16
 8003366:	701a      	strb	r2, [r3, #0]

    rslt = bmi160_get_regs(BMI160_INT_LOWHIGH_2_ADDR, &data_array[0], 1, dev);
 8003368:	f107 0108 	add.w	r1, r7, #8
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	2201      	movs	r2, #1
 8003370:	205c      	movs	r0, #92	@ 0x5c
 8003372:	f7fd fd69 	bl	8000e48 <bmi160_get_regs>
 8003376:	4603      	mov	r3, r0
 8003378:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800337a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d11f      	bne.n	80033c2 <config_high_g_int_settg+0x7a>
    {
        temp = data_array[0] & ~BMI160_HIGH_G_HYST_MASK;
 8003382:	7a3b      	ldrb	r3, [r7, #8]
 8003384:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003388:	73bb      	strb	r3, [r7, #14]

        /* Adding high-g hysteresis */
        data_array[0] = temp | ((high_g_int_cfg->high_hy << 6) & BMI160_HIGH_G_HYST_MASK);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003392:	b2db      	uxtb	r3, r3
 8003394:	019b      	lsls	r3, r3, #6
 8003396:	b25a      	sxtb	r2, r3
 8003398:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800339c:	4313      	orrs	r3, r2
 800339e:	b25b      	sxtb	r3, r3
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	723b      	strb	r3, [r7, #8]

        /* Adding high-g duration */
        data_array[1] = high_g_int_cfg->high_dur;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	789b      	ldrb	r3, [r3, #2]
 80033a8:	727b      	strb	r3, [r7, #9]

        /* Adding high-g threshold */
        data_array[2] = high_g_int_cfg->high_thres;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	785b      	ldrb	r3, [r3, #1]
 80033ae:	72bb      	strb	r3, [r7, #10]
        rslt = bmi160_set_regs(BMI160_INT_LOWHIGH_2_ADDR, data_array, 3, dev);
 80033b0:	f107 0108 	add.w	r1, r7, #8
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	2203      	movs	r2, #3
 80033b8:	205c      	movs	r0, #92	@ 0x5c
 80033ba:	f7fd fd78 	bl	8000eae <bmi160_set_regs>
 80033be:	4603      	mov	r3, r0
 80033c0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80033c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	08014920 	.word	0x08014920

080033d4 <config_int_out_ctrl>:

/*!
 * @brief This API configure the behavioural setting of interrupt pin.
 */
static int8_t config_int_out_ctrl(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 80033de:	2300      	movs	r3, #0
 80033e0:	75bb      	strb	r3, [r7, #22]
    uint8_t data = 0;
 80033e2:	2300      	movs	r3, #0
 80033e4:	73fb      	strb	r3, [r7, #15]

    /* Configuration of output interrupt signals on pins INT1 and INT2 are
     * done in BMI160_INT_OUT_CTRL_ADDR register*/
    rslt = bmi160_get_regs(BMI160_INT_OUT_CTRL_ADDR, &data, 1, dev);
 80033e6:	f107 010f 	add.w	r1, r7, #15
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2201      	movs	r2, #1
 80033ee:	2053      	movs	r0, #83	@ 0x53
 80033f0:	f7fd fd2a 	bl	8000e48 <bmi160_get_regs>
 80033f4:	4603      	mov	r3, r0
 80033f6:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 80033f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f040 80a8 	bne.w	8003552 <config_int_out_ctrl+0x17e>
    {
        /* updating the interrupt pin structure to local structure */
        const struct bmi160_int_pin_settg *intr_pin_sett = &(int_config->int_pin_settg);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	3302      	adds	r3, #2
 8003406:	613b      	str	r3, [r7, #16]

        /* Configuring channel 1 */
        if (int_config->int_channel == BMI160_INT_CHANNEL_1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d14a      	bne.n	80034a6 <config_int_out_ctrl+0xd2>
        {
            /* Output enable */
            temp = data & ~BMI160_INT1_OUTPUT_EN_MASK;
 8003410:	7bfb      	ldrb	r3, [r7, #15]
 8003412:	f023 0308 	bic.w	r3, r3, #8
 8003416:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_en << 3) & BMI160_INT1_OUTPUT_EN_MASK);
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003420:	b2db      	uxtb	r3, r3
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	b25b      	sxtb	r3, r3
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	b25a      	sxtb	r2, r3
 800342c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003430:	4313      	orrs	r3, r2
 8003432:	b25b      	sxtb	r3, r3
 8003434:	b2db      	uxtb	r3, r3
 8003436:	73fb      	strb	r3, [r7, #15]

            /* Output mode */
            temp = data & ~BMI160_INT1_OUTPUT_MODE_MASK;
 8003438:	7bfb      	ldrb	r3, [r7, #15]
 800343a:	f023 0304 	bic.w	r3, r3, #4
 800343e:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_mode << 2) & BMI160_INT1_OUTPUT_MODE_MASK);
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003448:	b2db      	uxtb	r3, r3
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	b25b      	sxtb	r3, r3
 800344e:	f003 0304 	and.w	r3, r3, #4
 8003452:	b25a      	sxtb	r2, r3
 8003454:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003458:	4313      	orrs	r3, r2
 800345a:	b25b      	sxtb	r3, r3
 800345c:	b2db      	uxtb	r3, r3
 800345e:	73fb      	strb	r3, [r7, #15]

            /* Output type */
            temp = data & ~BMI160_INT1_OUTPUT_TYPE_MASK;
 8003460:	7bfb      	ldrb	r3, [r7, #15]
 8003462:	f023 0302 	bic.w	r3, r3, #2
 8003466:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_type << 1) & BMI160_INT1_OUTPUT_TYPE_MASK);
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003470:	b2db      	uxtb	r3, r3
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	b25b      	sxtb	r3, r3
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	b25a      	sxtb	r2, r3
 800347c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003480:	4313      	orrs	r3, r2
 8003482:	b25b      	sxtb	r3, r3
 8003484:	b2db      	uxtb	r3, r3
 8003486:	73fb      	strb	r3, [r7, #15]

            /* edge control */
            temp = data & ~BMI160_INT1_EDGE_CTRL_MASK;
 8003488:	7bfb      	ldrb	r3, [r7, #15]
 800348a:	f023 0301 	bic.w	r3, r3, #1
 800348e:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->edge_ctrl) & BMI160_INT1_EDGE_CTRL_MASK);
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003498:	b2db      	uxtb	r3, r3
 800349a:	461a      	mov	r2, r3
 800349c:	7dbb      	ldrb	r3, [r7, #22]
 800349e:	4313      	orrs	r3, r2
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	73fb      	strb	r3, [r7, #15]
 80034a4:	e04c      	b.n	8003540 <config_int_out_ctrl+0x16c>
        }
        else
        {
            /* Configuring channel 2 */
            /* Output enable */
            temp = data & ~BMI160_INT2_OUTPUT_EN_MASK;
 80034a6:	7bfb      	ldrb	r3, [r7, #15]
 80034a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034ac:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_en << 7) & BMI160_INT2_OUTPUT_EN_MASK);
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	01db      	lsls	r3, r3, #7
 80034ba:	b25a      	sxtb	r2, r3
 80034bc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	b25b      	sxtb	r3, r3
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	73fb      	strb	r3, [r7, #15]

            /* Output mode */
            temp = data & ~BMI160_INT2_OUTPUT_MODE_MASK;
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
 80034ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034ce:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_mode << 6) & BMI160_INT2_OUTPUT_MODE_MASK);
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	019b      	lsls	r3, r3, #6
 80034dc:	b25b      	sxtb	r3, r3
 80034de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034e2:	b25a      	sxtb	r2, r3
 80034e4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	b25b      	sxtb	r3, r3
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	73fb      	strb	r3, [r7, #15]

            /* Output type */
            temp = data & ~BMI160_INT2_OUTPUT_TYPE_MASK;
 80034f0:	7bfb      	ldrb	r3, [r7, #15]
 80034f2:	f023 0320 	bic.w	r3, r3, #32
 80034f6:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_type << 5) & BMI160_INT2_OUTPUT_TYPE_MASK);
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003500:	b2db      	uxtb	r3, r3
 8003502:	015b      	lsls	r3, r3, #5
 8003504:	b25b      	sxtb	r3, r3
 8003506:	f003 0320 	and.w	r3, r3, #32
 800350a:	b25a      	sxtb	r2, r3
 800350c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003510:	4313      	orrs	r3, r2
 8003512:	b25b      	sxtb	r3, r3
 8003514:	b2db      	uxtb	r3, r3
 8003516:	73fb      	strb	r3, [r7, #15]

            /* edge control */
            temp = data & ~BMI160_INT2_EDGE_CTRL_MASK;
 8003518:	7bfb      	ldrb	r3, [r7, #15]
 800351a:	f023 0310 	bic.w	r3, r3, #16
 800351e:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->edge_ctrl << 4) & BMI160_INT2_EDGE_CTRL_MASK);
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003528:	b2db      	uxtb	r3, r3
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	b25b      	sxtb	r3, r3
 800352e:	f003 0310 	and.w	r3, r3, #16
 8003532:	b25a      	sxtb	r2, r3
 8003534:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003538:	4313      	orrs	r3, r2
 800353a:	b25b      	sxtb	r3, r3
 800353c:	b2db      	uxtb	r3, r3
 800353e:	73fb      	strb	r3, [r7, #15]
        }

        rslt = bmi160_set_regs(BMI160_INT_OUT_CTRL_ADDR, &data, 1, dev);
 8003540:	f107 010f 	add.w	r1, r7, #15
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	2201      	movs	r2, #1
 8003548:	2053      	movs	r0, #83	@ 0x53
 800354a:	f7fd fcb0 	bl	8000eae <bmi160_set_regs>
 800354e:	4603      	mov	r3, r0
 8003550:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003552:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3718      	adds	r7, #24
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <config_int_latch>:

/*!
 * @brief This API configure the mode(input enable, latch or non-latch) of interrupt pin.
 */
static int8_t config_int_latch(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b086      	sub	sp, #24
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
 8003566:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8003568:	2300      	movs	r3, #0
 800356a:	75bb      	strb	r3, [r7, #22]
    uint8_t data = 0;
 800356c:	2300      	movs	r3, #0
 800356e:	73fb      	strb	r3, [r7, #15]

    /* Configuration of latch on pins INT1 and INT2 are done in
     * BMI160_INT_LATCH_ADDR register*/
    rslt = bmi160_get_regs(BMI160_INT_LATCH_ADDR, &data, 1, dev);
 8003570:	f107 010f 	add.w	r1, r7, #15
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	2201      	movs	r2, #1
 8003578:	2054      	movs	r0, #84	@ 0x54
 800357a:	f7fd fc65 	bl	8000e48 <bmi160_get_regs>
 800357e:	4603      	mov	r3, r0
 8003580:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8003582:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d146      	bne.n	8003618 <config_int_latch+0xba>
    {
        /* updating the interrupt pin structure to local structure */
        const struct bmi160_int_pin_settg *intr_pin_sett = &(int_config->int_pin_settg);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	3302      	adds	r3, #2
 800358e:	613b      	str	r3, [r7, #16]
        if (int_config->int_channel == BMI160_INT_CHANNEL_1)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d114      	bne.n	80035c2 <config_int_latch+0x64>
        {
            /* Configuring channel 1 */
            /* Input enable */
            temp = data & ~BMI160_INT1_INPUT_EN_MASK;
 8003598:	7bfb      	ldrb	r3, [r7, #15]
 800359a:	f023 0310 	bic.w	r3, r3, #16
 800359e:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->input_en << 4) & BMI160_INT1_INPUT_EN_MASK);
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	b25b      	sxtb	r3, r3
 80035ae:	f003 0310 	and.w	r3, r3, #16
 80035b2:	b25a      	sxtb	r2, r3
 80035b4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	b25b      	sxtb	r3, r3
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	73fb      	strb	r3, [r7, #15]
 80035c0:	e013      	b.n	80035ea <config_int_latch+0x8c>
        }
        else
        {
            /* Configuring channel 2 */
            /* Input enable */
            temp = data & ~BMI160_INT2_INPUT_EN_MASK;
 80035c2:	7bfb      	ldrb	r3, [r7, #15]
 80035c4:	f023 0320 	bic.w	r3, r3, #32
 80035c8:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->input_en << 5) & BMI160_INT2_INPUT_EN_MASK);
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	015b      	lsls	r3, r3, #5
 80035d6:	b25b      	sxtb	r3, r3
 80035d8:	f003 0320 	and.w	r3, r3, #32
 80035dc:	b25a      	sxtb	r2, r3
 80035de:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	b25b      	sxtb	r3, r3
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	73fb      	strb	r3, [r7, #15]

        /* In case of latch interrupt,update the latch duration */

        /* Latching holds the interrupt for the amount of latch
         * duration time */
        temp = data & ~BMI160_INT_LATCH_MASK;
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	f023 030f 	bic.w	r3, r3, #15
 80035f0:	75bb      	strb	r3, [r7, #22]
        data = temp | (intr_pin_sett->latch_dur & BMI160_INT_LATCH_MASK);
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	881b      	ldrh	r3, [r3, #0]
 80035f6:	f3c3 1343 	ubfx	r3, r3, #5, #4
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	461a      	mov	r2, r3
 80035fe:	7dbb      	ldrb	r3, [r7, #22]
 8003600:	4313      	orrs	r3, r2
 8003602:	b2db      	uxtb	r3, r3
 8003604:	73fb      	strb	r3, [r7, #15]

        /* OUT_CTRL_INT and LATCH_INT address lie consecutively,
         * hence writing data to respective registers at one go */
        rslt = bmi160_set_regs(BMI160_INT_LATCH_ADDR, &data, 1, dev);
 8003606:	f107 010f 	add.w	r1, r7, #15
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2201      	movs	r2, #1
 800360e:	2054      	movs	r0, #84	@ 0x54
 8003610:	f7fd fc4d 	bl	8000eae <bmi160_set_regs>
 8003614:	4603      	mov	r3, r0
 8003616:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003618:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800361c:	4618      	mov	r0, r3
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <set_fifo_full_int>:
 *  @brief This API sets FIFO full interrupt of the sensor.This interrupt
 *  occurs when the FIFO is full and the next full data sample would cause
 *  a FIFO overflow, which may delete the old samples.
 */
static int8_t set_fifo_full_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 800362e:	2300      	movs	r3, #0
 8003630:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <set_fifo_full_int+0x1c>
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363c:	2b00      	cmp	r3, #0
 800363e:	d102      	bne.n	8003646 <set_fifo_full_int+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8003640:	23ff      	movs	r3, #255	@ 0xff
 8003642:	73fb      	strb	r3, [r7, #15]
 8003644:	e019      	b.n	800367a <set_fifo_full_int+0x56>
    }
    else
    {
        /*enable the fifo full interrupt */
        rslt = enable_fifo_full_int(int_config, dev);
 8003646:	6839      	ldr	r1, [r7, #0]
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f000 f81c 	bl	8003686 <enable_fifo_full_int>
 800364e:	4603      	mov	r3, r0
 8003650:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8003652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10f      	bne.n	800367a <set_fifo_full_int+0x56>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 800365a:	6839      	ldr	r1, [r7, #0]
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7fe f944 	bl	80018ea <set_intr_pin_config>
 8003662:	4603      	mov	r3, r0
 8003664:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8003666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d105      	bne.n	800367a <set_fifo_full_int+0x56>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 800366e:	6839      	ldr	r1, [r7, #0]
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f7fe fe01 	bl	8002278 <map_hardware_interrupt>
 8003676:	4603      	mov	r3, r0
 8003678:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800367a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800367e:	4618      	mov	r0, r3
 8003680:	3710      	adds	r7, #16
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}

08003686 <enable_fifo_full_int>:

/*!
 * @brief This enable the FIFO full interrupt engine.
 */
static int8_t enable_fifo_full_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8003686:	b580      	push	{r7, lr}
 8003688:	b084      	sub	sp, #16
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8003690:	2300      	movs	r3, #0
 8003692:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8003694:	f107 010e 	add.w	r1, r7, #14
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	2201      	movs	r2, #1
 800369c:	2051      	movs	r0, #81	@ 0x51
 800369e:	f7fd fbd3 	bl	8000e48 <bmi160_get_regs>
 80036a2:	4603      	mov	r3, r0
 80036a4:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80036a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d11b      	bne.n	80036e6 <enable_fifo_full_int+0x60>
    {
        data = BMI160_SET_BITS(data, BMI160_FIFO_FULL_INT, int_config->fifo_full_int_en);
 80036ae:	7bbb      	ldrb	r3, [r7, #14]
 80036b0:	b25b      	sxtb	r3, r3
 80036b2:	f023 0320 	bic.w	r3, r3, #32
 80036b6:	b25a      	sxtb	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	7a1b      	ldrb	r3, [r3, #8]
 80036bc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	015b      	lsls	r3, r3, #5
 80036c4:	b25b      	sxtb	r3, r3
 80036c6:	f003 0320 	and.w	r3, r3, #32
 80036ca:	b25b      	sxtb	r3, r3
 80036cc:	4313      	orrs	r3, r2
 80036ce:	b25b      	sxtb	r3, r3
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	73bb      	strb	r3, [r7, #14]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80036d4:	f107 010e 	add.w	r1, r7, #14
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	2201      	movs	r2, #1
 80036dc:	2051      	movs	r0, #81	@ 0x51
 80036de:	f7fd fbe6 	bl	8000eae <bmi160_set_regs>
 80036e2:	4603      	mov	r3, r0
 80036e4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80036e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <set_fifo_watermark_int>:
 *  @brief This API sets FIFO watermark interrupt of the sensor.The FIFO
 *  watermark interrupt is fired, when the FIFO fill level is above a fifo
 *  watermark.
 */
static int8_t set_fifo_watermark_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b084      	sub	sp, #16
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->delay_ms == NULL))
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <set_fifo_watermark_int+0x1c>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800370a:	2b00      	cmp	r3, #0
 800370c:	d102      	bne.n	8003714 <set_fifo_watermark_int+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 800370e:	23ff      	movs	r3, #255	@ 0xff
 8003710:	73fb      	strb	r3, [r7, #15]
 8003712:	e019      	b.n	8003748 <set_fifo_watermark_int+0x56>
    }
    else
    {
        /* Enable fifo-watermark interrupt in Int Enable 1 register */
        rslt = enable_fifo_wtm_int(int_config, dev);
 8003714:	6839      	ldr	r1, [r7, #0]
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f81c 	bl	8003754 <enable_fifo_wtm_int>
 800371c:	4603      	mov	r3, r0
 800371e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8003720:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10f      	bne.n	8003748 <set_fifo_watermark_int+0x56>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8003728:	6839      	ldr	r1, [r7, #0]
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7fe f8dd 	bl	80018ea <set_intr_pin_config>
 8003730:	4603      	mov	r3, r0
 8003732:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8003734:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d105      	bne.n	8003748 <set_fifo_watermark_int+0x56>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 800373c:	6839      	ldr	r1, [r7, #0]
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7fe fd9a 	bl	8002278 <map_hardware_interrupt>
 8003744:	4603      	mov	r3, r0
 8003746:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8003748:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <enable_fifo_wtm_int>:

/*!
 * @brief This enable the FIFO watermark interrupt engine.
 */
static int8_t enable_fifo_wtm_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800375e:	2300      	movs	r3, #0
 8003760:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8003762:	f107 010e 	add.w	r1, r7, #14
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	2201      	movs	r2, #1
 800376a:	2051      	movs	r0, #81	@ 0x51
 800376c:	f7fd fb6c 	bl	8000e48 <bmi160_get_regs>
 8003770:	4603      	mov	r3, r0
 8003772:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003774:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d11b      	bne.n	80037b4 <enable_fifo_wtm_int+0x60>
    {
        data = BMI160_SET_BITS(data, BMI160_FIFO_WTM_INT, int_config->fifo_wtm_int_en);
 800377c:	7bbb      	ldrb	r3, [r7, #14]
 800377e:	b25b      	sxtb	r3, r3
 8003780:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003784:	b25a      	sxtb	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	7a1b      	ldrb	r3, [r3, #8]
 800378a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800378e:	b2db      	uxtb	r3, r3
 8003790:	019b      	lsls	r3, r3, #6
 8003792:	b25b      	sxtb	r3, r3
 8003794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003798:	b25b      	sxtb	r3, r3
 800379a:	4313      	orrs	r3, r2
 800379c:	b25b      	sxtb	r3, r3
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	73bb      	strb	r3, [r7, #14]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80037a2:	f107 010e 	add.w	r1, r7, #14
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	2201      	movs	r2, #1
 80037aa:	2051      	movs	r0, #81	@ 0x51
 80037ac:	f7fd fb7f 	bl	8000eae <bmi160_set_regs>
 80037b0:	4603      	mov	r3, r0
 80037b2:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80037b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <get_foc_status>:

/*!
 *  @brief This API is used to get the FOC status from the sensor
 */
static int8_t get_foc_status(uint8_t *foc_status, struct bmi160_dev const *dev)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;

    /* Read the FOC status from sensor */
    rslt = bmi160_get_regs(BMI160_STATUS_ADDR, &data, 1, dev);
 80037ca:	f107 010e 	add.w	r1, r7, #14
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	2201      	movs	r2, #1
 80037d2:	201b      	movs	r0, #27
 80037d4:	f7fd fb38 	bl	8000e48 <bmi160_get_regs>
 80037d8:	4603      	mov	r3, r0
 80037da:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80037dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d107      	bne.n	80037f4 <get_foc_status+0x34>
    {
        /* Get the foc_status bit */
        *foc_status = BMI160_GET_BITS(data, BMI160_FOC_STATUS);
 80037e4:	7bbb      	ldrb	r3, [r7, #14]
 80037e6:	10db      	asrs	r3, r3, #3
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 80037f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <configure_offset_enable>:

/*!
 *  @brief This API is used to configure the offset enable bits in the sensor
 */
static int8_t configure_offset_enable(const struct bmi160_foc_conf *foc_conf, struct bmi160_dev const *dev)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800380a:	6838      	ldr	r0, [r7, #0]
 800380c:	f7fe f888 	bl	8001920 <null_ptr_check>
 8003810:	4603      	mov	r3, r0
 8003812:	73fb      	strb	r3, [r7, #15]
    if (rslt != BMI160_OK)
 8003814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d002      	beq.n	8003822 <configure_offset_enable+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 800381c:	23ff      	movs	r3, #255	@ 0xff
 800381e:	73fb      	strb	r3, [r7, #15]
 8003820:	e032      	b.n	8003888 <configure_offset_enable+0x88>
    }
    else
    {
        /* Read the FOC config from the sensor */
        rslt = bmi160_get_regs(BMI160_OFFSET_CONF_ADDR, &data, 1, dev);
 8003822:	f107 010e 	add.w	r1, r7, #14
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	2201      	movs	r2, #1
 800382a:	2077      	movs	r0, #119	@ 0x77
 800382c:	f7fd fb0c 	bl	8000e48 <bmi160_get_regs>
 8003830:	4603      	mov	r3, r0
 8003832:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8003834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d125      	bne.n	8003888 <configure_offset_enable+0x88>
        {
            /* Set the offset enable/disable for gyro */
            data = BMI160_SET_BITS(data, BMI160_GYRO_OFFSET_EN, foc_conf->gyro_off_en);
 800383c:	7bbb      	ldrb	r3, [r7, #14]
 800383e:	b25b      	sxtb	r3, r3
 8003840:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003844:	b25a      	sxtb	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	795b      	ldrb	r3, [r3, #5]
 800384a:	01db      	lsls	r3, r3, #7
 800384c:	b25b      	sxtb	r3, r3
 800384e:	4313      	orrs	r3, r2
 8003850:	b25b      	sxtb	r3, r3
 8003852:	b2db      	uxtb	r3, r3
 8003854:	73bb      	strb	r3, [r7, #14]

            /* Set the offset enable/disable for accel */
            data = BMI160_SET_BITS(data, BMI160_ACCEL_OFFSET_EN, foc_conf->acc_off_en);
 8003856:	7bbb      	ldrb	r3, [r7, #14]
 8003858:	b25b      	sxtb	r3, r3
 800385a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800385e:	b25a      	sxtb	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	791b      	ldrb	r3, [r3, #4]
 8003864:	019b      	lsls	r3, r3, #6
 8003866:	b25b      	sxtb	r3, r3
 8003868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800386c:	b25b      	sxtb	r3, r3
 800386e:	4313      	orrs	r3, r2
 8003870:	b25b      	sxtb	r3, r3
 8003872:	b2db      	uxtb	r3, r3
 8003874:	73bb      	strb	r3, [r7, #14]

            /* Set the offset config in the sensor */
            rslt = bmi160_set_regs(BMI160_OFFSET_CONF_ADDR, &data, 1, dev);
 8003876:	f107 010e 	add.w	r1, r7, #14
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2201      	movs	r2, #1
 800387e:	2077      	movs	r0, #119	@ 0x77
 8003880:	f7fd fb15 	bl	8000eae <bmi160_set_regs>
 8003884:	4603      	mov	r3, r0
 8003886:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8003888:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <trigger_foc>:

static int8_t trigger_foc(struct bmi160_offsets *offset, struct bmi160_dev const *dev)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b088      	sub	sp, #32
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t foc_status = BMI160_ENABLE;
 800389e:	2301      	movs	r3, #1
 80038a0:	777b      	strb	r3, [r7, #29]
    uint8_t cmd = BMI160_START_FOC_CMD;
 80038a2:	2303      	movs	r3, #3
 80038a4:	773b      	strb	r3, [r7, #28]
    uint8_t timeout = 0;
 80038a6:	2300      	movs	r3, #0
 80038a8:	77bb      	strb	r3, [r7, #30]
    uint8_t data_array[20];

    /* Start the FOC process */
    rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &cmd, 1, dev);
 80038aa:	f107 011c 	add.w	r1, r7, #28
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2201      	movs	r2, #1
 80038b2:	207e      	movs	r0, #126	@ 0x7e
 80038b4:	f7fd fafb 	bl	8000eae <bmi160_set_regs>
 80038b8:	4603      	mov	r3, r0
 80038ba:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMI160_OK)
 80038bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d141      	bne.n	8003948 <trigger_foc+0xb4>
    {
        /* Check the FOC status*/
        rslt = get_foc_status(&foc_status, dev);
 80038c4:	f107 031d 	add.w	r3, r7, #29
 80038c8:	6839      	ldr	r1, [r7, #0]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7ff ff78 	bl	80037c0 <get_foc_status>
 80038d0:	4603      	mov	r3, r0
 80038d2:	77fb      	strb	r3, [r7, #31]

        if ((rslt != BMI160_OK) || (foc_status != BMI160_ENABLE))
 80038d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d112      	bne.n	8003902 <trigger_foc+0x6e>
 80038dc:	7f7b      	ldrb	r3, [r7, #29]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d025      	beq.n	800392e <trigger_foc+0x9a>
        {
            while ((foc_status != BMI160_ENABLE) && (timeout < 32))
 80038e2:	e00e      	b.n	8003902 <trigger_foc+0x6e>
            {
                /* Maximum time of 250ms is given in 10
                 * steps of 25ms each - 250ms refer datasheet 2.9.1 */
                dev->delay_ms(25);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e8:	2019      	movs	r0, #25
 80038ea:	4798      	blx	r3

                /* Check the FOC status*/
                rslt = get_foc_status(&foc_status, dev);
 80038ec:	f107 031d 	add.w	r3, r7, #29
 80038f0:	6839      	ldr	r1, [r7, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff ff64 	bl	80037c0 <get_foc_status>
 80038f8:	4603      	mov	r3, r0
 80038fa:	77fb      	strb	r3, [r7, #31]
                timeout++;
 80038fc:	7fbb      	ldrb	r3, [r7, #30]
 80038fe:	3301      	adds	r3, #1
 8003900:	77bb      	strb	r3, [r7, #30]
            while ((foc_status != BMI160_ENABLE) && (timeout < 32))
 8003902:	7f7b      	ldrb	r3, [r7, #29]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d002      	beq.n	800390e <trigger_foc+0x7a>
 8003908:	7fbb      	ldrb	r3, [r7, #30]
 800390a:	2b1f      	cmp	r3, #31
 800390c:	d9ea      	bls.n	80038e4 <trigger_foc+0x50>
            }

            if ((rslt == BMI160_OK) && (foc_status == BMI160_ENABLE))
 800390e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d109      	bne.n	800392a <trigger_foc+0x96>
 8003916:	7f7b      	ldrb	r3, [r7, #29]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d106      	bne.n	800392a <trigger_foc+0x96>
            {
                /* Get offset values from sensor */
                rslt = bmi160_get_offsets(offset, dev);
 800391c:	6839      	ldr	r1, [r7, #0]
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7fd fd19 	bl	8001356 <bmi160_get_offsets>
 8003924:	4603      	mov	r3, r0
 8003926:	77fb      	strb	r3, [r7, #31]
 8003928:	e001      	b.n	800392e <trigger_foc+0x9a>
            }
            else
            {
                /* FOC failure case */
                rslt = BMI160_E_FOC_FAILURE;
 800392a:	23f5      	movs	r3, #245	@ 0xf5
 800392c:	77fb      	strb	r3, [r7, #31]
            }
        }

        if (rslt == BMI160_OK)
 800392e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d108      	bne.n	8003948 <trigger_foc+0xb4>
        {
            /* Read registers 0x04-0x17 */
            rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 20, dev);
 8003936:	f107 0108 	add.w	r1, r7, #8
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2214      	movs	r2, #20
 800393e:	200c      	movs	r0, #12
 8003940:	f7fd fa82 	bl	8000e48 <bmi160_get_regs>
 8003944:	4603      	mov	r3, r0
 8003946:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 8003948:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800394c:	4618      	mov	r0, r3
 800394e:	3720      	adds	r7, #32
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <BMI160_init>:
uint8_t BMI160_Ascale_bit, BMI160_Gscale_bit;

float bmi160_aRes, bmi160_gRes;

int8_t BMI160_init(BMI160_t *DataStruct)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]

	int8_t rslt;

	set_bmi160_Ares();
 800395c:	f000 f8ec 	bl	8003b38 <set_bmi160_Ares>
	set_bmi160_Gres();
 8003960:	f000 f916 	bl	8003b90 <set_bmi160_Gres>
	get_bmi160_Ares();
 8003964:	f000 f946 	bl	8003bf4 <get_bmi160_Ares>
	get_bmi160_Gres();
 8003968:	f000 f97a 	bl	8003c60 <get_bmi160_Gres>

    sensor.id = 0;
 800396c:	4b52      	ldr	r3, [pc, #328]	@ (8003ab8 <BMI160_init+0x164>)
 800396e:	2200      	movs	r2, #0
 8003970:	705a      	strb	r2, [r3, #1]
    sensor.intf = BMI160_I2C_INTF;
 8003972:	4b51      	ldr	r3, [pc, #324]	@ (8003ab8 <BMI160_init+0x164>)
 8003974:	2200      	movs	r2, #0
 8003976:	709a      	strb	r2, [r3, #2]
    sensor.read = SensorAPI_I2Cx_Read;
 8003978:	4b4f      	ldr	r3, [pc, #316]	@ (8003ab8 <BMI160_init+0x164>)
 800397a:	4a50      	ldr	r2, [pc, #320]	@ (8003abc <BMI160_init+0x168>)
 800397c:	61da      	str	r2, [r3, #28]
    sensor.write = SensorAPI_I2Cx_Write;
 800397e:	4b4e      	ldr	r3, [pc, #312]	@ (8003ab8 <BMI160_init+0x164>)
 8003980:	4a4f      	ldr	r2, [pc, #316]	@ (8003ac0 <BMI160_init+0x16c>)
 8003982:	621a      	str	r2, [r3, #32]
    sensor.delay_ms = HAL_Delay;
 8003984:	4b4c      	ldr	r3, [pc, #304]	@ (8003ab8 <BMI160_init+0x164>)
 8003986:	4a4f      	ldr	r2, [pc, #316]	@ (8003ac4 <BMI160_init+0x170>)
 8003988:	625a      	str	r2, [r3, #36]	@ 0x24
    sensor.read_write_len = 32;
 800398a:	4b4b      	ldr	r3, [pc, #300]	@ (8003ab8 <BMI160_init+0x164>)
 800398c:	2220      	movs	r2, #32
 800398e:	851a      	strh	r2, [r3, #40]	@ 0x28

    rslt = bmi160_soft_reset(&sensor);
 8003990:	4849      	ldr	r0, [pc, #292]	@ (8003ab8 <BMI160_init+0x164>)
 8003992:	f7fd fb3d 	bl	8001010 <bmi160_soft_reset>
 8003996:	4603      	mov	r3, r0
 8003998:	73fb      	strb	r3, [r7, #15]
    sensor.delay_ms(200);
 800399a:	4b47      	ldr	r3, [pc, #284]	@ (8003ab8 <BMI160_init+0x164>)
 800399c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800399e:	20c8      	movs	r0, #200	@ 0xc8
 80039a0:	4798      	blx	r3
    rslt = bmi160_init(&sensor);
 80039a2:	4845      	ldr	r0, [pc, #276]	@ (8003ab8 <BMI160_init+0x164>)
 80039a4:	f7fd fae6 	bl	8000f74 <bmi160_init>
 80039a8:	4603      	mov	r3, r0
 80039aa:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    uint8_t reg_addr = BMI160_CHIP_ID_ADDR;
 80039ac:	2300      	movs	r3, #0
 80039ae:	73bb      	strb	r3, [r7, #14]
    uint8_t chipID = 0;
 80039b0:	2300      	movs	r3, #0
 80039b2:	72fb      	strb	r3, [r7, #11]
    uint16_t len = 1;
 80039b4:	2301      	movs	r3, #1
 80039b6:	81bb      	strh	r3, [r7, #12]
    rslt = bmi160_get_regs(reg_addr, &chipID, len, &sensor);
 80039b8:	89ba      	ldrh	r2, [r7, #12]
 80039ba:	f107 010b 	add.w	r1, r7, #11
 80039be:	7bb8      	ldrb	r0, [r7, #14]
 80039c0:	4b3d      	ldr	r3, [pc, #244]	@ (8003ab8 <BMI160_init+0x164>)
 80039c2:	f7fd fa41 	bl	8000e48 <bmi160_get_regs>
 80039c6:	4603      	mov	r3, r0
 80039c8:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    /* Select the Output data rate, range of accelerometer sensor */
    sensor.accel_cfg.odr = BMI160_ACCEL_ODR_800HZ; //BMI160_ACCEL_ODR_400HZ
 80039ca:	4b3b      	ldr	r3, [pc, #236]	@ (8003ab8 <BMI160_init+0x164>)
 80039cc:	220b      	movs	r2, #11
 80039ce:	715a      	strb	r2, [r3, #5]
    sensor.delay_ms(100);
 80039d0:	4b39      	ldr	r3, [pc, #228]	@ (8003ab8 <BMI160_init+0x164>)
 80039d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d4:	2064      	movs	r0, #100	@ 0x64
 80039d6:	4798      	blx	r3
    sensor.accel_cfg.range = BMI160_Ascale_bit;
 80039d8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ac8 <BMI160_init+0x174>)
 80039da:	781a      	ldrb	r2, [r3, #0]
 80039dc:	4b36      	ldr	r3, [pc, #216]	@ (8003ab8 <BMI160_init+0x164>)
 80039de:	719a      	strb	r2, [r3, #6]
    sensor.delay_ms(100);
 80039e0:	4b35      	ldr	r3, [pc, #212]	@ (8003ab8 <BMI160_init+0x164>)
 80039e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e4:	2064      	movs	r0, #100	@ 0x64
 80039e6:	4798      	blx	r3

    /* Select the power mode of accelerometer sensor */
    sensor.accel_cfg.power = BMI160_ACCEL_NORMAL_MODE;
 80039e8:	4b33      	ldr	r3, [pc, #204]	@ (8003ab8 <BMI160_init+0x164>)
 80039ea:	2211      	movs	r2, #17
 80039ec:	711a      	strb	r2, [r3, #4]
    sensor.delay_ms(100);
 80039ee:	4b32      	ldr	r3, [pc, #200]	@ (8003ab8 <BMI160_init+0x164>)
 80039f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f2:	2064      	movs	r0, #100	@ 0x64
 80039f4:	4798      	blx	r3
    sensor.accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4; //BMI160_ACCEL_BW_OSR2_AVG2
 80039f6:	4b30      	ldr	r3, [pc, #192]	@ (8003ab8 <BMI160_init+0x164>)
 80039f8:	2202      	movs	r2, #2
 80039fa:	71da      	strb	r2, [r3, #7]
    sensor.delay_ms(100);
 80039fc:	4b2e      	ldr	r3, [pc, #184]	@ (8003ab8 <BMI160_init+0x164>)
 80039fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a00:	2064      	movs	r0, #100	@ 0x64
 8003a02:	4798      	blx	r3


    /* Select the Output data rate, range of Gyroscope sensor */
    sensor.gyro_cfg.odr = BMI160_GYRO_ODR_800HZ; //BMI160_GYRO_ODR_400HZ
 8003a04:	4b2c      	ldr	r3, [pc, #176]	@ (8003ab8 <BMI160_init+0x164>)
 8003a06:	220b      	movs	r2, #11
 8003a08:	735a      	strb	r2, [r3, #13]
    sensor.delay_ms(100);
 8003a0a:	4b2b      	ldr	r3, [pc, #172]	@ (8003ab8 <BMI160_init+0x164>)
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0e:	2064      	movs	r0, #100	@ 0x64
 8003a10:	4798      	blx	r3
    sensor.gyro_cfg.range = BMI160_Gscale_bit; // BMI160_GYRO_RANGE_250_DPS
 8003a12:	4b2e      	ldr	r3, [pc, #184]	@ (8003acc <BMI160_init+0x178>)
 8003a14:	781a      	ldrb	r2, [r3, #0]
 8003a16:	4b28      	ldr	r3, [pc, #160]	@ (8003ab8 <BMI160_init+0x164>)
 8003a18:	739a      	strb	r2, [r3, #14]
    sensor.delay_ms(100);
 8003a1a:	4b27      	ldr	r3, [pc, #156]	@ (8003ab8 <BMI160_init+0x164>)
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1e:	2064      	movs	r0, #100	@ 0x64
 8003a20:	4798      	blx	r3

    /* Select the power mode of Gyroscope sensor */
    sensor.gyro_cfg.power = BMI160_GYRO_NORMAL_MODE;
 8003a22:	4b25      	ldr	r3, [pc, #148]	@ (8003ab8 <BMI160_init+0x164>)
 8003a24:	2215      	movs	r2, #21
 8003a26:	731a      	strb	r2, [r3, #12]
    sensor.delay_ms(100);
 8003a28:	4b23      	ldr	r3, [pc, #140]	@ (8003ab8 <BMI160_init+0x164>)
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a2c:	2064      	movs	r0, #100	@ 0x64
 8003a2e:	4798      	blx	r3
    sensor.gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE; //BMI160_GYRO_BW_NORMAL_MODE
 8003a30:	4b21      	ldr	r3, [pc, #132]	@ (8003ab8 <BMI160_init+0x164>)
 8003a32:	2202      	movs	r2, #2
 8003a34:	73da      	strb	r2, [r3, #15]
    sensor.delay_ms(100);
 8003a36:	4b20      	ldr	r3, [pc, #128]	@ (8003ab8 <BMI160_init+0x164>)
 8003a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3a:	2064      	movs	r0, #100	@ 0x64
 8003a3c:	4798      	blx	r3

    /* Set the sensor configuration */
    rslt = bmi160_set_sens_conf(&sensor);
 8003a3e:	481e      	ldr	r0, [pc, #120]	@ (8003ab8 <BMI160_init+0x164>)
 8003a40:	f7fd fb21 	bl	8001086 <bmi160_set_sens_conf>
 8003a44:	4603      	mov	r3, r0
 8003a46:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    rslt = start_foc();
 8003a48:	f000 f844 	bl	8003ad4 <start_foc>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	73fb      	strb	r3, [r7, #15]

	/********************************************************************/

    /* Select the Interrupt channel/pin */
    int_config.int_channel = BMI160_INT_CHANNEL_1;// Interrupt channel/pin 1
 8003a50:	4b1f      	ldr	r3, [pc, #124]	@ (8003ad0 <BMI160_init+0x17c>)
 8003a52:	2201      	movs	r2, #1
 8003a54:	701a      	strb	r2, [r3, #0]

    /* Select the Interrupt type */
    int_config.int_type = BMI160_ACC_GYRO_DATA_RDY_INT;// Choosing Any motion interrupt
 8003a56:	4b1e      	ldr	r3, [pc, #120]	@ (8003ad0 <BMI160_init+0x17c>)
 8003a58:	220a      	movs	r2, #10
 8003a5a:	705a      	strb	r2, [r3, #1]
    /* Select the interrupt channel/pin settings */
    int_config.int_pin_settg.output_en = BMI160_ENABLE;// Enabling interrupt pins to act as output pin
 8003a5c:	4a1c      	ldr	r2, [pc, #112]	@ (8003ad0 <BMI160_init+0x17c>)
 8003a5e:	7893      	ldrb	r3, [r2, #2]
 8003a60:	f043 0301 	orr.w	r3, r3, #1
 8003a64:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.output_mode = BMI160_DISABLE;// Choosing push-pull mode for interrupt pin
 8003a66:	4a1a      	ldr	r2, [pc, #104]	@ (8003ad0 <BMI160_init+0x17c>)
 8003a68:	7893      	ldrb	r3, [r2, #2]
 8003a6a:	f36f 0341 	bfc	r3, #1, #1
 8003a6e:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.output_type = BMI160_DISABLE;// Choosing active low output
 8003a70:	4a17      	ldr	r2, [pc, #92]	@ (8003ad0 <BMI160_init+0x17c>)
 8003a72:	7893      	ldrb	r3, [r2, #2]
 8003a74:	f36f 0382 	bfc	r3, #2, #1
 8003a78:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.edge_ctrl = BMI160_ENABLE;// Choosing edge triggered output
 8003a7a:	4a15      	ldr	r2, [pc, #84]	@ (8003ad0 <BMI160_init+0x17c>)
 8003a7c:	7893      	ldrb	r3, [r2, #2]
 8003a7e:	f043 0308 	orr.w	r3, r3, #8
 8003a82:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.input_en = BMI160_DISABLE;// Disabling interrupt pin to act as input
 8003a84:	4a12      	ldr	r2, [pc, #72]	@ (8003ad0 <BMI160_init+0x17c>)
 8003a86:	7893      	ldrb	r3, [r2, #2]
 8003a88:	f36f 1304 	bfc	r3, #4, #1
 8003a8c:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.latch_dur = BMI160_LATCH_DUR_NONE;// non-latched output
 8003a8e:	4a10      	ldr	r2, [pc, #64]	@ (8003ad0 <BMI160_init+0x17c>)
 8003a90:	8853      	ldrh	r3, [r2, #2]
 8003a92:	f36f 1348 	bfc	r3, #5, #4
 8003a96:	8053      	strh	r3, [r2, #2]

    /* Set the Any-motion interrupt */
    rslt = bmi160_set_int_config(&int_config, &sensor); /* sensor is an instance of the structure bmi160_dev  */
 8003a98:	4907      	ldr	r1, [pc, #28]	@ (8003ab8 <BMI160_init+0x164>)
 8003a9a:	480d      	ldr	r0, [pc, #52]	@ (8003ad0 <BMI160_init+0x17c>)
 8003a9c:	f7fd fb4e 	bl	800113c <bmi160_set_int_config>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	73fb      	strb	r3, [r7, #15]

    DataStruct->INIT_OK_i8 = rslt;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	7bfa      	ldrb	r2, [r7, #15]
 8003aa8:	761a      	strb	r2, [r3, #24]
    return rslt;
 8003aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	2000030c 	.word	0x2000030c
 8003abc:	08003ce9 	.word	0x08003ce9
 8003ac0:	08003d2d 	.word	0x08003d2d
 8003ac4:	08004d71 	.word	0x08004d71
 8003ac8:	20000356 	.word	0x20000356
 8003acc:	20000357 	.word	0x20000357
 8003ad0:	2000034c 	.word	0x2000034c

08003ad4 <start_foc>:

int8_t start_foc()
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
	int8_t rslt = 0;
 8003ada:	2300      	movs	r3, #0
 8003adc:	71fb      	strb	r3, [r7, #7]

	/* Enable FOC for accel with target values of z = 1g ; x,y as 0g */
	foc_conf.acc_off_en = BMI160_ENABLE;
 8003ade:	4b13      	ldr	r3, [pc, #76]	@ (8003b2c <start_foc+0x58>)
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	711a      	strb	r2, [r3, #4]
	foc_conf.foc_acc_x  = BMI160_FOC_ACCEL_0G;
 8003ae4:	4b11      	ldr	r3, [pc, #68]	@ (8003b2c <start_foc+0x58>)
 8003ae6:	2203      	movs	r2, #3
 8003ae8:	705a      	strb	r2, [r3, #1]
	foc_conf.foc_acc_y  = BMI160_FOC_ACCEL_0G;
 8003aea:	4b10      	ldr	r3, [pc, #64]	@ (8003b2c <start_foc+0x58>)
 8003aec:	2203      	movs	r2, #3
 8003aee:	709a      	strb	r2, [r3, #2]
	foc_conf.foc_acc_z  = BMI160_FOC_ACCEL_POSITIVE_G;
 8003af0:	4b0e      	ldr	r3, [pc, #56]	@ (8003b2c <start_foc+0x58>)
 8003af2:	2201      	movs	r2, #1
 8003af4:	70da      	strb	r2, [r3, #3]
	sensor.delay_ms(100);
 8003af6:	4b0e      	ldr	r3, [pc, #56]	@ (8003b30 <start_foc+0x5c>)
 8003af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afa:	2064      	movs	r0, #100	@ 0x64
 8003afc:	4798      	blx	r3

	/* Enable FOC for gyro */
	foc_conf.foc_gyr_en = BMI160_ENABLE;
 8003afe:	4b0b      	ldr	r3, [pc, #44]	@ (8003b2c <start_foc+0x58>)
 8003b00:	2201      	movs	r2, #1
 8003b02:	701a      	strb	r2, [r3, #0]
	foc_conf.gyro_off_en = BMI160_ENABLE;
 8003b04:	4b09      	ldr	r3, [pc, #36]	@ (8003b2c <start_foc+0x58>)
 8003b06:	2201      	movs	r2, #1
 8003b08:	715a      	strb	r2, [r3, #5]
	sensor.delay_ms(100);
 8003b0a:	4b09      	ldr	r3, [pc, #36]	@ (8003b30 <start_foc+0x5c>)
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0e:	2064      	movs	r0, #100	@ 0x64
 8003b10:	4798      	blx	r3

	rslt = bmi160_start_foc(&foc_conf, &offsets, &sensor);
 8003b12:	4a07      	ldr	r2, [pc, #28]	@ (8003b30 <start_foc+0x5c>)
 8003b14:	4907      	ldr	r1, [pc, #28]	@ (8003b34 <start_foc+0x60>)
 8003b16:	4805      	ldr	r0, [pc, #20]	@ (8003b2c <start_foc+0x58>)
 8003b18:	f7fd fb9c 	bl	8001254 <bmi160_start_foc>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	71fb      	strb	r3, [r7, #7]

	return rslt;
 8003b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	20000338 	.word	0x20000338
 8003b30:	2000030c 	.word	0x2000030c
 8003b34:	20000340 	.word	0x20000340

08003b38 <set_bmi160_Ares>:

	return rslt;
}

void set_bmi160_Ares()
{
 8003b38:	b480      	push	{r7}
 8003b3a:	af00      	add	r7, sp, #0
	switch (BMI160_Asens)
 8003b3c:	4b12      	ldr	r3, [pc, #72]	@ (8003b88 <set_bmi160_Ares+0x50>)
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	3b01      	subs	r3, #1
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	d81a      	bhi.n	8003b7c <set_bmi160_Ares+0x44>
 8003b46:	a201      	add	r2, pc, #4	@ (adr r2, 8003b4c <set_bmi160_Ares+0x14>)
 8003b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4c:	08003b5d 	.word	0x08003b5d
 8003b50:	08003b65 	.word	0x08003b65
 8003b54:	08003b6d 	.word	0x08003b6d
 8003b58:	08003b75 	.word	0x08003b75
	{
		case AFS_2G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_2G;
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b8c <set_bmi160_Ares+0x54>)
 8003b5e:	2203      	movs	r2, #3
 8003b60:	701a      	strb	r2, [r3, #0]
			break;
 8003b62:	e00b      	b.n	8003b7c <set_bmi160_Ares+0x44>
		case AFS_4G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_4G;
 8003b64:	4b09      	ldr	r3, [pc, #36]	@ (8003b8c <set_bmi160_Ares+0x54>)
 8003b66:	2205      	movs	r2, #5
 8003b68:	701a      	strb	r2, [r3, #0]
			break;
 8003b6a:	e007      	b.n	8003b7c <set_bmi160_Ares+0x44>
		case AFS_8G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_8G;
 8003b6c:	4b07      	ldr	r3, [pc, #28]	@ (8003b8c <set_bmi160_Ares+0x54>)
 8003b6e:	2208      	movs	r2, #8
 8003b70:	701a      	strb	r2, [r3, #0]
			break;
 8003b72:	e003      	b.n	8003b7c <set_bmi160_Ares+0x44>
		case AFS_16G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_16G;
 8003b74:	4b05      	ldr	r3, [pc, #20]	@ (8003b8c <set_bmi160_Ares+0x54>)
 8003b76:	220c      	movs	r2, #12
 8003b78:	701a      	strb	r2, [r3, #0]
			break;
 8003b7a:	bf00      	nop
	}
}
 8003b7c:	bf00      	nop
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	20000008 	.word	0x20000008
 8003b8c:	20000356 	.word	0x20000356

08003b90 <set_bmi160_Gres>:

void set_bmi160_Gres()
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
	switch (BMI160_Gsens)
 8003b94:	4b15      	ldr	r3, [pc, #84]	@ (8003bec <set_bmi160_Gres+0x5c>)
 8003b96:	781b      	ldrb	r3, [r3, #0]
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d820      	bhi.n	8003be0 <set_bmi160_Gres+0x50>
 8003b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8003ba4 <set_bmi160_Gres+0x14>)
 8003ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba4:	08003bb9 	.word	0x08003bb9
 8003ba8:	08003bc1 	.word	0x08003bc1
 8003bac:	08003bc9 	.word	0x08003bc9
 8003bb0:	08003bd1 	.word	0x08003bd1
 8003bb4:	08003bd9 	.word	0x08003bd9
	{
		case GFS_125DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_125_DPS;
 8003bb8:	4b0d      	ldr	r3, [pc, #52]	@ (8003bf0 <set_bmi160_Gres+0x60>)
 8003bba:	2204      	movs	r2, #4
 8003bbc:	701a      	strb	r2, [r3, #0]
			break;
 8003bbe:	e00f      	b.n	8003be0 <set_bmi160_Gres+0x50>
		case GFS_250DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_250_DPS;
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf0 <set_bmi160_Gres+0x60>)
 8003bc2:	2203      	movs	r2, #3
 8003bc4:	701a      	strb	r2, [r3, #0]
			break;
 8003bc6:	e00b      	b.n	8003be0 <set_bmi160_Gres+0x50>
		case GFS_500DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_500_DPS;
 8003bc8:	4b09      	ldr	r3, [pc, #36]	@ (8003bf0 <set_bmi160_Gres+0x60>)
 8003bca:	2202      	movs	r2, #2
 8003bcc:	701a      	strb	r2, [r3, #0]
			break;
 8003bce:	e007      	b.n	8003be0 <set_bmi160_Gres+0x50>
		case GFS_1000DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_1000_DPS;
 8003bd0:	4b07      	ldr	r3, [pc, #28]	@ (8003bf0 <set_bmi160_Gres+0x60>)
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	701a      	strb	r2, [r3, #0]
			break;
 8003bd6:	e003      	b.n	8003be0 <set_bmi160_Gres+0x50>
		case GFS_2000DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_2000_DPS;
 8003bd8:	4b05      	ldr	r3, [pc, #20]	@ (8003bf0 <set_bmi160_Gres+0x60>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	701a      	strb	r2, [r3, #0]
			break;
 8003bde:	bf00      	nop
	}
}
 8003be0:	bf00      	nop
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	20000009 	.word	0x20000009
 8003bf0:	20000357 	.word	0x20000357

08003bf4 <get_bmi160_Ares>:

void get_bmi160_Ares()
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
	switch (BMI160_Ascale)
 8003bf8:	4b17      	ldr	r3, [pc, #92]	@ (8003c58 <get_bmi160_Ares+0x64>)
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d826      	bhi.n	8003c4e <get_bmi160_Ares+0x5a>
 8003c00:	a201      	add	r2, pc, #4	@ (adr r2, 8003c08 <get_bmi160_Ares+0x14>)
 8003c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c06:	bf00      	nop
 8003c08:	08003c1d 	.word	0x08003c1d
 8003c0c:	08003c27 	.word	0x08003c27
 8003c10:	08003c31 	.word	0x08003c31
 8003c14:	08003c3b 	.word	0x08003c3b
 8003c18:	08003c45 	.word	0x08003c45
	{
		case AFS_RAW:
			bmi160_aRes = 1.0f;
 8003c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8003c5c <get_bmi160_Ares+0x68>)
 8003c1e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003c22:	601a      	str	r2, [r3, #0]
			break;
 8003c24:	e013      	b.n	8003c4e <get_bmi160_Ares+0x5a>
		case AFS_2G:
			bmi160_aRes = 16384.0f;
 8003c26:	4b0d      	ldr	r3, [pc, #52]	@ (8003c5c <get_bmi160_Ares+0x68>)
 8003c28:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 8003c2c:	601a      	str	r2, [r3, #0]
			break;
 8003c2e:	e00e      	b.n	8003c4e <get_bmi160_Ares+0x5a>
		case AFS_4G:
			bmi160_aRes = 8192.0f;
 8003c30:	4b0a      	ldr	r3, [pc, #40]	@ (8003c5c <get_bmi160_Ares+0x68>)
 8003c32:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 8003c36:	601a      	str	r2, [r3, #0]
			break;
 8003c38:	e009      	b.n	8003c4e <get_bmi160_Ares+0x5a>
		case AFS_8G:
			bmi160_aRes = 4096.0f;
 8003c3a:	4b08      	ldr	r3, [pc, #32]	@ (8003c5c <get_bmi160_Ares+0x68>)
 8003c3c:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 8003c40:	601a      	str	r2, [r3, #0]
			break;
 8003c42:	e004      	b.n	8003c4e <get_bmi160_Ares+0x5a>
		case AFS_16G:
			bmi160_aRes = 2048.0f;
 8003c44:	4b05      	ldr	r3, [pc, #20]	@ (8003c5c <get_bmi160_Ares+0x68>)
 8003c46:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 8003c4a:	601a      	str	r2, [r3, #0]
			break;
 8003c4c:	bf00      	nop
	}
}
 8003c4e:	bf00      	nop
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	2000000a 	.word	0x2000000a
 8003c5c:	20000358 	.word	0x20000358

08003c60 <get_bmi160_Gres>:

void get_bmi160_Gres()
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
	switch (BMI160_Gscale)
 8003c64:	4b18      	ldr	r3, [pc, #96]	@ (8003cc8 <get_bmi160_Gres+0x68>)
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	2b05      	cmp	r3, #5
 8003c6a:	d828      	bhi.n	8003cbe <get_bmi160_Gres+0x5e>
 8003c6c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c74 <get_bmi160_Gres+0x14>)
 8003c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c72:	bf00      	nop
 8003c74:	08003c8d 	.word	0x08003c8d
 8003c78:	08003c97 	.word	0x08003c97
 8003c7c:	08003c9f 	.word	0x08003c9f
 8003c80:	08003ca7 	.word	0x08003ca7
 8003c84:	08003caf 	.word	0x08003caf
 8003c88:	08003cb7 	.word	0x08003cb7
	{
		case GFS_RAW:
			bmi160_aRes = 1.0f;
 8003c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8003ccc <get_bmi160_Gres+0x6c>)
 8003c8e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003c92:	601a      	str	r2, [r3, #0]
			break;
 8003c94:	e013      	b.n	8003cbe <get_bmi160_Gres+0x5e>
		case GFS_125DPS:
			bmi160_gRes = 262.4f;
 8003c96:	4b0e      	ldr	r3, [pc, #56]	@ (8003cd0 <get_bmi160_Gres+0x70>)
 8003c98:	4a0e      	ldr	r2, [pc, #56]	@ (8003cd4 <get_bmi160_Gres+0x74>)
 8003c9a:	601a      	str	r2, [r3, #0]
			break;
 8003c9c:	e00f      	b.n	8003cbe <get_bmi160_Gres+0x5e>
		case GFS_250DPS:
			bmi160_gRes = 131.2f;
 8003c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd0 <get_bmi160_Gres+0x70>)
 8003ca0:	4a0d      	ldr	r2, [pc, #52]	@ (8003cd8 <get_bmi160_Gres+0x78>)
 8003ca2:	601a      	str	r2, [r3, #0]
			break;
 8003ca4:	e00b      	b.n	8003cbe <get_bmi160_Gres+0x5e>
		case GFS_500DPS:
			bmi160_gRes = 65.6f;
 8003ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd0 <get_bmi160_Gres+0x70>)
 8003ca8:	4a0c      	ldr	r2, [pc, #48]	@ (8003cdc <get_bmi160_Gres+0x7c>)
 8003caa:	601a      	str	r2, [r3, #0]
			break;
 8003cac:	e007      	b.n	8003cbe <get_bmi160_Gres+0x5e>
		case GFS_1000DPS:
			bmi160_gRes = 32.8f;
 8003cae:	4b08      	ldr	r3, [pc, #32]	@ (8003cd0 <get_bmi160_Gres+0x70>)
 8003cb0:	4a0b      	ldr	r2, [pc, #44]	@ (8003ce0 <get_bmi160_Gres+0x80>)
 8003cb2:	601a      	str	r2, [r3, #0]
			break;
 8003cb4:	e003      	b.n	8003cbe <get_bmi160_Gres+0x5e>
		case GFS_2000DPS:
			bmi160_gRes = 16.4f;
 8003cb6:	4b06      	ldr	r3, [pc, #24]	@ (8003cd0 <get_bmi160_Gres+0x70>)
 8003cb8:	4a0a      	ldr	r2, [pc, #40]	@ (8003ce4 <get_bmi160_Gres+0x84>)
 8003cba:	601a      	str	r2, [r3, #0]
			break;
 8003cbc:	bf00      	nop
	}
}
 8003cbe:	bf00      	nop
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	2000000b 	.word	0x2000000b
 8003ccc:	20000358 	.word	0x20000358
 8003cd0:	2000035c 	.word	0x2000035c
 8003cd4:	43833333 	.word	0x43833333
 8003cd8:	43033333 	.word	0x43033333
 8003cdc:	42833333 	.word	0x42833333
 8003ce0:	42033333 	.word	0x42033333
 8003ce4:	41833333 	.word	0x41833333

08003ce8 <SensorAPI_I2Cx_Read>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af02      	add	r7, sp, #8
 8003cee:	603a      	str	r2, [r7, #0]
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	71fb      	strb	r3, [r7, #7]
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	71bb      	strb	r3, [r7, #6]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, &reg_addr, 1, I2CTIMEOUT);
 8003cfe:	1dba      	adds	r2, r7, #6
 8003d00:	2364      	movs	r3, #100	@ 0x64
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	2301      	movs	r3, #1
 8003d06:	21d2      	movs	r1, #210	@ 0xd2
 8003d08:	4807      	ldr	r0, [pc, #28]	@ (8003d28 <SensorAPI_I2Cx_Read+0x40>)
 8003d0a:	f003 f943 	bl	8006f94 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&I2C_HANDLE, BMI160_ADDR, data, len, I2CTIMEOUT);
 8003d0e:	88bb      	ldrh	r3, [r7, #4]
 8003d10:	2264      	movs	r2, #100	@ 0x64
 8003d12:	9200      	str	r2, [sp, #0]
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	21d2      	movs	r1, #210	@ 0xd2
 8003d18:	4803      	ldr	r0, [pc, #12]	@ (8003d28 <SensorAPI_I2Cx_Read+0x40>)
 8003d1a:	f003 fa53 	bl	80071c4 <HAL_I2C_Master_Receive>
	return 0;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	20000650 	.word	0x20000650

08003d2c <SensorAPI_I2Cx_Write>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af02      	add	r7, sp, #8
 8003d32:	603a      	str	r2, [r7, #0]
 8003d34:	461a      	mov	r2, r3
 8003d36:	4603      	mov	r3, r0
 8003d38:	71fb      	strb	r3, [r7, #7]
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	71bb      	strb	r3, [r7, #6]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	80bb      	strh	r3, [r7, #4]
	GTXBuffer[0] = reg_addr;
 8003d42:	4a0c      	ldr	r2, [pc, #48]	@ (8003d74 <SensorAPI_I2Cx_Write+0x48>)
 8003d44:	79bb      	ldrb	r3, [r7, #6]
 8003d46:	7013      	strb	r3, [r2, #0]
	memcpy(&GTXBuffer[1], data, len);
 8003d48:	88bb      	ldrh	r3, [r7, #4]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	6839      	ldr	r1, [r7, #0]
 8003d4e:	480a      	ldr	r0, [pc, #40]	@ (8003d78 <SensorAPI_I2Cx_Write+0x4c>)
 8003d50:	f00e ff03 	bl	8012b5a <memcpy>

	HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, GTXBuffer, len+1, I2CTIMEOUT);
 8003d54:	88bb      	ldrh	r3, [r7, #4]
 8003d56:	3301      	adds	r3, #1
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	2264      	movs	r2, #100	@ 0x64
 8003d5c:	9200      	str	r2, [sp, #0]
 8003d5e:	4a05      	ldr	r2, [pc, #20]	@ (8003d74 <SensorAPI_I2Cx_Write+0x48>)
 8003d60:	21d2      	movs	r1, #210	@ 0xd2
 8003d62:	4806      	ldr	r0, [pc, #24]	@ (8003d7c <SensorAPI_I2Cx_Write+0x50>)
 8003d64:	f003 f916 	bl	8006f94 <HAL_I2C_Master_Transmit>
	return 0;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	20000360 	.word	0x20000360
 8003d78:	20000361 	.word	0x20000361
 8003d7c:	20000650 	.word	0x20000650

08003d80 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003d88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d8c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003d98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003d9c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4013      	ands	r3, r2
 8003da2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003da4:	68fb      	ldr	r3, [r7, #12]
}
 8003da6:	bf00      	nop
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8003db2:	b480      	push	{r7}
 8003db4:	b085      	sub	sp, #20
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003dba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dbe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003dc0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003dca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003dce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
}
 8003dd8:	bf00      	nop
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2)
  {
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
	////this updates the X and Y axes of my joystick
	  for(uint8_t i = 0; i<hadc1.Init.NbrOfConversion; i++){
 8003dec:	2300      	movs	r3, #0
 8003dee:	73fb      	strb	r3, [r7, #15]
 8003df0:	e00a      	b.n	8003e08 <HAL_TIM_PeriodElapsedCallback+0x24>
		  mic = (uint16_t) rawValues[0];
 8003df2:	4b0c      	ldr	r3, [pc, #48]	@ (8003e24 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003df4:	881a      	ldrh	r2, [r3, #0]
 8003df6:	4b0c      	ldr	r3, [pc, #48]	@ (8003e28 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8003df8:	801a      	strh	r2, [r3, #0]
		  mic2 = mic;
 8003dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8003e28 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8003dfc:	881a      	ldrh	r2, [r3, #0]
 8003dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8003e2c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003e00:	801a      	strh	r2, [r3, #0]
	  for(uint8_t i = 0; i<hadc1.Init.NbrOfConversion; i++){
 8003e02:	7bfb      	ldrb	r3, [r7, #15]
 8003e04:	3301      	adds	r3, #1
 8003e06:	73fb      	strb	r3, [r7, #15]
 8003e08:	7bfa      	ldrb	r2, [r7, #15]
 8003e0a:	4b09      	ldr	r3, [pc, #36]	@ (8003e30 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d3ef      	bcc.n	8003df2 <HAL_TIM_PeriodElapsedCallback+0xe>
	  }
	  flag = 1;
 8003e12:	4b08      	ldr	r3, [pc, #32]	@ (8003e34 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8003e14:	2201      	movs	r2, #1
 8003e16:	701a      	strb	r2, [r3, #0]
	  sprintf(msg, "X axis: %hu, Y axis: %hu \r\n", Xaxis, Yaxis);
	  status = CDC_Transmit_FS(msg, strlen((char*)msg));
	  if (status == USBD_OK) {
	  	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin); // Example: Toggle LED on success
	  }*/
  }
 8003e18:	bf00      	nop
 8003e1a:	3714      	adds	r7, #20
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	200006f8 	.word	0x200006f8
 8003e28:	200006f2 	.word	0x200006f2
 8003e2c:	200006f4 	.word	0x200006f4
 8003e30:	2000058c 	.word	0x2000058c
 8003e34:	200006fc 	.word	0x200006fc

08003e38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e38:	b590      	push	{r4, r7, lr}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e3e:	f000 ff11 	bl	8004c64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e42:	f000 f88d 	bl	8003f60 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003e46:	f000 f8ef 	bl	8004028 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e4a:	f000 fa33 	bl	80042b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8003e4e:	f000 fa1f 	bl	8004290 <MX_DMA_Init>
  MX_ADC1_Init();
 8003e52:	f000 f91b 	bl	800408c <MX_ADC1_Init>
  MX_TIM2_Init();
 8003e56:	f000 f9cd 	bl	80041f4 <MX_TIM2_Init>
  MX_USB_Device_Init();
 8003e5a:	f00d fb45 	bl	80114e8 <MX_USB_Device_Init>
  MX_I2C1_Init();
 8003e5e:	f000 f989 	bl	8004174 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ////This begins the process of storing our ADC readings into the DMA. The DMA can be thought of a temporary storage location.
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) rawValues, 2);
 8003e62:	2202      	movs	r2, #2
 8003e64:	4935      	ldr	r1, [pc, #212]	@ (8003f3c <main+0x104>)
 8003e66:	4836      	ldr	r0, [pc, #216]	@ (8003f40 <main+0x108>)
 8003e68:	f001 fada 	bl	8005420 <HAL_ADC_Start_DMA>
    ////This begins our timer 2
  HAL_TIM_Base_Start_IT(&htim2);
 8003e6c:	4835      	ldr	r0, [pc, #212]	@ (8003f44 <main+0x10c>)
 8003e6e:	f007 ff1b 	bl	800bca8 <HAL_TIM_Base_Start_IT>

  while (BMI160_init(imu_t) == 1); // waits for IMU to be ready
 8003e72:	bf00      	nop
 8003e74:	4b34      	ldr	r3, [pc, #208]	@ (8003f48 <main+0x110>)
 8003e76:	466c      	mov	r4, sp
 8003e78:	f103 0210 	add.w	r2, r3, #16
 8003e7c:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003e82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e84:	f7ff fd66 	bl	8003954 <BMI160_init>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d0f2      	beq.n	8003e74 <main+0x3c>

  if (imu_t.INIT_OK_i8 == TRUE){
 8003e8e:	4b2e      	ldr	r3, [pc, #184]	@ (8003f48 <main+0x110>)
 8003e90:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d102      	bne.n	8003e9e <main+0x66>
	  BSP_LED_On(LED_RED);
 8003e98:	2002      	movs	r0, #2
 8003e9a:	f000 fd91 	bl	80049c0 <BSP_LED_On>
  }

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 8003e9e:	2000      	movs	r0, #0
 8003ea0:	f000 fd54 	bl	800494c <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8003ea4:	2001      	movs	r0, #1
 8003ea6:	f000 fd51 	bl	800494c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8003eaa:	2002      	movs	r0, #2
 8003eac:	f000 fd4e 	bl	800494c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8003eb0:	2101      	movs	r1, #1
 8003eb2:	2000      	movs	r0, #0
 8003eb4:	f000 fdb8 	bl	8004a28 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8003eb8:	2101      	movs	r1, #1
 8003eba:	2001      	movs	r0, #1
 8003ebc:	f000 fdb4 	bl	8004a28 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	2002      	movs	r0, #2
 8003ec4:	f000 fdb0 	bl	8004a28 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 256000;
 8003ec8:	4b20      	ldr	r3, [pc, #128]	@ (8003f4c <main+0x114>)
 8003eca:	f44f 327a 	mov.w	r2, #256000	@ 0x3e800
 8003ece:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8003ed0:	4b1e      	ldr	r3, [pc, #120]	@ (8003f4c <main+0x114>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8003ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8003f4c <main+0x114>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8003edc:	4b1b      	ldr	r3, [pc, #108]	@ (8003f4c <main+0x114>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8003ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8003f4c <main+0x114>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8003ee8:	4918      	ldr	r1, [pc, #96]	@ (8003f4c <main+0x114>)
 8003eea:	2000      	movs	r0, #0
 8003eec:	f000 fe0c 	bl	8004b08 <BSP_COM_Init>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <main+0xc2>
  {
    Error_Handler();
 8003ef6:	f000 fa07 	bl	8004308 <Error_Handler>
  /*                                                                          ********************************************************************* */
  while (1)
  {
	  //bmi160ReadAccelGyro(&imu_t);

	  if (flag==1){
 8003efa:	4b15      	ldr	r3, [pc, #84]	@ (8003f50 <main+0x118>)
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d1fb      	bne.n	8003efa <main+0xc2>
		  counter++;
 8003f02:	4b14      	ldr	r3, [pc, #80]	@ (8003f54 <main+0x11c>)
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	3301      	adds	r3, #1
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	4b12      	ldr	r3, [pc, #72]	@ (8003f54 <main+0x11c>)
 8003f0c:	801a      	strh	r2, [r3, #0]
		  prepare_data_packet_audio(counter, counter,USB_buffer,&packet_length);
 8003f0e:	4b11      	ldr	r3, [pc, #68]	@ (8003f54 <main+0x11c>)
 8003f10:	8818      	ldrh	r0, [r3, #0]
 8003f12:	4b10      	ldr	r3, [pc, #64]	@ (8003f54 <main+0x11c>)
 8003f14:	8819      	ldrh	r1, [r3, #0]
 8003f16:	4b10      	ldr	r3, [pc, #64]	@ (8003f58 <main+0x120>)
 8003f18:	4a10      	ldr	r2, [pc, #64]	@ (8003f5c <main+0x124>)
 8003f1a:	f000 f9d8 	bl	80042ce <prepare_data_packet_audio>
		  //prepare_data_packet_audio(mic, mic2,USB_buffer,&packet_length);
		  CDC_Transmit_FS(USB_buffer, packet_length);
 8003f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8003f58 <main+0x120>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	4619      	mov	r1, r3
 8003f26:	480d      	ldr	r0, [pc, #52]	@ (8003f5c <main+0x124>)
 8003f28:	f00d fb9c 	bl	8011664 <CDC_Transmit_FS>
		  BSP_LED_Toggle(LED_GREEN);
 8003f2c:	2001      	movs	r0, #1
 8003f2e:	f000 fd61 	bl	80049f4 <BSP_LED_Toggle>
		  //HAL_GPIO_TogglePin(LED_GREEN_Port,LED_GREEN_Pin);
		  //snprintf(msg, sizeof(msg), "a: %.2f, g: %.2f", a_f32[0], g_f32[0]);
		  //CDC_Transmit_FS((uint8_t *)msg, strlen(msg));

		  flag = 0;
 8003f32:	4b07      	ldr	r3, [pc, #28]	@ (8003f50 <main+0x118>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	701a      	strb	r2, [r3, #0]
	  if (flag==1){
 8003f38:	e7df      	b.n	8003efa <main+0xc2>
 8003f3a:	bf00      	nop
 8003f3c:	200006f8 	.word	0x200006f8
 8003f40:	2000058c 	.word	0x2000058c
 8003f44:	200006a4 	.word	0x200006a4
 8003f48:	20000560 	.word	0x20000560
 8003f4c:	2000057c 	.word	0x2000057c
 8003f50:	200006fc 	.word	0x200006fc
 8003f54:	200006f0 	.word	0x200006f0
 8003f58:	20000720 	.word	0x20000720
 8003f5c:	20000700 	.word	0x20000700

08003f60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b09a      	sub	sp, #104	@ 0x68
 8003f64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f66:	f107 0320 	add.w	r3, r7, #32
 8003f6a:	2248      	movs	r2, #72	@ 0x48
 8003f6c:	2100      	movs	r1, #0
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f00e fd73 	bl	8012a5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f74:	1d3b      	adds	r3, r7, #4
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	605a      	str	r2, [r3, #4]
 8003f7c:	609a      	str	r2, [r3, #8]
 8003f7e:	60da      	str	r2, [r3, #12]
 8003f80:	611a      	str	r2, [r3, #16]
 8003f82:	615a      	str	r2, [r3, #20]
 8003f84:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f86:	4b27      	ldr	r3, [pc, #156]	@ (8004024 <SystemClock_Config+0xc4>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003f8e:	4a25      	ldr	r2, [pc, #148]	@ (8004024 <SystemClock_Config+0xc4>)
 8003f90:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f94:	6013      	str	r3, [r2, #0]
 8003f96:	4b23      	ldr	r3, [pc, #140]	@ (8004024 <SystemClock_Config+0xc4>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003f9e:	603b      	str	r3, [r7, #0]
 8003fa0:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003fa6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003faa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003fac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003fb2:	2340      	movs	r3, #64	@ 0x40
 8003fb4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003fb6:	2302      	movs	r3, #2
 8003fb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8003fbe:	2310      	movs	r3, #16
 8003fc0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8003fc2:	2308      	movs	r3, #8
 8003fc4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003fc6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003fca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003fcc:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8003fd0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003fd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003fd6:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003fd8:	f107 0320 	add.w	r3, r7, #32
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f006 fbd3 	bl	800a788 <HAL_RCC_OscConfig>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8003fe8:	f000 f98e 	bl	8004308 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8003fec:	236f      	movs	r3, #111	@ 0x6f
 8003fee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 8004000:	2380      	movs	r3, #128	@ 0x80
 8004002:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8004004:	2300      	movs	r3, #0
 8004006:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004008:	1d3b      	adds	r3, r7, #4
 800400a:	2103      	movs	r1, #3
 800400c:	4618      	mov	r0, r3
 800400e:	f006 ff2f 	bl	800ae70 <HAL_RCC_ClockConfig>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8004018:	f000 f976 	bl	8004308 <Error_Handler>
  }
}
 800401c:	bf00      	nop
 800401e:	3768      	adds	r7, #104	@ 0x68
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}
 8004024:	58000400 	.word	0x58000400

08004028 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b094      	sub	sp, #80	@ 0x50
 800402c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800402e:	463b      	mov	r3, r7
 8004030:	2250      	movs	r2, #80	@ 0x50
 8004032:	2100      	movs	r1, #0
 8004034:	4618      	mov	r0, r3
 8004036:	f00e fd10 	bl	8012a5a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 800403a:	f44f 5314 	mov.w	r3, #9472	@ 0x2500
 800403e:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 8004040:	2306      	movs	r3, #6
 8004042:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 8004044:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004048:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 800404a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800404e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 8004050:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004054:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 8004056:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 800405a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800405c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004060:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8004062:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004066:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8004068:	2300      	movs	r3, #0
 800406a:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800406c:	2300      	movs	r3, #0
 800406e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004070:	463b      	mov	r3, r7
 8004072:	4618      	mov	r0, r3
 8004074:	f007 fb39 	bl	800b6ea <HAL_RCCEx_PeriphCLKConfig>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d001      	beq.n	8004082 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 800407e:	f000 f943 	bl	8004308 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8004082:	bf00      	nop
 8004084:	3750      	adds	r7, #80	@ 0x50
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
	...

0800408c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004092:	463b      	mov	r3, r7
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	605a      	str	r2, [r3, #4]
 800409a:	609a      	str	r2, [r3, #8]
 800409c:	60da      	str	r2, [r3, #12]
 800409e:	611a      	str	r2, [r3, #16]
 80040a0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80040a2:	4b30      	ldr	r3, [pc, #192]	@ (8004164 <MX_ADC1_Init+0xd8>)
 80040a4:	4a30      	ldr	r2, [pc, #192]	@ (8004168 <MX_ADC1_Init+0xdc>)
 80040a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80040a8:	4b2e      	ldr	r3, [pc, #184]	@ (8004164 <MX_ADC1_Init+0xd8>)
 80040aa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80040ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80040b0:	4b2c      	ldr	r3, [pc, #176]	@ (8004164 <MX_ADC1_Init+0xd8>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80040b6:	4b2b      	ldr	r3, [pc, #172]	@ (8004164 <MX_ADC1_Init+0xd8>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80040bc:	4b29      	ldr	r3, [pc, #164]	@ (8004164 <MX_ADC1_Init+0xd8>)
 80040be:	2201      	movs	r2, #1
 80040c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80040c2:	4b28      	ldr	r3, [pc, #160]	@ (8004164 <MX_ADC1_Init+0xd8>)
 80040c4:	2204      	movs	r2, #4
 80040c6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80040c8:	4b26      	ldr	r3, [pc, #152]	@ (8004164 <MX_ADC1_Init+0xd8>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80040ce:	4b25      	ldr	r3, [pc, #148]	@ (8004164 <MX_ADC1_Init+0xd8>)
 80040d0:	2201      	movs	r2, #1
 80040d2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 80040d4:	4b23      	ldr	r3, [pc, #140]	@ (8004164 <MX_ADC1_Init+0xd8>)
 80040d6:	2202      	movs	r2, #2
 80040d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80040da:	4b22      	ldr	r3, [pc, #136]	@ (8004164 <MX_ADC1_Init+0xd8>)
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80040e2:	4b20      	ldr	r3, [pc, #128]	@ (8004164 <MX_ADC1_Init+0xd8>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80040e8:	4b1e      	ldr	r3, [pc, #120]	@ (8004164 <MX_ADC1_Init+0xd8>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80040ee:	4b1d      	ldr	r3, [pc, #116]	@ (8004164 <MX_ADC1_Init+0xd8>)
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80040f6:	4b1b      	ldr	r3, [pc, #108]	@ (8004164 <MX_ADC1_Init+0xd8>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80040fc:	4b19      	ldr	r3, [pc, #100]	@ (8004164 <MX_ADC1_Init+0xd8>)
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004104:	4817      	ldr	r0, [pc, #92]	@ (8004164 <MX_ADC1_Init+0xd8>)
 8004106:	f001 f83f 	bl	8005188 <HAL_ADC_Init>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d001      	beq.n	8004114 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8004110:	f000 f8fa 	bl	8004308 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004114:	4b15      	ldr	r3, [pc, #84]	@ (800416c <MX_ADC1_Init+0xe0>)
 8004116:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004118:	2306      	movs	r3, #6
 800411a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 800411c:	2306      	movs	r3, #6
 800411e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004120:	237f      	movs	r3, #127	@ 0x7f
 8004122:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004124:	2304      	movs	r3, #4
 8004126:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8004128:	2300      	movs	r3, #0
 800412a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800412c:	463b      	mov	r3, r7
 800412e:	4619      	mov	r1, r3
 8004130:	480c      	ldr	r0, [pc, #48]	@ (8004164 <MX_ADC1_Init+0xd8>)
 8004132:	f001 fbd7 	bl	80058e4 <HAL_ADC_ConfigChannel>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 800413c:	f000 f8e4 	bl	8004308 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004140:	4b0b      	ldr	r3, [pc, #44]	@ (8004170 <MX_ADC1_Init+0xe4>)
 8004142:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004144:	230c      	movs	r3, #12
 8004146:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004148:	463b      	mov	r3, r7
 800414a:	4619      	mov	r1, r3
 800414c:	4805      	ldr	r0, [pc, #20]	@ (8004164 <MX_ADC1_Init+0xd8>)
 800414e:	f001 fbc9 	bl	80058e4 <HAL_ADC_ConfigChannel>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8004158:	f000 f8d6 	bl	8004308 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800415c:	bf00      	nop
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	2000058c 	.word	0x2000058c
 8004168:	50040000 	.word	0x50040000
 800416c:	04300002 	.word	0x04300002
 8004170:	08600004 	.word	0x08600004

08004174 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004178:	4b1b      	ldr	r3, [pc, #108]	@ (80041e8 <MX_I2C1_Init+0x74>)
 800417a:	4a1c      	ldr	r2, [pc, #112]	@ (80041ec <MX_I2C1_Init+0x78>)
 800417c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 800417e:	4b1a      	ldr	r3, [pc, #104]	@ (80041e8 <MX_I2C1_Init+0x74>)
 8004180:	4a1b      	ldr	r2, [pc, #108]	@ (80041f0 <MX_I2C1_Init+0x7c>)
 8004182:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004184:	4b18      	ldr	r3, [pc, #96]	@ (80041e8 <MX_I2C1_Init+0x74>)
 8004186:	2200      	movs	r2, #0
 8004188:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800418a:	4b17      	ldr	r3, [pc, #92]	@ (80041e8 <MX_I2C1_Init+0x74>)
 800418c:	2201      	movs	r2, #1
 800418e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004190:	4b15      	ldr	r3, [pc, #84]	@ (80041e8 <MX_I2C1_Init+0x74>)
 8004192:	2200      	movs	r2, #0
 8004194:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004196:	4b14      	ldr	r3, [pc, #80]	@ (80041e8 <MX_I2C1_Init+0x74>)
 8004198:	2200      	movs	r2, #0
 800419a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800419c:	4b12      	ldr	r3, [pc, #72]	@ (80041e8 <MX_I2C1_Init+0x74>)
 800419e:	2200      	movs	r2, #0
 80041a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80041a2:	4b11      	ldr	r3, [pc, #68]	@ (80041e8 <MX_I2C1_Init+0x74>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80041a8:	4b0f      	ldr	r3, [pc, #60]	@ (80041e8 <MX_I2C1_Init+0x74>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80041ae:	480e      	ldr	r0, [pc, #56]	@ (80041e8 <MX_I2C1_Init+0x74>)
 80041b0:	f002 fe55 	bl	8006e5e <HAL_I2C_Init>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80041ba:	f000 f8a5 	bl	8004308 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80041be:	2100      	movs	r1, #0
 80041c0:	4809      	ldr	r0, [pc, #36]	@ (80041e8 <MX_I2C1_Init+0x74>)
 80041c2:	f004 f973 	bl	80084ac <HAL_I2CEx_ConfigAnalogFilter>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80041cc:	f000 f89c 	bl	8004308 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80041d0:	2100      	movs	r1, #0
 80041d2:	4805      	ldr	r0, [pc, #20]	@ (80041e8 <MX_I2C1_Init+0x74>)
 80041d4:	f004 f9b5 	bl	8008542 <HAL_I2CEx_ConfigDigitalFilter>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80041de:	f000 f893 	bl	8004308 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80041e2:	bf00      	nop
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	20000650 	.word	0x20000650
 80041ec:	40005400 	.word	0x40005400
 80041f0:	10b17db5 	.word	0x10b17db5

080041f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b088      	sub	sp, #32
 80041f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041fa:	f107 0310 	add.w	r3, r7, #16
 80041fe:	2200      	movs	r2, #0
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	605a      	str	r2, [r3, #4]
 8004204:	609a      	str	r2, [r3, #8]
 8004206:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004208:	1d3b      	adds	r3, r7, #4
 800420a:	2200      	movs	r2, #0
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	605a      	str	r2, [r3, #4]
 8004210:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004212:	4b1e      	ldr	r3, [pc, #120]	@ (800428c <MX_TIM2_Init+0x98>)
 8004214:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004218:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 800421a:	4b1c      	ldr	r3, [pc, #112]	@ (800428c <MX_TIM2_Init+0x98>)
 800421c:	220a      	movs	r2, #10
 800421e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004220:	4b1a      	ldr	r3, [pc, #104]	@ (800428c <MX_TIM2_Init+0x98>)
 8004222:	2200      	movs	r2, #0
 8004224:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 640-1;
 8004226:	4b19      	ldr	r3, [pc, #100]	@ (800428c <MX_TIM2_Init+0x98>)
 8004228:	f240 227f 	movw	r2, #639	@ 0x27f
 800422c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800422e:	4b17      	ldr	r3, [pc, #92]	@ (800428c <MX_TIM2_Init+0x98>)
 8004230:	2200      	movs	r2, #0
 8004232:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004234:	4b15      	ldr	r3, [pc, #84]	@ (800428c <MX_TIM2_Init+0x98>)
 8004236:	2280      	movs	r2, #128	@ 0x80
 8004238:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800423a:	4814      	ldr	r0, [pc, #80]	@ (800428c <MX_TIM2_Init+0x98>)
 800423c:	f007 fcdc 	bl	800bbf8 <HAL_TIM_Base_Init>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004246:	f000 f85f 	bl	8004308 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800424a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800424e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004250:	f107 0310 	add.w	r3, r7, #16
 8004254:	4619      	mov	r1, r3
 8004256:	480d      	ldr	r0, [pc, #52]	@ (800428c <MX_TIM2_Init+0x98>)
 8004258:	f007 fe7b 	bl	800bf52 <HAL_TIM_ConfigClockSource>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004262:	f000 f851 	bl	8004308 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004266:	2320      	movs	r3, #32
 8004268:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800426a:	2300      	movs	r3, #0
 800426c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800426e:	1d3b      	adds	r3, r7, #4
 8004270:	4619      	mov	r1, r3
 8004272:	4806      	ldr	r0, [pc, #24]	@ (800428c <MX_TIM2_Init+0x98>)
 8004274:	f008 f86a 	bl	800c34c <HAL_TIMEx_MasterConfigSynchronization>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800427e:	f000 f843 	bl	8004308 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004282:	bf00      	nop
 8004284:	3720      	adds	r7, #32
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	200006a4 	.word	0x200006a4

08004290 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004294:	2004      	movs	r0, #4
 8004296:	f7ff fd73 	bl	8003d80 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800429a:	2001      	movs	r0, #1
 800429c:	f7ff fd70 	bl	8003d80 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80042a0:	2200      	movs	r2, #0
 80042a2:	2100      	movs	r1, #0
 80042a4:	200b      	movs	r0, #11
 80042a6:	f002 f8fe 	bl	80064a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80042aa:	200b      	movs	r0, #11
 80042ac:	f002 f915 	bl	80064da <HAL_NVIC_EnableIRQ>

}
 80042b0:	bf00      	nop
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80042b8:	2004      	movs	r0, #4
 80042ba:	f7ff fd7a 	bl	8003db2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80042be:	2002      	movs	r0, #2
 80042c0:	f7ff fd77 	bl	8003db2 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80042c4:	2001      	movs	r0, #1
 80042c6:	f7ff fd74 	bl	8003db2 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80042ca:	bf00      	nop
 80042cc:	bd80      	pop	{r7, pc}

080042ce <prepare_data_packet_audio>:
    buffer[1 + 2 * sizeof(float) * 3 + sizeof(uint16_t)] = (uint16_t)var2;*/

    // Set the total length of the packet
    *length = 1 + 2 * sizeof(float) * 3 + 2*sizeof(uint16_t);
}
void prepare_data_packet_audio(uint16_t var1, uint16_t var2, uint8_t *buffer, size_t *length) {
 80042ce:	b480      	push	{r7}
 80042d0:	b085      	sub	sp, #20
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	60ba      	str	r2, [r7, #8]
 80042d6:	607b      	str	r3, [r7, #4]
 80042d8:	4603      	mov	r3, r0
 80042da:	81fb      	strh	r3, [r7, #14]
 80042dc:	460b      	mov	r3, r1
 80042de:	81bb      	strh	r3, [r7, #12]
    // Define the start byte
    buffer[0] = (uint8_t)-128;
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	2280      	movs	r2, #128	@ 0x80
 80042e4:	701a      	strb	r2, [r3, #0]
    memcpy(&buffer[1], &var1, sizeof(uint16_t));
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	3301      	adds	r3, #1
 80042ea:	89fa      	ldrh	r2, [r7, #14]
 80042ec:	801a      	strh	r2, [r3, #0]
    memcpy(&buffer[1 + sizeof(uint16_t)], &var2, sizeof(uint16_t));
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	3303      	adds	r3, #3
 80042f2:	89ba      	ldrh	r2, [r7, #12]
 80042f4:	801a      	strh	r2, [r3, #0]

    // Set the total length of the packet
    *length = 1 + 2*sizeof(uint16_t);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2205      	movs	r2, #5
 80042fa:	601a      	str	r2, [r3, #0]
}
 80042fc:	bf00      	nop
 80042fe:	3714      	adds	r7, #20
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800430c:	b672      	cpsid	i
}
 800430e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004310:	bf00      	nop
 8004312:	e7fd      	b.n	8004310 <Error_Handler+0x8>

08004314 <LL_AHB2_GRP1_EnableClock>:
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800431c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004320:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004322:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4313      	orrs	r3, r2
 800432a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800432c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004330:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4013      	ands	r3, r2
 8004336:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004338:	68fb      	ldr	r3, [r7, #12]
}
 800433a:	bf00      	nop
 800433c:	3714      	adds	r7, #20
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004346:	b480      	push	{r7}
 8004348:	b085      	sub	sp, #20
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800434e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004352:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004354:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4313      	orrs	r3, r2
 800435c:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800435e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004362:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4013      	ands	r3, r2
 8004368:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800436a:	68fb      	ldr	r3, [r7, #12]
}
 800436c:	bf00      	nop
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800437c:	bf00      	nop
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
	...

08004388 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b088      	sub	sp, #32
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004390:	f107 030c 	add.w	r3, r7, #12
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]
 8004398:	605a      	str	r2, [r3, #4]
 800439a:	609a      	str	r2, [r3, #8]
 800439c:	60da      	str	r2, [r3, #12]
 800439e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a26      	ldr	r2, [pc, #152]	@ (8004440 <HAL_ADC_MspInit+0xb8>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d145      	bne.n	8004436 <HAL_ADC_MspInit+0xae>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80043aa:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80043ae:	f7ff ffb1 	bl	8004314 <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043b2:	2004      	movs	r0, #4
 80043b4:	f7ff ffae 	bl	8004314 <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80043b8:	2303      	movs	r3, #3
 80043ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80043bc:	2303      	movs	r3, #3
 80043be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c0:	2300      	movs	r3, #0
 80043c2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043c4:	f107 030c 	add.w	r3, r7, #12
 80043c8:	4619      	mov	r1, r3
 80043ca:	481e      	ldr	r0, [pc, #120]	@ (8004444 <HAL_ADC_MspInit+0xbc>)
 80043cc:	f002 fb82 	bl	8006ad4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80043d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004448 <HAL_ADC_MspInit+0xc0>)
 80043d2:	4a1e      	ldr	r2, [pc, #120]	@ (800444c <HAL_ADC_MspInit+0xc4>)
 80043d4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80043d6:	4b1c      	ldr	r3, [pc, #112]	@ (8004448 <HAL_ADC_MspInit+0xc0>)
 80043d8:	2205      	movs	r2, #5
 80043da:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043dc:	4b1a      	ldr	r3, [pc, #104]	@ (8004448 <HAL_ADC_MspInit+0xc0>)
 80043de:	2200      	movs	r2, #0
 80043e0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80043e2:	4b19      	ldr	r3, [pc, #100]	@ (8004448 <HAL_ADC_MspInit+0xc0>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80043e8:	4b17      	ldr	r3, [pc, #92]	@ (8004448 <HAL_ADC_MspInit+0xc0>)
 80043ea:	2280      	movs	r2, #128	@ 0x80
 80043ec:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80043ee:	4b16      	ldr	r3, [pc, #88]	@ (8004448 <HAL_ADC_MspInit+0xc0>)
 80043f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80043f4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80043f6:	4b14      	ldr	r3, [pc, #80]	@ (8004448 <HAL_ADC_MspInit+0xc0>)
 80043f8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80043fc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80043fe:	4b12      	ldr	r3, [pc, #72]	@ (8004448 <HAL_ADC_MspInit+0xc0>)
 8004400:	2220      	movs	r2, #32
 8004402:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004404:	4b10      	ldr	r3, [pc, #64]	@ (8004448 <HAL_ADC_MspInit+0xc0>)
 8004406:	2200      	movs	r2, #0
 8004408:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800440a:	480f      	ldr	r0, [pc, #60]	@ (8004448 <HAL_ADC_MspInit+0xc0>)
 800440c:	f002 f880 	bl	8006510 <HAL_DMA_Init>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d001      	beq.n	800441a <HAL_ADC_MspInit+0x92>
    {
      Error_Handler();
 8004416:	f7ff ff77 	bl	8004308 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a0a      	ldr	r2, [pc, #40]	@ (8004448 <HAL_ADC_MspInit+0xc0>)
 800441e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004420:	4a09      	ldr	r2, [pc, #36]	@ (8004448 <HAL_ADC_MspInit+0xc0>)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 2, 0);
 8004426:	2200      	movs	r2, #0
 8004428:	2102      	movs	r1, #2
 800442a:	2012      	movs	r0, #18
 800442c:	f002 f83b 	bl	80064a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8004430:	2012      	movs	r0, #18
 8004432:	f002 f852 	bl	80064da <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8004436:	bf00      	nop
 8004438:	3720      	adds	r7, #32
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	50040000 	.word	0x50040000
 8004444:	48000800 	.word	0x48000800
 8004448:	200005f0 	.word	0x200005f0
 800444c:	40020008 	.word	0x40020008

08004450 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b09c      	sub	sp, #112	@ 0x70
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004458:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800445c:	2200      	movs	r2, #0
 800445e:	601a      	str	r2, [r3, #0]
 8004460:	605a      	str	r2, [r3, #4]
 8004462:	609a      	str	r2, [r3, #8]
 8004464:	60da      	str	r2, [r3, #12]
 8004466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004468:	f107 030c 	add.w	r3, r7, #12
 800446c:	2250      	movs	r2, #80	@ 0x50
 800446e:	2100      	movs	r1, #0
 8004470:	4618      	mov	r0, r3
 8004472:	f00e faf2 	bl	8012a5a <memset>
  if(hi2c->Instance==I2C1)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a1f      	ldr	r2, [pc, #124]	@ (80044f8 <HAL_I2C_MspInit+0xa8>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d136      	bne.n	80044ee <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004480:	2304      	movs	r3, #4
 8004482:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004484:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8004488:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800448a:	f107 030c 	add.w	r3, r7, #12
 800448e:	4618      	mov	r0, r3
 8004490:	f007 f92b 	bl	800b6ea <HAL_RCCEx_PeriphCLKConfig>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800449a:	f7ff ff35 	bl	8004308 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800449e:	2002      	movs	r0, #2
 80044a0:	f7ff ff38 	bl	8004314 <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80044a4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80044a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80044aa:	2312      	movs	r3, #18
 80044ac:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ae:	2300      	movs	r3, #0
 80044b0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044b2:	2300      	movs	r3, #0
 80044b4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80044b6:	2304      	movs	r3, #4
 80044b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044ba:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80044be:	4619      	mov	r1, r3
 80044c0:	480e      	ldr	r0, [pc, #56]	@ (80044fc <HAL_I2C_MspInit+0xac>)
 80044c2:	f002 fb07 	bl	8006ad4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80044c6:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80044ca:	f7ff ff3c 	bl	8004346 <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80044ce:	2200      	movs	r2, #0
 80044d0:	2100      	movs	r1, #0
 80044d2:	201e      	movs	r0, #30
 80044d4:	f001 ffe7 	bl	80064a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80044d8:	201e      	movs	r0, #30
 80044da:	f001 fffe 	bl	80064da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80044de:	2200      	movs	r2, #0
 80044e0:	2100      	movs	r1, #0
 80044e2:	201f      	movs	r0, #31
 80044e4:	f001 ffdf 	bl	80064a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80044e8:	201f      	movs	r0, #31
 80044ea:	f001 fff6 	bl	80064da <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80044ee:	bf00      	nop
 80044f0:	3770      	adds	r7, #112	@ 0x70
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	40005400 	.word	0x40005400
 80044fc:	48000400 	.word	0x48000400

08004500 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004510:	d10a      	bne.n	8004528 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004512:	2001      	movs	r0, #1
 8004514:	f7ff ff17 	bl	8004346 <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004518:	2200      	movs	r2, #0
 800451a:	2100      	movs	r1, #0
 800451c:	201c      	movs	r0, #28
 800451e:	f001 ffc2 	bl	80064a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004522:	201c      	movs	r0, #28
 8004524:	f001 ffd9 	bl	80064da <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8004528:	bf00      	nop
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004530:	b480      	push	{r7}
 8004532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004534:	bf00      	nop
 8004536:	e7fd      	b.n	8004534 <NMI_Handler+0x4>

08004538 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800453c:	bf00      	nop
 800453e:	e7fd      	b.n	800453c <HardFault_Handler+0x4>

08004540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004544:	bf00      	nop
 8004546:	e7fd      	b.n	8004544 <MemManage_Handler+0x4>

08004548 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800454c:	bf00      	nop
 800454e:	e7fd      	b.n	800454c <BusFault_Handler+0x4>

08004550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004550:	b480      	push	{r7}
 8004552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004554:	bf00      	nop
 8004556:	e7fd      	b.n	8004554 <UsageFault_Handler+0x4>

08004558 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004558:	b480      	push	{r7}
 800455a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800455c:	bf00      	nop
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004566:	b480      	push	{r7}
 8004568:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800456a:	bf00      	nop
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004574:	b480      	push	{r7}
 8004576:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004578:	bf00      	nop
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr

08004582 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004582:	b580      	push	{r7, lr}
 8004584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004586:	f000 fbc7 	bl	8004d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800458a:	bf00      	nop
 800458c:	bd80      	pop	{r7, pc}

0800458e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 8004592:	2001      	movs	r0, #1
 8004594:	f002 fc40 	bl	8006e18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004598:	bf00      	nop
 800459a:	bd80      	pop	{r7, pc}

0800459c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 80045a0:	2002      	movs	r0, #2
 80045a2:	f002 fc39 	bl	8006e18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80045a6:	bf00      	nop
 80045a8:	bd80      	pop	{r7, pc}

080045aa <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 80045ae:	2010      	movs	r0, #16
 80045b0:	f002 fc32 	bl	8006e18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80045b4:	bf00      	nop
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80045bc:	4802      	ldr	r0, [pc, #8]	@ (80045c8 <DMA1_Channel1_IRQHandler+0x10>)
 80045be:	f002 f929 	bl	8006814 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80045c2:	bf00      	nop
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	200005f0 	.word	0x200005f0

080045cc <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80045d0:	4802      	ldr	r0, [pc, #8]	@ (80045dc <ADC1_IRQHandler+0x10>)
 80045d2:	f000 ffa9 	bl	8005528 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80045d6:	bf00      	nop
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	2000058c 	.word	0x2000058c

080045e0 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt.
  */
void USB_HP_IRQHandler(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80045e4:	4802      	ldr	r0, [pc, #8]	@ (80045f0 <USB_HP_IRQHandler+0x10>)
 80045e6:	f004 f8e8 	bl	80087ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 80045ea:	bf00      	nop
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	20001ca4 	.word	0x20001ca4

080045f4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80045f8:	4802      	ldr	r0, [pc, #8]	@ (8004604 <USB_LP_IRQHandler+0x10>)
 80045fa:	f004 f8de 	bl	80087ba <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80045fe:	bf00      	nop
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	20001ca4 	.word	0x20001ca4

08004608 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800460c:	4802      	ldr	r0, [pc, #8]	@ (8004618 <TIM2_IRQHandler+0x10>)
 800460e:	f007 fb99 	bl	800bd44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004612:	bf00      	nop
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	200006a4 	.word	0x200006a4

0800461c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004620:	4802      	ldr	r0, [pc, #8]	@ (800462c <I2C1_EV_IRQHandler+0x10>)
 8004622:	f002 fec5 	bl	80073b0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004626:	bf00      	nop
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	20000650 	.word	0x20000650

08004630 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004634:	4802      	ldr	r0, [pc, #8]	@ (8004640 <I2C1_ER_IRQHandler+0x10>)
 8004636:	f002 fed5 	bl	80073e4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800463a:	bf00      	nop
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	20000650 	.word	0x20000650

08004644 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004644:	b480      	push	{r7}
 8004646:	af00      	add	r7, sp, #0
  return 1;
 8004648:	2301      	movs	r3, #1
}
 800464a:	4618      	mov	r0, r3
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <_kill>:

int _kill(int pid, int sig)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800465e:	f00e fa4f 	bl	8012b00 <__errno>
 8004662:	4603      	mov	r3, r0
 8004664:	2216      	movs	r2, #22
 8004666:	601a      	str	r2, [r3, #0]
  return -1;
 8004668:	f04f 33ff 	mov.w	r3, #4294967295
}
 800466c:	4618      	mov	r0, r3
 800466e:	3708      	adds	r7, #8
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <_exit>:

void _exit (int status)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800467c:	f04f 31ff 	mov.w	r1, #4294967295
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7ff ffe7 	bl	8004654 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004686:	bf00      	nop
 8004688:	e7fd      	b.n	8004686 <_exit+0x12>

0800468a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b086      	sub	sp, #24
 800468e:	af00      	add	r7, sp, #0
 8004690:	60f8      	str	r0, [r7, #12]
 8004692:	60b9      	str	r1, [r7, #8]
 8004694:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004696:	2300      	movs	r3, #0
 8004698:	617b      	str	r3, [r7, #20]
 800469a:	e00a      	b.n	80046b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800469c:	f3af 8000 	nop.w
 80046a0:	4601      	mov	r1, r0
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	1c5a      	adds	r2, r3, #1
 80046a6:	60ba      	str	r2, [r7, #8]
 80046a8:	b2ca      	uxtb	r2, r1
 80046aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	3301      	adds	r3, #1
 80046b0:	617b      	str	r3, [r7, #20]
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	dbf0      	blt.n	800469c <_read+0x12>
  }

  return len;
 80046ba:	687b      	ldr	r3, [r7, #4]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3718      	adds	r7, #24
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046d0:	2300      	movs	r3, #0
 80046d2:	617b      	str	r3, [r7, #20]
 80046d4:	e009      	b.n	80046ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	1c5a      	adds	r2, r3, #1
 80046da:	60ba      	str	r2, [r7, #8]
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 fa74 	bl	8004bcc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	3301      	adds	r3, #1
 80046e8:	617b      	str	r3, [r7, #20]
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	dbf1      	blt.n	80046d6 <_write+0x12>
  }
  return len;
 80046f2:	687b      	ldr	r3, [r7, #4]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3718      	adds	r7, #24
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <_close>:

int _close(int file)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004704:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004708:	4618      	mov	r0, r3
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004724:	605a      	str	r2, [r3, #4]
  return 0;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <_isatty>:

int _isatty(int file)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800473c:	2301      	movs	r3, #1
}
 800473e:	4618      	mov	r0, r3
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800474a:	b480      	push	{r7}
 800474c:	b085      	sub	sp, #20
 800474e:	af00      	add	r7, sp, #0
 8004750:	60f8      	str	r0, [r7, #12]
 8004752:	60b9      	str	r1, [r7, #8]
 8004754:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800476c:	4a14      	ldr	r2, [pc, #80]	@ (80047c0 <_sbrk+0x5c>)
 800476e:	4b15      	ldr	r3, [pc, #84]	@ (80047c4 <_sbrk+0x60>)
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004778:	4b13      	ldr	r3, [pc, #76]	@ (80047c8 <_sbrk+0x64>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d102      	bne.n	8004786 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004780:	4b11      	ldr	r3, [pc, #68]	@ (80047c8 <_sbrk+0x64>)
 8004782:	4a12      	ldr	r2, [pc, #72]	@ (80047cc <_sbrk+0x68>)
 8004784:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004786:	4b10      	ldr	r3, [pc, #64]	@ (80047c8 <_sbrk+0x64>)
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4413      	add	r3, r2
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	429a      	cmp	r2, r3
 8004792:	d207      	bcs.n	80047a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004794:	f00e f9b4 	bl	8012b00 <__errno>
 8004798:	4603      	mov	r3, r0
 800479a:	220c      	movs	r2, #12
 800479c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800479e:	f04f 33ff 	mov.w	r3, #4294967295
 80047a2:	e009      	b.n	80047b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80047a4:	4b08      	ldr	r3, [pc, #32]	@ (80047c8 <_sbrk+0x64>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80047aa:	4b07      	ldr	r3, [pc, #28]	@ (80047c8 <_sbrk+0x64>)
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4413      	add	r3, r2
 80047b2:	4a05      	ldr	r2, [pc, #20]	@ (80047c8 <_sbrk+0x64>)
 80047b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80047b6:	68fb      	ldr	r3, [r7, #12]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3718      	adds	r7, #24
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	20030000 	.word	0x20030000
 80047c4:	00000400 	.word	0x00000400
 80047c8:	20000724 	.word	0x20000724
 80047cc:	200022f0 	.word	0x200022f0

080047d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80047d4:	4b24      	ldr	r3, [pc, #144]	@ (8004868 <SystemInit+0x98>)
 80047d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047da:	4a23      	ldr	r2, [pc, #140]	@ (8004868 <SystemInit+0x98>)
 80047dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80047e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80047e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80047ee:	f043 0301 	orr.w	r3, r3, #1
 80047f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80047f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80047f8:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80047fc:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80047fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004808:	4b18      	ldr	r3, [pc, #96]	@ (800486c <SystemInit+0x9c>)
 800480a:	4013      	ands	r3, r2
 800480c:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800480e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004812:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004816:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800481a:	f023 0305 	bic.w	r3, r3, #5
 800481e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004822:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004826:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800482a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800482e:	f023 0301 	bic.w	r3, r3, #1
 8004832:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8004836:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800483a:	4a0d      	ldr	r2, [pc, #52]	@ (8004870 <SystemInit+0xa0>)
 800483c:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800483e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004842:	4a0b      	ldr	r2, [pc, #44]	@ (8004870 <SystemInit+0xa0>)
 8004844:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004846:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004850:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004854:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004856:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800485a:	2200      	movs	r2, #0
 800485c:	619a      	str	r2, [r3, #24]
}
 800485e:	bf00      	nop
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr
 8004868:	e000ed00 	.word	0xe000ed00
 800486c:	faf6fefb 	.word	0xfaf6fefb
 8004870:	22041000 	.word	0x22041000

08004874 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8004874:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004876:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004878:	3304      	adds	r3, #4

0800487a <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800487a:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800487c:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800487e:	d3f9      	bcc.n	8004874 <CopyDataInit>
  bx lr
 8004880:	4770      	bx	lr

08004882 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8004882:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8004884:	3004      	adds	r0, #4

08004886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8004886:	4288      	cmp	r0, r1
  bcc FillZerobss
 8004888:	d3fb      	bcc.n	8004882 <FillZerobss>
  bx lr
 800488a:	4770      	bx	lr

0800488c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800488c:	480c      	ldr	r0, [pc, #48]	@ (80048c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800488e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004890:	f7ff ff9e 	bl	80047d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8004894:	480b      	ldr	r0, [pc, #44]	@ (80048c4 <LoopForever+0x6>)
 8004896:	490c      	ldr	r1, [pc, #48]	@ (80048c8 <LoopForever+0xa>)
 8004898:	4a0c      	ldr	r2, [pc, #48]	@ (80048cc <LoopForever+0xe>)
 800489a:	2300      	movs	r3, #0
 800489c:	f7ff ffed 	bl	800487a <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80048a0:	480b      	ldr	r0, [pc, #44]	@ (80048d0 <LoopForever+0x12>)
 80048a2:	490c      	ldr	r1, [pc, #48]	@ (80048d4 <LoopForever+0x16>)
 80048a4:	4a0c      	ldr	r2, [pc, #48]	@ (80048d8 <LoopForever+0x1a>)
 80048a6:	2300      	movs	r3, #0
 80048a8:	f7ff ffe7 	bl	800487a <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80048ac:	480b      	ldr	r0, [pc, #44]	@ (80048dc <LoopForever+0x1e>)
 80048ae:	490c      	ldr	r1, [pc, #48]	@ (80048e0 <LoopForever+0x22>)
 80048b0:	2300      	movs	r3, #0
 80048b2:	f7ff ffe8 	bl	8004886 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80048b6:	f00e f929 	bl	8012b0c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80048ba:	f7ff fabd 	bl	8003e38 <main>

080048be <LoopForever>:

LoopForever:
  b LoopForever
 80048be:	e7fe      	b.n	80048be <LoopForever>
  ldr   r0, =_estack
 80048c0:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80048c4:	20000008 	.word	0x20000008
 80048c8:	200002f0 	.word	0x200002f0
 80048cc:	08014e30 	.word	0x08014e30
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80048d0:	20030000 	.word	0x20030000
 80048d4:	20030000 	.word	0x20030000
 80048d8:	08015118 	.word	0x08015118
  INIT_BSS _sbss, _ebss
 80048dc:	200002f0 	.word	0x200002f0
 80048e0:	200022ec 	.word	0x200022ec

080048e4 <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80048e4:	e7fe      	b.n	80048e4 <AES1_IRQHandler>

080048e6 <LL_AHB2_GRP1_EnableClock>:
{
 80048e6:	b480      	push	{r7}
 80048e8:	b085      	sub	sp, #20
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80048ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80048f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80048f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80048fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004902:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4013      	ands	r3, r2
 8004908:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800490a:	68fb      	ldr	r3, [r7, #12]
}
 800490c:	bf00      	nop
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004920:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004924:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004926:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4313      	orrs	r3, r2
 800492e:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004930:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004934:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4013      	ands	r3, r2
 800493a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800493c:	68fb      	ldr	r3, [r7, #12]
}
 800493e:	bf00      	nop
 8004940:	3714      	adds	r7, #20
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
	...

0800494c <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b088      	sub	sp, #32
 8004950:	af00      	add	r7, sp, #0
 8004952:	4603      	mov	r3, r0
 8004954:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8004956:	f107 030c 	add.w	r3, r7, #12
 800495a:	2200      	movs	r2, #0
 800495c:	601a      	str	r2, [r3, #0]
 800495e:	605a      	str	r2, [r3, #4]
 8004960:	609a      	str	r2, [r3, #8]
 8004962:	60da      	str	r2, [r3, #12]
 8004964:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8004966:	2002      	movs	r0, #2
 8004968:	f7ff ffbd 	bl	80048e6 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 800496c:	79fb      	ldrb	r3, [r7, #7]
 800496e:	4a12      	ldr	r2, [pc, #72]	@ (80049b8 <BSP_LED_Init+0x6c>)
 8004970:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004974:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004976:	2301      	movs	r3, #1
 8004978:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 800497a:	2300      	movs	r3, #0
 800497c:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800497e:	2302      	movs	r3, #2
 8004980:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8004982:	79fb      	ldrb	r3, [r7, #7]
 8004984:	4a0d      	ldr	r2, [pc, #52]	@ (80049bc <BSP_LED_Init+0x70>)
 8004986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800498a:	f107 020c 	add.w	r2, r7, #12
 800498e:	4611      	mov	r1, r2
 8004990:	4618      	mov	r0, r3
 8004992:	f002 f89f 	bl	8006ad4 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8004996:	79fb      	ldrb	r3, [r7, #7]
 8004998:	4a08      	ldr	r2, [pc, #32]	@ (80049bc <BSP_LED_Init+0x70>)
 800499a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800499e:	79fb      	ldrb	r3, [r7, #7]
 80049a0:	4a05      	ldr	r2, [pc, #20]	@ (80049b8 <BSP_LED_Init+0x6c>)
 80049a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049a6:	2200      	movs	r2, #0
 80049a8:	4619      	mov	r1, r3
 80049aa:	f002 fa03 	bl	8006db4 <HAL_GPIO_WritePin>
}
 80049ae:	bf00      	nop
 80049b0:	3720      	adds	r7, #32
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	08014a80 	.word	0x08014a80
 80049bc:	20000010 	.word	0x20000010

080049c0 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	4603      	mov	r3, r0
 80049c8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80049ca:	79fb      	ldrb	r3, [r7, #7]
 80049cc:	4a07      	ldr	r2, [pc, #28]	@ (80049ec <BSP_LED_On+0x2c>)
 80049ce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80049d2:	79fb      	ldrb	r3, [r7, #7]
 80049d4:	4a06      	ldr	r2, [pc, #24]	@ (80049f0 <BSP_LED_On+0x30>)
 80049d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049da:	2201      	movs	r2, #1
 80049dc:	4619      	mov	r1, r3
 80049de:	f002 f9e9 	bl	8006db4 <HAL_GPIO_WritePin>
}
 80049e2:	bf00      	nop
 80049e4:	3708      	adds	r7, #8
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	20000010 	.word	0x20000010
 80049f0:	08014a80 	.word	0x08014a80

080049f4 <BSP_LED_Toggle>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b082      	sub	sp, #8
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	4603      	mov	r3, r0
 80049fc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80049fe:	79fb      	ldrb	r3, [r7, #7]
 8004a00:	4a07      	ldr	r2, [pc, #28]	@ (8004a20 <BSP_LED_Toggle+0x2c>)
 8004a02:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004a06:	79fb      	ldrb	r3, [r7, #7]
 8004a08:	4906      	ldr	r1, [pc, #24]	@ (8004a24 <BSP_LED_Toggle+0x30>)
 8004a0a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004a0e:	4619      	mov	r1, r3
 8004a10:	4610      	mov	r0, r2
 8004a12:	f002 f9e7 	bl	8006de4 <HAL_GPIO_TogglePin>
}
 8004a16:	bf00      	nop
 8004a18:	3708      	adds	r7, #8
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	20000010 	.word	0x20000010
 8004a24:	08014a80 	.word	0x08014a80

08004a28 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b088      	sub	sp, #32
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	4603      	mov	r3, r0
 8004a30:	460a      	mov	r2, r1
 8004a32:	71fb      	strb	r3, [r7, #7]
 8004a34:	4613      	mov	r3, r2
 8004a36:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8004a38:	f107 030c 	add.w	r3, r7, #12
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	605a      	str	r2, [r3, #4]
 8004a42:	609a      	str	r2, [r3, #8]
 8004a44:	60da      	str	r2, [r3, #12]
 8004a46:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8004a48:	79fb      	ldrb	r3, [r7, #7]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d103      	bne.n	8004a56 <BSP_PB_Init+0x2e>
 8004a4e:	2004      	movs	r0, #4
 8004a50:	f7ff ff49 	bl	80048e6 <LL_AHB2_GRP1_EnableClock>
 8004a54:	e00c      	b.n	8004a70 <BSP_PB_Init+0x48>
 8004a56:	79fb      	ldrb	r3, [r7, #7]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d103      	bne.n	8004a64 <BSP_PB_Init+0x3c>
 8004a5c:	2008      	movs	r0, #8
 8004a5e:	f7ff ff42 	bl	80048e6 <LL_AHB2_GRP1_EnableClock>
 8004a62:	e005      	b.n	8004a70 <BSP_PB_Init+0x48>
 8004a64:	79fb      	ldrb	r3, [r7, #7]
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d102      	bne.n	8004a70 <BSP_PB_Init+0x48>
 8004a6a:	2008      	movs	r0, #8
 8004a6c:	f7ff ff3b 	bl	80048e6 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8004a70:	79bb      	ldrb	r3, [r7, #6]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d117      	bne.n	8004aa6 <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8004a76:	79fb      	ldrb	r3, [r7, #7]
 8004a78:	4a20      	ldr	r2, [pc, #128]	@ (8004afc <BSP_PB_Init+0xd4>)
 8004a7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004a7e:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8004a80:	2300      	movs	r3, #0
 8004a82:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8004a84:	2301      	movs	r3, #1
 8004a86:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004a88:	2302      	movs	r3, #2
 8004a8a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8004a8c:	79fb      	ldrb	r3, [r7, #7]
 8004a8e:	4a1c      	ldr	r2, [pc, #112]	@ (8004b00 <BSP_PB_Init+0xd8>)
 8004a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a94:	f107 020c 	add.w	r2, r7, #12
 8004a98:	4611      	mov	r1, r2
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f002 f81a 	bl	8006ad4 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8004aa0:	2001      	movs	r0, #1
 8004aa2:	f000 f965 	bl	8004d70 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8004aa6:	79bb      	ldrb	r3, [r7, #6]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d123      	bne.n	8004af4 <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8004aac:	79fb      	ldrb	r3, [r7, #7]
 8004aae:	4a13      	ldr	r2, [pc, #76]	@ (8004afc <BSP_PB_Init+0xd4>)
 8004ab0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ab4:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8004aba:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8004abe:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8004ac0:	79fb      	ldrb	r3, [r7, #7]
 8004ac2:	4a0f      	ldr	r2, [pc, #60]	@ (8004b00 <BSP_PB_Init+0xd8>)
 8004ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ac8:	f107 020c 	add.w	r2, r7, #12
 8004acc:	4611      	mov	r1, r2
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f002 f800 	bl	8006ad4 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8004ad4:	79fb      	ldrb	r3, [r7, #7]
 8004ad6:	4a0b      	ldr	r2, [pc, #44]	@ (8004b04 <BSP_PB_Init+0xdc>)
 8004ad8:	5cd3      	ldrb	r3, [r2, r3]
 8004ada:	b25b      	sxtb	r3, r3
 8004adc:	2200      	movs	r2, #0
 8004ade:	210f      	movs	r1, #15
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f001 fce0 	bl	80064a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8004ae6:	79fb      	ldrb	r3, [r7, #7]
 8004ae8:	4a06      	ldr	r2, [pc, #24]	@ (8004b04 <BSP_PB_Init+0xdc>)
 8004aea:	5cd3      	ldrb	r3, [r2, r3]
 8004aec:	b25b      	sxtb	r3, r3
 8004aee:	4618      	mov	r0, r3
 8004af0:	f001 fcf3 	bl	80064da <HAL_NVIC_EnableIRQ>
  }
}
 8004af4:	bf00      	nop
 8004af6:	3720      	adds	r7, #32
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	08014a88 	.word	0x08014a88
 8004b00:	2000001c 	.word	0x2000001c
 8004b04:	08014a90 	.word	0x08014a90

08004b08 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	4603      	mov	r3, r0
 8004b10:	6039      	str	r1, [r7, #0]
 8004b12:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8004b14:	2300      	movs	r3, #0
 8004b16:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8004b18:	79fb      	ldrb	r3, [r7, #7]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d903      	bls.n	8004b26 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004b1e:	f06f 0301 	mvn.w	r3, #1
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	e018      	b.n	8004b58 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8004b26:	79fb      	ldrb	r3, [r7, #7]
 8004b28:	2294      	movs	r2, #148	@ 0x94
 8004b2a:	fb02 f303 	mul.w	r3, r2, r3
 8004b2e:	4a0d      	ldr	r2, [pc, #52]	@ (8004b64 <BSP_COM_Init+0x5c>)
 8004b30:	4413      	add	r3, r2
 8004b32:	4618      	mov	r0, r3
 8004b34:	f000 f866 	bl	8004c04 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8004b38:	79fb      	ldrb	r3, [r7, #7]
 8004b3a:	2294      	movs	r2, #148	@ 0x94
 8004b3c:	fb02 f303 	mul.w	r3, r2, r3
 8004b40:	4a08      	ldr	r2, [pc, #32]	@ (8004b64 <BSP_COM_Init+0x5c>)
 8004b42:	4413      	add	r3, r2
 8004b44:	6839      	ldr	r1, [r7, #0]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 f80e 	bl	8004b68 <MX_LPUART1_Init>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d002      	beq.n	8004b58 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8004b52:	f06f 0303 	mvn.w	r3, #3
 8004b56:	e000      	b.n	8004b5a <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8004b58:	68fb      	ldr	r3, [r7, #12]
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	20000728 	.word	0x20000728

08004b68 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8004b72:	4b15      	ldr	r3, [pc, #84]	@ (8004bc8 <MX_LPUART1_Init+0x60>)
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	220c      	movs	r2, #12
 8004b86:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	895b      	ldrh	r3, [r3, #10]
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685a      	ldr	r2, [r3, #4]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	891b      	ldrh	r3, [r3, #8]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	899b      	ldrh	r3, [r3, #12]
 8004ba8:	461a      	mov	r2, r3
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004bb4:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f007 fc66 	bl	800c488 <HAL_UART_Init>
 8004bbc:	4603      	mov	r3, r0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20000028 	.word	0x20000028

08004bcc <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8004bd4:	4b09      	ldr	r3, [pc, #36]	@ (8004bfc <__io_putchar+0x30>)
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	461a      	mov	r2, r3
 8004bda:	2394      	movs	r3, #148	@ 0x94
 8004bdc:	fb02 f303 	mul.w	r3, r2, r3
 8004be0:	4a07      	ldr	r2, [pc, #28]	@ (8004c00 <__io_putchar+0x34>)
 8004be2:	1898      	adds	r0, r3, r2
 8004be4:	1d39      	adds	r1, r7, #4
 8004be6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004bea:	2201      	movs	r2, #1
 8004bec:	f007 fca6 	bl	800c53c <HAL_UART_Transmit>
  return ch;
 8004bf0:	687b      	ldr	r3, [r7, #4]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	200007bc 	.word	0x200007bc
 8004c00:	20000728 	.word	0x20000728

08004c04 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b088      	sub	sp, #32
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8004c0c:	2002      	movs	r0, #2
 8004c0e:	f7ff fe6a 	bl	80048e6 <LL_AHB2_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
 8004c12:	2002      	movs	r0, #2
 8004c14:	f7ff fe67 	bl	80048e6 <LL_AHB2_GRP1_EnableClock>

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8004c18:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8004c1c:	f7ff fe7c 	bl	8004918 <LL_APB2_GRP1_EnableClock>

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8004c20:	2340      	movs	r3, #64	@ 0x40
 8004c22:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004c24:	2302      	movs	r3, #2
 8004c26:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004c28:	2302      	movs	r3, #2
 8004c2a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8004c30:	2307      	movs	r3, #7
 8004c32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8004c34:	f107 030c 	add.w	r3, r7, #12
 8004c38:	4619      	mov	r1, r3
 8004c3a:	4809      	ldr	r0, [pc, #36]	@ (8004c60 <COM1_MspInit+0x5c>)
 8004c3c:	f001 ff4a 	bl	8006ad4 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8004c40:	2380      	movs	r3, #128	@ 0x80
 8004c42:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004c44:	2302      	movs	r3, #2
 8004c46:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8004c48:	2307      	movs	r3, #7
 8004c4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8004c4c:	f107 030c 	add.w	r3, r7, #12
 8004c50:	4619      	mov	r1, r3
 8004c52:	4803      	ldr	r0, [pc, #12]	@ (8004c60 <COM1_MspInit+0x5c>)
 8004c54:	f001 ff3e 	bl	8006ad4 <HAL_GPIO_Init>
}
 8004c58:	bf00      	nop
 8004c5a:	3720      	adds	r7, #32
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	48000400 	.word	0x48000400

08004c64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8004ca0 <HAL_Init+0x3c>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a0b      	ldr	r2, [pc, #44]	@ (8004ca0 <HAL_Init+0x3c>)
 8004c74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c78:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c7a:	2003      	movs	r0, #3
 8004c7c:	f001 fc08 	bl	8006490 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004c80:	2000      	movs	r0, #0
 8004c82:	f000 f80f 	bl	8004ca4 <HAL_InitTick>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d002      	beq.n	8004c92 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	71fb      	strb	r3, [r7, #7]
 8004c90:	e001      	b.n	8004c96 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004c92:	f7ff fb71 	bl	8004378 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004c96:	79fb      	ldrb	r3, [r7, #7]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3708      	adds	r7, #8
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	58004000 	.word	0x58004000

08004ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004cac:	2300      	movs	r3, #0
 8004cae:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8004cb0:	4b17      	ldr	r3, [pc, #92]	@ (8004d10 <HAL_InitTick+0x6c>)
 8004cb2:	781b      	ldrb	r3, [r3, #0]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d024      	beq.n	8004d02 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004cb8:	f006 fa86 	bl	800b1c8 <HAL_RCC_GetHCLKFreq>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	4b14      	ldr	r3, [pc, #80]	@ (8004d10 <HAL_InitTick+0x6c>)
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004cc8:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f001 fc10 	bl	80064f6 <HAL_SYSTICK_Config>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10f      	bne.n	8004cfc <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b0f      	cmp	r3, #15
 8004ce0:	d809      	bhi.n	8004cf6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	6879      	ldr	r1, [r7, #4]
 8004ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8004cea:	f001 fbdc 	bl	80064a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004cee:	4a09      	ldr	r2, [pc, #36]	@ (8004d14 <HAL_InitTick+0x70>)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6013      	str	r3, [r2, #0]
 8004cf4:	e007      	b.n	8004d06 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	73fb      	strb	r3, [r7, #15]
 8004cfa:	e004      	b.n	8004d06 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	73fb      	strb	r3, [r7, #15]
 8004d00:	e001      	b.n	8004d06 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	20000030 	.word	0x20000030
 8004d14:	2000002c 	.word	0x2000002c

08004d18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004d1c:	4b06      	ldr	r3, [pc, #24]	@ (8004d38 <HAL_IncTick+0x20>)
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	461a      	mov	r2, r3
 8004d22:	4b06      	ldr	r3, [pc, #24]	@ (8004d3c <HAL_IncTick+0x24>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4413      	add	r3, r2
 8004d28:	4a04      	ldr	r2, [pc, #16]	@ (8004d3c <HAL_IncTick+0x24>)
 8004d2a:	6013      	str	r3, [r2, #0]
}
 8004d2c:	bf00      	nop
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	20000030 	.word	0x20000030
 8004d3c:	200007c0 	.word	0x200007c0

08004d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d40:	b480      	push	{r7}
 8004d42:	af00      	add	r7, sp, #0
  return uwTick;
 8004d44:	4b03      	ldr	r3, [pc, #12]	@ (8004d54 <HAL_GetTick+0x14>)
 8004d46:	681b      	ldr	r3, [r3, #0]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	200007c0 	.word	0x200007c0

08004d58 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8004d5c:	4b03      	ldr	r3, [pc, #12]	@ (8004d6c <HAL_GetTickPrio+0x14>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	2000002c 	.word	0x2000002c

08004d70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d78:	f7ff ffe2 	bl	8004d40 <HAL_GetTick>
 8004d7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d88:	d005      	beq.n	8004d96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8004db4 <HAL_Delay+0x44>)
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	4413      	add	r3, r2
 8004d94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004d96:	bf00      	nop
 8004d98:	f7ff ffd2 	bl	8004d40 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d8f7      	bhi.n	8004d98 <HAL_Delay+0x28>
  {
  }
}
 8004da8:	bf00      	nop
 8004daa:	bf00      	nop
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	20000030 	.word	0x20000030

08004db8 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8004dd2:	bf00      	nop
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b083      	sub	sp, #12
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
 8004de6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	431a      	orrs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	609a      	str	r2, [r3, #8]
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8004e14:	4618      	mov	r0, r3
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b087      	sub	sp, #28
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	60b9      	str	r1, [r7, #8]
 8004e2a:	607a      	str	r2, [r7, #4]
 8004e2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	3360      	adds	r3, #96	@ 0x60
 8004e32:	461a      	mov	r2, r3
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4413      	add	r3, r2
 8004e3a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	4b08      	ldr	r3, [pc, #32]	@ (8004e64 <LL_ADC_SetOffset+0x44>)
 8004e42:	4013      	ands	r3, r2
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8004e4a:	683a      	ldr	r2, [r7, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004e58:	bf00      	nop
 8004e5a:	371c      	adds	r7, #28
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr
 8004e64:	03fff000 	.word	0x03fff000

08004e68 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b085      	sub	sp, #20
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	3360      	adds	r3, #96	@ 0x60
 8004e76:	461a      	mov	r2, r3
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4413      	add	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3714      	adds	r7, #20
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b087      	sub	sp, #28
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	3360      	adds	r3, #96	@ 0x60
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	431a      	orrs	r2, r3
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8004ebe:	bf00      	nop
 8004ec0:	371c      	adds	r7, #28
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b083      	sub	sp, #12
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e000      	b.n	8004ee4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004ee2:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	3330      	adds	r3, #48	@ 0x30
 8004f00:	461a      	mov	r2, r3
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	0a1b      	lsrs	r3, r3, #8
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	f003 030c 	and.w	r3, r3, #12
 8004f0c:	4413      	add	r3, r2
 8004f0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	f003 031f 	and.w	r3, r3, #31
 8004f1a:	211f      	movs	r1, #31
 8004f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004f20:	43db      	mvns	r3, r3
 8004f22:	401a      	ands	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	0e9b      	lsrs	r3, r3, #26
 8004f28:	f003 011f 	and.w	r1, r3, #31
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	f003 031f 	and.w	r3, r3, #31
 8004f32:	fa01 f303 	lsl.w	r3, r1, r3
 8004f36:	431a      	orrs	r2, r3
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8004f3c:	bf00      	nop
 8004f3e:	371c      	adds	r7, #28
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	f003 0303 	and.w	r3, r3, #3
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f70:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d101      	bne.n	8004f7c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e000      	b.n	8004f7e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b087      	sub	sp, #28
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	60f8      	str	r0, [r7, #12]
 8004f92:	60b9      	str	r1, [r7, #8]
 8004f94:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	3314      	adds	r3, #20
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	0e5b      	lsrs	r3, r3, #25
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	f003 0304 	and.w	r3, r3, #4
 8004fa6:	4413      	add	r3, r2
 8004fa8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	0d1b      	lsrs	r3, r3, #20
 8004fb2:	f003 031f 	and.w	r3, r3, #31
 8004fb6:	2107      	movs	r1, #7
 8004fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8004fbc:	43db      	mvns	r3, r3
 8004fbe:	401a      	ands	r2, r3
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	0d1b      	lsrs	r3, r3, #20
 8004fc4:	f003 031f 	and.w	r3, r3, #31
 8004fc8:	6879      	ldr	r1, [r7, #4]
 8004fca:	fa01 f303 	lsl.w	r3, r1, r3
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8004fd4:	bf00      	nop
 8004fd6:	371c      	adds	r7, #28
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ff8:	43db      	mvns	r3, r3
 8004ffa:	401a      	ands	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f003 0318 	and.w	r3, r3, #24
 8005002:	4908      	ldr	r1, [pc, #32]	@ (8005024 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005004:	40d9      	lsrs	r1, r3
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	400b      	ands	r3, r1
 800500a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800500e:	431a      	orrs	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005016:	bf00      	nop
 8005018:	3714      	adds	r7, #20
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	0007ffff 	.word	0x0007ffff

08005028 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005038:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	6093      	str	r3, [r2, #8]
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800505c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005060:	d101      	bne.n	8005066 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005062:	2301      	movs	r3, #1
 8005064:	e000      	b.n	8005068 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8005084:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005088:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80050b0:	d101      	bne.n	80050b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80050b2:	2301      	movs	r3, #1
 80050b4:	e000      	b.n	80050b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80050d4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80050d8:	f043 0201 	orr.w	r2, r3, #1
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f003 0301 	and.w	r3, r3, #1
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d101      	bne.n	8005104 <LL_ADC_IsEnabled+0x18>
 8005100:	2301      	movs	r3, #1
 8005102:	e000      	b.n	8005106 <LL_ADC_IsEnabled+0x1a>
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	370c      	adds	r7, #12
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005112:	b480      	push	{r7}
 8005114:	b083      	sub	sp, #12
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005122:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005126:	f043 0204 	orr.w	r2, r3, #4
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800512e:	bf00      	nop
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800513a:	b480      	push	{r7}
 800513c:	b083      	sub	sp, #12
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f003 0304 	and.w	r3, r3, #4
 800514a:	2b04      	cmp	r3, #4
 800514c:	d101      	bne.n	8005152 <LL_ADC_REG_IsConversionOngoing+0x18>
 800514e:	2301      	movs	r3, #1
 8005150:	e000      	b.n	8005154 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f003 0308 	and.w	r3, r3, #8
 8005170:	2b08      	cmp	r3, #8
 8005172:	d101      	bne.n	8005178 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005174:	2301      	movs	r3, #1
 8005176:	e000      	b.n	800517a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
	...

08005188 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b088      	sub	sp, #32
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005190:	2300      	movs	r3, #0
 8005192:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 8005194:	2300      	movs	r3, #0
 8005196:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005198:	2300      	movs	r3, #0
 800519a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e12e      	b.n	8005404 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d109      	bne.n	80051c8 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f7ff f8e7 	bl	8004388 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7ff ff3d 	bl	800504c <LL_ADC_IsDeepPowerDownEnabled>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d004      	beq.n	80051e2 <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4618      	mov	r0, r3
 80051de:	f7ff ff23 	bl	8005028 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7ff ff58 	bl	800509c <LL_ADC_IsInternalRegulatorEnabled>
 80051ec:	4603      	mov	r3, r0
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d115      	bne.n	800521e <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7ff ff3c 	bl	8005074 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80051fc:	4b83      	ldr	r3, [pc, #524]	@ (800540c <HAL_ADC_Init+0x284>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	099b      	lsrs	r3, r3, #6
 8005202:	4a83      	ldr	r2, [pc, #524]	@ (8005410 <HAL_ADC_Init+0x288>)
 8005204:	fba2 2303 	umull	r2, r3, r2, r3
 8005208:	099b      	lsrs	r3, r3, #6
 800520a:	3301      	adds	r3, #1
 800520c:	005b      	lsls	r3, r3, #1
 800520e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005210:	e002      	b.n	8005218 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	3b01      	subs	r3, #1
 8005216:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005218:	68bb      	ldr	r3, [r7, #8]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d1f9      	bne.n	8005212 <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4618      	mov	r0, r3
 8005224:	f7ff ff3a 	bl	800509c <LL_ADC_IsInternalRegulatorEnabled>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10d      	bne.n	800524a <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005232:	f043 0210 	orr.w	r2, r3, #16
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800523e:	f043 0201 	orr.w	r2, r3, #1
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4618      	mov	r0, r3
 8005250:	f7ff ff73 	bl	800513a <LL_ADC_REG_IsConversionOngoing>
 8005254:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800525a:	f003 0310 	and.w	r3, r3, #16
 800525e:	2b00      	cmp	r3, #0
 8005260:	f040 80c7 	bne.w	80053f2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	2b00      	cmp	r3, #0
 8005268:	f040 80c3 	bne.w	80053f2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005270:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005274:	f043 0202 	orr.w	r2, r3, #2
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4618      	mov	r0, r3
 8005282:	f7ff ff33 	bl	80050ec <LL_ADC_IsEnabled>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10b      	bne.n	80052a4 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800528c:	4861      	ldr	r0, [pc, #388]	@ (8005414 <HAL_ADC_Init+0x28c>)
 800528e:	f7ff ff2d 	bl	80050ec <LL_ADC_IsEnabled>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d105      	bne.n	80052a4 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	4619      	mov	r1, r3
 800529e:	485e      	ldr	r0, [pc, #376]	@ (8005418 <HAL_ADC_Init+0x290>)
 80052a0:	f7ff fd8a 	bl	8004db8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	7e5b      	ldrb	r3, [r3, #25]
 80052a8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80052ae:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80052b4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80052ba:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052c2:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 80052c4:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80052c6:	69ba      	ldr	r2, [r7, #24]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d106      	bne.n	80052e4 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052da:	3b01      	subs	r3, #1
 80052dc:	045b      	lsls	r3, r3, #17
 80052de:	69ba      	ldr	r2, [r7, #24]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d009      	beq.n	8005300 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80052fa:	69ba      	ldr	r2, [r7, #24]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68da      	ldr	r2, [r3, #12]
 8005306:	4b45      	ldr	r3, [pc, #276]	@ (800541c <HAL_ADC_Init+0x294>)
 8005308:	4013      	ands	r3, r2
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	6812      	ldr	r2, [r2, #0]
 800530e:	69b9      	ldr	r1, [r7, #24]
 8005310:	430b      	orrs	r3, r1
 8005312:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4618      	mov	r0, r3
 800531a:	f7ff ff0e 	bl	800513a <LL_ADC_REG_IsConversionOngoing>
 800531e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4618      	mov	r0, r3
 8005326:	f7ff ff1b 	bl	8005160 <LL_ADC_INJ_IsConversionOngoing>
 800532a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d13d      	bne.n	80053ae <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d13a      	bne.n	80053ae <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800533c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005344:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005346:	4313      	orrs	r3, r2
 8005348:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005354:	f023 0302 	bic.w	r3, r3, #2
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	6812      	ldr	r2, [r2, #0]
 800535c:	69b9      	ldr	r1, [r7, #24]
 800535e:	430b      	orrs	r3, r1
 8005360:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005368:	2b01      	cmp	r3, #1
 800536a:	d118      	bne.n	800539e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005376:	f023 0304 	bic.w	r3, r3, #4
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005382:	4311      	orrs	r1, r2
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005388:	4311      	orrs	r1, r2
 800538a:	687a      	ldr	r2, [r7, #4]
 800538c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800538e:	430a      	orrs	r2, r1
 8005390:	431a      	orrs	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f042 0201 	orr.w	r2, r2, #1
 800539a:	611a      	str	r2, [r3, #16]
 800539c:	e007      	b.n	80053ae <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	691a      	ldr	r2, [r3, #16]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 0201 	bic.w	r2, r2, #1
 80053ac:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d10c      	bne.n	80053d0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053bc:	f023 010f 	bic.w	r1, r3, #15
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	69db      	ldr	r3, [r3, #28]
 80053c4:	1e5a      	subs	r2, r3, #1
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80053ce:	e007      	b.n	80053e0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f022 020f 	bic.w	r2, r2, #15
 80053de:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053e4:	f023 0303 	bic.w	r3, r3, #3
 80053e8:	f043 0201 	orr.w	r2, r3, #1
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80053f0:	e007      	b.n	8005402 <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053f6:	f043 0210 	orr.w	r2, r3, #16
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005402:	7ffb      	ldrb	r3, [r7, #31]
}
 8005404:	4618      	mov	r0, r3
 8005406:	3720      	adds	r7, #32
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	2000000c 	.word	0x2000000c
 8005410:	053e2d63 	.word	0x053e2d63
 8005414:	50040000 	.word	0x50040000
 8005418:	50040300 	.word	0x50040300
 800541c:	fff0c007 	.word	0xfff0c007

08005420 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4618      	mov	r0, r3
 8005432:	f7ff fe82 	bl	800513a <LL_ADC_REG_IsConversionOngoing>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d167      	bne.n	800550c <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005442:	2b01      	cmp	r3, #1
 8005444:	d101      	bne.n	800544a <HAL_ADC_Start_DMA+0x2a>
 8005446:	2302      	movs	r3, #2
 8005448:	e063      	b.n	8005512 <HAL_ADC_Start_DMA+0xf2>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f000 fe0c 	bl	8006070 <ADC_Enable>
 8005458:	4603      	mov	r3, r0
 800545a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800545c:	7dfb      	ldrb	r3, [r7, #23]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d14f      	bne.n	8005502 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005466:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800546a:	f023 0301 	bic.w	r3, r3, #1
 800546e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800547a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d006      	beq.n	8005490 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005486:	f023 0206 	bic.w	r2, r3, #6
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	659a      	str	r2, [r3, #88]	@ 0x58
 800548e:	e002      	b.n	8005496 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800549a:	4a20      	ldr	r2, [pc, #128]	@ (800551c <HAL_ADC_Start_DMA+0xfc>)
 800549c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054a2:	4a1f      	ldr	r2, [pc, #124]	@ (8005520 <HAL_ADC_Start_DMA+0x100>)
 80054a4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054aa:	4a1e      	ldr	r2, [pc, #120]	@ (8005524 <HAL_ADC_Start_DMA+0x104>)
 80054ac:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	221c      	movs	r2, #28
 80054b4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f042 0210 	orr.w	r2, r2, #16
 80054cc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68da      	ldr	r2, [r3, #12]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f042 0201 	orr.w	r2, r2, #1
 80054dc:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	3340      	adds	r3, #64	@ 0x40
 80054e8:	4619      	mov	r1, r3
 80054ea:	68ba      	ldr	r2, [r7, #8]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f001 f8b7 	bl	8006660 <HAL_DMA_Start_IT>
 80054f2:	4603      	mov	r3, r0
 80054f4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7ff fe09 	bl	8005112 <LL_ADC_REG_StartConversion>
 8005500:	e006      	b.n	8005510 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800550a:	e001      	b.n	8005510 <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800550c:	2302      	movs	r3, #2
 800550e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005510:	7dfb      	ldrb	r3, [r7, #23]
}
 8005512:	4618      	mov	r0, r3
 8005514:	3718      	adds	r7, #24
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	08006165 	.word	0x08006165
 8005520:	0800623d 	.word	0x0800623d
 8005524:	08006259 	.word	0x08006259

08005528 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b088      	sub	sp, #32
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005530:	2300      	movs	r3, #0
 8005532:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	f003 0302 	and.w	r3, r3, #2
 800554a:	2b00      	cmp	r3, #0
 800554c:	d017      	beq.n	800557e <HAL_ADC_IRQHandler+0x56>
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	f003 0302 	and.w	r3, r3, #2
 8005554:	2b00      	cmp	r3, #0
 8005556:	d012      	beq.n	800557e <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800555c:	f003 0310 	and.w	r3, r3, #16
 8005560:	2b00      	cmp	r3, #0
 8005562:	d105      	bne.n	8005570 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005568:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 feb3 	bl	80062dc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2202      	movs	r2, #2
 800557c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	f003 0304 	and.w	r3, r3, #4
 8005584:	2b00      	cmp	r3, #0
 8005586:	d004      	beq.n	8005592 <HAL_ADC_IRQHandler+0x6a>
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	f003 0304 	and.w	r3, r3, #4
 800558e:	2b00      	cmp	r3, #0
 8005590:	d109      	bne.n	80055a6 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005598:	2b00      	cmp	r3, #0
 800559a:	d05d      	beq.n	8005658 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	f003 0308 	and.w	r3, r3, #8
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d058      	beq.n	8005658 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055aa:	f003 0310 	and.w	r3, r3, #16
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d105      	bne.n	80055be <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055b6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7ff fc81 	bl	8004eca <LL_ADC_REG_IsTriggerSourceSWStart>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d03d      	beq.n	800564a <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80055d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055dc:	d035      	beq.n	800564a <HAL_ADC_IRQHandler+0x122>
#endif /* ADC_SUPPORT_2_5_MSPS */
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0308 	and.w	r3, r3, #8
 80055e8:	2b08      	cmp	r3, #8
 80055ea:	d12e      	bne.n	800564a <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7ff fda2 	bl	800513a <LL_ADC_REG_IsConversionOngoing>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d11a      	bne.n	8005632 <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f022 020c 	bic.w	r2, r2, #12
 800560a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005610:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800561c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d112      	bne.n	800564a <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005628:	f043 0201 	orr.w	r2, r3, #1
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	655a      	str	r2, [r3, #84]	@ 0x54
 8005630:	e00b      	b.n	800564a <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005636:	f043 0210 	orr.w	r2, r3, #16
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005642:	f043 0201 	orr.w	r2, r3, #1
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f922 	bl	8005894 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	220c      	movs	r2, #12
 8005656:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	f003 0320 	and.w	r3, r3, #32
 800565e:	2b00      	cmp	r3, #0
 8005660:	d004      	beq.n	800566c <HAL_ADC_IRQHandler+0x144>
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f003 0320 	and.w	r3, r3, #32
 8005668:	2b00      	cmp	r3, #0
 800566a:	d109      	bne.n	8005680 <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005672:	2b00      	cmp	r3, #0
 8005674:	d074      	beq.n	8005760 <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800567c:	2b00      	cmp	r3, #0
 800567e:	d06f      	beq.n	8005760 <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005684:	f003 0310 	and.w	r3, r3, #16
 8005688:	2b00      	cmp	r3, #0
 800568a:	d105      	bne.n	8005698 <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005690:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4618      	mov	r0, r3
 800569e:	f7ff fc61 	bl	8004f64 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80056a2:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7ff fc0e 	bl	8004eca <LL_ADC_REG_IsTriggerSourceSWStart>
 80056ae:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d049      	beq.n	8005752 <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d007      	beq.n	80056d8 <HAL_ADC_IRQHandler+0x1b0>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d041      	beq.n	8005752 <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d13c      	bne.n	8005752 <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056e2:	2b40      	cmp	r3, #64	@ 0x40
 80056e4:	d135      	bne.n	8005752 <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d12e      	bne.n	8005752 <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7ff fd31 	bl	8005160 <LL_ADC_INJ_IsConversionOngoing>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d11a      	bne.n	800573a <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005712:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005718:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005728:	2b00      	cmp	r3, #0
 800572a:	d112      	bne.n	8005752 <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005730:	f043 0201 	orr.w	r2, r3, #1
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	655a      	str	r2, [r3, #84]	@ 0x54
 8005738:	e00b      	b.n	8005752 <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800573e:	f043 0210 	orr.w	r2, r3, #16
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800574a:	f043 0201 	orr.w	r2, r3, #1
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 fd9a 	bl	800628c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2260      	movs	r2, #96	@ 0x60
 800575e:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005766:	2b00      	cmp	r3, #0
 8005768:	d011      	beq.n	800578e <HAL_ADC_IRQHandler+0x266>
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00c      	beq.n	800578e <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005778:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 f89b 	bl	80058bc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2280      	movs	r2, #128	@ 0x80
 800578c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005794:	2b00      	cmp	r3, #0
 8005796:	d012      	beq.n	80057be <HAL_ADC_IRQHandler+0x296>
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00d      	beq.n	80057be <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057a6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 fd80 	bl	80062b4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80057bc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d012      	beq.n	80057ee <HAL_ADC_IRQHandler+0x2c6>
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d00d      	beq.n	80057ee <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057d6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 fd72 	bl	80062c8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057ec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	f003 0310 	and.w	r3, r3, #16
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d02b      	beq.n	8005850 <HAL_ADC_IRQHandler+0x328>
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f003 0310 	and.w	r3, r3, #16
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d026      	beq.n	8005850 <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005806:	2b00      	cmp	r3, #0
 8005808:	d102      	bne.n	8005810 <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 800580a:	2301      	movs	r3, #1
 800580c:	61fb      	str	r3, [r7, #28]
 800580e:	e009      	b.n	8005824 <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4618      	mov	r0, r3
 8005816:	f7ff fb97 	bl	8004f48 <LL_ADC_REG_GetDMATransfer>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d001      	beq.n	8005824 <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 8005820:	2301      	movs	r3, #1
 8005822:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d10e      	bne.n	8005848 <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800582e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800583a:	f043 0202 	orr.w	r2, r3, #2
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f844 	bl	80058d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2210      	movs	r2, #16
 800584e:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005850:	69bb      	ldr	r3, [r7, #24]
 8005852:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005856:	2b00      	cmp	r3, #0
 8005858:	d018      	beq.n	800588c <HAL_ADC_IRQHandler+0x364>
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005860:	2b00      	cmp	r3, #0
 8005862:	d013      	beq.n	800588c <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005868:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005874:	f043 0208 	orr.w	r2, r3, #8
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005884:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f000 fd0a 	bl	80062a0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 800588c:	bf00      	nop
 800588e:	3720      	adds	r7, #32
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b0b6      	sub	sp, #216	@ 0xd8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80058ee:	2300      	movs	r3, #0
 80058f0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80058f4:	2300      	movs	r3, #0
 80058f6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d101      	bne.n	8005906 <HAL_ADC_ConfigChannel+0x22>
 8005902:	2302      	movs	r3, #2
 8005904:	e39f      	b.n	8006046 <HAL_ADC_ConfigChannel+0x762>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2201      	movs	r2, #1
 800590a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4618      	mov	r0, r3
 8005914:	f7ff fc11 	bl	800513a <LL_ADC_REG_IsConversionOngoing>
 8005918:	4603      	mov	r3, r0
 800591a:	2b00      	cmp	r3, #0
 800591c:	f040 8384 	bne.w	8006028 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6818      	ldr	r0, [r3, #0]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	6859      	ldr	r1, [r3, #4]
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	461a      	mov	r2, r3
 800592e:	f7ff fadf 	bl	8004ef0 <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4618      	mov	r0, r3
 8005938:	f7ff fbff 	bl	800513a <LL_ADC_REG_IsConversionOngoing>
 800593c:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4618      	mov	r0, r3
 8005946:	f7ff fc0b 	bl	8005160 <LL_ADC_INJ_IsConversionOngoing>
 800594a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800594e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005952:	2b00      	cmp	r3, #0
 8005954:	f040 81a6 	bne.w	8005ca4 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005958:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800595c:	2b00      	cmp	r3, #0
 800595e:	f040 81a1 	bne.w	8005ca4 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6818      	ldr	r0, [r3, #0]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	6819      	ldr	r1, [r3, #0]
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	461a      	mov	r2, r3
 8005970:	f7ff fb0b 	bl	8004f8a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	695a      	ldr	r2, [r3, #20]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	08db      	lsrs	r3, r3, #3
 8005980:	f003 0303 	and.w	r3, r3, #3
 8005984:	005b      	lsls	r3, r3, #1
 8005986:	fa02 f303 	lsl.w	r3, r2, r3
 800598a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	2b04      	cmp	r3, #4
 8005994:	d00a      	beq.n	80059ac <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6818      	ldr	r0, [r3, #0]
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	6919      	ldr	r1, [r3, #16]
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80059a6:	f7ff fa3b 	bl	8004e20 <LL_ADC_SetOffset>
 80059aa:	e17b      	b.n	8005ca4 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2100      	movs	r1, #0
 80059b2:	4618      	mov	r0, r3
 80059b4:	f7ff fa58 	bl	8004e68 <LL_ADC_GetOffsetChannel>
 80059b8:	4603      	mov	r3, r0
 80059ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10a      	bne.n	80059d8 <HAL_ADC_ConfigChannel+0xf4>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2100      	movs	r1, #0
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7ff fa4d 	bl	8004e68 <LL_ADC_GetOffsetChannel>
 80059ce:	4603      	mov	r3, r0
 80059d0:	0e9b      	lsrs	r3, r3, #26
 80059d2:	f003 021f 	and.w	r2, r3, #31
 80059d6:	e01e      	b.n	8005a16 <HAL_ADC_ConfigChannel+0x132>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2100      	movs	r1, #0
 80059de:	4618      	mov	r0, r3
 80059e0:	f7ff fa42 	bl	8004e68 <LL_ADC_GetOffsetChannel>
 80059e4:	4603      	mov	r3, r0
 80059e6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80059ee:	fa93 f3a3 	rbit	r3, r3
 80059f2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80059f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80059fa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80059fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8005a06:	2320      	movs	r3, #32
 8005a08:	e004      	b.n	8005a14 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8005a0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005a0e:	fab3 f383 	clz	r3, r3
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	461a      	mov	r2, r3
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d105      	bne.n	8005a2e <HAL_ADC_ConfigChannel+0x14a>
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	0e9b      	lsrs	r3, r3, #26
 8005a28:	f003 031f 	and.w	r3, r3, #31
 8005a2c:	e018      	b.n	8005a60 <HAL_ADC_ConfigChannel+0x17c>
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a36:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005a3a:	fa93 f3a3 	rbit	r3, r3
 8005a3e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8005a42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005a46:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8005a4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d101      	bne.n	8005a56 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 8005a52:	2320      	movs	r3, #32
 8005a54:	e004      	b.n	8005a60 <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 8005a56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005a5a:	fab3 f383 	clz	r3, r3
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d106      	bne.n	8005a72 <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7ff fa11 	bl	8004e94 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2101      	movs	r1, #1
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f7ff f9f5 	bl	8004e68 <LL_ADC_GetOffsetChannel>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d10a      	bne.n	8005a9e <HAL_ADC_ConfigChannel+0x1ba>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2101      	movs	r1, #1
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7ff f9ea 	bl	8004e68 <LL_ADC_GetOffsetChannel>
 8005a94:	4603      	mov	r3, r0
 8005a96:	0e9b      	lsrs	r3, r3, #26
 8005a98:	f003 021f 	and.w	r2, r3, #31
 8005a9c:	e01e      	b.n	8005adc <HAL_ADC_ConfigChannel+0x1f8>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2101      	movs	r1, #1
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f7ff f9df 	bl	8004e68 <LL_ADC_GetOffsetChannel>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ab0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005ab4:	fa93 f3a3 	rbit	r3, r3
 8005ab8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8005abc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005ac0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8005ac4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d101      	bne.n	8005ad0 <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8005acc:	2320      	movs	r3, #32
 8005ace:	e004      	b.n	8005ada <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 8005ad0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005ad4:	fab3 f383 	clz	r3, r3
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	461a      	mov	r2, r3
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d105      	bne.n	8005af4 <HAL_ADC_ConfigChannel+0x210>
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	0e9b      	lsrs	r3, r3, #26
 8005aee:	f003 031f 	and.w	r3, r3, #31
 8005af2:	e018      	b.n	8005b26 <HAL_ADC_ConfigChannel+0x242>
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005afc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005b00:	fa93 f3a3 	rbit	r3, r3
 8005b04:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8005b08:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005b0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8005b10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8005b18:	2320      	movs	r3, #32
 8005b1a:	e004      	b.n	8005b26 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8005b1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005b20:	fab3 f383 	clz	r3, r3
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d106      	bne.n	8005b38 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	2101      	movs	r1, #1
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7ff f9ae 	bl	8004e94 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2102      	movs	r1, #2
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f7ff f992 	bl	8004e68 <LL_ADC_GetOffsetChannel>
 8005b44:	4603      	mov	r3, r0
 8005b46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10a      	bne.n	8005b64 <HAL_ADC_ConfigChannel+0x280>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2102      	movs	r1, #2
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7ff f987 	bl	8004e68 <LL_ADC_GetOffsetChannel>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	0e9b      	lsrs	r3, r3, #26
 8005b5e:	f003 021f 	and.w	r2, r3, #31
 8005b62:	e01e      	b.n	8005ba2 <HAL_ADC_ConfigChannel+0x2be>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2102      	movs	r1, #2
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7ff f97c 	bl	8004e68 <LL_ADC_GetOffsetChannel>
 8005b70:	4603      	mov	r3, r0
 8005b72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b7a:	fa93 f3a3 	rbit	r3, r3
 8005b7e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8005b82:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005b86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8005b8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d101      	bne.n	8005b96 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 8005b92:	2320      	movs	r3, #32
 8005b94:	e004      	b.n	8005ba0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8005b96:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005b9a:	fab3 f383 	clz	r3, r3
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d105      	bne.n	8005bba <HAL_ADC_ConfigChannel+0x2d6>
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	0e9b      	lsrs	r3, r3, #26
 8005bb4:	f003 031f 	and.w	r3, r3, #31
 8005bb8:	e016      	b.n	8005be8 <HAL_ADC_ConfigChannel+0x304>
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bc2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005bc6:	fa93 f3a3 	rbit	r3, r3
 8005bca:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8005bcc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005bce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8005bd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8005bda:	2320      	movs	r3, #32
 8005bdc:	e004      	b.n	8005be8 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 8005bde:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005be2:	fab3 f383 	clz	r3, r3
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d106      	bne.n	8005bfa <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	2102      	movs	r1, #2
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f7ff f94d 	bl	8004e94 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2103      	movs	r1, #3
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7ff f931 	bl	8004e68 <LL_ADC_GetOffsetChannel>
 8005c06:	4603      	mov	r3, r0
 8005c08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d10a      	bne.n	8005c26 <HAL_ADC_ConfigChannel+0x342>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2103      	movs	r1, #3
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7ff f926 	bl	8004e68 <LL_ADC_GetOffsetChannel>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	0e9b      	lsrs	r3, r3, #26
 8005c20:	f003 021f 	and.w	r2, r3, #31
 8005c24:	e017      	b.n	8005c56 <HAL_ADC_ConfigChannel+0x372>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2103      	movs	r1, #3
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7ff f91b 	bl	8004e68 <LL_ADC_GetOffsetChannel>
 8005c32:	4603      	mov	r3, r0
 8005c34:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c38:	fa93 f3a3 	rbit	r3, r3
 8005c3c:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8005c3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c40:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8005c42:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d101      	bne.n	8005c4c <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8005c48:	2320      	movs	r3, #32
 8005c4a:	e003      	b.n	8005c54 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8005c4c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c4e:	fab3 f383 	clz	r3, r3
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	461a      	mov	r2, r3
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d105      	bne.n	8005c6e <HAL_ADC_ConfigChannel+0x38a>
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	0e9b      	lsrs	r3, r3, #26
 8005c68:	f003 031f 	and.w	r3, r3, #31
 8005c6c:	e011      	b.n	8005c92 <HAL_ADC_ConfigChannel+0x3ae>
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005c76:	fa93 f3a3 	rbit	r3, r3
 8005c7a:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8005c7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8005c80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 8005c86:	2320      	movs	r3, #32
 8005c88:	e003      	b.n	8005c92 <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 8005c8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c8c:	fab3 f383 	clz	r3, r3
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d106      	bne.n	8005ca4 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	2103      	movs	r1, #3
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7ff f8f8 	bl	8004e94 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f7ff fa1f 	bl	80050ec <LL_ADC_IsEnabled>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	f040 81c2 	bne.w	800603a <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6818      	ldr	r0, [r3, #0]
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	6819      	ldr	r1, [r3, #0]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	68db      	ldr	r3, [r3, #12]
 8005cc2:	461a      	mov	r2, r3
 8005cc4:	f7ff f98c 	bl	8004fe0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	4a8e      	ldr	r2, [pc, #568]	@ (8005f08 <HAL_ADC_ConfigChannel+0x624>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	f040 8130 	bne.w	8005f34 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10b      	bne.n	8005cfc <HAL_ADC_ConfigChannel+0x418>
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	0e9b      	lsrs	r3, r3, #26
 8005cea:	3301      	adds	r3, #1
 8005cec:	f003 031f 	and.w	r3, r3, #31
 8005cf0:	2b09      	cmp	r3, #9
 8005cf2:	bf94      	ite	ls
 8005cf4:	2301      	movls	r3, #1
 8005cf6:	2300      	movhi	r3, #0
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	e019      	b.n	8005d30 <HAL_ADC_ConfigChannel+0x44c>
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d04:	fa93 f3a3 	rbit	r3, r3
 8005d08:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8005d0a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d0c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8005d0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d101      	bne.n	8005d18 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8005d14:	2320      	movs	r3, #32
 8005d16:	e003      	b.n	8005d20 <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8005d18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d1a:	fab3 f383 	clz	r3, r3
 8005d1e:	b2db      	uxtb	r3, r3
 8005d20:	3301      	adds	r3, #1
 8005d22:	f003 031f 	and.w	r3, r3, #31
 8005d26:	2b09      	cmp	r3, #9
 8005d28:	bf94      	ite	ls
 8005d2a:	2301      	movls	r3, #1
 8005d2c:	2300      	movhi	r3, #0
 8005d2e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d079      	beq.n	8005e28 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d107      	bne.n	8005d50 <HAL_ADC_ConfigChannel+0x46c>
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	0e9b      	lsrs	r3, r3, #26
 8005d46:	3301      	adds	r3, #1
 8005d48:	069b      	lsls	r3, r3, #26
 8005d4a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005d4e:	e015      	b.n	8005d7c <HAL_ADC_ConfigChannel+0x498>
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d58:	fa93 f3a3 	rbit	r3, r3
 8005d5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005d5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d60:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8005d62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d101      	bne.n	8005d6c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8005d68:	2320      	movs	r3, #32
 8005d6a:	e003      	b.n	8005d74 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8005d6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d6e:	fab3 f383 	clz	r3, r3
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	3301      	adds	r3, #1
 8005d76:	069b      	lsls	r3, r3, #26
 8005d78:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d109      	bne.n	8005d9c <HAL_ADC_ConfigChannel+0x4b8>
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	0e9b      	lsrs	r3, r3, #26
 8005d8e:	3301      	adds	r3, #1
 8005d90:	f003 031f 	and.w	r3, r3, #31
 8005d94:	2101      	movs	r1, #1
 8005d96:	fa01 f303 	lsl.w	r3, r1, r3
 8005d9a:	e017      	b.n	8005dcc <HAL_ADC_ConfigChannel+0x4e8>
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005da2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005da4:	fa93 f3a3 	rbit	r3, r3
 8005da8:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8005daa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dac:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8005dae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d101      	bne.n	8005db8 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8005db4:	2320      	movs	r3, #32
 8005db6:	e003      	b.n	8005dc0 <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8005db8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005dba:	fab3 f383 	clz	r3, r3
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	f003 031f 	and.w	r3, r3, #31
 8005dc6:	2101      	movs	r1, #1
 8005dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8005dcc:	ea42 0103 	orr.w	r1, r2, r3
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10a      	bne.n	8005df2 <HAL_ADC_ConfigChannel+0x50e>
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	0e9b      	lsrs	r3, r3, #26
 8005de2:	3301      	adds	r3, #1
 8005de4:	f003 021f 	and.w	r2, r3, #31
 8005de8:	4613      	mov	r3, r2
 8005dea:	005b      	lsls	r3, r3, #1
 8005dec:	4413      	add	r3, r2
 8005dee:	051b      	lsls	r3, r3, #20
 8005df0:	e018      	b.n	8005e24 <HAL_ADC_ConfigChannel+0x540>
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dfa:	fa93 f3a3 	rbit	r3, r3
 8005dfe:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8005e04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8005e0a:	2320      	movs	r3, #32
 8005e0c:	e003      	b.n	8005e16 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8005e0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e10:	fab3 f383 	clz	r3, r3
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	3301      	adds	r3, #1
 8005e18:	f003 021f 	and.w	r2, r3, #31
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	005b      	lsls	r3, r3, #1
 8005e20:	4413      	add	r3, r2
 8005e22:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005e24:	430b      	orrs	r3, r1
 8005e26:	e080      	b.n	8005f2a <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d107      	bne.n	8005e44 <HAL_ADC_ConfigChannel+0x560>
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	0e9b      	lsrs	r3, r3, #26
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	069b      	lsls	r3, r3, #26
 8005e3e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005e42:	e015      	b.n	8005e70 <HAL_ADC_ConfigChannel+0x58c>
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e4c:	fa93 f3a3 	rbit	r3, r3
 8005e50:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8005e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e54:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8005e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d101      	bne.n	8005e60 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8005e5c:	2320      	movs	r3, #32
 8005e5e:	e003      	b.n	8005e68 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8005e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e62:	fab3 f383 	clz	r3, r3
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	3301      	adds	r3, #1
 8005e6a:	069b      	lsls	r3, r3, #26
 8005e6c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d109      	bne.n	8005e90 <HAL_ADC_ConfigChannel+0x5ac>
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	0e9b      	lsrs	r3, r3, #26
 8005e82:	3301      	adds	r3, #1
 8005e84:	f003 031f 	and.w	r3, r3, #31
 8005e88:	2101      	movs	r1, #1
 8005e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e8e:	e017      	b.n	8005ec0 <HAL_ADC_ConfigChannel+0x5dc>
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e96:	6a3b      	ldr	r3, [r7, #32]
 8005e98:	fa93 f3a3 	rbit	r3, r3
 8005e9c:	61fb      	str	r3, [r7, #28]
  return result;
 8005e9e:	69fb      	ldr	r3, [r7, #28]
 8005ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d101      	bne.n	8005eac <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 8005ea8:	2320      	movs	r3, #32
 8005eaa:	e003      	b.n	8005eb4 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 8005eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eae:	fab3 f383 	clz	r3, r3
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	3301      	adds	r3, #1
 8005eb6:	f003 031f 	and.w	r3, r3, #31
 8005eba:	2101      	movs	r1, #1
 8005ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8005ec0:	ea42 0103 	orr.w	r1, r2, r3
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10d      	bne.n	8005eec <HAL_ADC_ConfigChannel+0x608>
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	0e9b      	lsrs	r3, r3, #26
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	f003 021f 	and.w	r2, r3, #31
 8005edc:	4613      	mov	r3, r2
 8005ede:	005b      	lsls	r3, r3, #1
 8005ee0:	4413      	add	r3, r2
 8005ee2:	3b1e      	subs	r3, #30
 8005ee4:	051b      	lsls	r3, r3, #20
 8005ee6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005eea:	e01d      	b.n	8005f28 <HAL_ADC_ConfigChannel+0x644>
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	fa93 f3a3 	rbit	r3, r3
 8005ef8:	613b      	str	r3, [r7, #16]
  return result;
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d103      	bne.n	8005f0c <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8005f04:	2320      	movs	r3, #32
 8005f06:	e005      	b.n	8005f14 <HAL_ADC_ConfigChannel+0x630>
 8005f08:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	fab3 f383 	clz	r3, r3
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	3301      	adds	r3, #1
 8005f16:	f003 021f 	and.w	r2, r3, #31
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	005b      	lsls	r3, r3, #1
 8005f1e:	4413      	add	r3, r2
 8005f20:	3b1e      	subs	r3, #30
 8005f22:	051b      	lsls	r3, r3, #20
 8005f24:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f28:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8005f2a:	683a      	ldr	r2, [r7, #0]
 8005f2c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f2e:	4619      	mov	r1, r3
 8005f30:	f7ff f82b 	bl	8004f8a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	4b45      	ldr	r3, [pc, #276]	@ (8006050 <HAL_ADC_ConfigChannel+0x76c>)
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d07c      	beq.n	800603a <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005f40:	4844      	ldr	r0, [pc, #272]	@ (8006054 <HAL_ADC_ConfigChannel+0x770>)
 8005f42:	f7fe ff5f 	bl	8004e04 <LL_ADC_GetCommonPathInternalCh>
 8005f46:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005f4a:	4843      	ldr	r0, [pc, #268]	@ (8006058 <HAL_ADC_ConfigChannel+0x774>)
 8005f4c:	f7ff f8ce 	bl	80050ec <LL_ADC_IsEnabled>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d15e      	bne.n	8006014 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4a40      	ldr	r2, [pc, #256]	@ (800605c <HAL_ADC_ConfigChannel+0x778>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d127      	bne.n	8005fb0 <HAL_ADC_ConfigChannel+0x6cc>
 8005f60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005f64:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d121      	bne.n	8005fb0 <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a39      	ldr	r2, [pc, #228]	@ (8006058 <HAL_ADC_ConfigChannel+0x774>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d161      	bne.n	800603a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005f76:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005f7a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005f7e:	4619      	mov	r1, r3
 8005f80:	4834      	ldr	r0, [pc, #208]	@ (8006054 <HAL_ADC_ConfigChannel+0x770>)
 8005f82:	f7fe ff2c 	bl	8004dde <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005f86:	4b36      	ldr	r3, [pc, #216]	@ (8006060 <HAL_ADC_ConfigChannel+0x77c>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	099b      	lsrs	r3, r3, #6
 8005f8c:	4a35      	ldr	r2, [pc, #212]	@ (8006064 <HAL_ADC_ConfigChannel+0x780>)
 8005f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f92:	099b      	lsrs	r3, r3, #6
 8005f94:	1c5a      	adds	r2, r3, #1
 8005f96:	4613      	mov	r3, r2
 8005f98:	005b      	lsls	r3, r3, #1
 8005f9a:	4413      	add	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8005fa0:	e002      	b.n	8005fa8 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d1f9      	bne.n	8005fa2 <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005fae:	e044      	b.n	800603a <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a2c      	ldr	r2, [pc, #176]	@ (8006068 <HAL_ADC_ConfigChannel+0x784>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d113      	bne.n	8005fe2 <HAL_ADC_ConfigChannel+0x6fe>
 8005fba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005fbe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d10d      	bne.n	8005fe2 <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a23      	ldr	r2, [pc, #140]	@ (8006058 <HAL_ADC_ConfigChannel+0x774>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d134      	bne.n	800603a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8005fd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005fd4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005fd8:	4619      	mov	r1, r3
 8005fda:	481e      	ldr	r0, [pc, #120]	@ (8006054 <HAL_ADC_ConfigChannel+0x770>)
 8005fdc:	f7fe feff 	bl	8004dde <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005fe0:	e02b      	b.n	800603a <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a21      	ldr	r2, [pc, #132]	@ (800606c <HAL_ADC_ConfigChannel+0x788>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d126      	bne.n	800603a <HAL_ADC_ConfigChannel+0x756>
 8005fec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8005ff0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d120      	bne.n	800603a <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a16      	ldr	r2, [pc, #88]	@ (8006058 <HAL_ADC_ConfigChannel+0x774>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d11b      	bne.n	800603a <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8006002:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006006:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800600a:	4619      	mov	r1, r3
 800600c:	4811      	ldr	r0, [pc, #68]	@ (8006054 <HAL_ADC_ConfigChannel+0x770>)
 800600e:	f7fe fee6 	bl	8004dde <LL_ADC_SetCommonPathInternalCh>
 8006012:	e012      	b.n	800603a <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006018:	f043 0220 	orr.w	r2, r3, #32
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8006026:	e008      	b.n	800603a <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800602c:	f043 0220 	orr.w	r2, r3, #32
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8006034:	2301      	movs	r3, #1
 8006036:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 8006042:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8006046:	4618      	mov	r0, r3
 8006048:	37d8      	adds	r7, #216	@ 0xd8
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	80080000 	.word	0x80080000
 8006054:	50040300 	.word	0x50040300
 8006058:	50040000 	.word	0x50040000
 800605c:	c7520000 	.word	0xc7520000
 8006060:	2000000c 	.word	0x2000000c
 8006064:	053e2d63 	.word	0x053e2d63
 8006068:	cb840000 	.word	0xcb840000
 800606c:	80000001 	.word	0x80000001

08006070 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006078:	2300      	movs	r3, #0
 800607a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4618      	mov	r0, r3
 8006082:	f7ff f833 	bl	80050ec <LL_ADC_IsEnabled>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d15e      	bne.n	800614a <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	689a      	ldr	r2, [r3, #8]
 8006092:	4b30      	ldr	r3, [pc, #192]	@ (8006154 <ADC_Enable+0xe4>)
 8006094:	4013      	ands	r3, r2
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00d      	beq.n	80060b6 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800609e:	f043 0210 	orr.w	r2, r3, #16
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060aa:	f043 0201 	orr.w	r2, r3, #1
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	e04a      	b.n	800614c <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7ff f802 	bl	80050c4 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80060c0:	4825      	ldr	r0, [pc, #148]	@ (8006158 <ADC_Enable+0xe8>)
 80060c2:	f7fe fe9f 	bl	8004e04 <LL_ADC_GetCommonPathInternalCh>
 80060c6:	4603      	mov	r3, r0
 80060c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00f      	beq.n	80060f0 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80060d0:	4b22      	ldr	r3, [pc, #136]	@ (800615c <ADC_Enable+0xec>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	099b      	lsrs	r3, r3, #6
 80060d6:	4a22      	ldr	r2, [pc, #136]	@ (8006160 <ADC_Enable+0xf0>)
 80060d8:	fba2 2303 	umull	r2, r3, r2, r3
 80060dc:	099b      	lsrs	r3, r3, #6
 80060de:	3301      	adds	r3, #1
 80060e0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80060e2:	e002      	b.n	80060ea <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	3b01      	subs	r3, #1
 80060e8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1f9      	bne.n	80060e4 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80060f0:	f7fe fe26 	bl	8004d40 <HAL_GetTick>
 80060f4:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80060f6:	e021      	b.n	800613c <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4618      	mov	r0, r3
 80060fe:	f7fe fff5 	bl	80050ec <LL_ADC_IsEnabled>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d104      	bne.n	8006112 <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4618      	mov	r0, r3
 800610e:	f7fe ffd9 	bl	80050c4 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006112:	f7fe fe15 	bl	8004d40 <HAL_GetTick>
 8006116:	4602      	mov	r2, r0
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	1ad3      	subs	r3, r2, r3
 800611c:	2b02      	cmp	r3, #2
 800611e:	d90d      	bls.n	800613c <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006124:	f043 0210 	orr.w	r2, r3, #16
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006130:	f043 0201 	orr.w	r2, r3, #1
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e007      	b.n	800614c <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0301 	and.w	r3, r3, #1
 8006146:	2b01      	cmp	r3, #1
 8006148:	d1d6      	bne.n	80060f8 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800614a:	2300      	movs	r3, #0
}
 800614c:	4618      	mov	r0, r3
 800614e:	3710      	adds	r7, #16
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	8000003f 	.word	0x8000003f
 8006158:	50040300 	.word	0x50040300
 800615c:	2000000c 	.word	0x2000000c
 8006160:	053e2d63 	.word	0x053e2d63

08006164 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006170:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006176:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800617a:	2b00      	cmp	r3, #0
 800617c:	d14b      	bne.n	8006216 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006182:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0308 	and.w	r3, r3, #8
 8006194:	2b00      	cmp	r3, #0
 8006196:	d021      	beq.n	80061dc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4618      	mov	r0, r3
 800619e:	f7fe fe94 	bl	8004eca <LL_ADC_REG_IsTriggerSourceSWStart>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d032      	beq.n	800620e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d12b      	bne.n	800620e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061ba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d11f      	bne.n	800620e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061d2:	f043 0201 	orr.w	r2, r3, #1
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	655a      	str	r2, [r3, #84]	@ 0x54
 80061da:	e018      	b.n	800620e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	f003 0302 	and.w	r3, r3, #2
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d111      	bne.n	800620e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061ee:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d105      	bne.n	800620e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006206:	f043 0201 	orr.w	r2, r3, #1
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800620e:	68f8      	ldr	r0, [r7, #12]
 8006210:	f7ff fb40 	bl	8005894 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006214:	e00e      	b.n	8006234 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800621a:	f003 0310 	and.w	r3, r3, #16
 800621e:	2b00      	cmp	r3, #0
 8006220:	d003      	beq.n	800622a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f7ff fb54 	bl	80058d0 <HAL_ADC_ErrorCallback>
}
 8006228:	e004      	b.n	8006234 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800622e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	4798      	blx	r3
}
 8006234:	bf00      	nop
 8006236:	3710      	adds	r7, #16
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}

0800623c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006248:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	f7ff fb2c 	bl	80058a8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006250:	bf00      	nop
 8006252:	3710      	adds	r7, #16
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006264:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800626a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006276:	f043 0204 	orr.w	r2, r3, #4
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	f7ff fb26 	bl	80058d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006284:	bf00      	nop
 8006286:	3710      	adds	r7, #16
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800628c:	b480      	push	{r7}
 800628e:	b083      	sub	sp, #12
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006294:	bf00      	nop
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80062a8:	bf00      	nop
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80062dc:	b480      	push	{r7}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f003 0307 	and.w	r3, r3, #7
 80062fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006300:	4b0c      	ldr	r3, [pc, #48]	@ (8006334 <__NVIC_SetPriorityGrouping+0x44>)
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006306:	68ba      	ldr	r2, [r7, #8]
 8006308:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800630c:	4013      	ands	r3, r2
 800630e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006318:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800631c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006322:	4a04      	ldr	r2, [pc, #16]	@ (8006334 <__NVIC_SetPriorityGrouping+0x44>)
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	60d3      	str	r3, [r2, #12]
}
 8006328:	bf00      	nop
 800632a:	3714      	adds	r7, #20
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	e000ed00 	.word	0xe000ed00

08006338 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006338:	b480      	push	{r7}
 800633a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800633c:	4b04      	ldr	r3, [pc, #16]	@ (8006350 <__NVIC_GetPriorityGrouping+0x18>)
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	0a1b      	lsrs	r3, r3, #8
 8006342:	f003 0307 	and.w	r3, r3, #7
}
 8006346:	4618      	mov	r0, r3
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr
 8006350:	e000ed00 	.word	0xe000ed00

08006354 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	4603      	mov	r3, r0
 800635c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800635e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006362:	2b00      	cmp	r3, #0
 8006364:	db0b      	blt.n	800637e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006366:	79fb      	ldrb	r3, [r7, #7]
 8006368:	f003 021f 	and.w	r2, r3, #31
 800636c:	4907      	ldr	r1, [pc, #28]	@ (800638c <__NVIC_EnableIRQ+0x38>)
 800636e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006372:	095b      	lsrs	r3, r3, #5
 8006374:	2001      	movs	r0, #1
 8006376:	fa00 f202 	lsl.w	r2, r0, r2
 800637a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800637e:	bf00      	nop
 8006380:	370c      	adds	r7, #12
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	e000e100 	.word	0xe000e100

08006390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	4603      	mov	r3, r0
 8006398:	6039      	str	r1, [r7, #0]
 800639a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800639c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	db0a      	blt.n	80063ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	b2da      	uxtb	r2, r3
 80063a8:	490c      	ldr	r1, [pc, #48]	@ (80063dc <__NVIC_SetPriority+0x4c>)
 80063aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063ae:	0112      	lsls	r2, r2, #4
 80063b0:	b2d2      	uxtb	r2, r2
 80063b2:	440b      	add	r3, r1
 80063b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80063b8:	e00a      	b.n	80063d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	b2da      	uxtb	r2, r3
 80063be:	4908      	ldr	r1, [pc, #32]	@ (80063e0 <__NVIC_SetPriority+0x50>)
 80063c0:	79fb      	ldrb	r3, [r7, #7]
 80063c2:	f003 030f 	and.w	r3, r3, #15
 80063c6:	3b04      	subs	r3, #4
 80063c8:	0112      	lsls	r2, r2, #4
 80063ca:	b2d2      	uxtb	r2, r2
 80063cc:	440b      	add	r3, r1
 80063ce:	761a      	strb	r2, [r3, #24]
}
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr
 80063dc:	e000e100 	.word	0xe000e100
 80063e0:	e000ed00 	.word	0xe000ed00

080063e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b089      	sub	sp, #36	@ 0x24
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f003 0307 	and.w	r3, r3, #7
 80063f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	f1c3 0307 	rsb	r3, r3, #7
 80063fe:	2b04      	cmp	r3, #4
 8006400:	bf28      	it	cs
 8006402:	2304      	movcs	r3, #4
 8006404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	3304      	adds	r3, #4
 800640a:	2b06      	cmp	r3, #6
 800640c:	d902      	bls.n	8006414 <NVIC_EncodePriority+0x30>
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	3b03      	subs	r3, #3
 8006412:	e000      	b.n	8006416 <NVIC_EncodePriority+0x32>
 8006414:	2300      	movs	r3, #0
 8006416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006418:	f04f 32ff 	mov.w	r2, #4294967295
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	fa02 f303 	lsl.w	r3, r2, r3
 8006422:	43da      	mvns	r2, r3
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	401a      	ands	r2, r3
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800642c:	f04f 31ff 	mov.w	r1, #4294967295
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	fa01 f303 	lsl.w	r3, r1, r3
 8006436:	43d9      	mvns	r1, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800643c:	4313      	orrs	r3, r2
         );
}
 800643e:	4618      	mov	r0, r3
 8006440:	3724      	adds	r7, #36	@ 0x24
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
	...

0800644c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b082      	sub	sp, #8
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	3b01      	subs	r3, #1
 8006458:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800645c:	d301      	bcc.n	8006462 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800645e:	2301      	movs	r3, #1
 8006460:	e00f      	b.n	8006482 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006462:	4a0a      	ldr	r2, [pc, #40]	@ (800648c <SysTick_Config+0x40>)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	3b01      	subs	r3, #1
 8006468:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800646a:	210f      	movs	r1, #15
 800646c:	f04f 30ff 	mov.w	r0, #4294967295
 8006470:	f7ff ff8e 	bl	8006390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006474:	4b05      	ldr	r3, [pc, #20]	@ (800648c <SysTick_Config+0x40>)
 8006476:	2200      	movs	r2, #0
 8006478:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800647a:	4b04      	ldr	r3, [pc, #16]	@ (800648c <SysTick_Config+0x40>)
 800647c:	2207      	movs	r2, #7
 800647e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006480:	2300      	movs	r3, #0
}
 8006482:	4618      	mov	r0, r3
 8006484:	3708      	adds	r7, #8
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	e000e010 	.word	0xe000e010

08006490 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b082      	sub	sp, #8
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f7ff ff29 	bl	80062f0 <__NVIC_SetPriorityGrouping>
}
 800649e:	bf00      	nop
 80064a0:	3708      	adds	r7, #8
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b086      	sub	sp, #24
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	4603      	mov	r3, r0
 80064ae:	60b9      	str	r1, [r7, #8]
 80064b0:	607a      	str	r2, [r7, #4]
 80064b2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80064b4:	f7ff ff40 	bl	8006338 <__NVIC_GetPriorityGrouping>
 80064b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	68b9      	ldr	r1, [r7, #8]
 80064be:	6978      	ldr	r0, [r7, #20]
 80064c0:	f7ff ff90 	bl	80063e4 <NVIC_EncodePriority>
 80064c4:	4602      	mov	r2, r0
 80064c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064ca:	4611      	mov	r1, r2
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7ff ff5f 	bl	8006390 <__NVIC_SetPriority>
}
 80064d2:	bf00      	nop
 80064d4:	3718      	adds	r7, #24
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b082      	sub	sp, #8
 80064de:	af00      	add	r7, sp, #0
 80064e0:	4603      	mov	r3, r0
 80064e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80064e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7ff ff33 	bl	8006354 <__NVIC_EnableIRQ>
}
 80064ee:	bf00      	nop
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b082      	sub	sp, #8
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f7ff ffa4 	bl	800644c <SysTick_Config>
 8006504:	4603      	mov	r3, r0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3708      	adds	r7, #8
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
	...

08006510 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d101      	bne.n	8006522 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e08e      	b.n	8006640 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	461a      	mov	r2, r3
 8006528:	4b47      	ldr	r3, [pc, #284]	@ (8006648 <HAL_DMA_Init+0x138>)
 800652a:	429a      	cmp	r2, r3
 800652c:	d80f      	bhi.n	800654e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	461a      	mov	r2, r3
 8006534:	4b45      	ldr	r3, [pc, #276]	@ (800664c <HAL_DMA_Init+0x13c>)
 8006536:	4413      	add	r3, r2
 8006538:	4a45      	ldr	r2, [pc, #276]	@ (8006650 <HAL_DMA_Init+0x140>)
 800653a:	fba2 2303 	umull	r2, r3, r2, r3
 800653e:	091b      	lsrs	r3, r3, #4
 8006540:	009a      	lsls	r2, r3, #2
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a42      	ldr	r2, [pc, #264]	@ (8006654 <HAL_DMA_Init+0x144>)
 800654a:	641a      	str	r2, [r3, #64]	@ 0x40
 800654c:	e00e      	b.n	800656c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	461a      	mov	r2, r3
 8006554:	4b40      	ldr	r3, [pc, #256]	@ (8006658 <HAL_DMA_Init+0x148>)
 8006556:	4413      	add	r3, r2
 8006558:	4a3d      	ldr	r2, [pc, #244]	@ (8006650 <HAL_DMA_Init+0x140>)
 800655a:	fba2 2303 	umull	r2, r3, r2, r3
 800655e:	091b      	lsrs	r3, r3, #4
 8006560:	009a      	lsls	r2, r3, #2
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a3c      	ldr	r2, [pc, #240]	@ (800665c <HAL_DMA_Init+0x14c>)
 800656a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2202      	movs	r2, #2
 8006570:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006582:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006586:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006590:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800659c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 fa24 	bl	8006a0c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80065cc:	d102      	bne.n	80065d4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	685a      	ldr	r2, [r3, #4]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065dc:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80065e0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80065ea:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d010      	beq.n	8006616 <HAL_DMA_Init+0x106>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	2b04      	cmp	r3, #4
 80065fa:	d80c      	bhi.n	8006616 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 fa43 	bl	8006a88 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006606:	2200      	movs	r2, #0
 8006608:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006612:	605a      	str	r2, [r3, #4]
 8006614:	e008      	b.n	8006628 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2201      	movs	r2, #1
 8006632:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3710      	adds	r7, #16
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}
 8006648:	40020407 	.word	0x40020407
 800664c:	bffdfff8 	.word	0xbffdfff8
 8006650:	cccccccd 	.word	0xcccccccd
 8006654:	40020000 	.word	0x40020000
 8006658:	bffdfbf8 	.word	0xbffdfbf8
 800665c:	40020400 	.word	0x40020400

08006660 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b086      	sub	sp, #24
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	607a      	str	r2, [r7, #4]
 800666c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800666e:	2300      	movs	r3, #0
 8006670:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006678:	2b01      	cmp	r3, #1
 800667a:	d101      	bne.n	8006680 <HAL_DMA_Start_IT+0x20>
 800667c:	2302      	movs	r3, #2
 800667e:	e066      	b.n	800674e <HAL_DMA_Start_IT+0xee>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800668e:	b2db      	uxtb	r3, r3
 8006690:	2b01      	cmp	r3, #1
 8006692:	d155      	bne.n	8006740 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2202      	movs	r2, #2
 8006698:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f022 0201 	bic.w	r2, r2, #1
 80066b0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	68b9      	ldr	r1, [r7, #8]
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f000 f968 	bl	800698e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d008      	beq.n	80066d8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f042 020e 	orr.w	r2, r2, #14
 80066d4:	601a      	str	r2, [r3, #0]
 80066d6:	e00f      	b.n	80066f8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f022 0204 	bic.w	r2, r2, #4
 80066e6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f042 020a 	orr.w	r2, r2, #10
 80066f6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d007      	beq.n	8006716 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006710:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006714:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800671a:	2b00      	cmp	r3, #0
 800671c:	d007      	beq.n	800672e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006728:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800672c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681a      	ldr	r2, [r3, #0]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f042 0201 	orr.w	r2, r2, #1
 800673c:	601a      	str	r2, [r3, #0]
 800673e:	e005      	b.n	800674c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006748:	2302      	movs	r3, #2
 800674a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800674c:	7dfb      	ldrb	r3, [r7, #23]
}
 800674e:	4618      	mov	r0, r3
 8006750:	3718      	adds	r7, #24
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}

08006756 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b084      	sub	sp, #16
 800675a:	af00      	add	r7, sp, #0
 800675c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b02      	cmp	r3, #2
 800676c:	d005      	beq.n	800677a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2204      	movs	r2, #4
 8006772:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	73fb      	strb	r3, [r7, #15]
 8006778:	e047      	b.n	800680a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f022 020e 	bic.w	r2, r2, #14
 8006788:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f022 0201 	bic.w	r2, r2, #1
 8006798:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80067a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067ae:	f003 021c 	and.w	r2, r3, #28
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067b6:	2101      	movs	r1, #1
 80067b8:	fa01 f202 	lsl.w	r2, r1, r2
 80067bc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80067c6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d00c      	beq.n	80067ea <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067da:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80067de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067e4:	687a      	ldr	r2, [r7, #4]
 80067e6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80067e8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2201      	movs	r2, #1
 80067ee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	4798      	blx	r3
    }
  }
  return status;
 800680a:	7bfb      	ldrb	r3, [r7, #15]
}
 800680c:	4618      	mov	r0, r3
 800680e:	3710      	adds	r7, #16
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006830:	f003 031c 	and.w	r3, r3, #28
 8006834:	2204      	movs	r2, #4
 8006836:	409a      	lsls	r2, r3
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	4013      	ands	r3, r2
 800683c:	2b00      	cmp	r3, #0
 800683e:	d026      	beq.n	800688e <HAL_DMA_IRQHandler+0x7a>
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	f003 0304 	and.w	r3, r3, #4
 8006846:	2b00      	cmp	r3, #0
 8006848:	d021      	beq.n	800688e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0320 	and.w	r3, r3, #32
 8006854:	2b00      	cmp	r3, #0
 8006856:	d107      	bne.n	8006868 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f022 0204 	bic.w	r2, r2, #4
 8006866:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800686c:	f003 021c 	and.w	r2, r3, #28
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006874:	2104      	movs	r1, #4
 8006876:	fa01 f202 	lsl.w	r2, r1, r2
 800687a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006880:	2b00      	cmp	r3, #0
 8006882:	d071      	beq.n	8006968 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800688c:	e06c      	b.n	8006968 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006892:	f003 031c 	and.w	r3, r3, #28
 8006896:	2202      	movs	r2, #2
 8006898:	409a      	lsls	r2, r3
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	4013      	ands	r3, r2
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d02e      	beq.n	8006900 <HAL_DMA_IRQHandler+0xec>
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	f003 0302 	and.w	r3, r3, #2
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d029      	beq.n	8006900 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0320 	and.w	r3, r3, #32
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10b      	bne.n	80068d2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f022 020a 	bic.w	r2, r2, #10
 80068c8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2201      	movs	r2, #1
 80068ce:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068d6:	f003 021c 	and.w	r2, r3, #28
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068de:	2102      	movs	r1, #2
 80068e0:	fa01 f202 	lsl.w	r2, r1, r2
 80068e4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d038      	beq.n	8006968 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80068fe:	e033      	b.n	8006968 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006904:	f003 031c 	and.w	r3, r3, #28
 8006908:	2208      	movs	r2, #8
 800690a:	409a      	lsls	r2, r3
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	4013      	ands	r3, r2
 8006910:	2b00      	cmp	r3, #0
 8006912:	d02a      	beq.n	800696a <HAL_DMA_IRQHandler+0x156>
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	f003 0308 	and.w	r3, r3, #8
 800691a:	2b00      	cmp	r3, #0
 800691c:	d025      	beq.n	800696a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f022 020e 	bic.w	r2, r2, #14
 800692c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006932:	f003 021c 	and.w	r2, r3, #28
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800693a:	2101      	movs	r1, #1
 800693c:	fa01 f202 	lsl.w	r2, r1, r2
 8006940:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2201      	movs	r2, #1
 8006946:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800695c:	2b00      	cmp	r3, #0
 800695e:	d004      	beq.n	800696a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006968:	bf00      	nop
 800696a:	bf00      	nop
}
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}

08006972 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006972:	b480      	push	{r7}
 8006974:	b083      	sub	sp, #12
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006980:	b2db      	uxtb	r3, r3
}
 8006982:	4618      	mov	r0, r3
 8006984:	370c      	adds	r7, #12
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr

0800698e <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800698e:	b480      	push	{r7}
 8006990:	b085      	sub	sp, #20
 8006992:	af00      	add	r7, sp, #0
 8006994:	60f8      	str	r0, [r7, #12]
 8006996:	60b9      	str	r1, [r7, #8]
 8006998:	607a      	str	r2, [r7, #4]
 800699a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80069a4:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d004      	beq.n	80069b8 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80069b6:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069bc:	f003 021c 	and.w	r2, r3, #28
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069c4:	2101      	movs	r1, #1
 80069c6:	fa01 f202 	lsl.w	r2, r1, r2
 80069ca:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	683a      	ldr	r2, [r7, #0]
 80069d2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	2b10      	cmp	r3, #16
 80069da:	d108      	bne.n	80069ee <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80069ec:	e007      	b.n	80069fe <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	60da      	str	r2, [r3, #12]
}
 80069fe:	bf00      	nop
 8006a00:	3714      	adds	r7, #20
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
	...

08006a0c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	461a      	mov	r2, r3
 8006a1a:	4b17      	ldr	r3, [pc, #92]	@ (8006a78 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d80a      	bhi.n	8006a36 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a24:	089b      	lsrs	r3, r3, #2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006a2c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	6493      	str	r3, [r2, #72]	@ 0x48
 8006a34:	e007      	b.n	8006a46 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a3a:	089b      	lsrs	r3, r3, #2
 8006a3c:	009a      	lsls	r2, r3, #2
 8006a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8006a7c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006a40:	4413      	add	r3, r2
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	3b08      	subs	r3, #8
 8006a4e:	4a0c      	ldr	r2, [pc, #48]	@ (8006a80 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006a50:	fba2 2303 	umull	r2, r3, r2, r3
 8006a54:	091b      	lsrs	r3, r3, #4
 8006a56:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a0a      	ldr	r2, [pc, #40]	@ (8006a84 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006a5c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f003 031f 	and.w	r3, r3, #31
 8006a64:	2201      	movs	r2, #1
 8006a66:	409a      	lsls	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006a6c:	bf00      	nop
 8006a6e:	3714      	adds	r7, #20
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr
 8006a78:	40020407 	.word	0x40020407
 8006a7c:	4002081c 	.word	0x4002081c
 8006a80:	cccccccd 	.word	0xcccccccd
 8006a84:	40020880 	.word	0x40020880

08006a88 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b085      	sub	sp, #20
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a98:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8006acc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006a9e:	4413      	add	r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	4a09      	ldr	r2, [pc, #36]	@ (8006ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8006aac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	3b01      	subs	r3, #1
 8006ab2:	f003 0303 	and.w	r3, r3, #3
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	409a      	lsls	r2, r3
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8006abe:	bf00      	nop
 8006ac0:	3714      	adds	r7, #20
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	1000823f 	.word	0x1000823f
 8006ad0:	40020940 	.word	0x40020940

08006ad4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b087      	sub	sp, #28
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006ae2:	e14c      	b.n	8006d7e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	2101      	movs	r1, #1
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	fa01 f303 	lsl.w	r3, r1, r3
 8006af0:	4013      	ands	r3, r2
 8006af2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f000 813e 	beq.w	8006d78 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	f003 0303 	and.w	r3, r3, #3
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d005      	beq.n	8006b14 <HAL_GPIO_Init+0x40>
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	f003 0303 	and.w	r3, r3, #3
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d130      	bne.n	8006b76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	005b      	lsls	r3, r3, #1
 8006b1e:	2203      	movs	r2, #3
 8006b20:	fa02 f303 	lsl.w	r3, r2, r3
 8006b24:	43db      	mvns	r3, r3
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	4013      	ands	r3, r2
 8006b2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	68da      	ldr	r2, [r3, #12]
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	005b      	lsls	r3, r3, #1
 8006b34:	fa02 f303 	lsl.w	r3, r2, r3
 8006b38:	693a      	ldr	r2, [r7, #16]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b52:	43db      	mvns	r3, r3
 8006b54:	693a      	ldr	r2, [r7, #16]
 8006b56:	4013      	ands	r3, r2
 8006b58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	091b      	lsrs	r3, r3, #4
 8006b60:	f003 0201 	and.w	r2, r3, #1
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	fa02 f303 	lsl.w	r3, r2, r3
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	f003 0303 	and.w	r3, r3, #3
 8006b7e:	2b03      	cmp	r3, #3
 8006b80:	d017      	beq.n	8006bb2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	005b      	lsls	r3, r3, #1
 8006b8c:	2203      	movs	r2, #3
 8006b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b92:	43db      	mvns	r3, r3
 8006b94:	693a      	ldr	r2, [r7, #16]
 8006b96:	4013      	ands	r3, r2
 8006b98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	689a      	ldr	r2, [r3, #8]
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	005b      	lsls	r3, r3, #1
 8006ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	693a      	ldr	r2, [r7, #16]
 8006bb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f003 0303 	and.w	r3, r3, #3
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d123      	bne.n	8006c06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	08da      	lsrs	r2, r3, #3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	3208      	adds	r2, #8
 8006bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	f003 0307 	and.w	r3, r3, #7
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	220f      	movs	r2, #15
 8006bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bda:	43db      	mvns	r3, r3
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	4013      	ands	r3, r2
 8006be0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	691a      	ldr	r2, [r3, #16]
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	f003 0307 	and.w	r3, r3, #7
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf2:	693a      	ldr	r2, [r7, #16]
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	08da      	lsrs	r2, r3, #3
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	3208      	adds	r2, #8
 8006c00:	6939      	ldr	r1, [r7, #16]
 8006c02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	005b      	lsls	r3, r3, #1
 8006c10:	2203      	movs	r2, #3
 8006c12:	fa02 f303 	lsl.w	r3, r2, r3
 8006c16:	43db      	mvns	r3, r3
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	f003 0203 	and.w	r2, r3, #3
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	005b      	lsls	r3, r3, #1
 8006c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c2e:	693a      	ldr	r2, [r7, #16]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	693a      	ldr	r2, [r7, #16]
 8006c38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f000 8098 	beq.w	8006d78 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8006c48:	4a54      	ldr	r2, [pc, #336]	@ (8006d9c <HAL_GPIO_Init+0x2c8>)
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	089b      	lsrs	r3, r3, #2
 8006c4e:	3302      	adds	r3, #2
 8006c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	f003 0303 	and.w	r3, r3, #3
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	220f      	movs	r2, #15
 8006c60:	fa02 f303 	lsl.w	r3, r2, r3
 8006c64:	43db      	mvns	r3, r3
 8006c66:	693a      	ldr	r2, [r7, #16]
 8006c68:	4013      	ands	r3, r2
 8006c6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8006c72:	d019      	beq.n	8006ca8 <HAL_GPIO_Init+0x1d4>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a4a      	ldr	r2, [pc, #296]	@ (8006da0 <HAL_GPIO_Init+0x2cc>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d013      	beq.n	8006ca4 <HAL_GPIO_Init+0x1d0>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a49      	ldr	r2, [pc, #292]	@ (8006da4 <HAL_GPIO_Init+0x2d0>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d00d      	beq.n	8006ca0 <HAL_GPIO_Init+0x1cc>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a48      	ldr	r2, [pc, #288]	@ (8006da8 <HAL_GPIO_Init+0x2d4>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d007      	beq.n	8006c9c <HAL_GPIO_Init+0x1c8>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a47      	ldr	r2, [pc, #284]	@ (8006dac <HAL_GPIO_Init+0x2d8>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d101      	bne.n	8006c98 <HAL_GPIO_Init+0x1c4>
 8006c94:	2304      	movs	r3, #4
 8006c96:	e008      	b.n	8006caa <HAL_GPIO_Init+0x1d6>
 8006c98:	2307      	movs	r3, #7
 8006c9a:	e006      	b.n	8006caa <HAL_GPIO_Init+0x1d6>
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	e004      	b.n	8006caa <HAL_GPIO_Init+0x1d6>
 8006ca0:	2302      	movs	r3, #2
 8006ca2:	e002      	b.n	8006caa <HAL_GPIO_Init+0x1d6>
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e000      	b.n	8006caa <HAL_GPIO_Init+0x1d6>
 8006ca8:	2300      	movs	r3, #0
 8006caa:	697a      	ldr	r2, [r7, #20]
 8006cac:	f002 0203 	and.w	r2, r2, #3
 8006cb0:	0092      	lsls	r2, r2, #2
 8006cb2:	4093      	lsls	r3, r2
 8006cb4:	693a      	ldr	r2, [r7, #16]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006cba:	4938      	ldr	r1, [pc, #224]	@ (8006d9c <HAL_GPIO_Init+0x2c8>)
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	089b      	lsrs	r3, r3, #2
 8006cc0:	3302      	adds	r3, #2
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006cc8:	4b39      	ldr	r3, [pc, #228]	@ (8006db0 <HAL_GPIO_Init+0x2dc>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	43db      	mvns	r3, r3
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d003      	beq.n	8006cec <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8006ce4:	693a      	ldr	r2, [r7, #16]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006cec:	4a30      	ldr	r2, [pc, #192]	@ (8006db0 <HAL_GPIO_Init+0x2dc>)
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006cf2:	4b2f      	ldr	r3, [pc, #188]	@ (8006db0 <HAL_GPIO_Init+0x2dc>)
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	43db      	mvns	r3, r3
 8006cfc:	693a      	ldr	r2, [r7, #16]
 8006cfe:	4013      	ands	r3, r2
 8006d00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d003      	beq.n	8006d16 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8006d0e:	693a      	ldr	r2, [r7, #16]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006d16:	4a26      	ldr	r2, [pc, #152]	@ (8006db0 <HAL_GPIO_Init+0x2dc>)
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006d1c:	4b24      	ldr	r3, [pc, #144]	@ (8006db0 <HAL_GPIO_Init+0x2dc>)
 8006d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	43db      	mvns	r3, r3
 8006d28:	693a      	ldr	r2, [r7, #16]
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d003      	beq.n	8006d42 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8006d3a:	693a      	ldr	r2, [r7, #16]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006d42:	4a1b      	ldr	r2, [pc, #108]	@ (8006db0 <HAL_GPIO_Init+0x2dc>)
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8006d4a:	4b19      	ldr	r3, [pc, #100]	@ (8006db0 <HAL_GPIO_Init+0x2dc>)
 8006d4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	43db      	mvns	r3, r3
 8006d56:	693a      	ldr	r2, [r7, #16]
 8006d58:	4013      	ands	r3, r2
 8006d5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d003      	beq.n	8006d70 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8006d68:	693a      	ldr	r2, [r7, #16]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006d70:	4a0f      	ldr	r2, [pc, #60]	@ (8006db0 <HAL_GPIO_Init+0x2dc>)
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	fa22 f303 	lsr.w	r3, r2, r3
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	f47f aeab 	bne.w	8006ae4 <HAL_GPIO_Init+0x10>
  }
}
 8006d8e:	bf00      	nop
 8006d90:	bf00      	nop
 8006d92:	371c      	adds	r7, #28
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr
 8006d9c:	40010000 	.word	0x40010000
 8006da0:	48000400 	.word	0x48000400
 8006da4:	48000800 	.word	0x48000800
 8006da8:	48000c00 	.word	0x48000c00
 8006dac:	48001000 	.word	0x48001000
 8006db0:	58000800 	.word	0x58000800

08006db4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	807b      	strh	r3, [r7, #2]
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006dc4:	787b      	ldrb	r3, [r7, #1]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d003      	beq.n	8006dd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006dca:	887a      	ldrh	r2, [r7, #2]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006dd0:	e002      	b.n	8006dd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006dd2:	887a      	ldrh	r2, [r7, #2]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006dd8:	bf00      	nop
 8006dda:	370c      	adds	r7, #12
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	460b      	mov	r3, r1
 8006dee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	695b      	ldr	r3, [r3, #20]
 8006df4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006df6:	887a      	ldrh	r2, [r7, #2]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	4013      	ands	r3, r2
 8006dfc:	041a      	lsls	r2, r3, #16
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	43d9      	mvns	r1, r3
 8006e02:	887b      	ldrh	r3, [r7, #2]
 8006e04:	400b      	ands	r3, r1
 8006e06:	431a      	orrs	r2, r3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	619a      	str	r2, [r3, #24]
}
 8006e0c:	bf00      	nop
 8006e0e:	3714      	adds	r7, #20
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	4603      	mov	r3, r0
 8006e20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006e22:	4b08      	ldr	r3, [pc, #32]	@ (8006e44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006e24:	68da      	ldr	r2, [r3, #12]
 8006e26:	88fb      	ldrh	r3, [r7, #6]
 8006e28:	4013      	ands	r3, r2
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d006      	beq.n	8006e3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006e2e:	4a05      	ldr	r2, [pc, #20]	@ (8006e44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006e30:	88fb      	ldrh	r3, [r7, #6]
 8006e32:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006e34:	88fb      	ldrh	r3, [r7, #6]
 8006e36:	4618      	mov	r0, r3
 8006e38:	f000 f806 	bl	8006e48 <HAL_GPIO_EXTI_Callback>
  }
}
 8006e3c:	bf00      	nop
 8006e3e:	3708      	adds	r7, #8
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	58000800 	.word	0x58000800

08006e48 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b083      	sub	sp, #12
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	4603      	mov	r3, r0
 8006e50:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006e52:	bf00      	nop
 8006e54:	370c      	adds	r7, #12
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr

08006e5e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b082      	sub	sp, #8
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d101      	bne.n	8006e70 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e08d      	b.n	8006f8c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d106      	bne.n	8006e8a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f7fd fae3 	bl	8004450 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2224      	movs	r2, #36	@ 0x24
 8006e8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f022 0201 	bic.w	r2, r2, #1
 8006ea0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	685a      	ldr	r2, [r3, #4]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006eae:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	689a      	ldr	r2, [r3, #8]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006ebe:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d107      	bne.n	8006ed8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	689a      	ldr	r2, [r3, #8]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006ed4:	609a      	str	r2, [r3, #8]
 8006ed6:	e006      	b.n	8006ee6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	689a      	ldr	r2, [r3, #8]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006ee4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d108      	bne.n	8006f00 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	685a      	ldr	r2, [r3, #4]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006efc:	605a      	str	r2, [r3, #4]
 8006efe:	e007      	b.n	8006f10 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	685a      	ldr	r2, [r3, #4]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f0e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	6812      	ldr	r2, [r2, #0]
 8006f1a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006f1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f22:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68da      	ldr	r2, [r3, #12]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006f32:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	691a      	ldr	r2, [r3, #16]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	695b      	ldr	r3, [r3, #20]
 8006f3c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	699b      	ldr	r3, [r3, #24]
 8006f44:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	430a      	orrs	r2, r1
 8006f4c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	69d9      	ldr	r1, [r3, #28]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6a1a      	ldr	r2, [r3, #32]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	430a      	orrs	r2, r1
 8006f5c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f042 0201 	orr.w	r2, r2, #1
 8006f6c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2220      	movs	r2, #32
 8006f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2200      	movs	r2, #0
 8006f80:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3708      	adds	r7, #8
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b088      	sub	sp, #32
 8006f98:	af02      	add	r7, sp, #8
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	607a      	str	r2, [r7, #4]
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	817b      	strh	r3, [r7, #10]
 8006fa4:	4613      	mov	r3, r2
 8006fa6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2b20      	cmp	r3, #32
 8006fb2:	f040 80fd 	bne.w	80071b0 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d101      	bne.n	8006fc4 <HAL_I2C_Master_Transmit+0x30>
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	e0f6      	b.n	80071b2 <HAL_I2C_Master_Transmit+0x21e>
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006fcc:	f7fd feb8 	bl	8004d40 <HAL_GetTick>
 8006fd0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	9300      	str	r3, [sp, #0]
 8006fd6:	2319      	movs	r3, #25
 8006fd8:	2201      	movs	r2, #1
 8006fda:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f000 ff85 	bl	8007eee <I2C_WaitOnFlagUntilTimeout>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d001      	beq.n	8006fee <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	e0e1      	b.n	80071b2 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2221      	movs	r2, #33	@ 0x21
 8006ff2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2210      	movs	r2, #16
 8006ffa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	893a      	ldrh	r2, [r7, #8]
 800700e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2200      	movs	r2, #0
 8007014:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800701a:	b29b      	uxth	r3, r3
 800701c:	2bff      	cmp	r3, #255	@ 0xff
 800701e:	d906      	bls.n	800702e <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	22ff      	movs	r2, #255	@ 0xff
 8007024:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007026:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800702a:	617b      	str	r3, [r7, #20]
 800702c:	e007      	b.n	800703e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007032:	b29a      	uxth	r2, r3
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007038:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800703c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007042:	2b00      	cmp	r3, #0
 8007044:	d024      	beq.n	8007090 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800704a:	781a      	ldrb	r2, [r3, #0]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007056:	1c5a      	adds	r2, r3, #1
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007060:	b29b      	uxth	r3, r3
 8007062:	3b01      	subs	r3, #1
 8007064:	b29a      	uxth	r2, r3
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800706e:	3b01      	subs	r3, #1
 8007070:	b29a      	uxth	r2, r3
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800707a:	b2db      	uxtb	r3, r3
 800707c:	3301      	adds	r3, #1
 800707e:	b2da      	uxtb	r2, r3
 8007080:	8979      	ldrh	r1, [r7, #10]
 8007082:	4b4e      	ldr	r3, [pc, #312]	@ (80071bc <HAL_I2C_Master_Transmit+0x228>)
 8007084:	9300      	str	r3, [sp, #0]
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f001 f97f 	bl	800838c <I2C_TransferConfig>
 800708e:	e066      	b.n	800715e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007094:	b2da      	uxtb	r2, r3
 8007096:	8979      	ldrh	r1, [r7, #10]
 8007098:	4b48      	ldr	r3, [pc, #288]	@ (80071bc <HAL_I2C_Master_Transmit+0x228>)
 800709a:	9300      	str	r3, [sp, #0]
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f001 f974 	bl	800838c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80070a4:	e05b      	b.n	800715e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070a6:	693a      	ldr	r2, [r7, #16]
 80070a8:	6a39      	ldr	r1, [r7, #32]
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f000 ff78 	bl	8007fa0 <I2C_WaitOnTXISFlagUntilTimeout>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d001      	beq.n	80070ba <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e07b      	b.n	80071b2 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070be:	781a      	ldrb	r2, [r3, #0]
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ca:	1c5a      	adds	r2, r3, #1
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070d4:	b29b      	uxth	r3, r3
 80070d6:	3b01      	subs	r3, #1
 80070d8:	b29a      	uxth	r2, r3
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070e2:	3b01      	subs	r3, #1
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d034      	beq.n	800715e <HAL_I2C_Master_Transmit+0x1ca>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d130      	bne.n	800715e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	9300      	str	r3, [sp, #0]
 8007100:	6a3b      	ldr	r3, [r7, #32]
 8007102:	2200      	movs	r2, #0
 8007104:	2180      	movs	r1, #128	@ 0x80
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	f000 fef1 	bl	8007eee <I2C_WaitOnFlagUntilTimeout>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d001      	beq.n	8007116 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8007112:	2301      	movs	r3, #1
 8007114:	e04d      	b.n	80071b2 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800711a:	b29b      	uxth	r3, r3
 800711c:	2bff      	cmp	r3, #255	@ 0xff
 800711e:	d90e      	bls.n	800713e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	22ff      	movs	r2, #255	@ 0xff
 8007124:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800712a:	b2da      	uxtb	r2, r3
 800712c:	8979      	ldrh	r1, [r7, #10]
 800712e:	2300      	movs	r3, #0
 8007130:	9300      	str	r3, [sp, #0]
 8007132:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f001 f928 	bl	800838c <I2C_TransferConfig>
 800713c:	e00f      	b.n	800715e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007142:	b29a      	uxth	r2, r3
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800714c:	b2da      	uxtb	r2, r3
 800714e:	8979      	ldrh	r1, [r7, #10]
 8007150:	2300      	movs	r3, #0
 8007152:	9300      	str	r3, [sp, #0]
 8007154:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f001 f917 	bl	800838c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007162:	b29b      	uxth	r3, r3
 8007164:	2b00      	cmp	r3, #0
 8007166:	d19e      	bne.n	80070a6 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007168:	693a      	ldr	r2, [r7, #16]
 800716a:	6a39      	ldr	r1, [r7, #32]
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	f000 ff5e 	bl	800802e <I2C_WaitOnSTOPFlagUntilTimeout>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d001      	beq.n	800717c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e01a      	b.n	80071b2 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2220      	movs	r2, #32
 8007182:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6859      	ldr	r1, [r3, #4]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	4b0c      	ldr	r3, [pc, #48]	@ (80071c0 <HAL_I2C_Master_Transmit+0x22c>)
 8007190:	400b      	ands	r3, r1
 8007192:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	2220      	movs	r2, #32
 8007198:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80071ac:	2300      	movs	r3, #0
 80071ae:	e000      	b.n	80071b2 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80071b0:	2302      	movs	r3, #2
  }
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3718      	adds	r7, #24
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}
 80071ba:	bf00      	nop
 80071bc:	80002000 	.word	0x80002000
 80071c0:	fe00e800 	.word	0xfe00e800

080071c4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b088      	sub	sp, #32
 80071c8:	af02      	add	r7, sp, #8
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	607a      	str	r2, [r7, #4]
 80071ce:	461a      	mov	r2, r3
 80071d0:	460b      	mov	r3, r1
 80071d2:	817b      	strh	r3, [r7, #10]
 80071d4:	4613      	mov	r3, r2
 80071d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	2b20      	cmp	r3, #32
 80071e2:	f040 80db 	bne.w	800739c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d101      	bne.n	80071f4 <HAL_I2C_Master_Receive+0x30>
 80071f0:	2302      	movs	r3, #2
 80071f2:	e0d4      	b.n	800739e <HAL_I2C_Master_Receive+0x1da>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80071fc:	f7fd fda0 	bl	8004d40 <HAL_GetTick>
 8007200:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	9300      	str	r3, [sp, #0]
 8007206:	2319      	movs	r3, #25
 8007208:	2201      	movs	r2, #1
 800720a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f000 fe6d 	bl	8007eee <I2C_WaitOnFlagUntilTimeout>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d001      	beq.n	800721e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e0bf      	b.n	800739e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2222      	movs	r2, #34	@ 0x22
 8007222:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2210      	movs	r2, #16
 800722a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2200      	movs	r2, #0
 8007232:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	893a      	ldrh	r2, [r7, #8]
 800723e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2200      	movs	r2, #0
 8007244:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800724a:	b29b      	uxth	r3, r3
 800724c:	2bff      	cmp	r3, #255	@ 0xff
 800724e:	d90e      	bls.n	800726e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	22ff      	movs	r2, #255	@ 0xff
 8007254:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800725a:	b2da      	uxtb	r2, r3
 800725c:	8979      	ldrh	r1, [r7, #10]
 800725e:	4b52      	ldr	r3, [pc, #328]	@ (80073a8 <HAL_I2C_Master_Receive+0x1e4>)
 8007260:	9300      	str	r3, [sp, #0]
 8007262:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007266:	68f8      	ldr	r0, [r7, #12]
 8007268:	f001 f890 	bl	800838c <I2C_TransferConfig>
 800726c:	e06d      	b.n	800734a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007272:	b29a      	uxth	r2, r3
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800727c:	b2da      	uxtb	r2, r3
 800727e:	8979      	ldrh	r1, [r7, #10]
 8007280:	4b49      	ldr	r3, [pc, #292]	@ (80073a8 <HAL_I2C_Master_Receive+0x1e4>)
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f001 f87f 	bl	800838c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800728e:	e05c      	b.n	800734a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007290:	697a      	ldr	r2, [r7, #20]
 8007292:	6a39      	ldr	r1, [r7, #32]
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	f000 ff0d 	bl	80080b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800729a:	4603      	mov	r3, r0
 800729c:	2b00      	cmp	r3, #0
 800729e:	d001      	beq.n	80072a4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e07c      	b.n	800739e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072ae:	b2d2      	uxtb	r2, r2
 80072b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072b6:	1c5a      	adds	r2, r3, #1
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072c0:	3b01      	subs	r3, #1
 80072c2:	b29a      	uxth	r2, r3
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	3b01      	subs	r3, #1
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072da:	b29b      	uxth	r3, r3
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d034      	beq.n	800734a <HAL_I2C_Master_Receive+0x186>
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d130      	bne.n	800734a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	9300      	str	r3, [sp, #0]
 80072ec:	6a3b      	ldr	r3, [r7, #32]
 80072ee:	2200      	movs	r2, #0
 80072f0:	2180      	movs	r1, #128	@ 0x80
 80072f2:	68f8      	ldr	r0, [r7, #12]
 80072f4:	f000 fdfb 	bl	8007eee <I2C_WaitOnFlagUntilTimeout>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d001      	beq.n	8007302 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e04d      	b.n	800739e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007306:	b29b      	uxth	r3, r3
 8007308:	2bff      	cmp	r3, #255	@ 0xff
 800730a:	d90e      	bls.n	800732a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	22ff      	movs	r2, #255	@ 0xff
 8007310:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007316:	b2da      	uxtb	r2, r3
 8007318:	8979      	ldrh	r1, [r7, #10]
 800731a:	2300      	movs	r3, #0
 800731c:	9300      	str	r3, [sp, #0]
 800731e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007322:	68f8      	ldr	r0, [r7, #12]
 8007324:	f001 f832 	bl	800838c <I2C_TransferConfig>
 8007328:	e00f      	b.n	800734a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800732e:	b29a      	uxth	r2, r3
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007338:	b2da      	uxtb	r2, r3
 800733a:	8979      	ldrh	r1, [r7, #10]
 800733c:	2300      	movs	r3, #0
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f001 f821 	bl	800838c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800734e:	b29b      	uxth	r3, r3
 8007350:	2b00      	cmp	r3, #0
 8007352:	d19d      	bne.n	8007290 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007354:	697a      	ldr	r2, [r7, #20]
 8007356:	6a39      	ldr	r1, [r7, #32]
 8007358:	68f8      	ldr	r0, [r7, #12]
 800735a:	f000 fe68 	bl	800802e <I2C_WaitOnSTOPFlagUntilTimeout>
 800735e:	4603      	mov	r3, r0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d001      	beq.n	8007368 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e01a      	b.n	800739e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2220      	movs	r2, #32
 800736e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	6859      	ldr	r1, [r3, #4]
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	4b0c      	ldr	r3, [pc, #48]	@ (80073ac <HAL_I2C_Master_Receive+0x1e8>)
 800737c:	400b      	ands	r3, r1
 800737e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2220      	movs	r2, #32
 8007384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2200      	movs	r2, #0
 800738c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2200      	movs	r2, #0
 8007394:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007398:	2300      	movs	r3, #0
 800739a:	e000      	b.n	800739e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800739c:	2302      	movs	r3, #2
  }
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3718      	adds	r7, #24
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop
 80073a8:	80002400 	.word	0x80002400
 80073ac:	fe00e800 	.word	0xfe00e800

080073b0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d005      	beq.n	80073dc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073d4:	68ba      	ldr	r2, [r7, #8]
 80073d6:	68f9      	ldr	r1, [r7, #12]
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	4798      	blx	r3
  }
}
 80073dc:	bf00      	nop
 80073de:	3710      	adds	r7, #16
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b086      	sub	sp, #24
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	699b      	ldr	r3, [r3, #24]
 80073f2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00f      	beq.n	8007426 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800740c:	2b00      	cmp	r3, #0
 800740e:	d00a      	beq.n	8007426 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007414:	f043 0201 	orr.w	r2, r3, #1
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007424:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00f      	beq.n	8007450 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00a      	beq.n	8007450 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800743e:	f043 0208 	orr.w	r2, r3, #8
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800744e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00f      	beq.n	800747a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00a      	beq.n	800747a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007468:	f043 0202 	orr.w	r2, r3, #2
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007478:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800747e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f003 030b 	and.w	r3, r3, #11
 8007486:	2b00      	cmp	r3, #0
 8007488:	d003      	beq.n	8007492 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800748a:	68f9      	ldr	r1, [r7, #12]
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 fbd5 	bl	8007c3c <I2C_ITError>
  }
}
 8007492:	bf00      	nop
 8007494:	3718      	adds	r7, #24
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800749a:	b480      	push	{r7}
 800749c:	b083      	sub	sp, #12
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80074a2:	bf00      	nop
 80074a4:	370c      	adds	r7, #12
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr

080074ae <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80074ae:	b480      	push	{r7}
 80074b0:	b083      	sub	sp, #12
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80074b6:	bf00      	nop
 80074b8:	370c      	adds	r7, #12
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr

080074c2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80074c2:	b480      	push	{r7}
 80074c4:	b083      	sub	sp, #12
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
 80074ca:	460b      	mov	r3, r1
 80074cc:	70fb      	strb	r3, [r7, #3]
 80074ce:	4613      	mov	r3, r2
 80074d0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80074d2:	bf00      	nop
 80074d4:	370c      	adds	r7, #12
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr

080074de <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80074de:	b480      	push	{r7}
 80074e0:	b083      	sub	sp, #12
 80074e2:	af00      	add	r7, sp, #0
 80074e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80074e6:	bf00      	nop
 80074e8:	370c      	adds	r7, #12
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80074f2:	b480      	push	{r7}
 80074f4:	b083      	sub	sp, #12
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80074fa:	bf00      	nop
 80074fc:	370c      	adds	r7, #12
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr

08007506 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007506:	b480      	push	{r7}
 8007508:	b083      	sub	sp, #12
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800750e:	bf00      	nop
 8007510:	370c      	adds	r7, #12
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr

0800751a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800751a:	b580      	push	{r7, lr}
 800751c:	b086      	sub	sp, #24
 800751e:	af00      	add	r7, sp, #0
 8007520:	60f8      	str	r0, [r7, #12]
 8007522:	60b9      	str	r1, [r7, #8]
 8007524:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800752a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007536:	2b01      	cmp	r3, #1
 8007538:	d101      	bne.n	800753e <I2C_Slave_ISR_IT+0x24>
 800753a:	2302      	movs	r3, #2
 800753c:	e0e2      	b.n	8007704 <I2C_Slave_ISR_IT+0x1ea>
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2201      	movs	r2, #1
 8007542:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	f003 0320 	and.w	r3, r3, #32
 800754c:	2b00      	cmp	r3, #0
 800754e:	d009      	beq.n	8007564 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007556:	2b00      	cmp	r3, #0
 8007558:	d004      	beq.n	8007564 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800755a:	6939      	ldr	r1, [r7, #16]
 800755c:	68f8      	ldr	r0, [r7, #12]
 800755e:	f000 f9b5 	bl	80078cc <I2C_ITSlaveCplt>
 8007562:	e0ca      	b.n	80076fa <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	f003 0310 	and.w	r3, r3, #16
 800756a:	2b00      	cmp	r3, #0
 800756c:	d04b      	beq.n	8007606 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007574:	2b00      	cmp	r3, #0
 8007576:	d046      	beq.n	8007606 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800757c:	b29b      	uxth	r3, r3
 800757e:	2b00      	cmp	r3, #0
 8007580:	d128      	bne.n	80075d4 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007588:	b2db      	uxtb	r3, r3
 800758a:	2b28      	cmp	r3, #40	@ 0x28
 800758c:	d108      	bne.n	80075a0 <I2C_Slave_ISR_IT+0x86>
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007594:	d104      	bne.n	80075a0 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007596:	6939      	ldr	r1, [r7, #16]
 8007598:	68f8      	ldr	r0, [r7, #12]
 800759a:	f000 fafb 	bl	8007b94 <I2C_ITListenCplt>
 800759e:	e031      	b.n	8007604 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	2b29      	cmp	r3, #41	@ 0x29
 80075aa:	d10e      	bne.n	80075ca <I2C_Slave_ISR_IT+0xb0>
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80075b2:	d00a      	beq.n	80075ca <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2210      	movs	r2, #16
 80075ba:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80075bc:	68f8      	ldr	r0, [r7, #12]
 80075be:	f000 fc54 	bl	8007e6a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f000 f926 	bl	8007814 <I2C_ITSlaveSeqCplt>
 80075c8:	e01c      	b.n	8007604 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2210      	movs	r2, #16
 80075d0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80075d2:	e08f      	b.n	80076f4 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2210      	movs	r2, #16
 80075da:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075e0:	f043 0204 	orr.w	r2, r3, #4
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d003      	beq.n	80075f6 <I2C_Slave_ISR_IT+0xdc>
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80075f4:	d17e      	bne.n	80076f4 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075fa:	4619      	mov	r1, r3
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	f000 fb1d 	bl	8007c3c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007602:	e077      	b.n	80076f4 <I2C_Slave_ISR_IT+0x1da>
 8007604:	e076      	b.n	80076f4 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	f003 0304 	and.w	r3, r3, #4
 800760c:	2b00      	cmp	r3, #0
 800760e:	d02f      	beq.n	8007670 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007616:	2b00      	cmp	r3, #0
 8007618:	d02a      	beq.n	8007670 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800761e:	b29b      	uxth	r3, r3
 8007620:	2b00      	cmp	r3, #0
 8007622:	d018      	beq.n	8007656 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800762e:	b2d2      	uxtb	r2, r2
 8007630:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007636:	1c5a      	adds	r2, r3, #1
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007640:	3b01      	subs	r3, #1
 8007642:	b29a      	uxth	r2, r3
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800764c:	b29b      	uxth	r3, r3
 800764e:	3b01      	subs	r3, #1
 8007650:	b29a      	uxth	r2, r3
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800765a:	b29b      	uxth	r3, r3
 800765c:	2b00      	cmp	r3, #0
 800765e:	d14b      	bne.n	80076f8 <I2C_Slave_ISR_IT+0x1de>
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007666:	d047      	beq.n	80076f8 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f000 f8d3 	bl	8007814 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800766e:	e043      	b.n	80076f8 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	f003 0308 	and.w	r3, r3, #8
 8007676:	2b00      	cmp	r3, #0
 8007678:	d009      	beq.n	800768e <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007680:	2b00      	cmp	r3, #0
 8007682:	d004      	beq.n	800768e <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007684:	6939      	ldr	r1, [r7, #16]
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f000 f840 	bl	800770c <I2C_ITAddrCplt>
 800768c:	e035      	b.n	80076fa <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	f003 0302 	and.w	r3, r3, #2
 8007694:	2b00      	cmp	r3, #0
 8007696:	d030      	beq.n	80076fa <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d02b      	beq.n	80076fa <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d018      	beq.n	80076de <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076b0:	781a      	ldrb	r2, [r3, #0]
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076bc:	1c5a      	adds	r2, r3, #1
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	3b01      	subs	r3, #1
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076d4:	3b01      	subs	r3, #1
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	851a      	strh	r2, [r3, #40]	@ 0x28
 80076dc:	e00d      	b.n	80076fa <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80076e4:	d002      	beq.n	80076ec <I2C_Slave_ISR_IT+0x1d2>
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d106      	bne.n	80076fa <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80076ec:	68f8      	ldr	r0, [r7, #12]
 80076ee:	f000 f891 	bl	8007814 <I2C_ITSlaveSeqCplt>
 80076f2:	e002      	b.n	80076fa <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80076f4:	bf00      	nop
 80076f6:	e000      	b.n	80076fa <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80076f8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3718      	adds	r7, #24
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800771c:	b2db      	uxtb	r3, r3
 800771e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007722:	2b28      	cmp	r3, #40	@ 0x28
 8007724:	d16a      	bne.n	80077fc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	699b      	ldr	r3, [r3, #24]
 800772c:	0c1b      	lsrs	r3, r3, #16
 800772e:	b2db      	uxtb	r3, r3
 8007730:	f003 0301 	and.w	r3, r3, #1
 8007734:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	699b      	ldr	r3, [r3, #24]
 800773c:	0c1b      	lsrs	r3, r3, #16
 800773e:	b29b      	uxth	r3, r3
 8007740:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007744:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	b29b      	uxth	r3, r3
 800774e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007752:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	68db      	ldr	r3, [r3, #12]
 800775a:	b29b      	uxth	r3, r3
 800775c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007760:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	2b02      	cmp	r3, #2
 8007768:	d138      	bne.n	80077dc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800776a:	897b      	ldrh	r3, [r7, #10]
 800776c:	09db      	lsrs	r3, r3, #7
 800776e:	b29a      	uxth	r2, r3
 8007770:	89bb      	ldrh	r3, [r7, #12]
 8007772:	4053      	eors	r3, r2
 8007774:	b29b      	uxth	r3, r3
 8007776:	f003 0306 	and.w	r3, r3, #6
 800777a:	2b00      	cmp	r3, #0
 800777c:	d11c      	bne.n	80077b8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800777e:	897b      	ldrh	r3, [r7, #10]
 8007780:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007786:	1c5a      	adds	r2, r3, #1
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007790:	2b02      	cmp	r3, #2
 8007792:	d13b      	bne.n	800780c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2208      	movs	r2, #8
 80077a0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80077aa:	89ba      	ldrh	r2, [r7, #12]
 80077ac:	7bfb      	ldrb	r3, [r7, #15]
 80077ae:	4619      	mov	r1, r3
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f7ff fe86 	bl	80074c2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80077b6:	e029      	b.n	800780c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80077b8:	893b      	ldrh	r3, [r7, #8]
 80077ba:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80077bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f000 fe15 	bl	80083f0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80077ce:	89ba      	ldrh	r2, [r7, #12]
 80077d0:	7bfb      	ldrb	r3, [r7, #15]
 80077d2:	4619      	mov	r1, r3
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f7ff fe74 	bl	80074c2 <HAL_I2C_AddrCallback>
}
 80077da:	e017      	b.n	800780c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80077dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80077e0:	6878      	ldr	r0, [r7, #4]
 80077e2:	f000 fe05 	bl	80083f0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80077ee:	89ba      	ldrh	r2, [r7, #12]
 80077f0:	7bfb      	ldrb	r3, [r7, #15]
 80077f2:	4619      	mov	r1, r3
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f7ff fe64 	bl	80074c2 <HAL_I2C_AddrCallback>
}
 80077fa:	e007      	b.n	800780c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	2208      	movs	r2, #8
 8007802:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2200      	movs	r2, #0
 8007808:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800780c:	bf00      	nop
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2200      	movs	r2, #0
 8007828:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d008      	beq.n	8007848 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007844:	601a      	str	r2, [r3, #0]
 8007846:	e00c      	b.n	8007862 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800784e:	2b00      	cmp	r3, #0
 8007850:	d007      	beq.n	8007862 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007860:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007868:	b2db      	uxtb	r3, r3
 800786a:	2b29      	cmp	r3, #41	@ 0x29
 800786c:	d112      	bne.n	8007894 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2228      	movs	r2, #40	@ 0x28
 8007872:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2221      	movs	r2, #33	@ 0x21
 800787a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800787c:	2101      	movs	r1, #1
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 fdb6 	bl	80083f0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f7ff fe04 	bl	800749a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007892:	e017      	b.n	80078c4 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800789a:	b2db      	uxtb	r3, r3
 800789c:	2b2a      	cmp	r3, #42	@ 0x2a
 800789e:	d111      	bne.n	80078c4 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2228      	movs	r2, #40	@ 0x28
 80078a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2222      	movs	r2, #34	@ 0x22
 80078ac:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80078ae:	2102      	movs	r1, #2
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 fd9d 	bl	80083f0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f7ff fdf5 	bl	80074ae <HAL_I2C_SlaveRxCpltCallback>
}
 80078c4:	bf00      	nop
 80078c6:	3710      	adds	r7, #16
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b086      	sub	sp, #24
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
 80078d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078e6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078ee:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2220      	movs	r2, #32
 80078f6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80078f8:	7afb      	ldrb	r3, [r7, #11]
 80078fa:	2b21      	cmp	r3, #33	@ 0x21
 80078fc:	d002      	beq.n	8007904 <I2C_ITSlaveCplt+0x38>
 80078fe:	7afb      	ldrb	r3, [r7, #11]
 8007900:	2b29      	cmp	r3, #41	@ 0x29
 8007902:	d108      	bne.n	8007916 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007904:	f248 0101 	movw	r1, #32769	@ 0x8001
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f000 fd71 	bl	80083f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2221      	movs	r2, #33	@ 0x21
 8007912:	631a      	str	r2, [r3, #48]	@ 0x30
 8007914:	e019      	b.n	800794a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007916:	7afb      	ldrb	r3, [r7, #11]
 8007918:	2b22      	cmp	r3, #34	@ 0x22
 800791a:	d002      	beq.n	8007922 <I2C_ITSlaveCplt+0x56>
 800791c:	7afb      	ldrb	r3, [r7, #11]
 800791e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007920:	d108      	bne.n	8007934 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007922:	f248 0102 	movw	r1, #32770	@ 0x8002
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 fd62 	bl	80083f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2222      	movs	r2, #34	@ 0x22
 8007930:	631a      	str	r2, [r3, #48]	@ 0x30
 8007932:	e00a      	b.n	800794a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8007934:	7afb      	ldrb	r3, [r7, #11]
 8007936:	2b28      	cmp	r3, #40	@ 0x28
 8007938:	d107      	bne.n	800794a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800793a:	f248 0103 	movw	r1, #32771	@ 0x8003
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 fd56 	bl	80083f0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2200      	movs	r2, #0
 8007948:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	685a      	ldr	r2, [r3, #4]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007958:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	6859      	ldr	r1, [r3, #4]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	4b89      	ldr	r3, [pc, #548]	@ (8007b8c <I2C_ITSlaveCplt+0x2c0>)
 8007966:	400b      	ands	r3, r1
 8007968:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 fa7d 	bl	8007e6a <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007976:	2b00      	cmp	r3, #0
 8007978:	d013      	beq.n	80079a2 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007988:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800798e:	2b00      	cmp	r3, #0
 8007990:	d01f      	beq.n	80079d2 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	b29a      	uxth	r2, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80079a0:	e017      	b.n	80079d2 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d012      	beq.n	80079d2 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80079ba:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d006      	beq.n	80079d2 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	b29a      	uxth	r2, r3
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	f003 0304 	and.w	r3, r3, #4
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d020      	beq.n	8007a1e <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	f023 0304 	bic.w	r3, r3, #4
 80079e2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ee:	b2d2      	uxtb	r2, r2
 80079f0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079f6:	1c5a      	adds	r2, r3, #1
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00c      	beq.n	8007a1e <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007a08:	3b01      	subs	r3, #1
 8007a0a:	b29a      	uxth	r2, r3
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	3b01      	subs	r3, #1
 8007a18:	b29a      	uxth	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d005      	beq.n	8007a34 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a2c:	f043 0204 	orr.w	r2, r3, #4
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	f003 0310 	and.w	r3, r3, #16
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d049      	beq.n	8007ad2 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d044      	beq.n	8007ad2 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d128      	bne.n	8007aa4 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	2b28      	cmp	r3, #40	@ 0x28
 8007a5c:	d108      	bne.n	8007a70 <I2C_ITSlaveCplt+0x1a4>
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007a64:	d104      	bne.n	8007a70 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007a66:	6979      	ldr	r1, [r7, #20]
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 f893 	bl	8007b94 <I2C_ITListenCplt>
 8007a6e:	e030      	b.n	8007ad2 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007a76:	b2db      	uxtb	r3, r3
 8007a78:	2b29      	cmp	r3, #41	@ 0x29
 8007a7a:	d10e      	bne.n	8007a9a <I2C_ITSlaveCplt+0x1ce>
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007a82:	d00a      	beq.n	8007a9a <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	2210      	movs	r2, #16
 8007a8a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 f9ec 	bl	8007e6a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f7ff febe 	bl	8007814 <I2C_ITSlaveSeqCplt>
 8007a98:	e01b      	b.n	8007ad2 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2210      	movs	r2, #16
 8007aa0:	61da      	str	r2, [r3, #28]
 8007aa2:	e016      	b.n	8007ad2 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2210      	movs	r2, #16
 8007aaa:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ab0:	f043 0204 	orr.w	r2, r3, #4
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d003      	beq.n	8007ac6 <I2C_ITSlaveCplt+0x1fa>
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007ac4:	d105      	bne.n	8007ad2 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aca:	4619      	mov	r1, r3
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 f8b5 	bl	8007c3c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d010      	beq.n	8007b0a <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aec:	4619      	mov	r1, r3
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 f8a4 	bl	8007c3c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	2b28      	cmp	r3, #40	@ 0x28
 8007afe:	d141      	bne.n	8007b84 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007b00:	6979      	ldr	r1, [r7, #20]
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 f846 	bl	8007b94 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007b08:	e03c      	b.n	8007b84 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b0e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007b12:	d014      	beq.n	8007b3e <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f7ff fe7d 	bl	8007814 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a1c      	ldr	r2, [pc, #112]	@ (8007b90 <I2C_ITSlaveCplt+0x2c4>)
 8007b1e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2220      	movs	r2, #32
 8007b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f7ff fcd1 	bl	80074de <HAL_I2C_ListenCpltCallback>
}
 8007b3c:	e022      	b.n	8007b84 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	2b22      	cmp	r3, #34	@ 0x22
 8007b48:	d10e      	bne.n	8007b68 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2220      	movs	r2, #32
 8007b4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f7ff fca4 	bl	80074ae <HAL_I2C_SlaveRxCpltCallback>
}
 8007b66:	e00d      	b.n	8007b84 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2220      	movs	r2, #32
 8007b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f7ff fc8b 	bl	800749a <HAL_I2C_SlaveTxCpltCallback>
}
 8007b84:	bf00      	nop
 8007b86:	3718      	adds	r7, #24
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	bd80      	pop	{r7, pc}
 8007b8c:	fe00e800 	.word	0xfe00e800
 8007b90:	ffff0000 	.word	0xffff0000

08007b94 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a25      	ldr	r2, [pc, #148]	@ (8007c38 <I2C_ITListenCplt+0xa4>)
 8007ba2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2220      	movs	r2, #32
 8007bae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	f003 0304 	and.w	r3, r3, #4
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d022      	beq.n	8007c10 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bd4:	b2d2      	uxtb	r2, r2
 8007bd6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bdc:	1c5a      	adds	r2, r3, #1
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d012      	beq.n	8007c10 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007bee:	3b01      	subs	r3, #1
 8007bf0:	b29a      	uxth	r2, r3
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	3b01      	subs	r3, #1
 8007bfe:	b29a      	uxth	r2, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c08:	f043 0204 	orr.w	r2, r3, #4
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007c10:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 fbeb 	bl	80083f0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2210      	movs	r2, #16
 8007c20:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f7ff fc57 	bl	80074de <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007c30:	bf00      	nop
 8007c32:	3708      	adds	r7, #8
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}
 8007c38:	ffff0000 	.word	0xffff0000

08007c3c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b084      	sub	sp, #16
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
 8007c44:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007c4c:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	4a6d      	ldr	r2, [pc, #436]	@ (8007e10 <I2C_ITError+0x1d4>)
 8007c5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	431a      	orrs	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007c6e:	7bfb      	ldrb	r3, [r7, #15]
 8007c70:	2b28      	cmp	r3, #40	@ 0x28
 8007c72:	d005      	beq.n	8007c80 <I2C_ITError+0x44>
 8007c74:	7bfb      	ldrb	r3, [r7, #15]
 8007c76:	2b29      	cmp	r3, #41	@ 0x29
 8007c78:	d002      	beq.n	8007c80 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007c7a:	7bfb      	ldrb	r3, [r7, #15]
 8007c7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c7e:	d10b      	bne.n	8007c98 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007c80:	2103      	movs	r1, #3
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 fbb4 	bl	80083f0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2228      	movs	r2, #40	@ 0x28
 8007c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a60      	ldr	r2, [pc, #384]	@ (8007e14 <I2C_ITError+0x1d8>)
 8007c94:	635a      	str	r2, [r3, #52]	@ 0x34
 8007c96:	e030      	b.n	8007cfa <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007c98:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	f000 fba7 	bl	80083f0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f8e1 	bl	8007e6a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	2b60      	cmp	r3, #96	@ 0x60
 8007cb2:	d01f      	beq.n	8007cf4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2220      	movs	r2, #32
 8007cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	699b      	ldr	r3, [r3, #24]
 8007cc2:	f003 0320 	and.w	r3, r3, #32
 8007cc6:	2b20      	cmp	r3, #32
 8007cc8:	d114      	bne.n	8007cf4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	699b      	ldr	r3, [r3, #24]
 8007cd0:	f003 0310 	and.w	r3, r3, #16
 8007cd4:	2b10      	cmp	r3, #16
 8007cd6:	d109      	bne.n	8007cec <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	2210      	movs	r2, #16
 8007cde:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ce4:	f043 0204 	orr.w	r2, r3, #4
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2220      	movs	r2, #32
 8007cf2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cfe:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d039      	beq.n	8007d7c <I2C_ITError+0x140>
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	2b11      	cmp	r3, #17
 8007d0c:	d002      	beq.n	8007d14 <I2C_ITError+0xd8>
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	2b21      	cmp	r3, #33	@ 0x21
 8007d12:	d133      	bne.n	8007d7c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007d1e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007d22:	d107      	bne.n	8007d34 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007d32:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d38:	4618      	mov	r0, r3
 8007d3a:	f7fe fe1a 	bl	8006972 <HAL_DMA_GetState>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d017      	beq.n	8007d74 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d48:	4a33      	ldr	r2, [pc, #204]	@ (8007e18 <I2C_ITError+0x1dc>)
 8007d4a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7fe fcfc 	bl	8006756 <HAL_DMA_Abort_IT>
 8007d5e:	4603      	mov	r3, r0
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d04d      	beq.n	8007e00 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007d6e:	4610      	mov	r0, r2
 8007d70:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007d72:	e045      	b.n	8007e00 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 f851 	bl	8007e1c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007d7a:	e041      	b.n	8007e00 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d039      	beq.n	8007df8 <I2C_ITError+0x1bc>
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	2b12      	cmp	r3, #18
 8007d88:	d002      	beq.n	8007d90 <I2C_ITError+0x154>
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	2b22      	cmp	r3, #34	@ 0x22
 8007d8e:	d133      	bne.n	8007df8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007d9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d9e:	d107      	bne.n	8007db0 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007dae:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7fe fddc 	bl	8006972 <HAL_DMA_GetState>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d017      	beq.n	8007df0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dc4:	4a14      	ldr	r2, [pc, #80]	@ (8007e18 <I2C_ITError+0x1dc>)
 8007dc6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f7fe fcbe 	bl	8006756 <HAL_DMA_Abort_IT>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d011      	beq.n	8007e04 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007de4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007dea:	4610      	mov	r0, r2
 8007dec:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007dee:	e009      	b.n	8007e04 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 f813 	bl	8007e1c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007df6:	e005      	b.n	8007e04 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f000 f80f 	bl	8007e1c <I2C_TreatErrorCallback>
  }
}
 8007dfe:	e002      	b.n	8007e06 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007e00:	bf00      	nop
 8007e02:	e000      	b.n	8007e06 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007e04:	bf00      	nop
}
 8007e06:	bf00      	nop
 8007e08:	3710      	adds	r7, #16
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	ffff0000 	.word	0xffff0000
 8007e14:	0800751b 	.word	0x0800751b
 8007e18:	08007eb3 	.word	0x08007eb3

08007e1c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	2b60      	cmp	r3, #96	@ 0x60
 8007e2e:	d10e      	bne.n	8007e4e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2220      	movs	r2, #32
 8007e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f7ff fb5d 	bl	8007506 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007e4c:	e009      	b.n	8007e62 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f7ff fb48 	bl	80074f2 <HAL_I2C_ErrorCallback>
}
 8007e62:	bf00      	nop
 8007e64:	3708      	adds	r7, #8
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007e6a:	b480      	push	{r7}
 8007e6c:	b083      	sub	sp, #12
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	699b      	ldr	r3, [r3, #24]
 8007e78:	f003 0302 	and.w	r3, r3, #2
 8007e7c:	2b02      	cmp	r3, #2
 8007e7e:	d103      	bne.n	8007e88 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2200      	movs	r2, #0
 8007e86:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	f003 0301 	and.w	r3, r3, #1
 8007e92:	2b01      	cmp	r3, #1
 8007e94:	d007      	beq.n	8007ea6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	699a      	ldr	r2, [r3, #24]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f042 0201 	orr.w	r2, r2, #1
 8007ea4:	619a      	str	r2, [r3, #24]
  }
}
 8007ea6:	bf00      	nop
 8007ea8:	370c      	adds	r7, #12
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr

08007eb2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b084      	sub	sp, #16
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ebe:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d003      	beq.n	8007ed0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ecc:	2200      	movs	r2, #0
 8007ece:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d003      	beq.n	8007ee0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007edc:	2200      	movs	r2, #0
 8007ede:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f7ff ff9b 	bl	8007e1c <I2C_TreatErrorCallback>
}
 8007ee6:	bf00      	nop
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b084      	sub	sp, #16
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	60f8      	str	r0, [r7, #12]
 8007ef6:	60b9      	str	r1, [r7, #8]
 8007ef8:	603b      	str	r3, [r7, #0]
 8007efa:	4613      	mov	r3, r2
 8007efc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007efe:	e03b      	b.n	8007f78 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f00:	69ba      	ldr	r2, [r7, #24]
 8007f02:	6839      	ldr	r1, [r7, #0]
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	f000 f961 	bl	80081cc <I2C_IsErrorOccurred>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d001      	beq.n	8007f14 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	e041      	b.n	8007f98 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f1a:	d02d      	beq.n	8007f78 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f1c:	f7fc ff10 	bl	8004d40 <HAL_GetTick>
 8007f20:	4602      	mov	r2, r0
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	1ad3      	subs	r3, r2, r3
 8007f26:	683a      	ldr	r2, [r7, #0]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d302      	bcc.n	8007f32 <I2C_WaitOnFlagUntilTimeout+0x44>
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d122      	bne.n	8007f78 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	699a      	ldr	r2, [r3, #24]
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	4013      	ands	r3, r2
 8007f3c:	68ba      	ldr	r2, [r7, #8]
 8007f3e:	429a      	cmp	r2, r3
 8007f40:	bf0c      	ite	eq
 8007f42:	2301      	moveq	r3, #1
 8007f44:	2300      	movne	r3, #0
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	461a      	mov	r2, r3
 8007f4a:	79fb      	ldrb	r3, [r7, #7]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d113      	bne.n	8007f78 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f54:	f043 0220 	orr.w	r2, r3, #32
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2220      	movs	r2, #32
 8007f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	e00f      	b.n	8007f98 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	699a      	ldr	r2, [r3, #24]
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	4013      	ands	r3, r2
 8007f82:	68ba      	ldr	r2, [r7, #8]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	bf0c      	ite	eq
 8007f88:	2301      	moveq	r3, #1
 8007f8a:	2300      	movne	r3, #0
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	461a      	mov	r2, r3
 8007f90:	79fb      	ldrb	r3, [r7, #7]
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d0b4      	beq.n	8007f00 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3710      	adds	r7, #16
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007fac:	e033      	b.n	8008016 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	68b9      	ldr	r1, [r7, #8]
 8007fb2:	68f8      	ldr	r0, [r7, #12]
 8007fb4:	f000 f90a 	bl	80081cc <I2C_IsErrorOccurred>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d001      	beq.n	8007fc2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e031      	b.n	8008026 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc8:	d025      	beq.n	8008016 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007fca:	f7fc feb9 	bl	8004d40 <HAL_GetTick>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	1ad3      	subs	r3, r2, r3
 8007fd4:	68ba      	ldr	r2, [r7, #8]
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d302      	bcc.n	8007fe0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d11a      	bne.n	8008016 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	699b      	ldr	r3, [r3, #24]
 8007fe6:	f003 0302 	and.w	r3, r3, #2
 8007fea:	2b02      	cmp	r3, #2
 8007fec:	d013      	beq.n	8008016 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ff2:	f043 0220 	orr.w	r2, r3, #32
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2220      	movs	r2, #32
 8007ffe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2200      	movs	r2, #0
 8008006:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008012:	2301      	movs	r3, #1
 8008014:	e007      	b.n	8008026 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	699b      	ldr	r3, [r3, #24]
 800801c:	f003 0302 	and.w	r3, r3, #2
 8008020:	2b02      	cmp	r3, #2
 8008022:	d1c4      	bne.n	8007fae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008024:	2300      	movs	r3, #0
}
 8008026:	4618      	mov	r0, r3
 8008028:	3710      	adds	r7, #16
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}

0800802e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800802e:	b580      	push	{r7, lr}
 8008030:	b084      	sub	sp, #16
 8008032:	af00      	add	r7, sp, #0
 8008034:	60f8      	str	r0, [r7, #12]
 8008036:	60b9      	str	r1, [r7, #8]
 8008038:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800803a:	e02f      	b.n	800809c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	68b9      	ldr	r1, [r7, #8]
 8008040:	68f8      	ldr	r0, [r7, #12]
 8008042:	f000 f8c3 	bl	80081cc <I2C_IsErrorOccurred>
 8008046:	4603      	mov	r3, r0
 8008048:	2b00      	cmp	r3, #0
 800804a:	d001      	beq.n	8008050 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	e02d      	b.n	80080ac <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008050:	f7fc fe76 	bl	8004d40 <HAL_GetTick>
 8008054:	4602      	mov	r2, r0
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	1ad3      	subs	r3, r2, r3
 800805a:	68ba      	ldr	r2, [r7, #8]
 800805c:	429a      	cmp	r2, r3
 800805e:	d302      	bcc.n	8008066 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d11a      	bne.n	800809c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	699b      	ldr	r3, [r3, #24]
 800806c:	f003 0320 	and.w	r3, r3, #32
 8008070:	2b20      	cmp	r3, #32
 8008072:	d013      	beq.n	800809c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008078:	f043 0220 	orr.w	r2, r3, #32
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2220      	movs	r2, #32
 8008084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2200      	movs	r2, #0
 800808c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2200      	movs	r2, #0
 8008094:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008098:	2301      	movs	r3, #1
 800809a:	e007      	b.n	80080ac <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	699b      	ldr	r3, [r3, #24]
 80080a2:	f003 0320 	and.w	r3, r3, #32
 80080a6:	2b20      	cmp	r3, #32
 80080a8:	d1c8      	bne.n	800803c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3710      	adds	r7, #16
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b086      	sub	sp, #24
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	60b9      	str	r1, [r7, #8]
 80080be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080c0:	2300      	movs	r3, #0
 80080c2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80080c4:	e071      	b.n	80081aa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	68b9      	ldr	r1, [r7, #8]
 80080ca:	68f8      	ldr	r0, [r7, #12]
 80080cc:	f000 f87e 	bl	80081cc <I2C_IsErrorOccurred>
 80080d0:	4603      	mov	r3, r0
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d001      	beq.n	80080da <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80080d6:	2301      	movs	r3, #1
 80080d8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	699b      	ldr	r3, [r3, #24]
 80080e0:	f003 0320 	and.w	r3, r3, #32
 80080e4:	2b20      	cmp	r3, #32
 80080e6:	d13b      	bne.n	8008160 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80080e8:	7dfb      	ldrb	r3, [r7, #23]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d138      	bne.n	8008160 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	699b      	ldr	r3, [r3, #24]
 80080f4:	f003 0304 	and.w	r3, r3, #4
 80080f8:	2b04      	cmp	r3, #4
 80080fa:	d105      	bne.n	8008108 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008100:	2b00      	cmp	r3, #0
 8008102:	d001      	beq.n	8008108 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8008104:	2300      	movs	r3, #0
 8008106:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	699b      	ldr	r3, [r3, #24]
 800810e:	f003 0310 	and.w	r3, r3, #16
 8008112:	2b10      	cmp	r3, #16
 8008114:	d121      	bne.n	800815a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	2210      	movs	r2, #16
 800811c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	2204      	movs	r2, #4
 8008122:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2220      	movs	r2, #32
 800812a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	6859      	ldr	r1, [r3, #4]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	4b24      	ldr	r3, [pc, #144]	@ (80081c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8008138:	400b      	ands	r3, r1
 800813a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2220      	movs	r2, #32
 8008140:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2200      	movs	r2, #0
 8008148:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2200      	movs	r2, #0
 8008150:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	75fb      	strb	r3, [r7, #23]
 8008158:	e002      	b.n	8008160 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2200      	movs	r2, #0
 800815e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8008160:	f7fc fdee 	bl	8004d40 <HAL_GetTick>
 8008164:	4602      	mov	r2, r0
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	1ad3      	subs	r3, r2, r3
 800816a:	68ba      	ldr	r2, [r7, #8]
 800816c:	429a      	cmp	r2, r3
 800816e:	d302      	bcc.n	8008176 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d119      	bne.n	80081aa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8008176:	7dfb      	ldrb	r3, [r7, #23]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d116      	bne.n	80081aa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	699b      	ldr	r3, [r3, #24]
 8008182:	f003 0304 	and.w	r3, r3, #4
 8008186:	2b04      	cmp	r3, #4
 8008188:	d00f      	beq.n	80081aa <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800818e:	f043 0220 	orr.w	r2, r3, #32
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2220      	movs	r2, #32
 800819a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80081a6:	2301      	movs	r3, #1
 80081a8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	699b      	ldr	r3, [r3, #24]
 80081b0:	f003 0304 	and.w	r3, r3, #4
 80081b4:	2b04      	cmp	r3, #4
 80081b6:	d002      	beq.n	80081be <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80081b8:	7dfb      	ldrb	r3, [r7, #23]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d083      	beq.n	80080c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80081be:	7dfb      	ldrb	r3, [r7, #23]
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3718      	adds	r7, #24
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	fe00e800 	.word	0xfe00e800

080081cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b08a      	sub	sp, #40	@ 0x28
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80081d8:	2300      	movs	r3, #0
 80081da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	699b      	ldr	r3, [r3, #24]
 80081e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80081e6:	2300      	movs	r3, #0
 80081e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80081ee:	69bb      	ldr	r3, [r7, #24]
 80081f0:	f003 0310 	and.w	r3, r3, #16
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d068      	beq.n	80082ca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2210      	movs	r2, #16
 80081fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008200:	e049      	b.n	8008296 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008208:	d045      	beq.n	8008296 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800820a:	f7fc fd99 	bl	8004d40 <HAL_GetTick>
 800820e:	4602      	mov	r2, r0
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	1ad3      	subs	r3, r2, r3
 8008214:	68ba      	ldr	r2, [r7, #8]
 8008216:	429a      	cmp	r2, r3
 8008218:	d302      	bcc.n	8008220 <I2C_IsErrorOccurred+0x54>
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d13a      	bne.n	8008296 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800822a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008232:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	699b      	ldr	r3, [r3, #24]
 800823a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800823e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008242:	d121      	bne.n	8008288 <I2C_IsErrorOccurred+0xbc>
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800824a:	d01d      	beq.n	8008288 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800824c:	7cfb      	ldrb	r3, [r7, #19]
 800824e:	2b20      	cmp	r3, #32
 8008250:	d01a      	beq.n	8008288 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	685a      	ldr	r2, [r3, #4]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008260:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008262:	f7fc fd6d 	bl	8004d40 <HAL_GetTick>
 8008266:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008268:	e00e      	b.n	8008288 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800826a:	f7fc fd69 	bl	8004d40 <HAL_GetTick>
 800826e:	4602      	mov	r2, r0
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	1ad3      	subs	r3, r2, r3
 8008274:	2b19      	cmp	r3, #25
 8008276:	d907      	bls.n	8008288 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008278:	6a3b      	ldr	r3, [r7, #32]
 800827a:	f043 0320 	orr.w	r3, r3, #32
 800827e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8008286:	e006      	b.n	8008296 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	699b      	ldr	r3, [r3, #24]
 800828e:	f003 0320 	and.w	r3, r3, #32
 8008292:	2b20      	cmp	r3, #32
 8008294:	d1e9      	bne.n	800826a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	699b      	ldr	r3, [r3, #24]
 800829c:	f003 0320 	and.w	r3, r3, #32
 80082a0:	2b20      	cmp	r3, #32
 80082a2:	d003      	beq.n	80082ac <I2C_IsErrorOccurred+0xe0>
 80082a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d0aa      	beq.n	8008202 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80082ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d103      	bne.n	80082bc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2220      	movs	r2, #32
 80082ba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80082bc:	6a3b      	ldr	r3, [r7, #32]
 80082be:	f043 0304 	orr.w	r3, r3, #4
 80082c2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	699b      	ldr	r3, [r3, #24]
 80082d0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80082d2:	69bb      	ldr	r3, [r7, #24]
 80082d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d00b      	beq.n	80082f4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80082dc:	6a3b      	ldr	r3, [r7, #32]
 80082de:	f043 0301 	orr.w	r3, r3, #1
 80082e2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80082ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80082ee:	2301      	movs	r3, #1
 80082f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00b      	beq.n	8008316 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80082fe:	6a3b      	ldr	r3, [r7, #32]
 8008300:	f043 0308 	orr.w	r3, r3, #8
 8008304:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800830e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008316:	69bb      	ldr	r3, [r7, #24]
 8008318:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00b      	beq.n	8008338 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008320:	6a3b      	ldr	r3, [r7, #32]
 8008322:	f043 0302 	orr.w	r3, r3, #2
 8008326:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008330:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008338:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800833c:	2b00      	cmp	r3, #0
 800833e:	d01c      	beq.n	800837a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008340:	68f8      	ldr	r0, [r7, #12]
 8008342:	f7ff fd92 	bl	8007e6a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	6859      	ldr	r1, [r3, #4]
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	4b0d      	ldr	r3, [pc, #52]	@ (8008388 <I2C_IsErrorOccurred+0x1bc>)
 8008352:	400b      	ands	r3, r1
 8008354:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800835a:	6a3b      	ldr	r3, [r7, #32]
 800835c:	431a      	orrs	r2, r3
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2220      	movs	r2, #32
 8008366:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2200      	movs	r2, #0
 8008376:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800837a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800837e:	4618      	mov	r0, r3
 8008380:	3728      	adds	r7, #40	@ 0x28
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	fe00e800 	.word	0xfe00e800

0800838c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800838c:	b480      	push	{r7}
 800838e:	b087      	sub	sp, #28
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	607b      	str	r3, [r7, #4]
 8008396:	460b      	mov	r3, r1
 8008398:	817b      	strh	r3, [r7, #10]
 800839a:	4613      	mov	r3, r2
 800839c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800839e:	897b      	ldrh	r3, [r7, #10]
 80083a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80083a4:	7a7b      	ldrb	r3, [r7, #9]
 80083a6:	041b      	lsls	r3, r3, #16
 80083a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80083ac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80083b2:	6a3b      	ldr	r3, [r7, #32]
 80083b4:	4313      	orrs	r3, r2
 80083b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80083ba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	685a      	ldr	r2, [r3, #4]
 80083c2:	6a3b      	ldr	r3, [r7, #32]
 80083c4:	0d5b      	lsrs	r3, r3, #21
 80083c6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80083ca:	4b08      	ldr	r3, [pc, #32]	@ (80083ec <I2C_TransferConfig+0x60>)
 80083cc:	430b      	orrs	r3, r1
 80083ce:	43db      	mvns	r3, r3
 80083d0:	ea02 0103 	and.w	r1, r2, r3
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	697a      	ldr	r2, [r7, #20]
 80083da:	430a      	orrs	r2, r1
 80083dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80083de:	bf00      	nop
 80083e0:	371c      	adds	r7, #28
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop
 80083ec:	03ff63ff 	.word	0x03ff63ff

080083f0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b085      	sub	sp, #20
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	460b      	mov	r3, r1
 80083fa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80083fc:	2300      	movs	r3, #0
 80083fe:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008400:	887b      	ldrh	r3, [r7, #2]
 8008402:	f003 0301 	and.w	r3, r3, #1
 8008406:	2b00      	cmp	r3, #0
 8008408:	d00f      	beq.n	800842a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8008410:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008418:	b2db      	uxtb	r3, r3
 800841a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800841e:	2b28      	cmp	r3, #40	@ 0x28
 8008420:	d003      	beq.n	800842a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008428:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800842a:	887b      	ldrh	r3, [r7, #2]
 800842c:	f003 0302 	and.w	r3, r3, #2
 8008430:	2b00      	cmp	r3, #0
 8008432:	d00f      	beq.n	8008454 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800843a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008442:	b2db      	uxtb	r3, r3
 8008444:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008448:	2b28      	cmp	r3, #40	@ 0x28
 800844a:	d003      	beq.n	8008454 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008452:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008454:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008458:	2b00      	cmp	r3, #0
 800845a:	da03      	bge.n	8008464 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008462:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008464:	887b      	ldrh	r3, [r7, #2]
 8008466:	2b10      	cmp	r3, #16
 8008468:	d103      	bne.n	8008472 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008470:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008472:	887b      	ldrh	r3, [r7, #2]
 8008474:	2b20      	cmp	r3, #32
 8008476:	d103      	bne.n	8008480 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f043 0320 	orr.w	r3, r3, #32
 800847e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008480:	887b      	ldrh	r3, [r7, #2]
 8008482:	2b40      	cmp	r3, #64	@ 0x40
 8008484:	d103      	bne.n	800848e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800848c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	6819      	ldr	r1, [r3, #0]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	43da      	mvns	r2, r3
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	400a      	ands	r2, r1
 800849e:	601a      	str	r2, [r3, #0]
}
 80084a0:	bf00      	nop
 80084a2:	3714      	adds	r7, #20
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	2b20      	cmp	r3, #32
 80084c0:	d138      	bne.n	8008534 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d101      	bne.n	80084d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80084cc:	2302      	movs	r3, #2
 80084ce:	e032      	b.n	8008536 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2224      	movs	r2, #36	@ 0x24
 80084dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f022 0201 	bic.w	r2, r2, #1
 80084ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80084fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	6819      	ldr	r1, [r3, #0]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	683a      	ldr	r2, [r7, #0]
 800850c:	430a      	orrs	r2, r1
 800850e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f042 0201 	orr.w	r2, r2, #1
 800851e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2220      	movs	r2, #32
 8008524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008530:	2300      	movs	r3, #0
 8008532:	e000      	b.n	8008536 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008534:	2302      	movs	r3, #2
  }
}
 8008536:	4618      	mov	r0, r3
 8008538:	370c      	adds	r7, #12
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr

08008542 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008542:	b480      	push	{r7}
 8008544:	b085      	sub	sp, #20
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
 800854a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008552:	b2db      	uxtb	r3, r3
 8008554:	2b20      	cmp	r3, #32
 8008556:	d139      	bne.n	80085cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800855e:	2b01      	cmp	r3, #1
 8008560:	d101      	bne.n	8008566 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008562:	2302      	movs	r3, #2
 8008564:	e033      	b.n	80085ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2201      	movs	r2, #1
 800856a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2224      	movs	r2, #36	@ 0x24
 8008572:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f022 0201 	bic.w	r2, r2, #1
 8008584:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008594:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	021b      	lsls	r3, r3, #8
 800859a:	68fa      	ldr	r2, [r7, #12]
 800859c:	4313      	orrs	r3, r2
 800859e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	68fa      	ldr	r2, [r7, #12]
 80085a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f042 0201 	orr.w	r2, r2, #1
 80085b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2220      	movs	r2, #32
 80085bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80085c8:	2300      	movs	r3, #0
 80085ca:	e000      	b.n	80085ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80085cc:	2302      	movs	r3, #2
  }
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3714      	adds	r7, #20
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr

080085da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80085da:	b580      	push	{r7, lr}
 80085dc:	b084      	sub	sp, #16
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d101      	bne.n	80085ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80085e8:	2301      	movs	r3, #1
 80085ea:	e0c0      	b.n	800876e <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d106      	bne.n	8008606 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f009 f9a9 	bl	8011958 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2203      	movs	r2, #3
 800860a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4618      	mov	r0, r3
 8008614:	f004 fc7e 	bl	800cf14 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008618:	2300      	movs	r3, #0
 800861a:	73fb      	strb	r3, [r7, #15]
 800861c:	e03e      	b.n	800869c <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800861e:	7bfa      	ldrb	r2, [r7, #15]
 8008620:	6879      	ldr	r1, [r7, #4]
 8008622:	4613      	mov	r3, r2
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	4413      	add	r3, r2
 8008628:	00db      	lsls	r3, r3, #3
 800862a:	440b      	add	r3, r1
 800862c:	3311      	adds	r3, #17
 800862e:	2201      	movs	r2, #1
 8008630:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008632:	7bfa      	ldrb	r2, [r7, #15]
 8008634:	6879      	ldr	r1, [r7, #4]
 8008636:	4613      	mov	r3, r2
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	4413      	add	r3, r2
 800863c:	00db      	lsls	r3, r3, #3
 800863e:	440b      	add	r3, r1
 8008640:	3310      	adds	r3, #16
 8008642:	7bfa      	ldrb	r2, [r7, #15]
 8008644:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008646:	7bfa      	ldrb	r2, [r7, #15]
 8008648:	6879      	ldr	r1, [r7, #4]
 800864a:	4613      	mov	r3, r2
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	4413      	add	r3, r2
 8008650:	00db      	lsls	r3, r3, #3
 8008652:	440b      	add	r3, r1
 8008654:	3313      	adds	r3, #19
 8008656:	2200      	movs	r2, #0
 8008658:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800865a:	7bfa      	ldrb	r2, [r7, #15]
 800865c:	6879      	ldr	r1, [r7, #4]
 800865e:	4613      	mov	r3, r2
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	4413      	add	r3, r2
 8008664:	00db      	lsls	r3, r3, #3
 8008666:	440b      	add	r3, r1
 8008668:	3320      	adds	r3, #32
 800866a:	2200      	movs	r2, #0
 800866c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800866e:	7bfa      	ldrb	r2, [r7, #15]
 8008670:	6879      	ldr	r1, [r7, #4]
 8008672:	4613      	mov	r3, r2
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	4413      	add	r3, r2
 8008678:	00db      	lsls	r3, r3, #3
 800867a:	440b      	add	r3, r1
 800867c:	3324      	adds	r3, #36	@ 0x24
 800867e:	2200      	movs	r2, #0
 8008680:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008682:	7bfb      	ldrb	r3, [r7, #15]
 8008684:	6879      	ldr	r1, [r7, #4]
 8008686:	1c5a      	adds	r2, r3, #1
 8008688:	4613      	mov	r3, r2
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	4413      	add	r3, r2
 800868e:	00db      	lsls	r3, r3, #3
 8008690:	440b      	add	r3, r1
 8008692:	2200      	movs	r2, #0
 8008694:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008696:	7bfb      	ldrb	r3, [r7, #15]
 8008698:	3301      	adds	r3, #1
 800869a:	73fb      	strb	r3, [r7, #15]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	791b      	ldrb	r3, [r3, #4]
 80086a0:	7bfa      	ldrb	r2, [r7, #15]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d3bb      	bcc.n	800861e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80086a6:	2300      	movs	r3, #0
 80086a8:	73fb      	strb	r3, [r7, #15]
 80086aa:	e044      	b.n	8008736 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80086ac:	7bfa      	ldrb	r2, [r7, #15]
 80086ae:	6879      	ldr	r1, [r7, #4]
 80086b0:	4613      	mov	r3, r2
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	4413      	add	r3, r2
 80086b6:	00db      	lsls	r3, r3, #3
 80086b8:	440b      	add	r3, r1
 80086ba:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80086be:	2200      	movs	r2, #0
 80086c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80086c2:	7bfa      	ldrb	r2, [r7, #15]
 80086c4:	6879      	ldr	r1, [r7, #4]
 80086c6:	4613      	mov	r3, r2
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	4413      	add	r3, r2
 80086cc:	00db      	lsls	r3, r3, #3
 80086ce:	440b      	add	r3, r1
 80086d0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80086d4:	7bfa      	ldrb	r2, [r7, #15]
 80086d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80086d8:	7bfa      	ldrb	r2, [r7, #15]
 80086da:	6879      	ldr	r1, [r7, #4]
 80086dc:	4613      	mov	r3, r2
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	4413      	add	r3, r2
 80086e2:	00db      	lsls	r3, r3, #3
 80086e4:	440b      	add	r3, r1
 80086e6:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80086ea:	2200      	movs	r2, #0
 80086ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80086ee:	7bfa      	ldrb	r2, [r7, #15]
 80086f0:	6879      	ldr	r1, [r7, #4]
 80086f2:	4613      	mov	r3, r2
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	4413      	add	r3, r2
 80086f8:	00db      	lsls	r3, r3, #3
 80086fa:	440b      	add	r3, r1
 80086fc:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8008700:	2200      	movs	r2, #0
 8008702:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008704:	7bfa      	ldrb	r2, [r7, #15]
 8008706:	6879      	ldr	r1, [r7, #4]
 8008708:	4613      	mov	r3, r2
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	4413      	add	r3, r2
 800870e:	00db      	lsls	r3, r3, #3
 8008710:	440b      	add	r3, r1
 8008712:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008716:	2200      	movs	r2, #0
 8008718:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800871a:	7bfa      	ldrb	r2, [r7, #15]
 800871c:	6879      	ldr	r1, [r7, #4]
 800871e:	4613      	mov	r3, r2
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	4413      	add	r3, r2
 8008724:	00db      	lsls	r3, r3, #3
 8008726:	440b      	add	r3, r1
 8008728:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800872c:	2200      	movs	r2, #0
 800872e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008730:	7bfb      	ldrb	r3, [r7, #15]
 8008732:	3301      	adds	r3, #1
 8008734:	73fb      	strb	r3, [r7, #15]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	791b      	ldrb	r3, [r3, #4]
 800873a:	7bfa      	ldrb	r2, [r7, #15]
 800873c:	429a      	cmp	r2, r3
 800873e:	d3b5      	bcc.n	80086ac <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6818      	ldr	r0, [r3, #0]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	3304      	adds	r3, #4
 8008748:	e893 0006 	ldmia.w	r3, {r1, r2}
 800874c:	f004 fbfd 	bl	800cf4a <USB_DevInit>

  hpcd->USB_Address = 0U;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2201      	movs	r2, #1
 800875a:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	7a9b      	ldrb	r3, [r3, #10]
 8008762:	2b01      	cmp	r3, #1
 8008764:	d102      	bne.n	800876c <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f001 fc40 	bl	8009fec <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b082      	sub	sp, #8
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8008784:	2b01      	cmp	r3, #1
 8008786:	d101      	bne.n	800878c <HAL_PCD_Start+0x16>
 8008788:	2302      	movs	r3, #2
 800878a:	e012      	b.n	80087b2 <HAL_PCD_Start+0x3c>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4618      	mov	r0, r3
 800879a:	f004 fba4 	bl	800cee6 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4618      	mov	r0, r3
 80087a4:	f006 fe65 	bl	800f472 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80087b0:	2300      	movs	r3, #0
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3708      	adds	r7, #8
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}

080087ba <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80087ba:	b580      	push	{r7, lr}
 80087bc:	b084      	sub	sp, #16
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4618      	mov	r0, r3
 80087c8:	f006 fe6a 	bl	800f4a0 <USB_ReadInterrupts>
 80087cc:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d003      	beq.n	80087e0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 fb04 	bl	8008de6 <PCD_EP_ISR_Handler>

    return;
 80087de:	e110      	b.n	8008a02 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d013      	beq.n	8008812 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80087f2:	b29a      	uxth	r2, r3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80087fc:	b292      	uxth	r2, r2
 80087fe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f009 f93d 	bl	8011a82 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8008808:	2100      	movs	r1, #0
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 f8fc 	bl	8008a08 <HAL_PCD_SetAddress>

    return;
 8008810:	e0f7      	b.n	8008a02 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008818:	2b00      	cmp	r3, #0
 800881a:	d00c      	beq.n	8008836 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008824:	b29a      	uxth	r2, r3
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800882e:	b292      	uxth	r2, r2
 8008830:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8008834:	e0e5      	b.n	8008a02 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800883c:	2b00      	cmp	r3, #0
 800883e:	d00c      	beq.n	800885a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008848:	b29a      	uxth	r2, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008852:	b292      	uxth	r2, r2
 8008854:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8008858:	e0d3      	b.n	8008a02 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008860:	2b00      	cmp	r3, #0
 8008862:	d034      	beq.n	80088ce <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800886c:	b29a      	uxth	r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f022 0204 	bic.w	r2, r2, #4
 8008876:	b292      	uxth	r2, r2
 8008878:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008884:	b29a      	uxth	r2, r3
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f022 0208 	bic.w	r2, r2, #8
 800888e:	b292      	uxth	r2, r2
 8008890:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800889a:	2b01      	cmp	r3, #1
 800889c:	d107      	bne.n	80088ae <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80088a6:	2100      	movs	r1, #0
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f009 fadf 	bl	8011e6c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f009 f920 	bl	8011af4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80088bc:	b29a      	uxth	r2, r3
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80088c6:	b292      	uxth	r2, r2
 80088c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80088cc:	e099      	b.n	8008a02 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d027      	beq.n	8008928 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80088e0:	b29a      	uxth	r2, r3
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f042 0208 	orr.w	r2, r2, #8
 80088ea:	b292      	uxth	r2, r2
 80088ec:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008902:	b292      	uxth	r2, r2
 8008904:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008910:	b29a      	uxth	r2, r3
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f042 0204 	orr.w	r2, r2, #4
 800891a:	b292      	uxth	r2, r2
 800891c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f009 f8cd 	bl	8011ac0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8008926:	e06c      	b.n	8008a02 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800892e:	2b00      	cmp	r3, #0
 8008930:	d040      	beq.n	80089b4 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800893a:	b29a      	uxth	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008944:	b292      	uxth	r2, r2
 8008946:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8008950:	2b00      	cmp	r3, #0
 8008952:	d12b      	bne.n	80089ac <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800895c:	b29a      	uxth	r2, r3
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f042 0204 	orr.w	r2, r2, #4
 8008966:	b292      	uxth	r2, r2
 8008968:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008974:	b29a      	uxth	r2, r3
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f042 0208 	orr.w	r2, r2, #8
 800897e:	b292      	uxth	r2, r2
 8008980:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2201      	movs	r2, #1
 8008988:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008994:	b29b      	uxth	r3, r3
 8008996:	089b      	lsrs	r3, r3, #2
 8008998:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80089a2:	2101      	movs	r1, #1
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f009 fa61 	bl	8011e6c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80089aa:	e02a      	b.n	8008a02 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f009 f887 	bl	8011ac0 <HAL_PCD_SuspendCallback>
    return;
 80089b2:	e026      	b.n	8008a02 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00f      	beq.n	80089de <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80089c6:	b29a      	uxth	r2, r3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80089d0:	b292      	uxth	r2, r2
 80089d2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f009 f845 	bl	8011a66 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80089dc:	e011      	b.n	8008a02 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d00c      	beq.n	8008a02 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80089f0:	b29a      	uxth	r2, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80089fa:	b292      	uxth	r2, r2
 80089fc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8008a00:	bf00      	nop
  }
}
 8008a02:	3710      	adds	r7, #16
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b082      	sub	sp, #8
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	460b      	mov	r3, r1
 8008a12:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8008a1a:	2b01      	cmp	r3, #1
 8008a1c:	d101      	bne.n	8008a22 <HAL_PCD_SetAddress+0x1a>
 8008a1e:	2302      	movs	r3, #2
 8008a20:	e012      	b.n	8008a48 <HAL_PCD_SetAddress+0x40>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2201      	movs	r2, #1
 8008a26:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	78fa      	ldrb	r2, [r7, #3]
 8008a2e:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	78fa      	ldrb	r2, [r7, #3]
 8008a36:	4611      	mov	r1, r2
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f006 fd06 	bl	800f44a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	2200      	movs	r2, #0
 8008a42:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8008a46:	2300      	movs	r3, #0
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3708      	adds	r7, #8
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	4608      	mov	r0, r1
 8008a5a:	4611      	mov	r1, r2
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	4603      	mov	r3, r0
 8008a60:	70fb      	strb	r3, [r7, #3]
 8008a62:	460b      	mov	r3, r1
 8008a64:	803b      	strh	r3, [r7, #0]
 8008a66:	4613      	mov	r3, r2
 8008a68:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008a6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	da0e      	bge.n	8008a94 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008a76:	78fb      	ldrb	r3, [r7, #3]
 8008a78:	f003 0207 	and.w	r2, r3, #7
 8008a7c:	4613      	mov	r3, r2
 8008a7e:	009b      	lsls	r3, r3, #2
 8008a80:	4413      	add	r3, r2
 8008a82:	00db      	lsls	r3, r3, #3
 8008a84:	3310      	adds	r3, #16
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	4413      	add	r3, r2
 8008a8a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2201      	movs	r2, #1
 8008a90:	705a      	strb	r2, [r3, #1]
 8008a92:	e00e      	b.n	8008ab2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008a94:	78fb      	ldrb	r3, [r7, #3]
 8008a96:	f003 0207 	and.w	r2, r3, #7
 8008a9a:	4613      	mov	r3, r2
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	4413      	add	r3, r2
 8008aa0:	00db      	lsls	r3, r3, #3
 8008aa2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008ab2:	78fb      	ldrb	r3, [r7, #3]
 8008ab4:	f003 0307 	and.w	r3, r3, #7
 8008ab8:	b2da      	uxtb	r2, r3
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008abe:	883a      	ldrh	r2, [r7, #0]
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	78ba      	ldrb	r2, [r7, #2]
 8008ac8:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008aca:	78bb      	ldrb	r3, [r7, #2]
 8008acc:	2b02      	cmp	r3, #2
 8008ace:	d102      	bne.n	8008ad6 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d101      	bne.n	8008ae4 <HAL_PCD_EP_Open+0x94>
 8008ae0:	2302      	movs	r3, #2
 8008ae2:	e00e      	b.n	8008b02 <HAL_PCD_EP_Open+0xb2>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	68f9      	ldr	r1, [r7, #12]
 8008af2:	4618      	mov	r0, r3
 8008af4:	f004 fa48 	bl	800cf88 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8008b00:	7afb      	ldrb	r3, [r7, #11]
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3710      	adds	r7, #16
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}

08008b0a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008b0a:	b580      	push	{r7, lr}
 8008b0c:	b084      	sub	sp, #16
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
 8008b12:	460b      	mov	r3, r1
 8008b14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008b16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	da0e      	bge.n	8008b3c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b1e:	78fb      	ldrb	r3, [r7, #3]
 8008b20:	f003 0207 	and.w	r2, r3, #7
 8008b24:	4613      	mov	r3, r2
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	4413      	add	r3, r2
 8008b2a:	00db      	lsls	r3, r3, #3
 8008b2c:	3310      	adds	r3, #16
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	4413      	add	r3, r2
 8008b32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2201      	movs	r2, #1
 8008b38:	705a      	strb	r2, [r3, #1]
 8008b3a:	e00e      	b.n	8008b5a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008b3c:	78fb      	ldrb	r3, [r7, #3]
 8008b3e:	f003 0207 	and.w	r2, r3, #7
 8008b42:	4613      	mov	r3, r2
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	4413      	add	r3, r2
 8008b48:	00db      	lsls	r3, r3, #3
 8008b4a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008b4e:	687a      	ldr	r2, [r7, #4]
 8008b50:	4413      	add	r3, r2
 8008b52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2200      	movs	r2, #0
 8008b58:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008b5a:	78fb      	ldrb	r3, [r7, #3]
 8008b5c:	f003 0307 	and.w	r3, r3, #7
 8008b60:	b2da      	uxtb	r2, r3
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d101      	bne.n	8008b74 <HAL_PCD_EP_Close+0x6a>
 8008b70:	2302      	movs	r3, #2
 8008b72:	e00e      	b.n	8008b92 <HAL_PCD_EP_Close+0x88>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2201      	movs	r2, #1
 8008b78:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	68f9      	ldr	r1, [r7, #12]
 8008b82:	4618      	mov	r0, r3
 8008b84:	f004 fdc4 	bl	800d710 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8008b90:	2300      	movs	r3, #0
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3710      	adds	r7, #16
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b086      	sub	sp, #24
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	60f8      	str	r0, [r7, #12]
 8008ba2:	607a      	str	r2, [r7, #4]
 8008ba4:	603b      	str	r3, [r7, #0]
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008baa:	7afb      	ldrb	r3, [r7, #11]
 8008bac:	f003 0207 	and.w	r2, r3, #7
 8008bb0:	4613      	mov	r3, r2
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	4413      	add	r3, r2
 8008bb6:	00db      	lsls	r3, r3, #3
 8008bb8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008bbc:	68fa      	ldr	r2, [r7, #12]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	683a      	ldr	r2, [r7, #0]
 8008bcc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008bda:	7afb      	ldrb	r3, [r7, #11]
 8008bdc:	f003 0307 	and.w	r3, r3, #7
 8008be0:	b2da      	uxtb	r2, r3
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	6979      	ldr	r1, [r7, #20]
 8008bec:	4618      	mov	r0, r3
 8008bee:	f004 ff7c 	bl	800daea <USB_EPStartXfer>

  return HAL_OK;
 8008bf2:	2300      	movs	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3718      	adds	r7, #24
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	460b      	mov	r3, r1
 8008c06:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008c08:	78fb      	ldrb	r3, [r7, #3]
 8008c0a:	f003 0207 	and.w	r2, r3, #7
 8008c0e:	6879      	ldr	r1, [r7, #4]
 8008c10:	4613      	mov	r3, r2
 8008c12:	009b      	lsls	r3, r3, #2
 8008c14:	4413      	add	r3, r2
 8008c16:	00db      	lsls	r3, r3, #3
 8008c18:	440b      	add	r3, r1
 8008c1a:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8008c1e:	681b      	ldr	r3, [r3, #0]
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b086      	sub	sp, #24
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	60f8      	str	r0, [r7, #12]
 8008c34:	607a      	str	r2, [r7, #4]
 8008c36:	603b      	str	r3, [r7, #0]
 8008c38:	460b      	mov	r3, r1
 8008c3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c3c:	7afb      	ldrb	r3, [r7, #11]
 8008c3e:	f003 0207 	and.w	r2, r3, #7
 8008c42:	4613      	mov	r3, r2
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	4413      	add	r3, r2
 8008c48:	00db      	lsls	r3, r3, #3
 8008c4a:	3310      	adds	r3, #16
 8008c4c:	68fa      	ldr	r2, [r7, #12]
 8008c4e:	4413      	add	r3, r2
 8008c50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	683a      	ldr	r2, [r7, #0]
 8008c5c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	2201      	movs	r2, #1
 8008c62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	683a      	ldr	r2, [r7, #0]
 8008c6a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	2201      	movs	r2, #1
 8008c76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c78:	7afb      	ldrb	r3, [r7, #11]
 8008c7a:	f003 0307 	and.w	r3, r3, #7
 8008c7e:	b2da      	uxtb	r2, r3
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	6979      	ldr	r1, [r7, #20]
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f004 ff2d 	bl	800daea <USB_EPStartXfer>

  return HAL_OK;
 8008c90:	2300      	movs	r3, #0
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3718      	adds	r7, #24
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b084      	sub	sp, #16
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
 8008ca2:	460b      	mov	r3, r1
 8008ca4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008ca6:	78fb      	ldrb	r3, [r7, #3]
 8008ca8:	f003 0307 	and.w	r3, r3, #7
 8008cac:	687a      	ldr	r2, [r7, #4]
 8008cae:	7912      	ldrb	r2, [r2, #4]
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d901      	bls.n	8008cb8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e03e      	b.n	8008d36 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008cb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	da0e      	bge.n	8008cde <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008cc0:	78fb      	ldrb	r3, [r7, #3]
 8008cc2:	f003 0207 	and.w	r2, r3, #7
 8008cc6:	4613      	mov	r3, r2
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	4413      	add	r3, r2
 8008ccc:	00db      	lsls	r3, r3, #3
 8008cce:	3310      	adds	r3, #16
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2201      	movs	r2, #1
 8008cda:	705a      	strb	r2, [r3, #1]
 8008cdc:	e00c      	b.n	8008cf8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008cde:	78fa      	ldrb	r2, [r7, #3]
 8008ce0:	4613      	mov	r3, r2
 8008ce2:	009b      	lsls	r3, r3, #2
 8008ce4:	4413      	add	r3, r2
 8008ce6:	00db      	lsls	r3, r3, #3
 8008ce8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	4413      	add	r3, r2
 8008cf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008cfe:	78fb      	ldrb	r3, [r7, #3]
 8008d00:	f003 0307 	and.w	r3, r3, #7
 8008d04:	b2da      	uxtb	r2, r3
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d101      	bne.n	8008d18 <HAL_PCD_EP_SetStall+0x7e>
 8008d14:	2302      	movs	r3, #2
 8008d16:	e00e      	b.n	8008d36 <HAL_PCD_EP_SetStall+0x9c>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	68f9      	ldr	r1, [r7, #12]
 8008d26:	4618      	mov	r0, r3
 8008d28:	f006 fa90 	bl	800f24c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}

08008d3e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b084      	sub	sp, #16
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
 8008d46:	460b      	mov	r3, r1
 8008d48:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008d4a:	78fb      	ldrb	r3, [r7, #3]
 8008d4c:	f003 030f 	and.w	r3, r3, #15
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	7912      	ldrb	r2, [r2, #4]
 8008d54:	4293      	cmp	r3, r2
 8008d56:	d901      	bls.n	8008d5c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e040      	b.n	8008dde <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008d5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	da0e      	bge.n	8008d82 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d64:	78fb      	ldrb	r3, [r7, #3]
 8008d66:	f003 0207 	and.w	r2, r3, #7
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	4413      	add	r3, r2
 8008d70:	00db      	lsls	r3, r3, #3
 8008d72:	3310      	adds	r3, #16
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	4413      	add	r3, r2
 8008d78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	705a      	strb	r2, [r3, #1]
 8008d80:	e00e      	b.n	8008da0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008d82:	78fb      	ldrb	r3, [r7, #3]
 8008d84:	f003 0207 	and.w	r2, r3, #7
 8008d88:	4613      	mov	r3, r2
 8008d8a:	009b      	lsls	r3, r3, #2
 8008d8c:	4413      	add	r3, r2
 8008d8e:	00db      	lsls	r3, r3, #3
 8008d90:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008d94:	687a      	ldr	r2, [r7, #4]
 8008d96:	4413      	add	r3, r2
 8008d98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2200      	movs	r2, #0
 8008da4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008da6:	78fb      	ldrb	r3, [r7, #3]
 8008da8:	f003 0307 	and.w	r3, r3, #7
 8008dac:	b2da      	uxtb	r2, r3
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d101      	bne.n	8008dc0 <HAL_PCD_EP_ClrStall+0x82>
 8008dbc:	2302      	movs	r3, #2
 8008dbe:	e00e      	b.n	8008dde <HAL_PCD_EP_ClrStall+0xa0>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	68f9      	ldr	r1, [r7, #12]
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f006 fa8d 	bl	800f2ee <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8008ddc:	2300      	movs	r3, #0
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3710      	adds	r7, #16
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}

08008de6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8008de6:	b580      	push	{r7, lr}
 8008de8:	b096      	sub	sp, #88	@ 0x58
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008dee:	e3ad      	b.n	800954c <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008df8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8008dfc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	f003 030f 	and.w	r3, r3, #15
 8008e06:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8008e0a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	f040 816f 	bne.w	80090f2 <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8008e14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8008e18:	f003 0310 	and.w	r3, r3, #16
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d14c      	bne.n	8008eba <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	881b      	ldrh	r3, [r3, #0]
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8008e2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e30:	81fb      	strh	r3, [r7, #14]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	89fb      	ldrh	r3, [r7, #14]
 8008e38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e40:	b29b      	uxth	r3, r3
 8008e42:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	3310      	adds	r3, #16
 8008e48:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	461a      	mov	r2, r3
 8008e56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	00db      	lsls	r3, r3, #3
 8008e5c:	4413      	add	r3, r2
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	6812      	ldr	r2, [r2, #0]
 8008e62:	4413      	add	r3, r2
 8008e64:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8008e68:	881b      	ldrh	r3, [r3, #0]
 8008e6a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008e6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e70:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8008e72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e74:	695a      	ldr	r2, [r3, #20]
 8008e76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e78:	69db      	ldr	r3, [r3, #28]
 8008e7a:	441a      	add	r2, r3
 8008e7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e7e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8008e80:	2100      	movs	r1, #0
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f008 fdd5 	bl	8011a32 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	7b1b      	ldrb	r3, [r3, #12]
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	f000 835c 	beq.w	800954c <PCD_EP_ISR_Handler+0x766>
 8008e94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e96:	699b      	ldr	r3, [r3, #24]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	f040 8357 	bne.w	800954c <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	7b1b      	ldrb	r3, [r3, #12]
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008ea8:	b2da      	uxtb	r2, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	731a      	strb	r2, [r3, #12]
 8008eb8:	e348      	b.n	800954c <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008ec0:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	881b      	ldrh	r3, [r3, #0]
 8008ec8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8008ecc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8008ed0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d032      	beq.n	8008f3e <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	00db      	lsls	r3, r3, #3
 8008eea:	4413      	add	r3, r2
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	6812      	ldr	r2, [r2, #0]
 8008ef0:	4413      	add	r3, r2
 8008ef2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008ef6:	881b      	ldrh	r3, [r3, #0]
 8008ef8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008efc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008efe:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	6818      	ldr	r0, [r3, #0]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8008f0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f0c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8008f0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f10:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	f006 fb16 	bl	800f544 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	881b      	ldrh	r3, [r3, #0]
 8008f1e:	b29a      	uxth	r2, r3
 8008f20:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8008f24:	4013      	ands	r3, r2
 8008f26:	823b      	strh	r3, [r7, #16]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	8a3a      	ldrh	r2, [r7, #16]
 8008f2e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008f32:	b292      	uxth	r2, r2
 8008f34:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f008 fd4e 	bl	80119d8 <HAL_PCD_SetupStageCallback>
 8008f3c:	e306      	b.n	800954c <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8008f3e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	f280 8302 	bge.w	800954c <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	881b      	ldrh	r3, [r3, #0]
 8008f4e:	b29a      	uxth	r2, r3
 8008f50:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8008f54:	4013      	ands	r3, r2
 8008f56:	83fb      	strh	r3, [r7, #30]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	8bfa      	ldrh	r2, [r7, #30]
 8008f5e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008f62:	b292      	uxth	r2, r2
 8008f64:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008f6e:	b29b      	uxth	r3, r3
 8008f70:	461a      	mov	r2, r3
 8008f72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	00db      	lsls	r3, r3, #3
 8008f78:	4413      	add	r3, r2
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	6812      	ldr	r2, [r2, #0]
 8008f7e:	4413      	add	r3, r2
 8008f80:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8008f84:	881b      	ldrh	r3, [r3, #0]
 8008f86:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008f8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f8c:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8008f8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f90:	69db      	ldr	r3, [r3, #28]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d019      	beq.n	8008fca <PCD_EP_ISR_Handler+0x1e4>
 8008f96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f98:	695b      	ldr	r3, [r3, #20]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d015      	beq.n	8008fca <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6818      	ldr	r0, [r3, #0]
 8008fa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008fa4:	6959      	ldr	r1, [r3, #20]
 8008fa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008fa8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8008faa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008fac:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	f006 fac8 	bl	800f544 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8008fb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008fb6:	695a      	ldr	r2, [r3, #20]
 8008fb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008fba:	69db      	ldr	r3, [r3, #28]
 8008fbc:	441a      	add	r2, r3
 8008fbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008fc0:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8008fc2:	2100      	movs	r1, #0
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f008 fd19 	bl	80119fc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	881b      	ldrh	r3, [r3, #0]
 8008fd0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8008fd4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8008fd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	f040 82b5 	bne.w	800954c <PCD_EP_ISR_Handler+0x766>
 8008fe2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8008fe6:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8008fea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008fee:	f000 82ad 	beq.w	800954c <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	61bb      	str	r3, [r7, #24]
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009000:	b29b      	uxth	r3, r3
 8009002:	461a      	mov	r2, r3
 8009004:	69bb      	ldr	r3, [r7, #24]
 8009006:	4413      	add	r3, r2
 8009008:	61bb      	str	r3, [r7, #24]
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009010:	617b      	str	r3, [r7, #20]
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	881b      	ldrh	r3, [r3, #0]
 8009016:	b29b      	uxth	r3, r3
 8009018:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800901c:	b29a      	uxth	r2, r3
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	801a      	strh	r2, [r3, #0]
 8009022:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009024:	691b      	ldr	r3, [r3, #16]
 8009026:	2b3e      	cmp	r3, #62	@ 0x3e
 8009028:	d91d      	bls.n	8009066 <PCD_EP_ISR_Handler+0x280>
 800902a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800902c:	691b      	ldr	r3, [r3, #16]
 800902e:	095b      	lsrs	r3, r3, #5
 8009030:	647b      	str	r3, [r7, #68]	@ 0x44
 8009032:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	f003 031f 	and.w	r3, r3, #31
 800903a:	2b00      	cmp	r3, #0
 800903c:	d102      	bne.n	8009044 <PCD_EP_ISR_Handler+0x25e>
 800903e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009040:	3b01      	subs	r3, #1
 8009042:	647b      	str	r3, [r7, #68]	@ 0x44
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	881b      	ldrh	r3, [r3, #0]
 8009048:	b29a      	uxth	r2, r3
 800904a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800904c:	b29b      	uxth	r3, r3
 800904e:	029b      	lsls	r3, r3, #10
 8009050:	b29b      	uxth	r3, r3
 8009052:	4313      	orrs	r3, r2
 8009054:	b29b      	uxth	r3, r3
 8009056:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800905a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800905e:	b29a      	uxth	r2, r3
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	801a      	strh	r2, [r3, #0]
 8009064:	e026      	b.n	80090b4 <PCD_EP_ISR_Handler+0x2ce>
 8009066:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009068:	691b      	ldr	r3, [r3, #16]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d10a      	bne.n	8009084 <PCD_EP_ISR_Handler+0x29e>
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	881b      	ldrh	r3, [r3, #0]
 8009072:	b29b      	uxth	r3, r3
 8009074:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009078:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800907c:	b29a      	uxth	r2, r3
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	801a      	strh	r2, [r3, #0]
 8009082:	e017      	b.n	80090b4 <PCD_EP_ISR_Handler+0x2ce>
 8009084:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009086:	691b      	ldr	r3, [r3, #16]
 8009088:	085b      	lsrs	r3, r3, #1
 800908a:	647b      	str	r3, [r7, #68]	@ 0x44
 800908c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800908e:	691b      	ldr	r3, [r3, #16]
 8009090:	f003 0301 	and.w	r3, r3, #1
 8009094:	2b00      	cmp	r3, #0
 8009096:	d002      	beq.n	800909e <PCD_EP_ISR_Handler+0x2b8>
 8009098:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800909a:	3301      	adds	r3, #1
 800909c:	647b      	str	r3, [r7, #68]	@ 0x44
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	881b      	ldrh	r3, [r3, #0]
 80090a2:	b29a      	uxth	r2, r3
 80090a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	029b      	lsls	r3, r3, #10
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	4313      	orrs	r3, r2
 80090ae:	b29a      	uxth	r2, r3
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	881b      	ldrh	r3, [r3, #0]
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80090c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090c4:	827b      	strh	r3, [r7, #18]
 80090c6:	8a7b      	ldrh	r3, [r7, #18]
 80090c8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80090cc:	827b      	strh	r3, [r7, #18]
 80090ce:	8a7b      	ldrh	r3, [r7, #18]
 80090d0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80090d4:	827b      	strh	r3, [r7, #18]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681a      	ldr	r2, [r3, #0]
 80090da:	8a7b      	ldrh	r3, [r7, #18]
 80090dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090ec:	b29b      	uxth	r3, r3
 80090ee:	8013      	strh	r3, [r2, #0]
 80090f0:	e22c      	b.n	800954c <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	461a      	mov	r2, r3
 80090f8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	4413      	add	r3, r2
 8009100:	881b      	ldrh	r3, [r3, #0]
 8009102:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009106:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800910a:	2b00      	cmp	r3, #0
 800910c:	f280 80f6 	bge.w	80092fc <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	461a      	mov	r2, r3
 8009116:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800911a:	009b      	lsls	r3, r3, #2
 800911c:	4413      	add	r3, r2
 800911e:	881b      	ldrh	r3, [r3, #0]
 8009120:	b29a      	uxth	r2, r3
 8009122:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8009126:	4013      	ands	r3, r2
 8009128:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	461a      	mov	r2, r3
 8009132:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	4413      	add	r3, r2
 800913a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800913e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009142:	b292      	uxth	r2, r2
 8009144:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8009146:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800914a:	4613      	mov	r3, r2
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	4413      	add	r3, r2
 8009150:	00db      	lsls	r3, r3, #3
 8009152:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	4413      	add	r3, r2
 800915a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800915c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800915e:	7b1b      	ldrb	r3, [r3, #12]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d123      	bne.n	80091ac <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800916c:	b29b      	uxth	r3, r3
 800916e:	461a      	mov	r2, r3
 8009170:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	00db      	lsls	r3, r3, #3
 8009176:	4413      	add	r3, r2
 8009178:	687a      	ldr	r2, [r7, #4]
 800917a:	6812      	ldr	r2, [r2, #0]
 800917c:	4413      	add	r3, r2
 800917e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009182:	881b      	ldrh	r3, [r3, #0]
 8009184:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009188:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800918c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009190:	2b00      	cmp	r3, #0
 8009192:	f000 808e 	beq.w	80092b2 <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6818      	ldr	r0, [r3, #0]
 800919a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800919c:	6959      	ldr	r1, [r3, #20]
 800919e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091a0:	88da      	ldrh	r2, [r3, #6]
 80091a2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80091a6:	f006 f9cd 	bl	800f544 <USB_ReadPMA>
 80091aa:	e082      	b.n	80092b2 <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80091ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091ae:	78db      	ldrb	r3, [r3, #3]
 80091b0:	2b02      	cmp	r3, #2
 80091b2:	d10a      	bne.n	80091ca <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80091b4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80091b8:	461a      	mov	r2, r3
 80091ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 f9d3 	bl	8009568 <HAL_PCD_EP_DB_Receive>
 80091c2:	4603      	mov	r3, r0
 80091c4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80091c8:	e073      	b.n	80092b2 <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	461a      	mov	r2, r3
 80091d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	4413      	add	r3, r2
 80091d8:	881b      	ldrh	r3, [r3, #0]
 80091da:	b29b      	uxth	r3, r3
 80091dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80091e4:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	461a      	mov	r2, r3
 80091ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091f0:	781b      	ldrb	r3, [r3, #0]
 80091f2:	009b      	lsls	r3, r3, #2
 80091f4:	441a      	add	r2, r3
 80091f6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80091fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009202:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009206:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800920a:	b29b      	uxth	r3, r3
 800920c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	461a      	mov	r2, r3
 8009214:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009216:	781b      	ldrb	r3, [r3, #0]
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	4413      	add	r3, r2
 800921c:	881b      	ldrh	r3, [r3, #0]
 800921e:	b29b      	uxth	r3, r3
 8009220:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009224:	2b00      	cmp	r3, #0
 8009226:	d022      	beq.n	800926e <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009230:	b29b      	uxth	r3, r3
 8009232:	461a      	mov	r2, r3
 8009234:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009236:	781b      	ldrb	r3, [r3, #0]
 8009238:	00db      	lsls	r3, r3, #3
 800923a:	4413      	add	r3, r2
 800923c:	687a      	ldr	r2, [r7, #4]
 800923e:	6812      	ldr	r2, [r2, #0]
 8009240:	4413      	add	r3, r2
 8009242:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009246:	881b      	ldrh	r3, [r3, #0]
 8009248:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800924c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8009250:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009254:	2b00      	cmp	r3, #0
 8009256:	d02c      	beq.n	80092b2 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	6818      	ldr	r0, [r3, #0]
 800925c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800925e:	6959      	ldr	r1, [r3, #20]
 8009260:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009262:	891a      	ldrh	r2, [r3, #8]
 8009264:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009268:	f006 f96c 	bl	800f544 <USB_ReadPMA>
 800926c:	e021      	b.n	80092b2 <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009276:	b29b      	uxth	r3, r3
 8009278:	461a      	mov	r2, r3
 800927a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	00db      	lsls	r3, r3, #3
 8009280:	4413      	add	r3, r2
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	6812      	ldr	r2, [r2, #0]
 8009286:	4413      	add	r3, r2
 8009288:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800928c:	881b      	ldrh	r3, [r3, #0]
 800928e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009292:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8009296:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800929a:	2b00      	cmp	r3, #0
 800929c:	d009      	beq.n	80092b2 <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6818      	ldr	r0, [r3, #0]
 80092a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092a4:	6959      	ldr	r1, [r3, #20]
 80092a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092a8:	895a      	ldrh	r2, [r3, #10]
 80092aa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80092ae:	f006 f949 	bl	800f544 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80092b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092b4:	69da      	ldr	r2, [r3, #28]
 80092b6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80092ba:	441a      	add	r2, r3
 80092bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092be:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80092c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092c2:	695a      	ldr	r2, [r3, #20]
 80092c4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80092c8:	441a      	add	r2, r3
 80092ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092cc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80092ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092d0:	699b      	ldr	r3, [r3, #24]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d005      	beq.n	80092e2 <PCD_EP_ISR_Handler+0x4fc>
 80092d6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80092da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092dc:	691b      	ldr	r3, [r3, #16]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d206      	bcs.n	80092f0 <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80092e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	4619      	mov	r1, r3
 80092e8:	6878      	ldr	r0, [r7, #4]
 80092ea:	f008 fb87 	bl	80119fc <HAL_PCD_DataOutStageCallback>
 80092ee:	e005      	b.n	80092fc <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80092f6:	4618      	mov	r0, r3
 80092f8:	f004 fbf7 	bl	800daea <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80092fc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009300:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009304:	2b00      	cmp	r3, #0
 8009306:	f000 8121 	beq.w	800954c <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 800930a:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800930e:	4613      	mov	r3, r2
 8009310:	009b      	lsls	r3, r3, #2
 8009312:	4413      	add	r3, r2
 8009314:	00db      	lsls	r3, r3, #3
 8009316:	3310      	adds	r3, #16
 8009318:	687a      	ldr	r2, [r7, #4]
 800931a:	4413      	add	r3, r2
 800931c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	461a      	mov	r2, r3
 8009324:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8009328:	009b      	lsls	r3, r3, #2
 800932a:	4413      	add	r3, r2
 800932c:	881b      	ldrh	r3, [r3, #0]
 800932e:	b29b      	uxth	r3, r3
 8009330:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8009334:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009338:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	461a      	mov	r2, r3
 8009342:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	441a      	add	r2, r3
 800934a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800934e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009352:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009356:	b29b      	uxth	r3, r3
 8009358:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800935a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800935c:	78db      	ldrb	r3, [r3, #3]
 800935e:	2b01      	cmp	r3, #1
 8009360:	f040 80a2 	bne.w	80094a8 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 8009364:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009366:	2200      	movs	r2, #0
 8009368:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800936a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800936c:	7b1b      	ldrb	r3, [r3, #12]
 800936e:	2b00      	cmp	r3, #0
 8009370:	f000 8093 	beq.w	800949a <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009374:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009378:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800937c:	2b00      	cmp	r3, #0
 800937e:	d046      	beq.n	800940e <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009380:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009382:	785b      	ldrb	r3, [r3, #1]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d126      	bne.n	80093d6 <PCD_EP_ISR_Handler+0x5f0>
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	627b      	str	r3, [r7, #36]	@ 0x24
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009396:	b29b      	uxth	r3, r3
 8009398:	461a      	mov	r2, r3
 800939a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800939c:	4413      	add	r3, r2
 800939e:	627b      	str	r3, [r7, #36]	@ 0x24
 80093a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	00da      	lsls	r2, r3, #3
 80093a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093a8:	4413      	add	r3, r2
 80093aa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80093ae:	623b      	str	r3, [r7, #32]
 80093b0:	6a3b      	ldr	r3, [r7, #32]
 80093b2:	881b      	ldrh	r3, [r3, #0]
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80093ba:	b29a      	uxth	r2, r3
 80093bc:	6a3b      	ldr	r3, [r7, #32]
 80093be:	801a      	strh	r2, [r3, #0]
 80093c0:	6a3b      	ldr	r3, [r7, #32]
 80093c2:	881b      	ldrh	r3, [r3, #0]
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80093ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093ce:	b29a      	uxth	r2, r3
 80093d0:	6a3b      	ldr	r3, [r7, #32]
 80093d2:	801a      	strh	r2, [r3, #0]
 80093d4:	e061      	b.n	800949a <PCD_EP_ISR_Handler+0x6b4>
 80093d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80093d8:	785b      	ldrb	r3, [r3, #1]
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d15d      	bne.n	800949a <PCD_EP_ISR_Handler+0x6b4>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	461a      	mov	r2, r3
 80093f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093f2:	4413      	add	r3, r2
 80093f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80093f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	00da      	lsls	r2, r3, #3
 80093fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093fe:	4413      	add	r3, r2
 8009400:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009404:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009408:	2200      	movs	r2, #0
 800940a:	801a      	strh	r2, [r3, #0]
 800940c:	e045      	b.n	800949a <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009414:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009416:	785b      	ldrb	r3, [r3, #1]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d126      	bne.n	800946a <PCD_EP_ISR_Handler+0x684>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	637b      	str	r3, [r7, #52]	@ 0x34
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800942a:	b29b      	uxth	r3, r3
 800942c:	461a      	mov	r2, r3
 800942e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009430:	4413      	add	r3, r2
 8009432:	637b      	str	r3, [r7, #52]	@ 0x34
 8009434:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	00da      	lsls	r2, r3, #3
 800943a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800943c:	4413      	add	r3, r2
 800943e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009442:	633b      	str	r3, [r7, #48]	@ 0x30
 8009444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009446:	881b      	ldrh	r3, [r3, #0]
 8009448:	b29b      	uxth	r3, r3
 800944a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800944e:	b29a      	uxth	r2, r3
 8009450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009452:	801a      	strh	r2, [r3, #0]
 8009454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009456:	881b      	ldrh	r3, [r3, #0]
 8009458:	b29b      	uxth	r3, r3
 800945a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800945e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009462:	b29a      	uxth	r2, r3
 8009464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009466:	801a      	strh	r2, [r3, #0]
 8009468:	e017      	b.n	800949a <PCD_EP_ISR_Handler+0x6b4>
 800946a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800946c:	785b      	ldrb	r3, [r3, #1]
 800946e:	2b01      	cmp	r3, #1
 8009470:	d113      	bne.n	800949a <PCD_EP_ISR_Handler+0x6b4>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800947a:	b29b      	uxth	r3, r3
 800947c:	461a      	mov	r2, r3
 800947e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009480:	4413      	add	r3, r2
 8009482:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009484:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	00da      	lsls	r2, r3, #3
 800948a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800948c:	4413      	add	r3, r2
 800948e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009492:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009496:	2200      	movs	r2, #0
 8009498:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800949a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	4619      	mov	r1, r3
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f008 fac6 	bl	8011a32 <HAL_PCD_DataInStageCallback>
 80094a6:	e051      	b.n	800954c <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80094a8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80094ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d144      	bne.n	800953e <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80094bc:	b29b      	uxth	r3, r3
 80094be:	461a      	mov	r2, r3
 80094c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	00db      	lsls	r3, r3, #3
 80094c6:	4413      	add	r3, r2
 80094c8:	687a      	ldr	r2, [r7, #4]
 80094ca:	6812      	ldr	r2, [r2, #0]
 80094cc:	4413      	add	r3, r2
 80094ce:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80094d2:	881b      	ldrh	r3, [r3, #0]
 80094d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80094d8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80094dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094de:	699a      	ldr	r2, [r3, #24]
 80094e0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d907      	bls.n	80094f8 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 80094e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094ea:	699a      	ldr	r2, [r3, #24]
 80094ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80094f0:	1ad2      	subs	r2, r2, r3
 80094f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094f4:	619a      	str	r2, [r3, #24]
 80094f6:	e002      	b.n	80094fe <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 80094f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094fa:	2200      	movs	r2, #0
 80094fc:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80094fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009500:	699b      	ldr	r3, [r3, #24]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d106      	bne.n	8009514 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009506:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009508:	781b      	ldrb	r3, [r3, #0]
 800950a:	4619      	mov	r1, r3
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f008 fa90 	bl	8011a32 <HAL_PCD_DataInStageCallback>
 8009512:	e01b      	b.n	800954c <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8009514:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009516:	695a      	ldr	r2, [r3, #20]
 8009518:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800951c:	441a      	add	r2, r3
 800951e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009520:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8009522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009524:	69da      	ldr	r2, [r3, #28]
 8009526:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800952a:	441a      	add	r2, r3
 800952c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800952e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009536:	4618      	mov	r0, r3
 8009538:	f004 fad7 	bl	800daea <USB_EPStartXfer>
 800953c:	e006      	b.n	800954c <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800953e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009542:	461a      	mov	r2, r3
 8009544:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 f917 	bl	800977a <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009554:	b29b      	uxth	r3, r3
 8009556:	b21b      	sxth	r3, r3
 8009558:	2b00      	cmp	r3, #0
 800955a:	f6ff ac49 	blt.w	8008df0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800955e:	2300      	movs	r3, #0
}
 8009560:	4618      	mov	r0, r3
 8009562:	3758      	adds	r7, #88	@ 0x58
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b088      	sub	sp, #32
 800956c:	af00      	add	r7, sp, #0
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	60b9      	str	r1, [r7, #8]
 8009572:	4613      	mov	r3, r2
 8009574:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009576:	88fb      	ldrh	r3, [r7, #6]
 8009578:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800957c:	2b00      	cmp	r3, #0
 800957e:	d07c      	beq.n	800967a <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009588:	b29b      	uxth	r3, r3
 800958a:	461a      	mov	r2, r3
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	781b      	ldrb	r3, [r3, #0]
 8009590:	00db      	lsls	r3, r3, #3
 8009592:	4413      	add	r3, r2
 8009594:	68fa      	ldr	r2, [r7, #12]
 8009596:	6812      	ldr	r2, [r2, #0]
 8009598:	4413      	add	r3, r2
 800959a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800959e:	881b      	ldrh	r3, [r3, #0]
 80095a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80095a4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	699a      	ldr	r2, [r3, #24]
 80095aa:	8b7b      	ldrh	r3, [r7, #26]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d306      	bcc.n	80095be <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	699a      	ldr	r2, [r3, #24]
 80095b4:	8b7b      	ldrh	r3, [r7, #26]
 80095b6:	1ad2      	subs	r2, r2, r3
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	619a      	str	r2, [r3, #24]
 80095bc:	e002      	b.n	80095c4 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	2200      	movs	r2, #0
 80095c2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	699b      	ldr	r3, [r3, #24]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d123      	bne.n	8009614 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	461a      	mov	r2, r3
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	781b      	ldrb	r3, [r3, #0]
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	4413      	add	r3, r2
 80095da:	881b      	ldrh	r3, [r3, #0]
 80095dc:	b29b      	uxth	r3, r3
 80095de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80095e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095e6:	833b      	strh	r3, [r7, #24]
 80095e8:	8b3b      	ldrh	r3, [r7, #24]
 80095ea:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80095ee:	833b      	strh	r3, [r7, #24]
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	461a      	mov	r2, r3
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	781b      	ldrb	r3, [r3, #0]
 80095fa:	009b      	lsls	r3, r3, #2
 80095fc:	441a      	add	r2, r3
 80095fe:	8b3b      	ldrh	r3, [r7, #24]
 8009600:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009604:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009608:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800960c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009610:	b29b      	uxth	r3, r3
 8009612:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009614:	88fb      	ldrh	r3, [r7, #6]
 8009616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800961a:	2b00      	cmp	r3, #0
 800961c:	d01f      	beq.n	800965e <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	461a      	mov	r2, r3
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	4413      	add	r3, r2
 800962c:	881b      	ldrh	r3, [r3, #0]
 800962e:	b29b      	uxth	r3, r3
 8009630:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009634:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009638:	82fb      	strh	r3, [r7, #22]
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	461a      	mov	r2, r3
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	781b      	ldrb	r3, [r3, #0]
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	441a      	add	r2, r3
 8009648:	8afb      	ldrh	r3, [r7, #22]
 800964a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800964e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009652:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009656:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800965a:	b29b      	uxth	r3, r3
 800965c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800965e:	8b7b      	ldrh	r3, [r7, #26]
 8009660:	2b00      	cmp	r3, #0
 8009662:	f000 8085 	beq.w	8009770 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	6818      	ldr	r0, [r3, #0]
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	6959      	ldr	r1, [r3, #20]
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	891a      	ldrh	r2, [r3, #8]
 8009672:	8b7b      	ldrh	r3, [r7, #26]
 8009674:	f005 ff66 	bl	800f544 <USB_ReadPMA>
 8009678:	e07a      	b.n	8009770 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009682:	b29b      	uxth	r3, r3
 8009684:	461a      	mov	r2, r3
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	781b      	ldrb	r3, [r3, #0]
 800968a:	00db      	lsls	r3, r3, #3
 800968c:	4413      	add	r3, r2
 800968e:	68fa      	ldr	r2, [r7, #12]
 8009690:	6812      	ldr	r2, [r2, #0]
 8009692:	4413      	add	r3, r2
 8009694:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009698:	881b      	ldrh	r3, [r3, #0]
 800969a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800969e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	699a      	ldr	r2, [r3, #24]
 80096a4:	8b7b      	ldrh	r3, [r7, #26]
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d306      	bcc.n	80096b8 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	699a      	ldr	r2, [r3, #24]
 80096ae:	8b7b      	ldrh	r3, [r7, #26]
 80096b0:	1ad2      	subs	r2, r2, r3
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	619a      	str	r2, [r3, #24]
 80096b6:	e002      	b.n	80096be <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	2200      	movs	r2, #0
 80096bc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	699b      	ldr	r3, [r3, #24]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d123      	bne.n	800970e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	461a      	mov	r2, r3
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	4413      	add	r3, r2
 80096d4:	881b      	ldrh	r3, [r3, #0]
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80096dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80096e0:	83fb      	strh	r3, [r7, #30]
 80096e2:	8bfb      	ldrh	r3, [r7, #30]
 80096e4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80096e8:	83fb      	strh	r3, [r7, #30]
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	461a      	mov	r2, r3
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	441a      	add	r2, r3
 80096f8:	8bfb      	ldrh	r3, [r7, #30]
 80096fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80096fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009702:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009706:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800970a:	b29b      	uxth	r3, r3
 800970c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800970e:	88fb      	ldrh	r3, [r7, #6]
 8009710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009714:	2b00      	cmp	r3, #0
 8009716:	d11f      	bne.n	8009758 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	461a      	mov	r2, r3
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	4413      	add	r3, r2
 8009726:	881b      	ldrh	r3, [r3, #0]
 8009728:	b29b      	uxth	r3, r3
 800972a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800972e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009732:	83bb      	strh	r3, [r7, #28]
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	461a      	mov	r2, r3
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	009b      	lsls	r3, r3, #2
 8009740:	441a      	add	r2, r3
 8009742:	8bbb      	ldrh	r3, [r7, #28]
 8009744:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009748:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800974c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009750:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009754:	b29b      	uxth	r3, r3
 8009756:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8009758:	8b7b      	ldrh	r3, [r7, #26]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d008      	beq.n	8009770 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	6818      	ldr	r0, [r3, #0]
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	6959      	ldr	r1, [r3, #20]
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	895a      	ldrh	r2, [r3, #10]
 800976a:	8b7b      	ldrh	r3, [r7, #26]
 800976c:	f005 feea 	bl	800f544 <USB_ReadPMA>
    }
  }

  return count;
 8009770:	8b7b      	ldrh	r3, [r7, #26]
}
 8009772:	4618      	mov	r0, r3
 8009774:	3720      	adds	r7, #32
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}

0800977a <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800977a:	b580      	push	{r7, lr}
 800977c:	b0a4      	sub	sp, #144	@ 0x90
 800977e:	af00      	add	r7, sp, #0
 8009780:	60f8      	str	r0, [r7, #12]
 8009782:	60b9      	str	r1, [r7, #8]
 8009784:	4613      	mov	r3, r2
 8009786:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009788:	88fb      	ldrh	r3, [r7, #6]
 800978a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800978e:	2b00      	cmp	r3, #0
 8009790:	f000 81db 	beq.w	8009b4a <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800979c:	b29b      	uxth	r3, r3
 800979e:	461a      	mov	r2, r3
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	00db      	lsls	r3, r3, #3
 80097a6:	4413      	add	r3, r2
 80097a8:	68fa      	ldr	r2, [r7, #12]
 80097aa:	6812      	ldr	r2, [r2, #0]
 80097ac:	4413      	add	r3, r2
 80097ae:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80097b2:	881b      	ldrh	r3, [r3, #0]
 80097b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80097b8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	699a      	ldr	r2, [r3, #24]
 80097c0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d907      	bls.n	80097d8 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	699a      	ldr	r2, [r3, #24]
 80097cc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80097d0:	1ad2      	subs	r2, r2, r3
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	619a      	str	r2, [r3, #24]
 80097d6:	e002      	b.n	80097de <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	2200      	movs	r2, #0
 80097dc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	699b      	ldr	r3, [r3, #24]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	f040 80b9 	bne.w	800995a <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	785b      	ldrb	r3, [r3, #1]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d126      	bne.n	800983e <HAL_PCD_EP_DB_Transmit+0xc4>
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80097fe:	b29b      	uxth	r3, r3
 8009800:	461a      	mov	r2, r3
 8009802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009804:	4413      	add	r3, r2
 8009806:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	00da      	lsls	r2, r3, #3
 800980e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009810:	4413      	add	r3, r2
 8009812:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009816:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800981a:	881b      	ldrh	r3, [r3, #0]
 800981c:	b29b      	uxth	r3, r3
 800981e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009822:	b29a      	uxth	r2, r3
 8009824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009826:	801a      	strh	r2, [r3, #0]
 8009828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800982a:	881b      	ldrh	r3, [r3, #0]
 800982c:	b29b      	uxth	r3, r3
 800982e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009832:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009836:	b29a      	uxth	r2, r3
 8009838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800983a:	801a      	strh	r2, [r3, #0]
 800983c:	e01a      	b.n	8009874 <HAL_PCD_EP_DB_Transmit+0xfa>
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	785b      	ldrb	r3, [r3, #1]
 8009842:	2b01      	cmp	r3, #1
 8009844:	d116      	bne.n	8009874 <HAL_PCD_EP_DB_Transmit+0xfa>
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	637b      	str	r3, [r7, #52]	@ 0x34
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009854:	b29b      	uxth	r3, r3
 8009856:	461a      	mov	r2, r3
 8009858:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800985a:	4413      	add	r3, r2
 800985c:	637b      	str	r3, [r7, #52]	@ 0x34
 800985e:	68bb      	ldr	r3, [r7, #8]
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	00da      	lsls	r2, r3, #3
 8009864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009866:	4413      	add	r3, r2
 8009868:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800986c:	633b      	str	r3, [r7, #48]	@ 0x30
 800986e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009870:	2200      	movs	r2, #0
 8009872:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	627b      	str	r3, [r7, #36]	@ 0x24
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	785b      	ldrb	r3, [r3, #1]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d126      	bne.n	80098d0 <HAL_PCD_EP_DB_Transmit+0x156>
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	61fb      	str	r3, [r7, #28]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009890:	b29b      	uxth	r3, r3
 8009892:	461a      	mov	r2, r3
 8009894:	69fb      	ldr	r3, [r7, #28]
 8009896:	4413      	add	r3, r2
 8009898:	61fb      	str	r3, [r7, #28]
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	781b      	ldrb	r3, [r3, #0]
 800989e:	00da      	lsls	r2, r3, #3
 80098a0:	69fb      	ldr	r3, [r7, #28]
 80098a2:	4413      	add	r3, r2
 80098a4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80098a8:	61bb      	str	r3, [r7, #24]
 80098aa:	69bb      	ldr	r3, [r7, #24]
 80098ac:	881b      	ldrh	r3, [r3, #0]
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098b4:	b29a      	uxth	r2, r3
 80098b6:	69bb      	ldr	r3, [r7, #24]
 80098b8:	801a      	strh	r2, [r3, #0]
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	881b      	ldrh	r3, [r3, #0]
 80098be:	b29b      	uxth	r3, r3
 80098c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098c8:	b29a      	uxth	r2, r3
 80098ca:	69bb      	ldr	r3, [r7, #24]
 80098cc:	801a      	strh	r2, [r3, #0]
 80098ce:	e017      	b.n	8009900 <HAL_PCD_EP_DB_Transmit+0x186>
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	785b      	ldrb	r3, [r3, #1]
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	d113      	bne.n	8009900 <HAL_PCD_EP_DB_Transmit+0x186>
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	461a      	mov	r2, r3
 80098e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098e6:	4413      	add	r3, r2
 80098e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	00da      	lsls	r2, r3, #3
 80098f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f2:	4413      	add	r3, r2
 80098f4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80098f8:	623b      	str	r3, [r7, #32]
 80098fa:	6a3b      	ldr	r3, [r7, #32]
 80098fc:	2200      	movs	r2, #0
 80098fe:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	4619      	mov	r1, r3
 8009906:	68f8      	ldr	r0, [r7, #12]
 8009908:	f008 f893 	bl	8011a32 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800990c:	88fb      	ldrh	r3, [r7, #6]
 800990e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009912:	2b00      	cmp	r3, #0
 8009914:	f000 82fa 	beq.w	8009f0c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	461a      	mov	r2, r3
 800991e:	68bb      	ldr	r3, [r7, #8]
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	4413      	add	r3, r2
 8009926:	881b      	ldrh	r3, [r3, #0]
 8009928:	b29b      	uxth	r3, r3
 800992a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800992e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009932:	82fb      	strh	r3, [r7, #22]
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	461a      	mov	r2, r3
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	009b      	lsls	r3, r3, #2
 8009940:	441a      	add	r2, r3
 8009942:	8afb      	ldrh	r3, [r7, #22]
 8009944:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009948:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800994c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009950:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009954:	b29b      	uxth	r3, r3
 8009956:	8013      	strh	r3, [r2, #0]
 8009958:	e2d8      	b.n	8009f0c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800995a:	88fb      	ldrh	r3, [r7, #6]
 800995c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009960:	2b00      	cmp	r3, #0
 8009962:	d021      	beq.n	80099a8 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	461a      	mov	r2, r3
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	781b      	ldrb	r3, [r3, #0]
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	4413      	add	r3, r2
 8009972:	881b      	ldrh	r3, [r3, #0]
 8009974:	b29b      	uxth	r3, r3
 8009976:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800997a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800997e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	461a      	mov	r2, r3
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	441a      	add	r2, r3
 8009990:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009994:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009998:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800999c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80099a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80099ae:	2b01      	cmp	r3, #1
 80099b0:	f040 82ac 	bne.w	8009f0c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	695a      	ldr	r2, [r3, #20]
 80099b8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80099bc:	441a      	add	r2, r3
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	69da      	ldr	r2, [r3, #28]
 80099c6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 80099ca:	441a      	add	r2, r3
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	6a1a      	ldr	r2, [r3, #32]
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	691b      	ldr	r3, [r3, #16]
 80099d8:	429a      	cmp	r2, r3
 80099da:	d30b      	bcc.n	80099f4 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80099dc:	68bb      	ldr	r3, [r7, #8]
 80099de:	691b      	ldr	r3, [r3, #16]
 80099e0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	6a1a      	ldr	r2, [r3, #32]
 80099e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80099ec:	1ad2      	subs	r2, r2, r3
 80099ee:	68bb      	ldr	r3, [r7, #8]
 80099f0:	621a      	str	r2, [r3, #32]
 80099f2:	e017      	b.n	8009a24 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	6a1b      	ldr	r3, [r3, #32]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d108      	bne.n	8009a0e <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80099fc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009a00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	2200      	movs	r2, #0
 8009a08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8009a0c:	e00a      	b.n	8009a24 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	2200      	movs	r2, #0
 8009a12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	6a1b      	ldr	r3, [r3, #32]
 8009a1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	2200      	movs	r2, #0
 8009a22:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	785b      	ldrb	r3, [r3, #1]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d165      	bne.n	8009af8 <HAL_PCD_EP_DB_Transmit+0x37e>
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a3a:	b29b      	uxth	r3, r3
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a40:	4413      	add	r3, r2
 8009a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	00da      	lsls	r2, r3, #3
 8009a4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a4c:	4413      	add	r3, r2
 8009a4e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009a52:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009a54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a56:	881b      	ldrh	r3, [r3, #0]
 8009a58:	b29b      	uxth	r3, r3
 8009a5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a5e:	b29a      	uxth	r2, r3
 8009a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a62:	801a      	strh	r2, [r3, #0]
 8009a64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a68:	2b3e      	cmp	r3, #62	@ 0x3e
 8009a6a:	d91d      	bls.n	8009aa8 <HAL_PCD_EP_DB_Transmit+0x32e>
 8009a6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a70:	095b      	lsrs	r3, r3, #5
 8009a72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009a78:	f003 031f 	and.w	r3, r3, #31
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d102      	bne.n	8009a86 <HAL_PCD_EP_DB_Transmit+0x30c>
 8009a80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a82:	3b01      	subs	r3, #1
 8009a84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a88:	881b      	ldrh	r3, [r3, #0]
 8009a8a:	b29a      	uxth	r2, r3
 8009a8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	029b      	lsls	r3, r3, #10
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	4313      	orrs	r3, r2
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009aa0:	b29a      	uxth	r2, r3
 8009aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aa4:	801a      	strh	r2, [r3, #0]
 8009aa6:	e044      	b.n	8009b32 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8009aa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d10a      	bne.n	8009ac6 <HAL_PCD_EP_DB_Transmit+0x34c>
 8009ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ab2:	881b      	ldrh	r3, [r3, #0]
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009aba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009abe:	b29a      	uxth	r2, r3
 8009ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ac2:	801a      	strh	r2, [r3, #0]
 8009ac4:	e035      	b.n	8009b32 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8009ac6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009aca:	085b      	lsrs	r3, r3, #1
 8009acc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ace:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009ad2:	f003 0301 	and.w	r3, r3, #1
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d002      	beq.n	8009ae0 <HAL_PCD_EP_DB_Transmit+0x366>
 8009ada:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009adc:	3301      	adds	r3, #1
 8009ade:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae2:	881b      	ldrh	r3, [r3, #0]
 8009ae4:	b29a      	uxth	r2, r3
 8009ae6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009ae8:	b29b      	uxth	r3, r3
 8009aea:	029b      	lsls	r3, r3, #10
 8009aec:	b29b      	uxth	r3, r3
 8009aee:	4313      	orrs	r3, r2
 8009af0:	b29a      	uxth	r2, r3
 8009af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009af4:	801a      	strh	r2, [r3, #0]
 8009af6:	e01c      	b.n	8009b32 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	785b      	ldrb	r3, [r3, #1]
 8009afc:	2b01      	cmp	r3, #1
 8009afe:	d118      	bne.n	8009b32 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	461a      	mov	r2, r3
 8009b12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b14:	4413      	add	r3, r2
 8009b16:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	00da      	lsls	r2, r3, #3
 8009b1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b20:	4413      	add	r3, r2
 8009b22:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009b26:	643b      	str	r3, [r7, #64]	@ 0x40
 8009b28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b2c:	b29a      	uxth	r2, r3
 8009b2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009b30:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	6818      	ldr	r0, [r3, #0]
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	6959      	ldr	r1, [r3, #20]
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	891a      	ldrh	r2, [r3, #8]
 8009b3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	f005 fcbc 	bl	800f4c0 <USB_WritePMA>
 8009b48:	e1e0      	b.n	8009f0c <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	461a      	mov	r2, r3
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	00db      	lsls	r3, r3, #3
 8009b5c:	4413      	add	r3, r2
 8009b5e:	68fa      	ldr	r2, [r7, #12]
 8009b60:	6812      	ldr	r2, [r2, #0]
 8009b62:	4413      	add	r3, r2
 8009b64:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009b68:	881b      	ldrh	r3, [r3, #0]
 8009b6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b6e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	699a      	ldr	r2, [r3, #24]
 8009b76:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009b7a:	429a      	cmp	r2, r3
 8009b7c:	d307      	bcc.n	8009b8e <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	699a      	ldr	r2, [r3, #24]
 8009b82:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009b86:	1ad2      	subs	r2, r2, r3
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	619a      	str	r2, [r3, #24]
 8009b8c:	e002      	b.n	8009b94 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	2200      	movs	r2, #0
 8009b92:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	699b      	ldr	r3, [r3, #24]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	f040 80c0 	bne.w	8009d1e <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	785b      	ldrb	r3, [r3, #1]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d126      	bne.n	8009bf4 <HAL_PCD_EP_DB_Transmit+0x47a>
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009bba:	4413      	add	r3, r2
 8009bbc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009bbe:	68bb      	ldr	r3, [r7, #8]
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	00da      	lsls	r2, r3, #3
 8009bc4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009bc6:	4413      	add	r3, r2
 8009bc8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009bcc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009bce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009bd0:	881b      	ldrh	r3, [r3, #0]
 8009bd2:	b29b      	uxth	r3, r3
 8009bd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009bd8:	b29a      	uxth	r2, r3
 8009bda:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009bdc:	801a      	strh	r2, [r3, #0]
 8009bde:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009be0:	881b      	ldrh	r3, [r3, #0]
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009be8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bec:	b29a      	uxth	r2, r3
 8009bee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009bf0:	801a      	strh	r2, [r3, #0]
 8009bf2:	e01a      	b.n	8009c2a <HAL_PCD_EP_DB_Transmit+0x4b0>
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	785b      	ldrb	r3, [r3, #1]
 8009bf8:	2b01      	cmp	r3, #1
 8009bfa:	d116      	bne.n	8009c2a <HAL_PCD_EP_DB_Transmit+0x4b0>
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	667b      	str	r3, [r7, #100]	@ 0x64
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c0a:	b29b      	uxth	r3, r3
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c10:	4413      	add	r3, r2
 8009c12:	667b      	str	r3, [r7, #100]	@ 0x64
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	781b      	ldrb	r3, [r3, #0]
 8009c18:	00da      	lsls	r2, r3, #3
 8009c1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009c1c:	4413      	add	r3, r2
 8009c1e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009c22:	663b      	str	r3, [r7, #96]	@ 0x60
 8009c24:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009c26:	2200      	movs	r2, #0
 8009c28:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	677b      	str	r3, [r7, #116]	@ 0x74
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	785b      	ldrb	r3, [r3, #1]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d12b      	bne.n	8009c90 <HAL_PCD_EP_DB_Transmit+0x516>
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	461a      	mov	r2, r3
 8009c4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c4c:	4413      	add	r3, r2
 8009c4e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	00da      	lsls	r2, r3, #3
 8009c56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c58:	4413      	add	r3, r2
 8009c5a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009c5e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009c62:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009c66:	881b      	ldrh	r3, [r3, #0]
 8009c68:	b29b      	uxth	r3, r3
 8009c6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c6e:	b29a      	uxth	r2, r3
 8009c70:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009c74:	801a      	strh	r2, [r3, #0]
 8009c76:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009c7a:	881b      	ldrh	r3, [r3, #0]
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c86:	b29a      	uxth	r2, r3
 8009c88:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009c8c:	801a      	strh	r2, [r3, #0]
 8009c8e:	e017      	b.n	8009cc0 <HAL_PCD_EP_DB_Transmit+0x546>
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	785b      	ldrb	r3, [r3, #1]
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d113      	bne.n	8009cc0 <HAL_PCD_EP_DB_Transmit+0x546>
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009ca6:	4413      	add	r3, r2
 8009ca8:	677b      	str	r3, [r7, #116]	@ 0x74
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	00da      	lsls	r2, r3, #3
 8009cb0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009cb2:	4413      	add	r3, r2
 8009cb4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009cb8:	673b      	str	r3, [r7, #112]	@ 0x70
 8009cba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	68f8      	ldr	r0, [r7, #12]
 8009cc8:	f007 feb3 	bl	8011a32 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009ccc:	88fb      	ldrh	r3, [r7, #6]
 8009cce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	f040 811a 	bne.w	8009f0c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	461a      	mov	r2, r3
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	781b      	ldrb	r3, [r3, #0]
 8009ce2:	009b      	lsls	r3, r3, #2
 8009ce4:	4413      	add	r3, r2
 8009ce6:	881b      	ldrh	r3, [r3, #0]
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009cee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cf2:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	441a      	add	r2, r3
 8009d04:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8009d08:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d0c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d10:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009d14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	8013      	strh	r3, [r2, #0]
 8009d1c:	e0f6      	b.n	8009f0c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009d1e:	88fb      	ldrh	r3, [r7, #6]
 8009d20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d121      	bne.n	8009d6c <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	4413      	add	r3, r2
 8009d36:	881b      	ldrh	r3, [r3, #0]
 8009d38:	b29b      	uxth	r3, r3
 8009d3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d42:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	461a      	mov	r2, r3
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	009b      	lsls	r3, r3, #2
 8009d52:	441a      	add	r2, r3
 8009d54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009d58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d60:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009d64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009d72:	2b01      	cmp	r3, #1
 8009d74:	f040 80ca 	bne.w	8009f0c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	695a      	ldr	r2, [r3, #20]
 8009d7c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009d80:	441a      	add	r2, r3
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	69da      	ldr	r2, [r3, #28]
 8009d8a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009d8e:	441a      	add	r2, r3
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	6a1a      	ldr	r2, [r3, #32]
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	691b      	ldr	r3, [r3, #16]
 8009d9c:	429a      	cmp	r2, r3
 8009d9e:	d30b      	bcc.n	8009db8 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	691b      	ldr	r3, [r3, #16]
 8009da4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	6a1a      	ldr	r2, [r3, #32]
 8009dac:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009db0:	1ad2      	subs	r2, r2, r3
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	621a      	str	r2, [r3, #32]
 8009db6:	e017      	b.n	8009de8 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	6a1b      	ldr	r3, [r3, #32]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d108      	bne.n	8009dd2 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8009dc0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009dc4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8009dd0:	e00a      	b.n	8009de8 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	6a1b      	ldr	r3, [r3, #32]
 8009dd6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	2200      	movs	r2, #0
 8009de4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	657b      	str	r3, [r7, #84]	@ 0x54
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	785b      	ldrb	r3, [r3, #1]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d165      	bne.n	8009ec2 <HAL_PCD_EP_DB_Transmit+0x748>
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	461a      	mov	r2, r3
 8009e08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e0a:	4413      	add	r3, r2
 8009e0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	00da      	lsls	r2, r3, #3
 8009e14:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009e16:	4413      	add	r3, r2
 8009e18:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009e1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009e20:	881b      	ldrh	r3, [r3, #0]
 8009e22:	b29b      	uxth	r3, r3
 8009e24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e28:	b29a      	uxth	r2, r3
 8009e2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009e2c:	801a      	strh	r2, [r3, #0]
 8009e2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009e32:	2b3e      	cmp	r3, #62	@ 0x3e
 8009e34:	d91d      	bls.n	8009e72 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8009e36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009e3a:	095b      	lsrs	r3, r3, #5
 8009e3c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009e42:	f003 031f 	and.w	r3, r3, #31
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d102      	bne.n	8009e50 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8009e4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009e4c:	3b01      	subs	r3, #1
 8009e4e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009e52:	881b      	ldrh	r3, [r3, #0]
 8009e54:	b29a      	uxth	r2, r3
 8009e56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	029b      	lsls	r3, r3, #10
 8009e5c:	b29b      	uxth	r3, r3
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	b29b      	uxth	r3, r3
 8009e62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e6a:	b29a      	uxth	r2, r3
 8009e6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009e6e:	801a      	strh	r2, [r3, #0]
 8009e70:	e041      	b.n	8009ef6 <HAL_PCD_EP_DB_Transmit+0x77c>
 8009e72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d10a      	bne.n	8009e90 <HAL_PCD_EP_DB_Transmit+0x716>
 8009e7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009e7c:	881b      	ldrh	r3, [r3, #0]
 8009e7e:	b29b      	uxth	r3, r3
 8009e80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e88:	b29a      	uxth	r2, r3
 8009e8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009e8c:	801a      	strh	r2, [r3, #0]
 8009e8e:	e032      	b.n	8009ef6 <HAL_PCD_EP_DB_Transmit+0x77c>
 8009e90:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009e94:	085b      	lsrs	r3, r3, #1
 8009e96:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009e9c:	f003 0301 	and.w	r3, r3, #1
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d002      	beq.n	8009eaa <HAL_PCD_EP_DB_Transmit+0x730>
 8009ea4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009ea6:	3301      	adds	r3, #1
 8009ea8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009eaa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009eac:	881b      	ldrh	r3, [r3, #0]
 8009eae:	b29a      	uxth	r2, r3
 8009eb0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	029b      	lsls	r3, r3, #10
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	b29a      	uxth	r2, r3
 8009ebc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009ebe:	801a      	strh	r2, [r3, #0]
 8009ec0:	e019      	b.n	8009ef6 <HAL_PCD_EP_DB_Transmit+0x77c>
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	785b      	ldrb	r3, [r3, #1]
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d115      	bne.n	8009ef6 <HAL_PCD_EP_DB_Transmit+0x77c>
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	461a      	mov	r2, r3
 8009ed6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ed8:	4413      	add	r3, r2
 8009eda:	657b      	str	r3, [r7, #84]	@ 0x54
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	781b      	ldrb	r3, [r3, #0]
 8009ee0:	00da      	lsls	r2, r3, #3
 8009ee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ee4:	4413      	add	r3, r2
 8009ee6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009eea:	653b      	str	r3, [r7, #80]	@ 0x50
 8009eec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009ef0:	b29a      	uxth	r2, r3
 8009ef2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009ef4:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	6818      	ldr	r0, [r3, #0]
 8009efa:	68bb      	ldr	r3, [r7, #8]
 8009efc:	6959      	ldr	r1, [r3, #20]
 8009efe:	68bb      	ldr	r3, [r7, #8]
 8009f00:	895a      	ldrh	r2, [r3, #10]
 8009f02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009f06:	b29b      	uxth	r3, r3
 8009f08:	f005 fada 	bl	800f4c0 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	461a      	mov	r2, r3
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	009b      	lsls	r3, r3, #2
 8009f18:	4413      	add	r3, r2
 8009f1a:	881b      	ldrh	r3, [r3, #0]
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009f26:	82bb      	strh	r3, [r7, #20]
 8009f28:	8abb      	ldrh	r3, [r7, #20]
 8009f2a:	f083 0310 	eor.w	r3, r3, #16
 8009f2e:	82bb      	strh	r3, [r7, #20]
 8009f30:	8abb      	ldrh	r3, [r7, #20]
 8009f32:	f083 0320 	eor.w	r3, r3, #32
 8009f36:	82bb      	strh	r3, [r7, #20]
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	461a      	mov	r2, r3
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	009b      	lsls	r3, r3, #2
 8009f44:	441a      	add	r2, r3
 8009f46:	8abb      	ldrh	r3, [r7, #20]
 8009f48:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f4c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f50:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009f54:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f58:	b29b      	uxth	r3, r3
 8009f5a:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8009f5c:	2300      	movs	r3, #0
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3790      	adds	r7, #144	@ 0x90
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}

08009f66 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8009f66:	b480      	push	{r7}
 8009f68:	b087      	sub	sp, #28
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	60f8      	str	r0, [r7, #12]
 8009f6e:	607b      	str	r3, [r7, #4]
 8009f70:	460b      	mov	r3, r1
 8009f72:	817b      	strh	r3, [r7, #10]
 8009f74:	4613      	mov	r3, r2
 8009f76:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8009f78:	897b      	ldrh	r3, [r7, #10]
 8009f7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d00b      	beq.n	8009f9c <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009f84:	897b      	ldrh	r3, [r7, #10]
 8009f86:	f003 0207 	and.w	r2, r3, #7
 8009f8a:	4613      	mov	r3, r2
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	4413      	add	r3, r2
 8009f90:	00db      	lsls	r3, r3, #3
 8009f92:	3310      	adds	r3, #16
 8009f94:	68fa      	ldr	r2, [r7, #12]
 8009f96:	4413      	add	r3, r2
 8009f98:	617b      	str	r3, [r7, #20]
 8009f9a:	e009      	b.n	8009fb0 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009f9c:	897a      	ldrh	r2, [r7, #10]
 8009f9e:	4613      	mov	r3, r2
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	4413      	add	r3, r2
 8009fa4:	00db      	lsls	r3, r3, #3
 8009fa6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009faa:	68fa      	ldr	r2, [r7, #12]
 8009fac:	4413      	add	r3, r2
 8009fae:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8009fb0:	893b      	ldrh	r3, [r7, #8]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d107      	bne.n	8009fc6 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	b29a      	uxth	r2, r3
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	80da      	strh	r2, [r3, #6]
 8009fc4:	e00b      	b.n	8009fde <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	2201      	movs	r2, #1
 8009fca:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	b29a      	uxth	r2, r3
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	0c1b      	lsrs	r3, r3, #16
 8009fd8:	b29a      	uxth	r2, r3
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009fde:	2300      	movs	r3, #0
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	371c      	adds	r7, #28
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fea:	4770      	bx	lr

08009fec <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b085      	sub	sp, #20
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2200      	movs	r2, #0
 800a006:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800a010:	b29b      	uxth	r3, r3
 800a012:	f043 0301 	orr.w	r3, r3, #1
 800a016:	b29a      	uxth	r2, r3
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800a024:	b29b      	uxth	r3, r3
 800a026:	f043 0302 	orr.w	r3, r3, #2
 800a02a:	b29a      	uxth	r2, r3
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800a032:	2300      	movs	r3, #0
}
 800a034:	4618      	mov	r0, r3
 800a036:	3714      	adds	r7, #20
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr

0800a040 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a040:	b480      	push	{r7}
 800a042:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a044:	4b05      	ldr	r3, [pc, #20]	@ (800a05c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a04      	ldr	r2, [pc, #16]	@ (800a05c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a04a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a04e:	6013      	str	r3, [r2, #0]
}
 800a050:	bf00      	nop
 800a052:	46bd      	mov	sp, r7
 800a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a058:	4770      	bx	lr
 800a05a:	bf00      	nop
 800a05c:	58000400 	.word	0x58000400

0800a060 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a060:	b480      	push	{r7}
 800a062:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800a064:	4b04      	ldr	r3, [pc, #16]	@ (800a078 <HAL_PWREx_GetVoltageRange+0x18>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr
 800a076:	bf00      	nop
 800a078:	58000400 	.word	0x58000400

0800a07c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800a07c:	b480      	push	{r7}
 800a07e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800a080:	4b05      	ldr	r3, [pc, #20]	@ (800a098 <HAL_PWREx_EnableVddUSB+0x1c>)
 800a082:	685b      	ldr	r3, [r3, #4]
 800a084:	4a04      	ldr	r2, [pc, #16]	@ (800a098 <HAL_PWREx_EnableVddUSB+0x1c>)
 800a086:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a08a:	6053      	str	r3, [r2, #4]
}
 800a08c:	bf00      	nop
 800a08e:	46bd      	mov	sp, r7
 800a090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a094:	4770      	bx	lr
 800a096:	bf00      	nop
 800a098:	58000400 	.word	0x58000400

0800a09c <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 800a09c:	b480      	push	{r7}
 800a09e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800a0a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a0aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a0ae:	d101      	bne.n	800a0b4 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	e000      	b.n	800a0b6 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800a0b4:	2300      	movs	r3, #0
}
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr

0800a0c0 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800a0c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a0ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a0d2:	6013      	str	r3, [r2, #0]
}
 800a0d4:	bf00      	nop
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0dc:	4770      	bx	lr

0800a0de <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800a0de:	b480      	push	{r7}
 800a0e0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800a0e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a0ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a0f0:	6013      	str	r3, [r2, #0]
}
 800a0f2:	bf00      	nop
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800a100:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a10a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a10e:	d101      	bne.n	800a114 <LL_RCC_HSE_IsReady+0x18>
 800a110:	2301      	movs	r3, #1
 800a112:	e000      	b.n	800a116 <LL_RCC_HSE_IsReady+0x1a>
 800a114:	2300      	movs	r3, #0
}
 800a116:	4618      	mov	r0, r3
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr

0800a120 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800a120:	b480      	push	{r7}
 800a122:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800a124:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a12e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a132:	6013      	str	r3, [r2, #0]
}
 800a134:	bf00      	nop
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr

0800a13e <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800a13e:	b480      	push	{r7}
 800a140:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800a142:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a14c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a150:	6013      	str	r3, [r2, #0]
}
 800a152:	bf00      	nop
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr

0800a15c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800a15c:	b480      	push	{r7}
 800a15e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800a160:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a16a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a16e:	d101      	bne.n	800a174 <LL_RCC_HSI_IsReady+0x18>
 800a170:	2301      	movs	r3, #1
 800a172:	e000      	b.n	800a176 <LL_RCC_HSI_IsReady+0x1a>
 800a174:	2300      	movs	r3, #0
}
 800a176:	4618      	mov	r0, r3
 800a178:	46bd      	mov	sp, r7
 800a17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17e:	4770      	bx	lr

0800a180 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800a180:	b480      	push	{r7}
 800a182:	b083      	sub	sp, #12
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800a188:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	061b      	lsls	r3, r3, #24
 800a196:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a19a:	4313      	orrs	r3, r2
 800a19c:	604b      	str	r3, [r1, #4]
}
 800a19e:	bf00      	nop
 800a1a0:	370c      	adds	r7, #12
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a8:	4770      	bx	lr

0800a1aa <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800a1aa:	b480      	push	{r7}
 800a1ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800a1ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a1b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a1b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a1ba:	f043 0301 	orr.w	r3, r3, #1
 800a1be:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800a1c2:	bf00      	nop
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr

0800a1cc <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800a1d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a1d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a1d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a1dc:	f023 0301 	bic.w	r3, r3, #1
 800a1e0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800a1e4:	bf00      	nop
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ec:	4770      	bx	lr

0800a1ee <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800a1ee:	b480      	push	{r7}
 800a1f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800a1f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a1f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a1fa:	f003 0302 	and.w	r3, r3, #2
 800a1fe:	2b02      	cmp	r3, #2
 800a200:	d101      	bne.n	800a206 <LL_RCC_HSI48_IsReady+0x18>
 800a202:	2301      	movs	r3, #1
 800a204:	e000      	b.n	800a208 <LL_RCC_HSI48_IsReady+0x1a>
 800a206:	2300      	movs	r3, #0
}
 800a208:	4618      	mov	r0, r3
 800a20a:	46bd      	mov	sp, r7
 800a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a210:	4770      	bx	lr

0800a212 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 800a212:	b480      	push	{r7}
 800a214:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a216:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a21a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a21e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a222:	f043 0301 	orr.w	r3, r3, #1
 800a226:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a22a:	bf00      	nop
 800a22c:	46bd      	mov	sp, r7
 800a22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a232:	4770      	bx	lr

0800a234 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 800a234:	b480      	push	{r7}
 800a236:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a238:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a23c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a240:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a244:	f023 0301 	bic.w	r3, r3, #1
 800a248:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a24c:	bf00      	nop
 800a24e:	46bd      	mov	sp, r7
 800a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a254:	4770      	bx	lr

0800a256 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 800a256:	b480      	push	{r7}
 800a258:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a25a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a25e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a262:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a266:	f043 0304 	orr.w	r3, r3, #4
 800a26a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a26e:	bf00      	nop
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr

0800a278 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 800a278:	b480      	push	{r7}
 800a27a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a27c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a280:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a284:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a288:	f023 0304 	bic.w	r3, r3, #4
 800a28c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a290:	bf00      	nop
 800a292:	46bd      	mov	sp, r7
 800a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a298:	4770      	bx	lr

0800a29a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800a29a:	b480      	push	{r7}
 800a29c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800a29e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a2a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a2a6:	f003 0302 	and.w	r3, r3, #2
 800a2aa:	2b02      	cmp	r3, #2
 800a2ac:	d101      	bne.n	800a2b2 <LL_RCC_LSE_IsReady+0x18>
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e000      	b.n	800a2b4 <LL_RCC_LSE_IsReady+0x1a>
 800a2b2:	2300      	movs	r3, #0
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr

0800a2be <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800a2be:	b480      	push	{r7}
 800a2c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800a2c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a2c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a2ca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a2ce:	f043 0301 	orr.w	r3, r3, #1
 800a2d2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800a2d6:	bf00      	nop
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800a2e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a2e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a2ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a2f0:	f023 0301 	bic.w	r3, r3, #1
 800a2f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800a2f8:	bf00      	nop
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr

0800a302 <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800a302:	b480      	push	{r7}
 800a304:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800a306:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a30a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a30e:	f003 0302 	and.w	r3, r3, #2
 800a312:	2b02      	cmp	r3, #2
 800a314:	d101      	bne.n	800a31a <LL_RCC_LSI1_IsReady+0x18>
 800a316:	2301      	movs	r3, #1
 800a318:	e000      	b.n	800a31c <LL_RCC_LSI1_IsReady+0x1a>
 800a31a:	2300      	movs	r3, #0
}
 800a31c:	4618      	mov	r0, r3
 800a31e:	46bd      	mov	sp, r7
 800a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a324:	4770      	bx	lr

0800a326 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800a326:	b480      	push	{r7}
 800a328:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800a32a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a32e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a332:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a336:	f043 0304 	orr.w	r3, r3, #4
 800a33a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800a33e:	bf00      	nop
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 800a348:	b480      	push	{r7}
 800a34a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800a34c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a350:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a354:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a358:	f023 0304 	bic.w	r3, r3, #4
 800a35c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800a360:	bf00      	nop
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr

0800a36a <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800a36a:	b480      	push	{r7}
 800a36c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800a36e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a372:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a376:	f003 0308 	and.w	r3, r3, #8
 800a37a:	2b08      	cmp	r3, #8
 800a37c:	d101      	bne.n	800a382 <LL_RCC_LSI2_IsReady+0x18>
 800a37e:	2301      	movs	r3, #1
 800a380:	e000      	b.n	800a384 <LL_RCC_LSI2_IsReady+0x1a>
 800a382:	2300      	movs	r3, #0
}
 800a384:	4618      	mov	r0, r3
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr

0800a38e <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800a38e:	b480      	push	{r7}
 800a390:	b083      	sub	sp, #12
 800a392:	af00      	add	r7, sp, #0
 800a394:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800a396:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a39a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a39e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	021b      	lsls	r3, r3, #8
 800a3a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800a3b0:	bf00      	nop
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800a3c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a3ca:	f043 0301 	orr.w	r3, r3, #1
 800a3ce:	6013      	str	r3, [r2, #0]
}
 800a3d0:	bf00      	nop
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr

0800a3da <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800a3da:	b480      	push	{r7}
 800a3dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800a3de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a3e8:	f023 0301 	bic.w	r3, r3, #1
 800a3ec:	6013      	str	r3, [r2, #0]
}
 800a3ee:	bf00      	nop
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	4770      	bx	lr

0800a3f8 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800a3fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f003 0302 	and.w	r3, r3, #2
 800a406:	2b02      	cmp	r3, #2
 800a408:	d101      	bne.n	800a40e <LL_RCC_MSI_IsReady+0x16>
 800a40a:	2301      	movs	r3, #1
 800a40c:	e000      	b.n	800a410 <LL_RCC_MSI_IsReady+0x18>
 800a40e:	2300      	movs	r3, #0
}
 800a410:	4618      	mov	r0, r3
 800a412:	46bd      	mov	sp, r7
 800a414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a418:	4770      	bx	lr

0800a41a <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800a41a:	b480      	push	{r7}
 800a41c:	b083      	sub	sp, #12
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800a422:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a42c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	4313      	orrs	r3, r2
 800a434:	600b      	str	r3, [r1, #0]
}
 800a436:	bf00      	nop
 800a438:	370c      	adds	r7, #12
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr

0800a442 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800a442:	b480      	push	{r7}
 800a444:	b083      	sub	sp, #12
 800a446:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800a448:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a452:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2bb0      	cmp	r3, #176	@ 0xb0
 800a458:	d901      	bls.n	800a45e <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800a45a:	23b0      	movs	r3, #176	@ 0xb0
 800a45c:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800a45e:	687b      	ldr	r3, [r7, #4]
}
 800a460:	4618      	mov	r0, r3
 800a462:	370c      	adds	r7, #12
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr

0800a46c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b083      	sub	sp, #12
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800a474:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	021b      	lsls	r3, r3, #8
 800a482:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a486:	4313      	orrs	r3, r2
 800a488:	604b      	str	r3, [r1, #4]
}
 800a48a:	bf00      	nop
 800a48c:	370c      	adds	r7, #12
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr

0800a496 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800a496:	b480      	push	{r7}
 800a498:	b083      	sub	sp, #12
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800a49e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a4a2:	689b      	ldr	r3, [r3, #8]
 800a4a4:	f023 0203 	bic.w	r2, r3, #3
 800a4a8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	608b      	str	r3, [r1, #8]
}
 800a4b2:	bf00      	nop
 800a4b4:	370c      	adds	r7, #12
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr

0800a4be <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800a4be:	b480      	push	{r7}
 800a4c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800a4c2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a4c6:	689b      	ldr	r3, [r3, #8]
 800a4c8:	f003 030c 	and.w	r3, r3, #12
}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr

0800a4d6 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800a4d6:	b480      	push	{r7}
 800a4d8:	b083      	sub	sp, #12
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800a4de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a4e2:	689b      	ldr	r3, [r3, #8]
 800a4e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a4e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	608b      	str	r3, [r1, #8]
}
 800a4f2:	bf00      	nop
 800a4f4:	370c      	adds	r7, #12
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr

0800a4fe <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800a4fe:	b480      	push	{r7}
 800a500:	b083      	sub	sp, #12
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800a506:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a50a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a50e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a512:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	4313      	orrs	r3, r2
 800a51a:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800a51e:	bf00      	nop
 800a520:	370c      	adds	r7, #12
 800a522:	46bd      	mov	sp, r7
 800a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a528:	4770      	bx	lr

0800a52a <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800a52a:	b480      	push	{r7}
 800a52c:	b083      	sub	sp, #12
 800a52e:	af00      	add	r7, sp, #0
 800a530:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800a532:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a536:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a53a:	f023 020f 	bic.w	r2, r3, #15
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	091b      	lsrs	r3, r3, #4
 800a542:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a546:	4313      	orrs	r3, r2
 800a548:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800a54c:	bf00      	nop
 800a54e:	370c      	adds	r7, #12
 800a550:	46bd      	mov	sp, r7
 800a552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a556:	4770      	bx	lr

0800a558 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800a558:	b480      	push	{r7}
 800a55a:	b083      	sub	sp, #12
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800a560:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a564:	689b      	ldr	r3, [r3, #8]
 800a566:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a56a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	4313      	orrs	r3, r2
 800a572:	608b      	str	r3, [r1, #8]
}
 800a574:	bf00      	nop
 800a576:	370c      	adds	r7, #12
 800a578:	46bd      	mov	sp, r7
 800a57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57e:	4770      	bx	lr

0800a580 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800a580:	b480      	push	{r7}
 800a582:	b083      	sub	sp, #12
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800a588:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a58c:	689b      	ldr	r3, [r3, #8]
 800a58e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800a592:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	4313      	orrs	r3, r2
 800a59a:	608b      	str	r3, [r1, #8]
}
 800a59c:	bf00      	nop
 800a59e:	370c      	adds	r7, #12
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr

0800a5a8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800a5ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a5b0:	689b      	ldr	r3, [r3, #8]
 800a5b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr

0800a5c0 <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800a5c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a5c8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a5cc:	011b      	lsls	r3, r3, #4
 800a5ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800a5e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a5e4:	689b      	ldr	r3, [r3, #8]
 800a5e6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr

0800a5f4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800a5f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a5fc:	689b      	ldr	r3, [r3, #8]
 800a5fe:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800a602:	4618      	mov	r0, r3
 800a604:	46bd      	mov	sp, r7
 800a606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60a:	4770      	bx	lr

0800a60c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800a60c:	b480      	push	{r7}
 800a60e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800a610:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a61a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a61e:	6013      	str	r3, [r2, #0]
}
 800a620:	bf00      	nop
 800a622:	46bd      	mov	sp, r7
 800a624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a628:	4770      	bx	lr

0800a62a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800a62a:	b480      	push	{r7}
 800a62c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800a62e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a638:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a63c:	6013      	str	r3, [r2, #0]
}
 800a63e:	bf00      	nop
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr

0800a648 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800a648:	b480      	push	{r7}
 800a64a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800a64c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a656:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a65a:	d101      	bne.n	800a660 <LL_RCC_PLL_IsReady+0x18>
 800a65c:	2301      	movs	r3, #1
 800a65e:	e000      	b.n	800a662 <LL_RCC_PLL_IsReady+0x1a>
 800a660:	2300      	movs	r3, #0
}
 800a662:	4618      	mov	r0, r3
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr

0800a66c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800a66c:	b480      	push	{r7}
 800a66e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800a670:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a674:	68db      	ldr	r3, [r3, #12]
 800a676:	0a1b      	lsrs	r3, r3, #8
 800a678:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	46bd      	mov	sp, r7
 800a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a684:	4770      	bx	lr

0800a686 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800a686:	b480      	push	{r7}
 800a688:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800a68a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a68e:	68db      	ldr	r3, [r3, #12]
 800a690:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800a694:	4618      	mov	r0, r3
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr

0800a69e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800a69e:	b480      	push	{r7}
 800a6a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800a6a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b4:	4770      	bx	lr

0800a6b6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800a6b6:	b480      	push	{r7}
 800a6b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800a6ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a6be:	68db      	ldr	r3, [r3, #12]
 800a6c0:	f003 0303 	and.w	r3, r3, #3
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6cc:	4770      	bx	lr

0800a6ce <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800a6ce:	b480      	push	{r7}
 800a6d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800a6d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a6d6:	689b      	ldr	r3, [r3, #8]
 800a6d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a6dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6e0:	d101      	bne.n	800a6e6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	e000      	b.n	800a6e8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800a6e6:	2300      	movs	r3, #0
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f0:	4770      	bx	lr

0800a6f2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800a6f2:	b480      	push	{r7}
 800a6f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800a6f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a6fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a6fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a702:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a706:	d101      	bne.n	800a70c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800a708:	2301      	movs	r3, #1
 800a70a:	e000      	b.n	800a70e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800a70c:	2300      	movs	r3, #0
}
 800a70e:	4618      	mov	r0, r3
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr

0800a718 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800a718:	b480      	push	{r7}
 800a71a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800a71c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a720:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800a724:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a728:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a72c:	d101      	bne.n	800a732 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800a72e:	2301      	movs	r3, #1
 800a730:	e000      	b.n	800a734 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800a732:	2300      	movs	r3, #0
}
 800a734:	4618      	mov	r0, r3
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr

0800a73e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800a73e:	b480      	push	{r7}
 800a740:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800a742:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a74c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a750:	d101      	bne.n	800a756 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800a752:	2301      	movs	r3, #1
 800a754:	e000      	b.n	800a758 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800a756:	2300      	movs	r3, #0
}
 800a758:	4618      	mov	r0, r3
 800a75a:	46bd      	mov	sp, r7
 800a75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a760:	4770      	bx	lr

0800a762 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800a762:	b480      	push	{r7}
 800a764:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800a766:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a76a:	689b      	ldr	r3, [r3, #8]
 800a76c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a770:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a774:	d101      	bne.n	800a77a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800a776:	2301      	movs	r3, #1
 800a778:	e000      	b.n	800a77c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800a77a:	2300      	movs	r3, #0
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	46bd      	mov	sp, r7
 800a780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a784:	4770      	bx	lr
	...

0800a788 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a788:	b590      	push	{r4, r7, lr}
 800a78a:	b08d      	sub	sp, #52	@ 0x34
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d101      	bne.n	800a79a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a796:	2301      	movs	r3, #1
 800a798:	e363      	b.n	800ae62 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f003 0320 	and.w	r3, r3, #32
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	f000 808d 	beq.w	800a8c2 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a7a8:	f7ff fe89 	bl	800a4be <LL_RCC_GetSysClkSource>
 800a7ac:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a7ae:	f7ff ff82 	bl	800a6b6 <LL_RCC_PLL_GetMainSource>
 800a7b2:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800a7b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d005      	beq.n	800a7c6 <HAL_RCC_OscConfig+0x3e>
 800a7ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7bc:	2b0c      	cmp	r3, #12
 800a7be:	d147      	bne.n	800a850 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800a7c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7c2:	2b01      	cmp	r3, #1
 800a7c4:	d144      	bne.n	800a850 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	69db      	ldr	r3, [r3, #28]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d101      	bne.n	800a7d2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	e347      	b.n	800ae62 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800a7d6:	f7ff fe34 	bl	800a442 <LL_RCC_MSI_GetRange>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	429c      	cmp	r4, r3
 800a7de:	d914      	bls.n	800a80a <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f000 fd2f 	bl	800b248 <RCC_SetFlashLatencyFromMSIRange>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d001      	beq.n	800a7f4 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	e336      	b.n	800ae62 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	f7ff fe0e 	bl	800a41a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6a1b      	ldr	r3, [r3, #32]
 800a802:	4618      	mov	r0, r3
 800a804:	f7ff fe32 	bl	800a46c <LL_RCC_MSI_SetCalibTrimming>
 800a808:	e013      	b.n	800a832 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a80e:	4618      	mov	r0, r3
 800a810:	f7ff fe03 	bl	800a41a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6a1b      	ldr	r3, [r3, #32]
 800a818:	4618      	mov	r0, r3
 800a81a:	f7ff fe27 	bl	800a46c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a822:	4618      	mov	r0, r3
 800a824:	f000 fd10 	bl	800b248 <RCC_SetFlashLatencyFromMSIRange>
 800a828:	4603      	mov	r3, r0
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d001      	beq.n	800a832 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800a82e:	2301      	movs	r3, #1
 800a830:	e317      	b.n	800ae62 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800a832:	f000 fcc9 	bl	800b1c8 <HAL_RCC_GetHCLKFreq>
 800a836:	4603      	mov	r3, r0
 800a838:	4aa4      	ldr	r2, [pc, #656]	@ (800aacc <HAL_RCC_OscConfig+0x344>)
 800a83a:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a83c:	4ba4      	ldr	r3, [pc, #656]	@ (800aad0 <HAL_RCC_OscConfig+0x348>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	4618      	mov	r0, r3
 800a842:	f7fa fa2f 	bl	8004ca4 <HAL_InitTick>
 800a846:	4603      	mov	r3, r0
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d039      	beq.n	800a8c0 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800a84c:	2301      	movs	r3, #1
 800a84e:	e308      	b.n	800ae62 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	69db      	ldr	r3, [r3, #28]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d01e      	beq.n	800a896 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a858:	f7ff fdb0 	bl	800a3bc <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a85c:	f7fa fa70 	bl	8004d40 <HAL_GetTick>
 800a860:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800a862:	e008      	b.n	800a876 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a864:	f7fa fa6c 	bl	8004d40 <HAL_GetTick>
 800a868:	4602      	mov	r2, r0
 800a86a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a86c:	1ad3      	subs	r3, r2, r3
 800a86e:	2b02      	cmp	r3, #2
 800a870:	d901      	bls.n	800a876 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800a872:	2303      	movs	r3, #3
 800a874:	e2f5      	b.n	800ae62 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800a876:	f7ff fdbf 	bl	800a3f8 <LL_RCC_MSI_IsReady>
 800a87a:	4603      	mov	r3, r0
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d0f1      	beq.n	800a864 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a884:	4618      	mov	r0, r3
 800a886:	f7ff fdc8 	bl	800a41a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6a1b      	ldr	r3, [r3, #32]
 800a88e:	4618      	mov	r0, r3
 800a890:	f7ff fdec 	bl	800a46c <LL_RCC_MSI_SetCalibTrimming>
 800a894:	e015      	b.n	800a8c2 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a896:	f7ff fda0 	bl	800a3da <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a89a:	f7fa fa51 	bl	8004d40 <HAL_GetTick>
 800a89e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800a8a0:	e008      	b.n	800a8b4 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a8a2:	f7fa fa4d 	bl	8004d40 <HAL_GetTick>
 800a8a6:	4602      	mov	r2, r0
 800a8a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8aa:	1ad3      	subs	r3, r2, r3
 800a8ac:	2b02      	cmp	r3, #2
 800a8ae:	d901      	bls.n	800a8b4 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800a8b0:	2303      	movs	r3, #3
 800a8b2:	e2d6      	b.n	800ae62 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800a8b4:	f7ff fda0 	bl	800a3f8 <LL_RCC_MSI_IsReady>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d1f1      	bne.n	800a8a2 <HAL_RCC_OscConfig+0x11a>
 800a8be:	e000      	b.n	800a8c2 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800a8c0:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f003 0301 	and.w	r3, r3, #1
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d047      	beq.n	800a95e <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a8ce:	f7ff fdf6 	bl	800a4be <LL_RCC_GetSysClkSource>
 800a8d2:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a8d4:	f7ff feef 	bl	800a6b6 <LL_RCC_PLL_GetMainSource>
 800a8d8:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800a8da:	6a3b      	ldr	r3, [r7, #32]
 800a8dc:	2b08      	cmp	r3, #8
 800a8de:	d005      	beq.n	800a8ec <HAL_RCC_OscConfig+0x164>
 800a8e0:	6a3b      	ldr	r3, [r7, #32]
 800a8e2:	2b0c      	cmp	r3, #12
 800a8e4:	d108      	bne.n	800a8f8 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800a8e6:	69fb      	ldr	r3, [r7, #28]
 800a8e8:	2b03      	cmp	r3, #3
 800a8ea:	d105      	bne.n	800a8f8 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d134      	bne.n	800a95e <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	e2b4      	b.n	800ae62 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	685b      	ldr	r3, [r3, #4]
 800a8fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a900:	d102      	bne.n	800a908 <HAL_RCC_OscConfig+0x180>
 800a902:	f7ff fbdd 	bl	800a0c0 <LL_RCC_HSE_Enable>
 800a906:	e001      	b.n	800a90c <HAL_RCC_OscConfig+0x184>
 800a908:	f7ff fbe9 	bl	800a0de <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d012      	beq.n	800a93a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a914:	f7fa fa14 	bl	8004d40 <HAL_GetTick>
 800a918:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800a91a:	e008      	b.n	800a92e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a91c:	f7fa fa10 	bl	8004d40 <HAL_GetTick>
 800a920:	4602      	mov	r2, r0
 800a922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a924:	1ad3      	subs	r3, r2, r3
 800a926:	2b64      	cmp	r3, #100	@ 0x64
 800a928:	d901      	bls.n	800a92e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800a92a:	2303      	movs	r3, #3
 800a92c:	e299      	b.n	800ae62 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800a92e:	f7ff fbe5 	bl	800a0fc <LL_RCC_HSE_IsReady>
 800a932:	4603      	mov	r3, r0
 800a934:	2b00      	cmp	r3, #0
 800a936:	d0f1      	beq.n	800a91c <HAL_RCC_OscConfig+0x194>
 800a938:	e011      	b.n	800a95e <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a93a:	f7fa fa01 	bl	8004d40 <HAL_GetTick>
 800a93e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800a940:	e008      	b.n	800a954 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a942:	f7fa f9fd 	bl	8004d40 <HAL_GetTick>
 800a946:	4602      	mov	r2, r0
 800a948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a94a:	1ad3      	subs	r3, r2, r3
 800a94c:	2b64      	cmp	r3, #100	@ 0x64
 800a94e:	d901      	bls.n	800a954 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800a950:	2303      	movs	r3, #3
 800a952:	e286      	b.n	800ae62 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800a954:	f7ff fbd2 	bl	800a0fc <LL_RCC_HSE_IsReady>
 800a958:	4603      	mov	r3, r0
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d1f1      	bne.n	800a942 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f003 0302 	and.w	r3, r3, #2
 800a966:	2b00      	cmp	r3, #0
 800a968:	d04c      	beq.n	800aa04 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a96a:	f7ff fda8 	bl	800a4be <LL_RCC_GetSysClkSource>
 800a96e:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a970:	f7ff fea1 	bl	800a6b6 <LL_RCC_PLL_GetMainSource>
 800a974:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800a976:	69bb      	ldr	r3, [r7, #24]
 800a978:	2b04      	cmp	r3, #4
 800a97a:	d005      	beq.n	800a988 <HAL_RCC_OscConfig+0x200>
 800a97c:	69bb      	ldr	r3, [r7, #24]
 800a97e:	2b0c      	cmp	r3, #12
 800a980:	d10e      	bne.n	800a9a0 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	2b02      	cmp	r3, #2
 800a986:	d10b      	bne.n	800a9a0 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	68db      	ldr	r3, [r3, #12]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d101      	bne.n	800a994 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800a990:	2301      	movs	r3, #1
 800a992:	e266      	b.n	800ae62 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	691b      	ldr	r3, [r3, #16]
 800a998:	4618      	mov	r0, r3
 800a99a:	f7ff fbf1 	bl	800a180 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800a99e:	e031      	b.n	800aa04 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	68db      	ldr	r3, [r3, #12]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d019      	beq.n	800a9dc <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a9a8:	f7ff fbba 	bl	800a120 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9ac:	f7fa f9c8 	bl	8004d40 <HAL_GetTick>
 800a9b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800a9b2:	e008      	b.n	800a9c6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a9b4:	f7fa f9c4 	bl	8004d40 <HAL_GetTick>
 800a9b8:	4602      	mov	r2, r0
 800a9ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9bc:	1ad3      	subs	r3, r2, r3
 800a9be:	2b02      	cmp	r3, #2
 800a9c0:	d901      	bls.n	800a9c6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a9c2:	2303      	movs	r3, #3
 800a9c4:	e24d      	b.n	800ae62 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800a9c6:	f7ff fbc9 	bl	800a15c <LL_RCC_HSI_IsReady>
 800a9ca:	4603      	mov	r3, r0
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d0f1      	beq.n	800a9b4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	691b      	ldr	r3, [r3, #16]
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f7ff fbd3 	bl	800a180 <LL_RCC_HSI_SetCalibTrimming>
 800a9da:	e013      	b.n	800aa04 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a9dc:	f7ff fbaf 	bl	800a13e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9e0:	f7fa f9ae 	bl	8004d40 <HAL_GetTick>
 800a9e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800a9e6:	e008      	b.n	800a9fa <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a9e8:	f7fa f9aa 	bl	8004d40 <HAL_GetTick>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f0:	1ad3      	subs	r3, r2, r3
 800a9f2:	2b02      	cmp	r3, #2
 800a9f4:	d901      	bls.n	800a9fa <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800a9f6:	2303      	movs	r3, #3
 800a9f8:	e233      	b.n	800ae62 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800a9fa:	f7ff fbaf 	bl	800a15c <LL_RCC_HSI_IsReady>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d1f1      	bne.n	800a9e8 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	f003 0308 	and.w	r3, r3, #8
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d106      	bne.n	800aa1e <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	f000 80a3 	beq.w	800ab64 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	695b      	ldr	r3, [r3, #20]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d076      	beq.n	800ab14 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f003 0310 	and.w	r3, r3, #16
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d046      	beq.n	800aac0 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800aa32:	f7ff fc66 	bl	800a302 <LL_RCC_LSI1_IsReady>
 800aa36:	4603      	mov	r3, r0
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d113      	bne.n	800aa64 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800aa3c:	f7ff fc3f 	bl	800a2be <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800aa40:	f7fa f97e 	bl	8004d40 <HAL_GetTick>
 800aa44:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800aa46:	e008      	b.n	800aa5a <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800aa48:	f7fa f97a 	bl	8004d40 <HAL_GetTick>
 800aa4c:	4602      	mov	r2, r0
 800aa4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa50:	1ad3      	subs	r3, r2, r3
 800aa52:	2b02      	cmp	r3, #2
 800aa54:	d901      	bls.n	800aa5a <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800aa56:	2303      	movs	r3, #3
 800aa58:	e203      	b.n	800ae62 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800aa5a:	f7ff fc52 	bl	800a302 <LL_RCC_LSI1_IsReady>
 800aa5e:	4603      	mov	r3, r0
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d0f1      	beq.n	800aa48 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800aa64:	f7ff fc5f 	bl	800a326 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa68:	f7fa f96a 	bl	8004d40 <HAL_GetTick>
 800aa6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800aa6e:	e008      	b.n	800aa82 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800aa70:	f7fa f966 	bl	8004d40 <HAL_GetTick>
 800aa74:	4602      	mov	r2, r0
 800aa76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa78:	1ad3      	subs	r3, r2, r3
 800aa7a:	2b03      	cmp	r3, #3
 800aa7c:	d901      	bls.n	800aa82 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800aa7e:	2303      	movs	r3, #3
 800aa80:	e1ef      	b.n	800ae62 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800aa82:	f7ff fc72 	bl	800a36a <LL_RCC_LSI2_IsReady>
 800aa86:	4603      	mov	r3, r0
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d0f1      	beq.n	800aa70 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	699b      	ldr	r3, [r3, #24]
 800aa90:	4618      	mov	r0, r3
 800aa92:	f7ff fc7c 	bl	800a38e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800aa96:	f7ff fc23 	bl	800a2e0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa9a:	f7fa f951 	bl	8004d40 <HAL_GetTick>
 800aa9e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800aaa0:	e008      	b.n	800aab4 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800aaa2:	f7fa f94d 	bl	8004d40 <HAL_GetTick>
 800aaa6:	4602      	mov	r2, r0
 800aaa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaaa:	1ad3      	subs	r3, r2, r3
 800aaac:	2b02      	cmp	r3, #2
 800aaae:	d901      	bls.n	800aab4 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800aab0:	2303      	movs	r3, #3
 800aab2:	e1d6      	b.n	800ae62 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800aab4:	f7ff fc25 	bl	800a302 <LL_RCC_LSI1_IsReady>
 800aab8:	4603      	mov	r3, r0
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d1f1      	bne.n	800aaa2 <HAL_RCC_OscConfig+0x31a>
 800aabe:	e051      	b.n	800ab64 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800aac0:	f7ff fbfd 	bl	800a2be <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aac4:	f7fa f93c 	bl	8004d40 <HAL_GetTick>
 800aac8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800aaca:	e00c      	b.n	800aae6 <HAL_RCC_OscConfig+0x35e>
 800aacc:	2000000c 	.word	0x2000000c
 800aad0:	2000002c 	.word	0x2000002c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800aad4:	f7fa f934 	bl	8004d40 <HAL_GetTick>
 800aad8:	4602      	mov	r2, r0
 800aada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aadc:	1ad3      	subs	r3, r2, r3
 800aade:	2b02      	cmp	r3, #2
 800aae0:	d901      	bls.n	800aae6 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800aae2:	2303      	movs	r3, #3
 800aae4:	e1bd      	b.n	800ae62 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800aae6:	f7ff fc0c 	bl	800a302 <LL_RCC_LSI1_IsReady>
 800aaea:	4603      	mov	r3, r0
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d0f1      	beq.n	800aad4 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800aaf0:	f7ff fc2a 	bl	800a348 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800aaf4:	e008      	b.n	800ab08 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800aaf6:	f7fa f923 	bl	8004d40 <HAL_GetTick>
 800aafa:	4602      	mov	r2, r0
 800aafc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aafe:	1ad3      	subs	r3, r2, r3
 800ab00:	2b03      	cmp	r3, #3
 800ab02:	d901      	bls.n	800ab08 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800ab04:	2303      	movs	r3, #3
 800ab06:	e1ac      	b.n	800ae62 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800ab08:	f7ff fc2f 	bl	800a36a <LL_RCC_LSI2_IsReady>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d1f1      	bne.n	800aaf6 <HAL_RCC_OscConfig+0x36e>
 800ab12:	e027      	b.n	800ab64 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800ab14:	f7ff fc18 	bl	800a348 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab18:	f7fa f912 	bl	8004d40 <HAL_GetTick>
 800ab1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800ab1e:	e008      	b.n	800ab32 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800ab20:	f7fa f90e 	bl	8004d40 <HAL_GetTick>
 800ab24:	4602      	mov	r2, r0
 800ab26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab28:	1ad3      	subs	r3, r2, r3
 800ab2a:	2b03      	cmp	r3, #3
 800ab2c:	d901      	bls.n	800ab32 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800ab2e:	2303      	movs	r3, #3
 800ab30:	e197      	b.n	800ae62 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800ab32:	f7ff fc1a 	bl	800a36a <LL_RCC_LSI2_IsReady>
 800ab36:	4603      	mov	r3, r0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d1f1      	bne.n	800ab20 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800ab3c:	f7ff fbd0 	bl	800a2e0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab40:	f7fa f8fe 	bl	8004d40 <HAL_GetTick>
 800ab44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800ab46:	e008      	b.n	800ab5a <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800ab48:	f7fa f8fa 	bl	8004d40 <HAL_GetTick>
 800ab4c:	4602      	mov	r2, r0
 800ab4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab50:	1ad3      	subs	r3, r2, r3
 800ab52:	2b02      	cmp	r3, #2
 800ab54:	d901      	bls.n	800ab5a <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800ab56:	2303      	movs	r3, #3
 800ab58:	e183      	b.n	800ae62 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800ab5a:	f7ff fbd2 	bl	800a302 <LL_RCC_LSI1_IsReady>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d1f1      	bne.n	800ab48 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f003 0304 	and.w	r3, r3, #4
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d05b      	beq.n	800ac28 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ab70:	4ba7      	ldr	r3, [pc, #668]	@ (800ae10 <HAL_RCC_OscConfig+0x688>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d114      	bne.n	800aba6 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800ab7c:	f7ff fa60 	bl	800a040 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ab80:	f7fa f8de 	bl	8004d40 <HAL_GetTick>
 800ab84:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ab86:	e008      	b.n	800ab9a <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab88:	f7fa f8da 	bl	8004d40 <HAL_GetTick>
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab90:	1ad3      	subs	r3, r2, r3
 800ab92:	2b02      	cmp	r3, #2
 800ab94:	d901      	bls.n	800ab9a <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800ab96:	2303      	movs	r3, #3
 800ab98:	e163      	b.n	800ae62 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ab9a:	4b9d      	ldr	r3, [pc, #628]	@ (800ae10 <HAL_RCC_OscConfig+0x688>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d0f0      	beq.n	800ab88 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	689b      	ldr	r3, [r3, #8]
 800abaa:	2b01      	cmp	r3, #1
 800abac:	d102      	bne.n	800abb4 <HAL_RCC_OscConfig+0x42c>
 800abae:	f7ff fb30 	bl	800a212 <LL_RCC_LSE_Enable>
 800abb2:	e00c      	b.n	800abce <HAL_RCC_OscConfig+0x446>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	689b      	ldr	r3, [r3, #8]
 800abb8:	2b05      	cmp	r3, #5
 800abba:	d104      	bne.n	800abc6 <HAL_RCC_OscConfig+0x43e>
 800abbc:	f7ff fb4b 	bl	800a256 <LL_RCC_LSE_EnableBypass>
 800abc0:	f7ff fb27 	bl	800a212 <LL_RCC_LSE_Enable>
 800abc4:	e003      	b.n	800abce <HAL_RCC_OscConfig+0x446>
 800abc6:	f7ff fb35 	bl	800a234 <LL_RCC_LSE_Disable>
 800abca:	f7ff fb55 	bl	800a278 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	689b      	ldr	r3, [r3, #8]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d014      	beq.n	800ac00 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800abd6:	f7fa f8b3 	bl	8004d40 <HAL_GetTick>
 800abda:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800abdc:	e00a      	b.n	800abf4 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abde:	f7fa f8af 	bl	8004d40 <HAL_GetTick>
 800abe2:	4602      	mov	r2, r0
 800abe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe6:	1ad3      	subs	r3, r2, r3
 800abe8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800abec:	4293      	cmp	r3, r2
 800abee:	d901      	bls.n	800abf4 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800abf0:	2303      	movs	r3, #3
 800abf2:	e136      	b.n	800ae62 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800abf4:	f7ff fb51 	bl	800a29a <LL_RCC_LSE_IsReady>
 800abf8:	4603      	mov	r3, r0
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d0ef      	beq.n	800abde <HAL_RCC_OscConfig+0x456>
 800abfe:	e013      	b.n	800ac28 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac00:	f7fa f89e 	bl	8004d40 <HAL_GetTick>
 800ac04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800ac06:	e00a      	b.n	800ac1e <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac08:	f7fa f89a 	bl	8004d40 <HAL_GetTick>
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac10:	1ad3      	subs	r3, r2, r3
 800ac12:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac16:	4293      	cmp	r3, r2
 800ac18:	d901      	bls.n	800ac1e <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800ac1a:	2303      	movs	r3, #3
 800ac1c:	e121      	b.n	800ae62 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800ac1e:	f7ff fb3c 	bl	800a29a <LL_RCC_LSE_IsReady>
 800ac22:	4603      	mov	r3, r0
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d1ef      	bne.n	800ac08 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d02c      	beq.n	800ac8e <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d014      	beq.n	800ac66 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800ac3c:	f7ff fab5 	bl	800a1aa <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac40:	f7fa f87e 	bl	8004d40 <HAL_GetTick>
 800ac44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800ac46:	e008      	b.n	800ac5a <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ac48:	f7fa f87a 	bl	8004d40 <HAL_GetTick>
 800ac4c:	4602      	mov	r2, r0
 800ac4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac50:	1ad3      	subs	r3, r2, r3
 800ac52:	2b02      	cmp	r3, #2
 800ac54:	d901      	bls.n	800ac5a <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800ac56:	2303      	movs	r3, #3
 800ac58:	e103      	b.n	800ae62 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800ac5a:	f7ff fac8 	bl	800a1ee <LL_RCC_HSI48_IsReady>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d0f1      	beq.n	800ac48 <HAL_RCC_OscConfig+0x4c0>
 800ac64:	e013      	b.n	800ac8e <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ac66:	f7ff fab1 	bl	800a1cc <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac6a:	f7fa f869 	bl	8004d40 <HAL_GetTick>
 800ac6e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800ac70:	e008      	b.n	800ac84 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ac72:	f7fa f865 	bl	8004d40 <HAL_GetTick>
 800ac76:	4602      	mov	r2, r0
 800ac78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac7a:	1ad3      	subs	r3, r2, r3
 800ac7c:	2b02      	cmp	r3, #2
 800ac7e:	d901      	bls.n	800ac84 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800ac80:	2303      	movs	r3, #3
 800ac82:	e0ee      	b.n	800ae62 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800ac84:	f7ff fab3 	bl	800a1ee <LL_RCC_HSI48_IsReady>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d1f1      	bne.n	800ac72 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	f000 80e4 	beq.w	800ae60 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ac98:	f7ff fc11 	bl	800a4be <LL_RCC_GetSysClkSource>
 800ac9c:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800ac9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aca2:	68db      	ldr	r3, [r3, #12]
 800aca4:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acaa:	2b02      	cmp	r3, #2
 800acac:	f040 80b4 	bne.w	800ae18 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	f003 0203 	and.w	r2, r3, #3
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acba:	429a      	cmp	r2, r3
 800acbc:	d123      	bne.n	800ad06 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800acc8:	429a      	cmp	r2, r3
 800acca:	d11c      	bne.n	800ad06 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	0a1b      	lsrs	r3, r3, #8
 800acd0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800acd8:	429a      	cmp	r2, r3
 800acda:	d114      	bne.n	800ad06 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800ace6:	429a      	cmp	r2, r3
 800ace8:	d10d      	bne.n	800ad06 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d106      	bne.n	800ad06 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800ad02:	429a      	cmp	r2, r3
 800ad04:	d05d      	beq.n	800adc2 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	2b0c      	cmp	r3, #12
 800ad0a:	d058      	beq.n	800adbe <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800ad0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d001      	beq.n	800ad1e <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	e0a1      	b.n	800ae62 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800ad1e:	f7ff fc84 	bl	800a62a <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ad22:	f7fa f80d 	bl	8004d40 <HAL_GetTick>
 800ad26:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ad28:	e008      	b.n	800ad3c <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad2a:	f7fa f809 	bl	8004d40 <HAL_GetTick>
 800ad2e:	4602      	mov	r2, r0
 800ad30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad32:	1ad3      	subs	r3, r2, r3
 800ad34:	2b02      	cmp	r3, #2
 800ad36:	d901      	bls.n	800ad3c <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800ad38:	2303      	movs	r3, #3
 800ad3a:	e092      	b.n	800ae62 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ad3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d1ef      	bne.n	800ad2a <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ad4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad4e:	68da      	ldr	r2, [r3, #12]
 800ad50:	4b30      	ldr	r3, [pc, #192]	@ (800ae14 <HAL_RCC_OscConfig+0x68c>)
 800ad52:	4013      	ands	r3, r2
 800ad54:	687a      	ldr	r2, [r7, #4]
 800ad56:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800ad5c:	4311      	orrs	r1, r2
 800ad5e:	687a      	ldr	r2, [r7, #4]
 800ad60:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800ad62:	0212      	lsls	r2, r2, #8
 800ad64:	4311      	orrs	r1, r2
 800ad66:	687a      	ldr	r2, [r7, #4]
 800ad68:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800ad6a:	4311      	orrs	r1, r2
 800ad6c:	687a      	ldr	r2, [r7, #4]
 800ad6e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800ad70:	4311      	orrs	r1, r2
 800ad72:	687a      	ldr	r2, [r7, #4]
 800ad74:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800ad76:	430a      	orrs	r2, r1
 800ad78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800ad80:	f7ff fc44 	bl	800a60c <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ad84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad88:	68db      	ldr	r3, [r3, #12]
 800ad8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ad8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ad92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ad94:	f7f9 ffd4 	bl	8004d40 <HAL_GetTick>
 800ad98:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ad9a:	e008      	b.n	800adae <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad9c:	f7f9 ffd0 	bl	8004d40 <HAL_GetTick>
 800ada0:	4602      	mov	r2, r0
 800ada2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ada4:	1ad3      	subs	r3, r2, r3
 800ada6:	2b02      	cmp	r3, #2
 800ada8:	d901      	bls.n	800adae <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800adaa:	2303      	movs	r3, #3
 800adac:	e059      	b.n	800ae62 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800adae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d0ef      	beq.n	800ad9c <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800adbc:	e050      	b.n	800ae60 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800adbe:	2301      	movs	r3, #1
 800adc0:	e04f      	b.n	800ae62 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800adc2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d147      	bne.n	800ae60 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800add0:	f7ff fc1c 	bl	800a60c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800add4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800add8:	68db      	ldr	r3, [r3, #12]
 800adda:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800adde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ade2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ade4:	f7f9 ffac 	bl	8004d40 <HAL_GetTick>
 800ade8:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800adea:	e008      	b.n	800adfe <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800adec:	f7f9 ffa8 	bl	8004d40 <HAL_GetTick>
 800adf0:	4602      	mov	r2, r0
 800adf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adf4:	1ad3      	subs	r3, r2, r3
 800adf6:	2b02      	cmp	r3, #2
 800adf8:	d901      	bls.n	800adfe <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800adfa:	2303      	movs	r3, #3
 800adfc:	e031      	b.n	800ae62 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800adfe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d0ef      	beq.n	800adec <HAL_RCC_OscConfig+0x664>
 800ae0c:	e028      	b.n	800ae60 <HAL_RCC_OscConfig+0x6d8>
 800ae0e:	bf00      	nop
 800ae10:	58000400 	.word	0x58000400
 800ae14:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	2b0c      	cmp	r3, #12
 800ae1c:	d01e      	beq.n	800ae5c <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae1e:	f7ff fc04 	bl	800a62a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae22:	f7f9 ff8d 	bl	8004d40 <HAL_GetTick>
 800ae26:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ae28:	e008      	b.n	800ae3c <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae2a:	f7f9 ff89 	bl	8004d40 <HAL_GetTick>
 800ae2e:	4602      	mov	r2, r0
 800ae30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae32:	1ad3      	subs	r3, r2, r3
 800ae34:	2b02      	cmp	r3, #2
 800ae36:	d901      	bls.n	800ae3c <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800ae38:	2303      	movs	r3, #3
 800ae3a:	e012      	b.n	800ae62 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ae3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d1ef      	bne.n	800ae2a <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800ae4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ae4e:	68da      	ldr	r2, [r3, #12]
 800ae50:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ae54:	4b05      	ldr	r3, [pc, #20]	@ (800ae6c <HAL_RCC_OscConfig+0x6e4>)
 800ae56:	4013      	ands	r3, r2
 800ae58:	60cb      	str	r3, [r1, #12]
 800ae5a:	e001      	b.n	800ae60 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	e000      	b.n	800ae62 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800ae60:	2300      	movs	r3, #0
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3734      	adds	r7, #52	@ 0x34
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd90      	pop	{r4, r7, pc}
 800ae6a:	bf00      	nop
 800ae6c:	eefefffc 	.word	0xeefefffc

0800ae70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b084      	sub	sp, #16
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
 800ae78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d101      	bne.n	800ae84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ae80:	2301      	movs	r3, #1
 800ae82:	e12d      	b.n	800b0e0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ae84:	4b98      	ldr	r3, [pc, #608]	@ (800b0e8 <HAL_RCC_ClockConfig+0x278>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f003 0307 	and.w	r3, r3, #7
 800ae8c:	683a      	ldr	r2, [r7, #0]
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d91b      	bls.n	800aeca <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae92:	4b95      	ldr	r3, [pc, #596]	@ (800b0e8 <HAL_RCC_ClockConfig+0x278>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f023 0207 	bic.w	r2, r3, #7
 800ae9a:	4993      	ldr	r1, [pc, #588]	@ (800b0e8 <HAL_RCC_ClockConfig+0x278>)
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aea2:	f7f9 ff4d 	bl	8004d40 <HAL_GetTick>
 800aea6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aea8:	e008      	b.n	800aebc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800aeaa:	f7f9 ff49 	bl	8004d40 <HAL_GetTick>
 800aeae:	4602      	mov	r2, r0
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	1ad3      	subs	r3, r2, r3
 800aeb4:	2b02      	cmp	r3, #2
 800aeb6:	d901      	bls.n	800aebc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800aeb8:	2303      	movs	r3, #3
 800aeba:	e111      	b.n	800b0e0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aebc:	4b8a      	ldr	r3, [pc, #552]	@ (800b0e8 <HAL_RCC_ClockConfig+0x278>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	f003 0307 	and.w	r3, r3, #7
 800aec4:	683a      	ldr	r2, [r7, #0]
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d1ef      	bne.n	800aeaa <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f003 0302 	and.w	r3, r3, #2
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d016      	beq.n	800af04 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	689b      	ldr	r3, [r3, #8]
 800aeda:	4618      	mov	r0, r3
 800aedc:	f7ff fafb 	bl	800a4d6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800aee0:	f7f9 ff2e 	bl	8004d40 <HAL_GetTick>
 800aee4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800aee6:	e008      	b.n	800aefa <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800aee8:	f7f9 ff2a 	bl	8004d40 <HAL_GetTick>
 800aeec:	4602      	mov	r2, r0
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	1ad3      	subs	r3, r2, r3
 800aef2:	2b02      	cmp	r3, #2
 800aef4:	d901      	bls.n	800aefa <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800aef6:	2303      	movs	r3, #3
 800aef8:	e0f2      	b.n	800b0e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800aefa:	f7ff fbe8 	bl	800a6ce <LL_RCC_IsActiveFlag_HPRE>
 800aefe:	4603      	mov	r3, r0
 800af00:	2b00      	cmp	r3, #0
 800af02:	d0f1      	beq.n	800aee8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f003 0320 	and.w	r3, r3, #32
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d016      	beq.n	800af3e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	695b      	ldr	r3, [r3, #20]
 800af14:	4618      	mov	r0, r3
 800af16:	f7ff faf2 	bl	800a4fe <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800af1a:	f7f9 ff11 	bl	8004d40 <HAL_GetTick>
 800af1e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800af20:	e008      	b.n	800af34 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800af22:	f7f9 ff0d 	bl	8004d40 <HAL_GetTick>
 800af26:	4602      	mov	r2, r0
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	1ad3      	subs	r3, r2, r3
 800af2c:	2b02      	cmp	r3, #2
 800af2e:	d901      	bls.n	800af34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800af30:	2303      	movs	r3, #3
 800af32:	e0d5      	b.n	800b0e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800af34:	f7ff fbdd 	bl	800a6f2 <LL_RCC_IsActiveFlag_C2HPRE>
 800af38:	4603      	mov	r3, r0
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d0f1      	beq.n	800af22 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af46:	2b00      	cmp	r3, #0
 800af48:	d016      	beq.n	800af78 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	699b      	ldr	r3, [r3, #24]
 800af4e:	4618      	mov	r0, r3
 800af50:	f7ff faeb 	bl	800a52a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800af54:	f7f9 fef4 	bl	8004d40 <HAL_GetTick>
 800af58:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800af5a:	e008      	b.n	800af6e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800af5c:	f7f9 fef0 	bl	8004d40 <HAL_GetTick>
 800af60:	4602      	mov	r2, r0
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	1ad3      	subs	r3, r2, r3
 800af66:	2b02      	cmp	r3, #2
 800af68:	d901      	bls.n	800af6e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800af6a:	2303      	movs	r3, #3
 800af6c:	e0b8      	b.n	800b0e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800af6e:	f7ff fbd3 	bl	800a718 <LL_RCC_IsActiveFlag_SHDHPRE>
 800af72:	4603      	mov	r3, r0
 800af74:	2b00      	cmp	r3, #0
 800af76:	d0f1      	beq.n	800af5c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f003 0304 	and.w	r3, r3, #4
 800af80:	2b00      	cmp	r3, #0
 800af82:	d016      	beq.n	800afb2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	68db      	ldr	r3, [r3, #12]
 800af88:	4618      	mov	r0, r3
 800af8a:	f7ff fae5 	bl	800a558 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800af8e:	f7f9 fed7 	bl	8004d40 <HAL_GetTick>
 800af92:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800af94:	e008      	b.n	800afa8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800af96:	f7f9 fed3 	bl	8004d40 <HAL_GetTick>
 800af9a:	4602      	mov	r2, r0
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	1ad3      	subs	r3, r2, r3
 800afa0:	2b02      	cmp	r3, #2
 800afa2:	d901      	bls.n	800afa8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800afa4:	2303      	movs	r3, #3
 800afa6:	e09b      	b.n	800b0e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800afa8:	f7ff fbc9 	bl	800a73e <LL_RCC_IsActiveFlag_PPRE1>
 800afac:	4603      	mov	r3, r0
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d0f1      	beq.n	800af96 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f003 0308 	and.w	r3, r3, #8
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d017      	beq.n	800afee <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	691b      	ldr	r3, [r3, #16]
 800afc2:	00db      	lsls	r3, r3, #3
 800afc4:	4618      	mov	r0, r3
 800afc6:	f7ff fadb 	bl	800a580 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800afca:	f7f9 feb9 	bl	8004d40 <HAL_GetTick>
 800afce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800afd0:	e008      	b.n	800afe4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800afd2:	f7f9 feb5 	bl	8004d40 <HAL_GetTick>
 800afd6:	4602      	mov	r2, r0
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	1ad3      	subs	r3, r2, r3
 800afdc:	2b02      	cmp	r3, #2
 800afde:	d901      	bls.n	800afe4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800afe0:	2303      	movs	r3, #3
 800afe2:	e07d      	b.n	800b0e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800afe4:	f7ff fbbd 	bl	800a762 <LL_RCC_IsActiveFlag_PPRE2>
 800afe8:	4603      	mov	r3, r0
 800afea:	2b00      	cmp	r3, #0
 800afec:	d0f1      	beq.n	800afd2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f003 0301 	and.w	r3, r3, #1
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d043      	beq.n	800b082 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	2b02      	cmp	r3, #2
 800b000:	d106      	bne.n	800b010 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800b002:	f7ff f87b 	bl	800a0fc <LL_RCC_HSE_IsReady>
 800b006:	4603      	mov	r3, r0
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d11e      	bne.n	800b04a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b00c:	2301      	movs	r3, #1
 800b00e:	e067      	b.n	800b0e0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	2b03      	cmp	r3, #3
 800b016:	d106      	bne.n	800b026 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800b018:	f7ff fb16 	bl	800a648 <LL_RCC_PLL_IsReady>
 800b01c:	4603      	mov	r3, r0
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d113      	bne.n	800b04a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b022:	2301      	movs	r3, #1
 800b024:	e05c      	b.n	800b0e0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	685b      	ldr	r3, [r3, #4]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d106      	bne.n	800b03c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800b02e:	f7ff f9e3 	bl	800a3f8 <LL_RCC_MSI_IsReady>
 800b032:	4603      	mov	r3, r0
 800b034:	2b00      	cmp	r3, #0
 800b036:	d108      	bne.n	800b04a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b038:	2301      	movs	r3, #1
 800b03a:	e051      	b.n	800b0e0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800b03c:	f7ff f88e 	bl	800a15c <LL_RCC_HSI_IsReady>
 800b040:	4603      	mov	r3, r0
 800b042:	2b00      	cmp	r3, #0
 800b044:	d101      	bne.n	800b04a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b046:	2301      	movs	r3, #1
 800b048:	e04a      	b.n	800b0e0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	4618      	mov	r0, r3
 800b050:	f7ff fa21 	bl	800a496 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b054:	f7f9 fe74 	bl	8004d40 <HAL_GetTick>
 800b058:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b05a:	e00a      	b.n	800b072 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b05c:	f7f9 fe70 	bl	8004d40 <HAL_GetTick>
 800b060:	4602      	mov	r2, r0
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	1ad3      	subs	r3, r2, r3
 800b066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b06a:	4293      	cmp	r3, r2
 800b06c:	d901      	bls.n	800b072 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800b06e:	2303      	movs	r3, #3
 800b070:	e036      	b.n	800b0e0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b072:	f7ff fa24 	bl	800a4be <LL_RCC_GetSysClkSource>
 800b076:	4602      	mov	r2, r0
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	009b      	lsls	r3, r3, #2
 800b07e:	429a      	cmp	r2, r3
 800b080:	d1ec      	bne.n	800b05c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b082:	4b19      	ldr	r3, [pc, #100]	@ (800b0e8 <HAL_RCC_ClockConfig+0x278>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f003 0307 	and.w	r3, r3, #7
 800b08a:	683a      	ldr	r2, [r7, #0]
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d21b      	bcs.n	800b0c8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b090:	4b15      	ldr	r3, [pc, #84]	@ (800b0e8 <HAL_RCC_ClockConfig+0x278>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	f023 0207 	bic.w	r2, r3, #7
 800b098:	4913      	ldr	r1, [pc, #76]	@ (800b0e8 <HAL_RCC_ClockConfig+0x278>)
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	4313      	orrs	r3, r2
 800b09e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0a0:	f7f9 fe4e 	bl	8004d40 <HAL_GetTick>
 800b0a4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b0a6:	e008      	b.n	800b0ba <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b0a8:	f7f9 fe4a 	bl	8004d40 <HAL_GetTick>
 800b0ac:	4602      	mov	r2, r0
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	1ad3      	subs	r3, r2, r3
 800b0b2:	2b02      	cmp	r3, #2
 800b0b4:	d901      	bls.n	800b0ba <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800b0b6:	2303      	movs	r3, #3
 800b0b8:	e012      	b.n	800b0e0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b0ba:	4b0b      	ldr	r3, [pc, #44]	@ (800b0e8 <HAL_RCC_ClockConfig+0x278>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f003 0307 	and.w	r3, r3, #7
 800b0c2:	683a      	ldr	r2, [r7, #0]
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	d1ef      	bne.n	800b0a8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800b0c8:	f000 f87e 	bl	800b1c8 <HAL_RCC_GetHCLKFreq>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	4a07      	ldr	r2, [pc, #28]	@ (800b0ec <HAL_RCC_ClockConfig+0x27c>)
 800b0d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800b0d2:	f7f9 fe41 	bl	8004d58 <HAL_GetTickPrio>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f7f9 fde3 	bl	8004ca4 <HAL_InitTick>
 800b0de:	4603      	mov	r3, r0
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3710      	adds	r7, #16
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}
 800b0e8:	58004000 	.word	0x58004000
 800b0ec:	2000000c 	.word	0x2000000c

0800b0f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b0f0:	b590      	push	{r4, r7, lr}
 800b0f2:	b085      	sub	sp, #20
 800b0f4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b0f6:	f7ff f9e2 	bl	800a4be <LL_RCC_GetSysClkSource>
 800b0fa:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d10a      	bne.n	800b118 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800b102:	f7ff f99e 	bl	800a442 <LL_RCC_MSI_GetRange>
 800b106:	4603      	mov	r3, r0
 800b108:	091b      	lsrs	r3, r3, #4
 800b10a:	f003 030f 	and.w	r3, r3, #15
 800b10e:	4a2b      	ldr	r2, [pc, #172]	@ (800b1bc <HAL_RCC_GetSysClockFreq+0xcc>)
 800b110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b114:	60fb      	str	r3, [r7, #12]
 800b116:	e04b      	b.n	800b1b0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2b04      	cmp	r3, #4
 800b11c:	d102      	bne.n	800b124 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b11e:	4b28      	ldr	r3, [pc, #160]	@ (800b1c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800b120:	60fb      	str	r3, [r7, #12]
 800b122:	e045      	b.n	800b1b0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2b08      	cmp	r3, #8
 800b128:	d10a      	bne.n	800b140 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800b12a:	f7fe ffb7 	bl	800a09c <LL_RCC_HSE_IsEnabledDiv2>
 800b12e:	4603      	mov	r3, r0
 800b130:	2b01      	cmp	r3, #1
 800b132:	d102      	bne.n	800b13a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800b134:	4b22      	ldr	r3, [pc, #136]	@ (800b1c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800b136:	60fb      	str	r3, [r7, #12]
 800b138:	e03a      	b.n	800b1b0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800b13a:	4b22      	ldr	r3, [pc, #136]	@ (800b1c4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800b13c:	60fb      	str	r3, [r7, #12]
 800b13e:	e037      	b.n	800b1b0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800b140:	f7ff fab9 	bl	800a6b6 <LL_RCC_PLL_GetMainSource>
 800b144:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	2b02      	cmp	r3, #2
 800b14a:	d003      	beq.n	800b154 <HAL_RCC_GetSysClockFreq+0x64>
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	2b03      	cmp	r3, #3
 800b150:	d003      	beq.n	800b15a <HAL_RCC_GetSysClockFreq+0x6a>
 800b152:	e00d      	b.n	800b170 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800b154:	4b1a      	ldr	r3, [pc, #104]	@ (800b1c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800b156:	60bb      	str	r3, [r7, #8]
        break;
 800b158:	e015      	b.n	800b186 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800b15a:	f7fe ff9f 	bl	800a09c <LL_RCC_HSE_IsEnabledDiv2>
 800b15e:	4603      	mov	r3, r0
 800b160:	2b01      	cmp	r3, #1
 800b162:	d102      	bne.n	800b16a <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800b164:	4b16      	ldr	r3, [pc, #88]	@ (800b1c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800b166:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800b168:	e00d      	b.n	800b186 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800b16a:	4b16      	ldr	r3, [pc, #88]	@ (800b1c4 <HAL_RCC_GetSysClockFreq+0xd4>)
 800b16c:	60bb      	str	r3, [r7, #8]
        break;
 800b16e:	e00a      	b.n	800b186 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800b170:	f7ff f967 	bl	800a442 <LL_RCC_MSI_GetRange>
 800b174:	4603      	mov	r3, r0
 800b176:	091b      	lsrs	r3, r3, #4
 800b178:	f003 030f 	and.w	r3, r3, #15
 800b17c:	4a0f      	ldr	r2, [pc, #60]	@ (800b1bc <HAL_RCC_GetSysClockFreq+0xcc>)
 800b17e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b182:	60bb      	str	r3, [r7, #8]
        break;
 800b184:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800b186:	f7ff fa71 	bl	800a66c <LL_RCC_PLL_GetN>
 800b18a:	4602      	mov	r2, r0
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	fb03 f402 	mul.w	r4, r3, r2
 800b192:	f7ff fa84 	bl	800a69e <LL_RCC_PLL_GetDivider>
 800b196:	4603      	mov	r3, r0
 800b198:	091b      	lsrs	r3, r3, #4
 800b19a:	3301      	adds	r3, #1
 800b19c:	fbb4 f4f3 	udiv	r4, r4, r3
 800b1a0:	f7ff fa71 	bl	800a686 <LL_RCC_PLL_GetR>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	0f5b      	lsrs	r3, r3, #29
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	fbb4 f3f3 	udiv	r3, r4, r3
 800b1ae:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3714      	adds	r7, #20
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd90      	pop	{r4, r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	08014a40 	.word	0x08014a40
 800b1c0:	00f42400 	.word	0x00f42400
 800b1c4:	01e84800 	.word	0x01e84800

0800b1c8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b1c8:	b598      	push	{r3, r4, r7, lr}
 800b1ca:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800b1cc:	f7ff ff90 	bl	800b0f0 <HAL_RCC_GetSysClockFreq>
 800b1d0:	4604      	mov	r4, r0
 800b1d2:	f7ff f9e9 	bl	800a5a8 <LL_RCC_GetAHBPrescaler>
 800b1d6:	4603      	mov	r3, r0
 800b1d8:	091b      	lsrs	r3, r3, #4
 800b1da:	f003 030f 	and.w	r3, r3, #15
 800b1de:	4a03      	ldr	r2, [pc, #12]	@ (800b1ec <HAL_RCC_GetHCLKFreq+0x24>)
 800b1e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1e4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	bd98      	pop	{r3, r4, r7, pc}
 800b1ec:	080149e0 	.word	0x080149e0

0800b1f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b1f0:	b598      	push	{r3, r4, r7, lr}
 800b1f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800b1f4:	f7ff ffe8 	bl	800b1c8 <HAL_RCC_GetHCLKFreq>
 800b1f8:	4604      	mov	r4, r0
 800b1fa:	f7ff f9ef 	bl	800a5dc <LL_RCC_GetAPB1Prescaler>
 800b1fe:	4603      	mov	r3, r0
 800b200:	0a1b      	lsrs	r3, r3, #8
 800b202:	f003 0307 	and.w	r3, r3, #7
 800b206:	4a04      	ldr	r2, [pc, #16]	@ (800b218 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b20c:	f003 031f 	and.w	r3, r3, #31
 800b210:	fa24 f303 	lsr.w	r3, r4, r3
}
 800b214:	4618      	mov	r0, r3
 800b216:	bd98      	pop	{r3, r4, r7, pc}
 800b218:	08014a20 	.word	0x08014a20

0800b21c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b21c:	b598      	push	{r3, r4, r7, lr}
 800b21e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800b220:	f7ff ffd2 	bl	800b1c8 <HAL_RCC_GetHCLKFreq>
 800b224:	4604      	mov	r4, r0
 800b226:	f7ff f9e5 	bl	800a5f4 <LL_RCC_GetAPB2Prescaler>
 800b22a:	4603      	mov	r3, r0
 800b22c:	0adb      	lsrs	r3, r3, #11
 800b22e:	f003 0307 	and.w	r3, r3, #7
 800b232:	4a04      	ldr	r2, [pc, #16]	@ (800b244 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b234:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b238:	f003 031f 	and.w	r3, r3, #31
 800b23c:	fa24 f303 	lsr.w	r3, r4, r3
}
 800b240:	4618      	mov	r0, r3
 800b242:	bd98      	pop	{r3, r4, r7, pc}
 800b244:	08014a20 	.word	0x08014a20

0800b248 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800b248:	b590      	push	{r4, r7, lr}
 800b24a:	b085      	sub	sp, #20
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2bb0      	cmp	r3, #176	@ 0xb0
 800b254:	d903      	bls.n	800b25e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800b256:	4b15      	ldr	r3, [pc, #84]	@ (800b2ac <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800b258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b25a:	60fb      	str	r3, [r7, #12]
 800b25c:	e007      	b.n	800b26e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	091b      	lsrs	r3, r3, #4
 800b262:	f003 030f 	and.w	r3, r3, #15
 800b266:	4a11      	ldr	r2, [pc, #68]	@ (800b2ac <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800b268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b26c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800b26e:	f7ff f9a7 	bl	800a5c0 <LL_RCC_GetAHB4Prescaler>
 800b272:	4603      	mov	r3, r0
 800b274:	091b      	lsrs	r3, r3, #4
 800b276:	f003 030f 	and.w	r3, r3, #15
 800b27a:	4a0d      	ldr	r2, [pc, #52]	@ (800b2b0 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800b27c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b280:	68fa      	ldr	r2, [r7, #12]
 800b282:	fbb2 f3f3 	udiv	r3, r2, r3
 800b286:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	4a0a      	ldr	r2, [pc, #40]	@ (800b2b4 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800b28c:	fba2 2303 	umull	r2, r3, r2, r3
 800b290:	0c9c      	lsrs	r4, r3, #18
 800b292:	f7fe fee5 	bl	800a060 <HAL_PWREx_GetVoltageRange>
 800b296:	4603      	mov	r3, r0
 800b298:	4619      	mov	r1, r3
 800b29a:	4620      	mov	r0, r4
 800b29c:	f000 f80c 	bl	800b2b8 <RCC_SetFlashLatency>
 800b2a0:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3714      	adds	r7, #20
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd90      	pop	{r4, r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	08014a40 	.word	0x08014a40
 800b2b0:	080149e0 	.word	0x080149e0
 800b2b4:	431bde83 	.word	0x431bde83

0800b2b8 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800b2b8:	b590      	push	{r4, r7, lr}
 800b2ba:	b093      	sub	sp, #76	@ 0x4c
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800b2c2:	4b37      	ldr	r3, [pc, #220]	@ (800b3a0 <RCC_SetFlashLatency+0xe8>)
 800b2c4:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800b2c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b2ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800b2ce:	4a35      	ldr	r2, [pc, #212]	@ (800b3a4 <RCC_SetFlashLatency+0xec>)
 800b2d0:	f107 031c 	add.w	r3, r7, #28
 800b2d4:	ca07      	ldmia	r2, {r0, r1, r2}
 800b2d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800b2da:	4b33      	ldr	r3, [pc, #204]	@ (800b3a8 <RCC_SetFlashLatency+0xf0>)
 800b2dc:	f107 040c 	add.w	r4, r7, #12
 800b2e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b2e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b2f0:	d11a      	bne.n	800b328 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	643b      	str	r3, [r7, #64]	@ 0x40
 800b2f6:	e013      	b.n	800b320 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800b2f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b2fa:	009b      	lsls	r3, r3, #2
 800b2fc:	3348      	adds	r3, #72	@ 0x48
 800b2fe:	443b      	add	r3, r7
 800b300:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800b304:	687a      	ldr	r2, [r7, #4]
 800b306:	429a      	cmp	r2, r3
 800b308:	d807      	bhi.n	800b31a <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800b30a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b30c:	009b      	lsls	r3, r3, #2
 800b30e:	3348      	adds	r3, #72	@ 0x48
 800b310:	443b      	add	r3, r7
 800b312:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800b316:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800b318:	e020      	b.n	800b35c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800b31a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b31c:	3301      	adds	r3, #1
 800b31e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b320:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b322:	2b03      	cmp	r3, #3
 800b324:	d9e8      	bls.n	800b2f8 <RCC_SetFlashLatency+0x40>
 800b326:	e019      	b.n	800b35c <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800b328:	2300      	movs	r3, #0
 800b32a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b32c:	e013      	b.n	800b356 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800b32e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b330:	009b      	lsls	r3, r3, #2
 800b332:	3348      	adds	r3, #72	@ 0x48
 800b334:	443b      	add	r3, r7
 800b336:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800b33a:	687a      	ldr	r2, [r7, #4]
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d807      	bhi.n	800b350 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800b340:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b342:	009b      	lsls	r3, r3, #2
 800b344:	3348      	adds	r3, #72	@ 0x48
 800b346:	443b      	add	r3, r7
 800b348:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800b34c:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800b34e:	e005      	b.n	800b35c <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800b350:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b352:	3301      	adds	r3, #1
 800b354:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b356:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b358:	2b02      	cmp	r3, #2
 800b35a:	d9e8      	bls.n	800b32e <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800b35c:	4b13      	ldr	r3, [pc, #76]	@ (800b3ac <RCC_SetFlashLatency+0xf4>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f023 0207 	bic.w	r2, r3, #7
 800b364:	4911      	ldr	r1, [pc, #68]	@ (800b3ac <RCC_SetFlashLatency+0xf4>)
 800b366:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b368:	4313      	orrs	r3, r2
 800b36a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b36c:	f7f9 fce8 	bl	8004d40 <HAL_GetTick>
 800b370:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800b372:	e008      	b.n	800b386 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b374:	f7f9 fce4 	bl	8004d40 <HAL_GetTick>
 800b378:	4602      	mov	r2, r0
 800b37a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b37c:	1ad3      	subs	r3, r2, r3
 800b37e:	2b02      	cmp	r3, #2
 800b380:	d901      	bls.n	800b386 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800b382:	2303      	movs	r3, #3
 800b384:	e007      	b.n	800b396 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800b386:	4b09      	ldr	r3, [pc, #36]	@ (800b3ac <RCC_SetFlashLatency+0xf4>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	f003 0307 	and.w	r3, r3, #7
 800b38e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b390:	429a      	cmp	r2, r3
 800b392:	d1ef      	bne.n	800b374 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800b394:	2300      	movs	r3, #0
}
 800b396:	4618      	mov	r0, r3
 800b398:	374c      	adds	r7, #76	@ 0x4c
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd90      	pop	{r4, r7, pc}
 800b39e:	bf00      	nop
 800b3a0:	08014924 	.word	0x08014924
 800b3a4:	08014934 	.word	0x08014934
 800b3a8:	08014940 	.word	0x08014940
 800b3ac:	58004000 	.word	0x58004000

0800b3b0 <LL_RCC_LSE_IsEnabled>:
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800b3b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b3b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b3bc:	f003 0301 	and.w	r3, r3, #1
 800b3c0:	2b01      	cmp	r3, #1
 800b3c2:	d101      	bne.n	800b3c8 <LL_RCC_LSE_IsEnabled+0x18>
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	e000      	b.n	800b3ca <LL_RCC_LSE_IsEnabled+0x1a>
 800b3c8:	2300      	movs	r3, #0
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d2:	4770      	bx	lr

0800b3d4 <LL_RCC_LSE_IsReady>:
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800b3d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b3dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b3e0:	f003 0302 	and.w	r3, r3, #2
 800b3e4:	2b02      	cmp	r3, #2
 800b3e6:	d101      	bne.n	800b3ec <LL_RCC_LSE_IsReady+0x18>
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	e000      	b.n	800b3ee <LL_RCC_LSE_IsReady+0x1a>
 800b3ec:	2300      	movs	r3, #0
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f6:	4770      	bx	lr

0800b3f8 <LL_RCC_SetRFWKPClockSource>:
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b083      	sub	sp, #12
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800b400:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b404:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b408:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800b40c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	4313      	orrs	r3, r2
 800b414:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800b418:	bf00      	nop
 800b41a:	370c      	adds	r7, #12
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr

0800b424 <LL_RCC_SetSMPSClockSource>:
{
 800b424:	b480      	push	{r7}
 800b426:	b083      	sub	sp, #12
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800b42c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b432:	f023 0203 	bic.w	r2, r3, #3
 800b436:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	4313      	orrs	r3, r2
 800b43e:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800b440:	bf00      	nop
 800b442:	370c      	adds	r7, #12
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr

0800b44c <LL_RCC_SetSMPSPrescaler>:
{
 800b44c:	b480      	push	{r7}
 800b44e:	b083      	sub	sp, #12
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800b454:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b45a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800b45e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	4313      	orrs	r3, r2
 800b466:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800b468:	bf00      	nop
 800b46a:	370c      	adds	r7, #12
 800b46c:	46bd      	mov	sp, r7
 800b46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b472:	4770      	bx	lr

0800b474 <LL_RCC_SetUSARTClockSource>:
{
 800b474:	b480      	push	{r7}
 800b476:	b083      	sub	sp, #12
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800b47c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b484:	f023 0203 	bic.w	r2, r3, #3
 800b488:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	4313      	orrs	r3, r2
 800b490:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b494:	bf00      	nop
 800b496:	370c      	adds	r7, #12
 800b498:	46bd      	mov	sp, r7
 800b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49e:	4770      	bx	lr

0800b4a0 <LL_RCC_SetLPUARTClockSource>:
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b083      	sub	sp, #12
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800b4a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b4ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4b0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b4b4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	4313      	orrs	r3, r2
 800b4bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b4c0:	bf00      	nop
 800b4c2:	370c      	adds	r7, #12
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr

0800b4cc <LL_RCC_SetI2CClockSource>:
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800b4d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b4d8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	091b      	lsrs	r3, r3, #4
 800b4e0:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800b4e4:	43db      	mvns	r3, r3
 800b4e6:	401a      	ands	r2, r3
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	011b      	lsls	r3, r3, #4
 800b4ec:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800b4f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b4f4:	4313      	orrs	r3, r2
 800b4f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b4fa:	bf00      	nop
 800b4fc:	370c      	adds	r7, #12
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr

0800b506 <LL_RCC_SetLPTIMClockSource>:
{
 800b506:	b480      	push	{r7}
 800b508:	b083      	sub	sp, #12
 800b50a:	af00      	add	r7, sp, #0
 800b50c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800b50e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b512:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	0c1b      	lsrs	r3, r3, #16
 800b51a:	041b      	lsls	r3, r3, #16
 800b51c:	43db      	mvns	r3, r3
 800b51e:	401a      	ands	r2, r3
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	041b      	lsls	r3, r3, #16
 800b524:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b528:	4313      	orrs	r3, r2
 800b52a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b52e:	bf00      	nop
 800b530:	370c      	adds	r7, #12
 800b532:	46bd      	mov	sp, r7
 800b534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b538:	4770      	bx	lr

0800b53a <LL_RCC_SetSAIClockSource>:
{
 800b53a:	b480      	push	{r7}
 800b53c:	b083      	sub	sp, #12
 800b53e:	af00      	add	r7, sp, #0
 800b540:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800b542:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b54a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800b54e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	4313      	orrs	r3, r2
 800b556:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b55a:	bf00      	nop
 800b55c:	370c      	adds	r7, #12
 800b55e:	46bd      	mov	sp, r7
 800b560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b564:	4770      	bx	lr

0800b566 <LL_RCC_SetRNGClockSource>:
{
 800b566:	b480      	push	{r7}
 800b568:	b083      	sub	sp, #12
 800b56a:	af00      	add	r7, sp, #0
 800b56c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800b56e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b572:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b576:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800b57a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	4313      	orrs	r3, r2
 800b582:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b586:	bf00      	nop
 800b588:	370c      	adds	r7, #12
 800b58a:	46bd      	mov	sp, r7
 800b58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b590:	4770      	bx	lr

0800b592 <LL_RCC_SetCLK48ClockSource>:
{
 800b592:	b480      	push	{r7}
 800b594:	b083      	sub	sp, #12
 800b596:	af00      	add	r7, sp, #0
 800b598:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800b59a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b59e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b5a2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800b5a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	4313      	orrs	r3, r2
 800b5ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b5b2:	bf00      	nop
 800b5b4:	370c      	adds	r7, #12
 800b5b6:	46bd      	mov	sp, r7
 800b5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5bc:	4770      	bx	lr

0800b5be <LL_RCC_SetUSBClockSource>:
{
 800b5be:	b580      	push	{r7, lr}
 800b5c0:	b082      	sub	sp, #8
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f7ff ffe3 	bl	800b592 <LL_RCC_SetCLK48ClockSource>
}
 800b5cc:	bf00      	nop
 800b5ce:	3708      	adds	r7, #8
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}

0800b5d4 <LL_RCC_SetADCClockSource>:
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b083      	sub	sp, #12
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800b5dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b5e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b5e4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800b5e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	4313      	orrs	r3, r2
 800b5f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800b5f4:	bf00      	nop
 800b5f6:	370c      	adds	r7, #12
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr

0800b600 <LL_RCC_SetRTCClockSource>:
{
 800b600:	b480      	push	{r7}
 800b602:	b083      	sub	sp, #12
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800b608:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b60c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b610:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b614:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	4313      	orrs	r3, r2
 800b61c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800b620:	bf00      	nop
 800b622:	370c      	adds	r7, #12
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr

0800b62c <LL_RCC_GetRTCClockSource>:
{
 800b62c:	b480      	push	{r7}
 800b62e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800b630:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b634:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b638:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr

0800b646 <LL_RCC_ForceBackupDomainReset>:
{
 800b646:	b480      	push	{r7}
 800b648:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800b64a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b64e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b652:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b656:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b65a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b65e:	bf00      	nop
 800b660:	46bd      	mov	sp, r7
 800b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b666:	4770      	bx	lr

0800b668 <LL_RCC_ReleaseBackupDomainReset>:
{
 800b668:	b480      	push	{r7}
 800b66a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800b66c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b670:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b674:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b678:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b67c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800b680:	bf00      	nop
 800b682:	46bd      	mov	sp, r7
 800b684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b688:	4770      	bx	lr

0800b68a <LL_RCC_PLLSAI1_Enable>:
{
 800b68a:	b480      	push	{r7}
 800b68c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800b68e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b698:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b69c:	6013      	str	r3, [r2, #0]
}
 800b69e:	bf00      	nop
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a6:	4770      	bx	lr

0800b6a8 <LL_RCC_PLLSAI1_Disable>:
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800b6ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b6b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b6ba:	6013      	str	r3, [r2, #0]
}
 800b6bc:	bf00      	nop
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c4:	4770      	bx	lr

0800b6c6 <LL_RCC_PLLSAI1_IsReady>:
{
 800b6c6:	b480      	push	{r7}
 800b6c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800b6ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b6d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b6d8:	d101      	bne.n	800b6de <LL_RCC_PLLSAI1_IsReady+0x18>
 800b6da:	2301      	movs	r3, #1
 800b6dc:	e000      	b.n	800b6e0 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800b6de:	2300      	movs	r3, #0
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e8:	4770      	bx	lr

0800b6ea <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b6ea:	b580      	push	{r7, lr}
 800b6ec:	b088      	sub	sp, #32
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b702:	2b00      	cmp	r3, #0
 800b704:	d034      	beq.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b70a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b70e:	d021      	beq.n	800b754 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800b710:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800b714:	d81b      	bhi.n	800b74e <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b716:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b71a:	d01d      	beq.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800b71c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b720:	d815      	bhi.n	800b74e <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b722:	2b00      	cmp	r3, #0
 800b724:	d00b      	beq.n	800b73e <HAL_RCCEx_PeriphCLKConfig+0x54>
 800b726:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b72a:	d110      	bne.n	800b74e <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800b72c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b730:	68db      	ldr	r3, [r3, #12]
 800b732:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b736:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b73a:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800b73c:	e00d      	b.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	3304      	adds	r3, #4
 800b742:	4618      	mov	r0, r3
 800b744:	f000 f947 	bl	800b9d6 <RCCEx_PLLSAI1_ConfigNP>
 800b748:	4603      	mov	r3, r0
 800b74a:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800b74c:	e005      	b.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800b74e:	2301      	movs	r3, #1
 800b750:	77fb      	strb	r3, [r7, #31]
        break;
 800b752:	e002      	b.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800b754:	bf00      	nop
 800b756:	e000      	b.n	800b75a <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800b758:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b75a:	7ffb      	ldrb	r3, [r7, #31]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d105      	bne.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b764:	4618      	mov	r0, r3
 800b766:	f7ff fee8 	bl	800b53a <LL_RCC_SetSAIClockSource>
 800b76a:	e001      	b.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b76c:	7ffb      	ldrb	r3, [r7, #31]
 800b76e:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d046      	beq.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800b77c:	f7ff ff56 	bl	800b62c <LL_RCC_GetRTCClockSource>
 800b780:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b786:	69ba      	ldr	r2, [r7, #24]
 800b788:	429a      	cmp	r2, r3
 800b78a:	d03c      	beq.n	800b806 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800b78c:	f7fe fc58 	bl	800a040 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800b790:	69bb      	ldr	r3, [r7, #24]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d105      	bne.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b79a:	4618      	mov	r0, r3
 800b79c:	f7ff ff30 	bl	800b600 <LL_RCC_SetRTCClockSource>
 800b7a0:	e02e      	b.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800b7a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b7a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b7aa:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800b7ac:	f7ff ff4b 	bl	800b646 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800b7b0:	f7ff ff5a 	bl	800b668 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7be:	4313      	orrs	r3, r2
 800b7c0:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800b7c2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800b7cc:	f7ff fdf0 	bl	800b3b0 <LL_RCC_LSE_IsEnabled>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	2b01      	cmp	r3, #1
 800b7d4:	d114      	bne.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b7d6:	f7f9 fab3 	bl	8004d40 <HAL_GetTick>
 800b7da:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800b7dc:	e00b      	b.n	800b7f6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b7de:	f7f9 faaf 	bl	8004d40 <HAL_GetTick>
 800b7e2:	4602      	mov	r2, r0
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	1ad3      	subs	r3, r2, r3
 800b7e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	d902      	bls.n	800b7f6 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800b7f0:	2303      	movs	r3, #3
 800b7f2:	77fb      	strb	r3, [r7, #31]
              break;
 800b7f4:	e004      	b.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800b7f6:	f7ff fded 	bl	800b3d4 <LL_RCC_LSE_IsReady>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	d1ee      	bne.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800b800:	7ffb      	ldrb	r3, [r7, #31]
 800b802:	77bb      	strb	r3, [r7, #30]
 800b804:	e001      	b.n	800b80a <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b806:	7ffb      	ldrb	r3, [r7, #31]
 800b808:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	f003 0301 	and.w	r3, r3, #1
 800b812:	2b00      	cmp	r3, #0
 800b814:	d004      	beq.n	800b820 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	699b      	ldr	r3, [r3, #24]
 800b81a:	4618      	mov	r0, r3
 800b81c:	f7ff fe2a 	bl	800b474 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	f003 0302 	and.w	r3, r3, #2
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d004      	beq.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	69db      	ldr	r3, [r3, #28]
 800b830:	4618      	mov	r0, r3
 800b832:	f7ff fe35 	bl	800b4a0 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f003 0310 	and.w	r3, r3, #16
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d004      	beq.n	800b84c <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b846:	4618      	mov	r0, r3
 800b848:	f7ff fe5d 	bl	800b506 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f003 0320 	and.w	r3, r3, #32
 800b854:	2b00      	cmp	r3, #0
 800b856:	d004      	beq.n	800b862 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b85c:	4618      	mov	r0, r3
 800b85e:	f7ff fe52 	bl	800b506 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	f003 0304 	and.w	r3, r3, #4
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d004      	beq.n	800b878 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	6a1b      	ldr	r3, [r3, #32]
 800b872:	4618      	mov	r0, r3
 800b874:	f7ff fe2a 	bl	800b4cc <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f003 0308 	and.w	r3, r3, #8
 800b880:	2b00      	cmp	r3, #0
 800b882:	d004      	beq.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b888:	4618      	mov	r0, r3
 800b88a:	f7ff fe1f 	bl	800b4cc <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b896:	2b00      	cmp	r3, #0
 800b898:	d022      	beq.n	800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f7ff fe8d 	bl	800b5be <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b8ac:	d107      	bne.n	800b8be <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800b8ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b8b2:	68db      	ldr	r3, [r3, #12]
 800b8b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b8b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b8bc:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b8c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800b8c6:	d10b      	bne.n	800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	3304      	adds	r3, #4
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f000 f8dd 	bl	800ba8c <RCCEx_PLLSAI1_ConfigNQ>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800b8d6:	7ffb      	ldrb	r3, [r7, #31]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d001      	beq.n	800b8e0 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800b8dc:	7ffb      	ldrb	r3, [r7, #31]
 800b8de:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d02b      	beq.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8f4:	d008      	beq.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b8fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b8fe:	d003      	beq.n	800b908 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b904:	2b00      	cmp	r3, #0
 800b906:	d105      	bne.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b90c:	4618      	mov	r0, r3
 800b90e:	f7ff fe2a 	bl	800b566 <LL_RCC_SetRNGClockSource>
 800b912:	e00a      	b.n	800b92a <HAL_RCCEx_PeriphCLKConfig+0x240>
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b918:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b91c:	60fb      	str	r3, [r7, #12]
 800b91e:	2000      	movs	r0, #0
 800b920:	f7ff fe21 	bl	800b566 <LL_RCC_SetRNGClockSource>
 800b924:	68f8      	ldr	r0, [r7, #12]
 800b926:	f7ff fe34 	bl	800b592 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b92e:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800b932:	d107      	bne.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800b934:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b938:	68db      	ldr	r3, [r3, #12]
 800b93a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b93e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b942:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d022      	beq.n	800b996 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b954:	4618      	mov	r0, r3
 800b956:	f7ff fe3d 	bl	800b5d4 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b95e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b962:	d107      	bne.n	800b974 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b964:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b968:	68db      	ldr	r3, [r3, #12]
 800b96a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b96e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b972:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b978:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b97c:	d10b      	bne.n	800b996 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	3304      	adds	r3, #4
 800b982:	4618      	mov	r0, r3
 800b984:	f000 f8dd 	bl	800bb42 <RCCEx_PLLSAI1_ConfigNR>
 800b988:	4603      	mov	r3, r0
 800b98a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800b98c:	7ffb      	ldrb	r3, [r7, #31]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d001      	beq.n	800b996 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800b992:	7ffb      	ldrb	r3, [r7, #31]
 800b994:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d004      	beq.n	800b9ac <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f7ff fd26 	bl	800b3f8 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d009      	beq.n	800b9cc <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b9bc:	4618      	mov	r0, r3
 800b9be:	f7ff fd45 	bl	800b44c <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f7ff fd2c 	bl	800b424 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800b9cc:	7fbb      	ldrb	r3, [r7, #30]
}
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	3720      	adds	r7, #32
 800b9d2:	46bd      	mov	sp, r7
 800b9d4:	bd80      	pop	{r7, pc}

0800b9d6 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800b9d6:	b580      	push	{r7, lr}
 800b9d8:	b084      	sub	sp, #16
 800b9da:	af00      	add	r7, sp, #0
 800b9dc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800b9e2:	f7ff fe61 	bl	800b6a8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b9e6:	f7f9 f9ab 	bl	8004d40 <HAL_GetTick>
 800b9ea:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800b9ec:	e009      	b.n	800ba02 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b9ee:	f7f9 f9a7 	bl	8004d40 <HAL_GetTick>
 800b9f2:	4602      	mov	r2, r0
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	1ad3      	subs	r3, r2, r3
 800b9f8:	2b02      	cmp	r3, #2
 800b9fa:	d902      	bls.n	800ba02 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800b9fc:	2303      	movs	r3, #3
 800b9fe:	73fb      	strb	r3, [r7, #15]
      break;
 800ba00:	e004      	b.n	800ba0c <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ba02:	f7ff fe60 	bl	800b6c6 <LL_RCC_PLLSAI1_IsReady>
 800ba06:	4603      	mov	r3, r0
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d1f0      	bne.n	800b9ee <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800ba0c:	7bfb      	ldrb	r3, [r7, #15]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d137      	bne.n	800ba82 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800ba12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba16:	691b      	ldr	r3, [r3, #16]
 800ba18:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	021b      	lsls	r3, r3, #8
 800ba22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ba26:	4313      	orrs	r3, r2
 800ba28:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800ba2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba2e:	691b      	ldr	r3, [r3, #16]
 800ba30:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	685b      	ldr	r3, [r3, #4]
 800ba38:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ba3c:	4313      	orrs	r3, r2
 800ba3e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800ba40:	f7ff fe23 	bl	800b68a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba44:	f7f9 f97c 	bl	8004d40 <HAL_GetTick>
 800ba48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ba4a:	e009      	b.n	800ba60 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ba4c:	f7f9 f978 	bl	8004d40 <HAL_GetTick>
 800ba50:	4602      	mov	r2, r0
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	1ad3      	subs	r3, r2, r3
 800ba56:	2b02      	cmp	r3, #2
 800ba58:	d902      	bls.n	800ba60 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800ba5a:	2303      	movs	r3, #3
 800ba5c:	73fb      	strb	r3, [r7, #15]
        break;
 800ba5e:	e004      	b.n	800ba6a <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ba60:	f7ff fe31 	bl	800b6c6 <LL_RCC_PLLSAI1_IsReady>
 800ba64:	4603      	mov	r3, r0
 800ba66:	2b01      	cmp	r3, #1
 800ba68:	d1f0      	bne.n	800ba4c <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800ba6a:	7bfb      	ldrb	r3, [r7, #15]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d108      	bne.n	800ba82 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800ba70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba74:	691a      	ldr	r2, [r3, #16]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	691b      	ldr	r3, [r3, #16]
 800ba7a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ba7e:	4313      	orrs	r3, r2
 800ba80:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800ba82:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3710      	adds	r7, #16
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b084      	sub	sp, #16
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ba94:	2300      	movs	r3, #0
 800ba96:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800ba98:	f7ff fe06 	bl	800b6a8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ba9c:	f7f9 f950 	bl	8004d40 <HAL_GetTick>
 800baa0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800baa2:	e009      	b.n	800bab8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800baa4:	f7f9 f94c 	bl	8004d40 <HAL_GetTick>
 800baa8:	4602      	mov	r2, r0
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	1ad3      	subs	r3, r2, r3
 800baae:	2b02      	cmp	r3, #2
 800bab0:	d902      	bls.n	800bab8 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800bab2:	2303      	movs	r3, #3
 800bab4:	73fb      	strb	r3, [r7, #15]
      break;
 800bab6:	e004      	b.n	800bac2 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bab8:	f7ff fe05 	bl	800b6c6 <LL_RCC_PLLSAI1_IsReady>
 800babc:	4603      	mov	r3, r0
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d1f0      	bne.n	800baa4 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800bac2:	7bfb      	ldrb	r3, [r7, #15]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d137      	bne.n	800bb38 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800bac8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bacc:	691b      	ldr	r3, [r3, #16]
 800bace:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	021b      	lsls	r3, r3, #8
 800bad8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800badc:	4313      	orrs	r3, r2
 800bade:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800bae0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bae4:	691b      	ldr	r3, [r3, #16]
 800bae6:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	689b      	ldr	r3, [r3, #8]
 800baee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800baf2:	4313      	orrs	r3, r2
 800baf4:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800baf6:	f7ff fdc8 	bl	800b68a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bafa:	f7f9 f921 	bl	8004d40 <HAL_GetTick>
 800bafe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bb00:	e009      	b.n	800bb16 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bb02:	f7f9 f91d 	bl	8004d40 <HAL_GetTick>
 800bb06:	4602      	mov	r2, r0
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	1ad3      	subs	r3, r2, r3
 800bb0c:	2b02      	cmp	r3, #2
 800bb0e:	d902      	bls.n	800bb16 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800bb10:	2303      	movs	r3, #3
 800bb12:	73fb      	strb	r3, [r7, #15]
        break;
 800bb14:	e004      	b.n	800bb20 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bb16:	f7ff fdd6 	bl	800b6c6 <LL_RCC_PLLSAI1_IsReady>
 800bb1a:	4603      	mov	r3, r0
 800bb1c:	2b01      	cmp	r3, #1
 800bb1e:	d1f0      	bne.n	800bb02 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800bb20:	7bfb      	ldrb	r3, [r7, #15]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d108      	bne.n	800bb38 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800bb26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb2a:	691a      	ldr	r2, [r3, #16]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	691b      	ldr	r3, [r3, #16]
 800bb30:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb34:	4313      	orrs	r3, r2
 800bb36:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800bb38:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3710      	adds	r7, #16
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}

0800bb42 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800bb42:	b580      	push	{r7, lr}
 800bb44:	b084      	sub	sp, #16
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800bb4e:	f7ff fdab 	bl	800b6a8 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800bb52:	f7f9 f8f5 	bl	8004d40 <HAL_GetTick>
 800bb56:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bb58:	e009      	b.n	800bb6e <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bb5a:	f7f9 f8f1 	bl	8004d40 <HAL_GetTick>
 800bb5e:	4602      	mov	r2, r0
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	1ad3      	subs	r3, r2, r3
 800bb64:	2b02      	cmp	r3, #2
 800bb66:	d902      	bls.n	800bb6e <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800bb68:	2303      	movs	r3, #3
 800bb6a:	73fb      	strb	r3, [r7, #15]
      break;
 800bb6c:	e004      	b.n	800bb78 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800bb6e:	f7ff fdaa 	bl	800b6c6 <LL_RCC_PLLSAI1_IsReady>
 800bb72:	4603      	mov	r3, r0
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d1f0      	bne.n	800bb5a <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800bb78:	7bfb      	ldrb	r3, [r7, #15]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d137      	bne.n	800bbee <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800bb7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb82:	691b      	ldr	r3, [r3, #16]
 800bb84:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	021b      	lsls	r3, r3, #8
 800bb8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb92:	4313      	orrs	r3, r2
 800bb94:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800bb96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb9a:	691b      	ldr	r3, [r3, #16]
 800bb9c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	68db      	ldr	r3, [r3, #12]
 800bba4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800bbac:	f7ff fd6d 	bl	800b68a <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bbb0:	f7f9 f8c6 	bl	8004d40 <HAL_GetTick>
 800bbb4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bbb6:	e009      	b.n	800bbcc <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800bbb8:	f7f9 f8c2 	bl	8004d40 <HAL_GetTick>
 800bbbc:	4602      	mov	r2, r0
 800bbbe:	68bb      	ldr	r3, [r7, #8]
 800bbc0:	1ad3      	subs	r3, r2, r3
 800bbc2:	2b02      	cmp	r3, #2
 800bbc4:	d902      	bls.n	800bbcc <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800bbc6:	2303      	movs	r3, #3
 800bbc8:	73fb      	strb	r3, [r7, #15]
        break;
 800bbca:	e004      	b.n	800bbd6 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800bbcc:	f7ff fd7b 	bl	800b6c6 <LL_RCC_PLLSAI1_IsReady>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	2b01      	cmp	r3, #1
 800bbd4:	d1f0      	bne.n	800bbb8 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800bbd6:	7bfb      	ldrb	r3, [r7, #15]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d108      	bne.n	800bbee <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800bbdc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbe0:	691a      	ldr	r2, [r3, #16]
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	691b      	ldr	r3, [r3, #16]
 800bbe6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bbea:	4313      	orrs	r3, r2
 800bbec:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800bbee:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3710      	adds	r7, #16
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}

0800bbf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b082      	sub	sp, #8
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d101      	bne.n	800bc0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bc06:	2301      	movs	r3, #1
 800bc08:	e049      	b.n	800bc9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bc10:	b2db      	uxtb	r3, r3
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d106      	bne.n	800bc24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f7f8 fc6e 	bl	8004500 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2202      	movs	r2, #2
 800bc28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681a      	ldr	r2, [r3, #0]
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	3304      	adds	r3, #4
 800bc34:	4619      	mov	r1, r3
 800bc36:	4610      	mov	r0, r2
 800bc38:	f000 fa7c 	bl	800c134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2201      	movs	r2, #1
 800bc40:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2201      	movs	r2, #1
 800bc48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2201      	movs	r2, #1
 800bc50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	2201      	movs	r2, #1
 800bc58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2201      	movs	r2, #1
 800bc60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2201      	movs	r2, #1
 800bc68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2201      	movs	r2, #1
 800bc70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2201      	movs	r2, #1
 800bc78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2201      	movs	r2, #1
 800bc80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2201      	movs	r2, #1
 800bc88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2201      	movs	r2, #1
 800bc90:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2201      	movs	r2, #1
 800bc98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bc9c:	2300      	movs	r3, #0
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3708      	adds	r7, #8
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}
	...

0800bca8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bca8:	b480      	push	{r7}
 800bcaa:	b085      	sub	sp, #20
 800bcac:	af00      	add	r7, sp, #0
 800bcae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bcb6:	b2db      	uxtb	r3, r3
 800bcb8:	2b01      	cmp	r3, #1
 800bcba:	d001      	beq.n	800bcc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	e036      	b.n	800bd2e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2202      	movs	r2, #2
 800bcc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	68da      	ldr	r2, [r3, #12]
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f042 0201 	orr.w	r2, r2, #1
 800bcd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	4a17      	ldr	r2, [pc, #92]	@ (800bd3c <HAL_TIM_Base_Start_IT+0x94>)
 800bcde:	4293      	cmp	r3, r2
 800bce0:	d004      	beq.n	800bcec <HAL_TIM_Base_Start_IT+0x44>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bcea:	d115      	bne.n	800bd18 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	689a      	ldr	r2, [r3, #8]
 800bcf2:	4b13      	ldr	r3, [pc, #76]	@ (800bd40 <HAL_TIM_Base_Start_IT+0x98>)
 800bcf4:	4013      	ands	r3, r2
 800bcf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	2b06      	cmp	r3, #6
 800bcfc:	d015      	beq.n	800bd2a <HAL_TIM_Base_Start_IT+0x82>
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd04:	d011      	beq.n	800bd2a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	681a      	ldr	r2, [r3, #0]
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f042 0201 	orr.w	r2, r2, #1
 800bd14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd16:	e008      	b.n	800bd2a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	681a      	ldr	r2, [r3, #0]
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f042 0201 	orr.w	r2, r2, #1
 800bd26:	601a      	str	r2, [r3, #0]
 800bd28:	e000      	b.n	800bd2c <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bd2c:	2300      	movs	r3, #0
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3714      	adds	r7, #20
 800bd32:	46bd      	mov	sp, r7
 800bd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd38:	4770      	bx	lr
 800bd3a:	bf00      	nop
 800bd3c:	40012c00 	.word	0x40012c00
 800bd40:	00010007 	.word	0x00010007

0800bd44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b084      	sub	sp, #16
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	68db      	ldr	r3, [r3, #12]
 800bd52:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	691b      	ldr	r3, [r3, #16]
 800bd5a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	f003 0302 	and.w	r3, r3, #2
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d020      	beq.n	800bda8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	f003 0302 	and.w	r3, r3, #2
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d01b      	beq.n	800bda8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f06f 0202 	mvn.w	r2, #2
 800bd78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	2201      	movs	r2, #1
 800bd7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	699b      	ldr	r3, [r3, #24]
 800bd86:	f003 0303 	and.w	r3, r3, #3
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d003      	beq.n	800bd96 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f000 f9b2 	bl	800c0f8 <HAL_TIM_IC_CaptureCallback>
 800bd94:	e005      	b.n	800bda2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f000 f9a4 	bl	800c0e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd9c:	6878      	ldr	r0, [r7, #4]
 800bd9e:	f000 f9b5 	bl	800c10c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2200      	movs	r2, #0
 800bda6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	f003 0304 	and.w	r3, r3, #4
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d020      	beq.n	800bdf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	f003 0304 	and.w	r3, r3, #4
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d01b      	beq.n	800bdf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f06f 0204 	mvn.w	r2, #4
 800bdc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2202      	movs	r2, #2
 800bdca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	699b      	ldr	r3, [r3, #24]
 800bdd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d003      	beq.n	800bde2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f000 f98c 	bl	800c0f8 <HAL_TIM_IC_CaptureCallback>
 800bde0:	e005      	b.n	800bdee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f000 f97e 	bl	800c0e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f000 f98f 	bl	800c10c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	f003 0308 	and.w	r3, r3, #8
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d020      	beq.n	800be40 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	f003 0308 	and.w	r3, r3, #8
 800be04:	2b00      	cmp	r3, #0
 800be06:	d01b      	beq.n	800be40 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f06f 0208 	mvn.w	r2, #8
 800be10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2204      	movs	r2, #4
 800be16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	69db      	ldr	r3, [r3, #28]
 800be1e:	f003 0303 	and.w	r3, r3, #3
 800be22:	2b00      	cmp	r3, #0
 800be24:	d003      	beq.n	800be2e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f000 f966 	bl	800c0f8 <HAL_TIM_IC_CaptureCallback>
 800be2c:	e005      	b.n	800be3a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f000 f958 	bl	800c0e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f000 f969 	bl	800c10c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2200      	movs	r2, #0
 800be3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	f003 0310 	and.w	r3, r3, #16
 800be46:	2b00      	cmp	r3, #0
 800be48:	d020      	beq.n	800be8c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	f003 0310 	and.w	r3, r3, #16
 800be50:	2b00      	cmp	r3, #0
 800be52:	d01b      	beq.n	800be8c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f06f 0210 	mvn.w	r2, #16
 800be5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2208      	movs	r2, #8
 800be62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	69db      	ldr	r3, [r3, #28]
 800be6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d003      	beq.n	800be7a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f000 f940 	bl	800c0f8 <HAL_TIM_IC_CaptureCallback>
 800be78:	e005      	b.n	800be86 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f000 f932 	bl	800c0e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f000 f943 	bl	800c10c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2200      	movs	r2, #0
 800be8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	f003 0301 	and.w	r3, r3, #1
 800be92:	2b00      	cmp	r3, #0
 800be94:	d00c      	beq.n	800beb0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	f003 0301 	and.w	r3, r3, #1
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d007      	beq.n	800beb0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	f06f 0201 	mvn.w	r2, #1
 800bea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f7f7 ff9a 	bl	8003de4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d104      	bne.n	800bec4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d00c      	beq.n	800bede <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800beca:	2b00      	cmp	r3, #0
 800becc:	d007      	beq.n	800bede <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800bed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f000 faa1 	bl	800c420 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d00c      	beq.n	800bf02 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d007      	beq.n	800bf02 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800befa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f000 fa99 	bl	800c434 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d00c      	beq.n	800bf26 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d007      	beq.n	800bf26 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bf1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f000 f8fd 	bl	800c120 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bf26:	68bb      	ldr	r3, [r7, #8]
 800bf28:	f003 0320 	and.w	r3, r3, #32
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d00c      	beq.n	800bf4a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f003 0320 	and.w	r3, r3, #32
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d007      	beq.n	800bf4a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	f06f 0220 	mvn.w	r2, #32
 800bf42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f000 fa61 	bl	800c40c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bf4a:	bf00      	nop
 800bf4c:	3710      	adds	r7, #16
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	bd80      	pop	{r7, pc}

0800bf52 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bf52:	b580      	push	{r7, lr}
 800bf54:	b084      	sub	sp, #16
 800bf56:	af00      	add	r7, sp, #0
 800bf58:	6078      	str	r0, [r7, #4]
 800bf5a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bf66:	2b01      	cmp	r3, #1
 800bf68:	d101      	bne.n	800bf6e <HAL_TIM_ConfigClockSource+0x1c>
 800bf6a:	2302      	movs	r3, #2
 800bf6c:	e0b6      	b.n	800c0dc <HAL_TIM_ConfigClockSource+0x18a>
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2201      	movs	r2, #1
 800bf72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2202      	movs	r2, #2
 800bf7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	689b      	ldr	r3, [r3, #8]
 800bf84:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bf86:	68bb      	ldr	r3, [r7, #8]
 800bf88:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800bf8c:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800bf90:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bf98:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	68ba      	ldr	r2, [r7, #8]
 800bfa0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bfaa:	d03e      	beq.n	800c02a <HAL_TIM_ConfigClockSource+0xd8>
 800bfac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bfb0:	f200 8087 	bhi.w	800c0c2 <HAL_TIM_ConfigClockSource+0x170>
 800bfb4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bfb8:	f000 8086 	beq.w	800c0c8 <HAL_TIM_ConfigClockSource+0x176>
 800bfbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bfc0:	d87f      	bhi.n	800c0c2 <HAL_TIM_ConfigClockSource+0x170>
 800bfc2:	2b70      	cmp	r3, #112	@ 0x70
 800bfc4:	d01a      	beq.n	800bffc <HAL_TIM_ConfigClockSource+0xaa>
 800bfc6:	2b70      	cmp	r3, #112	@ 0x70
 800bfc8:	d87b      	bhi.n	800c0c2 <HAL_TIM_ConfigClockSource+0x170>
 800bfca:	2b60      	cmp	r3, #96	@ 0x60
 800bfcc:	d050      	beq.n	800c070 <HAL_TIM_ConfigClockSource+0x11e>
 800bfce:	2b60      	cmp	r3, #96	@ 0x60
 800bfd0:	d877      	bhi.n	800c0c2 <HAL_TIM_ConfigClockSource+0x170>
 800bfd2:	2b50      	cmp	r3, #80	@ 0x50
 800bfd4:	d03c      	beq.n	800c050 <HAL_TIM_ConfigClockSource+0xfe>
 800bfd6:	2b50      	cmp	r3, #80	@ 0x50
 800bfd8:	d873      	bhi.n	800c0c2 <HAL_TIM_ConfigClockSource+0x170>
 800bfda:	2b40      	cmp	r3, #64	@ 0x40
 800bfdc:	d058      	beq.n	800c090 <HAL_TIM_ConfigClockSource+0x13e>
 800bfde:	2b40      	cmp	r3, #64	@ 0x40
 800bfe0:	d86f      	bhi.n	800c0c2 <HAL_TIM_ConfigClockSource+0x170>
 800bfe2:	2b30      	cmp	r3, #48	@ 0x30
 800bfe4:	d064      	beq.n	800c0b0 <HAL_TIM_ConfigClockSource+0x15e>
 800bfe6:	2b30      	cmp	r3, #48	@ 0x30
 800bfe8:	d86b      	bhi.n	800c0c2 <HAL_TIM_ConfigClockSource+0x170>
 800bfea:	2b20      	cmp	r3, #32
 800bfec:	d060      	beq.n	800c0b0 <HAL_TIM_ConfigClockSource+0x15e>
 800bfee:	2b20      	cmp	r3, #32
 800bff0:	d867      	bhi.n	800c0c2 <HAL_TIM_ConfigClockSource+0x170>
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d05c      	beq.n	800c0b0 <HAL_TIM_ConfigClockSource+0x15e>
 800bff6:	2b10      	cmp	r3, #16
 800bff8:	d05a      	beq.n	800c0b0 <HAL_TIM_ConfigClockSource+0x15e>
 800bffa:	e062      	b.n	800c0c2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c00c:	f000 f97e 	bl	800c30c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	689b      	ldr	r3, [r3, #8]
 800c016:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c01e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	68ba      	ldr	r2, [r7, #8]
 800c026:	609a      	str	r2, [r3, #8]
      break;
 800c028:	e04f      	b.n	800c0ca <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c02e:	683b      	ldr	r3, [r7, #0]
 800c030:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c03a:	f000 f967 	bl	800c30c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	689a      	ldr	r2, [r3, #8]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c04c:	609a      	str	r2, [r3, #8]
      break;
 800c04e:	e03c      	b.n	800c0ca <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c05c:	461a      	mov	r2, r3
 800c05e:	f000 f8d9 	bl	800c214 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	2150      	movs	r1, #80	@ 0x50
 800c068:	4618      	mov	r0, r3
 800c06a:	f000 f932 	bl	800c2d2 <TIM_ITRx_SetConfig>
      break;
 800c06e:	e02c      	b.n	800c0ca <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c07c:	461a      	mov	r2, r3
 800c07e:	f000 f8f8 	bl	800c272 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	2160      	movs	r1, #96	@ 0x60
 800c088:	4618      	mov	r0, r3
 800c08a:	f000 f922 	bl	800c2d2 <TIM_ITRx_SetConfig>
      break;
 800c08e:	e01c      	b.n	800c0ca <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c09c:	461a      	mov	r2, r3
 800c09e:	f000 f8b9 	bl	800c214 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	2140      	movs	r1, #64	@ 0x40
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f000 f912 	bl	800c2d2 <TIM_ITRx_SetConfig>
      break;
 800c0ae:	e00c      	b.n	800c0ca <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681a      	ldr	r2, [r3, #0]
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	4619      	mov	r1, r3
 800c0ba:	4610      	mov	r0, r2
 800c0bc:	f000 f909 	bl	800c2d2 <TIM_ITRx_SetConfig>
      break;
 800c0c0:	e003      	b.n	800c0ca <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	73fb      	strb	r3, [r7, #15]
      break;
 800c0c6:	e000      	b.n	800c0ca <HAL_TIM_ConfigClockSource+0x178>
      break;
 800c0c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	2201      	movs	r2, #1
 800c0ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2200      	movs	r2, #0
 800c0d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c0da:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	3710      	adds	r7, #16
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	bd80      	pop	{r7, pc}

0800c0e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b083      	sub	sp, #12
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c0ec:	bf00      	nop
 800c0ee:	370c      	adds	r7, #12
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f6:	4770      	bx	lr

0800c0f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c0f8:	b480      	push	{r7}
 800c0fa:	b083      	sub	sp, #12
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c100:	bf00      	nop
 800c102:	370c      	adds	r7, #12
 800c104:	46bd      	mov	sp, r7
 800c106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c10a:	4770      	bx	lr

0800c10c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c10c:	b480      	push	{r7}
 800c10e:	b083      	sub	sp, #12
 800c110:	af00      	add	r7, sp, #0
 800c112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c114:	bf00      	nop
 800c116:	370c      	adds	r7, #12
 800c118:	46bd      	mov	sp, r7
 800c11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11e:	4770      	bx	lr

0800c120 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c120:	b480      	push	{r7}
 800c122:	b083      	sub	sp, #12
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c128:	bf00      	nop
 800c12a:	370c      	adds	r7, #12
 800c12c:	46bd      	mov	sp, r7
 800c12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c132:	4770      	bx	lr

0800c134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c134:	b480      	push	{r7}
 800c136:	b085      	sub	sp, #20
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
 800c13c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	4a30      	ldr	r2, [pc, #192]	@ (800c208 <TIM_Base_SetConfig+0xd4>)
 800c148:	4293      	cmp	r3, r2
 800c14a:	d003      	beq.n	800c154 <TIM_Base_SetConfig+0x20>
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c152:	d108      	bne.n	800c166 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c15a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	685b      	ldr	r3, [r3, #4]
 800c160:	68fa      	ldr	r2, [r7, #12]
 800c162:	4313      	orrs	r3, r2
 800c164:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	4a27      	ldr	r2, [pc, #156]	@ (800c208 <TIM_Base_SetConfig+0xd4>)
 800c16a:	4293      	cmp	r3, r2
 800c16c:	d00b      	beq.n	800c186 <TIM_Base_SetConfig+0x52>
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c174:	d007      	beq.n	800c186 <TIM_Base_SetConfig+0x52>
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	4a24      	ldr	r2, [pc, #144]	@ (800c20c <TIM_Base_SetConfig+0xd8>)
 800c17a:	4293      	cmp	r3, r2
 800c17c:	d003      	beq.n	800c186 <TIM_Base_SetConfig+0x52>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	4a23      	ldr	r2, [pc, #140]	@ (800c210 <TIM_Base_SetConfig+0xdc>)
 800c182:	4293      	cmp	r3, r2
 800c184:	d108      	bne.n	800c198 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c18c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	68db      	ldr	r3, [r3, #12]
 800c192:	68fa      	ldr	r2, [r7, #12]
 800c194:	4313      	orrs	r3, r2
 800c196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	695b      	ldr	r3, [r3, #20]
 800c1a2:	4313      	orrs	r3, r2
 800c1a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	68fa      	ldr	r2, [r7, #12]
 800c1aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	689a      	ldr	r2, [r3, #8]
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	681a      	ldr	r2, [r3, #0]
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	4a12      	ldr	r2, [pc, #72]	@ (800c208 <TIM_Base_SetConfig+0xd4>)
 800c1c0:	4293      	cmp	r3, r2
 800c1c2:	d007      	beq.n	800c1d4 <TIM_Base_SetConfig+0xa0>
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	4a11      	ldr	r2, [pc, #68]	@ (800c20c <TIM_Base_SetConfig+0xd8>)
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d003      	beq.n	800c1d4 <TIM_Base_SetConfig+0xa0>
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	4a10      	ldr	r2, [pc, #64]	@ (800c210 <TIM_Base_SetConfig+0xdc>)
 800c1d0:	4293      	cmp	r3, r2
 800c1d2:	d103      	bne.n	800c1dc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	691a      	ldr	r2, [r3, #16]
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2201      	movs	r2, #1
 800c1e0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	691b      	ldr	r3, [r3, #16]
 800c1e6:	f003 0301 	and.w	r3, r3, #1
 800c1ea:	2b01      	cmp	r3, #1
 800c1ec:	d105      	bne.n	800c1fa <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	691b      	ldr	r3, [r3, #16]
 800c1f2:	f023 0201 	bic.w	r2, r3, #1
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	611a      	str	r2, [r3, #16]
  }
}
 800c1fa:	bf00      	nop
 800c1fc:	3714      	adds	r7, #20
 800c1fe:	46bd      	mov	sp, r7
 800c200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c204:	4770      	bx	lr
 800c206:	bf00      	nop
 800c208:	40012c00 	.word	0x40012c00
 800c20c:	40014400 	.word	0x40014400
 800c210:	40014800 	.word	0x40014800

0800c214 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c214:	b480      	push	{r7}
 800c216:	b087      	sub	sp, #28
 800c218:	af00      	add	r7, sp, #0
 800c21a:	60f8      	str	r0, [r7, #12]
 800c21c:	60b9      	str	r1, [r7, #8]
 800c21e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	6a1b      	ldr	r3, [r3, #32]
 800c224:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	6a1b      	ldr	r3, [r3, #32]
 800c22a:	f023 0201 	bic.w	r2, r3, #1
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	699b      	ldr	r3, [r3, #24]
 800c236:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c23e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	011b      	lsls	r3, r3, #4
 800c244:	693a      	ldr	r2, [r7, #16]
 800c246:	4313      	orrs	r3, r2
 800c248:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	f023 030a 	bic.w	r3, r3, #10
 800c250:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c252:	697a      	ldr	r2, [r7, #20]
 800c254:	68bb      	ldr	r3, [r7, #8]
 800c256:	4313      	orrs	r3, r2
 800c258:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	693a      	ldr	r2, [r7, #16]
 800c25e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	697a      	ldr	r2, [r7, #20]
 800c264:	621a      	str	r2, [r3, #32]
}
 800c266:	bf00      	nop
 800c268:	371c      	adds	r7, #28
 800c26a:	46bd      	mov	sp, r7
 800c26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c270:	4770      	bx	lr

0800c272 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c272:	b480      	push	{r7}
 800c274:	b087      	sub	sp, #28
 800c276:	af00      	add	r7, sp, #0
 800c278:	60f8      	str	r0, [r7, #12]
 800c27a:	60b9      	str	r1, [r7, #8]
 800c27c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	6a1b      	ldr	r3, [r3, #32]
 800c282:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	6a1b      	ldr	r3, [r3, #32]
 800c288:	f023 0210 	bic.w	r2, r3, #16
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	699b      	ldr	r3, [r3, #24]
 800c294:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c296:	693b      	ldr	r3, [r7, #16]
 800c298:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c29c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	031b      	lsls	r3, r3, #12
 800c2a2:	693a      	ldr	r2, [r7, #16]
 800c2a4:	4313      	orrs	r3, r2
 800c2a6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c2ae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c2b0:	68bb      	ldr	r3, [r7, #8]
 800c2b2:	011b      	lsls	r3, r3, #4
 800c2b4:	697a      	ldr	r2, [r7, #20]
 800c2b6:	4313      	orrs	r3, r2
 800c2b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	693a      	ldr	r2, [r7, #16]
 800c2be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	697a      	ldr	r2, [r7, #20]
 800c2c4:	621a      	str	r2, [r3, #32]
}
 800c2c6:	bf00      	nop
 800c2c8:	371c      	adds	r7, #28
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d0:	4770      	bx	lr

0800c2d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c2d2:	b480      	push	{r7}
 800c2d4:	b085      	sub	sp, #20
 800c2d6:	af00      	add	r7, sp, #0
 800c2d8:	6078      	str	r0, [r7, #4]
 800c2da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	689b      	ldr	r3, [r3, #8]
 800c2e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800c2e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c2ee:	683a      	ldr	r2, [r7, #0]
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	4313      	orrs	r3, r2
 800c2f4:	f043 0307 	orr.w	r3, r3, #7
 800c2f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	68fa      	ldr	r2, [r7, #12]
 800c2fe:	609a      	str	r2, [r3, #8]
}
 800c300:	bf00      	nop
 800c302:	3714      	adds	r7, #20
 800c304:	46bd      	mov	sp, r7
 800c306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30a:	4770      	bx	lr

0800c30c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c30c:	b480      	push	{r7}
 800c30e:	b087      	sub	sp, #28
 800c310:	af00      	add	r7, sp, #0
 800c312:	60f8      	str	r0, [r7, #12]
 800c314:	60b9      	str	r1, [r7, #8]
 800c316:	607a      	str	r2, [r7, #4]
 800c318:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	689b      	ldr	r3, [r3, #8]
 800c31e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c326:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	021a      	lsls	r2, r3, #8
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	431a      	orrs	r2, r3
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	4313      	orrs	r3, r2
 800c334:	697a      	ldr	r2, [r7, #20]
 800c336:	4313      	orrs	r3, r2
 800c338:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	697a      	ldr	r2, [r7, #20]
 800c33e:	609a      	str	r2, [r3, #8]
}
 800c340:	bf00      	nop
 800c342:	371c      	adds	r7, #28
 800c344:	46bd      	mov	sp, r7
 800c346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34a:	4770      	bx	lr

0800c34c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c34c:	b480      	push	{r7}
 800c34e:	b085      	sub	sp, #20
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
 800c354:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c35c:	2b01      	cmp	r3, #1
 800c35e:	d101      	bne.n	800c364 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c360:	2302      	movs	r3, #2
 800c362:	e04a      	b.n	800c3fa <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2201      	movs	r2, #1
 800c368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2202      	movs	r2, #2
 800c370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	685b      	ldr	r3, [r3, #4]
 800c37a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	689b      	ldr	r3, [r3, #8]
 800c382:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	4a1f      	ldr	r2, [pc, #124]	@ (800c408 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800c38a:	4293      	cmp	r3, r2
 800c38c:	d108      	bne.n	800c3a0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c394:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	685b      	ldr	r3, [r3, #4]
 800c39a:	68fa      	ldr	r2, [r7, #12]
 800c39c:	4313      	orrs	r3, r2
 800c39e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	68fa      	ldr	r2, [r7, #12]
 800c3ae:	4313      	orrs	r3, r2
 800c3b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	68fa      	ldr	r2, [r7, #12]
 800c3b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	4a12      	ldr	r2, [pc, #72]	@ (800c408 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d004      	beq.n	800c3ce <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c3cc:	d10c      	bne.n	800c3e8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c3d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	689b      	ldr	r3, [r3, #8]
 800c3da:	68ba      	ldr	r2, [r7, #8]
 800c3dc:	4313      	orrs	r3, r2
 800c3de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	68ba      	ldr	r2, [r7, #8]
 800c3e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c3f8:	2300      	movs	r3, #0
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	3714      	adds	r7, #20
 800c3fe:	46bd      	mov	sp, r7
 800c400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c404:	4770      	bx	lr
 800c406:	bf00      	nop
 800c408:	40012c00 	.word	0x40012c00

0800c40c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c40c:	b480      	push	{r7}
 800c40e:	b083      	sub	sp, #12
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c414:	bf00      	nop
 800c416:	370c      	adds	r7, #12
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr

0800c420 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c420:	b480      	push	{r7}
 800c422:	b083      	sub	sp, #12
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c428:	bf00      	nop
 800c42a:	370c      	adds	r7, #12
 800c42c:	46bd      	mov	sp, r7
 800c42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c432:	4770      	bx	lr

0800c434 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c434:	b480      	push	{r7}
 800c436:	b083      	sub	sp, #12
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c43c:	bf00      	nop
 800c43e:	370c      	adds	r7, #12
 800c440:	46bd      	mov	sp, r7
 800c442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c446:	4770      	bx	lr

0800c448 <LL_RCC_GetUSARTClockSource>:
{
 800c448:	b480      	push	{r7}
 800c44a:	b083      	sub	sp, #12
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800c450:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c454:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	4013      	ands	r3, r2
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	370c      	adds	r7, #12
 800c460:	46bd      	mov	sp, r7
 800c462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c466:	4770      	bx	lr

0800c468 <LL_RCC_GetLPUARTClockSource>:
{
 800c468:	b480      	push	{r7}
 800c46a:	b083      	sub	sp, #12
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800c470:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c474:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	4013      	ands	r3, r2
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	370c      	adds	r7, #12
 800c480:	46bd      	mov	sp, r7
 800c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c486:	4770      	bx	lr

0800c488 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b082      	sub	sp, #8
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d101      	bne.n	800c49a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c496:	2301      	movs	r3, #1
 800c498:	e042      	b.n	800c520 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d106      	bne.n	800c4b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	f000 f83b 	bl	800c528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2224      	movs	r2, #36	@ 0x24
 800c4b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	681a      	ldr	r2, [r3, #0]
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	f022 0201 	bic.w	r2, r2, #1
 800c4c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d002      	beq.n	800c4d8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800c4d2:	6878      	ldr	r0, [r7, #4]
 800c4d4:	f000 fae8 	bl	800caa8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f000 f8bd 	bl	800c658 <UART_SetConfig>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	2b01      	cmp	r3, #1
 800c4e2:	d101      	bne.n	800c4e8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	e01b      	b.n	800c520 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	685a      	ldr	r2, [r3, #4]
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c4f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	689a      	ldr	r2, [r3, #8]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c506:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	681a      	ldr	r2, [r3, #0]
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	f042 0201 	orr.w	r2, r2, #1
 800c516:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f000 fb67 	bl	800cbec <UART_CheckIdleState>
 800c51e:	4603      	mov	r3, r0
}
 800c520:	4618      	mov	r0, r3
 800c522:	3708      	adds	r7, #8
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}

0800c528 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800c528:	b480      	push	{r7}
 800c52a:	b083      	sub	sp, #12
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800c530:	bf00      	nop
 800c532:	370c      	adds	r7, #12
 800c534:	46bd      	mov	sp, r7
 800c536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53a:	4770      	bx	lr

0800c53c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b08a      	sub	sp, #40	@ 0x28
 800c540:	af02      	add	r7, sp, #8
 800c542:	60f8      	str	r0, [r7, #12]
 800c544:	60b9      	str	r1, [r7, #8]
 800c546:	603b      	str	r3, [r7, #0]
 800c548:	4613      	mov	r3, r2
 800c54a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c552:	2b20      	cmp	r3, #32
 800c554:	d17b      	bne.n	800c64e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d002      	beq.n	800c562 <HAL_UART_Transmit+0x26>
 800c55c:	88fb      	ldrh	r3, [r7, #6]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d101      	bne.n	800c566 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c562:	2301      	movs	r3, #1
 800c564:	e074      	b.n	800c650 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	2200      	movs	r2, #0
 800c56a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	2221      	movs	r2, #33	@ 0x21
 800c572:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c576:	f7f8 fbe3 	bl	8004d40 <HAL_GetTick>
 800c57a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	88fa      	ldrh	r2, [r7, #6]
 800c580:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	88fa      	ldrh	r2, [r7, #6]
 800c588:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	689b      	ldr	r3, [r3, #8]
 800c590:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c594:	d108      	bne.n	800c5a8 <HAL_UART_Transmit+0x6c>
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	691b      	ldr	r3, [r3, #16]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d104      	bne.n	800c5a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	61bb      	str	r3, [r7, #24]
 800c5a6:	e003      	b.n	800c5b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800c5b0:	e030      	b.n	800c614 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	9300      	str	r3, [sp, #0]
 800c5b6:	697b      	ldr	r3, [r7, #20]
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	2180      	movs	r1, #128	@ 0x80
 800c5bc:	68f8      	ldr	r0, [r7, #12]
 800c5be:	f000 fbbf 	bl	800cd40 <UART_WaitOnFlagUntilTimeout>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d005      	beq.n	800c5d4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	2220      	movs	r2, #32
 800c5cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800c5d0:	2303      	movs	r3, #3
 800c5d2:	e03d      	b.n	800c650 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800c5d4:	69fb      	ldr	r3, [r7, #28]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d10b      	bne.n	800c5f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c5da:	69bb      	ldr	r3, [r7, #24]
 800c5dc:	881b      	ldrh	r3, [r3, #0]
 800c5de:	461a      	mov	r2, r3
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c5e8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800c5ea:	69bb      	ldr	r3, [r7, #24]
 800c5ec:	3302      	adds	r3, #2
 800c5ee:	61bb      	str	r3, [r7, #24]
 800c5f0:	e007      	b.n	800c602 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c5f2:	69fb      	ldr	r3, [r7, #28]
 800c5f4:	781a      	ldrb	r2, [r3, #0]
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800c5fc:	69fb      	ldr	r3, [r7, #28]
 800c5fe:	3301      	adds	r3, #1
 800c600:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c608:	b29b      	uxth	r3, r3
 800c60a:	3b01      	subs	r3, #1
 800c60c:	b29a      	uxth	r2, r3
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800c61a:	b29b      	uxth	r3, r3
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d1c8      	bne.n	800c5b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	9300      	str	r3, [sp, #0]
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	2200      	movs	r2, #0
 800c628:	2140      	movs	r1, #64	@ 0x40
 800c62a:	68f8      	ldr	r0, [r7, #12]
 800c62c:	f000 fb88 	bl	800cd40 <UART_WaitOnFlagUntilTimeout>
 800c630:	4603      	mov	r3, r0
 800c632:	2b00      	cmp	r3, #0
 800c634:	d005      	beq.n	800c642 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	2220      	movs	r2, #32
 800c63a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800c63e:	2303      	movs	r3, #3
 800c640:	e006      	b.n	800c650 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	2220      	movs	r2, #32
 800c646:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800c64a:	2300      	movs	r3, #0
 800c64c:	e000      	b.n	800c650 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800c64e:	2302      	movs	r3, #2
  }
}
 800c650:	4618      	mov	r0, r3
 800c652:	3720      	adds	r7, #32
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}

0800c658 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c658:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c65c:	b08c      	sub	sp, #48	@ 0x30
 800c65e:	af00      	add	r7, sp, #0
 800c660:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c662:	2300      	movs	r3, #0
 800c664:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	689a      	ldr	r2, [r3, #8]
 800c66c:	697b      	ldr	r3, [r7, #20]
 800c66e:	691b      	ldr	r3, [r3, #16]
 800c670:	431a      	orrs	r2, r3
 800c672:	697b      	ldr	r3, [r7, #20]
 800c674:	695b      	ldr	r3, [r3, #20]
 800c676:	431a      	orrs	r2, r3
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	69db      	ldr	r3, [r3, #28]
 800c67c:	4313      	orrs	r3, r2
 800c67e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c680:	697b      	ldr	r3, [r7, #20]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	681a      	ldr	r2, [r3, #0]
 800c686:	4baf      	ldr	r3, [pc, #700]	@ (800c944 <UART_SetConfig+0x2ec>)
 800c688:	4013      	ands	r3, r2
 800c68a:	697a      	ldr	r2, [r7, #20]
 800c68c:	6812      	ldr	r2, [r2, #0]
 800c68e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c690:	430b      	orrs	r3, r1
 800c692:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c694:	697b      	ldr	r3, [r7, #20]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	685b      	ldr	r3, [r3, #4]
 800c69a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c69e:	697b      	ldr	r3, [r7, #20]
 800c6a0:	68da      	ldr	r2, [r3, #12]
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	430a      	orrs	r2, r1
 800c6a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	699b      	ldr	r3, [r3, #24]
 800c6ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	4aa4      	ldr	r2, [pc, #656]	@ (800c948 <UART_SetConfig+0x2f0>)
 800c6b6:	4293      	cmp	r3, r2
 800c6b8:	d004      	beq.n	800c6c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	6a1b      	ldr	r3, [r3, #32]
 800c6be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c6c0:	4313      	orrs	r3, r2
 800c6c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	689b      	ldr	r3, [r3, #8]
 800c6ca:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800c6ce:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800c6d2:	697a      	ldr	r2, [r7, #20]
 800c6d4:	6812      	ldr	r2, [r2, #0]
 800c6d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c6d8:	430b      	orrs	r3, r1
 800c6da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c6dc:	697b      	ldr	r3, [r7, #20]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6e2:	f023 010f 	bic.w	r1, r3, #15
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	430a      	orrs	r2, r1
 800c6f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	4a95      	ldr	r2, [pc, #596]	@ (800c94c <UART_SetConfig+0x2f4>)
 800c6f8:	4293      	cmp	r3, r2
 800c6fa:	d125      	bne.n	800c748 <UART_SetConfig+0xf0>
 800c6fc:	2003      	movs	r0, #3
 800c6fe:	f7ff fea3 	bl	800c448 <LL_RCC_GetUSARTClockSource>
 800c702:	4603      	mov	r3, r0
 800c704:	2b03      	cmp	r3, #3
 800c706:	d81b      	bhi.n	800c740 <UART_SetConfig+0xe8>
 800c708:	a201      	add	r2, pc, #4	@ (adr r2, 800c710 <UART_SetConfig+0xb8>)
 800c70a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c70e:	bf00      	nop
 800c710:	0800c721 	.word	0x0800c721
 800c714:	0800c731 	.word	0x0800c731
 800c718:	0800c729 	.word	0x0800c729
 800c71c:	0800c739 	.word	0x0800c739
 800c720:	2301      	movs	r3, #1
 800c722:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c726:	e042      	b.n	800c7ae <UART_SetConfig+0x156>
 800c728:	2302      	movs	r3, #2
 800c72a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c72e:	e03e      	b.n	800c7ae <UART_SetConfig+0x156>
 800c730:	2304      	movs	r3, #4
 800c732:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c736:	e03a      	b.n	800c7ae <UART_SetConfig+0x156>
 800c738:	2308      	movs	r3, #8
 800c73a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c73e:	e036      	b.n	800c7ae <UART_SetConfig+0x156>
 800c740:	2310      	movs	r3, #16
 800c742:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c746:	e032      	b.n	800c7ae <UART_SetConfig+0x156>
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	4a7e      	ldr	r2, [pc, #504]	@ (800c948 <UART_SetConfig+0x2f0>)
 800c74e:	4293      	cmp	r3, r2
 800c750:	d12a      	bne.n	800c7a8 <UART_SetConfig+0x150>
 800c752:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800c756:	f7ff fe87 	bl	800c468 <LL_RCC_GetLPUARTClockSource>
 800c75a:	4603      	mov	r3, r0
 800c75c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c760:	d01a      	beq.n	800c798 <UART_SetConfig+0x140>
 800c762:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c766:	d81b      	bhi.n	800c7a0 <UART_SetConfig+0x148>
 800c768:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c76c:	d00c      	beq.n	800c788 <UART_SetConfig+0x130>
 800c76e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c772:	d815      	bhi.n	800c7a0 <UART_SetConfig+0x148>
 800c774:	2b00      	cmp	r3, #0
 800c776:	d003      	beq.n	800c780 <UART_SetConfig+0x128>
 800c778:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c77c:	d008      	beq.n	800c790 <UART_SetConfig+0x138>
 800c77e:	e00f      	b.n	800c7a0 <UART_SetConfig+0x148>
 800c780:	2300      	movs	r3, #0
 800c782:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c786:	e012      	b.n	800c7ae <UART_SetConfig+0x156>
 800c788:	2302      	movs	r3, #2
 800c78a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c78e:	e00e      	b.n	800c7ae <UART_SetConfig+0x156>
 800c790:	2304      	movs	r3, #4
 800c792:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c796:	e00a      	b.n	800c7ae <UART_SetConfig+0x156>
 800c798:	2308      	movs	r3, #8
 800c79a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c79e:	e006      	b.n	800c7ae <UART_SetConfig+0x156>
 800c7a0:	2310      	movs	r3, #16
 800c7a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800c7a6:	e002      	b.n	800c7ae <UART_SetConfig+0x156>
 800c7a8:	2310      	movs	r3, #16
 800c7aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c7ae:	697b      	ldr	r3, [r7, #20]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	4a65      	ldr	r2, [pc, #404]	@ (800c948 <UART_SetConfig+0x2f0>)
 800c7b4:	4293      	cmp	r3, r2
 800c7b6:	f040 8097 	bne.w	800c8e8 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c7ba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c7be:	2b08      	cmp	r3, #8
 800c7c0:	d823      	bhi.n	800c80a <UART_SetConfig+0x1b2>
 800c7c2:	a201      	add	r2, pc, #4	@ (adr r2, 800c7c8 <UART_SetConfig+0x170>)
 800c7c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7c8:	0800c7ed 	.word	0x0800c7ed
 800c7cc:	0800c80b 	.word	0x0800c80b
 800c7d0:	0800c7f5 	.word	0x0800c7f5
 800c7d4:	0800c80b 	.word	0x0800c80b
 800c7d8:	0800c7fb 	.word	0x0800c7fb
 800c7dc:	0800c80b 	.word	0x0800c80b
 800c7e0:	0800c80b 	.word	0x0800c80b
 800c7e4:	0800c80b 	.word	0x0800c80b
 800c7e8:	0800c803 	.word	0x0800c803
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c7ec:	f7fe fd00 	bl	800b1f0 <HAL_RCC_GetPCLK1Freq>
 800c7f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c7f2:	e010      	b.n	800c816 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c7f4:	4b56      	ldr	r3, [pc, #344]	@ (800c950 <UART_SetConfig+0x2f8>)
 800c7f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c7f8:	e00d      	b.n	800c816 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c7fa:	f7fe fc79 	bl	800b0f0 <HAL_RCC_GetSysClockFreq>
 800c7fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c800:	e009      	b.n	800c816 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c802:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c806:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c808:	e005      	b.n	800c816 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800c80a:	2300      	movs	r3, #0
 800c80c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c80e:	2301      	movs	r3, #1
 800c810:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c814:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c818:	2b00      	cmp	r3, #0
 800c81a:	f000 812b 	beq.w	800ca74 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c822:	4a4c      	ldr	r2, [pc, #304]	@ (800c954 <UART_SetConfig+0x2fc>)
 800c824:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c828:	461a      	mov	r2, r3
 800c82a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c82c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c830:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c832:	697b      	ldr	r3, [r7, #20]
 800c834:	685a      	ldr	r2, [r3, #4]
 800c836:	4613      	mov	r3, r2
 800c838:	005b      	lsls	r3, r3, #1
 800c83a:	4413      	add	r3, r2
 800c83c:	69ba      	ldr	r2, [r7, #24]
 800c83e:	429a      	cmp	r2, r3
 800c840:	d305      	bcc.n	800c84e <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	685b      	ldr	r3, [r3, #4]
 800c846:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c848:	69ba      	ldr	r2, [r7, #24]
 800c84a:	429a      	cmp	r2, r3
 800c84c:	d903      	bls.n	800c856 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800c84e:	2301      	movs	r3, #1
 800c850:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c854:	e10e      	b.n	800ca74 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c858:	2200      	movs	r2, #0
 800c85a:	60bb      	str	r3, [r7, #8]
 800c85c:	60fa      	str	r2, [r7, #12]
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c862:	4a3c      	ldr	r2, [pc, #240]	@ (800c954 <UART_SetConfig+0x2fc>)
 800c864:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c868:	b29b      	uxth	r3, r3
 800c86a:	2200      	movs	r2, #0
 800c86c:	603b      	str	r3, [r7, #0]
 800c86e:	607a      	str	r2, [r7, #4]
 800c870:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c874:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c878:	f7f4 f96e 	bl	8000b58 <__aeabi_uldivmod>
 800c87c:	4602      	mov	r2, r0
 800c87e:	460b      	mov	r3, r1
 800c880:	4610      	mov	r0, r2
 800c882:	4619      	mov	r1, r3
 800c884:	f04f 0200 	mov.w	r2, #0
 800c888:	f04f 0300 	mov.w	r3, #0
 800c88c:	020b      	lsls	r3, r1, #8
 800c88e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c892:	0202      	lsls	r2, r0, #8
 800c894:	6979      	ldr	r1, [r7, #20]
 800c896:	6849      	ldr	r1, [r1, #4]
 800c898:	0849      	lsrs	r1, r1, #1
 800c89a:	2000      	movs	r0, #0
 800c89c:	460c      	mov	r4, r1
 800c89e:	4605      	mov	r5, r0
 800c8a0:	eb12 0804 	adds.w	r8, r2, r4
 800c8a4:	eb43 0905 	adc.w	r9, r3, r5
 800c8a8:	697b      	ldr	r3, [r7, #20]
 800c8aa:	685b      	ldr	r3, [r3, #4]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	469a      	mov	sl, r3
 800c8b0:	4693      	mov	fp, r2
 800c8b2:	4652      	mov	r2, sl
 800c8b4:	465b      	mov	r3, fp
 800c8b6:	4640      	mov	r0, r8
 800c8b8:	4649      	mov	r1, r9
 800c8ba:	f7f4 f94d 	bl	8000b58 <__aeabi_uldivmod>
 800c8be:	4602      	mov	r2, r0
 800c8c0:	460b      	mov	r3, r1
 800c8c2:	4613      	mov	r3, r2
 800c8c4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c8c6:	6a3b      	ldr	r3, [r7, #32]
 800c8c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c8cc:	d308      	bcc.n	800c8e0 <UART_SetConfig+0x288>
 800c8ce:	6a3b      	ldr	r3, [r7, #32]
 800c8d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c8d4:	d204      	bcs.n	800c8e0 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	6a3a      	ldr	r2, [r7, #32]
 800c8dc:	60da      	str	r2, [r3, #12]
 800c8de:	e0c9      	b.n	800ca74 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800c8e0:	2301      	movs	r3, #1
 800c8e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c8e6:	e0c5      	b.n	800ca74 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c8e8:	697b      	ldr	r3, [r7, #20]
 800c8ea:	69db      	ldr	r3, [r3, #28]
 800c8ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c8f0:	d16d      	bne.n	800c9ce <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800c8f2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c8f6:	3b01      	subs	r3, #1
 800c8f8:	2b07      	cmp	r3, #7
 800c8fa:	d82d      	bhi.n	800c958 <UART_SetConfig+0x300>
 800c8fc:	a201      	add	r2, pc, #4	@ (adr r2, 800c904 <UART_SetConfig+0x2ac>)
 800c8fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c902:	bf00      	nop
 800c904:	0800c925 	.word	0x0800c925
 800c908:	0800c92d 	.word	0x0800c92d
 800c90c:	0800c959 	.word	0x0800c959
 800c910:	0800c933 	.word	0x0800c933
 800c914:	0800c959 	.word	0x0800c959
 800c918:	0800c959 	.word	0x0800c959
 800c91c:	0800c959 	.word	0x0800c959
 800c920:	0800c93b 	.word	0x0800c93b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c924:	f7fe fc7a 	bl	800b21c <HAL_RCC_GetPCLK2Freq>
 800c928:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c92a:	e01b      	b.n	800c964 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c92c:	4b08      	ldr	r3, [pc, #32]	@ (800c950 <UART_SetConfig+0x2f8>)
 800c92e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c930:	e018      	b.n	800c964 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c932:	f7fe fbdd 	bl	800b0f0 <HAL_RCC_GetSysClockFreq>
 800c936:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800c938:	e014      	b.n	800c964 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c93a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c93e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800c940:	e010      	b.n	800c964 <UART_SetConfig+0x30c>
 800c942:	bf00      	nop
 800c944:	cfff69f3 	.word	0xcfff69f3
 800c948:	40008000 	.word	0x40008000
 800c94c:	40013800 	.word	0x40013800
 800c950:	00f42400 	.word	0x00f42400
 800c954:	08014a94 	.word	0x08014a94
      default:
        pclk = 0U;
 800c958:	2300      	movs	r3, #0
 800c95a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800c95c:	2301      	movs	r3, #1
 800c95e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800c962:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c966:	2b00      	cmp	r3, #0
 800c968:	f000 8084 	beq.w	800ca74 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c96c:	697b      	ldr	r3, [r7, #20]
 800c96e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c970:	4a4b      	ldr	r2, [pc, #300]	@ (800caa0 <UART_SetConfig+0x448>)
 800c972:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c976:	461a      	mov	r2, r3
 800c978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c97a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c97e:	005a      	lsls	r2, r3, #1
 800c980:	697b      	ldr	r3, [r7, #20]
 800c982:	685b      	ldr	r3, [r3, #4]
 800c984:	085b      	lsrs	r3, r3, #1
 800c986:	441a      	add	r2, r3
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	685b      	ldr	r3, [r3, #4]
 800c98c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c990:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c992:	6a3b      	ldr	r3, [r7, #32]
 800c994:	2b0f      	cmp	r3, #15
 800c996:	d916      	bls.n	800c9c6 <UART_SetConfig+0x36e>
 800c998:	6a3b      	ldr	r3, [r7, #32]
 800c99a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c99e:	d212      	bcs.n	800c9c6 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c9a0:	6a3b      	ldr	r3, [r7, #32]
 800c9a2:	b29b      	uxth	r3, r3
 800c9a4:	f023 030f 	bic.w	r3, r3, #15
 800c9a8:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c9aa:	6a3b      	ldr	r3, [r7, #32]
 800c9ac:	085b      	lsrs	r3, r3, #1
 800c9ae:	b29b      	uxth	r3, r3
 800c9b0:	f003 0307 	and.w	r3, r3, #7
 800c9b4:	b29a      	uxth	r2, r3
 800c9b6:	8bfb      	ldrh	r3, [r7, #30]
 800c9b8:	4313      	orrs	r3, r2
 800c9ba:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	8bfa      	ldrh	r2, [r7, #30]
 800c9c2:	60da      	str	r2, [r3, #12]
 800c9c4:	e056      	b.n	800ca74 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800c9c6:	2301      	movs	r3, #1
 800c9c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800c9cc:	e052      	b.n	800ca74 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c9ce:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800c9d2:	3b01      	subs	r3, #1
 800c9d4:	2b07      	cmp	r3, #7
 800c9d6:	d822      	bhi.n	800ca1e <UART_SetConfig+0x3c6>
 800c9d8:	a201      	add	r2, pc, #4	@ (adr r2, 800c9e0 <UART_SetConfig+0x388>)
 800c9da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9de:	bf00      	nop
 800c9e0:	0800ca01 	.word	0x0800ca01
 800c9e4:	0800ca09 	.word	0x0800ca09
 800c9e8:	0800ca1f 	.word	0x0800ca1f
 800c9ec:	0800ca0f 	.word	0x0800ca0f
 800c9f0:	0800ca1f 	.word	0x0800ca1f
 800c9f4:	0800ca1f 	.word	0x0800ca1f
 800c9f8:	0800ca1f 	.word	0x0800ca1f
 800c9fc:	0800ca17 	.word	0x0800ca17
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ca00:	f7fe fc0c 	bl	800b21c <HAL_RCC_GetPCLK2Freq>
 800ca04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ca06:	e010      	b.n	800ca2a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ca08:	4b26      	ldr	r3, [pc, #152]	@ (800caa4 <UART_SetConfig+0x44c>)
 800ca0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ca0c:	e00d      	b.n	800ca2a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ca0e:	f7fe fb6f 	bl	800b0f0 <HAL_RCC_GetSysClockFreq>
 800ca12:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ca14:	e009      	b.n	800ca2a <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ca1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ca1c:	e005      	b.n	800ca2a <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ca22:	2301      	movs	r3, #1
 800ca24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ca28:	bf00      	nop
    }

    if (pclk != 0U)
 800ca2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d021      	beq.n	800ca74 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca34:	4a1a      	ldr	r2, [pc, #104]	@ (800caa0 <UART_SetConfig+0x448>)
 800ca36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ca3a:	461a      	mov	r2, r3
 800ca3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca3e:	fbb3 f2f2 	udiv	r2, r3, r2
 800ca42:	697b      	ldr	r3, [r7, #20]
 800ca44:	685b      	ldr	r3, [r3, #4]
 800ca46:	085b      	lsrs	r3, r3, #1
 800ca48:	441a      	add	r2, r3
 800ca4a:	697b      	ldr	r3, [r7, #20]
 800ca4c:	685b      	ldr	r3, [r3, #4]
 800ca4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca52:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ca54:	6a3b      	ldr	r3, [r7, #32]
 800ca56:	2b0f      	cmp	r3, #15
 800ca58:	d909      	bls.n	800ca6e <UART_SetConfig+0x416>
 800ca5a:	6a3b      	ldr	r3, [r7, #32]
 800ca5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ca60:	d205      	bcs.n	800ca6e <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ca62:	6a3b      	ldr	r3, [r7, #32]
 800ca64:	b29a      	uxth	r2, r3
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	60da      	str	r2, [r3, #12]
 800ca6c:	e002      	b.n	800ca74 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800ca6e:	2301      	movs	r3, #1
 800ca70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ca74:	697b      	ldr	r3, [r7, #20]
 800ca76:	2201      	movs	r2, #1
 800ca78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ca7c:	697b      	ldr	r3, [r7, #20]
 800ca7e:	2201      	movs	r2, #1
 800ca80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ca84:	697b      	ldr	r3, [r7, #20]
 800ca86:	2200      	movs	r2, #0
 800ca88:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800ca90:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800ca94:	4618      	mov	r0, r3
 800ca96:	3730      	adds	r7, #48	@ 0x30
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ca9e:	bf00      	nop
 800caa0:	08014a94 	.word	0x08014a94
 800caa4:	00f42400 	.word	0x00f42400

0800caa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800caa8:	b480      	push	{r7}
 800caaa:	b083      	sub	sp, #12
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cab4:	f003 0308 	and.w	r3, r3, #8
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d00a      	beq.n	800cad2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	685b      	ldr	r3, [r3, #4]
 800cac2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	430a      	orrs	r2, r1
 800cad0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cad6:	f003 0301 	and.w	r3, r3, #1
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d00a      	beq.n	800caf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	685b      	ldr	r3, [r3, #4]
 800cae4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	430a      	orrs	r2, r1
 800caf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800caf8:	f003 0302 	and.w	r3, r3, #2
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d00a      	beq.n	800cb16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	685b      	ldr	r3, [r3, #4]
 800cb06:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	430a      	orrs	r2, r1
 800cb14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb1a:	f003 0304 	and.w	r3, r3, #4
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d00a      	beq.n	800cb38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	685b      	ldr	r3, [r3, #4]
 800cb28:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	430a      	orrs	r2, r1
 800cb36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb3c:	f003 0310 	and.w	r3, r3, #16
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d00a      	beq.n	800cb5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	689b      	ldr	r3, [r3, #8]
 800cb4a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	430a      	orrs	r2, r1
 800cb58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb5e:	f003 0320 	and.w	r3, r3, #32
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d00a      	beq.n	800cb7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	689b      	ldr	r3, [r3, #8]
 800cb6c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	430a      	orrs	r2, r1
 800cb7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d01a      	beq.n	800cbbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	685b      	ldr	r3, [r3, #4]
 800cb8e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	430a      	orrs	r2, r1
 800cb9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cba2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cba6:	d10a      	bne.n	800cbbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	685b      	ldr	r3, [r3, #4]
 800cbae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	430a      	orrs	r2, r1
 800cbbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d00a      	beq.n	800cbe0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	685b      	ldr	r3, [r3, #4]
 800cbd0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	430a      	orrs	r2, r1
 800cbde:	605a      	str	r2, [r3, #4]
  }
}
 800cbe0:	bf00      	nop
 800cbe2:	370c      	adds	r7, #12
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbea:	4770      	bx	lr

0800cbec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b098      	sub	sp, #96	@ 0x60
 800cbf0:	af02      	add	r7, sp, #8
 800cbf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cbfc:	f7f8 f8a0 	bl	8004d40 <HAL_GetTick>
 800cc00:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	f003 0308 	and.w	r3, r3, #8
 800cc0c:	2b08      	cmp	r3, #8
 800cc0e:	d12f      	bne.n	800cc70 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cc10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cc14:	9300      	str	r3, [sp, #0]
 800cc16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc18:	2200      	movs	r2, #0
 800cc1a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f000 f88e 	bl	800cd40 <UART_WaitOnFlagUntilTimeout>
 800cc24:	4603      	mov	r3, r0
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d022      	beq.n	800cc70 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc32:	e853 3f00 	ldrex	r3, [r3]
 800cc36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800cc38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cc3e:	653b      	str	r3, [r7, #80]	@ 0x50
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	461a      	mov	r2, r3
 800cc46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc48:	647b      	str	r3, [r7, #68]	@ 0x44
 800cc4a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cc4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cc50:	e841 2300 	strex	r3, r2, [r1]
 800cc54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cc56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d1e6      	bne.n	800cc2a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2220      	movs	r2, #32
 800cc60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2200      	movs	r2, #0
 800cc68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cc6c:	2303      	movs	r3, #3
 800cc6e:	e063      	b.n	800cd38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f003 0304 	and.w	r3, r3, #4
 800cc7a:	2b04      	cmp	r3, #4
 800cc7c:	d149      	bne.n	800cd12 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cc7e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cc82:	9300      	str	r3, [sp, #0]
 800cc84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc86:	2200      	movs	r2, #0
 800cc88:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f000 f857 	bl	800cd40 <UART_WaitOnFlagUntilTimeout>
 800cc92:	4603      	mov	r3, r0
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d03c      	beq.n	800cd12 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cca0:	e853 3f00 	ldrex	r3, [r3]
 800cca4:	623b      	str	r3, [r7, #32]
   return(result);
 800cca6:	6a3b      	ldr	r3, [r7, #32]
 800cca8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ccac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	461a      	mov	r2, r3
 800ccb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ccb6:	633b      	str	r3, [r7, #48]	@ 0x30
 800ccb8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ccbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ccbe:	e841 2300 	strex	r3, r2, [r1]
 800ccc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ccc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d1e6      	bne.n	800cc98 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	3308      	adds	r3, #8
 800ccd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccd2:	693b      	ldr	r3, [r7, #16]
 800ccd4:	e853 3f00 	ldrex	r3, [r3]
 800ccd8:	60fb      	str	r3, [r7, #12]
   return(result);
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	f023 0301 	bic.w	r3, r3, #1
 800cce0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	3308      	adds	r3, #8
 800cce8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ccea:	61fa      	str	r2, [r7, #28]
 800ccec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccee:	69b9      	ldr	r1, [r7, #24]
 800ccf0:	69fa      	ldr	r2, [r7, #28]
 800ccf2:	e841 2300 	strex	r3, r2, [r1]
 800ccf6:	617b      	str	r3, [r7, #20]
   return(result);
 800ccf8:	697b      	ldr	r3, [r7, #20]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d1e5      	bne.n	800ccca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	2220      	movs	r2, #32
 800cd02:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2200      	movs	r2, #0
 800cd0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cd0e:	2303      	movs	r3, #3
 800cd10:	e012      	b.n	800cd38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2220      	movs	r2, #32
 800cd16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2220      	movs	r2, #32
 800cd1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2200      	movs	r2, #0
 800cd26:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	2200      	movs	r2, #0
 800cd32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cd36:	2300      	movs	r3, #0
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3758      	adds	r7, #88	@ 0x58
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}

0800cd40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b084      	sub	sp, #16
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	60f8      	str	r0, [r7, #12]
 800cd48:	60b9      	str	r1, [r7, #8]
 800cd4a:	603b      	str	r3, [r7, #0]
 800cd4c:	4613      	mov	r3, r2
 800cd4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd50:	e04f      	b.n	800cdf2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cd52:	69bb      	ldr	r3, [r7, #24]
 800cd54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd58:	d04b      	beq.n	800cdf2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cd5a:	f7f7 fff1 	bl	8004d40 <HAL_GetTick>
 800cd5e:	4602      	mov	r2, r0
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	1ad3      	subs	r3, r2, r3
 800cd64:	69ba      	ldr	r2, [r7, #24]
 800cd66:	429a      	cmp	r2, r3
 800cd68:	d302      	bcc.n	800cd70 <UART_WaitOnFlagUntilTimeout+0x30>
 800cd6a:	69bb      	ldr	r3, [r7, #24]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d101      	bne.n	800cd74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cd70:	2303      	movs	r3, #3
 800cd72:	e04e      	b.n	800ce12 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f003 0304 	and.w	r3, r3, #4
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d037      	beq.n	800cdf2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800cd82:	68bb      	ldr	r3, [r7, #8]
 800cd84:	2b80      	cmp	r3, #128	@ 0x80
 800cd86:	d034      	beq.n	800cdf2 <UART_WaitOnFlagUntilTimeout+0xb2>
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	2b40      	cmp	r3, #64	@ 0x40
 800cd8c:	d031      	beq.n	800cdf2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	69db      	ldr	r3, [r3, #28]
 800cd94:	f003 0308 	and.w	r3, r3, #8
 800cd98:	2b08      	cmp	r3, #8
 800cd9a:	d110      	bne.n	800cdbe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	2208      	movs	r2, #8
 800cda2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cda4:	68f8      	ldr	r0, [r7, #12]
 800cda6:	f000 f838 	bl	800ce1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	2208      	movs	r2, #8
 800cdae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800cdba:	2301      	movs	r3, #1
 800cdbc:	e029      	b.n	800ce12 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	69db      	ldr	r3, [r3, #28]
 800cdc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cdc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cdcc:	d111      	bne.n	800cdf2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cdd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cdd8:	68f8      	ldr	r0, [r7, #12]
 800cdda:	f000 f81e 	bl	800ce1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	2220      	movs	r2, #32
 800cde2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cde6:	68fb      	ldr	r3, [r7, #12]
 800cde8:	2200      	movs	r2, #0
 800cdea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800cdee:	2303      	movs	r3, #3
 800cdf0:	e00f      	b.n	800ce12 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	69da      	ldr	r2, [r3, #28]
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	4013      	ands	r3, r2
 800cdfc:	68ba      	ldr	r2, [r7, #8]
 800cdfe:	429a      	cmp	r2, r3
 800ce00:	bf0c      	ite	eq
 800ce02:	2301      	moveq	r3, #1
 800ce04:	2300      	movne	r3, #0
 800ce06:	b2db      	uxtb	r3, r3
 800ce08:	461a      	mov	r2, r3
 800ce0a:	79fb      	ldrb	r3, [r7, #7]
 800ce0c:	429a      	cmp	r2, r3
 800ce0e:	d0a0      	beq.n	800cd52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ce10:	2300      	movs	r3, #0
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	3710      	adds	r7, #16
 800ce16:	46bd      	mov	sp, r7
 800ce18:	bd80      	pop	{r7, pc}

0800ce1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ce1a:	b480      	push	{r7}
 800ce1c:	b095      	sub	sp, #84	@ 0x54
 800ce1e:	af00      	add	r7, sp, #0
 800ce20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce2a:	e853 3f00 	ldrex	r3, [r3]
 800ce2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ce30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce32:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ce36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	461a      	mov	r2, r3
 800ce3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ce40:	643b      	str	r3, [r7, #64]	@ 0x40
 800ce42:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ce46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ce48:	e841 2300 	strex	r3, r2, [r1]
 800ce4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ce4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d1e6      	bne.n	800ce22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	3308      	adds	r3, #8
 800ce5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce5c:	6a3b      	ldr	r3, [r7, #32]
 800ce5e:	e853 3f00 	ldrex	r3, [r3]
 800ce62:	61fb      	str	r3, [r7, #28]
   return(result);
 800ce64:	69fb      	ldr	r3, [r7, #28]
 800ce66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ce6a:	f023 0301 	bic.w	r3, r3, #1
 800ce6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	3308      	adds	r3, #8
 800ce76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ce78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ce7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ce7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce80:	e841 2300 	strex	r3, r2, [r1]
 800ce84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ce86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d1e3      	bne.n	800ce54 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	d118      	bne.n	800cec6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	681b      	ldr	r3, [r3, #0]
 800ce98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	e853 3f00 	ldrex	r3, [r3]
 800cea0:	60bb      	str	r3, [r7, #8]
   return(result);
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	f023 0310 	bic.w	r3, r3, #16
 800cea8:	647b      	str	r3, [r7, #68]	@ 0x44
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	461a      	mov	r2, r3
 800ceb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ceb2:	61bb      	str	r3, [r7, #24]
 800ceb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceb6:	6979      	ldr	r1, [r7, #20]
 800ceb8:	69ba      	ldr	r2, [r7, #24]
 800ceba:	e841 2300 	strex	r3, r2, [r1]
 800cebe:	613b      	str	r3, [r7, #16]
   return(result);
 800cec0:	693b      	ldr	r3, [r7, #16]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d1e6      	bne.n	800ce94 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	2220      	movs	r2, #32
 800ceca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2200      	movs	r2, #0
 800ced2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2200      	movs	r2, #0
 800ced8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800ceda:	bf00      	nop
 800cedc:	3754      	adds	r7, #84	@ 0x54
 800cede:	46bd      	mov	sp, r7
 800cee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee4:	4770      	bx	lr

0800cee6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800cee6:	b480      	push	{r7}
 800cee8:	b085      	sub	sp, #20
 800ceea:	af00      	add	r7, sp, #0
 800ceec:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2200      	movs	r2, #0
 800cef2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800cef6:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800cefa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	b29a      	uxth	r2, r3
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800cf06:	2300      	movs	r3, #0
}
 800cf08:	4618      	mov	r0, r3
 800cf0a:	3714      	adds	r7, #20
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf12:	4770      	bx	lr

0800cf14 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800cf14:	b480      	push	{r7}
 800cf16:	b085      	sub	sp, #20
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800cf1c:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800cf20:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800cf28:	b29a      	uxth	r2, r3
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	b29b      	uxth	r3, r3
 800cf2e:	43db      	mvns	r3, r3
 800cf30:	b29b      	uxth	r3, r3
 800cf32:	4013      	ands	r3, r2
 800cf34:	b29a      	uxth	r2, r3
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800cf3c:	2300      	movs	r3, #0
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3714      	adds	r7, #20
 800cf42:	46bd      	mov	sp, r7
 800cf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf48:	4770      	bx	lr

0800cf4a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800cf4a:	b480      	push	{r7}
 800cf4c:	b085      	sub	sp, #20
 800cf4e:	af00      	add	r7, sp, #0
 800cf50:	60f8      	str	r0, [r7, #12]
 800cf52:	1d3b      	adds	r3, r7, #4
 800cf54:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	2201      	movs	r2, #1
 800cf5c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	2200      	movs	r2, #0
 800cf64:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	2200      	movs	r2, #0
 800cf74:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800cf78:	2300      	movs	r3, #0
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3714      	adds	r7, #20
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf84:	4770      	bx	lr
	...

0800cf88 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800cf88:	b480      	push	{r7}
 800cf8a:	b09d      	sub	sp, #116	@ 0x74
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
 800cf90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800cf92:	2300      	movs	r3, #0
 800cf94:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800cf98:	687a      	ldr	r2, [r7, #4]
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	781b      	ldrb	r3, [r3, #0]
 800cf9e:	009b      	lsls	r3, r3, #2
 800cfa0:	4413      	add	r3, r2
 800cfa2:	881b      	ldrh	r3, [r3, #0]
 800cfa4:	b29b      	uxth	r3, r3
 800cfa6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800cfaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cfae:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	78db      	ldrb	r3, [r3, #3]
 800cfb6:	2b03      	cmp	r3, #3
 800cfb8:	d81f      	bhi.n	800cffa <USB_ActivateEndpoint+0x72>
 800cfba:	a201      	add	r2, pc, #4	@ (adr r2, 800cfc0 <USB_ActivateEndpoint+0x38>)
 800cfbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfc0:	0800cfd1 	.word	0x0800cfd1
 800cfc4:	0800cfed 	.word	0x0800cfed
 800cfc8:	0800d003 	.word	0x0800d003
 800cfcc:	0800cfdf 	.word	0x0800cfdf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800cfd0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800cfd4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800cfd8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800cfdc:	e012      	b.n	800d004 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800cfde:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800cfe2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800cfe6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800cfea:	e00b      	b.n	800d004 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800cfec:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800cff0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800cff4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800cff8:	e004      	b.n	800d004 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800cffa:	2301      	movs	r3, #1
 800cffc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800d000:	e000      	b.n	800d004 <USB_ActivateEndpoint+0x7c>
      break;
 800d002:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800d004:	687a      	ldr	r2, [r7, #4]
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	781b      	ldrb	r3, [r3, #0]
 800d00a:	009b      	lsls	r3, r3, #2
 800d00c:	441a      	add	r2, r3
 800d00e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d012:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d016:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d01a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d01e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d022:	b29b      	uxth	r3, r3
 800d024:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800d026:	687a      	ldr	r2, [r7, #4]
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	781b      	ldrb	r3, [r3, #0]
 800d02c:	009b      	lsls	r3, r3, #2
 800d02e:	4413      	add	r3, r2
 800d030:	881b      	ldrh	r3, [r3, #0]
 800d032:	b29b      	uxth	r3, r3
 800d034:	b21b      	sxth	r3, r3
 800d036:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d03a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d03e:	b21a      	sxth	r2, r3
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	781b      	ldrb	r3, [r3, #0]
 800d044:	b21b      	sxth	r3, r3
 800d046:	4313      	orrs	r3, r2
 800d048:	b21b      	sxth	r3, r3
 800d04a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800d04e:	687a      	ldr	r2, [r7, #4]
 800d050:	683b      	ldr	r3, [r7, #0]
 800d052:	781b      	ldrb	r3, [r3, #0]
 800d054:	009b      	lsls	r3, r3, #2
 800d056:	441a      	add	r2, r3
 800d058:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800d05c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d060:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d064:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d068:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d06c:	b29b      	uxth	r3, r3
 800d06e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	7b1b      	ldrb	r3, [r3, #12]
 800d074:	2b00      	cmp	r3, #0
 800d076:	f040 8178 	bne.w	800d36a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	785b      	ldrb	r3, [r3, #1]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	f000 8084 	beq.w	800d18c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	61bb      	str	r3, [r7, #24]
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d08e:	b29b      	uxth	r3, r3
 800d090:	461a      	mov	r2, r3
 800d092:	69bb      	ldr	r3, [r7, #24]
 800d094:	4413      	add	r3, r2
 800d096:	61bb      	str	r3, [r7, #24]
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	781b      	ldrb	r3, [r3, #0]
 800d09c:	00da      	lsls	r2, r3, #3
 800d09e:	69bb      	ldr	r3, [r7, #24]
 800d0a0:	4413      	add	r3, r2
 800d0a2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d0a6:	617b      	str	r3, [r7, #20]
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	88db      	ldrh	r3, [r3, #6]
 800d0ac:	085b      	lsrs	r3, r3, #1
 800d0ae:	b29b      	uxth	r3, r3
 800d0b0:	005b      	lsls	r3, r3, #1
 800d0b2:	b29a      	uxth	r2, r3
 800d0b4:	697b      	ldr	r3, [r7, #20]
 800d0b6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d0b8:	687a      	ldr	r2, [r7, #4]
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	781b      	ldrb	r3, [r3, #0]
 800d0be:	009b      	lsls	r3, r3, #2
 800d0c0:	4413      	add	r3, r2
 800d0c2:	881b      	ldrh	r3, [r3, #0]
 800d0c4:	827b      	strh	r3, [r7, #18]
 800d0c6:	8a7b      	ldrh	r3, [r7, #18]
 800d0c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d01b      	beq.n	800d108 <USB_ActivateEndpoint+0x180>
 800d0d0:	687a      	ldr	r2, [r7, #4]
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	781b      	ldrb	r3, [r3, #0]
 800d0d6:	009b      	lsls	r3, r3, #2
 800d0d8:	4413      	add	r3, r2
 800d0da:	881b      	ldrh	r3, [r3, #0]
 800d0dc:	b29b      	uxth	r3, r3
 800d0de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d0e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d0e6:	823b      	strh	r3, [r7, #16]
 800d0e8:	687a      	ldr	r2, [r7, #4]
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	781b      	ldrb	r3, [r3, #0]
 800d0ee:	009b      	lsls	r3, r3, #2
 800d0f0:	441a      	add	r2, r3
 800d0f2:	8a3b      	ldrh	r3, [r7, #16]
 800d0f4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d0f8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d0fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d100:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d104:	b29b      	uxth	r3, r3
 800d106:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	78db      	ldrb	r3, [r3, #3]
 800d10c:	2b01      	cmp	r3, #1
 800d10e:	d020      	beq.n	800d152 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d110:	687a      	ldr	r2, [r7, #4]
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	781b      	ldrb	r3, [r3, #0]
 800d116:	009b      	lsls	r3, r3, #2
 800d118:	4413      	add	r3, r2
 800d11a:	881b      	ldrh	r3, [r3, #0]
 800d11c:	b29b      	uxth	r3, r3
 800d11e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d122:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d126:	81bb      	strh	r3, [r7, #12]
 800d128:	89bb      	ldrh	r3, [r7, #12]
 800d12a:	f083 0320 	eor.w	r3, r3, #32
 800d12e:	81bb      	strh	r3, [r7, #12]
 800d130:	687a      	ldr	r2, [r7, #4]
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	009b      	lsls	r3, r3, #2
 800d138:	441a      	add	r2, r3
 800d13a:	89bb      	ldrh	r3, [r7, #12]
 800d13c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d140:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d144:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d148:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d14c:	b29b      	uxth	r3, r3
 800d14e:	8013      	strh	r3, [r2, #0]
 800d150:	e2d5      	b.n	800d6fe <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d152:	687a      	ldr	r2, [r7, #4]
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	009b      	lsls	r3, r3, #2
 800d15a:	4413      	add	r3, r2
 800d15c:	881b      	ldrh	r3, [r3, #0]
 800d15e:	b29b      	uxth	r3, r3
 800d160:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d164:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d168:	81fb      	strh	r3, [r7, #14]
 800d16a:	687a      	ldr	r2, [r7, #4]
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	781b      	ldrb	r3, [r3, #0]
 800d170:	009b      	lsls	r3, r3, #2
 800d172:	441a      	add	r2, r3
 800d174:	89fb      	ldrh	r3, [r7, #14]
 800d176:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d17a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d17e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d182:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d186:	b29b      	uxth	r3, r3
 800d188:	8013      	strh	r3, [r2, #0]
 800d18a:	e2b8      	b.n	800d6fe <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d196:	b29b      	uxth	r3, r3
 800d198:	461a      	mov	r2, r3
 800d19a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d19c:	4413      	add	r3, r2
 800d19e:	633b      	str	r3, [r7, #48]	@ 0x30
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	781b      	ldrb	r3, [r3, #0]
 800d1a4:	00da      	lsls	r2, r3, #3
 800d1a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1a8:	4413      	add	r3, r2
 800d1aa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800d1ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	88db      	ldrh	r3, [r3, #6]
 800d1b4:	085b      	lsrs	r3, r3, #1
 800d1b6:	b29b      	uxth	r3, r3
 800d1b8:	005b      	lsls	r3, r3, #1
 800d1ba:	b29a      	uxth	r2, r3
 800d1bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1be:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d1ca:	b29b      	uxth	r3, r3
 800d1cc:	461a      	mov	r2, r3
 800d1ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1d0:	4413      	add	r3, r2
 800d1d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	781b      	ldrb	r3, [r3, #0]
 800d1d8:	00da      	lsls	r2, r3, #3
 800d1da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1dc:	4413      	add	r3, r2
 800d1de:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d1e2:	627b      	str	r3, [r7, #36]	@ 0x24
 800d1e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1e6:	881b      	ldrh	r3, [r3, #0]
 800d1e8:	b29b      	uxth	r3, r3
 800d1ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d1ee:	b29a      	uxth	r2, r3
 800d1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1f2:	801a      	strh	r2, [r3, #0]
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	691b      	ldr	r3, [r3, #16]
 800d1f8:	2b3e      	cmp	r3, #62	@ 0x3e
 800d1fa:	d91d      	bls.n	800d238 <USB_ActivateEndpoint+0x2b0>
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	691b      	ldr	r3, [r3, #16]
 800d200:	095b      	lsrs	r3, r3, #5
 800d202:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	691b      	ldr	r3, [r3, #16]
 800d208:	f003 031f 	and.w	r3, r3, #31
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d102      	bne.n	800d216 <USB_ActivateEndpoint+0x28e>
 800d210:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d212:	3b01      	subs	r3, #1
 800d214:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d218:	881b      	ldrh	r3, [r3, #0]
 800d21a:	b29a      	uxth	r2, r3
 800d21c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d21e:	b29b      	uxth	r3, r3
 800d220:	029b      	lsls	r3, r3, #10
 800d222:	b29b      	uxth	r3, r3
 800d224:	4313      	orrs	r3, r2
 800d226:	b29b      	uxth	r3, r3
 800d228:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d22c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d230:	b29a      	uxth	r2, r3
 800d232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d234:	801a      	strh	r2, [r3, #0]
 800d236:	e026      	b.n	800d286 <USB_ActivateEndpoint+0x2fe>
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	691b      	ldr	r3, [r3, #16]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d10a      	bne.n	800d256 <USB_ActivateEndpoint+0x2ce>
 800d240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d242:	881b      	ldrh	r3, [r3, #0]
 800d244:	b29b      	uxth	r3, r3
 800d246:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d24a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d24e:	b29a      	uxth	r2, r3
 800d250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d252:	801a      	strh	r2, [r3, #0]
 800d254:	e017      	b.n	800d286 <USB_ActivateEndpoint+0x2fe>
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	691b      	ldr	r3, [r3, #16]
 800d25a:	085b      	lsrs	r3, r3, #1
 800d25c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	691b      	ldr	r3, [r3, #16]
 800d262:	f003 0301 	and.w	r3, r3, #1
 800d266:	2b00      	cmp	r3, #0
 800d268:	d002      	beq.n	800d270 <USB_ActivateEndpoint+0x2e8>
 800d26a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d26c:	3301      	adds	r3, #1
 800d26e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d272:	881b      	ldrh	r3, [r3, #0]
 800d274:	b29a      	uxth	r2, r3
 800d276:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d278:	b29b      	uxth	r3, r3
 800d27a:	029b      	lsls	r3, r3, #10
 800d27c:	b29b      	uxth	r3, r3
 800d27e:	4313      	orrs	r3, r2
 800d280:	b29a      	uxth	r2, r3
 800d282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d284:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d286:	687a      	ldr	r2, [r7, #4]
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	781b      	ldrb	r3, [r3, #0]
 800d28c:	009b      	lsls	r3, r3, #2
 800d28e:	4413      	add	r3, r2
 800d290:	881b      	ldrh	r3, [r3, #0]
 800d292:	847b      	strh	r3, [r7, #34]	@ 0x22
 800d294:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d296:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d01b      	beq.n	800d2d6 <USB_ActivateEndpoint+0x34e>
 800d29e:	687a      	ldr	r2, [r7, #4]
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	781b      	ldrb	r3, [r3, #0]
 800d2a4:	009b      	lsls	r3, r3, #2
 800d2a6:	4413      	add	r3, r2
 800d2a8:	881b      	ldrh	r3, [r3, #0]
 800d2aa:	b29b      	uxth	r3, r3
 800d2ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d2b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d2b4:	843b      	strh	r3, [r7, #32]
 800d2b6:	687a      	ldr	r2, [r7, #4]
 800d2b8:	683b      	ldr	r3, [r7, #0]
 800d2ba:	781b      	ldrb	r3, [r3, #0]
 800d2bc:	009b      	lsls	r3, r3, #2
 800d2be:	441a      	add	r2, r3
 800d2c0:	8c3b      	ldrh	r3, [r7, #32]
 800d2c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d2c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d2ca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d2ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d2d2:	b29b      	uxth	r3, r3
 800d2d4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	781b      	ldrb	r3, [r3, #0]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d124      	bne.n	800d328 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d2de:	687a      	ldr	r2, [r7, #4]
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	781b      	ldrb	r3, [r3, #0]
 800d2e4:	009b      	lsls	r3, r3, #2
 800d2e6:	4413      	add	r3, r2
 800d2e8:	881b      	ldrh	r3, [r3, #0]
 800d2ea:	b29b      	uxth	r3, r3
 800d2ec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d2f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d2f4:	83bb      	strh	r3, [r7, #28]
 800d2f6:	8bbb      	ldrh	r3, [r7, #28]
 800d2f8:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d2fc:	83bb      	strh	r3, [r7, #28]
 800d2fe:	8bbb      	ldrh	r3, [r7, #28]
 800d300:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d304:	83bb      	strh	r3, [r7, #28]
 800d306:	687a      	ldr	r2, [r7, #4]
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	781b      	ldrb	r3, [r3, #0]
 800d30c:	009b      	lsls	r3, r3, #2
 800d30e:	441a      	add	r2, r3
 800d310:	8bbb      	ldrh	r3, [r7, #28]
 800d312:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d316:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d31a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d31e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d322:	b29b      	uxth	r3, r3
 800d324:	8013      	strh	r3, [r2, #0]
 800d326:	e1ea      	b.n	800d6fe <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800d328:	687a      	ldr	r2, [r7, #4]
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	781b      	ldrb	r3, [r3, #0]
 800d32e:	009b      	lsls	r3, r3, #2
 800d330:	4413      	add	r3, r2
 800d332:	881b      	ldrh	r3, [r3, #0]
 800d334:	b29b      	uxth	r3, r3
 800d336:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d33a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d33e:	83fb      	strh	r3, [r7, #30]
 800d340:	8bfb      	ldrh	r3, [r7, #30]
 800d342:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d346:	83fb      	strh	r3, [r7, #30]
 800d348:	687a      	ldr	r2, [r7, #4]
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	781b      	ldrb	r3, [r3, #0]
 800d34e:	009b      	lsls	r3, r3, #2
 800d350:	441a      	add	r2, r3
 800d352:	8bfb      	ldrh	r3, [r7, #30]
 800d354:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d358:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d35c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d360:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d364:	b29b      	uxth	r3, r3
 800d366:	8013      	strh	r3, [r2, #0]
 800d368:	e1c9      	b.n	800d6fe <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	78db      	ldrb	r3, [r3, #3]
 800d36e:	2b02      	cmp	r3, #2
 800d370:	d11e      	bne.n	800d3b0 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d372:	687a      	ldr	r2, [r7, #4]
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	781b      	ldrb	r3, [r3, #0]
 800d378:	009b      	lsls	r3, r3, #2
 800d37a:	4413      	add	r3, r2
 800d37c:	881b      	ldrh	r3, [r3, #0]
 800d37e:	b29b      	uxth	r3, r3
 800d380:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d384:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d388:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800d38c:	687a      	ldr	r2, [r7, #4]
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	781b      	ldrb	r3, [r3, #0]
 800d392:	009b      	lsls	r3, r3, #2
 800d394:	441a      	add	r2, r3
 800d396:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800d39a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d39e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d3a2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800d3a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3aa:	b29b      	uxth	r3, r3
 800d3ac:	8013      	strh	r3, [r2, #0]
 800d3ae:	e01d      	b.n	800d3ec <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800d3b0:	687a      	ldr	r2, [r7, #4]
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	781b      	ldrb	r3, [r3, #0]
 800d3b6:	009b      	lsls	r3, r3, #2
 800d3b8:	4413      	add	r3, r2
 800d3ba:	881b      	ldrh	r3, [r3, #0]
 800d3bc:	b29b      	uxth	r3, r3
 800d3be:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800d3c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d3c6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800d3ca:	687a      	ldr	r2, [r7, #4]
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	781b      	ldrb	r3, [r3, #0]
 800d3d0:	009b      	lsls	r3, r3, #2
 800d3d2:	441a      	add	r2, r3
 800d3d4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800d3d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d3dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d3e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d3e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d3e8:	b29b      	uxth	r3, r3
 800d3ea:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d3f6:	b29b      	uxth	r3, r3
 800d3f8:	461a      	mov	r2, r3
 800d3fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d3fc:	4413      	add	r3, r2
 800d3fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	781b      	ldrb	r3, [r3, #0]
 800d404:	00da      	lsls	r2, r3, #3
 800d406:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d408:	4413      	add	r3, r2
 800d40a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d40e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	891b      	ldrh	r3, [r3, #8]
 800d414:	085b      	lsrs	r3, r3, #1
 800d416:	b29b      	uxth	r3, r3
 800d418:	005b      	lsls	r3, r3, #1
 800d41a:	b29a      	uxth	r2, r3
 800d41c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d41e:	801a      	strh	r2, [r3, #0]
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	657b      	str	r3, [r7, #84]	@ 0x54
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d42a:	b29b      	uxth	r3, r3
 800d42c:	461a      	mov	r2, r3
 800d42e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d430:	4413      	add	r3, r2
 800d432:	657b      	str	r3, [r7, #84]	@ 0x54
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	781b      	ldrb	r3, [r3, #0]
 800d438:	00da      	lsls	r2, r3, #3
 800d43a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d43c:	4413      	add	r3, r2
 800d43e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800d442:	653b      	str	r3, [r7, #80]	@ 0x50
 800d444:	683b      	ldr	r3, [r7, #0]
 800d446:	895b      	ldrh	r3, [r3, #10]
 800d448:	085b      	lsrs	r3, r3, #1
 800d44a:	b29b      	uxth	r3, r3
 800d44c:	005b      	lsls	r3, r3, #1
 800d44e:	b29a      	uxth	r2, r3
 800d450:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d452:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	785b      	ldrb	r3, [r3, #1]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	f040 8093 	bne.w	800d584 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d45e:	687a      	ldr	r2, [r7, #4]
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	781b      	ldrb	r3, [r3, #0]
 800d464:	009b      	lsls	r3, r3, #2
 800d466:	4413      	add	r3, r2
 800d468:	881b      	ldrh	r3, [r3, #0]
 800d46a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800d46e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d472:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d476:	2b00      	cmp	r3, #0
 800d478:	d01b      	beq.n	800d4b2 <USB_ActivateEndpoint+0x52a>
 800d47a:	687a      	ldr	r2, [r7, #4]
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	781b      	ldrb	r3, [r3, #0]
 800d480:	009b      	lsls	r3, r3, #2
 800d482:	4413      	add	r3, r2
 800d484:	881b      	ldrh	r3, [r3, #0]
 800d486:	b29b      	uxth	r3, r3
 800d488:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d48c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d490:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800d492:	687a      	ldr	r2, [r7, #4]
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	781b      	ldrb	r3, [r3, #0]
 800d498:	009b      	lsls	r3, r3, #2
 800d49a:	441a      	add	r2, r3
 800d49c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d49e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d4a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d4a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d4aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d4ae:	b29b      	uxth	r3, r3
 800d4b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d4b2:	687a      	ldr	r2, [r7, #4]
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	781b      	ldrb	r3, [r3, #0]
 800d4b8:	009b      	lsls	r3, r3, #2
 800d4ba:	4413      	add	r3, r2
 800d4bc:	881b      	ldrh	r3, [r3, #0]
 800d4be:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800d4c0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d4c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d01b      	beq.n	800d502 <USB_ActivateEndpoint+0x57a>
 800d4ca:	687a      	ldr	r2, [r7, #4]
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	781b      	ldrb	r3, [r3, #0]
 800d4d0:	009b      	lsls	r3, r3, #2
 800d4d2:	4413      	add	r3, r2
 800d4d4:	881b      	ldrh	r3, [r3, #0]
 800d4d6:	b29b      	uxth	r3, r3
 800d4d8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d4dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d4e0:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800d4e2:	687a      	ldr	r2, [r7, #4]
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	781b      	ldrb	r3, [r3, #0]
 800d4e8:	009b      	lsls	r3, r3, #2
 800d4ea:	441a      	add	r2, r3
 800d4ec:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d4ee:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d4f2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d4f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d4fa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d4fe:	b29b      	uxth	r3, r3
 800d500:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d502:	687a      	ldr	r2, [r7, #4]
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	781b      	ldrb	r3, [r3, #0]
 800d508:	009b      	lsls	r3, r3, #2
 800d50a:	4413      	add	r3, r2
 800d50c:	881b      	ldrh	r3, [r3, #0]
 800d50e:	b29b      	uxth	r3, r3
 800d510:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d514:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d518:	873b      	strh	r3, [r7, #56]	@ 0x38
 800d51a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800d51c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d520:	873b      	strh	r3, [r7, #56]	@ 0x38
 800d522:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800d524:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d528:	873b      	strh	r3, [r7, #56]	@ 0x38
 800d52a:	687a      	ldr	r2, [r7, #4]
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	781b      	ldrb	r3, [r3, #0]
 800d530:	009b      	lsls	r3, r3, #2
 800d532:	441a      	add	r2, r3
 800d534:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800d536:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d53a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d53e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d542:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d546:	b29b      	uxth	r3, r3
 800d548:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d54a:	687a      	ldr	r2, [r7, #4]
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	781b      	ldrb	r3, [r3, #0]
 800d550:	009b      	lsls	r3, r3, #2
 800d552:	4413      	add	r3, r2
 800d554:	881b      	ldrh	r3, [r3, #0]
 800d556:	b29b      	uxth	r3, r3
 800d558:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d55c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d560:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800d562:	687a      	ldr	r2, [r7, #4]
 800d564:	683b      	ldr	r3, [r7, #0]
 800d566:	781b      	ldrb	r3, [r3, #0]
 800d568:	009b      	lsls	r3, r3, #2
 800d56a:	441a      	add	r2, r3
 800d56c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d56e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d572:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d576:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d57a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d57e:	b29b      	uxth	r3, r3
 800d580:	8013      	strh	r3, [r2, #0]
 800d582:	e0bc      	b.n	800d6fe <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d584:	687a      	ldr	r2, [r7, #4]
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	781b      	ldrb	r3, [r3, #0]
 800d58a:	009b      	lsls	r3, r3, #2
 800d58c:	4413      	add	r3, r2
 800d58e:	881b      	ldrh	r3, [r3, #0]
 800d590:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800d594:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800d598:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d01d      	beq.n	800d5dc <USB_ActivateEndpoint+0x654>
 800d5a0:	687a      	ldr	r2, [r7, #4]
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	781b      	ldrb	r3, [r3, #0]
 800d5a6:	009b      	lsls	r3, r3, #2
 800d5a8:	4413      	add	r3, r2
 800d5aa:	881b      	ldrh	r3, [r3, #0]
 800d5ac:	b29b      	uxth	r3, r3
 800d5ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d5b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d5b6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800d5ba:	687a      	ldr	r2, [r7, #4]
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	781b      	ldrb	r3, [r3, #0]
 800d5c0:	009b      	lsls	r3, r3, #2
 800d5c2:	441a      	add	r2, r3
 800d5c4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800d5c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d5cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d5d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d5d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d5d8:	b29b      	uxth	r3, r3
 800d5da:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d5dc:	687a      	ldr	r2, [r7, #4]
 800d5de:	683b      	ldr	r3, [r7, #0]
 800d5e0:	781b      	ldrb	r3, [r3, #0]
 800d5e2:	009b      	lsls	r3, r3, #2
 800d5e4:	4413      	add	r3, r2
 800d5e6:	881b      	ldrh	r3, [r3, #0]
 800d5e8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800d5ec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800d5f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d01d      	beq.n	800d634 <USB_ActivateEndpoint+0x6ac>
 800d5f8:	687a      	ldr	r2, [r7, #4]
 800d5fa:	683b      	ldr	r3, [r7, #0]
 800d5fc:	781b      	ldrb	r3, [r3, #0]
 800d5fe:	009b      	lsls	r3, r3, #2
 800d600:	4413      	add	r3, r2
 800d602:	881b      	ldrh	r3, [r3, #0]
 800d604:	b29b      	uxth	r3, r3
 800d606:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d60a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d60e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800d612:	687a      	ldr	r2, [r7, #4]
 800d614:	683b      	ldr	r3, [r7, #0]
 800d616:	781b      	ldrb	r3, [r3, #0]
 800d618:	009b      	lsls	r3, r3, #2
 800d61a:	441a      	add	r2, r3
 800d61c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800d620:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d624:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d628:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d62c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d630:	b29b      	uxth	r3, r3
 800d632:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	78db      	ldrb	r3, [r3, #3]
 800d638:	2b01      	cmp	r3, #1
 800d63a:	d024      	beq.n	800d686 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d63c:	687a      	ldr	r2, [r7, #4]
 800d63e:	683b      	ldr	r3, [r7, #0]
 800d640:	781b      	ldrb	r3, [r3, #0]
 800d642:	009b      	lsls	r3, r3, #2
 800d644:	4413      	add	r3, r2
 800d646:	881b      	ldrh	r3, [r3, #0]
 800d648:	b29b      	uxth	r3, r3
 800d64a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d64e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d652:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800d656:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d65a:	f083 0320 	eor.w	r3, r3, #32
 800d65e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800d662:	687a      	ldr	r2, [r7, #4]
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	781b      	ldrb	r3, [r3, #0]
 800d668:	009b      	lsls	r3, r3, #2
 800d66a:	441a      	add	r2, r3
 800d66c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d670:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d674:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d678:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d67c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d680:	b29b      	uxth	r3, r3
 800d682:	8013      	strh	r3, [r2, #0]
 800d684:	e01d      	b.n	800d6c2 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d686:	687a      	ldr	r2, [r7, #4]
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	781b      	ldrb	r3, [r3, #0]
 800d68c:	009b      	lsls	r3, r3, #2
 800d68e:	4413      	add	r3, r2
 800d690:	881b      	ldrh	r3, [r3, #0]
 800d692:	b29b      	uxth	r3, r3
 800d694:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d698:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d69c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800d6a0:	687a      	ldr	r2, [r7, #4]
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	781b      	ldrb	r3, [r3, #0]
 800d6a6:	009b      	lsls	r3, r3, #2
 800d6a8:	441a      	add	r2, r3
 800d6aa:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d6ae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d6b2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d6b6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d6ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d6be:	b29b      	uxth	r3, r3
 800d6c0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d6c2:	687a      	ldr	r2, [r7, #4]
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	781b      	ldrb	r3, [r3, #0]
 800d6c8:	009b      	lsls	r3, r3, #2
 800d6ca:	4413      	add	r3, r2
 800d6cc:	881b      	ldrh	r3, [r3, #0]
 800d6ce:	b29b      	uxth	r3, r3
 800d6d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d6d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d6d8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800d6dc:	687a      	ldr	r2, [r7, #4]
 800d6de:	683b      	ldr	r3, [r7, #0]
 800d6e0:	781b      	ldrb	r3, [r3, #0]
 800d6e2:	009b      	lsls	r3, r3, #2
 800d6e4:	441a      	add	r2, r3
 800d6e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d6ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d6ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d6f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d6f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d6fa:	b29b      	uxth	r3, r3
 800d6fc:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800d6fe:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800d702:	4618      	mov	r0, r3
 800d704:	3774      	adds	r7, #116	@ 0x74
 800d706:	46bd      	mov	sp, r7
 800d708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70c:	4770      	bx	lr
 800d70e:	bf00      	nop

0800d710 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d710:	b480      	push	{r7}
 800d712:	b08d      	sub	sp, #52	@ 0x34
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
 800d718:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d71a:	683b      	ldr	r3, [r7, #0]
 800d71c:	7b1b      	ldrb	r3, [r3, #12]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	f040 808e 	bne.w	800d840 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	785b      	ldrb	r3, [r3, #1]
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d044      	beq.n	800d7b6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d72c:	687a      	ldr	r2, [r7, #4]
 800d72e:	683b      	ldr	r3, [r7, #0]
 800d730:	781b      	ldrb	r3, [r3, #0]
 800d732:	009b      	lsls	r3, r3, #2
 800d734:	4413      	add	r3, r2
 800d736:	881b      	ldrh	r3, [r3, #0]
 800d738:	81bb      	strh	r3, [r7, #12]
 800d73a:	89bb      	ldrh	r3, [r7, #12]
 800d73c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d740:	2b00      	cmp	r3, #0
 800d742:	d01b      	beq.n	800d77c <USB_DeactivateEndpoint+0x6c>
 800d744:	687a      	ldr	r2, [r7, #4]
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	781b      	ldrb	r3, [r3, #0]
 800d74a:	009b      	lsls	r3, r3, #2
 800d74c:	4413      	add	r3, r2
 800d74e:	881b      	ldrh	r3, [r3, #0]
 800d750:	b29b      	uxth	r3, r3
 800d752:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d756:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d75a:	817b      	strh	r3, [r7, #10]
 800d75c:	687a      	ldr	r2, [r7, #4]
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	781b      	ldrb	r3, [r3, #0]
 800d762:	009b      	lsls	r3, r3, #2
 800d764:	441a      	add	r2, r3
 800d766:	897b      	ldrh	r3, [r7, #10]
 800d768:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d76c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d770:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d774:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d778:	b29b      	uxth	r3, r3
 800d77a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d77c:	687a      	ldr	r2, [r7, #4]
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	781b      	ldrb	r3, [r3, #0]
 800d782:	009b      	lsls	r3, r3, #2
 800d784:	4413      	add	r3, r2
 800d786:	881b      	ldrh	r3, [r3, #0]
 800d788:	b29b      	uxth	r3, r3
 800d78a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d78e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d792:	813b      	strh	r3, [r7, #8]
 800d794:	687a      	ldr	r2, [r7, #4]
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	781b      	ldrb	r3, [r3, #0]
 800d79a:	009b      	lsls	r3, r3, #2
 800d79c:	441a      	add	r2, r3
 800d79e:	893b      	ldrh	r3, [r7, #8]
 800d7a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d7a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d7a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d7ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7b0:	b29b      	uxth	r3, r3
 800d7b2:	8013      	strh	r3, [r2, #0]
 800d7b4:	e192      	b.n	800dadc <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d7b6:	687a      	ldr	r2, [r7, #4]
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	781b      	ldrb	r3, [r3, #0]
 800d7bc:	009b      	lsls	r3, r3, #2
 800d7be:	4413      	add	r3, r2
 800d7c0:	881b      	ldrh	r3, [r3, #0]
 800d7c2:	827b      	strh	r3, [r7, #18]
 800d7c4:	8a7b      	ldrh	r3, [r7, #18]
 800d7c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d01b      	beq.n	800d806 <USB_DeactivateEndpoint+0xf6>
 800d7ce:	687a      	ldr	r2, [r7, #4]
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	781b      	ldrb	r3, [r3, #0]
 800d7d4:	009b      	lsls	r3, r3, #2
 800d7d6:	4413      	add	r3, r2
 800d7d8:	881b      	ldrh	r3, [r3, #0]
 800d7da:	b29b      	uxth	r3, r3
 800d7dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d7e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d7e4:	823b      	strh	r3, [r7, #16]
 800d7e6:	687a      	ldr	r2, [r7, #4]
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	781b      	ldrb	r3, [r3, #0]
 800d7ec:	009b      	lsls	r3, r3, #2
 800d7ee:	441a      	add	r2, r3
 800d7f0:	8a3b      	ldrh	r3, [r7, #16]
 800d7f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d7f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d7fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d7fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d802:	b29b      	uxth	r3, r3
 800d804:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d806:	687a      	ldr	r2, [r7, #4]
 800d808:	683b      	ldr	r3, [r7, #0]
 800d80a:	781b      	ldrb	r3, [r3, #0]
 800d80c:	009b      	lsls	r3, r3, #2
 800d80e:	4413      	add	r3, r2
 800d810:	881b      	ldrh	r3, [r3, #0]
 800d812:	b29b      	uxth	r3, r3
 800d814:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d818:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d81c:	81fb      	strh	r3, [r7, #14]
 800d81e:	687a      	ldr	r2, [r7, #4]
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	781b      	ldrb	r3, [r3, #0]
 800d824:	009b      	lsls	r3, r3, #2
 800d826:	441a      	add	r2, r3
 800d828:	89fb      	ldrh	r3, [r7, #14]
 800d82a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d82e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d832:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d836:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d83a:	b29b      	uxth	r3, r3
 800d83c:	8013      	strh	r3, [r2, #0]
 800d83e:	e14d      	b.n	800dadc <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	785b      	ldrb	r3, [r3, #1]
 800d844:	2b00      	cmp	r3, #0
 800d846:	f040 80a5 	bne.w	800d994 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d84a:	687a      	ldr	r2, [r7, #4]
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	781b      	ldrb	r3, [r3, #0]
 800d850:	009b      	lsls	r3, r3, #2
 800d852:	4413      	add	r3, r2
 800d854:	881b      	ldrh	r3, [r3, #0]
 800d856:	843b      	strh	r3, [r7, #32]
 800d858:	8c3b      	ldrh	r3, [r7, #32]
 800d85a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d01b      	beq.n	800d89a <USB_DeactivateEndpoint+0x18a>
 800d862:	687a      	ldr	r2, [r7, #4]
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	781b      	ldrb	r3, [r3, #0]
 800d868:	009b      	lsls	r3, r3, #2
 800d86a:	4413      	add	r3, r2
 800d86c:	881b      	ldrh	r3, [r3, #0]
 800d86e:	b29b      	uxth	r3, r3
 800d870:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d874:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d878:	83fb      	strh	r3, [r7, #30]
 800d87a:	687a      	ldr	r2, [r7, #4]
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	781b      	ldrb	r3, [r3, #0]
 800d880:	009b      	lsls	r3, r3, #2
 800d882:	441a      	add	r2, r3
 800d884:	8bfb      	ldrh	r3, [r7, #30]
 800d886:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d88a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d88e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d892:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d896:	b29b      	uxth	r3, r3
 800d898:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d89a:	687a      	ldr	r2, [r7, #4]
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	781b      	ldrb	r3, [r3, #0]
 800d8a0:	009b      	lsls	r3, r3, #2
 800d8a2:	4413      	add	r3, r2
 800d8a4:	881b      	ldrh	r3, [r3, #0]
 800d8a6:	83bb      	strh	r3, [r7, #28]
 800d8a8:	8bbb      	ldrh	r3, [r7, #28]
 800d8aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d01b      	beq.n	800d8ea <USB_DeactivateEndpoint+0x1da>
 800d8b2:	687a      	ldr	r2, [r7, #4]
 800d8b4:	683b      	ldr	r3, [r7, #0]
 800d8b6:	781b      	ldrb	r3, [r3, #0]
 800d8b8:	009b      	lsls	r3, r3, #2
 800d8ba:	4413      	add	r3, r2
 800d8bc:	881b      	ldrh	r3, [r3, #0]
 800d8be:	b29b      	uxth	r3, r3
 800d8c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d8c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d8c8:	837b      	strh	r3, [r7, #26]
 800d8ca:	687a      	ldr	r2, [r7, #4]
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	781b      	ldrb	r3, [r3, #0]
 800d8d0:	009b      	lsls	r3, r3, #2
 800d8d2:	441a      	add	r2, r3
 800d8d4:	8b7b      	ldrh	r3, [r7, #26]
 800d8d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d8da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d8de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d8e2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d8e6:	b29b      	uxth	r3, r3
 800d8e8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800d8ea:	687a      	ldr	r2, [r7, #4]
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	781b      	ldrb	r3, [r3, #0]
 800d8f0:	009b      	lsls	r3, r3, #2
 800d8f2:	4413      	add	r3, r2
 800d8f4:	881b      	ldrh	r3, [r3, #0]
 800d8f6:	b29b      	uxth	r3, r3
 800d8f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d8fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d900:	833b      	strh	r3, [r7, #24]
 800d902:	687a      	ldr	r2, [r7, #4]
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	781b      	ldrb	r3, [r3, #0]
 800d908:	009b      	lsls	r3, r3, #2
 800d90a:	441a      	add	r2, r3
 800d90c:	8b3b      	ldrh	r3, [r7, #24]
 800d90e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d912:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d916:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d91a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d91e:	b29b      	uxth	r3, r3
 800d920:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800d922:	687a      	ldr	r2, [r7, #4]
 800d924:	683b      	ldr	r3, [r7, #0]
 800d926:	781b      	ldrb	r3, [r3, #0]
 800d928:	009b      	lsls	r3, r3, #2
 800d92a:	4413      	add	r3, r2
 800d92c:	881b      	ldrh	r3, [r3, #0]
 800d92e:	b29b      	uxth	r3, r3
 800d930:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d934:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d938:	82fb      	strh	r3, [r7, #22]
 800d93a:	687a      	ldr	r2, [r7, #4]
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	781b      	ldrb	r3, [r3, #0]
 800d940:	009b      	lsls	r3, r3, #2
 800d942:	441a      	add	r2, r3
 800d944:	8afb      	ldrh	r3, [r7, #22]
 800d946:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d94a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d94e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d952:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d956:	b29b      	uxth	r3, r3
 800d958:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d95a:	687a      	ldr	r2, [r7, #4]
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	781b      	ldrb	r3, [r3, #0]
 800d960:	009b      	lsls	r3, r3, #2
 800d962:	4413      	add	r3, r2
 800d964:	881b      	ldrh	r3, [r3, #0]
 800d966:	b29b      	uxth	r3, r3
 800d968:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d96c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d970:	82bb      	strh	r3, [r7, #20]
 800d972:	687a      	ldr	r2, [r7, #4]
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	781b      	ldrb	r3, [r3, #0]
 800d978:	009b      	lsls	r3, r3, #2
 800d97a:	441a      	add	r2, r3
 800d97c:	8abb      	ldrh	r3, [r7, #20]
 800d97e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d982:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d986:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d98a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d98e:	b29b      	uxth	r3, r3
 800d990:	8013      	strh	r3, [r2, #0]
 800d992:	e0a3      	b.n	800dadc <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d994:	687a      	ldr	r2, [r7, #4]
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	781b      	ldrb	r3, [r3, #0]
 800d99a:	009b      	lsls	r3, r3, #2
 800d99c:	4413      	add	r3, r2
 800d99e:	881b      	ldrh	r3, [r3, #0]
 800d9a0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800d9a2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d9a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d01b      	beq.n	800d9e4 <USB_DeactivateEndpoint+0x2d4>
 800d9ac:	687a      	ldr	r2, [r7, #4]
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	781b      	ldrb	r3, [r3, #0]
 800d9b2:	009b      	lsls	r3, r3, #2
 800d9b4:	4413      	add	r3, r2
 800d9b6:	881b      	ldrh	r3, [r3, #0]
 800d9b8:	b29b      	uxth	r3, r3
 800d9ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d9be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d9c2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800d9c4:	687a      	ldr	r2, [r7, #4]
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	781b      	ldrb	r3, [r3, #0]
 800d9ca:	009b      	lsls	r3, r3, #2
 800d9cc:	441a      	add	r2, r3
 800d9ce:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800d9d0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d9d4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d9d8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d9dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d9e0:	b29b      	uxth	r3, r3
 800d9e2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d9e4:	687a      	ldr	r2, [r7, #4]
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	781b      	ldrb	r3, [r3, #0]
 800d9ea:	009b      	lsls	r3, r3, #2
 800d9ec:	4413      	add	r3, r2
 800d9ee:	881b      	ldrh	r3, [r3, #0]
 800d9f0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800d9f2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d9f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d01b      	beq.n	800da34 <USB_DeactivateEndpoint+0x324>
 800d9fc:	687a      	ldr	r2, [r7, #4]
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	781b      	ldrb	r3, [r3, #0]
 800da02:	009b      	lsls	r3, r3, #2
 800da04:	4413      	add	r3, r2
 800da06:	881b      	ldrh	r3, [r3, #0]
 800da08:	b29b      	uxth	r3, r3
 800da0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800da0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800da12:	853b      	strh	r3, [r7, #40]	@ 0x28
 800da14:	687a      	ldr	r2, [r7, #4]
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	781b      	ldrb	r3, [r3, #0]
 800da1a:	009b      	lsls	r3, r3, #2
 800da1c:	441a      	add	r2, r3
 800da1e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800da20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800da24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800da28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800da2c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800da30:	b29b      	uxth	r3, r3
 800da32:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800da34:	687a      	ldr	r2, [r7, #4]
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	781b      	ldrb	r3, [r3, #0]
 800da3a:	009b      	lsls	r3, r3, #2
 800da3c:	4413      	add	r3, r2
 800da3e:	881b      	ldrh	r3, [r3, #0]
 800da40:	b29b      	uxth	r3, r3
 800da42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800da46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800da4a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800da4c:	687a      	ldr	r2, [r7, #4]
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	781b      	ldrb	r3, [r3, #0]
 800da52:	009b      	lsls	r3, r3, #2
 800da54:	441a      	add	r2, r3
 800da56:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800da58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800da5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800da60:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800da64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da68:	b29b      	uxth	r3, r3
 800da6a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800da6c:	687a      	ldr	r2, [r7, #4]
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	781b      	ldrb	r3, [r3, #0]
 800da72:	009b      	lsls	r3, r3, #2
 800da74:	4413      	add	r3, r2
 800da76:	881b      	ldrh	r3, [r3, #0]
 800da78:	b29b      	uxth	r3, r3
 800da7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800da7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800da82:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800da84:	687a      	ldr	r2, [r7, #4]
 800da86:	683b      	ldr	r3, [r7, #0]
 800da88:	781b      	ldrb	r3, [r3, #0]
 800da8a:	009b      	lsls	r3, r3, #2
 800da8c:	441a      	add	r2, r3
 800da8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800da90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800da94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800da98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800da9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800daa0:	b29b      	uxth	r3, r3
 800daa2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800daa4:	687a      	ldr	r2, [r7, #4]
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	781b      	ldrb	r3, [r3, #0]
 800daaa:	009b      	lsls	r3, r3, #2
 800daac:	4413      	add	r3, r2
 800daae:	881b      	ldrh	r3, [r3, #0]
 800dab0:	b29b      	uxth	r3, r3
 800dab2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800dab6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800daba:	847b      	strh	r3, [r7, #34]	@ 0x22
 800dabc:	687a      	ldr	r2, [r7, #4]
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	781b      	ldrb	r3, [r3, #0]
 800dac2:	009b      	lsls	r3, r3, #2
 800dac4:	441a      	add	r2, r3
 800dac6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800dac8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dacc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dad0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dad4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dad8:	b29b      	uxth	r3, r3
 800dada:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800dadc:	2300      	movs	r3, #0
}
 800dade:	4618      	mov	r0, r3
 800dae0:	3734      	adds	r7, #52	@ 0x34
 800dae2:	46bd      	mov	sp, r7
 800dae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae8:	4770      	bx	lr

0800daea <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800daea:	b580      	push	{r7, lr}
 800daec:	b0c2      	sub	sp, #264	@ 0x108
 800daee:	af00      	add	r7, sp, #0
 800daf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800daf4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800daf8:	6018      	str	r0, [r3, #0]
 800dafa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dafe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db02:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800db04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	785b      	ldrb	r3, [r3, #1]
 800db10:	2b01      	cmp	r3, #1
 800db12:	f040 86b7 	bne.w	800e884 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800db16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	699a      	ldr	r2, [r3, #24]
 800db22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db2a:	681b      	ldr	r3, [r3, #0]
 800db2c:	691b      	ldr	r3, [r3, #16]
 800db2e:	429a      	cmp	r2, r3
 800db30:	d908      	bls.n	800db44 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800db32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	691b      	ldr	r3, [r3, #16]
 800db3e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800db42:	e007      	b.n	800db54 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800db44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	699b      	ldr	r3, [r3, #24]
 800db50:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800db54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	7b1b      	ldrb	r3, [r3, #12]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d13a      	bne.n	800dbda <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800db64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db68:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	6959      	ldr	r1, [r3, #20]
 800db70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	88da      	ldrh	r2, [r3, #6]
 800db7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800db80:	b29b      	uxth	r3, r3
 800db82:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800db86:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800db8a:	6800      	ldr	r0, [r0, #0]
 800db8c:	f001 fc98 	bl	800f4c0 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800db90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800db94:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	613b      	str	r3, [r7, #16]
 800db9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dba0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dbaa:	b29b      	uxth	r3, r3
 800dbac:	461a      	mov	r2, r3
 800dbae:	693b      	ldr	r3, [r7, #16]
 800dbb0:	4413      	add	r3, r2
 800dbb2:	613b      	str	r3, [r7, #16]
 800dbb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	781b      	ldrb	r3, [r3, #0]
 800dbc0:	00da      	lsls	r2, r3, #3
 800dbc2:	693b      	ldr	r3, [r7, #16]
 800dbc4:	4413      	add	r3, r2
 800dbc6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dbca:	60fb      	str	r3, [r7, #12]
 800dbcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dbd0:	b29a      	uxth	r2, r3
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	801a      	strh	r2, [r3, #0]
 800dbd6:	f000 be1f 	b.w	800e818 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800dbda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	78db      	ldrb	r3, [r3, #3]
 800dbe6:	2b02      	cmp	r3, #2
 800dbe8:	f040 8462 	bne.w	800e4b0 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800dbec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	6a1a      	ldr	r2, [r3, #32]
 800dbf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dbfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	691b      	ldr	r3, [r3, #16]
 800dc04:	429a      	cmp	r2, r3
 800dc06:	f240 83df 	bls.w	800e3c8 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800dc0a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc0e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dc12:	681a      	ldr	r2, [r3, #0]
 800dc14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	781b      	ldrb	r3, [r3, #0]
 800dc20:	009b      	lsls	r3, r3, #2
 800dc22:	4413      	add	r3, r2
 800dc24:	881b      	ldrh	r3, [r3, #0]
 800dc26:	b29b      	uxth	r3, r3
 800dc28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dc2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dc30:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800dc34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dc3c:	681a      	ldr	r2, [r3, #0]
 800dc3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	781b      	ldrb	r3, [r3, #0]
 800dc4a:	009b      	lsls	r3, r3, #2
 800dc4c:	441a      	add	r2, r3
 800dc4e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800dc52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dc56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dc5a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800dc5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc62:	b29b      	uxth	r3, r3
 800dc64:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800dc66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	6a1a      	ldr	r2, [r3, #32]
 800dc72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dc76:	1ad2      	subs	r2, r2, r3
 800dc78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800dc84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc88:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dc8c:	681a      	ldr	r2, [r3, #0]
 800dc8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dc92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	781b      	ldrb	r3, [r3, #0]
 800dc9a:	009b      	lsls	r3, r3, #2
 800dc9c:	4413      	add	r3, r2
 800dc9e:	881b      	ldrh	r3, [r3, #0]
 800dca0:	b29b      	uxth	r3, r3
 800dca2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	f000 81c7 	beq.w	800e03a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800dcac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	633b      	str	r3, [r7, #48]	@ 0x30
 800dcb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	785b      	ldrb	r3, [r3, #1]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d177      	bne.n	800ddb8 <USB_EPStartXfer+0x2ce>
 800dcc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dccc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dcd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dce2:	b29b      	uxth	r3, r3
 800dce4:	461a      	mov	r2, r3
 800dce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dce8:	4413      	add	r3, r2
 800dcea:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dcec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dcf0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	781b      	ldrb	r3, [r3, #0]
 800dcf8:	00da      	lsls	r2, r3, #3
 800dcfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcfc:	4413      	add	r3, r2
 800dcfe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800dd02:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd06:	881b      	ldrh	r3, [r3, #0]
 800dd08:	b29b      	uxth	r3, r3
 800dd0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800dd0e:	b29a      	uxth	r2, r3
 800dd10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd12:	801a      	strh	r2, [r3, #0]
 800dd14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd18:	2b3e      	cmp	r3, #62	@ 0x3e
 800dd1a:	d921      	bls.n	800dd60 <USB_EPStartXfer+0x276>
 800dd1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd20:	095b      	lsrs	r3, r3, #5
 800dd22:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800dd26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd2a:	f003 031f 	and.w	r3, r3, #31
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d104      	bne.n	800dd3c <USB_EPStartXfer+0x252>
 800dd32:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800dd36:	3b01      	subs	r3, #1
 800dd38:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800dd3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd3e:	881b      	ldrh	r3, [r3, #0]
 800dd40:	b29a      	uxth	r2, r3
 800dd42:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800dd46:	b29b      	uxth	r3, r3
 800dd48:	029b      	lsls	r3, r3, #10
 800dd4a:	b29b      	uxth	r3, r3
 800dd4c:	4313      	orrs	r3, r2
 800dd4e:	b29b      	uxth	r3, r3
 800dd50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dd54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dd58:	b29a      	uxth	r2, r3
 800dd5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd5c:	801a      	strh	r2, [r3, #0]
 800dd5e:	e050      	b.n	800de02 <USB_EPStartXfer+0x318>
 800dd60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d10a      	bne.n	800dd7e <USB_EPStartXfer+0x294>
 800dd68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd6a:	881b      	ldrh	r3, [r3, #0]
 800dd6c:	b29b      	uxth	r3, r3
 800dd6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800dd72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800dd76:	b29a      	uxth	r2, r3
 800dd78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd7a:	801a      	strh	r2, [r3, #0]
 800dd7c:	e041      	b.n	800de02 <USB_EPStartXfer+0x318>
 800dd7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd82:	085b      	lsrs	r3, r3, #1
 800dd84:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800dd88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dd8c:	f003 0301 	and.w	r3, r3, #1
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d004      	beq.n	800dd9e <USB_EPStartXfer+0x2b4>
 800dd94:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800dd98:	3301      	adds	r3, #1
 800dd9a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800dd9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dda0:	881b      	ldrh	r3, [r3, #0]
 800dda2:	b29a      	uxth	r2, r3
 800dda4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800dda8:	b29b      	uxth	r3, r3
 800ddaa:	029b      	lsls	r3, r3, #10
 800ddac:	b29b      	uxth	r3, r3
 800ddae:	4313      	orrs	r3, r2
 800ddb0:	b29a      	uxth	r2, r3
 800ddb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddb4:	801a      	strh	r2, [r3, #0]
 800ddb6:	e024      	b.n	800de02 <USB_EPStartXfer+0x318>
 800ddb8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddbc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	785b      	ldrb	r3, [r3, #1]
 800ddc4:	2b01      	cmp	r3, #1
 800ddc6:	d11c      	bne.n	800de02 <USB_EPStartXfer+0x318>
 800ddc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ddcc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ddd6:	b29b      	uxth	r3, r3
 800ddd8:	461a      	mov	r2, r3
 800ddda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dddc:	4413      	add	r3, r2
 800ddde:	633b      	str	r3, [r7, #48]	@ 0x30
 800dde0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dde4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	781b      	ldrb	r3, [r3, #0]
 800ddec:	00da      	lsls	r2, r3, #3
 800ddee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddf0:	4413      	add	r3, r2
 800ddf2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ddf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ddf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ddfc:	b29a      	uxth	r2, r3
 800ddfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de00:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800de02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	895b      	ldrh	r3, [r3, #10]
 800de0e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800de12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	6959      	ldr	r1, [r3, #20]
 800de1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de22:	b29b      	uxth	r3, r3
 800de24:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800de28:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800de2c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800de30:	6800      	ldr	r0, [r0, #0]
 800de32:	f001 fb45 	bl	800f4c0 <USB_WritePMA>
            ep->xfer_buff += len;
 800de36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	695a      	ldr	r2, [r3, #20]
 800de42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de46:	441a      	add	r2, r3
 800de48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de4c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800de54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	6a1a      	ldr	r2, [r3, #32]
 800de60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	691b      	ldr	r3, [r3, #16]
 800de6c:	429a      	cmp	r2, r3
 800de6e:	d90f      	bls.n	800de90 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800de70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	6a1a      	ldr	r2, [r3, #32]
 800de7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800de80:	1ad2      	subs	r2, r2, r3
 800de82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	621a      	str	r2, [r3, #32]
 800de8e:	e00e      	b.n	800deae <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800de90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800de94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	6a1b      	ldr	r3, [r3, #32]
 800de9c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800dea0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dea4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	2200      	movs	r2, #0
 800deac:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800deae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800deb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	785b      	ldrb	r3, [r3, #1]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d177      	bne.n	800dfae <USB_EPStartXfer+0x4c4>
 800debe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dec2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	61bb      	str	r3, [r7, #24]
 800deca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dece:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ded8:	b29b      	uxth	r3, r3
 800deda:	461a      	mov	r2, r3
 800dedc:	69bb      	ldr	r3, [r7, #24]
 800dede:	4413      	add	r3, r2
 800dee0:	61bb      	str	r3, [r7, #24]
 800dee2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dee6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	781b      	ldrb	r3, [r3, #0]
 800deee:	00da      	lsls	r2, r3, #3
 800def0:	69bb      	ldr	r3, [r7, #24]
 800def2:	4413      	add	r3, r2
 800def4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800def8:	617b      	str	r3, [r7, #20]
 800defa:	697b      	ldr	r3, [r7, #20]
 800defc:	881b      	ldrh	r3, [r3, #0]
 800defe:	b29b      	uxth	r3, r3
 800df00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800df04:	b29a      	uxth	r2, r3
 800df06:	697b      	ldr	r3, [r7, #20]
 800df08:	801a      	strh	r2, [r3, #0]
 800df0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df0e:	2b3e      	cmp	r3, #62	@ 0x3e
 800df10:	d921      	bls.n	800df56 <USB_EPStartXfer+0x46c>
 800df12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df16:	095b      	lsrs	r3, r3, #5
 800df18:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800df1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df20:	f003 031f 	and.w	r3, r3, #31
 800df24:	2b00      	cmp	r3, #0
 800df26:	d104      	bne.n	800df32 <USB_EPStartXfer+0x448>
 800df28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800df2c:	3b01      	subs	r3, #1
 800df2e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800df32:	697b      	ldr	r3, [r7, #20]
 800df34:	881b      	ldrh	r3, [r3, #0]
 800df36:	b29a      	uxth	r2, r3
 800df38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800df3c:	b29b      	uxth	r3, r3
 800df3e:	029b      	lsls	r3, r3, #10
 800df40:	b29b      	uxth	r3, r3
 800df42:	4313      	orrs	r3, r2
 800df44:	b29b      	uxth	r3, r3
 800df46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800df4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df4e:	b29a      	uxth	r2, r3
 800df50:	697b      	ldr	r3, [r7, #20]
 800df52:	801a      	strh	r2, [r3, #0]
 800df54:	e056      	b.n	800e004 <USB_EPStartXfer+0x51a>
 800df56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d10a      	bne.n	800df74 <USB_EPStartXfer+0x48a>
 800df5e:	697b      	ldr	r3, [r7, #20]
 800df60:	881b      	ldrh	r3, [r3, #0]
 800df62:	b29b      	uxth	r3, r3
 800df64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800df68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800df6c:	b29a      	uxth	r2, r3
 800df6e:	697b      	ldr	r3, [r7, #20]
 800df70:	801a      	strh	r2, [r3, #0]
 800df72:	e047      	b.n	800e004 <USB_EPStartXfer+0x51a>
 800df74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df78:	085b      	lsrs	r3, r3, #1
 800df7a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800df7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800df82:	f003 0301 	and.w	r3, r3, #1
 800df86:	2b00      	cmp	r3, #0
 800df88:	d004      	beq.n	800df94 <USB_EPStartXfer+0x4aa>
 800df8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800df8e:	3301      	adds	r3, #1
 800df90:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800df94:	697b      	ldr	r3, [r7, #20]
 800df96:	881b      	ldrh	r3, [r3, #0]
 800df98:	b29a      	uxth	r2, r3
 800df9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800df9e:	b29b      	uxth	r3, r3
 800dfa0:	029b      	lsls	r3, r3, #10
 800dfa2:	b29b      	uxth	r3, r3
 800dfa4:	4313      	orrs	r3, r2
 800dfa6:	b29a      	uxth	r2, r3
 800dfa8:	697b      	ldr	r3, [r7, #20]
 800dfaa:	801a      	strh	r2, [r3, #0]
 800dfac:	e02a      	b.n	800e004 <USB_EPStartXfer+0x51a>
 800dfae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	785b      	ldrb	r3, [r3, #1]
 800dfba:	2b01      	cmp	r3, #1
 800dfbc:	d122      	bne.n	800e004 <USB_EPStartXfer+0x51a>
 800dfbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfc2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	623b      	str	r3, [r7, #32]
 800dfca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfce:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800dfd8:	b29b      	uxth	r3, r3
 800dfda:	461a      	mov	r2, r3
 800dfdc:	6a3b      	ldr	r3, [r7, #32]
 800dfde:	4413      	add	r3, r2
 800dfe0:	623b      	str	r3, [r7, #32]
 800dfe2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800dfe6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	781b      	ldrb	r3, [r3, #0]
 800dfee:	00da      	lsls	r2, r3, #3
 800dff0:	6a3b      	ldr	r3, [r7, #32]
 800dff2:	4413      	add	r3, r2
 800dff4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800dff8:	61fb      	str	r3, [r7, #28]
 800dffa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800dffe:	b29a      	uxth	r2, r3
 800e000:	69fb      	ldr	r3, [r7, #28]
 800e002:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e004:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e008:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	891b      	ldrh	r3, [r3, #8]
 800e010:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e014:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e018:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	6959      	ldr	r1, [r3, #20]
 800e020:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e024:	b29b      	uxth	r3, r3
 800e026:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e02a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800e02e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800e032:	6800      	ldr	r0, [r0, #0]
 800e034:	f001 fa44 	bl	800f4c0 <USB_WritePMA>
 800e038:	e3ee      	b.n	800e818 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e03a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e03e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	785b      	ldrb	r3, [r3, #1]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d177      	bne.n	800e13a <USB_EPStartXfer+0x650>
 800e04a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e04e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e056:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e05a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e064:	b29b      	uxth	r3, r3
 800e066:	461a      	mov	r2, r3
 800e068:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e06a:	4413      	add	r3, r2
 800e06c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e06e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e072:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	781b      	ldrb	r3, [r3, #0]
 800e07a:	00da      	lsls	r2, r3, #3
 800e07c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e07e:	4413      	add	r3, r2
 800e080:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e084:	647b      	str	r3, [r7, #68]	@ 0x44
 800e086:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e088:	881b      	ldrh	r3, [r3, #0]
 800e08a:	b29b      	uxth	r3, r3
 800e08c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e090:	b29a      	uxth	r2, r3
 800e092:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e094:	801a      	strh	r2, [r3, #0]
 800e096:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e09a:	2b3e      	cmp	r3, #62	@ 0x3e
 800e09c:	d921      	bls.n	800e0e2 <USB_EPStartXfer+0x5f8>
 800e09e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0a2:	095b      	lsrs	r3, r3, #5
 800e0a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800e0a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0ac:	f003 031f 	and.w	r3, r3, #31
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d104      	bne.n	800e0be <USB_EPStartXfer+0x5d4>
 800e0b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800e0b8:	3b01      	subs	r3, #1
 800e0ba:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800e0be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0c0:	881b      	ldrh	r3, [r3, #0]
 800e0c2:	b29a      	uxth	r2, r3
 800e0c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800e0c8:	b29b      	uxth	r3, r3
 800e0ca:	029b      	lsls	r3, r3, #10
 800e0cc:	b29b      	uxth	r3, r3
 800e0ce:	4313      	orrs	r3, r2
 800e0d0:	b29b      	uxth	r3, r3
 800e0d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e0d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e0da:	b29a      	uxth	r2, r3
 800e0dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0de:	801a      	strh	r2, [r3, #0]
 800e0e0:	e056      	b.n	800e190 <USB_EPStartXfer+0x6a6>
 800e0e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d10a      	bne.n	800e100 <USB_EPStartXfer+0x616>
 800e0ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0ec:	881b      	ldrh	r3, [r3, #0]
 800e0ee:	b29b      	uxth	r3, r3
 800e0f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e0f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e0f8:	b29a      	uxth	r2, r3
 800e0fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0fc:	801a      	strh	r2, [r3, #0]
 800e0fe:	e047      	b.n	800e190 <USB_EPStartXfer+0x6a6>
 800e100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e104:	085b      	lsrs	r3, r3, #1
 800e106:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800e10a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e10e:	f003 0301 	and.w	r3, r3, #1
 800e112:	2b00      	cmp	r3, #0
 800e114:	d004      	beq.n	800e120 <USB_EPStartXfer+0x636>
 800e116:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800e11a:	3301      	adds	r3, #1
 800e11c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800e120:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e122:	881b      	ldrh	r3, [r3, #0]
 800e124:	b29a      	uxth	r2, r3
 800e126:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800e12a:	b29b      	uxth	r3, r3
 800e12c:	029b      	lsls	r3, r3, #10
 800e12e:	b29b      	uxth	r3, r3
 800e130:	4313      	orrs	r3, r2
 800e132:	b29a      	uxth	r2, r3
 800e134:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e136:	801a      	strh	r2, [r3, #0]
 800e138:	e02a      	b.n	800e190 <USB_EPStartXfer+0x6a6>
 800e13a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e13e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	785b      	ldrb	r3, [r3, #1]
 800e146:	2b01      	cmp	r3, #1
 800e148:	d122      	bne.n	800e190 <USB_EPStartXfer+0x6a6>
 800e14a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e14e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	653b      	str	r3, [r7, #80]	@ 0x50
 800e156:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e15a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e164:	b29b      	uxth	r3, r3
 800e166:	461a      	mov	r2, r3
 800e168:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e16a:	4413      	add	r3, r2
 800e16c:	653b      	str	r3, [r7, #80]	@ 0x50
 800e16e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e172:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	781b      	ldrb	r3, [r3, #0]
 800e17a:	00da      	lsls	r2, r3, #3
 800e17c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e17e:	4413      	add	r3, r2
 800e180:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e184:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e186:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e18a:	b29a      	uxth	r2, r3
 800e18c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e18e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e190:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e194:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	891b      	ldrh	r3, [r3, #8]
 800e19c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e1a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	6959      	ldr	r1, [r3, #20]
 800e1ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1b0:	b29b      	uxth	r3, r3
 800e1b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e1b6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800e1ba:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800e1be:	6800      	ldr	r0, [r0, #0]
 800e1c0:	f001 f97e 	bl	800f4c0 <USB_WritePMA>
            ep->xfer_buff += len;
 800e1c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	695a      	ldr	r2, [r3, #20]
 800e1d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1d4:	441a      	add	r2, r3
 800e1d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e1e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	6a1a      	ldr	r2, [r3, #32]
 800e1ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	691b      	ldr	r3, [r3, #16]
 800e1fa:	429a      	cmp	r2, r3
 800e1fc:	d90f      	bls.n	800e21e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800e1fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e202:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	6a1a      	ldr	r2, [r3, #32]
 800e20a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e20e:	1ad2      	subs	r2, r2, r3
 800e210:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e214:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	621a      	str	r2, [r3, #32]
 800e21c:	e00e      	b.n	800e23c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800e21e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e222:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	6a1b      	ldr	r3, [r3, #32]
 800e22a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800e22e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e232:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	2200      	movs	r2, #0
 800e23a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e23c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e240:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	643b      	str	r3, [r7, #64]	@ 0x40
 800e248:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e24c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	785b      	ldrb	r3, [r3, #1]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d177      	bne.n	800e348 <USB_EPStartXfer+0x85e>
 800e258:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e25c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e264:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e268:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e272:	b29b      	uxth	r3, r3
 800e274:	461a      	mov	r2, r3
 800e276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e278:	4413      	add	r3, r2
 800e27a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e27c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e280:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	781b      	ldrb	r3, [r3, #0]
 800e288:	00da      	lsls	r2, r3, #3
 800e28a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e28c:	4413      	add	r3, r2
 800e28e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e292:	637b      	str	r3, [r7, #52]	@ 0x34
 800e294:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e296:	881b      	ldrh	r3, [r3, #0]
 800e298:	b29b      	uxth	r3, r3
 800e29a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e29e:	b29a      	uxth	r2, r3
 800e2a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2a2:	801a      	strh	r2, [r3, #0]
 800e2a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e2a8:	2b3e      	cmp	r3, #62	@ 0x3e
 800e2aa:	d921      	bls.n	800e2f0 <USB_EPStartXfer+0x806>
 800e2ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e2b0:	095b      	lsrs	r3, r3, #5
 800e2b2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800e2b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e2ba:	f003 031f 	and.w	r3, r3, #31
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d104      	bne.n	800e2cc <USB_EPStartXfer+0x7e2>
 800e2c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e2c6:	3b01      	subs	r3, #1
 800e2c8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800e2cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2ce:	881b      	ldrh	r3, [r3, #0]
 800e2d0:	b29a      	uxth	r2, r3
 800e2d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e2d6:	b29b      	uxth	r3, r3
 800e2d8:	029b      	lsls	r3, r3, #10
 800e2da:	b29b      	uxth	r3, r3
 800e2dc:	4313      	orrs	r3, r2
 800e2de:	b29b      	uxth	r3, r3
 800e2e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e2e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e2e8:	b29a      	uxth	r2, r3
 800e2ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2ec:	801a      	strh	r2, [r3, #0]
 800e2ee:	e050      	b.n	800e392 <USB_EPStartXfer+0x8a8>
 800e2f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d10a      	bne.n	800e30e <USB_EPStartXfer+0x824>
 800e2f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2fa:	881b      	ldrh	r3, [r3, #0]
 800e2fc:	b29b      	uxth	r3, r3
 800e2fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e302:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e306:	b29a      	uxth	r2, r3
 800e308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e30a:	801a      	strh	r2, [r3, #0]
 800e30c:	e041      	b.n	800e392 <USB_EPStartXfer+0x8a8>
 800e30e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e312:	085b      	lsrs	r3, r3, #1
 800e314:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800e318:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e31c:	f003 0301 	and.w	r3, r3, #1
 800e320:	2b00      	cmp	r3, #0
 800e322:	d004      	beq.n	800e32e <USB_EPStartXfer+0x844>
 800e324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e328:	3301      	adds	r3, #1
 800e32a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800e32e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e330:	881b      	ldrh	r3, [r3, #0]
 800e332:	b29a      	uxth	r2, r3
 800e334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e338:	b29b      	uxth	r3, r3
 800e33a:	029b      	lsls	r3, r3, #10
 800e33c:	b29b      	uxth	r3, r3
 800e33e:	4313      	orrs	r3, r2
 800e340:	b29a      	uxth	r2, r3
 800e342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e344:	801a      	strh	r2, [r3, #0]
 800e346:	e024      	b.n	800e392 <USB_EPStartXfer+0x8a8>
 800e348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e34c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	785b      	ldrb	r3, [r3, #1]
 800e354:	2b01      	cmp	r3, #1
 800e356:	d11c      	bne.n	800e392 <USB_EPStartXfer+0x8a8>
 800e358:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e35c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e366:	b29b      	uxth	r3, r3
 800e368:	461a      	mov	r2, r3
 800e36a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e36c:	4413      	add	r3, r2
 800e36e:	643b      	str	r3, [r7, #64]	@ 0x40
 800e370:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e374:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	781b      	ldrb	r3, [r3, #0]
 800e37c:	00da      	lsls	r2, r3, #3
 800e37e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e380:	4413      	add	r3, r2
 800e382:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e386:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e388:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e38c:	b29a      	uxth	r2, r3
 800e38e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e390:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800e392:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e396:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	895b      	ldrh	r3, [r3, #10]
 800e39e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e3a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e3a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	6959      	ldr	r1, [r3, #20]
 800e3ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3b2:	b29b      	uxth	r3, r3
 800e3b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e3b8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800e3bc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800e3c0:	6800      	ldr	r0, [r0, #0]
 800e3c2:	f001 f87d 	bl	800f4c0 <USB_WritePMA>
 800e3c6:	e227      	b.n	800e818 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800e3c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e3cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	6a1b      	ldr	r3, [r3, #32]
 800e3d4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800e3d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e3dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e3e0:	681a      	ldr	r2, [r3, #0]
 800e3e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e3e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	781b      	ldrb	r3, [r3, #0]
 800e3ee:	009b      	lsls	r3, r3, #2
 800e3f0:	4413      	add	r3, r2
 800e3f2:	881b      	ldrh	r3, [r3, #0]
 800e3f4:	b29b      	uxth	r3, r3
 800e3f6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800e3fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e3fe:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800e402:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e406:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e40a:	681a      	ldr	r2, [r3, #0]
 800e40c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e410:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	781b      	ldrb	r3, [r3, #0]
 800e418:	009b      	lsls	r3, r3, #2
 800e41a:	441a      	add	r2, r3
 800e41c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800e420:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e424:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e428:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e42c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e430:	b29b      	uxth	r3, r3
 800e432:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e434:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e438:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e440:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e444:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e44e:	b29b      	uxth	r3, r3
 800e450:	461a      	mov	r2, r3
 800e452:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e454:	4413      	add	r3, r2
 800e456:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e458:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e45c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	781b      	ldrb	r3, [r3, #0]
 800e464:	00da      	lsls	r2, r3, #3
 800e466:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e468:	4413      	add	r3, r2
 800e46a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e46e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e474:	b29a      	uxth	r2, r3
 800e476:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e478:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e47a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e47e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	891b      	ldrh	r3, [r3, #8]
 800e486:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e48a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e48e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	6959      	ldr	r1, [r3, #20]
 800e496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e49a:	b29b      	uxth	r3, r3
 800e49c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e4a0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800e4a4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800e4a8:	6800      	ldr	r0, [r0, #0]
 800e4aa:	f001 f809 	bl	800f4c0 <USB_WritePMA>
 800e4ae:	e1b3      	b.n	800e818 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800e4b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	6a1a      	ldr	r2, [r3, #32]
 800e4bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4c0:	1ad2      	subs	r2, r2, r3
 800e4c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e4ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e4d6:	681a      	ldr	r2, [r3, #0]
 800e4d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	781b      	ldrb	r3, [r3, #0]
 800e4e4:	009b      	lsls	r3, r3, #2
 800e4e6:	4413      	add	r3, r2
 800e4e8:	881b      	ldrh	r3, [r3, #0]
 800e4ea:	b29b      	uxth	r3, r3
 800e4ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	f000 80c6 	beq.w	800e682 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e4f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	673b      	str	r3, [r7, #112]	@ 0x70
 800e502:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e506:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	785b      	ldrb	r3, [r3, #1]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d177      	bne.n	800e602 <USB_EPStartXfer+0xb18>
 800e512:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e516:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e51e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e522:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e52c:	b29b      	uxth	r3, r3
 800e52e:	461a      	mov	r2, r3
 800e530:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e532:	4413      	add	r3, r2
 800e534:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e536:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e53a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	781b      	ldrb	r3, [r3, #0]
 800e542:	00da      	lsls	r2, r3, #3
 800e544:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e546:	4413      	add	r3, r2
 800e548:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e54c:	667b      	str	r3, [r7, #100]	@ 0x64
 800e54e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e550:	881b      	ldrh	r3, [r3, #0]
 800e552:	b29b      	uxth	r3, r3
 800e554:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e558:	b29a      	uxth	r2, r3
 800e55a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e55c:	801a      	strh	r2, [r3, #0]
 800e55e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e562:	2b3e      	cmp	r3, #62	@ 0x3e
 800e564:	d921      	bls.n	800e5aa <USB_EPStartXfer+0xac0>
 800e566:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e56a:	095b      	lsrs	r3, r3, #5
 800e56c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800e570:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e574:	f003 031f 	and.w	r3, r3, #31
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d104      	bne.n	800e586 <USB_EPStartXfer+0xa9c>
 800e57c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800e580:	3b01      	subs	r3, #1
 800e582:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800e586:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e588:	881b      	ldrh	r3, [r3, #0]
 800e58a:	b29a      	uxth	r2, r3
 800e58c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800e590:	b29b      	uxth	r3, r3
 800e592:	029b      	lsls	r3, r3, #10
 800e594:	b29b      	uxth	r3, r3
 800e596:	4313      	orrs	r3, r2
 800e598:	b29b      	uxth	r3, r3
 800e59a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e59e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e5a2:	b29a      	uxth	r2, r3
 800e5a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e5a6:	801a      	strh	r2, [r3, #0]
 800e5a8:	e050      	b.n	800e64c <USB_EPStartXfer+0xb62>
 800e5aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d10a      	bne.n	800e5c8 <USB_EPStartXfer+0xade>
 800e5b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e5b4:	881b      	ldrh	r3, [r3, #0]
 800e5b6:	b29b      	uxth	r3, r3
 800e5b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e5bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e5c0:	b29a      	uxth	r2, r3
 800e5c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e5c4:	801a      	strh	r2, [r3, #0]
 800e5c6:	e041      	b.n	800e64c <USB_EPStartXfer+0xb62>
 800e5c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5cc:	085b      	lsrs	r3, r3, #1
 800e5ce:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800e5d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5d6:	f003 0301 	and.w	r3, r3, #1
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d004      	beq.n	800e5e8 <USB_EPStartXfer+0xafe>
 800e5de:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800e5e2:	3301      	adds	r3, #1
 800e5e4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800e5e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e5ea:	881b      	ldrh	r3, [r3, #0]
 800e5ec:	b29a      	uxth	r2, r3
 800e5ee:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800e5f2:	b29b      	uxth	r3, r3
 800e5f4:	029b      	lsls	r3, r3, #10
 800e5f6:	b29b      	uxth	r3, r3
 800e5f8:	4313      	orrs	r3, r2
 800e5fa:	b29a      	uxth	r2, r3
 800e5fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e5fe:	801a      	strh	r2, [r3, #0]
 800e600:	e024      	b.n	800e64c <USB_EPStartXfer+0xb62>
 800e602:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e606:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	785b      	ldrb	r3, [r3, #1]
 800e60e:	2b01      	cmp	r3, #1
 800e610:	d11c      	bne.n	800e64c <USB_EPStartXfer+0xb62>
 800e612:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e616:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e620:	b29b      	uxth	r3, r3
 800e622:	461a      	mov	r2, r3
 800e624:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e626:	4413      	add	r3, r2
 800e628:	673b      	str	r3, [r7, #112]	@ 0x70
 800e62a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e62e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	781b      	ldrb	r3, [r3, #0]
 800e636:	00da      	lsls	r2, r3, #3
 800e638:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e63a:	4413      	add	r3, r2
 800e63c:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e640:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e642:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e646:	b29a      	uxth	r2, r3
 800e648:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e64a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800e64c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e650:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	895b      	ldrh	r3, [r3, #10]
 800e658:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e65c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e660:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	6959      	ldr	r1, [r3, #20]
 800e668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e66c:	b29b      	uxth	r3, r3
 800e66e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e672:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800e676:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800e67a:	6800      	ldr	r0, [r0, #0]
 800e67c:	f000 ff20 	bl	800f4c0 <USB_WritePMA>
 800e680:	e0ca      	b.n	800e818 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e682:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e686:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	785b      	ldrb	r3, [r3, #1]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d177      	bne.n	800e782 <USB_EPStartXfer+0xc98>
 800e692:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e696:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e69e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e6a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e6ac:	b29b      	uxth	r3, r3
 800e6ae:	461a      	mov	r2, r3
 800e6b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e6b2:	4413      	add	r3, r2
 800e6b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e6b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e6ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	781b      	ldrb	r3, [r3, #0]
 800e6c2:	00da      	lsls	r2, r3, #3
 800e6c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e6c6:	4413      	add	r3, r2
 800e6c8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e6cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e6ce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e6d0:	881b      	ldrh	r3, [r3, #0]
 800e6d2:	b29b      	uxth	r3, r3
 800e6d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e6d8:	b29a      	uxth	r2, r3
 800e6da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e6dc:	801a      	strh	r2, [r3, #0]
 800e6de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6e2:	2b3e      	cmp	r3, #62	@ 0x3e
 800e6e4:	d921      	bls.n	800e72a <USB_EPStartXfer+0xc40>
 800e6e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6ea:	095b      	lsrs	r3, r3, #5
 800e6ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800e6f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6f4:	f003 031f 	and.w	r3, r3, #31
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d104      	bne.n	800e706 <USB_EPStartXfer+0xc1c>
 800e6fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e700:	3b01      	subs	r3, #1
 800e702:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800e706:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e708:	881b      	ldrh	r3, [r3, #0]
 800e70a:	b29a      	uxth	r2, r3
 800e70c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e710:	b29b      	uxth	r3, r3
 800e712:	029b      	lsls	r3, r3, #10
 800e714:	b29b      	uxth	r3, r3
 800e716:	4313      	orrs	r3, r2
 800e718:	b29b      	uxth	r3, r3
 800e71a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e71e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e722:	b29a      	uxth	r2, r3
 800e724:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e726:	801a      	strh	r2, [r3, #0]
 800e728:	e05c      	b.n	800e7e4 <USB_EPStartXfer+0xcfa>
 800e72a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d10a      	bne.n	800e748 <USB_EPStartXfer+0xc5e>
 800e732:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e734:	881b      	ldrh	r3, [r3, #0]
 800e736:	b29b      	uxth	r3, r3
 800e738:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e73c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e740:	b29a      	uxth	r2, r3
 800e742:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e744:	801a      	strh	r2, [r3, #0]
 800e746:	e04d      	b.n	800e7e4 <USB_EPStartXfer+0xcfa>
 800e748:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e74c:	085b      	lsrs	r3, r3, #1
 800e74e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800e752:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e756:	f003 0301 	and.w	r3, r3, #1
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d004      	beq.n	800e768 <USB_EPStartXfer+0xc7e>
 800e75e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e762:	3301      	adds	r3, #1
 800e764:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800e768:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e76a:	881b      	ldrh	r3, [r3, #0]
 800e76c:	b29a      	uxth	r2, r3
 800e76e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800e772:	b29b      	uxth	r3, r3
 800e774:	029b      	lsls	r3, r3, #10
 800e776:	b29b      	uxth	r3, r3
 800e778:	4313      	orrs	r3, r2
 800e77a:	b29a      	uxth	r2, r3
 800e77c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e77e:	801a      	strh	r2, [r3, #0]
 800e780:	e030      	b.n	800e7e4 <USB_EPStartXfer+0xcfa>
 800e782:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e786:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	785b      	ldrb	r3, [r3, #1]
 800e78e:	2b01      	cmp	r3, #1
 800e790:	d128      	bne.n	800e7e4 <USB_EPStartXfer+0xcfa>
 800e792:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e796:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e7a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e7a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e7ae:	b29b      	uxth	r3, r3
 800e7b0:	461a      	mov	r2, r3
 800e7b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e7b6:	4413      	add	r3, r2
 800e7b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800e7bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e7c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	781b      	ldrb	r3, [r3, #0]
 800e7c8:	00da      	lsls	r2, r3, #3
 800e7ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e7ce:	4413      	add	r3, r2
 800e7d0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e7d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800e7d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7dc:	b29a      	uxth	r2, r3
 800e7de:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e7e2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800e7e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e7e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	891b      	ldrh	r3, [r3, #8]
 800e7f0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e7f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e7f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	6959      	ldr	r1, [r3, #20]
 800e800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e804:	b29b      	uxth	r3, r3
 800e806:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e80a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800e80e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800e812:	6800      	ldr	r0, [r0, #0]
 800e814:	f000 fe54 	bl	800f4c0 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800e818:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e81c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e820:	681a      	ldr	r2, [r3, #0]
 800e822:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e826:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	781b      	ldrb	r3, [r3, #0]
 800e82e:	009b      	lsls	r3, r3, #2
 800e830:	4413      	add	r3, r2
 800e832:	881b      	ldrh	r3, [r3, #0]
 800e834:	b29b      	uxth	r3, r3
 800e836:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e83a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e83e:	817b      	strh	r3, [r7, #10]
 800e840:	897b      	ldrh	r3, [r7, #10]
 800e842:	f083 0310 	eor.w	r3, r3, #16
 800e846:	817b      	strh	r3, [r7, #10]
 800e848:	897b      	ldrh	r3, [r7, #10]
 800e84a:	f083 0320 	eor.w	r3, r3, #32
 800e84e:	817b      	strh	r3, [r7, #10]
 800e850:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e854:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e858:	681a      	ldr	r2, [r3, #0]
 800e85a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e85e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	781b      	ldrb	r3, [r3, #0]
 800e866:	009b      	lsls	r3, r3, #2
 800e868:	441a      	add	r2, r3
 800e86a:	897b      	ldrh	r3, [r7, #10]
 800e86c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e870:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e874:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e878:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e87c:	b29b      	uxth	r3, r3
 800e87e:	8013      	strh	r3, [r2, #0]
 800e880:	f000 bcde 	b.w	800f240 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800e884:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e888:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	7b1b      	ldrb	r3, [r3, #12]
 800e890:	2b00      	cmp	r3, #0
 800e892:	f040 80bb 	bne.w	800ea0c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800e896:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e89a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	699a      	ldr	r2, [r3, #24]
 800e8a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e8a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	691b      	ldr	r3, [r3, #16]
 800e8ae:	429a      	cmp	r2, r3
 800e8b0:	d917      	bls.n	800e8e2 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800e8b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e8b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	691b      	ldr	r3, [r3, #16]
 800e8be:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800e8c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e8c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	699a      	ldr	r2, [r3, #24]
 800e8ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8d2:	1ad2      	subs	r2, r2, r3
 800e8d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e8d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	619a      	str	r2, [r3, #24]
 800e8e0:	e00e      	b.n	800e900 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800e8e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e8e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	699b      	ldr	r3, [r3, #24]
 800e8ee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800e8f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e8f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800e900:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e904:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e90e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e912:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e91c:	b29b      	uxth	r3, r3
 800e91e:	461a      	mov	r2, r3
 800e920:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e924:	4413      	add	r3, r2
 800e926:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800e92a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e92e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	781b      	ldrb	r3, [r3, #0]
 800e936:	00da      	lsls	r2, r3, #3
 800e938:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800e93c:	4413      	add	r3, r2
 800e93e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e942:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800e946:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e94a:	881b      	ldrh	r3, [r3, #0]
 800e94c:	b29b      	uxth	r3, r3
 800e94e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e952:	b29a      	uxth	r2, r3
 800e954:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e958:	801a      	strh	r2, [r3, #0]
 800e95a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e95e:	2b3e      	cmp	r3, #62	@ 0x3e
 800e960:	d924      	bls.n	800e9ac <USB_EPStartXfer+0xec2>
 800e962:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e966:	095b      	lsrs	r3, r3, #5
 800e968:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e96c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e970:	f003 031f 	and.w	r3, r3, #31
 800e974:	2b00      	cmp	r3, #0
 800e976:	d104      	bne.n	800e982 <USB_EPStartXfer+0xe98>
 800e978:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800e97c:	3b01      	subs	r3, #1
 800e97e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e982:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e986:	881b      	ldrh	r3, [r3, #0]
 800e988:	b29a      	uxth	r2, r3
 800e98a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800e98e:	b29b      	uxth	r3, r3
 800e990:	029b      	lsls	r3, r3, #10
 800e992:	b29b      	uxth	r3, r3
 800e994:	4313      	orrs	r3, r2
 800e996:	b29b      	uxth	r3, r3
 800e998:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e99c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e9a0:	b29a      	uxth	r2, r3
 800e9a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e9a6:	801a      	strh	r2, [r3, #0]
 800e9a8:	f000 bc10 	b.w	800f1cc <USB_EPStartXfer+0x16e2>
 800e9ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d10c      	bne.n	800e9ce <USB_EPStartXfer+0xee4>
 800e9b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e9b8:	881b      	ldrh	r3, [r3, #0]
 800e9ba:	b29b      	uxth	r3, r3
 800e9bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e9c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e9c4:	b29a      	uxth	r2, r3
 800e9c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e9ca:	801a      	strh	r2, [r3, #0]
 800e9cc:	e3fe      	b.n	800f1cc <USB_EPStartXfer+0x16e2>
 800e9ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9d2:	085b      	lsrs	r3, r3, #1
 800e9d4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e9d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9dc:	f003 0301 	and.w	r3, r3, #1
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d004      	beq.n	800e9ee <USB_EPStartXfer+0xf04>
 800e9e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800e9e8:	3301      	adds	r3, #1
 800e9ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800e9ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e9f2:	881b      	ldrh	r3, [r3, #0]
 800e9f4:	b29a      	uxth	r2, r3
 800e9f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800e9fa:	b29b      	uxth	r3, r3
 800e9fc:	029b      	lsls	r3, r3, #10
 800e9fe:	b29b      	uxth	r3, r3
 800ea00:	4313      	orrs	r3, r2
 800ea02:	b29a      	uxth	r2, r3
 800ea04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ea08:	801a      	strh	r2, [r3, #0]
 800ea0a:	e3df      	b.n	800f1cc <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800ea0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ea10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	78db      	ldrb	r3, [r3, #3]
 800ea18:	2b02      	cmp	r3, #2
 800ea1a:	f040 8218 	bne.w	800ee4e <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800ea1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ea22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	785b      	ldrb	r3, [r3, #1]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	f040 809d 	bne.w	800eb6a <USB_EPStartXfer+0x1080>
 800ea30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ea34:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ea3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ea42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ea4c:	b29b      	uxth	r3, r3
 800ea4e:	461a      	mov	r2, r3
 800ea50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ea54:	4413      	add	r3, r2
 800ea56:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ea5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ea5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	781b      	ldrb	r3, [r3, #0]
 800ea66:	00da      	lsls	r2, r3, #3
 800ea68:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ea6c:	4413      	add	r3, r2
 800ea6e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ea72:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800ea76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ea7a:	881b      	ldrh	r3, [r3, #0]
 800ea7c:	b29b      	uxth	r3, r3
 800ea7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ea82:	b29a      	uxth	r2, r3
 800ea84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800ea88:	801a      	strh	r2, [r3, #0]
 800ea8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ea8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	691b      	ldr	r3, [r3, #16]
 800ea96:	2b3e      	cmp	r3, #62	@ 0x3e
 800ea98:	d92b      	bls.n	800eaf2 <USB_EPStartXfer+0x1008>
 800ea9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ea9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	691b      	ldr	r3, [r3, #16]
 800eaa6:	095b      	lsrs	r3, r3, #5
 800eaa8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800eaac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eab0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	691b      	ldr	r3, [r3, #16]
 800eab8:	f003 031f 	and.w	r3, r3, #31
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d104      	bne.n	800eaca <USB_EPStartXfer+0xfe0>
 800eac0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eac4:	3b01      	subs	r3, #1
 800eac6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800eaca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800eace:	881b      	ldrh	r3, [r3, #0]
 800ead0:	b29a      	uxth	r2, r3
 800ead2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ead6:	b29b      	uxth	r3, r3
 800ead8:	029b      	lsls	r3, r3, #10
 800eada:	b29b      	uxth	r3, r3
 800eadc:	4313      	orrs	r3, r2
 800eade:	b29b      	uxth	r3, r3
 800eae0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eae4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eae8:	b29a      	uxth	r2, r3
 800eaea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800eaee:	801a      	strh	r2, [r3, #0]
 800eaf0:	e070      	b.n	800ebd4 <USB_EPStartXfer+0x10ea>
 800eaf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eaf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	691b      	ldr	r3, [r3, #16]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d10c      	bne.n	800eb1c <USB_EPStartXfer+0x1032>
 800eb02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800eb06:	881b      	ldrh	r3, [r3, #0]
 800eb08:	b29b      	uxth	r3, r3
 800eb0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eb0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800eb12:	b29a      	uxth	r2, r3
 800eb14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800eb18:	801a      	strh	r2, [r3, #0]
 800eb1a:	e05b      	b.n	800ebd4 <USB_EPStartXfer+0x10ea>
 800eb1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eb20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	691b      	ldr	r3, [r3, #16]
 800eb28:	085b      	lsrs	r3, r3, #1
 800eb2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800eb2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eb32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	691b      	ldr	r3, [r3, #16]
 800eb3a:	f003 0301 	and.w	r3, r3, #1
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d004      	beq.n	800eb4c <USB_EPStartXfer+0x1062>
 800eb42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb46:	3301      	adds	r3, #1
 800eb48:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800eb4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800eb50:	881b      	ldrh	r3, [r3, #0]
 800eb52:	b29a      	uxth	r2, r3
 800eb54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800eb58:	b29b      	uxth	r3, r3
 800eb5a:	029b      	lsls	r3, r3, #10
 800eb5c:	b29b      	uxth	r3, r3
 800eb5e:	4313      	orrs	r3, r2
 800eb60:	b29a      	uxth	r2, r3
 800eb62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800eb66:	801a      	strh	r2, [r3, #0]
 800eb68:	e034      	b.n	800ebd4 <USB_EPStartXfer+0x10ea>
 800eb6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eb6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	785b      	ldrb	r3, [r3, #1]
 800eb76:	2b01      	cmp	r3, #1
 800eb78:	d12c      	bne.n	800ebd4 <USB_EPStartXfer+0x10ea>
 800eb7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eb7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800eb88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eb8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800eb96:	b29b      	uxth	r3, r3
 800eb98:	461a      	mov	r2, r3
 800eb9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800eb9e:	4413      	add	r3, r2
 800eba0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800eba4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eba8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	781b      	ldrb	r3, [r3, #0]
 800ebb0:	00da      	lsls	r2, r3, #3
 800ebb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800ebb6:	4413      	add	r3, r2
 800ebb8:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ebbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ebc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ebc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	691b      	ldr	r3, [r3, #16]
 800ebcc:	b29a      	uxth	r2, r3
 800ebce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800ebd2:	801a      	strh	r2, [r3, #0]
 800ebd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ebd8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ebe2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ebe6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	785b      	ldrb	r3, [r3, #1]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	f040 809d 	bne.w	800ed2e <USB_EPStartXfer+0x1244>
 800ebf4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ebf8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ec02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec06:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ec10:	b29b      	uxth	r3, r3
 800ec12:	461a      	mov	r2, r3
 800ec14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ec18:	4413      	add	r3, r2
 800ec1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800ec1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	781b      	ldrb	r3, [r3, #0]
 800ec2a:	00da      	lsls	r2, r3, #3
 800ec2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ec30:	4413      	add	r3, r2
 800ec32:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ec36:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800ec3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ec3e:	881b      	ldrh	r3, [r3, #0]
 800ec40:	b29b      	uxth	r3, r3
 800ec42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ec46:	b29a      	uxth	r2, r3
 800ec48:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ec4c:	801a      	strh	r2, [r3, #0]
 800ec4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	691b      	ldr	r3, [r3, #16]
 800ec5a:	2b3e      	cmp	r3, #62	@ 0x3e
 800ec5c:	d92b      	bls.n	800ecb6 <USB_EPStartXfer+0x11cc>
 800ec5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	691b      	ldr	r3, [r3, #16]
 800ec6a:	095b      	lsrs	r3, r3, #5
 800ec6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ec70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	691b      	ldr	r3, [r3, #16]
 800ec7c:	f003 031f 	and.w	r3, r3, #31
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d104      	bne.n	800ec8e <USB_EPStartXfer+0x11a4>
 800ec84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ec88:	3b01      	subs	r3, #1
 800ec8a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ec8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ec92:	881b      	ldrh	r3, [r3, #0]
 800ec94:	b29a      	uxth	r2, r3
 800ec96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ec9a:	b29b      	uxth	r3, r3
 800ec9c:	029b      	lsls	r3, r3, #10
 800ec9e:	b29b      	uxth	r3, r3
 800eca0:	4313      	orrs	r3, r2
 800eca2:	b29b      	uxth	r3, r3
 800eca4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800eca8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ecac:	b29a      	uxth	r2, r3
 800ecae:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ecb2:	801a      	strh	r2, [r3, #0]
 800ecb4:	e069      	b.n	800ed8a <USB_EPStartXfer+0x12a0>
 800ecb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ecba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	691b      	ldr	r3, [r3, #16]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d10c      	bne.n	800ece0 <USB_EPStartXfer+0x11f6>
 800ecc6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ecca:	881b      	ldrh	r3, [r3, #0]
 800eccc:	b29b      	uxth	r3, r3
 800ecce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ecd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ecd6:	b29a      	uxth	r2, r3
 800ecd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ecdc:	801a      	strh	r2, [r3, #0]
 800ecde:	e054      	b.n	800ed8a <USB_EPStartXfer+0x12a0>
 800ece0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ece4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	691b      	ldr	r3, [r3, #16]
 800ecec:	085b      	lsrs	r3, r3, #1
 800ecee:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ecf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ecf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	691b      	ldr	r3, [r3, #16]
 800ecfe:	f003 0301 	and.w	r3, r3, #1
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d004      	beq.n	800ed10 <USB_EPStartXfer+0x1226>
 800ed06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ed0a:	3301      	adds	r3, #1
 800ed0c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800ed10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ed14:	881b      	ldrh	r3, [r3, #0]
 800ed16:	b29a      	uxth	r2, r3
 800ed18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ed1c:	b29b      	uxth	r3, r3
 800ed1e:	029b      	lsls	r3, r3, #10
 800ed20:	b29b      	uxth	r3, r3
 800ed22:	4313      	orrs	r3, r2
 800ed24:	b29a      	uxth	r2, r3
 800ed26:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ed2a:	801a      	strh	r2, [r3, #0]
 800ed2c:	e02d      	b.n	800ed8a <USB_EPStartXfer+0x12a0>
 800ed2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ed32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	785b      	ldrb	r3, [r3, #1]
 800ed3a:	2b01      	cmp	r3, #1
 800ed3c:	d125      	bne.n	800ed8a <USB_EPStartXfer+0x12a0>
 800ed3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ed42:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ed4c:	b29b      	uxth	r3, r3
 800ed4e:	461a      	mov	r2, r3
 800ed50:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ed54:	4413      	add	r3, r2
 800ed56:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800ed5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ed5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	781b      	ldrb	r3, [r3, #0]
 800ed66:	00da      	lsls	r2, r3, #3
 800ed68:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ed6c:	4413      	add	r3, r2
 800ed6e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ed72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800ed76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ed7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	691b      	ldr	r3, [r3, #16]
 800ed82:	b29a      	uxth	r2, r3
 800ed84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800ed88:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800ed8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ed8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	69db      	ldr	r3, [r3, #28]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	f000 8218 	beq.w	800f1cc <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800ed9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eda0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800eda4:	681a      	ldr	r2, [r3, #0]
 800eda6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800edaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	781b      	ldrb	r3, [r3, #0]
 800edb2:	009b      	lsls	r3, r3, #2
 800edb4:	4413      	add	r3, r2
 800edb6:	881b      	ldrh	r3, [r3, #0]
 800edb8:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800edbc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800edc0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d005      	beq.n	800edd4 <USB_EPStartXfer+0x12ea>
 800edc8:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800edcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d10d      	bne.n	800edf0 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800edd4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800edd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800eddc:	2b00      	cmp	r3, #0
 800edde:	f040 81f5 	bne.w	800f1cc <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ede2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800ede6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800edea:	2b00      	cmp	r3, #0
 800edec:	f040 81ee 	bne.w	800f1cc <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800edf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800edf4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800edf8:	681a      	ldr	r2, [r3, #0]
 800edfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800edfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	781b      	ldrb	r3, [r3, #0]
 800ee06:	009b      	lsls	r3, r3, #2
 800ee08:	4413      	add	r3, r2
 800ee0a:	881b      	ldrh	r3, [r3, #0]
 800ee0c:	b29b      	uxth	r3, r3
 800ee0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ee12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ee16:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800ee1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ee22:	681a      	ldr	r2, [r3, #0]
 800ee24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	781b      	ldrb	r3, [r3, #0]
 800ee30:	009b      	lsls	r3, r3, #2
 800ee32:	441a      	add	r2, r3
 800ee34:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800ee38:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ee3c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ee40:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ee44:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ee48:	b29b      	uxth	r3, r3
 800ee4a:	8013      	strh	r3, [r2, #0]
 800ee4c:	e1be      	b.n	800f1cc <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800ee4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	78db      	ldrb	r3, [r3, #3]
 800ee5a:	2b01      	cmp	r3, #1
 800ee5c:	f040 81b4 	bne.w	800f1c8 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800ee60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	699a      	ldr	r2, [r3, #24]
 800ee6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	691b      	ldr	r3, [r3, #16]
 800ee78:	429a      	cmp	r2, r3
 800ee7a:	d917      	bls.n	800eeac <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800ee7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	691b      	ldr	r3, [r3, #16]
 800ee88:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800ee8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	699a      	ldr	r2, [r3, #24]
 800ee98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee9c:	1ad2      	subs	r2, r2, r3
 800ee9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eea2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	619a      	str	r2, [r3, #24]
 800eeaa:	e00e      	b.n	800eeca <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800eeac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eeb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	699b      	ldr	r3, [r3, #24]
 800eeb8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800eebc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eec0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	2200      	movs	r2, #0
 800eec8:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800eeca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eece:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	785b      	ldrb	r3, [r3, #1]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	f040 8085 	bne.w	800efe6 <USB_EPStartXfer+0x14fc>
 800eedc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eee0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800eeea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eeee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800eef8:	b29b      	uxth	r3, r3
 800eefa:	461a      	mov	r2, r3
 800eefc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ef00:	4413      	add	r3, r2
 800ef02:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800ef06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	781b      	ldrb	r3, [r3, #0]
 800ef12:	00da      	lsls	r2, r3, #3
 800ef14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800ef18:	4413      	add	r3, r2
 800ef1a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ef1e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ef22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ef26:	881b      	ldrh	r3, [r3, #0]
 800ef28:	b29b      	uxth	r3, r3
 800ef2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ef2e:	b29a      	uxth	r2, r3
 800ef30:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ef34:	801a      	strh	r2, [r3, #0]
 800ef36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef3a:	2b3e      	cmp	r3, #62	@ 0x3e
 800ef3c:	d923      	bls.n	800ef86 <USB_EPStartXfer+0x149c>
 800ef3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef42:	095b      	lsrs	r3, r3, #5
 800ef44:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ef48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef4c:	f003 031f 	and.w	r3, r3, #31
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d104      	bne.n	800ef5e <USB_EPStartXfer+0x1474>
 800ef54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ef58:	3b01      	subs	r3, #1
 800ef5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800ef5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ef62:	881b      	ldrh	r3, [r3, #0]
 800ef64:	b29a      	uxth	r2, r3
 800ef66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ef6a:	b29b      	uxth	r3, r3
 800ef6c:	029b      	lsls	r3, r3, #10
 800ef6e:	b29b      	uxth	r3, r3
 800ef70:	4313      	orrs	r3, r2
 800ef72:	b29b      	uxth	r3, r3
 800ef74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ef78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ef7c:	b29a      	uxth	r2, r3
 800ef7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ef82:	801a      	strh	r2, [r3, #0]
 800ef84:	e060      	b.n	800f048 <USB_EPStartXfer+0x155e>
 800ef86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d10c      	bne.n	800efa8 <USB_EPStartXfer+0x14be>
 800ef8e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ef92:	881b      	ldrh	r3, [r3, #0]
 800ef94:	b29b      	uxth	r3, r3
 800ef96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ef9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ef9e:	b29a      	uxth	r2, r3
 800efa0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800efa4:	801a      	strh	r2, [r3, #0]
 800efa6:	e04f      	b.n	800f048 <USB_EPStartXfer+0x155e>
 800efa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800efac:	085b      	lsrs	r3, r3, #1
 800efae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800efb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800efb6:	f003 0301 	and.w	r3, r3, #1
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d004      	beq.n	800efc8 <USB_EPStartXfer+0x14de>
 800efbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800efc2:	3301      	adds	r3, #1
 800efc4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800efc8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800efcc:	881b      	ldrh	r3, [r3, #0]
 800efce:	b29a      	uxth	r2, r3
 800efd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800efd4:	b29b      	uxth	r3, r3
 800efd6:	029b      	lsls	r3, r3, #10
 800efd8:	b29b      	uxth	r3, r3
 800efda:	4313      	orrs	r3, r2
 800efdc:	b29a      	uxth	r2, r3
 800efde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800efe2:	801a      	strh	r2, [r3, #0]
 800efe4:	e030      	b.n	800f048 <USB_EPStartXfer+0x155e>
 800efe6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800efea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	785b      	ldrb	r3, [r3, #1]
 800eff2:	2b01      	cmp	r3, #1
 800eff4:	d128      	bne.n	800f048 <USB_EPStartXfer+0x155e>
 800eff6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800effa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800f004:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f008:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f012:	b29b      	uxth	r3, r3
 800f014:	461a      	mov	r2, r3
 800f016:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f01a:	4413      	add	r3, r2
 800f01c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800f020:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f024:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	781b      	ldrb	r3, [r3, #0]
 800f02c:	00da      	lsls	r2, r3, #3
 800f02e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f032:	4413      	add	r3, r2
 800f034:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f038:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f03c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f040:	b29a      	uxth	r2, r3
 800f042:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800f046:	801a      	strh	r2, [r3, #0]
 800f048:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f04c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f056:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f05a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	785b      	ldrb	r3, [r3, #1]
 800f062:	2b00      	cmp	r3, #0
 800f064:	f040 8085 	bne.w	800f172 <USB_EPStartXfer+0x1688>
 800f068:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f06c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800f076:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f07a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f084:	b29b      	uxth	r3, r3
 800f086:	461a      	mov	r2, r3
 800f088:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800f08c:	4413      	add	r3, r2
 800f08e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800f092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f096:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	781b      	ldrb	r3, [r3, #0]
 800f09e:	00da      	lsls	r2, r3, #3
 800f0a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800f0a4:	4413      	add	r3, r2
 800f0a6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f0aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f0ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f0b2:	881b      	ldrh	r3, [r3, #0]
 800f0b4:	b29b      	uxth	r3, r3
 800f0b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f0ba:	b29a      	uxth	r2, r3
 800f0bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f0c0:	801a      	strh	r2, [r3, #0]
 800f0c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f0c6:	2b3e      	cmp	r3, #62	@ 0x3e
 800f0c8:	d923      	bls.n	800f112 <USB_EPStartXfer+0x1628>
 800f0ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f0ce:	095b      	lsrs	r3, r3, #5
 800f0d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800f0d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f0d8:	f003 031f 	and.w	r3, r3, #31
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d104      	bne.n	800f0ea <USB_EPStartXfer+0x1600>
 800f0e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f0e4:	3b01      	subs	r3, #1
 800f0e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800f0ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f0ee:	881b      	ldrh	r3, [r3, #0]
 800f0f0:	b29a      	uxth	r2, r3
 800f0f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f0f6:	b29b      	uxth	r3, r3
 800f0f8:	029b      	lsls	r3, r3, #10
 800f0fa:	b29b      	uxth	r3, r3
 800f0fc:	4313      	orrs	r3, r2
 800f0fe:	b29b      	uxth	r3, r3
 800f100:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f104:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f108:	b29a      	uxth	r2, r3
 800f10a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f10e:	801a      	strh	r2, [r3, #0]
 800f110:	e05c      	b.n	800f1cc <USB_EPStartXfer+0x16e2>
 800f112:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f116:	2b00      	cmp	r3, #0
 800f118:	d10c      	bne.n	800f134 <USB_EPStartXfer+0x164a>
 800f11a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f11e:	881b      	ldrh	r3, [r3, #0]
 800f120:	b29b      	uxth	r3, r3
 800f122:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f126:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f12a:	b29a      	uxth	r2, r3
 800f12c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f130:	801a      	strh	r2, [r3, #0]
 800f132:	e04b      	b.n	800f1cc <USB_EPStartXfer+0x16e2>
 800f134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f138:	085b      	lsrs	r3, r3, #1
 800f13a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800f13e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f142:	f003 0301 	and.w	r3, r3, #1
 800f146:	2b00      	cmp	r3, #0
 800f148:	d004      	beq.n	800f154 <USB_EPStartXfer+0x166a>
 800f14a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f14e:	3301      	adds	r3, #1
 800f150:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800f154:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f158:	881b      	ldrh	r3, [r3, #0]
 800f15a:	b29a      	uxth	r2, r3
 800f15c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f160:	b29b      	uxth	r3, r3
 800f162:	029b      	lsls	r3, r3, #10
 800f164:	b29b      	uxth	r3, r3
 800f166:	4313      	orrs	r3, r2
 800f168:	b29a      	uxth	r2, r3
 800f16a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f16e:	801a      	strh	r2, [r3, #0]
 800f170:	e02c      	b.n	800f1cc <USB_EPStartXfer+0x16e2>
 800f172:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f176:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	785b      	ldrb	r3, [r3, #1]
 800f17e:	2b01      	cmp	r3, #1
 800f180:	d124      	bne.n	800f1cc <USB_EPStartXfer+0x16e2>
 800f182:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f186:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f190:	b29b      	uxth	r3, r3
 800f192:	461a      	mov	r2, r3
 800f194:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f198:	4413      	add	r3, r2
 800f19a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f19e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f1a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	781b      	ldrb	r3, [r3, #0]
 800f1aa:	00da      	lsls	r2, r3, #3
 800f1ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f1b0:	4413      	add	r3, r2
 800f1b2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f1b6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f1ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f1be:	b29a      	uxth	r2, r3
 800f1c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800f1c4:	801a      	strh	r2, [r3, #0]
 800f1c6:	e001      	b.n	800f1cc <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800f1c8:	2301      	movs	r3, #1
 800f1ca:	e03a      	b.n	800f242 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f1cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f1d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f1d4:	681a      	ldr	r2, [r3, #0]
 800f1d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f1da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f1de:	681b      	ldr	r3, [r3, #0]
 800f1e0:	781b      	ldrb	r3, [r3, #0]
 800f1e2:	009b      	lsls	r3, r3, #2
 800f1e4:	4413      	add	r3, r2
 800f1e6:	881b      	ldrh	r3, [r3, #0]
 800f1e8:	b29b      	uxth	r3, r3
 800f1ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f1ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f1f2:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800f1f6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f1fa:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f1fe:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800f202:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f206:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800f20a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800f20e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f212:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f216:	681a      	ldr	r2, [r3, #0]
 800f218:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f21c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f220:	681b      	ldr	r3, [r3, #0]
 800f222:	781b      	ldrb	r3, [r3, #0]
 800f224:	009b      	lsls	r3, r3, #2
 800f226:	441a      	add	r2, r3
 800f228:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f22c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f230:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f234:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f238:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f23c:	b29b      	uxth	r3, r3
 800f23e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f240:	2300      	movs	r3, #0
}
 800f242:	4618      	mov	r0, r3
 800f244:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd80      	pop	{r7, pc}

0800f24c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f24c:	b480      	push	{r7}
 800f24e:	b085      	sub	sp, #20
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
 800f254:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	785b      	ldrb	r3, [r3, #1]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d020      	beq.n	800f2a0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800f25e:	687a      	ldr	r2, [r7, #4]
 800f260:	683b      	ldr	r3, [r7, #0]
 800f262:	781b      	ldrb	r3, [r3, #0]
 800f264:	009b      	lsls	r3, r3, #2
 800f266:	4413      	add	r3, r2
 800f268:	881b      	ldrh	r3, [r3, #0]
 800f26a:	b29b      	uxth	r3, r3
 800f26c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f270:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f274:	81bb      	strh	r3, [r7, #12]
 800f276:	89bb      	ldrh	r3, [r7, #12]
 800f278:	f083 0310 	eor.w	r3, r3, #16
 800f27c:	81bb      	strh	r3, [r7, #12]
 800f27e:	687a      	ldr	r2, [r7, #4]
 800f280:	683b      	ldr	r3, [r7, #0]
 800f282:	781b      	ldrb	r3, [r3, #0]
 800f284:	009b      	lsls	r3, r3, #2
 800f286:	441a      	add	r2, r3
 800f288:	89bb      	ldrh	r3, [r7, #12]
 800f28a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f28e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f292:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f296:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f29a:	b29b      	uxth	r3, r3
 800f29c:	8013      	strh	r3, [r2, #0]
 800f29e:	e01f      	b.n	800f2e0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800f2a0:	687a      	ldr	r2, [r7, #4]
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	781b      	ldrb	r3, [r3, #0]
 800f2a6:	009b      	lsls	r3, r3, #2
 800f2a8:	4413      	add	r3, r2
 800f2aa:	881b      	ldrh	r3, [r3, #0]
 800f2ac:	b29b      	uxth	r3, r3
 800f2ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f2b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f2b6:	81fb      	strh	r3, [r7, #14]
 800f2b8:	89fb      	ldrh	r3, [r7, #14]
 800f2ba:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f2be:	81fb      	strh	r3, [r7, #14]
 800f2c0:	687a      	ldr	r2, [r7, #4]
 800f2c2:	683b      	ldr	r3, [r7, #0]
 800f2c4:	781b      	ldrb	r3, [r3, #0]
 800f2c6:	009b      	lsls	r3, r3, #2
 800f2c8:	441a      	add	r2, r3
 800f2ca:	89fb      	ldrh	r3, [r7, #14]
 800f2cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f2d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f2d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f2d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f2dc:	b29b      	uxth	r3, r3
 800f2de:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f2e0:	2300      	movs	r3, #0
}
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	3714      	adds	r7, #20
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ec:	4770      	bx	lr

0800f2ee <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f2ee:	b480      	push	{r7}
 800f2f0:	b087      	sub	sp, #28
 800f2f2:	af00      	add	r7, sp, #0
 800f2f4:	6078      	str	r0, [r7, #4]
 800f2f6:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f2f8:	683b      	ldr	r3, [r7, #0]
 800f2fa:	7b1b      	ldrb	r3, [r3, #12]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	f040 809d 	bne.w	800f43c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800f302:	683b      	ldr	r3, [r7, #0]
 800f304:	785b      	ldrb	r3, [r3, #1]
 800f306:	2b00      	cmp	r3, #0
 800f308:	d04c      	beq.n	800f3a4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f30a:	687a      	ldr	r2, [r7, #4]
 800f30c:	683b      	ldr	r3, [r7, #0]
 800f30e:	781b      	ldrb	r3, [r3, #0]
 800f310:	009b      	lsls	r3, r3, #2
 800f312:	4413      	add	r3, r2
 800f314:	881b      	ldrh	r3, [r3, #0]
 800f316:	823b      	strh	r3, [r7, #16]
 800f318:	8a3b      	ldrh	r3, [r7, #16]
 800f31a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d01b      	beq.n	800f35a <USB_EPClearStall+0x6c>
 800f322:	687a      	ldr	r2, [r7, #4]
 800f324:	683b      	ldr	r3, [r7, #0]
 800f326:	781b      	ldrb	r3, [r3, #0]
 800f328:	009b      	lsls	r3, r3, #2
 800f32a:	4413      	add	r3, r2
 800f32c:	881b      	ldrh	r3, [r3, #0]
 800f32e:	b29b      	uxth	r3, r3
 800f330:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f334:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f338:	81fb      	strh	r3, [r7, #14]
 800f33a:	687a      	ldr	r2, [r7, #4]
 800f33c:	683b      	ldr	r3, [r7, #0]
 800f33e:	781b      	ldrb	r3, [r3, #0]
 800f340:	009b      	lsls	r3, r3, #2
 800f342:	441a      	add	r2, r3
 800f344:	89fb      	ldrh	r3, [r7, #14]
 800f346:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f34a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f34e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f352:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f356:	b29b      	uxth	r3, r3
 800f358:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f35a:	683b      	ldr	r3, [r7, #0]
 800f35c:	78db      	ldrb	r3, [r3, #3]
 800f35e:	2b01      	cmp	r3, #1
 800f360:	d06c      	beq.n	800f43c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f362:	687a      	ldr	r2, [r7, #4]
 800f364:	683b      	ldr	r3, [r7, #0]
 800f366:	781b      	ldrb	r3, [r3, #0]
 800f368:	009b      	lsls	r3, r3, #2
 800f36a:	4413      	add	r3, r2
 800f36c:	881b      	ldrh	r3, [r3, #0]
 800f36e:	b29b      	uxth	r3, r3
 800f370:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f374:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f378:	81bb      	strh	r3, [r7, #12]
 800f37a:	89bb      	ldrh	r3, [r7, #12]
 800f37c:	f083 0320 	eor.w	r3, r3, #32
 800f380:	81bb      	strh	r3, [r7, #12]
 800f382:	687a      	ldr	r2, [r7, #4]
 800f384:	683b      	ldr	r3, [r7, #0]
 800f386:	781b      	ldrb	r3, [r3, #0]
 800f388:	009b      	lsls	r3, r3, #2
 800f38a:	441a      	add	r2, r3
 800f38c:	89bb      	ldrh	r3, [r7, #12]
 800f38e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f392:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f396:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f39a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f39e:	b29b      	uxth	r3, r3
 800f3a0:	8013      	strh	r3, [r2, #0]
 800f3a2:	e04b      	b.n	800f43c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f3a4:	687a      	ldr	r2, [r7, #4]
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	781b      	ldrb	r3, [r3, #0]
 800f3aa:	009b      	lsls	r3, r3, #2
 800f3ac:	4413      	add	r3, r2
 800f3ae:	881b      	ldrh	r3, [r3, #0]
 800f3b0:	82fb      	strh	r3, [r7, #22]
 800f3b2:	8afb      	ldrh	r3, [r7, #22]
 800f3b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d01b      	beq.n	800f3f4 <USB_EPClearStall+0x106>
 800f3bc:	687a      	ldr	r2, [r7, #4]
 800f3be:	683b      	ldr	r3, [r7, #0]
 800f3c0:	781b      	ldrb	r3, [r3, #0]
 800f3c2:	009b      	lsls	r3, r3, #2
 800f3c4:	4413      	add	r3, r2
 800f3c6:	881b      	ldrh	r3, [r3, #0]
 800f3c8:	b29b      	uxth	r3, r3
 800f3ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f3ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f3d2:	82bb      	strh	r3, [r7, #20]
 800f3d4:	687a      	ldr	r2, [r7, #4]
 800f3d6:	683b      	ldr	r3, [r7, #0]
 800f3d8:	781b      	ldrb	r3, [r3, #0]
 800f3da:	009b      	lsls	r3, r3, #2
 800f3dc:	441a      	add	r2, r3
 800f3de:	8abb      	ldrh	r3, [r7, #20]
 800f3e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f3e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f3e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800f3ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f3f0:	b29b      	uxth	r3, r3
 800f3f2:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f3f4:	687a      	ldr	r2, [r7, #4]
 800f3f6:	683b      	ldr	r3, [r7, #0]
 800f3f8:	781b      	ldrb	r3, [r3, #0]
 800f3fa:	009b      	lsls	r3, r3, #2
 800f3fc:	4413      	add	r3, r2
 800f3fe:	881b      	ldrh	r3, [r3, #0]
 800f400:	b29b      	uxth	r3, r3
 800f402:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f406:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f40a:	827b      	strh	r3, [r7, #18]
 800f40c:	8a7b      	ldrh	r3, [r7, #18]
 800f40e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f412:	827b      	strh	r3, [r7, #18]
 800f414:	8a7b      	ldrh	r3, [r7, #18]
 800f416:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800f41a:	827b      	strh	r3, [r7, #18]
 800f41c:	687a      	ldr	r2, [r7, #4]
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	781b      	ldrb	r3, [r3, #0]
 800f422:	009b      	lsls	r3, r3, #2
 800f424:	441a      	add	r2, r3
 800f426:	8a7b      	ldrh	r3, [r7, #18]
 800f428:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f42c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f430:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f434:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f438:	b29b      	uxth	r3, r3
 800f43a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800f43c:	2300      	movs	r3, #0
}
 800f43e:	4618      	mov	r0, r3
 800f440:	371c      	adds	r7, #28
 800f442:	46bd      	mov	sp, r7
 800f444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f448:	4770      	bx	lr

0800f44a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800f44a:	b480      	push	{r7}
 800f44c:	b083      	sub	sp, #12
 800f44e:	af00      	add	r7, sp, #0
 800f450:	6078      	str	r0, [r7, #4]
 800f452:	460b      	mov	r3, r1
 800f454:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800f456:	78fb      	ldrb	r3, [r7, #3]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d103      	bne.n	800f464 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2280      	movs	r2, #128	@ 0x80
 800f460:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800f464:	2300      	movs	r3, #0
}
 800f466:	4618      	mov	r0, r3
 800f468:	370c      	adds	r7, #12
 800f46a:	46bd      	mov	sp, r7
 800f46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f470:	4770      	bx	lr

0800f472 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800f472:	b480      	push	{r7}
 800f474:	b083      	sub	sp, #12
 800f476:	af00      	add	r7, sp, #0
 800f478:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800f480:	b29b      	uxth	r3, r3
 800f482:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f486:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f48a:	b29a      	uxth	r2, r3
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800f492:	2300      	movs	r3, #0
}
 800f494:	4618      	mov	r0, r3
 800f496:	370c      	adds	r7, #12
 800f498:	46bd      	mov	sp, r7
 800f49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49e:	4770      	bx	lr

0800f4a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800f4a0:	b480      	push	{r7}
 800f4a2:	b085      	sub	sp, #20
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800f4ae:	b29b      	uxth	r3, r3
 800f4b0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800f4b2:	68fb      	ldr	r3, [r7, #12]
}
 800f4b4:	4618      	mov	r0, r3
 800f4b6:	3714      	adds	r7, #20
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4be:	4770      	bx	lr

0800f4c0 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f4c0:	b480      	push	{r7}
 800f4c2:	b08b      	sub	sp, #44	@ 0x2c
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	60f8      	str	r0, [r7, #12]
 800f4c8:	60b9      	str	r1, [r7, #8]
 800f4ca:	4611      	mov	r1, r2
 800f4cc:	461a      	mov	r2, r3
 800f4ce:	460b      	mov	r3, r1
 800f4d0:	80fb      	strh	r3, [r7, #6]
 800f4d2:	4613      	mov	r3, r2
 800f4d4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800f4d6:	88bb      	ldrh	r3, [r7, #4]
 800f4d8:	3301      	adds	r3, #1
 800f4da:	085b      	lsrs	r3, r3, #1
 800f4dc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800f4e2:	68bb      	ldr	r3, [r7, #8]
 800f4e4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f4e6:	88fa      	ldrh	r2, [r7, #6]
 800f4e8:	697b      	ldr	r3, [r7, #20]
 800f4ea:	4413      	add	r3, r2
 800f4ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f4f0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800f4f2:	69bb      	ldr	r3, [r7, #24]
 800f4f4:	627b      	str	r3, [r7, #36]	@ 0x24
 800f4f6:	e01b      	b.n	800f530 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800f4f8:	69fb      	ldr	r3, [r7, #28]
 800f4fa:	781b      	ldrb	r3, [r3, #0]
 800f4fc:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800f4fe:	69fb      	ldr	r3, [r7, #28]
 800f500:	3301      	adds	r3, #1
 800f502:	781b      	ldrb	r3, [r3, #0]
 800f504:	021b      	lsls	r3, r3, #8
 800f506:	b21a      	sxth	r2, r3
 800f508:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f50c:	4313      	orrs	r3, r2
 800f50e:	b21b      	sxth	r3, r3
 800f510:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800f512:	6a3b      	ldr	r3, [r7, #32]
 800f514:	8a7a      	ldrh	r2, [r7, #18]
 800f516:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800f518:	6a3b      	ldr	r3, [r7, #32]
 800f51a:	3302      	adds	r3, #2
 800f51c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800f51e:	69fb      	ldr	r3, [r7, #28]
 800f520:	3301      	adds	r3, #1
 800f522:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800f524:	69fb      	ldr	r3, [r7, #28]
 800f526:	3301      	adds	r3, #1
 800f528:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800f52a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f52c:	3b01      	subs	r3, #1
 800f52e:	627b      	str	r3, [r7, #36]	@ 0x24
 800f530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f532:	2b00      	cmp	r3, #0
 800f534:	d1e0      	bne.n	800f4f8 <USB_WritePMA+0x38>
  }
}
 800f536:	bf00      	nop
 800f538:	bf00      	nop
 800f53a:	372c      	adds	r7, #44	@ 0x2c
 800f53c:	46bd      	mov	sp, r7
 800f53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f542:	4770      	bx	lr

0800f544 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800f544:	b480      	push	{r7}
 800f546:	b08b      	sub	sp, #44	@ 0x2c
 800f548:	af00      	add	r7, sp, #0
 800f54a:	60f8      	str	r0, [r7, #12]
 800f54c:	60b9      	str	r1, [r7, #8]
 800f54e:	4611      	mov	r1, r2
 800f550:	461a      	mov	r2, r3
 800f552:	460b      	mov	r3, r1
 800f554:	80fb      	strh	r3, [r7, #6]
 800f556:	4613      	mov	r3, r2
 800f558:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800f55a:	88bb      	ldrh	r3, [r7, #4]
 800f55c:	085b      	lsrs	r3, r3, #1
 800f55e:	b29b      	uxth	r3, r3
 800f560:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800f566:	68bb      	ldr	r3, [r7, #8]
 800f568:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800f56a:	88fa      	ldrh	r2, [r7, #6]
 800f56c:	697b      	ldr	r3, [r7, #20]
 800f56e:	4413      	add	r3, r2
 800f570:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f574:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800f576:	69bb      	ldr	r3, [r7, #24]
 800f578:	627b      	str	r3, [r7, #36]	@ 0x24
 800f57a:	e018      	b.n	800f5ae <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800f57c:	6a3b      	ldr	r3, [r7, #32]
 800f57e:	881b      	ldrh	r3, [r3, #0]
 800f580:	b29b      	uxth	r3, r3
 800f582:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800f584:	6a3b      	ldr	r3, [r7, #32]
 800f586:	3302      	adds	r3, #2
 800f588:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800f58a:	693b      	ldr	r3, [r7, #16]
 800f58c:	b2da      	uxtb	r2, r3
 800f58e:	69fb      	ldr	r3, [r7, #28]
 800f590:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800f592:	69fb      	ldr	r3, [r7, #28]
 800f594:	3301      	adds	r3, #1
 800f596:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800f598:	693b      	ldr	r3, [r7, #16]
 800f59a:	0a1b      	lsrs	r3, r3, #8
 800f59c:	b2da      	uxtb	r2, r3
 800f59e:	69fb      	ldr	r3, [r7, #28]
 800f5a0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800f5a2:	69fb      	ldr	r3, [r7, #28]
 800f5a4:	3301      	adds	r3, #1
 800f5a6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800f5a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5aa:	3b01      	subs	r3, #1
 800f5ac:	627b      	str	r3, [r7, #36]	@ 0x24
 800f5ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d1e3      	bne.n	800f57c <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800f5b4:	88bb      	ldrh	r3, [r7, #4]
 800f5b6:	f003 0301 	and.w	r3, r3, #1
 800f5ba:	b29b      	uxth	r3, r3
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d007      	beq.n	800f5d0 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800f5c0:	6a3b      	ldr	r3, [r7, #32]
 800f5c2:	881b      	ldrh	r3, [r3, #0]
 800f5c4:	b29b      	uxth	r3, r3
 800f5c6:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800f5c8:	693b      	ldr	r3, [r7, #16]
 800f5ca:	b2da      	uxtb	r2, r3
 800f5cc:	69fb      	ldr	r3, [r7, #28]
 800f5ce:	701a      	strb	r2, [r3, #0]
  }
}
 800f5d0:	bf00      	nop
 800f5d2:	372c      	adds	r7, #44	@ 0x2c
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5da:	4770      	bx	lr

0800f5dc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	b084      	sub	sp, #16
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]
 800f5e4:	460b      	mov	r3, r1
 800f5e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f5e8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800f5ec:	f002 fc74 	bl	8011ed8 <USBD_static_malloc>
 800f5f0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d109      	bne.n	800f60c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	32b0      	adds	r2, #176	@ 0xb0
 800f602:	2100      	movs	r1, #0
 800f604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800f608:	2302      	movs	r3, #2
 800f60a:	e0d4      	b.n	800f7b6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800f60c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800f610:	2100      	movs	r1, #0
 800f612:	68f8      	ldr	r0, [r7, #12]
 800f614:	f003 fa21 	bl	8012a5a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	32b0      	adds	r2, #176	@ 0xb0
 800f622:	68f9      	ldr	r1, [r7, #12]
 800f624:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	32b0      	adds	r2, #176	@ 0xb0
 800f632:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	7c1b      	ldrb	r3, [r3, #16]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d138      	bne.n	800f6b6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f644:	4b5e      	ldr	r3, [pc, #376]	@ (800f7c0 <USBD_CDC_Init+0x1e4>)
 800f646:	7819      	ldrb	r1, [r3, #0]
 800f648:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f64c:	2202      	movs	r2, #2
 800f64e:	6878      	ldr	r0, [r7, #4]
 800f650:	f002 fae9 	bl	8011c26 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f654:	4b5a      	ldr	r3, [pc, #360]	@ (800f7c0 <USBD_CDC_Init+0x1e4>)
 800f656:	781b      	ldrb	r3, [r3, #0]
 800f658:	f003 020f 	and.w	r2, r3, #15
 800f65c:	6879      	ldr	r1, [r7, #4]
 800f65e:	4613      	mov	r3, r2
 800f660:	009b      	lsls	r3, r3, #2
 800f662:	4413      	add	r3, r2
 800f664:	009b      	lsls	r3, r3, #2
 800f666:	440b      	add	r3, r1
 800f668:	3324      	adds	r3, #36	@ 0x24
 800f66a:	2201      	movs	r2, #1
 800f66c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f66e:	4b55      	ldr	r3, [pc, #340]	@ (800f7c4 <USBD_CDC_Init+0x1e8>)
 800f670:	7819      	ldrb	r1, [r3, #0]
 800f672:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f676:	2202      	movs	r2, #2
 800f678:	6878      	ldr	r0, [r7, #4]
 800f67a:	f002 fad4 	bl	8011c26 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f67e:	4b51      	ldr	r3, [pc, #324]	@ (800f7c4 <USBD_CDC_Init+0x1e8>)
 800f680:	781b      	ldrb	r3, [r3, #0]
 800f682:	f003 020f 	and.w	r2, r3, #15
 800f686:	6879      	ldr	r1, [r7, #4]
 800f688:	4613      	mov	r3, r2
 800f68a:	009b      	lsls	r3, r3, #2
 800f68c:	4413      	add	r3, r2
 800f68e:	009b      	lsls	r3, r3, #2
 800f690:	440b      	add	r3, r1
 800f692:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f696:	2201      	movs	r2, #1
 800f698:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f69a:	4b4b      	ldr	r3, [pc, #300]	@ (800f7c8 <USBD_CDC_Init+0x1ec>)
 800f69c:	781b      	ldrb	r3, [r3, #0]
 800f69e:	f003 020f 	and.w	r2, r3, #15
 800f6a2:	6879      	ldr	r1, [r7, #4]
 800f6a4:	4613      	mov	r3, r2
 800f6a6:	009b      	lsls	r3, r3, #2
 800f6a8:	4413      	add	r3, r2
 800f6aa:	009b      	lsls	r3, r3, #2
 800f6ac:	440b      	add	r3, r1
 800f6ae:	3326      	adds	r3, #38	@ 0x26
 800f6b0:	2210      	movs	r2, #16
 800f6b2:	801a      	strh	r2, [r3, #0]
 800f6b4:	e035      	b.n	800f722 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f6b6:	4b42      	ldr	r3, [pc, #264]	@ (800f7c0 <USBD_CDC_Init+0x1e4>)
 800f6b8:	7819      	ldrb	r1, [r3, #0]
 800f6ba:	2340      	movs	r3, #64	@ 0x40
 800f6bc:	2202      	movs	r2, #2
 800f6be:	6878      	ldr	r0, [r7, #4]
 800f6c0:	f002 fab1 	bl	8011c26 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f6c4:	4b3e      	ldr	r3, [pc, #248]	@ (800f7c0 <USBD_CDC_Init+0x1e4>)
 800f6c6:	781b      	ldrb	r3, [r3, #0]
 800f6c8:	f003 020f 	and.w	r2, r3, #15
 800f6cc:	6879      	ldr	r1, [r7, #4]
 800f6ce:	4613      	mov	r3, r2
 800f6d0:	009b      	lsls	r3, r3, #2
 800f6d2:	4413      	add	r3, r2
 800f6d4:	009b      	lsls	r3, r3, #2
 800f6d6:	440b      	add	r3, r1
 800f6d8:	3324      	adds	r3, #36	@ 0x24
 800f6da:	2201      	movs	r2, #1
 800f6dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f6de:	4b39      	ldr	r3, [pc, #228]	@ (800f7c4 <USBD_CDC_Init+0x1e8>)
 800f6e0:	7819      	ldrb	r1, [r3, #0]
 800f6e2:	2340      	movs	r3, #64	@ 0x40
 800f6e4:	2202      	movs	r2, #2
 800f6e6:	6878      	ldr	r0, [r7, #4]
 800f6e8:	f002 fa9d 	bl	8011c26 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f6ec:	4b35      	ldr	r3, [pc, #212]	@ (800f7c4 <USBD_CDC_Init+0x1e8>)
 800f6ee:	781b      	ldrb	r3, [r3, #0]
 800f6f0:	f003 020f 	and.w	r2, r3, #15
 800f6f4:	6879      	ldr	r1, [r7, #4]
 800f6f6:	4613      	mov	r3, r2
 800f6f8:	009b      	lsls	r3, r3, #2
 800f6fa:	4413      	add	r3, r2
 800f6fc:	009b      	lsls	r3, r3, #2
 800f6fe:	440b      	add	r3, r1
 800f700:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f704:	2201      	movs	r2, #1
 800f706:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f708:	4b2f      	ldr	r3, [pc, #188]	@ (800f7c8 <USBD_CDC_Init+0x1ec>)
 800f70a:	781b      	ldrb	r3, [r3, #0]
 800f70c:	f003 020f 	and.w	r2, r3, #15
 800f710:	6879      	ldr	r1, [r7, #4]
 800f712:	4613      	mov	r3, r2
 800f714:	009b      	lsls	r3, r3, #2
 800f716:	4413      	add	r3, r2
 800f718:	009b      	lsls	r3, r3, #2
 800f71a:	440b      	add	r3, r1
 800f71c:	3326      	adds	r3, #38	@ 0x26
 800f71e:	2210      	movs	r2, #16
 800f720:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f722:	4b29      	ldr	r3, [pc, #164]	@ (800f7c8 <USBD_CDC_Init+0x1ec>)
 800f724:	7819      	ldrb	r1, [r3, #0]
 800f726:	2308      	movs	r3, #8
 800f728:	2203      	movs	r2, #3
 800f72a:	6878      	ldr	r0, [r7, #4]
 800f72c:	f002 fa7b 	bl	8011c26 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800f730:	4b25      	ldr	r3, [pc, #148]	@ (800f7c8 <USBD_CDC_Init+0x1ec>)
 800f732:	781b      	ldrb	r3, [r3, #0]
 800f734:	f003 020f 	and.w	r2, r3, #15
 800f738:	6879      	ldr	r1, [r7, #4]
 800f73a:	4613      	mov	r3, r2
 800f73c:	009b      	lsls	r3, r3, #2
 800f73e:	4413      	add	r3, r2
 800f740:	009b      	lsls	r3, r3, #2
 800f742:	440b      	add	r3, r1
 800f744:	3324      	adds	r3, #36	@ 0x24
 800f746:	2201      	movs	r2, #1
 800f748:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	2200      	movs	r2, #0
 800f74e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f758:	687a      	ldr	r2, [r7, #4]
 800f75a:	33b0      	adds	r3, #176	@ 0xb0
 800f75c:	009b      	lsls	r3, r3, #2
 800f75e:	4413      	add	r3, r2
 800f760:	685b      	ldr	r3, [r3, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	2200      	movs	r2, #0
 800f76a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	2200      	movs	r2, #0
 800f772:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d101      	bne.n	800f784 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800f780:	2302      	movs	r3, #2
 800f782:	e018      	b.n	800f7b6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	7c1b      	ldrb	r3, [r3, #16]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d10a      	bne.n	800f7a2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f78c:	4b0d      	ldr	r3, [pc, #52]	@ (800f7c4 <USBD_CDC_Init+0x1e8>)
 800f78e:	7819      	ldrb	r1, [r3, #0]
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f796:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f79a:	6878      	ldr	r0, [r7, #4]
 800f79c:	f002 fb32 	bl	8011e04 <USBD_LL_PrepareReceive>
 800f7a0:	e008      	b.n	800f7b4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f7a2:	4b08      	ldr	r3, [pc, #32]	@ (800f7c4 <USBD_CDC_Init+0x1e8>)
 800f7a4:	7819      	ldrb	r1, [r3, #0]
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f7ac:	2340      	movs	r3, #64	@ 0x40
 800f7ae:	6878      	ldr	r0, [r7, #4]
 800f7b0:	f002 fb28 	bl	8011e04 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f7b4:	2300      	movs	r3, #0
}
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	3710      	adds	r7, #16
 800f7ba:	46bd      	mov	sp, r7
 800f7bc:	bd80      	pop	{r7, pc}
 800f7be:	bf00      	nop
 800f7c0:	200000bb 	.word	0x200000bb
 800f7c4:	200000bc 	.word	0x200000bc
 800f7c8:	200000bd 	.word	0x200000bd

0800f7cc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	b082      	sub	sp, #8
 800f7d0:	af00      	add	r7, sp, #0
 800f7d2:	6078      	str	r0, [r7, #4]
 800f7d4:	460b      	mov	r3, r1
 800f7d6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800f7d8:	4b3a      	ldr	r3, [pc, #232]	@ (800f8c4 <USBD_CDC_DeInit+0xf8>)
 800f7da:	781b      	ldrb	r3, [r3, #0]
 800f7dc:	4619      	mov	r1, r3
 800f7de:	6878      	ldr	r0, [r7, #4]
 800f7e0:	f002 fa47 	bl	8011c72 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800f7e4:	4b37      	ldr	r3, [pc, #220]	@ (800f8c4 <USBD_CDC_DeInit+0xf8>)
 800f7e6:	781b      	ldrb	r3, [r3, #0]
 800f7e8:	f003 020f 	and.w	r2, r3, #15
 800f7ec:	6879      	ldr	r1, [r7, #4]
 800f7ee:	4613      	mov	r3, r2
 800f7f0:	009b      	lsls	r3, r3, #2
 800f7f2:	4413      	add	r3, r2
 800f7f4:	009b      	lsls	r3, r3, #2
 800f7f6:	440b      	add	r3, r1
 800f7f8:	3324      	adds	r3, #36	@ 0x24
 800f7fa:	2200      	movs	r2, #0
 800f7fc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800f7fe:	4b32      	ldr	r3, [pc, #200]	@ (800f8c8 <USBD_CDC_DeInit+0xfc>)
 800f800:	781b      	ldrb	r3, [r3, #0]
 800f802:	4619      	mov	r1, r3
 800f804:	6878      	ldr	r0, [r7, #4]
 800f806:	f002 fa34 	bl	8011c72 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800f80a:	4b2f      	ldr	r3, [pc, #188]	@ (800f8c8 <USBD_CDC_DeInit+0xfc>)
 800f80c:	781b      	ldrb	r3, [r3, #0]
 800f80e:	f003 020f 	and.w	r2, r3, #15
 800f812:	6879      	ldr	r1, [r7, #4]
 800f814:	4613      	mov	r3, r2
 800f816:	009b      	lsls	r3, r3, #2
 800f818:	4413      	add	r3, r2
 800f81a:	009b      	lsls	r3, r3, #2
 800f81c:	440b      	add	r3, r1
 800f81e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f822:	2200      	movs	r2, #0
 800f824:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800f826:	4b29      	ldr	r3, [pc, #164]	@ (800f8cc <USBD_CDC_DeInit+0x100>)
 800f828:	781b      	ldrb	r3, [r3, #0]
 800f82a:	4619      	mov	r1, r3
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	f002 fa20 	bl	8011c72 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800f832:	4b26      	ldr	r3, [pc, #152]	@ (800f8cc <USBD_CDC_DeInit+0x100>)
 800f834:	781b      	ldrb	r3, [r3, #0]
 800f836:	f003 020f 	and.w	r2, r3, #15
 800f83a:	6879      	ldr	r1, [r7, #4]
 800f83c:	4613      	mov	r3, r2
 800f83e:	009b      	lsls	r3, r3, #2
 800f840:	4413      	add	r3, r2
 800f842:	009b      	lsls	r3, r3, #2
 800f844:	440b      	add	r3, r1
 800f846:	3324      	adds	r3, #36	@ 0x24
 800f848:	2200      	movs	r2, #0
 800f84a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800f84c:	4b1f      	ldr	r3, [pc, #124]	@ (800f8cc <USBD_CDC_DeInit+0x100>)
 800f84e:	781b      	ldrb	r3, [r3, #0]
 800f850:	f003 020f 	and.w	r2, r3, #15
 800f854:	6879      	ldr	r1, [r7, #4]
 800f856:	4613      	mov	r3, r2
 800f858:	009b      	lsls	r3, r3, #2
 800f85a:	4413      	add	r3, r2
 800f85c:	009b      	lsls	r3, r3, #2
 800f85e:	440b      	add	r3, r1
 800f860:	3326      	adds	r3, #38	@ 0x26
 800f862:	2200      	movs	r2, #0
 800f864:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	32b0      	adds	r2, #176	@ 0xb0
 800f870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d01f      	beq.n	800f8b8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f87e:	687a      	ldr	r2, [r7, #4]
 800f880:	33b0      	adds	r3, #176	@ 0xb0
 800f882:	009b      	lsls	r3, r3, #2
 800f884:	4413      	add	r3, r2
 800f886:	685b      	ldr	r3, [r3, #4]
 800f888:	685b      	ldr	r3, [r3, #4]
 800f88a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	32b0      	adds	r2, #176	@ 0xb0
 800f896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f89a:	4618      	mov	r0, r3
 800f89c:	f002 fb2a 	bl	8011ef4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	32b0      	adds	r2, #176	@ 0xb0
 800f8aa:	2100      	movs	r1, #0
 800f8ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f8b8:	2300      	movs	r3, #0
}
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	3708      	adds	r7, #8
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	bd80      	pop	{r7, pc}
 800f8c2:	bf00      	nop
 800f8c4:	200000bb 	.word	0x200000bb
 800f8c8:	200000bc 	.word	0x200000bc
 800f8cc:	200000bd 	.word	0x200000bd

0800f8d0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b086      	sub	sp, #24
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	6078      	str	r0, [r7, #4]
 800f8d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	32b0      	adds	r2, #176	@ 0xb0
 800f8e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8e8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f8f6:	693b      	ldr	r3, [r7, #16]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d101      	bne.n	800f900 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800f8fc:	2303      	movs	r3, #3
 800f8fe:	e0bf      	b.n	800fa80 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f900:	683b      	ldr	r3, [r7, #0]
 800f902:	781b      	ldrb	r3, [r3, #0]
 800f904:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d050      	beq.n	800f9ae <USBD_CDC_Setup+0xde>
 800f90c:	2b20      	cmp	r3, #32
 800f90e:	f040 80af 	bne.w	800fa70 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	88db      	ldrh	r3, [r3, #6]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d03a      	beq.n	800f990 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800f91a:	683b      	ldr	r3, [r7, #0]
 800f91c:	781b      	ldrb	r3, [r3, #0]
 800f91e:	b25b      	sxtb	r3, r3
 800f920:	2b00      	cmp	r3, #0
 800f922:	da1b      	bge.n	800f95c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f92a:	687a      	ldr	r2, [r7, #4]
 800f92c:	33b0      	adds	r3, #176	@ 0xb0
 800f92e:	009b      	lsls	r3, r3, #2
 800f930:	4413      	add	r3, r2
 800f932:	685b      	ldr	r3, [r3, #4]
 800f934:	689b      	ldr	r3, [r3, #8]
 800f936:	683a      	ldr	r2, [r7, #0]
 800f938:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800f93a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f93c:	683a      	ldr	r2, [r7, #0]
 800f93e:	88d2      	ldrh	r2, [r2, #6]
 800f940:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	88db      	ldrh	r3, [r3, #6]
 800f946:	2b07      	cmp	r3, #7
 800f948:	bf28      	it	cs
 800f94a:	2307      	movcs	r3, #7
 800f94c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f94e:	693b      	ldr	r3, [r7, #16]
 800f950:	89fa      	ldrh	r2, [r7, #14]
 800f952:	4619      	mov	r1, r3
 800f954:	6878      	ldr	r0, [r7, #4]
 800f956:	f001 fd47 	bl	80113e8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800f95a:	e090      	b.n	800fa7e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800f95c:	683b      	ldr	r3, [r7, #0]
 800f95e:	785a      	ldrb	r2, [r3, #1]
 800f960:	693b      	ldr	r3, [r7, #16]
 800f962:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800f966:	683b      	ldr	r3, [r7, #0]
 800f968:	88db      	ldrh	r3, [r3, #6]
 800f96a:	2b3f      	cmp	r3, #63	@ 0x3f
 800f96c:	d803      	bhi.n	800f976 <USBD_CDC_Setup+0xa6>
 800f96e:	683b      	ldr	r3, [r7, #0]
 800f970:	88db      	ldrh	r3, [r3, #6]
 800f972:	b2da      	uxtb	r2, r3
 800f974:	e000      	b.n	800f978 <USBD_CDC_Setup+0xa8>
 800f976:	2240      	movs	r2, #64	@ 0x40
 800f978:	693b      	ldr	r3, [r7, #16]
 800f97a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800f97e:	6939      	ldr	r1, [r7, #16]
 800f980:	693b      	ldr	r3, [r7, #16]
 800f982:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800f986:	461a      	mov	r2, r3
 800f988:	6878      	ldr	r0, [r7, #4]
 800f98a:	f001 fd59 	bl	8011440 <USBD_CtlPrepareRx>
      break;
 800f98e:	e076      	b.n	800fa7e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f996:	687a      	ldr	r2, [r7, #4]
 800f998:	33b0      	adds	r3, #176	@ 0xb0
 800f99a:	009b      	lsls	r3, r3, #2
 800f99c:	4413      	add	r3, r2
 800f99e:	685b      	ldr	r3, [r3, #4]
 800f9a0:	689b      	ldr	r3, [r3, #8]
 800f9a2:	683a      	ldr	r2, [r7, #0]
 800f9a4:	7850      	ldrb	r0, [r2, #1]
 800f9a6:	2200      	movs	r2, #0
 800f9a8:	6839      	ldr	r1, [r7, #0]
 800f9aa:	4798      	blx	r3
      break;
 800f9ac:	e067      	b.n	800fa7e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f9ae:	683b      	ldr	r3, [r7, #0]
 800f9b0:	785b      	ldrb	r3, [r3, #1]
 800f9b2:	2b0b      	cmp	r3, #11
 800f9b4:	d851      	bhi.n	800fa5a <USBD_CDC_Setup+0x18a>
 800f9b6:	a201      	add	r2, pc, #4	@ (adr r2, 800f9bc <USBD_CDC_Setup+0xec>)
 800f9b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9bc:	0800f9ed 	.word	0x0800f9ed
 800f9c0:	0800fa69 	.word	0x0800fa69
 800f9c4:	0800fa5b 	.word	0x0800fa5b
 800f9c8:	0800fa5b 	.word	0x0800fa5b
 800f9cc:	0800fa5b 	.word	0x0800fa5b
 800f9d0:	0800fa5b 	.word	0x0800fa5b
 800f9d4:	0800fa5b 	.word	0x0800fa5b
 800f9d8:	0800fa5b 	.word	0x0800fa5b
 800f9dc:	0800fa5b 	.word	0x0800fa5b
 800f9e0:	0800fa5b 	.word	0x0800fa5b
 800f9e4:	0800fa17 	.word	0x0800fa17
 800f9e8:	0800fa41 	.word	0x0800fa41
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f9f2:	b2db      	uxtb	r3, r3
 800f9f4:	2b03      	cmp	r3, #3
 800f9f6:	d107      	bne.n	800fa08 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f9f8:	f107 030a 	add.w	r3, r7, #10
 800f9fc:	2202      	movs	r2, #2
 800f9fe:	4619      	mov	r1, r3
 800fa00:	6878      	ldr	r0, [r7, #4]
 800fa02:	f001 fcf1 	bl	80113e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800fa06:	e032      	b.n	800fa6e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800fa08:	6839      	ldr	r1, [r7, #0]
 800fa0a:	6878      	ldr	r0, [r7, #4]
 800fa0c:	f001 fc6f 	bl	80112ee <USBD_CtlError>
            ret = USBD_FAIL;
 800fa10:	2303      	movs	r3, #3
 800fa12:	75fb      	strb	r3, [r7, #23]
          break;
 800fa14:	e02b      	b.n	800fa6e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fa1c:	b2db      	uxtb	r3, r3
 800fa1e:	2b03      	cmp	r3, #3
 800fa20:	d107      	bne.n	800fa32 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800fa22:	f107 030d 	add.w	r3, r7, #13
 800fa26:	2201      	movs	r2, #1
 800fa28:	4619      	mov	r1, r3
 800fa2a:	6878      	ldr	r0, [r7, #4]
 800fa2c:	f001 fcdc 	bl	80113e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800fa30:	e01d      	b.n	800fa6e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800fa32:	6839      	ldr	r1, [r7, #0]
 800fa34:	6878      	ldr	r0, [r7, #4]
 800fa36:	f001 fc5a 	bl	80112ee <USBD_CtlError>
            ret = USBD_FAIL;
 800fa3a:	2303      	movs	r3, #3
 800fa3c:	75fb      	strb	r3, [r7, #23]
          break;
 800fa3e:	e016      	b.n	800fa6e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fa46:	b2db      	uxtb	r3, r3
 800fa48:	2b03      	cmp	r3, #3
 800fa4a:	d00f      	beq.n	800fa6c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800fa4c:	6839      	ldr	r1, [r7, #0]
 800fa4e:	6878      	ldr	r0, [r7, #4]
 800fa50:	f001 fc4d 	bl	80112ee <USBD_CtlError>
            ret = USBD_FAIL;
 800fa54:	2303      	movs	r3, #3
 800fa56:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800fa58:	e008      	b.n	800fa6c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800fa5a:	6839      	ldr	r1, [r7, #0]
 800fa5c:	6878      	ldr	r0, [r7, #4]
 800fa5e:	f001 fc46 	bl	80112ee <USBD_CtlError>
          ret = USBD_FAIL;
 800fa62:	2303      	movs	r3, #3
 800fa64:	75fb      	strb	r3, [r7, #23]
          break;
 800fa66:	e002      	b.n	800fa6e <USBD_CDC_Setup+0x19e>
          break;
 800fa68:	bf00      	nop
 800fa6a:	e008      	b.n	800fa7e <USBD_CDC_Setup+0x1ae>
          break;
 800fa6c:	bf00      	nop
      }
      break;
 800fa6e:	e006      	b.n	800fa7e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800fa70:	6839      	ldr	r1, [r7, #0]
 800fa72:	6878      	ldr	r0, [r7, #4]
 800fa74:	f001 fc3b 	bl	80112ee <USBD_CtlError>
      ret = USBD_FAIL;
 800fa78:	2303      	movs	r3, #3
 800fa7a:	75fb      	strb	r3, [r7, #23]
      break;
 800fa7c:	bf00      	nop
  }

  return (uint8_t)ret;
 800fa7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa80:	4618      	mov	r0, r3
 800fa82:	3718      	adds	r7, #24
 800fa84:	46bd      	mov	sp, r7
 800fa86:	bd80      	pop	{r7, pc}

0800fa88 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b084      	sub	sp, #16
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
 800fa90:	460b      	mov	r3, r1
 800fa92:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fa9a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	32b0      	adds	r2, #176	@ 0xb0
 800faa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d101      	bne.n	800fab2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800faae:	2303      	movs	r3, #3
 800fab0:	e065      	b.n	800fb7e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	32b0      	adds	r2, #176	@ 0xb0
 800fabc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fac0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800fac2:	78fb      	ldrb	r3, [r7, #3]
 800fac4:	f003 020f 	and.w	r2, r3, #15
 800fac8:	6879      	ldr	r1, [r7, #4]
 800faca:	4613      	mov	r3, r2
 800facc:	009b      	lsls	r3, r3, #2
 800face:	4413      	add	r3, r2
 800fad0:	009b      	lsls	r3, r3, #2
 800fad2:	440b      	add	r3, r1
 800fad4:	3318      	adds	r3, #24
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d02f      	beq.n	800fb3c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800fadc:	78fb      	ldrb	r3, [r7, #3]
 800fade:	f003 020f 	and.w	r2, r3, #15
 800fae2:	6879      	ldr	r1, [r7, #4]
 800fae4:	4613      	mov	r3, r2
 800fae6:	009b      	lsls	r3, r3, #2
 800fae8:	4413      	add	r3, r2
 800faea:	009b      	lsls	r3, r3, #2
 800faec:	440b      	add	r3, r1
 800faee:	3318      	adds	r3, #24
 800faf0:	681a      	ldr	r2, [r3, #0]
 800faf2:	78fb      	ldrb	r3, [r7, #3]
 800faf4:	f003 010f 	and.w	r1, r3, #15
 800faf8:	68f8      	ldr	r0, [r7, #12]
 800fafa:	460b      	mov	r3, r1
 800fafc:	009b      	lsls	r3, r3, #2
 800fafe:	440b      	add	r3, r1
 800fb00:	00db      	lsls	r3, r3, #3
 800fb02:	4403      	add	r3, r0
 800fb04:	3320      	adds	r3, #32
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	fbb2 f1f3 	udiv	r1, r2, r3
 800fb0c:	fb01 f303 	mul.w	r3, r1, r3
 800fb10:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d112      	bne.n	800fb3c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800fb16:	78fb      	ldrb	r3, [r7, #3]
 800fb18:	f003 020f 	and.w	r2, r3, #15
 800fb1c:	6879      	ldr	r1, [r7, #4]
 800fb1e:	4613      	mov	r3, r2
 800fb20:	009b      	lsls	r3, r3, #2
 800fb22:	4413      	add	r3, r2
 800fb24:	009b      	lsls	r3, r3, #2
 800fb26:	440b      	add	r3, r1
 800fb28:	3318      	adds	r3, #24
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800fb2e:	78f9      	ldrb	r1, [r7, #3]
 800fb30:	2300      	movs	r3, #0
 800fb32:	2200      	movs	r2, #0
 800fb34:	6878      	ldr	r0, [r7, #4]
 800fb36:	f002 f944 	bl	8011dc2 <USBD_LL_Transmit>
 800fb3a:	e01f      	b.n	800fb7c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800fb3c:	68bb      	ldr	r3, [r7, #8]
 800fb3e:	2200      	movs	r2, #0
 800fb40:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fb4a:	687a      	ldr	r2, [r7, #4]
 800fb4c:	33b0      	adds	r3, #176	@ 0xb0
 800fb4e:	009b      	lsls	r3, r3, #2
 800fb50:	4413      	add	r3, r2
 800fb52:	685b      	ldr	r3, [r3, #4]
 800fb54:	691b      	ldr	r3, [r3, #16]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d010      	beq.n	800fb7c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fb60:	687a      	ldr	r2, [r7, #4]
 800fb62:	33b0      	adds	r3, #176	@ 0xb0
 800fb64:	009b      	lsls	r3, r3, #2
 800fb66:	4413      	add	r3, r2
 800fb68:	685b      	ldr	r3, [r3, #4]
 800fb6a:	691b      	ldr	r3, [r3, #16]
 800fb6c:	68ba      	ldr	r2, [r7, #8]
 800fb6e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800fb72:	68ba      	ldr	r2, [r7, #8]
 800fb74:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800fb78:	78fa      	ldrb	r2, [r7, #3]
 800fb7a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800fb7c:	2300      	movs	r3, #0
}
 800fb7e:	4618      	mov	r0, r3
 800fb80:	3710      	adds	r7, #16
 800fb82:	46bd      	mov	sp, r7
 800fb84:	bd80      	pop	{r7, pc}

0800fb86 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fb86:	b580      	push	{r7, lr}
 800fb88:	b084      	sub	sp, #16
 800fb8a:	af00      	add	r7, sp, #0
 800fb8c:	6078      	str	r0, [r7, #4]
 800fb8e:	460b      	mov	r3, r1
 800fb90:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	32b0      	adds	r2, #176	@ 0xb0
 800fb9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fba0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	32b0      	adds	r2, #176	@ 0xb0
 800fbac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d101      	bne.n	800fbb8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800fbb4:	2303      	movs	r3, #3
 800fbb6:	e01a      	b.n	800fbee <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800fbb8:	78fb      	ldrb	r3, [r7, #3]
 800fbba:	4619      	mov	r1, r3
 800fbbc:	6878      	ldr	r0, [r7, #4]
 800fbbe:	f002 f942 	bl	8011e46 <USBD_LL_GetRxDataSize>
 800fbc2:	4602      	mov	r2, r0
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fbd0:	687a      	ldr	r2, [r7, #4]
 800fbd2:	33b0      	adds	r3, #176	@ 0xb0
 800fbd4:	009b      	lsls	r3, r3, #2
 800fbd6:	4413      	add	r3, r2
 800fbd8:	685b      	ldr	r3, [r3, #4]
 800fbda:	68db      	ldr	r3, [r3, #12]
 800fbdc:	68fa      	ldr	r2, [r7, #12]
 800fbde:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800fbe2:	68fa      	ldr	r2, [r7, #12]
 800fbe4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800fbe8:	4611      	mov	r1, r2
 800fbea:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800fbec:	2300      	movs	r3, #0
}
 800fbee:	4618      	mov	r0, r3
 800fbf0:	3710      	adds	r7, #16
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	bd80      	pop	{r7, pc}

0800fbf6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800fbf6:	b580      	push	{r7, lr}
 800fbf8:	b084      	sub	sp, #16
 800fbfa:	af00      	add	r7, sp, #0
 800fbfc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	32b0      	adds	r2, #176	@ 0xb0
 800fc08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc0c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d101      	bne.n	800fc18 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800fc14:	2303      	movs	r3, #3
 800fc16:	e024      	b.n	800fc62 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fc1e:	687a      	ldr	r2, [r7, #4]
 800fc20:	33b0      	adds	r3, #176	@ 0xb0
 800fc22:	009b      	lsls	r3, r3, #2
 800fc24:	4413      	add	r3, r2
 800fc26:	685b      	ldr	r3, [r3, #4]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d019      	beq.n	800fc60 <USBD_CDC_EP0_RxReady+0x6a>
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800fc32:	2bff      	cmp	r3, #255	@ 0xff
 800fc34:	d014      	beq.n	800fc60 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fc3c:	687a      	ldr	r2, [r7, #4]
 800fc3e:	33b0      	adds	r3, #176	@ 0xb0
 800fc40:	009b      	lsls	r3, r3, #2
 800fc42:	4413      	add	r3, r2
 800fc44:	685b      	ldr	r3, [r3, #4]
 800fc46:	689b      	ldr	r3, [r3, #8]
 800fc48:	68fa      	ldr	r2, [r7, #12]
 800fc4a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800fc4e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800fc50:	68fa      	ldr	r2, [r7, #12]
 800fc52:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800fc56:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	22ff      	movs	r2, #255	@ 0xff
 800fc5c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800fc60:	2300      	movs	r3, #0
}
 800fc62:	4618      	mov	r0, r3
 800fc64:	3710      	adds	r7, #16
 800fc66:	46bd      	mov	sp, r7
 800fc68:	bd80      	pop	{r7, pc}
	...

0800fc6c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800fc6c:	b580      	push	{r7, lr}
 800fc6e:	b086      	sub	sp, #24
 800fc70:	af00      	add	r7, sp, #0
 800fc72:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800fc74:	2182      	movs	r1, #130	@ 0x82
 800fc76:	4818      	ldr	r0, [pc, #96]	@ (800fcd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800fc78:	f000 fcd9 	bl	801062e <USBD_GetEpDesc>
 800fc7c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800fc7e:	2101      	movs	r1, #1
 800fc80:	4815      	ldr	r0, [pc, #84]	@ (800fcd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800fc82:	f000 fcd4 	bl	801062e <USBD_GetEpDesc>
 800fc86:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800fc88:	2181      	movs	r1, #129	@ 0x81
 800fc8a:	4813      	ldr	r0, [pc, #76]	@ (800fcd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800fc8c:	f000 fccf 	bl	801062e <USBD_GetEpDesc>
 800fc90:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800fc92:	697b      	ldr	r3, [r7, #20]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d002      	beq.n	800fc9e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800fc98:	697b      	ldr	r3, [r7, #20]
 800fc9a:	2210      	movs	r2, #16
 800fc9c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fc9e:	693b      	ldr	r3, [r7, #16]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d006      	beq.n	800fcb2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fca4:	693b      	ldr	r3, [r7, #16]
 800fca6:	2200      	movs	r2, #0
 800fca8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fcac:	711a      	strb	r2, [r3, #4]
 800fcae:	2200      	movs	r2, #0
 800fcb0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d006      	beq.n	800fcc6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fcb8:	68fb      	ldr	r3, [r7, #12]
 800fcba:	2200      	movs	r2, #0
 800fcbc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fcc0:	711a      	strb	r2, [r3, #4]
 800fcc2:	2200      	movs	r2, #0
 800fcc4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	2243      	movs	r2, #67	@ 0x43
 800fcca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800fccc:	4b02      	ldr	r3, [pc, #8]	@ (800fcd8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800fcce:	4618      	mov	r0, r3
 800fcd0:	3718      	adds	r7, #24
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bd80      	pop	{r7, pc}
 800fcd6:	bf00      	nop
 800fcd8:	20000078 	.word	0x20000078

0800fcdc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800fcdc:	b580      	push	{r7, lr}
 800fcde:	b086      	sub	sp, #24
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800fce4:	2182      	movs	r1, #130	@ 0x82
 800fce6:	4818      	ldr	r0, [pc, #96]	@ (800fd48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800fce8:	f000 fca1 	bl	801062e <USBD_GetEpDesc>
 800fcec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800fcee:	2101      	movs	r1, #1
 800fcf0:	4815      	ldr	r0, [pc, #84]	@ (800fd48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800fcf2:	f000 fc9c 	bl	801062e <USBD_GetEpDesc>
 800fcf6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800fcf8:	2181      	movs	r1, #129	@ 0x81
 800fcfa:	4813      	ldr	r0, [pc, #76]	@ (800fd48 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800fcfc:	f000 fc97 	bl	801062e <USBD_GetEpDesc>
 800fd00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800fd02:	697b      	ldr	r3, [r7, #20]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d002      	beq.n	800fd0e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800fd08:	697b      	ldr	r3, [r7, #20]
 800fd0a:	2210      	movs	r2, #16
 800fd0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fd0e:	693b      	ldr	r3, [r7, #16]
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d006      	beq.n	800fd22 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800fd14:	693b      	ldr	r3, [r7, #16]
 800fd16:	2200      	movs	r2, #0
 800fd18:	711a      	strb	r2, [r3, #4]
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	f042 0202 	orr.w	r2, r2, #2
 800fd20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d006      	beq.n	800fd36 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	711a      	strb	r2, [r3, #4]
 800fd2e:	2200      	movs	r2, #0
 800fd30:	f042 0202 	orr.w	r2, r2, #2
 800fd34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	2243      	movs	r2, #67	@ 0x43
 800fd3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800fd3c:	4b02      	ldr	r3, [pc, #8]	@ (800fd48 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800fd3e:	4618      	mov	r0, r3
 800fd40:	3718      	adds	r7, #24
 800fd42:	46bd      	mov	sp, r7
 800fd44:	bd80      	pop	{r7, pc}
 800fd46:	bf00      	nop
 800fd48:	20000078 	.word	0x20000078

0800fd4c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b086      	sub	sp, #24
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800fd54:	2182      	movs	r1, #130	@ 0x82
 800fd56:	4818      	ldr	r0, [pc, #96]	@ (800fdb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fd58:	f000 fc69 	bl	801062e <USBD_GetEpDesc>
 800fd5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800fd5e:	2101      	movs	r1, #1
 800fd60:	4815      	ldr	r0, [pc, #84]	@ (800fdb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fd62:	f000 fc64 	bl	801062e <USBD_GetEpDesc>
 800fd66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800fd68:	2181      	movs	r1, #129	@ 0x81
 800fd6a:	4813      	ldr	r0, [pc, #76]	@ (800fdb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fd6c:	f000 fc5f 	bl	801062e <USBD_GetEpDesc>
 800fd70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800fd72:	697b      	ldr	r3, [r7, #20]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d002      	beq.n	800fd7e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800fd78:	697b      	ldr	r3, [r7, #20]
 800fd7a:	2210      	movs	r2, #16
 800fd7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fd7e:	693b      	ldr	r3, [r7, #16]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d006      	beq.n	800fd92 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fd84:	693b      	ldr	r3, [r7, #16]
 800fd86:	2200      	movs	r2, #0
 800fd88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fd8c:	711a      	strb	r2, [r3, #4]
 800fd8e:	2200      	movs	r2, #0
 800fd90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d006      	beq.n	800fda6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	2200      	movs	r2, #0
 800fd9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fda0:	711a      	strb	r2, [r3, #4]
 800fda2:	2200      	movs	r2, #0
 800fda4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	2243      	movs	r2, #67	@ 0x43
 800fdaa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800fdac:	4b02      	ldr	r3, [pc, #8]	@ (800fdb8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800fdae:	4618      	mov	r0, r3
 800fdb0:	3718      	adds	r7, #24
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	bd80      	pop	{r7, pc}
 800fdb6:	bf00      	nop
 800fdb8:	20000078 	.word	0x20000078

0800fdbc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800fdbc:	b480      	push	{r7}
 800fdbe:	b083      	sub	sp, #12
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	220a      	movs	r2, #10
 800fdc8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800fdca:	4b03      	ldr	r3, [pc, #12]	@ (800fdd8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800fdcc:	4618      	mov	r0, r3
 800fdce:	370c      	adds	r7, #12
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd6:	4770      	bx	lr
 800fdd8:	20000034 	.word	0x20000034

0800fddc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800fddc:	b480      	push	{r7}
 800fdde:	b083      	sub	sp, #12
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	6078      	str	r0, [r7, #4]
 800fde4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800fde6:	683b      	ldr	r3, [r7, #0]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d101      	bne.n	800fdf0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800fdec:	2303      	movs	r3, #3
 800fdee:	e009      	b.n	800fe04 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fdf6:	687a      	ldr	r2, [r7, #4]
 800fdf8:	33b0      	adds	r3, #176	@ 0xb0
 800fdfa:	009b      	lsls	r3, r3, #2
 800fdfc:	4413      	add	r3, r2
 800fdfe:	683a      	ldr	r2, [r7, #0]
 800fe00:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800fe02:	2300      	movs	r3, #0
}
 800fe04:	4618      	mov	r0, r3
 800fe06:	370c      	adds	r7, #12
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0e:	4770      	bx	lr

0800fe10 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800fe10:	b480      	push	{r7}
 800fe12:	b087      	sub	sp, #28
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	60f8      	str	r0, [r7, #12]
 800fe18:	60b9      	str	r1, [r7, #8]
 800fe1a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	32b0      	adds	r2, #176	@ 0xb0
 800fe26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe2a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800fe2c:	697b      	ldr	r3, [r7, #20]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d101      	bne.n	800fe36 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800fe32:	2303      	movs	r3, #3
 800fe34:	e008      	b.n	800fe48 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800fe36:	697b      	ldr	r3, [r7, #20]
 800fe38:	68ba      	ldr	r2, [r7, #8]
 800fe3a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800fe3e:	697b      	ldr	r3, [r7, #20]
 800fe40:	687a      	ldr	r2, [r7, #4]
 800fe42:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800fe46:	2300      	movs	r3, #0
}
 800fe48:	4618      	mov	r0, r3
 800fe4a:	371c      	adds	r7, #28
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe52:	4770      	bx	lr

0800fe54 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800fe54:	b480      	push	{r7}
 800fe56:	b085      	sub	sp, #20
 800fe58:	af00      	add	r7, sp, #0
 800fe5a:	6078      	str	r0, [r7, #4]
 800fe5c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	32b0      	adds	r2, #176	@ 0xb0
 800fe68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe6c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d101      	bne.n	800fe78 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800fe74:	2303      	movs	r3, #3
 800fe76:	e004      	b.n	800fe82 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	683a      	ldr	r2, [r7, #0]
 800fe7c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800fe80:	2300      	movs	r3, #0
}
 800fe82:	4618      	mov	r0, r3
 800fe84:	3714      	adds	r7, #20
 800fe86:	46bd      	mov	sp, r7
 800fe88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8c:	4770      	bx	lr
	...

0800fe90 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b084      	sub	sp, #16
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	32b0      	adds	r2, #176	@ 0xb0
 800fea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fea6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800fea8:	2301      	movs	r3, #1
 800feaa:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800feac:	68bb      	ldr	r3, [r7, #8]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d101      	bne.n	800feb6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800feb2:	2303      	movs	r3, #3
 800feb4:	e025      	b.n	800ff02 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800feb6:	68bb      	ldr	r3, [r7, #8]
 800feb8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800febc:	2b00      	cmp	r3, #0
 800febe:	d11f      	bne.n	800ff00 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800fec0:	68bb      	ldr	r3, [r7, #8]
 800fec2:	2201      	movs	r2, #1
 800fec4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800fec8:	4b10      	ldr	r3, [pc, #64]	@ (800ff0c <USBD_CDC_TransmitPacket+0x7c>)
 800feca:	781b      	ldrb	r3, [r3, #0]
 800fecc:	f003 020f 	and.w	r2, r3, #15
 800fed0:	68bb      	ldr	r3, [r7, #8]
 800fed2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800fed6:	6878      	ldr	r0, [r7, #4]
 800fed8:	4613      	mov	r3, r2
 800feda:	009b      	lsls	r3, r3, #2
 800fedc:	4413      	add	r3, r2
 800fede:	009b      	lsls	r3, r3, #2
 800fee0:	4403      	add	r3, r0
 800fee2:	3318      	adds	r3, #24
 800fee4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800fee6:	4b09      	ldr	r3, [pc, #36]	@ (800ff0c <USBD_CDC_TransmitPacket+0x7c>)
 800fee8:	7819      	ldrb	r1, [r3, #0]
 800feea:	68bb      	ldr	r3, [r7, #8]
 800feec:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800fef0:	68bb      	ldr	r3, [r7, #8]
 800fef2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800fef6:	6878      	ldr	r0, [r7, #4]
 800fef8:	f001 ff63 	bl	8011dc2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800fefc:	2300      	movs	r3, #0
 800fefe:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ff00:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff02:	4618      	mov	r0, r3
 800ff04:	3710      	adds	r7, #16
 800ff06:	46bd      	mov	sp, r7
 800ff08:	bd80      	pop	{r7, pc}
 800ff0a:	bf00      	nop
 800ff0c:	200000bb 	.word	0x200000bb

0800ff10 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ff10:	b580      	push	{r7, lr}
 800ff12:	b084      	sub	sp, #16
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	32b0      	adds	r2, #176	@ 0xb0
 800ff22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff26:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	32b0      	adds	r2, #176	@ 0xb0
 800ff32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d101      	bne.n	800ff3e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ff3a:	2303      	movs	r3, #3
 800ff3c:	e018      	b.n	800ff70 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	7c1b      	ldrb	r3, [r3, #16]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d10a      	bne.n	800ff5c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ff46:	4b0c      	ldr	r3, [pc, #48]	@ (800ff78 <USBD_CDC_ReceivePacket+0x68>)
 800ff48:	7819      	ldrb	r1, [r3, #0]
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ff50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ff54:	6878      	ldr	r0, [r7, #4]
 800ff56:	f001 ff55 	bl	8011e04 <USBD_LL_PrepareReceive>
 800ff5a:	e008      	b.n	800ff6e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ff5c:	4b06      	ldr	r3, [pc, #24]	@ (800ff78 <USBD_CDC_ReceivePacket+0x68>)
 800ff5e:	7819      	ldrb	r1, [r3, #0]
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ff66:	2340      	movs	r3, #64	@ 0x40
 800ff68:	6878      	ldr	r0, [r7, #4]
 800ff6a:	f001 ff4b 	bl	8011e04 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ff6e:	2300      	movs	r3, #0
}
 800ff70:	4618      	mov	r0, r3
 800ff72:	3710      	adds	r7, #16
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bd80      	pop	{r7, pc}
 800ff78:	200000bc 	.word	0x200000bc

0800ff7c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ff7c:	b580      	push	{r7, lr}
 800ff7e:	b086      	sub	sp, #24
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	60f8      	str	r0, [r7, #12]
 800ff84:	60b9      	str	r1, [r7, #8]
 800ff86:	4613      	mov	r3, r2
 800ff88:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d10a      	bne.n	800ffa6 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800ff90:	4817      	ldr	r0, [pc, #92]	@ (800fff0 <USBD_Init+0x74>)
 800ff92:	f002 fd05 	bl	80129a0 <iprintf>
 800ff96:	4817      	ldr	r0, [pc, #92]	@ (800fff4 <USBD_Init+0x78>)
 800ff98:	f002 fd02 	bl	80129a0 <iprintf>
 800ff9c:	200a      	movs	r0, #10
 800ff9e:	f002 fd11 	bl	80129c4 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ffa2:	2303      	movs	r3, #3
 800ffa4:	e01f      	b.n	800ffe6 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	2200      	movs	r2, #0
 800ffaa:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	2200      	movs	r2, #0
 800ffb2:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	2200      	movs	r2, #0
 800ffba:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ffbe:	68bb      	ldr	r3, [r7, #8]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d003      	beq.n	800ffcc <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	68ba      	ldr	r2, [r7, #8]
 800ffc8:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	2201      	movs	r2, #1
 800ffd0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	79fa      	ldrb	r2, [r7, #7]
 800ffd8:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ffda:	68f8      	ldr	r0, [r7, #12]
 800ffdc:	f001 fda6 	bl	8011b2c <USBD_LL_Init>
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ffe4:	7dfb      	ldrb	r3, [r7, #23]
}
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	3718      	adds	r7, #24
 800ffea:	46bd      	mov	sp, r7
 800ffec:	bd80      	pop	{r7, pc}
 800ffee:	bf00      	nop
 800fff0:	08014950 	.word	0x08014950
 800fff4:	08014958 	.word	0x08014958

0800fff8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b084      	sub	sp, #16
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	6078      	str	r0, [r7, #4]
 8010000:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010002:	2300      	movs	r3, #0
 8010004:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8010006:	683b      	ldr	r3, [r7, #0]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d10a      	bne.n	8010022 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 801000c:	481a      	ldr	r0, [pc, #104]	@ (8010078 <USBD_RegisterClass+0x80>)
 801000e:	f002 fcc7 	bl	80129a0 <iprintf>
 8010012:	481a      	ldr	r0, [pc, #104]	@ (801007c <USBD_RegisterClass+0x84>)
 8010014:	f002 fcc4 	bl	80129a0 <iprintf>
 8010018:	200a      	movs	r0, #10
 801001a:	f002 fcd3 	bl	80129c4 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801001e:	2303      	movs	r3, #3
 8010020:	e025      	b.n	801006e <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	683a      	ldr	r2, [r7, #0]
 8010026:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	32ae      	adds	r2, #174	@ 0xae
 8010034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801003a:	2b00      	cmp	r3, #0
 801003c:	d00f      	beq.n	801005e <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	32ae      	adds	r2, #174	@ 0xae
 8010048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801004c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801004e:	f107 020e 	add.w	r2, r7, #14
 8010052:	4610      	mov	r0, r2
 8010054:	4798      	blx	r3
 8010056:	4602      	mov	r2, r0
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8010064:	1c5a      	adds	r2, r3, #1
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 801006c:	2300      	movs	r3, #0
}
 801006e:	4618      	mov	r0, r3
 8010070:	3710      	adds	r7, #16
 8010072:	46bd      	mov	sp, r7
 8010074:	bd80      	pop	{r7, pc}
 8010076:	bf00      	nop
 8010078:	08014950 	.word	0x08014950
 801007c:	08014970 	.word	0x08014970

08010080 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b082      	sub	sp, #8
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8010088:	6878      	ldr	r0, [r7, #4]
 801008a:	f001 fdb1 	bl	8011bf0 <USBD_LL_Start>
 801008e:	4603      	mov	r3, r0
}
 8010090:	4618      	mov	r0, r3
 8010092:	3708      	adds	r7, #8
 8010094:	46bd      	mov	sp, r7
 8010096:	bd80      	pop	{r7, pc}

08010098 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8010098:	b480      	push	{r7}
 801009a:	b083      	sub	sp, #12
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80100a0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80100a2:	4618      	mov	r0, r3
 80100a4:	370c      	adds	r7, #12
 80100a6:	46bd      	mov	sp, r7
 80100a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ac:	4770      	bx	lr

080100ae <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80100ae:	b580      	push	{r7, lr}
 80100b0:	b084      	sub	sp, #16
 80100b2:	af00      	add	r7, sp, #0
 80100b4:	6078      	str	r0, [r7, #4]
 80100b6:	460b      	mov	r3, r1
 80100b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80100ba:	2300      	movs	r3, #0
 80100bc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d009      	beq.n	80100dc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	78fa      	ldrb	r2, [r7, #3]
 80100d2:	4611      	mov	r1, r2
 80100d4:	6878      	ldr	r0, [r7, #4]
 80100d6:	4798      	blx	r3
 80100d8:	4603      	mov	r3, r0
 80100da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80100dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80100de:	4618      	mov	r0, r3
 80100e0:	3710      	adds	r7, #16
 80100e2:	46bd      	mov	sp, r7
 80100e4:	bd80      	pop	{r7, pc}

080100e6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80100e6:	b580      	push	{r7, lr}
 80100e8:	b084      	sub	sp, #16
 80100ea:	af00      	add	r7, sp, #0
 80100ec:	6078      	str	r0, [r7, #4]
 80100ee:	460b      	mov	r3, r1
 80100f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80100f2:	2300      	movs	r3, #0
 80100f4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80100fc:	685b      	ldr	r3, [r3, #4]
 80100fe:	78fa      	ldrb	r2, [r7, #3]
 8010100:	4611      	mov	r1, r2
 8010102:	6878      	ldr	r0, [r7, #4]
 8010104:	4798      	blx	r3
 8010106:	4603      	mov	r3, r0
 8010108:	2b00      	cmp	r3, #0
 801010a:	d001      	beq.n	8010110 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 801010c:	2303      	movs	r3, #3
 801010e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010110:	7bfb      	ldrb	r3, [r7, #15]
}
 8010112:	4618      	mov	r0, r3
 8010114:	3710      	adds	r7, #16
 8010116:	46bd      	mov	sp, r7
 8010118:	bd80      	pop	{r7, pc}

0801011a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801011a:	b580      	push	{r7, lr}
 801011c:	b084      	sub	sp, #16
 801011e:	af00      	add	r7, sp, #0
 8010120:	6078      	str	r0, [r7, #4]
 8010122:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801012a:	6839      	ldr	r1, [r7, #0]
 801012c:	4618      	mov	r0, r3
 801012e:	f001 f8a4 	bl	801127a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	2201      	movs	r2, #1
 8010136:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8010140:	461a      	mov	r2, r3
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801014e:	f003 031f 	and.w	r3, r3, #31
 8010152:	2b02      	cmp	r3, #2
 8010154:	d01a      	beq.n	801018c <USBD_LL_SetupStage+0x72>
 8010156:	2b02      	cmp	r3, #2
 8010158:	d822      	bhi.n	80101a0 <USBD_LL_SetupStage+0x86>
 801015a:	2b00      	cmp	r3, #0
 801015c:	d002      	beq.n	8010164 <USBD_LL_SetupStage+0x4a>
 801015e:	2b01      	cmp	r3, #1
 8010160:	d00a      	beq.n	8010178 <USBD_LL_SetupStage+0x5e>
 8010162:	e01d      	b.n	80101a0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801016a:	4619      	mov	r1, r3
 801016c:	6878      	ldr	r0, [r7, #4]
 801016e:	f000 fad1 	bl	8010714 <USBD_StdDevReq>
 8010172:	4603      	mov	r3, r0
 8010174:	73fb      	strb	r3, [r7, #15]
      break;
 8010176:	e020      	b.n	80101ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801017e:	4619      	mov	r1, r3
 8010180:	6878      	ldr	r0, [r7, #4]
 8010182:	f000 fb39 	bl	80107f8 <USBD_StdItfReq>
 8010186:	4603      	mov	r3, r0
 8010188:	73fb      	strb	r3, [r7, #15]
      break;
 801018a:	e016      	b.n	80101ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010192:	4619      	mov	r1, r3
 8010194:	6878      	ldr	r0, [r7, #4]
 8010196:	f000 fb9b 	bl	80108d0 <USBD_StdEPReq>
 801019a:	4603      	mov	r3, r0
 801019c:	73fb      	strb	r3, [r7, #15]
      break;
 801019e:	e00c      	b.n	80101ba <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80101a6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80101aa:	b2db      	uxtb	r3, r3
 80101ac:	4619      	mov	r1, r3
 80101ae:	6878      	ldr	r0, [r7, #4]
 80101b0:	f001 fd7e 	bl	8011cb0 <USBD_LL_StallEP>
 80101b4:	4603      	mov	r3, r0
 80101b6:	73fb      	strb	r3, [r7, #15]
      break;
 80101b8:	bf00      	nop
  }

  return ret;
 80101ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80101bc:	4618      	mov	r0, r3
 80101be:	3710      	adds	r7, #16
 80101c0:	46bd      	mov	sp, r7
 80101c2:	bd80      	pop	{r7, pc}

080101c4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b086      	sub	sp, #24
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	60f8      	str	r0, [r7, #12]
 80101cc:	460b      	mov	r3, r1
 80101ce:	607a      	str	r2, [r7, #4]
 80101d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80101d2:	2300      	movs	r3, #0
 80101d4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80101d6:	7afb      	ldrb	r3, [r7, #11]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d16e      	bne.n	80102ba <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80101e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80101ea:	2b03      	cmp	r3, #3
 80101ec:	f040 8098 	bne.w	8010320 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80101f0:	693b      	ldr	r3, [r7, #16]
 80101f2:	689a      	ldr	r2, [r3, #8]
 80101f4:	693b      	ldr	r3, [r7, #16]
 80101f6:	68db      	ldr	r3, [r3, #12]
 80101f8:	429a      	cmp	r2, r3
 80101fa:	d913      	bls.n	8010224 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80101fc:	693b      	ldr	r3, [r7, #16]
 80101fe:	689a      	ldr	r2, [r3, #8]
 8010200:	693b      	ldr	r3, [r7, #16]
 8010202:	68db      	ldr	r3, [r3, #12]
 8010204:	1ad2      	subs	r2, r2, r3
 8010206:	693b      	ldr	r3, [r7, #16]
 8010208:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801020a:	693b      	ldr	r3, [r7, #16]
 801020c:	68da      	ldr	r2, [r3, #12]
 801020e:	693b      	ldr	r3, [r7, #16]
 8010210:	689b      	ldr	r3, [r3, #8]
 8010212:	4293      	cmp	r3, r2
 8010214:	bf28      	it	cs
 8010216:	4613      	movcs	r3, r2
 8010218:	461a      	mov	r2, r3
 801021a:	6879      	ldr	r1, [r7, #4]
 801021c:	68f8      	ldr	r0, [r7, #12]
 801021e:	f001 f92c 	bl	801147a <USBD_CtlContinueRx>
 8010222:	e07d      	b.n	8010320 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801022a:	f003 031f 	and.w	r3, r3, #31
 801022e:	2b02      	cmp	r3, #2
 8010230:	d014      	beq.n	801025c <USBD_LL_DataOutStage+0x98>
 8010232:	2b02      	cmp	r3, #2
 8010234:	d81d      	bhi.n	8010272 <USBD_LL_DataOutStage+0xae>
 8010236:	2b00      	cmp	r3, #0
 8010238:	d002      	beq.n	8010240 <USBD_LL_DataOutStage+0x7c>
 801023a:	2b01      	cmp	r3, #1
 801023c:	d003      	beq.n	8010246 <USBD_LL_DataOutStage+0x82>
 801023e:	e018      	b.n	8010272 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8010240:	2300      	movs	r3, #0
 8010242:	75bb      	strb	r3, [r7, #22]
            break;
 8010244:	e018      	b.n	8010278 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801024c:	b2db      	uxtb	r3, r3
 801024e:	4619      	mov	r1, r3
 8010250:	68f8      	ldr	r0, [r7, #12]
 8010252:	f000 f9d2 	bl	80105fa <USBD_CoreFindIF>
 8010256:	4603      	mov	r3, r0
 8010258:	75bb      	strb	r3, [r7, #22]
            break;
 801025a:	e00d      	b.n	8010278 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8010262:	b2db      	uxtb	r3, r3
 8010264:	4619      	mov	r1, r3
 8010266:	68f8      	ldr	r0, [r7, #12]
 8010268:	f000 f9d4 	bl	8010614 <USBD_CoreFindEP>
 801026c:	4603      	mov	r3, r0
 801026e:	75bb      	strb	r3, [r7, #22]
            break;
 8010270:	e002      	b.n	8010278 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8010272:	2300      	movs	r3, #0
 8010274:	75bb      	strb	r3, [r7, #22]
            break;
 8010276:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8010278:	7dbb      	ldrb	r3, [r7, #22]
 801027a:	2b00      	cmp	r3, #0
 801027c:	d119      	bne.n	80102b2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010284:	b2db      	uxtb	r3, r3
 8010286:	2b03      	cmp	r3, #3
 8010288:	d113      	bne.n	80102b2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801028a:	7dba      	ldrb	r2, [r7, #22]
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	32ae      	adds	r2, #174	@ 0xae
 8010290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010294:	691b      	ldr	r3, [r3, #16]
 8010296:	2b00      	cmp	r3, #0
 8010298:	d00b      	beq.n	80102b2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801029a:	7dba      	ldrb	r2, [r7, #22]
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80102a2:	7dba      	ldrb	r2, [r7, #22]
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	32ae      	adds	r2, #174	@ 0xae
 80102a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102ac:	691b      	ldr	r3, [r3, #16]
 80102ae:	68f8      	ldr	r0, [r7, #12]
 80102b0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80102b2:	68f8      	ldr	r0, [r7, #12]
 80102b4:	f001 f8f2 	bl	801149c <USBD_CtlSendStatus>
 80102b8:	e032      	b.n	8010320 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80102ba:	7afb      	ldrb	r3, [r7, #11]
 80102bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80102c0:	b2db      	uxtb	r3, r3
 80102c2:	4619      	mov	r1, r3
 80102c4:	68f8      	ldr	r0, [r7, #12]
 80102c6:	f000 f9a5 	bl	8010614 <USBD_CoreFindEP>
 80102ca:	4603      	mov	r3, r0
 80102cc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80102ce:	7dbb      	ldrb	r3, [r7, #22]
 80102d0:	2bff      	cmp	r3, #255	@ 0xff
 80102d2:	d025      	beq.n	8010320 <USBD_LL_DataOutStage+0x15c>
 80102d4:	7dbb      	ldrb	r3, [r7, #22]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d122      	bne.n	8010320 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80102e0:	b2db      	uxtb	r3, r3
 80102e2:	2b03      	cmp	r3, #3
 80102e4:	d117      	bne.n	8010316 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80102e6:	7dba      	ldrb	r2, [r7, #22]
 80102e8:	68fb      	ldr	r3, [r7, #12]
 80102ea:	32ae      	adds	r2, #174	@ 0xae
 80102ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102f0:	699b      	ldr	r3, [r3, #24]
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d00f      	beq.n	8010316 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80102f6:	7dba      	ldrb	r2, [r7, #22]
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80102fe:	7dba      	ldrb	r2, [r7, #22]
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	32ae      	adds	r2, #174	@ 0xae
 8010304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010308:	699b      	ldr	r3, [r3, #24]
 801030a:	7afa      	ldrb	r2, [r7, #11]
 801030c:	4611      	mov	r1, r2
 801030e:	68f8      	ldr	r0, [r7, #12]
 8010310:	4798      	blx	r3
 8010312:	4603      	mov	r3, r0
 8010314:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8010316:	7dfb      	ldrb	r3, [r7, #23]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d001      	beq.n	8010320 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 801031c:	7dfb      	ldrb	r3, [r7, #23]
 801031e:	e000      	b.n	8010322 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8010320:	2300      	movs	r3, #0
}
 8010322:	4618      	mov	r0, r3
 8010324:	3718      	adds	r7, #24
 8010326:	46bd      	mov	sp, r7
 8010328:	bd80      	pop	{r7, pc}

0801032a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801032a:	b580      	push	{r7, lr}
 801032c:	b086      	sub	sp, #24
 801032e:	af00      	add	r7, sp, #0
 8010330:	60f8      	str	r0, [r7, #12]
 8010332:	460b      	mov	r3, r1
 8010334:	607a      	str	r2, [r7, #4]
 8010336:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8010338:	7afb      	ldrb	r3, [r7, #11]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d16f      	bne.n	801041e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	3314      	adds	r3, #20
 8010342:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801034a:	2b02      	cmp	r3, #2
 801034c:	d15a      	bne.n	8010404 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801034e:	693b      	ldr	r3, [r7, #16]
 8010350:	689a      	ldr	r2, [r3, #8]
 8010352:	693b      	ldr	r3, [r7, #16]
 8010354:	68db      	ldr	r3, [r3, #12]
 8010356:	429a      	cmp	r2, r3
 8010358:	d914      	bls.n	8010384 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801035a:	693b      	ldr	r3, [r7, #16]
 801035c:	689a      	ldr	r2, [r3, #8]
 801035e:	693b      	ldr	r3, [r7, #16]
 8010360:	68db      	ldr	r3, [r3, #12]
 8010362:	1ad2      	subs	r2, r2, r3
 8010364:	693b      	ldr	r3, [r7, #16]
 8010366:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8010368:	693b      	ldr	r3, [r7, #16]
 801036a:	689b      	ldr	r3, [r3, #8]
 801036c:	461a      	mov	r2, r3
 801036e:	6879      	ldr	r1, [r7, #4]
 8010370:	68f8      	ldr	r0, [r7, #12]
 8010372:	f001 f854 	bl	801141e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010376:	2300      	movs	r3, #0
 8010378:	2200      	movs	r2, #0
 801037a:	2100      	movs	r1, #0
 801037c:	68f8      	ldr	r0, [r7, #12]
 801037e:	f001 fd41 	bl	8011e04 <USBD_LL_PrepareReceive>
 8010382:	e03f      	b.n	8010404 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010384:	693b      	ldr	r3, [r7, #16]
 8010386:	68da      	ldr	r2, [r3, #12]
 8010388:	693b      	ldr	r3, [r7, #16]
 801038a:	689b      	ldr	r3, [r3, #8]
 801038c:	429a      	cmp	r2, r3
 801038e:	d11c      	bne.n	80103ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010390:	693b      	ldr	r3, [r7, #16]
 8010392:	685a      	ldr	r2, [r3, #4]
 8010394:	693b      	ldr	r3, [r7, #16]
 8010396:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010398:	429a      	cmp	r2, r3
 801039a:	d316      	bcc.n	80103ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 801039c:	693b      	ldr	r3, [r7, #16]
 801039e:	685a      	ldr	r2, [r3, #4]
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80103a6:	429a      	cmp	r2, r3
 80103a8:	d20f      	bcs.n	80103ca <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80103aa:	2200      	movs	r2, #0
 80103ac:	2100      	movs	r1, #0
 80103ae:	68f8      	ldr	r0, [r7, #12]
 80103b0:	f001 f835 	bl	801141e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	2200      	movs	r2, #0
 80103b8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80103bc:	2300      	movs	r3, #0
 80103be:	2200      	movs	r2, #0
 80103c0:	2100      	movs	r1, #0
 80103c2:	68f8      	ldr	r0, [r7, #12]
 80103c4:	f001 fd1e 	bl	8011e04 <USBD_LL_PrepareReceive>
 80103c8:	e01c      	b.n	8010404 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80103d0:	b2db      	uxtb	r3, r3
 80103d2:	2b03      	cmp	r3, #3
 80103d4:	d10f      	bne.n	80103f6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80103dc:	68db      	ldr	r3, [r3, #12]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d009      	beq.n	80103f6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80103e2:	68fb      	ldr	r3, [r7, #12]
 80103e4:	2200      	movs	r2, #0
 80103e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80103f0:	68db      	ldr	r3, [r3, #12]
 80103f2:	68f8      	ldr	r0, [r7, #12]
 80103f4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80103f6:	2180      	movs	r1, #128	@ 0x80
 80103f8:	68f8      	ldr	r0, [r7, #12]
 80103fa:	f001 fc59 	bl	8011cb0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80103fe:	68f8      	ldr	r0, [r7, #12]
 8010400:	f001 f85f 	bl	80114c2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 801040a:	2b00      	cmp	r3, #0
 801040c:	d03a      	beq.n	8010484 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801040e:	68f8      	ldr	r0, [r7, #12]
 8010410:	f7ff fe42 	bl	8010098 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	2200      	movs	r2, #0
 8010418:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 801041c:	e032      	b.n	8010484 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801041e:	7afb      	ldrb	r3, [r7, #11]
 8010420:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010424:	b2db      	uxtb	r3, r3
 8010426:	4619      	mov	r1, r3
 8010428:	68f8      	ldr	r0, [r7, #12]
 801042a:	f000 f8f3 	bl	8010614 <USBD_CoreFindEP>
 801042e:	4603      	mov	r3, r0
 8010430:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010432:	7dfb      	ldrb	r3, [r7, #23]
 8010434:	2bff      	cmp	r3, #255	@ 0xff
 8010436:	d025      	beq.n	8010484 <USBD_LL_DataInStage+0x15a>
 8010438:	7dfb      	ldrb	r3, [r7, #23]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d122      	bne.n	8010484 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801043e:	68fb      	ldr	r3, [r7, #12]
 8010440:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010444:	b2db      	uxtb	r3, r3
 8010446:	2b03      	cmp	r3, #3
 8010448:	d11c      	bne.n	8010484 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801044a:	7dfa      	ldrb	r2, [r7, #23]
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	32ae      	adds	r2, #174	@ 0xae
 8010450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010454:	695b      	ldr	r3, [r3, #20]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d014      	beq.n	8010484 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801045a:	7dfa      	ldrb	r2, [r7, #23]
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8010462:	7dfa      	ldrb	r2, [r7, #23]
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	32ae      	adds	r2, #174	@ 0xae
 8010468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801046c:	695b      	ldr	r3, [r3, #20]
 801046e:	7afa      	ldrb	r2, [r7, #11]
 8010470:	4611      	mov	r1, r2
 8010472:	68f8      	ldr	r0, [r7, #12]
 8010474:	4798      	blx	r3
 8010476:	4603      	mov	r3, r0
 8010478:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801047a:	7dbb      	ldrb	r3, [r7, #22]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d001      	beq.n	8010484 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8010480:	7dbb      	ldrb	r3, [r7, #22]
 8010482:	e000      	b.n	8010486 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8010484:	2300      	movs	r3, #0
}
 8010486:	4618      	mov	r0, r3
 8010488:	3718      	adds	r7, #24
 801048a:	46bd      	mov	sp, r7
 801048c:	bd80      	pop	{r7, pc}

0801048e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801048e:	b580      	push	{r7, lr}
 8010490:	b084      	sub	sp, #16
 8010492:	af00      	add	r7, sp, #0
 8010494:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8010496:	2300      	movs	r3, #0
 8010498:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	2201      	movs	r2, #1
 801049e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	2200      	movs	r2, #0
 80104a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	2200      	movs	r2, #0
 80104ae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	2200      	movs	r2, #0
 80104b4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	2200      	movs	r2, #0
 80104bc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d014      	beq.n	80104f4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80104d0:	685b      	ldr	r3, [r3, #4]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d00e      	beq.n	80104f4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80104dc:	685b      	ldr	r3, [r3, #4]
 80104de:	687a      	ldr	r2, [r7, #4]
 80104e0:	6852      	ldr	r2, [r2, #4]
 80104e2:	b2d2      	uxtb	r2, r2
 80104e4:	4611      	mov	r1, r2
 80104e6:	6878      	ldr	r0, [r7, #4]
 80104e8:	4798      	blx	r3
 80104ea:	4603      	mov	r3, r0
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d001      	beq.n	80104f4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80104f0:	2303      	movs	r3, #3
 80104f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80104f4:	2340      	movs	r3, #64	@ 0x40
 80104f6:	2200      	movs	r2, #0
 80104f8:	2100      	movs	r1, #0
 80104fa:	6878      	ldr	r0, [r7, #4]
 80104fc:	f001 fb93 	bl	8011c26 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	2201      	movs	r2, #1
 8010504:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	2240      	movs	r2, #64	@ 0x40
 801050c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010510:	2340      	movs	r3, #64	@ 0x40
 8010512:	2200      	movs	r2, #0
 8010514:	2180      	movs	r1, #128	@ 0x80
 8010516:	6878      	ldr	r0, [r7, #4]
 8010518:	f001 fb85 	bl	8011c26 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	2201      	movs	r2, #1
 8010520:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	2240      	movs	r2, #64	@ 0x40
 8010526:	621a      	str	r2, [r3, #32]

  return ret;
 8010528:	7bfb      	ldrb	r3, [r7, #15]
}
 801052a:	4618      	mov	r0, r3
 801052c:	3710      	adds	r7, #16
 801052e:	46bd      	mov	sp, r7
 8010530:	bd80      	pop	{r7, pc}

08010532 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010532:	b480      	push	{r7}
 8010534:	b083      	sub	sp, #12
 8010536:	af00      	add	r7, sp, #0
 8010538:	6078      	str	r0, [r7, #4]
 801053a:	460b      	mov	r3, r1
 801053c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	78fa      	ldrb	r2, [r7, #3]
 8010542:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010544:	2300      	movs	r3, #0
}
 8010546:	4618      	mov	r0, r3
 8010548:	370c      	adds	r7, #12
 801054a:	46bd      	mov	sp, r7
 801054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010550:	4770      	bx	lr

08010552 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010552:	b480      	push	{r7}
 8010554:	b083      	sub	sp, #12
 8010556:	af00      	add	r7, sp, #0
 8010558:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010560:	b2db      	uxtb	r3, r3
 8010562:	2b04      	cmp	r3, #4
 8010564:	d006      	beq.n	8010574 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801056c:	b2da      	uxtb	r2, r3
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	2204      	movs	r2, #4
 8010578:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 801057c:	2300      	movs	r3, #0
}
 801057e:	4618      	mov	r0, r3
 8010580:	370c      	adds	r7, #12
 8010582:	46bd      	mov	sp, r7
 8010584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010588:	4770      	bx	lr

0801058a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801058a:	b480      	push	{r7}
 801058c:	b083      	sub	sp, #12
 801058e:	af00      	add	r7, sp, #0
 8010590:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010598:	b2db      	uxtb	r3, r3
 801059a:	2b04      	cmp	r3, #4
 801059c:	d106      	bne.n	80105ac <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80105a4:	b2da      	uxtb	r2, r3
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80105ac:	2300      	movs	r3, #0
}
 80105ae:	4618      	mov	r0, r3
 80105b0:	370c      	adds	r7, #12
 80105b2:	46bd      	mov	sp, r7
 80105b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b8:	4770      	bx	lr

080105ba <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80105ba:	b580      	push	{r7, lr}
 80105bc:	b082      	sub	sp, #8
 80105be:	af00      	add	r7, sp, #0
 80105c0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80105c8:	b2db      	uxtb	r3, r3
 80105ca:	2b03      	cmp	r3, #3
 80105cc:	d110      	bne.n	80105f0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d00b      	beq.n	80105f0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80105de:	69db      	ldr	r3, [r3, #28]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d005      	beq.n	80105f0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80105ea:	69db      	ldr	r3, [r3, #28]
 80105ec:	6878      	ldr	r0, [r7, #4]
 80105ee:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80105f0:	2300      	movs	r3, #0
}
 80105f2:	4618      	mov	r0, r3
 80105f4:	3708      	adds	r7, #8
 80105f6:	46bd      	mov	sp, r7
 80105f8:	bd80      	pop	{r7, pc}

080105fa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80105fa:	b480      	push	{r7}
 80105fc:	b083      	sub	sp, #12
 80105fe:	af00      	add	r7, sp, #0
 8010600:	6078      	str	r0, [r7, #4]
 8010602:	460b      	mov	r3, r1
 8010604:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010606:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010608:	4618      	mov	r0, r3
 801060a:	370c      	adds	r7, #12
 801060c:	46bd      	mov	sp, r7
 801060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010612:	4770      	bx	lr

08010614 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010614:	b480      	push	{r7}
 8010616:	b083      	sub	sp, #12
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
 801061c:	460b      	mov	r3, r1
 801061e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010620:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010622:	4618      	mov	r0, r3
 8010624:	370c      	adds	r7, #12
 8010626:	46bd      	mov	sp, r7
 8010628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062c:	4770      	bx	lr

0801062e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801062e:	b580      	push	{r7, lr}
 8010630:	b086      	sub	sp, #24
 8010632:	af00      	add	r7, sp, #0
 8010634:	6078      	str	r0, [r7, #4]
 8010636:	460b      	mov	r3, r1
 8010638:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8010642:	2300      	movs	r3, #0
 8010644:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	885b      	ldrh	r3, [r3, #2]
 801064a:	b29b      	uxth	r3, r3
 801064c:	68fa      	ldr	r2, [r7, #12]
 801064e:	7812      	ldrb	r2, [r2, #0]
 8010650:	4293      	cmp	r3, r2
 8010652:	d91f      	bls.n	8010694 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	781b      	ldrb	r3, [r3, #0]
 8010658:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801065a:	e013      	b.n	8010684 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801065c:	f107 030a 	add.w	r3, r7, #10
 8010660:	4619      	mov	r1, r3
 8010662:	6978      	ldr	r0, [r7, #20]
 8010664:	f000 f81b 	bl	801069e <USBD_GetNextDesc>
 8010668:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801066a:	697b      	ldr	r3, [r7, #20]
 801066c:	785b      	ldrb	r3, [r3, #1]
 801066e:	2b05      	cmp	r3, #5
 8010670:	d108      	bne.n	8010684 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8010672:	697b      	ldr	r3, [r7, #20]
 8010674:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8010676:	693b      	ldr	r3, [r7, #16]
 8010678:	789b      	ldrb	r3, [r3, #2]
 801067a:	78fa      	ldrb	r2, [r7, #3]
 801067c:	429a      	cmp	r2, r3
 801067e:	d008      	beq.n	8010692 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8010680:	2300      	movs	r3, #0
 8010682:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	885b      	ldrh	r3, [r3, #2]
 8010688:	b29a      	uxth	r2, r3
 801068a:	897b      	ldrh	r3, [r7, #10]
 801068c:	429a      	cmp	r2, r3
 801068e:	d8e5      	bhi.n	801065c <USBD_GetEpDesc+0x2e>
 8010690:	e000      	b.n	8010694 <USBD_GetEpDesc+0x66>
          break;
 8010692:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8010694:	693b      	ldr	r3, [r7, #16]
}
 8010696:	4618      	mov	r0, r3
 8010698:	3718      	adds	r7, #24
 801069a:	46bd      	mov	sp, r7
 801069c:	bd80      	pop	{r7, pc}

0801069e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801069e:	b480      	push	{r7}
 80106a0:	b085      	sub	sp, #20
 80106a2:	af00      	add	r7, sp, #0
 80106a4:	6078      	str	r0, [r7, #4]
 80106a6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80106ac:	683b      	ldr	r3, [r7, #0]
 80106ae:	881b      	ldrh	r3, [r3, #0]
 80106b0:	68fa      	ldr	r2, [r7, #12]
 80106b2:	7812      	ldrb	r2, [r2, #0]
 80106b4:	4413      	add	r3, r2
 80106b6:	b29a      	uxth	r2, r3
 80106b8:	683b      	ldr	r3, [r7, #0]
 80106ba:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	781b      	ldrb	r3, [r3, #0]
 80106c0:	461a      	mov	r2, r3
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	4413      	add	r3, r2
 80106c6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80106c8:	68fb      	ldr	r3, [r7, #12]
}
 80106ca:	4618      	mov	r0, r3
 80106cc:	3714      	adds	r7, #20
 80106ce:	46bd      	mov	sp, r7
 80106d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d4:	4770      	bx	lr

080106d6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80106d6:	b480      	push	{r7}
 80106d8:	b087      	sub	sp, #28
 80106da:	af00      	add	r7, sp, #0
 80106dc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80106e2:	697b      	ldr	r3, [r7, #20]
 80106e4:	781b      	ldrb	r3, [r3, #0]
 80106e6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80106e8:	697b      	ldr	r3, [r7, #20]
 80106ea:	3301      	adds	r3, #1
 80106ec:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80106ee:	697b      	ldr	r3, [r7, #20]
 80106f0:	781b      	ldrb	r3, [r3, #0]
 80106f2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80106f4:	8a3b      	ldrh	r3, [r7, #16]
 80106f6:	021b      	lsls	r3, r3, #8
 80106f8:	b21a      	sxth	r2, r3
 80106fa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80106fe:	4313      	orrs	r3, r2
 8010700:	b21b      	sxth	r3, r3
 8010702:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010704:	89fb      	ldrh	r3, [r7, #14]
}
 8010706:	4618      	mov	r0, r3
 8010708:	371c      	adds	r7, #28
 801070a:	46bd      	mov	sp, r7
 801070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010710:	4770      	bx	lr
	...

08010714 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010714:	b580      	push	{r7, lr}
 8010716:	b084      	sub	sp, #16
 8010718:	af00      	add	r7, sp, #0
 801071a:	6078      	str	r0, [r7, #4]
 801071c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801071e:	2300      	movs	r3, #0
 8010720:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010722:	683b      	ldr	r3, [r7, #0]
 8010724:	781b      	ldrb	r3, [r3, #0]
 8010726:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801072a:	2b40      	cmp	r3, #64	@ 0x40
 801072c:	d005      	beq.n	801073a <USBD_StdDevReq+0x26>
 801072e:	2b40      	cmp	r3, #64	@ 0x40
 8010730:	d857      	bhi.n	80107e2 <USBD_StdDevReq+0xce>
 8010732:	2b00      	cmp	r3, #0
 8010734:	d00f      	beq.n	8010756 <USBD_StdDevReq+0x42>
 8010736:	2b20      	cmp	r3, #32
 8010738:	d153      	bne.n	80107e2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	32ae      	adds	r2, #174	@ 0xae
 8010744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010748:	689b      	ldr	r3, [r3, #8]
 801074a:	6839      	ldr	r1, [r7, #0]
 801074c:	6878      	ldr	r0, [r7, #4]
 801074e:	4798      	blx	r3
 8010750:	4603      	mov	r3, r0
 8010752:	73fb      	strb	r3, [r7, #15]
      break;
 8010754:	e04a      	b.n	80107ec <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010756:	683b      	ldr	r3, [r7, #0]
 8010758:	785b      	ldrb	r3, [r3, #1]
 801075a:	2b09      	cmp	r3, #9
 801075c:	d83b      	bhi.n	80107d6 <USBD_StdDevReq+0xc2>
 801075e:	a201      	add	r2, pc, #4	@ (adr r2, 8010764 <USBD_StdDevReq+0x50>)
 8010760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010764:	080107b9 	.word	0x080107b9
 8010768:	080107cd 	.word	0x080107cd
 801076c:	080107d7 	.word	0x080107d7
 8010770:	080107c3 	.word	0x080107c3
 8010774:	080107d7 	.word	0x080107d7
 8010778:	08010797 	.word	0x08010797
 801077c:	0801078d 	.word	0x0801078d
 8010780:	080107d7 	.word	0x080107d7
 8010784:	080107af 	.word	0x080107af
 8010788:	080107a1 	.word	0x080107a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801078c:	6839      	ldr	r1, [r7, #0]
 801078e:	6878      	ldr	r0, [r7, #4]
 8010790:	f000 fa3c 	bl	8010c0c <USBD_GetDescriptor>
          break;
 8010794:	e024      	b.n	80107e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010796:	6839      	ldr	r1, [r7, #0]
 8010798:	6878      	ldr	r0, [r7, #4]
 801079a:	f000 fbcb 	bl	8010f34 <USBD_SetAddress>
          break;
 801079e:	e01f      	b.n	80107e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80107a0:	6839      	ldr	r1, [r7, #0]
 80107a2:	6878      	ldr	r0, [r7, #4]
 80107a4:	f000 fc0a 	bl	8010fbc <USBD_SetConfig>
 80107a8:	4603      	mov	r3, r0
 80107aa:	73fb      	strb	r3, [r7, #15]
          break;
 80107ac:	e018      	b.n	80107e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80107ae:	6839      	ldr	r1, [r7, #0]
 80107b0:	6878      	ldr	r0, [r7, #4]
 80107b2:	f000 fcad 	bl	8011110 <USBD_GetConfig>
          break;
 80107b6:	e013      	b.n	80107e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80107b8:	6839      	ldr	r1, [r7, #0]
 80107ba:	6878      	ldr	r0, [r7, #4]
 80107bc:	f000 fcde 	bl	801117c <USBD_GetStatus>
          break;
 80107c0:	e00e      	b.n	80107e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80107c2:	6839      	ldr	r1, [r7, #0]
 80107c4:	6878      	ldr	r0, [r7, #4]
 80107c6:	f000 fd0d 	bl	80111e4 <USBD_SetFeature>
          break;
 80107ca:	e009      	b.n	80107e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80107cc:	6839      	ldr	r1, [r7, #0]
 80107ce:	6878      	ldr	r0, [r7, #4]
 80107d0:	f000 fd31 	bl	8011236 <USBD_ClrFeature>
          break;
 80107d4:	e004      	b.n	80107e0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80107d6:	6839      	ldr	r1, [r7, #0]
 80107d8:	6878      	ldr	r0, [r7, #4]
 80107da:	f000 fd88 	bl	80112ee <USBD_CtlError>
          break;
 80107de:	bf00      	nop
      }
      break;
 80107e0:	e004      	b.n	80107ec <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80107e2:	6839      	ldr	r1, [r7, #0]
 80107e4:	6878      	ldr	r0, [r7, #4]
 80107e6:	f000 fd82 	bl	80112ee <USBD_CtlError>
      break;
 80107ea:	bf00      	nop
  }

  return ret;
 80107ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80107ee:	4618      	mov	r0, r3
 80107f0:	3710      	adds	r7, #16
 80107f2:	46bd      	mov	sp, r7
 80107f4:	bd80      	pop	{r7, pc}
 80107f6:	bf00      	nop

080107f8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b084      	sub	sp, #16
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]
 8010800:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010802:	2300      	movs	r3, #0
 8010804:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010806:	683b      	ldr	r3, [r7, #0]
 8010808:	781b      	ldrb	r3, [r3, #0]
 801080a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801080e:	2b40      	cmp	r3, #64	@ 0x40
 8010810:	d005      	beq.n	801081e <USBD_StdItfReq+0x26>
 8010812:	2b40      	cmp	r3, #64	@ 0x40
 8010814:	d852      	bhi.n	80108bc <USBD_StdItfReq+0xc4>
 8010816:	2b00      	cmp	r3, #0
 8010818:	d001      	beq.n	801081e <USBD_StdItfReq+0x26>
 801081a:	2b20      	cmp	r3, #32
 801081c:	d14e      	bne.n	80108bc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010824:	b2db      	uxtb	r3, r3
 8010826:	3b01      	subs	r3, #1
 8010828:	2b02      	cmp	r3, #2
 801082a:	d840      	bhi.n	80108ae <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801082c:	683b      	ldr	r3, [r7, #0]
 801082e:	889b      	ldrh	r3, [r3, #4]
 8010830:	b2db      	uxtb	r3, r3
 8010832:	2b01      	cmp	r3, #1
 8010834:	d836      	bhi.n	80108a4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8010836:	683b      	ldr	r3, [r7, #0]
 8010838:	889b      	ldrh	r3, [r3, #4]
 801083a:	b2db      	uxtb	r3, r3
 801083c:	4619      	mov	r1, r3
 801083e:	6878      	ldr	r0, [r7, #4]
 8010840:	f7ff fedb 	bl	80105fa <USBD_CoreFindIF>
 8010844:	4603      	mov	r3, r0
 8010846:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010848:	7bbb      	ldrb	r3, [r7, #14]
 801084a:	2bff      	cmp	r3, #255	@ 0xff
 801084c:	d01d      	beq.n	801088a <USBD_StdItfReq+0x92>
 801084e:	7bbb      	ldrb	r3, [r7, #14]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d11a      	bne.n	801088a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8010854:	7bba      	ldrb	r2, [r7, #14]
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	32ae      	adds	r2, #174	@ 0xae
 801085a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801085e:	689b      	ldr	r3, [r3, #8]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d00f      	beq.n	8010884 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8010864:	7bba      	ldrb	r2, [r7, #14]
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801086c:	7bba      	ldrb	r2, [r7, #14]
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	32ae      	adds	r2, #174	@ 0xae
 8010872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010876:	689b      	ldr	r3, [r3, #8]
 8010878:	6839      	ldr	r1, [r7, #0]
 801087a:	6878      	ldr	r0, [r7, #4]
 801087c:	4798      	blx	r3
 801087e:	4603      	mov	r3, r0
 8010880:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010882:	e004      	b.n	801088e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8010884:	2303      	movs	r3, #3
 8010886:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010888:	e001      	b.n	801088e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801088a:	2303      	movs	r3, #3
 801088c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801088e:	683b      	ldr	r3, [r7, #0]
 8010890:	88db      	ldrh	r3, [r3, #6]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d110      	bne.n	80108b8 <USBD_StdItfReq+0xc0>
 8010896:	7bfb      	ldrb	r3, [r7, #15]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d10d      	bne.n	80108b8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801089c:	6878      	ldr	r0, [r7, #4]
 801089e:	f000 fdfd 	bl	801149c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80108a2:	e009      	b.n	80108b8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80108a4:	6839      	ldr	r1, [r7, #0]
 80108a6:	6878      	ldr	r0, [r7, #4]
 80108a8:	f000 fd21 	bl	80112ee <USBD_CtlError>
          break;
 80108ac:	e004      	b.n	80108b8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80108ae:	6839      	ldr	r1, [r7, #0]
 80108b0:	6878      	ldr	r0, [r7, #4]
 80108b2:	f000 fd1c 	bl	80112ee <USBD_CtlError>
          break;
 80108b6:	e000      	b.n	80108ba <USBD_StdItfReq+0xc2>
          break;
 80108b8:	bf00      	nop
      }
      break;
 80108ba:	e004      	b.n	80108c6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80108bc:	6839      	ldr	r1, [r7, #0]
 80108be:	6878      	ldr	r0, [r7, #4]
 80108c0:	f000 fd15 	bl	80112ee <USBD_CtlError>
      break;
 80108c4:	bf00      	nop
  }

  return ret;
 80108c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80108c8:	4618      	mov	r0, r3
 80108ca:	3710      	adds	r7, #16
 80108cc:	46bd      	mov	sp, r7
 80108ce:	bd80      	pop	{r7, pc}

080108d0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b084      	sub	sp, #16
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	6078      	str	r0, [r7, #4]
 80108d8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80108da:	2300      	movs	r3, #0
 80108dc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80108de:	683b      	ldr	r3, [r7, #0]
 80108e0:	889b      	ldrh	r3, [r3, #4]
 80108e2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80108e4:	683b      	ldr	r3, [r7, #0]
 80108e6:	781b      	ldrb	r3, [r3, #0]
 80108e8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80108ec:	2b40      	cmp	r3, #64	@ 0x40
 80108ee:	d007      	beq.n	8010900 <USBD_StdEPReq+0x30>
 80108f0:	2b40      	cmp	r3, #64	@ 0x40
 80108f2:	f200 817f 	bhi.w	8010bf4 <USBD_StdEPReq+0x324>
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d02a      	beq.n	8010950 <USBD_StdEPReq+0x80>
 80108fa:	2b20      	cmp	r3, #32
 80108fc:	f040 817a 	bne.w	8010bf4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8010900:	7bbb      	ldrb	r3, [r7, #14]
 8010902:	4619      	mov	r1, r3
 8010904:	6878      	ldr	r0, [r7, #4]
 8010906:	f7ff fe85 	bl	8010614 <USBD_CoreFindEP>
 801090a:	4603      	mov	r3, r0
 801090c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801090e:	7b7b      	ldrb	r3, [r7, #13]
 8010910:	2bff      	cmp	r3, #255	@ 0xff
 8010912:	f000 8174 	beq.w	8010bfe <USBD_StdEPReq+0x32e>
 8010916:	7b7b      	ldrb	r3, [r7, #13]
 8010918:	2b00      	cmp	r3, #0
 801091a:	f040 8170 	bne.w	8010bfe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801091e:	7b7a      	ldrb	r2, [r7, #13]
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8010926:	7b7a      	ldrb	r2, [r7, #13]
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	32ae      	adds	r2, #174	@ 0xae
 801092c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010930:	689b      	ldr	r3, [r3, #8]
 8010932:	2b00      	cmp	r3, #0
 8010934:	f000 8163 	beq.w	8010bfe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8010938:	7b7a      	ldrb	r2, [r7, #13]
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	32ae      	adds	r2, #174	@ 0xae
 801093e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010942:	689b      	ldr	r3, [r3, #8]
 8010944:	6839      	ldr	r1, [r7, #0]
 8010946:	6878      	ldr	r0, [r7, #4]
 8010948:	4798      	blx	r3
 801094a:	4603      	mov	r3, r0
 801094c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801094e:	e156      	b.n	8010bfe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010950:	683b      	ldr	r3, [r7, #0]
 8010952:	785b      	ldrb	r3, [r3, #1]
 8010954:	2b03      	cmp	r3, #3
 8010956:	d008      	beq.n	801096a <USBD_StdEPReq+0x9a>
 8010958:	2b03      	cmp	r3, #3
 801095a:	f300 8145 	bgt.w	8010be8 <USBD_StdEPReq+0x318>
 801095e:	2b00      	cmp	r3, #0
 8010960:	f000 809b 	beq.w	8010a9a <USBD_StdEPReq+0x1ca>
 8010964:	2b01      	cmp	r3, #1
 8010966:	d03c      	beq.n	80109e2 <USBD_StdEPReq+0x112>
 8010968:	e13e      	b.n	8010be8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010970:	b2db      	uxtb	r3, r3
 8010972:	2b02      	cmp	r3, #2
 8010974:	d002      	beq.n	801097c <USBD_StdEPReq+0xac>
 8010976:	2b03      	cmp	r3, #3
 8010978:	d016      	beq.n	80109a8 <USBD_StdEPReq+0xd8>
 801097a:	e02c      	b.n	80109d6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801097c:	7bbb      	ldrb	r3, [r7, #14]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d00d      	beq.n	801099e <USBD_StdEPReq+0xce>
 8010982:	7bbb      	ldrb	r3, [r7, #14]
 8010984:	2b80      	cmp	r3, #128	@ 0x80
 8010986:	d00a      	beq.n	801099e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010988:	7bbb      	ldrb	r3, [r7, #14]
 801098a:	4619      	mov	r1, r3
 801098c:	6878      	ldr	r0, [r7, #4]
 801098e:	f001 f98f 	bl	8011cb0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010992:	2180      	movs	r1, #128	@ 0x80
 8010994:	6878      	ldr	r0, [r7, #4]
 8010996:	f001 f98b 	bl	8011cb0 <USBD_LL_StallEP>
 801099a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801099c:	e020      	b.n	80109e0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801099e:	6839      	ldr	r1, [r7, #0]
 80109a0:	6878      	ldr	r0, [r7, #4]
 80109a2:	f000 fca4 	bl	80112ee <USBD_CtlError>
              break;
 80109a6:	e01b      	b.n	80109e0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80109a8:	683b      	ldr	r3, [r7, #0]
 80109aa:	885b      	ldrh	r3, [r3, #2]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d10e      	bne.n	80109ce <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80109b0:	7bbb      	ldrb	r3, [r7, #14]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d00b      	beq.n	80109ce <USBD_StdEPReq+0xfe>
 80109b6:	7bbb      	ldrb	r3, [r7, #14]
 80109b8:	2b80      	cmp	r3, #128	@ 0x80
 80109ba:	d008      	beq.n	80109ce <USBD_StdEPReq+0xfe>
 80109bc:	683b      	ldr	r3, [r7, #0]
 80109be:	88db      	ldrh	r3, [r3, #6]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d104      	bne.n	80109ce <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80109c4:	7bbb      	ldrb	r3, [r7, #14]
 80109c6:	4619      	mov	r1, r3
 80109c8:	6878      	ldr	r0, [r7, #4]
 80109ca:	f001 f971 	bl	8011cb0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80109ce:	6878      	ldr	r0, [r7, #4]
 80109d0:	f000 fd64 	bl	801149c <USBD_CtlSendStatus>

              break;
 80109d4:	e004      	b.n	80109e0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80109d6:	6839      	ldr	r1, [r7, #0]
 80109d8:	6878      	ldr	r0, [r7, #4]
 80109da:	f000 fc88 	bl	80112ee <USBD_CtlError>
              break;
 80109de:	bf00      	nop
          }
          break;
 80109e0:	e107      	b.n	8010bf2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80109e8:	b2db      	uxtb	r3, r3
 80109ea:	2b02      	cmp	r3, #2
 80109ec:	d002      	beq.n	80109f4 <USBD_StdEPReq+0x124>
 80109ee:	2b03      	cmp	r3, #3
 80109f0:	d016      	beq.n	8010a20 <USBD_StdEPReq+0x150>
 80109f2:	e04b      	b.n	8010a8c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80109f4:	7bbb      	ldrb	r3, [r7, #14]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d00d      	beq.n	8010a16 <USBD_StdEPReq+0x146>
 80109fa:	7bbb      	ldrb	r3, [r7, #14]
 80109fc:	2b80      	cmp	r3, #128	@ 0x80
 80109fe:	d00a      	beq.n	8010a16 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010a00:	7bbb      	ldrb	r3, [r7, #14]
 8010a02:	4619      	mov	r1, r3
 8010a04:	6878      	ldr	r0, [r7, #4]
 8010a06:	f001 f953 	bl	8011cb0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010a0a:	2180      	movs	r1, #128	@ 0x80
 8010a0c:	6878      	ldr	r0, [r7, #4]
 8010a0e:	f001 f94f 	bl	8011cb0 <USBD_LL_StallEP>
 8010a12:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010a14:	e040      	b.n	8010a98 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8010a16:	6839      	ldr	r1, [r7, #0]
 8010a18:	6878      	ldr	r0, [r7, #4]
 8010a1a:	f000 fc68 	bl	80112ee <USBD_CtlError>
              break;
 8010a1e:	e03b      	b.n	8010a98 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010a20:	683b      	ldr	r3, [r7, #0]
 8010a22:	885b      	ldrh	r3, [r3, #2]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d136      	bne.n	8010a96 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010a28:	7bbb      	ldrb	r3, [r7, #14]
 8010a2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d004      	beq.n	8010a3c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010a32:	7bbb      	ldrb	r3, [r7, #14]
 8010a34:	4619      	mov	r1, r3
 8010a36:	6878      	ldr	r0, [r7, #4]
 8010a38:	f001 f959 	bl	8011cee <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8010a3c:	6878      	ldr	r0, [r7, #4]
 8010a3e:	f000 fd2d 	bl	801149c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8010a42:	7bbb      	ldrb	r3, [r7, #14]
 8010a44:	4619      	mov	r1, r3
 8010a46:	6878      	ldr	r0, [r7, #4]
 8010a48:	f7ff fde4 	bl	8010614 <USBD_CoreFindEP>
 8010a4c:	4603      	mov	r3, r0
 8010a4e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010a50:	7b7b      	ldrb	r3, [r7, #13]
 8010a52:	2bff      	cmp	r3, #255	@ 0xff
 8010a54:	d01f      	beq.n	8010a96 <USBD_StdEPReq+0x1c6>
 8010a56:	7b7b      	ldrb	r3, [r7, #13]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d11c      	bne.n	8010a96 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8010a5c:	7b7a      	ldrb	r2, [r7, #13]
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8010a64:	7b7a      	ldrb	r2, [r7, #13]
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	32ae      	adds	r2, #174	@ 0xae
 8010a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a6e:	689b      	ldr	r3, [r3, #8]
 8010a70:	2b00      	cmp	r3, #0
 8010a72:	d010      	beq.n	8010a96 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010a74:	7b7a      	ldrb	r2, [r7, #13]
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	32ae      	adds	r2, #174	@ 0xae
 8010a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a7e:	689b      	ldr	r3, [r3, #8]
 8010a80:	6839      	ldr	r1, [r7, #0]
 8010a82:	6878      	ldr	r0, [r7, #4]
 8010a84:	4798      	blx	r3
 8010a86:	4603      	mov	r3, r0
 8010a88:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8010a8a:	e004      	b.n	8010a96 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8010a8c:	6839      	ldr	r1, [r7, #0]
 8010a8e:	6878      	ldr	r0, [r7, #4]
 8010a90:	f000 fc2d 	bl	80112ee <USBD_CtlError>
              break;
 8010a94:	e000      	b.n	8010a98 <USBD_StdEPReq+0x1c8>
              break;
 8010a96:	bf00      	nop
          }
          break;
 8010a98:	e0ab      	b.n	8010bf2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010aa0:	b2db      	uxtb	r3, r3
 8010aa2:	2b02      	cmp	r3, #2
 8010aa4:	d002      	beq.n	8010aac <USBD_StdEPReq+0x1dc>
 8010aa6:	2b03      	cmp	r3, #3
 8010aa8:	d032      	beq.n	8010b10 <USBD_StdEPReq+0x240>
 8010aaa:	e097      	b.n	8010bdc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010aac:	7bbb      	ldrb	r3, [r7, #14]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d007      	beq.n	8010ac2 <USBD_StdEPReq+0x1f2>
 8010ab2:	7bbb      	ldrb	r3, [r7, #14]
 8010ab4:	2b80      	cmp	r3, #128	@ 0x80
 8010ab6:	d004      	beq.n	8010ac2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8010ab8:	6839      	ldr	r1, [r7, #0]
 8010aba:	6878      	ldr	r0, [r7, #4]
 8010abc:	f000 fc17 	bl	80112ee <USBD_CtlError>
                break;
 8010ac0:	e091      	b.n	8010be6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010ac2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	da0b      	bge.n	8010ae2 <USBD_StdEPReq+0x212>
 8010aca:	7bbb      	ldrb	r3, [r7, #14]
 8010acc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010ad0:	4613      	mov	r3, r2
 8010ad2:	009b      	lsls	r3, r3, #2
 8010ad4:	4413      	add	r3, r2
 8010ad6:	009b      	lsls	r3, r3, #2
 8010ad8:	3310      	adds	r3, #16
 8010ada:	687a      	ldr	r2, [r7, #4]
 8010adc:	4413      	add	r3, r2
 8010ade:	3304      	adds	r3, #4
 8010ae0:	e00b      	b.n	8010afa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010ae2:	7bbb      	ldrb	r3, [r7, #14]
 8010ae4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010ae8:	4613      	mov	r3, r2
 8010aea:	009b      	lsls	r3, r3, #2
 8010aec:	4413      	add	r3, r2
 8010aee:	009b      	lsls	r3, r3, #2
 8010af0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010af4:	687a      	ldr	r2, [r7, #4]
 8010af6:	4413      	add	r3, r2
 8010af8:	3304      	adds	r3, #4
 8010afa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010afc:	68bb      	ldr	r3, [r7, #8]
 8010afe:	2200      	movs	r2, #0
 8010b00:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010b02:	68bb      	ldr	r3, [r7, #8]
 8010b04:	2202      	movs	r2, #2
 8010b06:	4619      	mov	r1, r3
 8010b08:	6878      	ldr	r0, [r7, #4]
 8010b0a:	f000 fc6d 	bl	80113e8 <USBD_CtlSendData>
              break;
 8010b0e:	e06a      	b.n	8010be6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010b10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	da11      	bge.n	8010b3c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010b18:	7bbb      	ldrb	r3, [r7, #14]
 8010b1a:	f003 020f 	and.w	r2, r3, #15
 8010b1e:	6879      	ldr	r1, [r7, #4]
 8010b20:	4613      	mov	r3, r2
 8010b22:	009b      	lsls	r3, r3, #2
 8010b24:	4413      	add	r3, r2
 8010b26:	009b      	lsls	r3, r3, #2
 8010b28:	440b      	add	r3, r1
 8010b2a:	3324      	adds	r3, #36	@ 0x24
 8010b2c:	881b      	ldrh	r3, [r3, #0]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d117      	bne.n	8010b62 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010b32:	6839      	ldr	r1, [r7, #0]
 8010b34:	6878      	ldr	r0, [r7, #4]
 8010b36:	f000 fbda 	bl	80112ee <USBD_CtlError>
                  break;
 8010b3a:	e054      	b.n	8010be6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010b3c:	7bbb      	ldrb	r3, [r7, #14]
 8010b3e:	f003 020f 	and.w	r2, r3, #15
 8010b42:	6879      	ldr	r1, [r7, #4]
 8010b44:	4613      	mov	r3, r2
 8010b46:	009b      	lsls	r3, r3, #2
 8010b48:	4413      	add	r3, r2
 8010b4a:	009b      	lsls	r3, r3, #2
 8010b4c:	440b      	add	r3, r1
 8010b4e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010b52:	881b      	ldrh	r3, [r3, #0]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d104      	bne.n	8010b62 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010b58:	6839      	ldr	r1, [r7, #0]
 8010b5a:	6878      	ldr	r0, [r7, #4]
 8010b5c:	f000 fbc7 	bl	80112ee <USBD_CtlError>
                  break;
 8010b60:	e041      	b.n	8010be6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010b62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	da0b      	bge.n	8010b82 <USBD_StdEPReq+0x2b2>
 8010b6a:	7bbb      	ldrb	r3, [r7, #14]
 8010b6c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010b70:	4613      	mov	r3, r2
 8010b72:	009b      	lsls	r3, r3, #2
 8010b74:	4413      	add	r3, r2
 8010b76:	009b      	lsls	r3, r3, #2
 8010b78:	3310      	adds	r3, #16
 8010b7a:	687a      	ldr	r2, [r7, #4]
 8010b7c:	4413      	add	r3, r2
 8010b7e:	3304      	adds	r3, #4
 8010b80:	e00b      	b.n	8010b9a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010b82:	7bbb      	ldrb	r3, [r7, #14]
 8010b84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010b88:	4613      	mov	r3, r2
 8010b8a:	009b      	lsls	r3, r3, #2
 8010b8c:	4413      	add	r3, r2
 8010b8e:	009b      	lsls	r3, r3, #2
 8010b90:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010b94:	687a      	ldr	r2, [r7, #4]
 8010b96:	4413      	add	r3, r2
 8010b98:	3304      	adds	r3, #4
 8010b9a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010b9c:	7bbb      	ldrb	r3, [r7, #14]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d002      	beq.n	8010ba8 <USBD_StdEPReq+0x2d8>
 8010ba2:	7bbb      	ldrb	r3, [r7, #14]
 8010ba4:	2b80      	cmp	r3, #128	@ 0x80
 8010ba6:	d103      	bne.n	8010bb0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8010ba8:	68bb      	ldr	r3, [r7, #8]
 8010baa:	2200      	movs	r2, #0
 8010bac:	601a      	str	r2, [r3, #0]
 8010bae:	e00e      	b.n	8010bce <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010bb0:	7bbb      	ldrb	r3, [r7, #14]
 8010bb2:	4619      	mov	r1, r3
 8010bb4:	6878      	ldr	r0, [r7, #4]
 8010bb6:	f001 f8b9 	bl	8011d2c <USBD_LL_IsStallEP>
 8010bba:	4603      	mov	r3, r0
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d003      	beq.n	8010bc8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8010bc0:	68bb      	ldr	r3, [r7, #8]
 8010bc2:	2201      	movs	r2, #1
 8010bc4:	601a      	str	r2, [r3, #0]
 8010bc6:	e002      	b.n	8010bce <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8010bc8:	68bb      	ldr	r3, [r7, #8]
 8010bca:	2200      	movs	r2, #0
 8010bcc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010bce:	68bb      	ldr	r3, [r7, #8]
 8010bd0:	2202      	movs	r2, #2
 8010bd2:	4619      	mov	r1, r3
 8010bd4:	6878      	ldr	r0, [r7, #4]
 8010bd6:	f000 fc07 	bl	80113e8 <USBD_CtlSendData>
              break;
 8010bda:	e004      	b.n	8010be6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8010bdc:	6839      	ldr	r1, [r7, #0]
 8010bde:	6878      	ldr	r0, [r7, #4]
 8010be0:	f000 fb85 	bl	80112ee <USBD_CtlError>
              break;
 8010be4:	bf00      	nop
          }
          break;
 8010be6:	e004      	b.n	8010bf2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8010be8:	6839      	ldr	r1, [r7, #0]
 8010bea:	6878      	ldr	r0, [r7, #4]
 8010bec:	f000 fb7f 	bl	80112ee <USBD_CtlError>
          break;
 8010bf0:	bf00      	nop
      }
      break;
 8010bf2:	e005      	b.n	8010c00 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8010bf4:	6839      	ldr	r1, [r7, #0]
 8010bf6:	6878      	ldr	r0, [r7, #4]
 8010bf8:	f000 fb79 	bl	80112ee <USBD_CtlError>
      break;
 8010bfc:	e000      	b.n	8010c00 <USBD_StdEPReq+0x330>
      break;
 8010bfe:	bf00      	nop
  }

  return ret;
 8010c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c02:	4618      	mov	r0, r3
 8010c04:	3710      	adds	r7, #16
 8010c06:	46bd      	mov	sp, r7
 8010c08:	bd80      	pop	{r7, pc}
	...

08010c0c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	b084      	sub	sp, #16
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	6078      	str	r0, [r7, #4]
 8010c14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010c16:	2300      	movs	r3, #0
 8010c18:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010c1e:	2300      	movs	r3, #0
 8010c20:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010c22:	683b      	ldr	r3, [r7, #0]
 8010c24:	885b      	ldrh	r3, [r3, #2]
 8010c26:	0a1b      	lsrs	r3, r3, #8
 8010c28:	b29b      	uxth	r3, r3
 8010c2a:	3b01      	subs	r3, #1
 8010c2c:	2b0e      	cmp	r3, #14
 8010c2e:	f200 8152 	bhi.w	8010ed6 <USBD_GetDescriptor+0x2ca>
 8010c32:	a201      	add	r2, pc, #4	@ (adr r2, 8010c38 <USBD_GetDescriptor+0x2c>)
 8010c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c38:	08010ca9 	.word	0x08010ca9
 8010c3c:	08010cc1 	.word	0x08010cc1
 8010c40:	08010d01 	.word	0x08010d01
 8010c44:	08010ed7 	.word	0x08010ed7
 8010c48:	08010ed7 	.word	0x08010ed7
 8010c4c:	08010e77 	.word	0x08010e77
 8010c50:	08010ea3 	.word	0x08010ea3
 8010c54:	08010ed7 	.word	0x08010ed7
 8010c58:	08010ed7 	.word	0x08010ed7
 8010c5c:	08010ed7 	.word	0x08010ed7
 8010c60:	08010ed7 	.word	0x08010ed7
 8010c64:	08010ed7 	.word	0x08010ed7
 8010c68:	08010ed7 	.word	0x08010ed7
 8010c6c:	08010ed7 	.word	0x08010ed7
 8010c70:	08010c75 	.word	0x08010c75
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010c7a:	69db      	ldr	r3, [r3, #28]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d00b      	beq.n	8010c98 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010c86:	69db      	ldr	r3, [r3, #28]
 8010c88:	687a      	ldr	r2, [r7, #4]
 8010c8a:	7c12      	ldrb	r2, [r2, #16]
 8010c8c:	f107 0108 	add.w	r1, r7, #8
 8010c90:	4610      	mov	r0, r2
 8010c92:	4798      	blx	r3
 8010c94:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010c96:	e126      	b.n	8010ee6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010c98:	6839      	ldr	r1, [r7, #0]
 8010c9a:	6878      	ldr	r0, [r7, #4]
 8010c9c:	f000 fb27 	bl	80112ee <USBD_CtlError>
        err++;
 8010ca0:	7afb      	ldrb	r3, [r7, #11]
 8010ca2:	3301      	adds	r3, #1
 8010ca4:	72fb      	strb	r3, [r7, #11]
      break;
 8010ca6:	e11e      	b.n	8010ee6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	687a      	ldr	r2, [r7, #4]
 8010cb2:	7c12      	ldrb	r2, [r2, #16]
 8010cb4:	f107 0108 	add.w	r1, r7, #8
 8010cb8:	4610      	mov	r0, r2
 8010cba:	4798      	blx	r3
 8010cbc:	60f8      	str	r0, [r7, #12]
      break;
 8010cbe:	e112      	b.n	8010ee6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	7c1b      	ldrb	r3, [r3, #16]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d10d      	bne.n	8010ce4 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010cd0:	f107 0208 	add.w	r2, r7, #8
 8010cd4:	4610      	mov	r0, r2
 8010cd6:	4798      	blx	r3
 8010cd8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	3301      	adds	r3, #1
 8010cde:	2202      	movs	r2, #2
 8010ce0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8010ce2:	e100      	b.n	8010ee6 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010cec:	f107 0208 	add.w	r2, r7, #8
 8010cf0:	4610      	mov	r0, r2
 8010cf2:	4798      	blx	r3
 8010cf4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	3301      	adds	r3, #1
 8010cfa:	2202      	movs	r2, #2
 8010cfc:	701a      	strb	r2, [r3, #0]
      break;
 8010cfe:	e0f2      	b.n	8010ee6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010d00:	683b      	ldr	r3, [r7, #0]
 8010d02:	885b      	ldrh	r3, [r3, #2]
 8010d04:	b2db      	uxtb	r3, r3
 8010d06:	2b05      	cmp	r3, #5
 8010d08:	f200 80ac 	bhi.w	8010e64 <USBD_GetDescriptor+0x258>
 8010d0c:	a201      	add	r2, pc, #4	@ (adr r2, 8010d14 <USBD_GetDescriptor+0x108>)
 8010d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d12:	bf00      	nop
 8010d14:	08010d2d 	.word	0x08010d2d
 8010d18:	08010d61 	.word	0x08010d61
 8010d1c:	08010d95 	.word	0x08010d95
 8010d20:	08010dc9 	.word	0x08010dc9
 8010d24:	08010dfd 	.word	0x08010dfd
 8010d28:	08010e31 	.word	0x08010e31
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010d32:	685b      	ldr	r3, [r3, #4]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d00b      	beq.n	8010d50 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010d3e:	685b      	ldr	r3, [r3, #4]
 8010d40:	687a      	ldr	r2, [r7, #4]
 8010d42:	7c12      	ldrb	r2, [r2, #16]
 8010d44:	f107 0108 	add.w	r1, r7, #8
 8010d48:	4610      	mov	r0, r2
 8010d4a:	4798      	blx	r3
 8010d4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010d4e:	e091      	b.n	8010e74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010d50:	6839      	ldr	r1, [r7, #0]
 8010d52:	6878      	ldr	r0, [r7, #4]
 8010d54:	f000 facb 	bl	80112ee <USBD_CtlError>
            err++;
 8010d58:	7afb      	ldrb	r3, [r7, #11]
 8010d5a:	3301      	adds	r3, #1
 8010d5c:	72fb      	strb	r3, [r7, #11]
          break;
 8010d5e:	e089      	b.n	8010e74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010d66:	689b      	ldr	r3, [r3, #8]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d00b      	beq.n	8010d84 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010d72:	689b      	ldr	r3, [r3, #8]
 8010d74:	687a      	ldr	r2, [r7, #4]
 8010d76:	7c12      	ldrb	r2, [r2, #16]
 8010d78:	f107 0108 	add.w	r1, r7, #8
 8010d7c:	4610      	mov	r0, r2
 8010d7e:	4798      	blx	r3
 8010d80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010d82:	e077      	b.n	8010e74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010d84:	6839      	ldr	r1, [r7, #0]
 8010d86:	6878      	ldr	r0, [r7, #4]
 8010d88:	f000 fab1 	bl	80112ee <USBD_CtlError>
            err++;
 8010d8c:	7afb      	ldrb	r3, [r7, #11]
 8010d8e:	3301      	adds	r3, #1
 8010d90:	72fb      	strb	r3, [r7, #11]
          break;
 8010d92:	e06f      	b.n	8010e74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010d9a:	68db      	ldr	r3, [r3, #12]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d00b      	beq.n	8010db8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010da6:	68db      	ldr	r3, [r3, #12]
 8010da8:	687a      	ldr	r2, [r7, #4]
 8010daa:	7c12      	ldrb	r2, [r2, #16]
 8010dac:	f107 0108 	add.w	r1, r7, #8
 8010db0:	4610      	mov	r0, r2
 8010db2:	4798      	blx	r3
 8010db4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010db6:	e05d      	b.n	8010e74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010db8:	6839      	ldr	r1, [r7, #0]
 8010dba:	6878      	ldr	r0, [r7, #4]
 8010dbc:	f000 fa97 	bl	80112ee <USBD_CtlError>
            err++;
 8010dc0:	7afb      	ldrb	r3, [r7, #11]
 8010dc2:	3301      	adds	r3, #1
 8010dc4:	72fb      	strb	r3, [r7, #11]
          break;
 8010dc6:	e055      	b.n	8010e74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010dce:	691b      	ldr	r3, [r3, #16]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d00b      	beq.n	8010dec <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010dda:	691b      	ldr	r3, [r3, #16]
 8010ddc:	687a      	ldr	r2, [r7, #4]
 8010dde:	7c12      	ldrb	r2, [r2, #16]
 8010de0:	f107 0108 	add.w	r1, r7, #8
 8010de4:	4610      	mov	r0, r2
 8010de6:	4798      	blx	r3
 8010de8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010dea:	e043      	b.n	8010e74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010dec:	6839      	ldr	r1, [r7, #0]
 8010dee:	6878      	ldr	r0, [r7, #4]
 8010df0:	f000 fa7d 	bl	80112ee <USBD_CtlError>
            err++;
 8010df4:	7afb      	ldrb	r3, [r7, #11]
 8010df6:	3301      	adds	r3, #1
 8010df8:	72fb      	strb	r3, [r7, #11]
          break;
 8010dfa:	e03b      	b.n	8010e74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010e02:	695b      	ldr	r3, [r3, #20]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d00b      	beq.n	8010e20 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010e0e:	695b      	ldr	r3, [r3, #20]
 8010e10:	687a      	ldr	r2, [r7, #4]
 8010e12:	7c12      	ldrb	r2, [r2, #16]
 8010e14:	f107 0108 	add.w	r1, r7, #8
 8010e18:	4610      	mov	r0, r2
 8010e1a:	4798      	blx	r3
 8010e1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010e1e:	e029      	b.n	8010e74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010e20:	6839      	ldr	r1, [r7, #0]
 8010e22:	6878      	ldr	r0, [r7, #4]
 8010e24:	f000 fa63 	bl	80112ee <USBD_CtlError>
            err++;
 8010e28:	7afb      	ldrb	r3, [r7, #11]
 8010e2a:	3301      	adds	r3, #1
 8010e2c:	72fb      	strb	r3, [r7, #11]
          break;
 8010e2e:	e021      	b.n	8010e74 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010e36:	699b      	ldr	r3, [r3, #24]
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d00b      	beq.n	8010e54 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010e42:	699b      	ldr	r3, [r3, #24]
 8010e44:	687a      	ldr	r2, [r7, #4]
 8010e46:	7c12      	ldrb	r2, [r2, #16]
 8010e48:	f107 0108 	add.w	r1, r7, #8
 8010e4c:	4610      	mov	r0, r2
 8010e4e:	4798      	blx	r3
 8010e50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010e52:	e00f      	b.n	8010e74 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010e54:	6839      	ldr	r1, [r7, #0]
 8010e56:	6878      	ldr	r0, [r7, #4]
 8010e58:	f000 fa49 	bl	80112ee <USBD_CtlError>
            err++;
 8010e5c:	7afb      	ldrb	r3, [r7, #11]
 8010e5e:	3301      	adds	r3, #1
 8010e60:	72fb      	strb	r3, [r7, #11]
          break;
 8010e62:	e007      	b.n	8010e74 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010e64:	6839      	ldr	r1, [r7, #0]
 8010e66:	6878      	ldr	r0, [r7, #4]
 8010e68:	f000 fa41 	bl	80112ee <USBD_CtlError>
          err++;
 8010e6c:	7afb      	ldrb	r3, [r7, #11]
 8010e6e:	3301      	adds	r3, #1
 8010e70:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8010e72:	bf00      	nop
      }
      break;
 8010e74:	e037      	b.n	8010ee6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	7c1b      	ldrb	r3, [r3, #16]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d109      	bne.n	8010e92 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010e84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010e86:	f107 0208 	add.w	r2, r7, #8
 8010e8a:	4610      	mov	r0, r2
 8010e8c:	4798      	blx	r3
 8010e8e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010e90:	e029      	b.n	8010ee6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010e92:	6839      	ldr	r1, [r7, #0]
 8010e94:	6878      	ldr	r0, [r7, #4]
 8010e96:	f000 fa2a 	bl	80112ee <USBD_CtlError>
        err++;
 8010e9a:	7afb      	ldrb	r3, [r7, #11]
 8010e9c:	3301      	adds	r3, #1
 8010e9e:	72fb      	strb	r3, [r7, #11]
      break;
 8010ea0:	e021      	b.n	8010ee6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	7c1b      	ldrb	r3, [r3, #16]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d10d      	bne.n	8010ec6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010eb2:	f107 0208 	add.w	r2, r7, #8
 8010eb6:	4610      	mov	r0, r2
 8010eb8:	4798      	blx	r3
 8010eba:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	3301      	adds	r3, #1
 8010ec0:	2207      	movs	r2, #7
 8010ec2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010ec4:	e00f      	b.n	8010ee6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010ec6:	6839      	ldr	r1, [r7, #0]
 8010ec8:	6878      	ldr	r0, [r7, #4]
 8010eca:	f000 fa10 	bl	80112ee <USBD_CtlError>
        err++;
 8010ece:	7afb      	ldrb	r3, [r7, #11]
 8010ed0:	3301      	adds	r3, #1
 8010ed2:	72fb      	strb	r3, [r7, #11]
      break;
 8010ed4:	e007      	b.n	8010ee6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8010ed6:	6839      	ldr	r1, [r7, #0]
 8010ed8:	6878      	ldr	r0, [r7, #4]
 8010eda:	f000 fa08 	bl	80112ee <USBD_CtlError>
      err++;
 8010ede:	7afb      	ldrb	r3, [r7, #11]
 8010ee0:	3301      	adds	r3, #1
 8010ee2:	72fb      	strb	r3, [r7, #11]
      break;
 8010ee4:	bf00      	nop
  }

  if (err != 0U)
 8010ee6:	7afb      	ldrb	r3, [r7, #11]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d11e      	bne.n	8010f2a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8010eec:	683b      	ldr	r3, [r7, #0]
 8010eee:	88db      	ldrh	r3, [r3, #6]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d016      	beq.n	8010f22 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8010ef4:	893b      	ldrh	r3, [r7, #8]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d00e      	beq.n	8010f18 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8010efa:	683b      	ldr	r3, [r7, #0]
 8010efc:	88da      	ldrh	r2, [r3, #6]
 8010efe:	893b      	ldrh	r3, [r7, #8]
 8010f00:	4293      	cmp	r3, r2
 8010f02:	bf28      	it	cs
 8010f04:	4613      	movcs	r3, r2
 8010f06:	b29b      	uxth	r3, r3
 8010f08:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010f0a:	893b      	ldrh	r3, [r7, #8]
 8010f0c:	461a      	mov	r2, r3
 8010f0e:	68f9      	ldr	r1, [r7, #12]
 8010f10:	6878      	ldr	r0, [r7, #4]
 8010f12:	f000 fa69 	bl	80113e8 <USBD_CtlSendData>
 8010f16:	e009      	b.n	8010f2c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010f18:	6839      	ldr	r1, [r7, #0]
 8010f1a:	6878      	ldr	r0, [r7, #4]
 8010f1c:	f000 f9e7 	bl	80112ee <USBD_CtlError>
 8010f20:	e004      	b.n	8010f2c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010f22:	6878      	ldr	r0, [r7, #4]
 8010f24:	f000 faba 	bl	801149c <USBD_CtlSendStatus>
 8010f28:	e000      	b.n	8010f2c <USBD_GetDescriptor+0x320>
    return;
 8010f2a:	bf00      	nop
  }
}
 8010f2c:	3710      	adds	r7, #16
 8010f2e:	46bd      	mov	sp, r7
 8010f30:	bd80      	pop	{r7, pc}
 8010f32:	bf00      	nop

08010f34 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010f34:	b580      	push	{r7, lr}
 8010f36:	b084      	sub	sp, #16
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	6078      	str	r0, [r7, #4]
 8010f3c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010f3e:	683b      	ldr	r3, [r7, #0]
 8010f40:	889b      	ldrh	r3, [r3, #4]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d131      	bne.n	8010faa <USBD_SetAddress+0x76>
 8010f46:	683b      	ldr	r3, [r7, #0]
 8010f48:	88db      	ldrh	r3, [r3, #6]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d12d      	bne.n	8010faa <USBD_SetAddress+0x76>
 8010f4e:	683b      	ldr	r3, [r7, #0]
 8010f50:	885b      	ldrh	r3, [r3, #2]
 8010f52:	2b7f      	cmp	r3, #127	@ 0x7f
 8010f54:	d829      	bhi.n	8010faa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010f56:	683b      	ldr	r3, [r7, #0]
 8010f58:	885b      	ldrh	r3, [r3, #2]
 8010f5a:	b2db      	uxtb	r3, r3
 8010f5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010f60:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010f68:	b2db      	uxtb	r3, r3
 8010f6a:	2b03      	cmp	r3, #3
 8010f6c:	d104      	bne.n	8010f78 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010f6e:	6839      	ldr	r1, [r7, #0]
 8010f70:	6878      	ldr	r0, [r7, #4]
 8010f72:	f000 f9bc 	bl	80112ee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f76:	e01d      	b.n	8010fb4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	7bfa      	ldrb	r2, [r7, #15]
 8010f7c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010f80:	7bfb      	ldrb	r3, [r7, #15]
 8010f82:	4619      	mov	r1, r3
 8010f84:	6878      	ldr	r0, [r7, #4]
 8010f86:	f000 fefd 	bl	8011d84 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010f8a:	6878      	ldr	r0, [r7, #4]
 8010f8c:	f000 fa86 	bl	801149c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010f90:	7bfb      	ldrb	r3, [r7, #15]
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d004      	beq.n	8010fa0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	2202      	movs	r2, #2
 8010f9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010f9e:	e009      	b.n	8010fb4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	2201      	movs	r2, #1
 8010fa4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010fa8:	e004      	b.n	8010fb4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010faa:	6839      	ldr	r1, [r7, #0]
 8010fac:	6878      	ldr	r0, [r7, #4]
 8010fae:	f000 f99e 	bl	80112ee <USBD_CtlError>
  }
}
 8010fb2:	bf00      	nop
 8010fb4:	bf00      	nop
 8010fb6:	3710      	adds	r7, #16
 8010fb8:	46bd      	mov	sp, r7
 8010fba:	bd80      	pop	{r7, pc}

08010fbc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010fbc:	b580      	push	{r7, lr}
 8010fbe:	b084      	sub	sp, #16
 8010fc0:	af00      	add	r7, sp, #0
 8010fc2:	6078      	str	r0, [r7, #4]
 8010fc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010fca:	683b      	ldr	r3, [r7, #0]
 8010fcc:	885b      	ldrh	r3, [r3, #2]
 8010fce:	b2da      	uxtb	r2, r3
 8010fd0:	4b4e      	ldr	r3, [pc, #312]	@ (801110c <USBD_SetConfig+0x150>)
 8010fd2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010fd4:	4b4d      	ldr	r3, [pc, #308]	@ (801110c <USBD_SetConfig+0x150>)
 8010fd6:	781b      	ldrb	r3, [r3, #0]
 8010fd8:	2b01      	cmp	r3, #1
 8010fda:	d905      	bls.n	8010fe8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010fdc:	6839      	ldr	r1, [r7, #0]
 8010fde:	6878      	ldr	r0, [r7, #4]
 8010fe0:	f000 f985 	bl	80112ee <USBD_CtlError>
    return USBD_FAIL;
 8010fe4:	2303      	movs	r3, #3
 8010fe6:	e08c      	b.n	8011102 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010fee:	b2db      	uxtb	r3, r3
 8010ff0:	2b02      	cmp	r3, #2
 8010ff2:	d002      	beq.n	8010ffa <USBD_SetConfig+0x3e>
 8010ff4:	2b03      	cmp	r3, #3
 8010ff6:	d029      	beq.n	801104c <USBD_SetConfig+0x90>
 8010ff8:	e075      	b.n	80110e6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010ffa:	4b44      	ldr	r3, [pc, #272]	@ (801110c <USBD_SetConfig+0x150>)
 8010ffc:	781b      	ldrb	r3, [r3, #0]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d020      	beq.n	8011044 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8011002:	4b42      	ldr	r3, [pc, #264]	@ (801110c <USBD_SetConfig+0x150>)
 8011004:	781b      	ldrb	r3, [r3, #0]
 8011006:	461a      	mov	r2, r3
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801100c:	4b3f      	ldr	r3, [pc, #252]	@ (801110c <USBD_SetConfig+0x150>)
 801100e:	781b      	ldrb	r3, [r3, #0]
 8011010:	4619      	mov	r1, r3
 8011012:	6878      	ldr	r0, [r7, #4]
 8011014:	f7ff f84b 	bl	80100ae <USBD_SetClassConfig>
 8011018:	4603      	mov	r3, r0
 801101a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801101c:	7bfb      	ldrb	r3, [r7, #15]
 801101e:	2b00      	cmp	r3, #0
 8011020:	d008      	beq.n	8011034 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8011022:	6839      	ldr	r1, [r7, #0]
 8011024:	6878      	ldr	r0, [r7, #4]
 8011026:	f000 f962 	bl	80112ee <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	2202      	movs	r2, #2
 801102e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011032:	e065      	b.n	8011100 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011034:	6878      	ldr	r0, [r7, #4]
 8011036:	f000 fa31 	bl	801149c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	2203      	movs	r2, #3
 801103e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011042:	e05d      	b.n	8011100 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011044:	6878      	ldr	r0, [r7, #4]
 8011046:	f000 fa29 	bl	801149c <USBD_CtlSendStatus>
      break;
 801104a:	e059      	b.n	8011100 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801104c:	4b2f      	ldr	r3, [pc, #188]	@ (801110c <USBD_SetConfig+0x150>)
 801104e:	781b      	ldrb	r3, [r3, #0]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d112      	bne.n	801107a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	2202      	movs	r2, #2
 8011058:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 801105c:	4b2b      	ldr	r3, [pc, #172]	@ (801110c <USBD_SetConfig+0x150>)
 801105e:	781b      	ldrb	r3, [r3, #0]
 8011060:	461a      	mov	r2, r3
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8011066:	4b29      	ldr	r3, [pc, #164]	@ (801110c <USBD_SetConfig+0x150>)
 8011068:	781b      	ldrb	r3, [r3, #0]
 801106a:	4619      	mov	r1, r3
 801106c:	6878      	ldr	r0, [r7, #4]
 801106e:	f7ff f83a 	bl	80100e6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8011072:	6878      	ldr	r0, [r7, #4]
 8011074:	f000 fa12 	bl	801149c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8011078:	e042      	b.n	8011100 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801107a:	4b24      	ldr	r3, [pc, #144]	@ (801110c <USBD_SetConfig+0x150>)
 801107c:	781b      	ldrb	r3, [r3, #0]
 801107e:	461a      	mov	r2, r3
 8011080:	687b      	ldr	r3, [r7, #4]
 8011082:	685b      	ldr	r3, [r3, #4]
 8011084:	429a      	cmp	r2, r3
 8011086:	d02a      	beq.n	80110de <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	685b      	ldr	r3, [r3, #4]
 801108c:	b2db      	uxtb	r3, r3
 801108e:	4619      	mov	r1, r3
 8011090:	6878      	ldr	r0, [r7, #4]
 8011092:	f7ff f828 	bl	80100e6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011096:	4b1d      	ldr	r3, [pc, #116]	@ (801110c <USBD_SetConfig+0x150>)
 8011098:	781b      	ldrb	r3, [r3, #0]
 801109a:	461a      	mov	r2, r3
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80110a0:	4b1a      	ldr	r3, [pc, #104]	@ (801110c <USBD_SetConfig+0x150>)
 80110a2:	781b      	ldrb	r3, [r3, #0]
 80110a4:	4619      	mov	r1, r3
 80110a6:	6878      	ldr	r0, [r7, #4]
 80110a8:	f7ff f801 	bl	80100ae <USBD_SetClassConfig>
 80110ac:	4603      	mov	r3, r0
 80110ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80110b0:	7bfb      	ldrb	r3, [r7, #15]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d00f      	beq.n	80110d6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80110b6:	6839      	ldr	r1, [r7, #0]
 80110b8:	6878      	ldr	r0, [r7, #4]
 80110ba:	f000 f918 	bl	80112ee <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	685b      	ldr	r3, [r3, #4]
 80110c2:	b2db      	uxtb	r3, r3
 80110c4:	4619      	mov	r1, r3
 80110c6:	6878      	ldr	r0, [r7, #4]
 80110c8:	f7ff f80d 	bl	80100e6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	2202      	movs	r2, #2
 80110d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80110d4:	e014      	b.n	8011100 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80110d6:	6878      	ldr	r0, [r7, #4]
 80110d8:	f000 f9e0 	bl	801149c <USBD_CtlSendStatus>
      break;
 80110dc:	e010      	b.n	8011100 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80110de:	6878      	ldr	r0, [r7, #4]
 80110e0:	f000 f9dc 	bl	801149c <USBD_CtlSendStatus>
      break;
 80110e4:	e00c      	b.n	8011100 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80110e6:	6839      	ldr	r1, [r7, #0]
 80110e8:	6878      	ldr	r0, [r7, #4]
 80110ea:	f000 f900 	bl	80112ee <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80110ee:	4b07      	ldr	r3, [pc, #28]	@ (801110c <USBD_SetConfig+0x150>)
 80110f0:	781b      	ldrb	r3, [r3, #0]
 80110f2:	4619      	mov	r1, r3
 80110f4:	6878      	ldr	r0, [r7, #4]
 80110f6:	f7fe fff6 	bl	80100e6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80110fa:	2303      	movs	r3, #3
 80110fc:	73fb      	strb	r3, [r7, #15]
      break;
 80110fe:	bf00      	nop
  }

  return ret;
 8011100:	7bfb      	ldrb	r3, [r7, #15]
}
 8011102:	4618      	mov	r0, r3
 8011104:	3710      	adds	r7, #16
 8011106:	46bd      	mov	sp, r7
 8011108:	bd80      	pop	{r7, pc}
 801110a:	bf00      	nop
 801110c:	200007c4 	.word	0x200007c4

08011110 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011110:	b580      	push	{r7, lr}
 8011112:	b082      	sub	sp, #8
 8011114:	af00      	add	r7, sp, #0
 8011116:	6078      	str	r0, [r7, #4]
 8011118:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801111a:	683b      	ldr	r3, [r7, #0]
 801111c:	88db      	ldrh	r3, [r3, #6]
 801111e:	2b01      	cmp	r3, #1
 8011120:	d004      	beq.n	801112c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8011122:	6839      	ldr	r1, [r7, #0]
 8011124:	6878      	ldr	r0, [r7, #4]
 8011126:	f000 f8e2 	bl	80112ee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801112a:	e023      	b.n	8011174 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011132:	b2db      	uxtb	r3, r3
 8011134:	2b02      	cmp	r3, #2
 8011136:	dc02      	bgt.n	801113e <USBD_GetConfig+0x2e>
 8011138:	2b00      	cmp	r3, #0
 801113a:	dc03      	bgt.n	8011144 <USBD_GetConfig+0x34>
 801113c:	e015      	b.n	801116a <USBD_GetConfig+0x5a>
 801113e:	2b03      	cmp	r3, #3
 8011140:	d00b      	beq.n	801115a <USBD_GetConfig+0x4a>
 8011142:	e012      	b.n	801116a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	2200      	movs	r2, #0
 8011148:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	3308      	adds	r3, #8
 801114e:	2201      	movs	r2, #1
 8011150:	4619      	mov	r1, r3
 8011152:	6878      	ldr	r0, [r7, #4]
 8011154:	f000 f948 	bl	80113e8 <USBD_CtlSendData>
        break;
 8011158:	e00c      	b.n	8011174 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	3304      	adds	r3, #4
 801115e:	2201      	movs	r2, #1
 8011160:	4619      	mov	r1, r3
 8011162:	6878      	ldr	r0, [r7, #4]
 8011164:	f000 f940 	bl	80113e8 <USBD_CtlSendData>
        break;
 8011168:	e004      	b.n	8011174 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801116a:	6839      	ldr	r1, [r7, #0]
 801116c:	6878      	ldr	r0, [r7, #4]
 801116e:	f000 f8be 	bl	80112ee <USBD_CtlError>
        break;
 8011172:	bf00      	nop
}
 8011174:	bf00      	nop
 8011176:	3708      	adds	r7, #8
 8011178:	46bd      	mov	sp, r7
 801117a:	bd80      	pop	{r7, pc}

0801117c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801117c:	b580      	push	{r7, lr}
 801117e:	b082      	sub	sp, #8
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
 8011184:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801118c:	b2db      	uxtb	r3, r3
 801118e:	3b01      	subs	r3, #1
 8011190:	2b02      	cmp	r3, #2
 8011192:	d81e      	bhi.n	80111d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011194:	683b      	ldr	r3, [r7, #0]
 8011196:	88db      	ldrh	r3, [r3, #6]
 8011198:	2b02      	cmp	r3, #2
 801119a:	d004      	beq.n	80111a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801119c:	6839      	ldr	r1, [r7, #0]
 801119e:	6878      	ldr	r0, [r7, #4]
 80111a0:	f000 f8a5 	bl	80112ee <USBD_CtlError>
        break;
 80111a4:	e01a      	b.n	80111dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	2201      	movs	r2, #1
 80111aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d005      	beq.n	80111c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	68db      	ldr	r3, [r3, #12]
 80111ba:	f043 0202 	orr.w	r2, r3, #2
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	330c      	adds	r3, #12
 80111c6:	2202      	movs	r2, #2
 80111c8:	4619      	mov	r1, r3
 80111ca:	6878      	ldr	r0, [r7, #4]
 80111cc:	f000 f90c 	bl	80113e8 <USBD_CtlSendData>
      break;
 80111d0:	e004      	b.n	80111dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80111d2:	6839      	ldr	r1, [r7, #0]
 80111d4:	6878      	ldr	r0, [r7, #4]
 80111d6:	f000 f88a 	bl	80112ee <USBD_CtlError>
      break;
 80111da:	bf00      	nop
  }
}
 80111dc:	bf00      	nop
 80111de:	3708      	adds	r7, #8
 80111e0:	46bd      	mov	sp, r7
 80111e2:	bd80      	pop	{r7, pc}

080111e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80111e4:	b580      	push	{r7, lr}
 80111e6:	b082      	sub	sp, #8
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	6078      	str	r0, [r7, #4]
 80111ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80111ee:	683b      	ldr	r3, [r7, #0]
 80111f0:	885b      	ldrh	r3, [r3, #2]
 80111f2:	2b01      	cmp	r3, #1
 80111f4:	d107      	bne.n	8011206 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	2201      	movs	r2, #1
 80111fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80111fe:	6878      	ldr	r0, [r7, #4]
 8011200:	f000 f94c 	bl	801149c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8011204:	e013      	b.n	801122e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8011206:	683b      	ldr	r3, [r7, #0]
 8011208:	885b      	ldrh	r3, [r3, #2]
 801120a:	2b02      	cmp	r3, #2
 801120c:	d10b      	bne.n	8011226 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801120e:	683b      	ldr	r3, [r7, #0]
 8011210:	889b      	ldrh	r3, [r3, #4]
 8011212:	0a1b      	lsrs	r3, r3, #8
 8011214:	b29b      	uxth	r3, r3
 8011216:	b2da      	uxtb	r2, r3
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801121e:	6878      	ldr	r0, [r7, #4]
 8011220:	f000 f93c 	bl	801149c <USBD_CtlSendStatus>
}
 8011224:	e003      	b.n	801122e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8011226:	6839      	ldr	r1, [r7, #0]
 8011228:	6878      	ldr	r0, [r7, #4]
 801122a:	f000 f860 	bl	80112ee <USBD_CtlError>
}
 801122e:	bf00      	nop
 8011230:	3708      	adds	r7, #8
 8011232:	46bd      	mov	sp, r7
 8011234:	bd80      	pop	{r7, pc}

08011236 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011236:	b580      	push	{r7, lr}
 8011238:	b082      	sub	sp, #8
 801123a:	af00      	add	r7, sp, #0
 801123c:	6078      	str	r0, [r7, #4]
 801123e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011246:	b2db      	uxtb	r3, r3
 8011248:	3b01      	subs	r3, #1
 801124a:	2b02      	cmp	r3, #2
 801124c:	d80b      	bhi.n	8011266 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801124e:	683b      	ldr	r3, [r7, #0]
 8011250:	885b      	ldrh	r3, [r3, #2]
 8011252:	2b01      	cmp	r3, #1
 8011254:	d10c      	bne.n	8011270 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	2200      	movs	r2, #0
 801125a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801125e:	6878      	ldr	r0, [r7, #4]
 8011260:	f000 f91c 	bl	801149c <USBD_CtlSendStatus>
      }
      break;
 8011264:	e004      	b.n	8011270 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8011266:	6839      	ldr	r1, [r7, #0]
 8011268:	6878      	ldr	r0, [r7, #4]
 801126a:	f000 f840 	bl	80112ee <USBD_CtlError>
      break;
 801126e:	e000      	b.n	8011272 <USBD_ClrFeature+0x3c>
      break;
 8011270:	bf00      	nop
  }
}
 8011272:	bf00      	nop
 8011274:	3708      	adds	r7, #8
 8011276:	46bd      	mov	sp, r7
 8011278:	bd80      	pop	{r7, pc}

0801127a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801127a:	b580      	push	{r7, lr}
 801127c:	b084      	sub	sp, #16
 801127e:	af00      	add	r7, sp, #0
 8011280:	6078      	str	r0, [r7, #4]
 8011282:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011284:	683b      	ldr	r3, [r7, #0]
 8011286:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	781a      	ldrb	r2, [r3, #0]
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	3301      	adds	r3, #1
 8011294:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	781a      	ldrb	r2, [r3, #0]
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	3301      	adds	r3, #1
 80112a2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80112a4:	68f8      	ldr	r0, [r7, #12]
 80112a6:	f7ff fa16 	bl	80106d6 <SWAPBYTE>
 80112aa:	4603      	mov	r3, r0
 80112ac:	461a      	mov	r2, r3
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	3301      	adds	r3, #1
 80112b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	3301      	adds	r3, #1
 80112bc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80112be:	68f8      	ldr	r0, [r7, #12]
 80112c0:	f7ff fa09 	bl	80106d6 <SWAPBYTE>
 80112c4:	4603      	mov	r3, r0
 80112c6:	461a      	mov	r2, r3
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	3301      	adds	r3, #1
 80112d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	3301      	adds	r3, #1
 80112d6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80112d8:	68f8      	ldr	r0, [r7, #12]
 80112da:	f7ff f9fc 	bl	80106d6 <SWAPBYTE>
 80112de:	4603      	mov	r3, r0
 80112e0:	461a      	mov	r2, r3
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	80da      	strh	r2, [r3, #6]
}
 80112e6:	bf00      	nop
 80112e8:	3710      	adds	r7, #16
 80112ea:	46bd      	mov	sp, r7
 80112ec:	bd80      	pop	{r7, pc}

080112ee <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80112ee:	b580      	push	{r7, lr}
 80112f0:	b082      	sub	sp, #8
 80112f2:	af00      	add	r7, sp, #0
 80112f4:	6078      	str	r0, [r7, #4]
 80112f6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80112f8:	2180      	movs	r1, #128	@ 0x80
 80112fa:	6878      	ldr	r0, [r7, #4]
 80112fc:	f000 fcd8 	bl	8011cb0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011300:	2100      	movs	r1, #0
 8011302:	6878      	ldr	r0, [r7, #4]
 8011304:	f000 fcd4 	bl	8011cb0 <USBD_LL_StallEP>
}
 8011308:	bf00      	nop
 801130a:	3708      	adds	r7, #8
 801130c:	46bd      	mov	sp, r7
 801130e:	bd80      	pop	{r7, pc}

08011310 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011310:	b580      	push	{r7, lr}
 8011312:	b086      	sub	sp, #24
 8011314:	af00      	add	r7, sp, #0
 8011316:	60f8      	str	r0, [r7, #12]
 8011318:	60b9      	str	r1, [r7, #8]
 801131a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801131c:	2300      	movs	r3, #0
 801131e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011320:	68fb      	ldr	r3, [r7, #12]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d042      	beq.n	80113ac <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 801132a:	6938      	ldr	r0, [r7, #16]
 801132c:	f000 f842 	bl	80113b4 <USBD_GetLen>
 8011330:	4603      	mov	r3, r0
 8011332:	3301      	adds	r3, #1
 8011334:	005b      	lsls	r3, r3, #1
 8011336:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801133a:	d808      	bhi.n	801134e <USBD_GetString+0x3e>
 801133c:	6938      	ldr	r0, [r7, #16]
 801133e:	f000 f839 	bl	80113b4 <USBD_GetLen>
 8011342:	4603      	mov	r3, r0
 8011344:	3301      	adds	r3, #1
 8011346:	b29b      	uxth	r3, r3
 8011348:	005b      	lsls	r3, r3, #1
 801134a:	b29a      	uxth	r2, r3
 801134c:	e001      	b.n	8011352 <USBD_GetString+0x42>
 801134e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8011356:	7dfb      	ldrb	r3, [r7, #23]
 8011358:	68ba      	ldr	r2, [r7, #8]
 801135a:	4413      	add	r3, r2
 801135c:	687a      	ldr	r2, [r7, #4]
 801135e:	7812      	ldrb	r2, [r2, #0]
 8011360:	701a      	strb	r2, [r3, #0]
  idx++;
 8011362:	7dfb      	ldrb	r3, [r7, #23]
 8011364:	3301      	adds	r3, #1
 8011366:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011368:	7dfb      	ldrb	r3, [r7, #23]
 801136a:	68ba      	ldr	r2, [r7, #8]
 801136c:	4413      	add	r3, r2
 801136e:	2203      	movs	r2, #3
 8011370:	701a      	strb	r2, [r3, #0]
  idx++;
 8011372:	7dfb      	ldrb	r3, [r7, #23]
 8011374:	3301      	adds	r3, #1
 8011376:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011378:	e013      	b.n	80113a2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 801137a:	7dfb      	ldrb	r3, [r7, #23]
 801137c:	68ba      	ldr	r2, [r7, #8]
 801137e:	4413      	add	r3, r2
 8011380:	693a      	ldr	r2, [r7, #16]
 8011382:	7812      	ldrb	r2, [r2, #0]
 8011384:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011386:	693b      	ldr	r3, [r7, #16]
 8011388:	3301      	adds	r3, #1
 801138a:	613b      	str	r3, [r7, #16]
    idx++;
 801138c:	7dfb      	ldrb	r3, [r7, #23]
 801138e:	3301      	adds	r3, #1
 8011390:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8011392:	7dfb      	ldrb	r3, [r7, #23]
 8011394:	68ba      	ldr	r2, [r7, #8]
 8011396:	4413      	add	r3, r2
 8011398:	2200      	movs	r2, #0
 801139a:	701a      	strb	r2, [r3, #0]
    idx++;
 801139c:	7dfb      	ldrb	r3, [r7, #23]
 801139e:	3301      	adds	r3, #1
 80113a0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80113a2:	693b      	ldr	r3, [r7, #16]
 80113a4:	781b      	ldrb	r3, [r3, #0]
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d1e7      	bne.n	801137a <USBD_GetString+0x6a>
 80113aa:	e000      	b.n	80113ae <USBD_GetString+0x9e>
    return;
 80113ac:	bf00      	nop
  }
}
 80113ae:	3718      	adds	r7, #24
 80113b0:	46bd      	mov	sp, r7
 80113b2:	bd80      	pop	{r7, pc}

080113b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80113b4:	b480      	push	{r7}
 80113b6:	b085      	sub	sp, #20
 80113b8:	af00      	add	r7, sp, #0
 80113ba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80113bc:	2300      	movs	r3, #0
 80113be:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80113c4:	e005      	b.n	80113d2 <USBD_GetLen+0x1e>
  {
    len++;
 80113c6:	7bfb      	ldrb	r3, [r7, #15]
 80113c8:	3301      	adds	r3, #1
 80113ca:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80113cc:	68bb      	ldr	r3, [r7, #8]
 80113ce:	3301      	adds	r3, #1
 80113d0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80113d2:	68bb      	ldr	r3, [r7, #8]
 80113d4:	781b      	ldrb	r3, [r3, #0]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d1f5      	bne.n	80113c6 <USBD_GetLen+0x12>
  }

  return len;
 80113da:	7bfb      	ldrb	r3, [r7, #15]
}
 80113dc:	4618      	mov	r0, r3
 80113de:	3714      	adds	r7, #20
 80113e0:	46bd      	mov	sp, r7
 80113e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e6:	4770      	bx	lr

080113e8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b084      	sub	sp, #16
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	60f8      	str	r0, [r7, #12]
 80113f0:	60b9      	str	r1, [r7, #8]
 80113f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	2202      	movs	r2, #2
 80113f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	687a      	ldr	r2, [r7, #4]
 8011400:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	687a      	ldr	r2, [r7, #4]
 8011406:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	68ba      	ldr	r2, [r7, #8]
 801140c:	2100      	movs	r1, #0
 801140e:	68f8      	ldr	r0, [r7, #12]
 8011410:	f000 fcd7 	bl	8011dc2 <USBD_LL_Transmit>

  return USBD_OK;
 8011414:	2300      	movs	r3, #0
}
 8011416:	4618      	mov	r0, r3
 8011418:	3710      	adds	r7, #16
 801141a:	46bd      	mov	sp, r7
 801141c:	bd80      	pop	{r7, pc}

0801141e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801141e:	b580      	push	{r7, lr}
 8011420:	b084      	sub	sp, #16
 8011422:	af00      	add	r7, sp, #0
 8011424:	60f8      	str	r0, [r7, #12]
 8011426:	60b9      	str	r1, [r7, #8]
 8011428:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	68ba      	ldr	r2, [r7, #8]
 801142e:	2100      	movs	r1, #0
 8011430:	68f8      	ldr	r0, [r7, #12]
 8011432:	f000 fcc6 	bl	8011dc2 <USBD_LL_Transmit>

  return USBD_OK;
 8011436:	2300      	movs	r3, #0
}
 8011438:	4618      	mov	r0, r3
 801143a:	3710      	adds	r7, #16
 801143c:	46bd      	mov	sp, r7
 801143e:	bd80      	pop	{r7, pc}

08011440 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011440:	b580      	push	{r7, lr}
 8011442:	b084      	sub	sp, #16
 8011444:	af00      	add	r7, sp, #0
 8011446:	60f8      	str	r0, [r7, #12]
 8011448:	60b9      	str	r1, [r7, #8]
 801144a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801144c:	68fb      	ldr	r3, [r7, #12]
 801144e:	2203      	movs	r2, #3
 8011450:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	687a      	ldr	r2, [r7, #4]
 8011458:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	687a      	ldr	r2, [r7, #4]
 8011460:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	68ba      	ldr	r2, [r7, #8]
 8011468:	2100      	movs	r1, #0
 801146a:	68f8      	ldr	r0, [r7, #12]
 801146c:	f000 fcca 	bl	8011e04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011470:	2300      	movs	r3, #0
}
 8011472:	4618      	mov	r0, r3
 8011474:	3710      	adds	r7, #16
 8011476:	46bd      	mov	sp, r7
 8011478:	bd80      	pop	{r7, pc}

0801147a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801147a:	b580      	push	{r7, lr}
 801147c:	b084      	sub	sp, #16
 801147e:	af00      	add	r7, sp, #0
 8011480:	60f8      	str	r0, [r7, #12]
 8011482:	60b9      	str	r1, [r7, #8]
 8011484:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	68ba      	ldr	r2, [r7, #8]
 801148a:	2100      	movs	r1, #0
 801148c:	68f8      	ldr	r0, [r7, #12]
 801148e:	f000 fcb9 	bl	8011e04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011492:	2300      	movs	r3, #0
}
 8011494:	4618      	mov	r0, r3
 8011496:	3710      	adds	r7, #16
 8011498:	46bd      	mov	sp, r7
 801149a:	bd80      	pop	{r7, pc}

0801149c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801149c:	b580      	push	{r7, lr}
 801149e:	b082      	sub	sp, #8
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	2204      	movs	r2, #4
 80114a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80114ac:	2300      	movs	r3, #0
 80114ae:	2200      	movs	r2, #0
 80114b0:	2100      	movs	r1, #0
 80114b2:	6878      	ldr	r0, [r7, #4]
 80114b4:	f000 fc85 	bl	8011dc2 <USBD_LL_Transmit>

  return USBD_OK;
 80114b8:	2300      	movs	r3, #0
}
 80114ba:	4618      	mov	r0, r3
 80114bc:	3708      	adds	r7, #8
 80114be:	46bd      	mov	sp, r7
 80114c0:	bd80      	pop	{r7, pc}

080114c2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80114c2:	b580      	push	{r7, lr}
 80114c4:	b082      	sub	sp, #8
 80114c6:	af00      	add	r7, sp, #0
 80114c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	2205      	movs	r2, #5
 80114ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80114d2:	2300      	movs	r3, #0
 80114d4:	2200      	movs	r2, #0
 80114d6:	2100      	movs	r1, #0
 80114d8:	6878      	ldr	r0, [r7, #4]
 80114da:	f000 fc93 	bl	8011e04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80114de:	2300      	movs	r3, #0
}
 80114e0:	4618      	mov	r0, r3
 80114e2:	3708      	adds	r7, #8
 80114e4:	46bd      	mov	sp, r7
 80114e6:	bd80      	pop	{r7, pc}

080114e8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80114e8:	b580      	push	{r7, lr}
 80114ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80114ec:	2200      	movs	r2, #0
 80114ee:	4912      	ldr	r1, [pc, #72]	@ (8011538 <MX_USB_Device_Init+0x50>)
 80114f0:	4812      	ldr	r0, [pc, #72]	@ (801153c <MX_USB_Device_Init+0x54>)
 80114f2:	f7fe fd43 	bl	800ff7c <USBD_Init>
 80114f6:	4603      	mov	r3, r0
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d001      	beq.n	8011500 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80114fc:	f7f2 ff04 	bl	8004308 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8011500:	490f      	ldr	r1, [pc, #60]	@ (8011540 <MX_USB_Device_Init+0x58>)
 8011502:	480e      	ldr	r0, [pc, #56]	@ (801153c <MX_USB_Device_Init+0x54>)
 8011504:	f7fe fd78 	bl	800fff8 <USBD_RegisterClass>
 8011508:	4603      	mov	r3, r0
 801150a:	2b00      	cmp	r3, #0
 801150c:	d001      	beq.n	8011512 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 801150e:	f7f2 fefb 	bl	8004308 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8011512:	490c      	ldr	r1, [pc, #48]	@ (8011544 <MX_USB_Device_Init+0x5c>)
 8011514:	4809      	ldr	r0, [pc, #36]	@ (801153c <MX_USB_Device_Init+0x54>)
 8011516:	f7fe fc61 	bl	800fddc <USBD_CDC_RegisterInterface>
 801151a:	4603      	mov	r3, r0
 801151c:	2b00      	cmp	r3, #0
 801151e:	d001      	beq.n	8011524 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8011520:	f7f2 fef2 	bl	8004308 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8011524:	4805      	ldr	r0, [pc, #20]	@ (801153c <MX_USB_Device_Init+0x54>)
 8011526:	f7fe fdab 	bl	8010080 <USBD_Start>
 801152a:	4603      	mov	r3, r0
 801152c:	2b00      	cmp	r3, #0
 801152e:	d001      	beq.n	8011534 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8011530:	f7f2 feea 	bl	8004308 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8011534:	bf00      	nop
 8011536:	bd80      	pop	{r7, pc}
 8011538:	200000d4 	.word	0x200000d4
 801153c:	200007c8 	.word	0x200007c8
 8011540:	20000040 	.word	0x20000040
 8011544:	200000c0 	.word	0x200000c0

08011548 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011548:	b580      	push	{r7, lr}
 801154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801154c:	2200      	movs	r2, #0
 801154e:	4905      	ldr	r1, [pc, #20]	@ (8011564 <CDC_Init_FS+0x1c>)
 8011550:	4805      	ldr	r0, [pc, #20]	@ (8011568 <CDC_Init_FS+0x20>)
 8011552:	f7fe fc5d 	bl	800fe10 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011556:	4905      	ldr	r1, [pc, #20]	@ (801156c <CDC_Init_FS+0x24>)
 8011558:	4803      	ldr	r0, [pc, #12]	@ (8011568 <CDC_Init_FS+0x20>)
 801155a:	f7fe fc7b 	bl	800fe54 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801155e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011560:	4618      	mov	r0, r3
 8011562:	bd80      	pop	{r7, pc}
 8011564:	200012a4 	.word	0x200012a4
 8011568:	200007c8 	.word	0x200007c8
 801156c:	20000aa4 	.word	0x20000aa4

08011570 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011570:	b480      	push	{r7}
 8011572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011574:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011576:	4618      	mov	r0, r3
 8011578:	46bd      	mov	sp, r7
 801157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801157e:	4770      	bx	lr

08011580 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011580:	b480      	push	{r7}
 8011582:	b083      	sub	sp, #12
 8011584:	af00      	add	r7, sp, #0
 8011586:	4603      	mov	r3, r0
 8011588:	6039      	str	r1, [r7, #0]
 801158a:	71fb      	strb	r3, [r7, #7]
 801158c:	4613      	mov	r3, r2
 801158e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011590:	79fb      	ldrb	r3, [r7, #7]
 8011592:	2b23      	cmp	r3, #35	@ 0x23
 8011594:	d84a      	bhi.n	801162c <CDC_Control_FS+0xac>
 8011596:	a201      	add	r2, pc, #4	@ (adr r2, 801159c <CDC_Control_FS+0x1c>)
 8011598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801159c:	0801162d 	.word	0x0801162d
 80115a0:	0801162d 	.word	0x0801162d
 80115a4:	0801162d 	.word	0x0801162d
 80115a8:	0801162d 	.word	0x0801162d
 80115ac:	0801162d 	.word	0x0801162d
 80115b0:	0801162d 	.word	0x0801162d
 80115b4:	0801162d 	.word	0x0801162d
 80115b8:	0801162d 	.word	0x0801162d
 80115bc:	0801162d 	.word	0x0801162d
 80115c0:	0801162d 	.word	0x0801162d
 80115c4:	0801162d 	.word	0x0801162d
 80115c8:	0801162d 	.word	0x0801162d
 80115cc:	0801162d 	.word	0x0801162d
 80115d0:	0801162d 	.word	0x0801162d
 80115d4:	0801162d 	.word	0x0801162d
 80115d8:	0801162d 	.word	0x0801162d
 80115dc:	0801162d 	.word	0x0801162d
 80115e0:	0801162d 	.word	0x0801162d
 80115e4:	0801162d 	.word	0x0801162d
 80115e8:	0801162d 	.word	0x0801162d
 80115ec:	0801162d 	.word	0x0801162d
 80115f0:	0801162d 	.word	0x0801162d
 80115f4:	0801162d 	.word	0x0801162d
 80115f8:	0801162d 	.word	0x0801162d
 80115fc:	0801162d 	.word	0x0801162d
 8011600:	0801162d 	.word	0x0801162d
 8011604:	0801162d 	.word	0x0801162d
 8011608:	0801162d 	.word	0x0801162d
 801160c:	0801162d 	.word	0x0801162d
 8011610:	0801162d 	.word	0x0801162d
 8011614:	0801162d 	.word	0x0801162d
 8011618:	0801162d 	.word	0x0801162d
 801161c:	0801162d 	.word	0x0801162d
 8011620:	0801162d 	.word	0x0801162d
 8011624:	0801162d 	.word	0x0801162d
 8011628:	0801162d 	.word	0x0801162d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801162c:	bf00      	nop
  }

  return (USBD_OK);
 801162e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011630:	4618      	mov	r0, r3
 8011632:	370c      	adds	r7, #12
 8011634:	46bd      	mov	sp, r7
 8011636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801163a:	4770      	bx	lr

0801163c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801163c:	b580      	push	{r7, lr}
 801163e:	b082      	sub	sp, #8
 8011640:	af00      	add	r7, sp, #0
 8011642:	6078      	str	r0, [r7, #4]
 8011644:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011646:	6879      	ldr	r1, [r7, #4]
 8011648:	4805      	ldr	r0, [pc, #20]	@ (8011660 <CDC_Receive_FS+0x24>)
 801164a:	f7fe fc03 	bl	800fe54 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801164e:	4804      	ldr	r0, [pc, #16]	@ (8011660 <CDC_Receive_FS+0x24>)
 8011650:	f7fe fc5e 	bl	800ff10 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011654:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011656:	4618      	mov	r0, r3
 8011658:	3708      	adds	r7, #8
 801165a:	46bd      	mov	sp, r7
 801165c:	bd80      	pop	{r7, pc}
 801165e:	bf00      	nop
 8011660:	200007c8 	.word	0x200007c8

08011664 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011664:	b580      	push	{r7, lr}
 8011666:	b084      	sub	sp, #16
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
 801166c:	460b      	mov	r3, r1
 801166e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011670:	2300      	movs	r3, #0
 8011672:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8011674:	4b0d      	ldr	r3, [pc, #52]	@ (80116ac <CDC_Transmit_FS+0x48>)
 8011676:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801167a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801167c:	68bb      	ldr	r3, [r7, #8]
 801167e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8011682:	2b00      	cmp	r3, #0
 8011684:	d001      	beq.n	801168a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8011686:	2301      	movs	r3, #1
 8011688:	e00b      	b.n	80116a2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801168a:	887b      	ldrh	r3, [r7, #2]
 801168c:	461a      	mov	r2, r3
 801168e:	6879      	ldr	r1, [r7, #4]
 8011690:	4806      	ldr	r0, [pc, #24]	@ (80116ac <CDC_Transmit_FS+0x48>)
 8011692:	f7fe fbbd 	bl	800fe10 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8011696:	4805      	ldr	r0, [pc, #20]	@ (80116ac <CDC_Transmit_FS+0x48>)
 8011698:	f7fe fbfa 	bl	800fe90 <USBD_CDC_TransmitPacket>
 801169c:	4603      	mov	r3, r0
 801169e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80116a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80116a2:	4618      	mov	r0, r3
 80116a4:	3710      	adds	r7, #16
 80116a6:	46bd      	mov	sp, r7
 80116a8:	bd80      	pop	{r7, pc}
 80116aa:	bf00      	nop
 80116ac:	200007c8 	.word	0x200007c8

080116b0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80116b0:	b480      	push	{r7}
 80116b2:	b087      	sub	sp, #28
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	60f8      	str	r0, [r7, #12]
 80116b8:	60b9      	str	r1, [r7, #8]
 80116ba:	4613      	mov	r3, r2
 80116bc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80116be:	2300      	movs	r3, #0
 80116c0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80116c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80116c6:	4618      	mov	r0, r3
 80116c8:	371c      	adds	r7, #28
 80116ca:	46bd      	mov	sp, r7
 80116cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d0:	4770      	bx	lr
	...

080116d4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80116d4:	b480      	push	{r7}
 80116d6:	b083      	sub	sp, #12
 80116d8:	af00      	add	r7, sp, #0
 80116da:	4603      	mov	r3, r0
 80116dc:	6039      	str	r1, [r7, #0]
 80116de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80116e0:	683b      	ldr	r3, [r7, #0]
 80116e2:	2212      	movs	r2, #18
 80116e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80116e6:	4b03      	ldr	r3, [pc, #12]	@ (80116f4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80116e8:	4618      	mov	r0, r3
 80116ea:	370c      	adds	r7, #12
 80116ec:	46bd      	mov	sp, r7
 80116ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f2:	4770      	bx	lr
 80116f4:	200000f4 	.word	0x200000f4

080116f8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80116f8:	b480      	push	{r7}
 80116fa:	b083      	sub	sp, #12
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	4603      	mov	r3, r0
 8011700:	6039      	str	r1, [r7, #0]
 8011702:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011704:	683b      	ldr	r3, [r7, #0]
 8011706:	2204      	movs	r2, #4
 8011708:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801170a:	4b03      	ldr	r3, [pc, #12]	@ (8011718 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 801170c:	4618      	mov	r0, r3
 801170e:	370c      	adds	r7, #12
 8011710:	46bd      	mov	sp, r7
 8011712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011716:	4770      	bx	lr
 8011718:	20000108 	.word	0x20000108

0801171c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801171c:	b580      	push	{r7, lr}
 801171e:	b082      	sub	sp, #8
 8011720:	af00      	add	r7, sp, #0
 8011722:	4603      	mov	r3, r0
 8011724:	6039      	str	r1, [r7, #0]
 8011726:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011728:	79fb      	ldrb	r3, [r7, #7]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d105      	bne.n	801173a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801172e:	683a      	ldr	r2, [r7, #0]
 8011730:	4907      	ldr	r1, [pc, #28]	@ (8011750 <USBD_CDC_ProductStrDescriptor+0x34>)
 8011732:	4808      	ldr	r0, [pc, #32]	@ (8011754 <USBD_CDC_ProductStrDescriptor+0x38>)
 8011734:	f7ff fdec 	bl	8011310 <USBD_GetString>
 8011738:	e004      	b.n	8011744 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801173a:	683a      	ldr	r2, [r7, #0]
 801173c:	4904      	ldr	r1, [pc, #16]	@ (8011750 <USBD_CDC_ProductStrDescriptor+0x34>)
 801173e:	4805      	ldr	r0, [pc, #20]	@ (8011754 <USBD_CDC_ProductStrDescriptor+0x38>)
 8011740:	f7ff fde6 	bl	8011310 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011744:	4b02      	ldr	r3, [pc, #8]	@ (8011750 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8011746:	4618      	mov	r0, r3
 8011748:	3708      	adds	r7, #8
 801174a:	46bd      	mov	sp, r7
 801174c:	bd80      	pop	{r7, pc}
 801174e:	bf00      	nop
 8011750:	20001aa4 	.word	0x20001aa4
 8011754:	08014988 	.word	0x08014988

08011758 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011758:	b580      	push	{r7, lr}
 801175a:	b082      	sub	sp, #8
 801175c:	af00      	add	r7, sp, #0
 801175e:	4603      	mov	r3, r0
 8011760:	6039      	str	r1, [r7, #0]
 8011762:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011764:	683a      	ldr	r2, [r7, #0]
 8011766:	4904      	ldr	r1, [pc, #16]	@ (8011778 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8011768:	4804      	ldr	r0, [pc, #16]	@ (801177c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 801176a:	f7ff fdd1 	bl	8011310 <USBD_GetString>
  return USBD_StrDesc;
 801176e:	4b02      	ldr	r3, [pc, #8]	@ (8011778 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8011770:	4618      	mov	r0, r3
 8011772:	3708      	adds	r7, #8
 8011774:	46bd      	mov	sp, r7
 8011776:	bd80      	pop	{r7, pc}
 8011778:	20001aa4 	.word	0x20001aa4
 801177c:	080149a0 	.word	0x080149a0

08011780 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011780:	b580      	push	{r7, lr}
 8011782:	b082      	sub	sp, #8
 8011784:	af00      	add	r7, sp, #0
 8011786:	4603      	mov	r3, r0
 8011788:	6039      	str	r1, [r7, #0]
 801178a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801178c:	683b      	ldr	r3, [r7, #0]
 801178e:	221a      	movs	r2, #26
 8011790:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011792:	f000 f843 	bl	801181c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8011796:	4b02      	ldr	r3, [pc, #8]	@ (80117a0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8011798:	4618      	mov	r0, r3
 801179a:	3708      	adds	r7, #8
 801179c:	46bd      	mov	sp, r7
 801179e:	bd80      	pop	{r7, pc}
 80117a0:	2000010c 	.word	0x2000010c

080117a4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b082      	sub	sp, #8
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	4603      	mov	r3, r0
 80117ac:	6039      	str	r1, [r7, #0]
 80117ae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80117b0:	79fb      	ldrb	r3, [r7, #7]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d105      	bne.n	80117c2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80117b6:	683a      	ldr	r2, [r7, #0]
 80117b8:	4907      	ldr	r1, [pc, #28]	@ (80117d8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80117ba:	4808      	ldr	r0, [pc, #32]	@ (80117dc <USBD_CDC_ConfigStrDescriptor+0x38>)
 80117bc:	f7ff fda8 	bl	8011310 <USBD_GetString>
 80117c0:	e004      	b.n	80117cc <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80117c2:	683a      	ldr	r2, [r7, #0]
 80117c4:	4904      	ldr	r1, [pc, #16]	@ (80117d8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80117c6:	4805      	ldr	r0, [pc, #20]	@ (80117dc <USBD_CDC_ConfigStrDescriptor+0x38>)
 80117c8:	f7ff fda2 	bl	8011310 <USBD_GetString>
  }
  return USBD_StrDesc;
 80117cc:	4b02      	ldr	r3, [pc, #8]	@ (80117d8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80117ce:	4618      	mov	r0, r3
 80117d0:	3708      	adds	r7, #8
 80117d2:	46bd      	mov	sp, r7
 80117d4:	bd80      	pop	{r7, pc}
 80117d6:	bf00      	nop
 80117d8:	20001aa4 	.word	0x20001aa4
 80117dc:	080149b4 	.word	0x080149b4

080117e0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80117e0:	b580      	push	{r7, lr}
 80117e2:	b082      	sub	sp, #8
 80117e4:	af00      	add	r7, sp, #0
 80117e6:	4603      	mov	r3, r0
 80117e8:	6039      	str	r1, [r7, #0]
 80117ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80117ec:	79fb      	ldrb	r3, [r7, #7]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d105      	bne.n	80117fe <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80117f2:	683a      	ldr	r2, [r7, #0]
 80117f4:	4907      	ldr	r1, [pc, #28]	@ (8011814 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80117f6:	4808      	ldr	r0, [pc, #32]	@ (8011818 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80117f8:	f7ff fd8a 	bl	8011310 <USBD_GetString>
 80117fc:	e004      	b.n	8011808 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80117fe:	683a      	ldr	r2, [r7, #0]
 8011800:	4904      	ldr	r1, [pc, #16]	@ (8011814 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8011802:	4805      	ldr	r0, [pc, #20]	@ (8011818 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8011804:	f7ff fd84 	bl	8011310 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011808:	4b02      	ldr	r3, [pc, #8]	@ (8011814 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 801180a:	4618      	mov	r0, r3
 801180c:	3708      	adds	r7, #8
 801180e:	46bd      	mov	sp, r7
 8011810:	bd80      	pop	{r7, pc}
 8011812:	bf00      	nop
 8011814:	20001aa4 	.word	0x20001aa4
 8011818:	080149c0 	.word	0x080149c0

0801181c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801181c:	b580      	push	{r7, lr}
 801181e:	b084      	sub	sp, #16
 8011820:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011822:	4b0f      	ldr	r3, [pc, #60]	@ (8011860 <Get_SerialNum+0x44>)
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011828:	4b0e      	ldr	r3, [pc, #56]	@ (8011864 <Get_SerialNum+0x48>)
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801182e:	4b0e      	ldr	r3, [pc, #56]	@ (8011868 <Get_SerialNum+0x4c>)
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011834:	68fa      	ldr	r2, [r7, #12]
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	4413      	add	r3, r2
 801183a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d009      	beq.n	8011856 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011842:	2208      	movs	r2, #8
 8011844:	4909      	ldr	r1, [pc, #36]	@ (801186c <Get_SerialNum+0x50>)
 8011846:	68f8      	ldr	r0, [r7, #12]
 8011848:	f000 f814 	bl	8011874 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801184c:	2204      	movs	r2, #4
 801184e:	4908      	ldr	r1, [pc, #32]	@ (8011870 <Get_SerialNum+0x54>)
 8011850:	68b8      	ldr	r0, [r7, #8]
 8011852:	f000 f80f 	bl	8011874 <IntToUnicode>
  }
}
 8011856:	bf00      	nop
 8011858:	3710      	adds	r7, #16
 801185a:	46bd      	mov	sp, r7
 801185c:	bd80      	pop	{r7, pc}
 801185e:	bf00      	nop
 8011860:	1fff7590 	.word	0x1fff7590
 8011864:	1fff7594 	.word	0x1fff7594
 8011868:	1fff7598 	.word	0x1fff7598
 801186c:	2000010e 	.word	0x2000010e
 8011870:	2000011e 	.word	0x2000011e

08011874 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011874:	b480      	push	{r7}
 8011876:	b087      	sub	sp, #28
 8011878:	af00      	add	r7, sp, #0
 801187a:	60f8      	str	r0, [r7, #12]
 801187c:	60b9      	str	r1, [r7, #8]
 801187e:	4613      	mov	r3, r2
 8011880:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011882:	2300      	movs	r3, #0
 8011884:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011886:	2300      	movs	r3, #0
 8011888:	75fb      	strb	r3, [r7, #23]
 801188a:	e027      	b.n	80118dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	0f1b      	lsrs	r3, r3, #28
 8011890:	2b09      	cmp	r3, #9
 8011892:	d80b      	bhi.n	80118ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	0f1b      	lsrs	r3, r3, #28
 8011898:	b2da      	uxtb	r2, r3
 801189a:	7dfb      	ldrb	r3, [r7, #23]
 801189c:	005b      	lsls	r3, r3, #1
 801189e:	4619      	mov	r1, r3
 80118a0:	68bb      	ldr	r3, [r7, #8]
 80118a2:	440b      	add	r3, r1
 80118a4:	3230      	adds	r2, #48	@ 0x30
 80118a6:	b2d2      	uxtb	r2, r2
 80118a8:	701a      	strb	r2, [r3, #0]
 80118aa:	e00a      	b.n	80118c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	0f1b      	lsrs	r3, r3, #28
 80118b0:	b2da      	uxtb	r2, r3
 80118b2:	7dfb      	ldrb	r3, [r7, #23]
 80118b4:	005b      	lsls	r3, r3, #1
 80118b6:	4619      	mov	r1, r3
 80118b8:	68bb      	ldr	r3, [r7, #8]
 80118ba:	440b      	add	r3, r1
 80118bc:	3237      	adds	r2, #55	@ 0x37
 80118be:	b2d2      	uxtb	r2, r2
 80118c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	011b      	lsls	r3, r3, #4
 80118c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80118c8:	7dfb      	ldrb	r3, [r7, #23]
 80118ca:	005b      	lsls	r3, r3, #1
 80118cc:	3301      	adds	r3, #1
 80118ce:	68ba      	ldr	r2, [r7, #8]
 80118d0:	4413      	add	r3, r2
 80118d2:	2200      	movs	r2, #0
 80118d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80118d6:	7dfb      	ldrb	r3, [r7, #23]
 80118d8:	3301      	adds	r3, #1
 80118da:	75fb      	strb	r3, [r7, #23]
 80118dc:	7dfa      	ldrb	r2, [r7, #23]
 80118de:	79fb      	ldrb	r3, [r7, #7]
 80118e0:	429a      	cmp	r2, r3
 80118e2:	d3d3      	bcc.n	801188c <IntToUnicode+0x18>
  }
}
 80118e4:	bf00      	nop
 80118e6:	bf00      	nop
 80118e8:	371c      	adds	r7, #28
 80118ea:	46bd      	mov	sp, r7
 80118ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f0:	4770      	bx	lr

080118f2 <LL_AHB2_GRP1_EnableClock>:
{
 80118f2:	b480      	push	{r7}
 80118f4:	b085      	sub	sp, #20
 80118f6:	af00      	add	r7, sp, #0
 80118f8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80118fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80118fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011900:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	4313      	orrs	r3, r2
 8011908:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 801190a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801190e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	4013      	ands	r3, r2
 8011914:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011916:	68fb      	ldr	r3, [r7, #12]
}
 8011918:	bf00      	nop
 801191a:	3714      	adds	r7, #20
 801191c:	46bd      	mov	sp, r7
 801191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011922:	4770      	bx	lr

08011924 <LL_APB1_GRP1_EnableClock>:
{
 8011924:	b480      	push	{r7}
 8011926:	b085      	sub	sp, #20
 8011928:	af00      	add	r7, sp, #0
 801192a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 801192c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011930:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011932:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	4313      	orrs	r3, r2
 801193a:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 801193c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011940:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	4013      	ands	r3, r2
 8011946:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011948:	68fb      	ldr	r3, [r7, #12]
}
 801194a:	bf00      	nop
 801194c:	3714      	adds	r7, #20
 801194e:	46bd      	mov	sp, r7
 8011950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011954:	4770      	bx	lr
	...

08011958 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011958:	b580      	push	{r7, lr}
 801195a:	b088      	sub	sp, #32
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011960:	f107 030c 	add.w	r3, r7, #12
 8011964:	2200      	movs	r2, #0
 8011966:	601a      	str	r2, [r3, #0]
 8011968:	605a      	str	r2, [r3, #4]
 801196a:	609a      	str	r2, [r3, #8]
 801196c:	60da      	str	r2, [r3, #12]
 801196e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	4a17      	ldr	r2, [pc, #92]	@ (80119d4 <HAL_PCD_MspInit+0x7c>)
 8011976:	4293      	cmp	r3, r2
 8011978:	d128      	bne.n	80119cc <HAL_PCD_MspInit+0x74>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801197a:	2001      	movs	r0, #1
 801197c:	f7ff ffb9 	bl	80118f2 <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 8011980:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8011984:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011986:	2302      	movs	r3, #2
 8011988:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801198a:	2300      	movs	r3, #0
 801198c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801198e:	2300      	movs	r3, #0
 8011990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8011992:	230a      	movs	r3, #10
 8011994:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011996:	f107 030c 	add.w	r3, r7, #12
 801199a:	4619      	mov	r1, r3
 801199c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80119a0:	f7f5 f898 	bl	8006ad4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80119a4:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80119a8:	f7ff ffbc 	bl	8011924 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 80119ac:	2200      	movs	r2, #0
 80119ae:	2100      	movs	r1, #0
 80119b0:	2013      	movs	r0, #19
 80119b2:	f7f4 fd78 	bl	80064a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 80119b6:	2013      	movs	r0, #19
 80119b8:	f7f4 fd8f 	bl	80064da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80119bc:	2200      	movs	r2, #0
 80119be:	2100      	movs	r1, #0
 80119c0:	2014      	movs	r0, #20
 80119c2:	f7f4 fd70 	bl	80064a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80119c6:	2014      	movs	r0, #20
 80119c8:	f7f4 fd87 	bl	80064da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80119cc:	bf00      	nop
 80119ce:	3720      	adds	r7, #32
 80119d0:	46bd      	mov	sp, r7
 80119d2:	bd80      	pop	{r7, pc}
 80119d4:	40006800 	.word	0x40006800

080119d8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119d8:	b580      	push	{r7, lr}
 80119da:	b082      	sub	sp, #8
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80119ec:	4619      	mov	r1, r3
 80119ee:	4610      	mov	r0, r2
 80119f0:	f7fe fb93 	bl	801011a <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 80119f4:	bf00      	nop
 80119f6:	3708      	adds	r7, #8
 80119f8:	46bd      	mov	sp, r7
 80119fa:	bd80      	pop	{r7, pc}

080119fc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b082      	sub	sp, #8
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	6078      	str	r0, [r7, #4]
 8011a04:	460b      	mov	r3, r1
 8011a06:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8011a0e:	78fa      	ldrb	r2, [r7, #3]
 8011a10:	6879      	ldr	r1, [r7, #4]
 8011a12:	4613      	mov	r3, r2
 8011a14:	009b      	lsls	r3, r3, #2
 8011a16:	4413      	add	r3, r2
 8011a18:	00db      	lsls	r3, r3, #3
 8011a1a:	440b      	add	r3, r1
 8011a1c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011a20:	681a      	ldr	r2, [r3, #0]
 8011a22:	78fb      	ldrb	r3, [r7, #3]
 8011a24:	4619      	mov	r1, r3
 8011a26:	f7fe fbcd 	bl	80101c4 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8011a2a:	bf00      	nop
 8011a2c:	3708      	adds	r7, #8
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	bd80      	pop	{r7, pc}

08011a32 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a32:	b580      	push	{r7, lr}
 8011a34:	b082      	sub	sp, #8
 8011a36:	af00      	add	r7, sp, #0
 8011a38:	6078      	str	r0, [r7, #4]
 8011a3a:	460b      	mov	r3, r1
 8011a3c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8011a44:	78fa      	ldrb	r2, [r7, #3]
 8011a46:	6879      	ldr	r1, [r7, #4]
 8011a48:	4613      	mov	r3, r2
 8011a4a:	009b      	lsls	r3, r3, #2
 8011a4c:	4413      	add	r3, r2
 8011a4e:	00db      	lsls	r3, r3, #3
 8011a50:	440b      	add	r3, r1
 8011a52:	3324      	adds	r3, #36	@ 0x24
 8011a54:	681a      	ldr	r2, [r3, #0]
 8011a56:	78fb      	ldrb	r3, [r7, #3]
 8011a58:	4619      	mov	r1, r3
 8011a5a:	f7fe fc66 	bl	801032a <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8011a5e:	bf00      	nop
 8011a60:	3708      	adds	r7, #8
 8011a62:	46bd      	mov	sp, r7
 8011a64:	bd80      	pop	{r7, pc}

08011a66 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a66:	b580      	push	{r7, lr}
 8011a68:	b082      	sub	sp, #8
 8011a6a:	af00      	add	r7, sp, #0
 8011a6c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011a74:	4618      	mov	r0, r3
 8011a76:	f7fe fda0 	bl	80105ba <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8011a7a:	bf00      	nop
 8011a7c:	3708      	adds	r7, #8
 8011a7e:	46bd      	mov	sp, r7
 8011a80:	bd80      	pop	{r7, pc}

08011a82 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a82:	b580      	push	{r7, lr}
 8011a84:	b084      	sub	sp, #16
 8011a86:	af00      	add	r7, sp, #0
 8011a88:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011a8a:	2301      	movs	r3, #1
 8011a8c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	795b      	ldrb	r3, [r3, #5]
 8011a92:	2b02      	cmp	r3, #2
 8011a94:	d001      	beq.n	8011a9a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8011a96:	f7f2 fc37 	bl	8004308 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011aa0:	7bfa      	ldrb	r2, [r7, #15]
 8011aa2:	4611      	mov	r1, r2
 8011aa4:	4618      	mov	r0, r3
 8011aa6:	f7fe fd44 	bl	8010532 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	f7fe fcec 	bl	801048e <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8011ab6:	bf00      	nop
 8011ab8:	3710      	adds	r7, #16
 8011aba:	46bd      	mov	sp, r7
 8011abc:	bd80      	pop	{r7, pc}
	...

08011ac0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ac0:	b580      	push	{r7, lr}
 8011ac2:	b082      	sub	sp, #8
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011ace:	4618      	mov	r0, r3
 8011ad0:	f7fe fd3f 	bl	8010552 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	7a5b      	ldrb	r3, [r3, #9]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d005      	beq.n	8011ae8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011adc:	4b04      	ldr	r3, [pc, #16]	@ (8011af0 <HAL_PCD_SuspendCallback+0x30>)
 8011ade:	691b      	ldr	r3, [r3, #16]
 8011ae0:	4a03      	ldr	r2, [pc, #12]	@ (8011af0 <HAL_PCD_SuspendCallback+0x30>)
 8011ae2:	f043 0306 	orr.w	r3, r3, #6
 8011ae6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8011ae8:	bf00      	nop
 8011aea:	3708      	adds	r7, #8
 8011aec:	46bd      	mov	sp, r7
 8011aee:	bd80      	pop	{r7, pc}
 8011af0:	e000ed00 	.word	0xe000ed00

08011af4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011af4:	b580      	push	{r7, lr}
 8011af6:	b082      	sub	sp, #8
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	7a5b      	ldrb	r3, [r3, #9]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d007      	beq.n	8011b14 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011b04:	4b08      	ldr	r3, [pc, #32]	@ (8011b28 <HAL_PCD_ResumeCallback+0x34>)
 8011b06:	691b      	ldr	r3, [r3, #16]
 8011b08:	4a07      	ldr	r2, [pc, #28]	@ (8011b28 <HAL_PCD_ResumeCallback+0x34>)
 8011b0a:	f023 0306 	bic.w	r3, r3, #6
 8011b0e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8011b10:	f000 f9fa 	bl	8011f08 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	f7fe fd35 	bl	801058a <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8011b20:	bf00      	nop
 8011b22:	3708      	adds	r7, #8
 8011b24:	46bd      	mov	sp, r7
 8011b26:	bd80      	pop	{r7, pc}
 8011b28:	e000ed00 	.word	0xe000ed00

08011b2c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	b082      	sub	sp, #8
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8011b34:	4a2c      	ldr	r2, [pc, #176]	@ (8011be8 <USBD_LL_Init+0xbc>)
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	4a2a      	ldr	r2, [pc, #168]	@ (8011be8 <USBD_LL_Init+0xbc>)
 8011b40:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8011b44:	f7f8 fa9a 	bl	800a07c <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8011b48:	4b27      	ldr	r3, [pc, #156]	@ (8011be8 <USBD_LL_Init+0xbc>)
 8011b4a:	4a28      	ldr	r2, [pc, #160]	@ (8011bec <USBD_LL_Init+0xc0>)
 8011b4c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8011b4e:	4b26      	ldr	r3, [pc, #152]	@ (8011be8 <USBD_LL_Init+0xbc>)
 8011b50:	2208      	movs	r2, #8
 8011b52:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8011b54:	4b24      	ldr	r3, [pc, #144]	@ (8011be8 <USBD_LL_Init+0xbc>)
 8011b56:	2202      	movs	r2, #2
 8011b58:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011b5a:	4b23      	ldr	r3, [pc, #140]	@ (8011be8 <USBD_LL_Init+0xbc>)
 8011b5c:	2202      	movs	r2, #2
 8011b5e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8011b60:	4b21      	ldr	r3, [pc, #132]	@ (8011be8 <USBD_LL_Init+0xbc>)
 8011b62:	2200      	movs	r2, #0
 8011b64:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8011b66:	4b20      	ldr	r3, [pc, #128]	@ (8011be8 <USBD_LL_Init+0xbc>)
 8011b68:	2200      	movs	r2, #0
 8011b6a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8011b6c:	4b1e      	ldr	r3, [pc, #120]	@ (8011be8 <USBD_LL_Init+0xbc>)
 8011b6e:	2200      	movs	r2, #0
 8011b70:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8011b72:	4b1d      	ldr	r3, [pc, #116]	@ (8011be8 <USBD_LL_Init+0xbc>)
 8011b74:	2200      	movs	r2, #0
 8011b76:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8011b78:	481b      	ldr	r0, [pc, #108]	@ (8011be8 <USBD_LL_Init+0xbc>)
 8011b7a:	f7f6 fd2e 	bl	80085da <HAL_PCD_Init>
 8011b7e:	4603      	mov	r3, r0
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d001      	beq.n	8011b88 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 8011b84:	f7f2 fbc0 	bl	8004308 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011b8e:	2318      	movs	r3, #24
 8011b90:	2200      	movs	r2, #0
 8011b92:	2100      	movs	r1, #0
 8011b94:	f7f8 f9e7 	bl	8009f66 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011b9e:	2358      	movs	r3, #88	@ 0x58
 8011ba0:	2200      	movs	r2, #0
 8011ba2:	2180      	movs	r1, #128	@ 0x80
 8011ba4:	f7f8 f9df 	bl	8009f66 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011bae:	23c0      	movs	r3, #192	@ 0xc0
 8011bb0:	2200      	movs	r2, #0
 8011bb2:	2181      	movs	r1, #129	@ 0x81
 8011bb4:	f7f8 f9d7 	bl	8009f66 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011bbe:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8011bc2:	2200      	movs	r2, #0
 8011bc4:	2101      	movs	r1, #1
 8011bc6:	f7f8 f9ce 	bl	8009f66 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011bd0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8011bd4:	2200      	movs	r2, #0
 8011bd6:	2182      	movs	r1, #130	@ 0x82
 8011bd8:	f7f8 f9c5 	bl	8009f66 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8011bdc:	2300      	movs	r3, #0
}
 8011bde:	4618      	mov	r0, r3
 8011be0:	3708      	adds	r7, #8
 8011be2:	46bd      	mov	sp, r7
 8011be4:	bd80      	pop	{r7, pc}
 8011be6:	bf00      	nop
 8011be8:	20001ca4 	.word	0x20001ca4
 8011bec:	40006800 	.word	0x40006800

08011bf0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011bf0:	b580      	push	{r7, lr}
 8011bf2:	b084      	sub	sp, #16
 8011bf4:	af00      	add	r7, sp, #0
 8011bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011c06:	4618      	mov	r0, r3
 8011c08:	f7f6 fdb5 	bl	8008776 <HAL_PCD_Start>
 8011c0c:	4603      	mov	r3, r0
 8011c0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c10:	7bfb      	ldrb	r3, [r7, #15]
 8011c12:	4618      	mov	r0, r3
 8011c14:	f000 f97e 	bl	8011f14 <USBD_Get_USB_Status>
 8011c18:	4603      	mov	r3, r0
 8011c1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c1e:	4618      	mov	r0, r3
 8011c20:	3710      	adds	r7, #16
 8011c22:	46bd      	mov	sp, r7
 8011c24:	bd80      	pop	{r7, pc}

08011c26 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011c26:	b580      	push	{r7, lr}
 8011c28:	b084      	sub	sp, #16
 8011c2a:	af00      	add	r7, sp, #0
 8011c2c:	6078      	str	r0, [r7, #4]
 8011c2e:	4608      	mov	r0, r1
 8011c30:	4611      	mov	r1, r2
 8011c32:	461a      	mov	r2, r3
 8011c34:	4603      	mov	r3, r0
 8011c36:	70fb      	strb	r3, [r7, #3]
 8011c38:	460b      	mov	r3, r1
 8011c3a:	70bb      	strb	r3, [r7, #2]
 8011c3c:	4613      	mov	r3, r2
 8011c3e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c40:	2300      	movs	r3, #0
 8011c42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c44:	2300      	movs	r3, #0
 8011c46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011c4e:	78bb      	ldrb	r3, [r7, #2]
 8011c50:	883a      	ldrh	r2, [r7, #0]
 8011c52:	78f9      	ldrb	r1, [r7, #3]
 8011c54:	f7f6 fefc 	bl	8008a50 <HAL_PCD_EP_Open>
 8011c58:	4603      	mov	r3, r0
 8011c5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c5c:	7bfb      	ldrb	r3, [r7, #15]
 8011c5e:	4618      	mov	r0, r3
 8011c60:	f000 f958 	bl	8011f14 <USBD_Get_USB_Status>
 8011c64:	4603      	mov	r3, r0
 8011c66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c68:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	3710      	adds	r7, #16
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	bd80      	pop	{r7, pc}

08011c72 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011c72:	b580      	push	{r7, lr}
 8011c74:	b084      	sub	sp, #16
 8011c76:	af00      	add	r7, sp, #0
 8011c78:	6078      	str	r0, [r7, #4]
 8011c7a:	460b      	mov	r3, r1
 8011c7c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c7e:	2300      	movs	r3, #0
 8011c80:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c82:	2300      	movs	r3, #0
 8011c84:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011c8c:	78fa      	ldrb	r2, [r7, #3]
 8011c8e:	4611      	mov	r1, r2
 8011c90:	4618      	mov	r0, r3
 8011c92:	f7f6 ff3a 	bl	8008b0a <HAL_PCD_EP_Close>
 8011c96:	4603      	mov	r3, r0
 8011c98:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c9a:	7bfb      	ldrb	r3, [r7, #15]
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	f000 f939 	bl	8011f14 <USBD_Get_USB_Status>
 8011ca2:	4603      	mov	r3, r0
 8011ca4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011ca6:	7bbb      	ldrb	r3, [r7, #14]
}
 8011ca8:	4618      	mov	r0, r3
 8011caa:	3710      	adds	r7, #16
 8011cac:	46bd      	mov	sp, r7
 8011cae:	bd80      	pop	{r7, pc}

08011cb0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011cb0:	b580      	push	{r7, lr}
 8011cb2:	b084      	sub	sp, #16
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	6078      	str	r0, [r7, #4]
 8011cb8:	460b      	mov	r3, r1
 8011cba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011cca:	78fa      	ldrb	r2, [r7, #3]
 8011ccc:	4611      	mov	r1, r2
 8011cce:	4618      	mov	r0, r3
 8011cd0:	f7f6 ffe3 	bl	8008c9a <HAL_PCD_EP_SetStall>
 8011cd4:	4603      	mov	r3, r0
 8011cd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011cd8:	7bfb      	ldrb	r3, [r7, #15]
 8011cda:	4618      	mov	r0, r3
 8011cdc:	f000 f91a 	bl	8011f14 <USBD_Get_USB_Status>
 8011ce0:	4603      	mov	r3, r0
 8011ce2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011ce4:	7bbb      	ldrb	r3, [r7, #14]
}
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	3710      	adds	r7, #16
 8011cea:	46bd      	mov	sp, r7
 8011cec:	bd80      	pop	{r7, pc}

08011cee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011cee:	b580      	push	{r7, lr}
 8011cf0:	b084      	sub	sp, #16
 8011cf2:	af00      	add	r7, sp, #0
 8011cf4:	6078      	str	r0, [r7, #4]
 8011cf6:	460b      	mov	r3, r1
 8011cf8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011cfe:	2300      	movs	r3, #0
 8011d00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011d08:	78fa      	ldrb	r2, [r7, #3]
 8011d0a:	4611      	mov	r1, r2
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	f7f7 f816 	bl	8008d3e <HAL_PCD_EP_ClrStall>
 8011d12:	4603      	mov	r3, r0
 8011d14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d16:	7bfb      	ldrb	r3, [r7, #15]
 8011d18:	4618      	mov	r0, r3
 8011d1a:	f000 f8fb 	bl	8011f14 <USBD_Get_USB_Status>
 8011d1e:	4603      	mov	r3, r0
 8011d20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011d22:	7bbb      	ldrb	r3, [r7, #14]
}
 8011d24:	4618      	mov	r0, r3
 8011d26:	3710      	adds	r7, #16
 8011d28:	46bd      	mov	sp, r7
 8011d2a:	bd80      	pop	{r7, pc}

08011d2c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011d2c:	b480      	push	{r7}
 8011d2e:	b085      	sub	sp, #20
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	6078      	str	r0, [r7, #4]
 8011d34:	460b      	mov	r3, r1
 8011d36:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011d3e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011d40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	da0b      	bge.n	8011d60 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011d48:	78fb      	ldrb	r3, [r7, #3]
 8011d4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011d4e:	68f9      	ldr	r1, [r7, #12]
 8011d50:	4613      	mov	r3, r2
 8011d52:	009b      	lsls	r3, r3, #2
 8011d54:	4413      	add	r3, r2
 8011d56:	00db      	lsls	r3, r3, #3
 8011d58:	440b      	add	r3, r1
 8011d5a:	3312      	adds	r3, #18
 8011d5c:	781b      	ldrb	r3, [r3, #0]
 8011d5e:	e00b      	b.n	8011d78 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011d60:	78fb      	ldrb	r3, [r7, #3]
 8011d62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011d66:	68f9      	ldr	r1, [r7, #12]
 8011d68:	4613      	mov	r3, r2
 8011d6a:	009b      	lsls	r3, r3, #2
 8011d6c:	4413      	add	r3, r2
 8011d6e:	00db      	lsls	r3, r3, #3
 8011d70:	440b      	add	r3, r1
 8011d72:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8011d76:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011d78:	4618      	mov	r0, r3
 8011d7a:	3714      	adds	r7, #20
 8011d7c:	46bd      	mov	sp, r7
 8011d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d82:	4770      	bx	lr

08011d84 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b084      	sub	sp, #16
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	6078      	str	r0, [r7, #4]
 8011d8c:	460b      	mov	r3, r1
 8011d8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d90:	2300      	movs	r3, #0
 8011d92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d94:	2300      	movs	r3, #0
 8011d96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011d9e:	78fa      	ldrb	r2, [r7, #3]
 8011da0:	4611      	mov	r1, r2
 8011da2:	4618      	mov	r0, r3
 8011da4:	f7f6 fe30 	bl	8008a08 <HAL_PCD_SetAddress>
 8011da8:	4603      	mov	r3, r0
 8011daa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011dac:	7bfb      	ldrb	r3, [r7, #15]
 8011dae:	4618      	mov	r0, r3
 8011db0:	f000 f8b0 	bl	8011f14 <USBD_Get_USB_Status>
 8011db4:	4603      	mov	r3, r0
 8011db6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011db8:	7bbb      	ldrb	r3, [r7, #14]
}
 8011dba:	4618      	mov	r0, r3
 8011dbc:	3710      	adds	r7, #16
 8011dbe:	46bd      	mov	sp, r7
 8011dc0:	bd80      	pop	{r7, pc}

08011dc2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011dc2:	b580      	push	{r7, lr}
 8011dc4:	b086      	sub	sp, #24
 8011dc6:	af00      	add	r7, sp, #0
 8011dc8:	60f8      	str	r0, [r7, #12]
 8011dca:	607a      	str	r2, [r7, #4]
 8011dcc:	603b      	str	r3, [r7, #0]
 8011dce:	460b      	mov	r3, r1
 8011dd0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011de0:	7af9      	ldrb	r1, [r7, #11]
 8011de2:	683b      	ldr	r3, [r7, #0]
 8011de4:	687a      	ldr	r2, [r7, #4]
 8011de6:	f7f6 ff21 	bl	8008c2c <HAL_PCD_EP_Transmit>
 8011dea:	4603      	mov	r3, r0
 8011dec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011dee:	7dfb      	ldrb	r3, [r7, #23]
 8011df0:	4618      	mov	r0, r3
 8011df2:	f000 f88f 	bl	8011f14 <USBD_Get_USB_Status>
 8011df6:	4603      	mov	r3, r0
 8011df8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011dfa:	7dbb      	ldrb	r3, [r7, #22]
}
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	3718      	adds	r7, #24
 8011e00:	46bd      	mov	sp, r7
 8011e02:	bd80      	pop	{r7, pc}

08011e04 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b086      	sub	sp, #24
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	60f8      	str	r0, [r7, #12]
 8011e0c:	607a      	str	r2, [r7, #4]
 8011e0e:	603b      	str	r3, [r7, #0]
 8011e10:	460b      	mov	r3, r1
 8011e12:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011e14:	2300      	movs	r3, #0
 8011e16:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011e18:	2300      	movs	r3, #0
 8011e1a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011e22:	7af9      	ldrb	r1, [r7, #11]
 8011e24:	683b      	ldr	r3, [r7, #0]
 8011e26:	687a      	ldr	r2, [r7, #4]
 8011e28:	f7f6 feb7 	bl	8008b9a <HAL_PCD_EP_Receive>
 8011e2c:	4603      	mov	r3, r0
 8011e2e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011e30:	7dfb      	ldrb	r3, [r7, #23]
 8011e32:	4618      	mov	r0, r3
 8011e34:	f000 f86e 	bl	8011f14 <USBD_Get_USB_Status>
 8011e38:	4603      	mov	r3, r0
 8011e3a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011e3c:	7dbb      	ldrb	r3, [r7, #22]
}
 8011e3e:	4618      	mov	r0, r3
 8011e40:	3718      	adds	r7, #24
 8011e42:	46bd      	mov	sp, r7
 8011e44:	bd80      	pop	{r7, pc}

08011e46 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011e46:	b580      	push	{r7, lr}
 8011e48:	b082      	sub	sp, #8
 8011e4a:	af00      	add	r7, sp, #0
 8011e4c:	6078      	str	r0, [r7, #4]
 8011e4e:	460b      	mov	r3, r1
 8011e50:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011e58:	78fa      	ldrb	r2, [r7, #3]
 8011e5a:	4611      	mov	r1, r2
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	f7f6 fecd 	bl	8008bfc <HAL_PCD_EP_GetRxCount>
 8011e62:	4603      	mov	r3, r0
}
 8011e64:	4618      	mov	r0, r3
 8011e66:	3708      	adds	r7, #8
 8011e68:	46bd      	mov	sp, r7
 8011e6a:	bd80      	pop	{r7, pc}

08011e6c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011e6c:	b580      	push	{r7, lr}
 8011e6e:	b082      	sub	sp, #8
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	6078      	str	r0, [r7, #4]
 8011e74:	460b      	mov	r3, r1
 8011e76:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8011e78:	78fb      	ldrb	r3, [r7, #3]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d002      	beq.n	8011e84 <HAL_PCDEx_LPM_Callback+0x18>
 8011e7e:	2b01      	cmp	r3, #1
 8011e80:	d013      	beq.n	8011eaa <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8011e82:	e023      	b.n	8011ecc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	7a5b      	ldrb	r3, [r3, #9]
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d007      	beq.n	8011e9c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8011e8c:	f000 f83c 	bl	8011f08 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011e90:	4b10      	ldr	r3, [pc, #64]	@ (8011ed4 <HAL_PCDEx_LPM_Callback+0x68>)
 8011e92:	691b      	ldr	r3, [r3, #16]
 8011e94:	4a0f      	ldr	r2, [pc, #60]	@ (8011ed4 <HAL_PCDEx_LPM_Callback+0x68>)
 8011e96:	f023 0306 	bic.w	r3, r3, #6
 8011e9a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011ea2:	4618      	mov	r0, r3
 8011ea4:	f7fe fb71 	bl	801058a <USBD_LL_Resume>
    break;
 8011ea8:	e010      	b.n	8011ecc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011eb0:	4618      	mov	r0, r3
 8011eb2:	f7fe fb4e 	bl	8010552 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	7a5b      	ldrb	r3, [r3, #9]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d005      	beq.n	8011eca <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011ebe:	4b05      	ldr	r3, [pc, #20]	@ (8011ed4 <HAL_PCDEx_LPM_Callback+0x68>)
 8011ec0:	691b      	ldr	r3, [r3, #16]
 8011ec2:	4a04      	ldr	r2, [pc, #16]	@ (8011ed4 <HAL_PCDEx_LPM_Callback+0x68>)
 8011ec4:	f043 0306 	orr.w	r3, r3, #6
 8011ec8:	6113      	str	r3, [r2, #16]
    break;
 8011eca:	bf00      	nop
}
 8011ecc:	bf00      	nop
 8011ece:	3708      	adds	r7, #8
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	bd80      	pop	{r7, pc}
 8011ed4:	e000ed00 	.word	0xe000ed00

08011ed8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011ed8:	b480      	push	{r7}
 8011eda:	b083      	sub	sp, #12
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011ee0:	4b03      	ldr	r3, [pc, #12]	@ (8011ef0 <USBD_static_malloc+0x18>)
}
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	370c      	adds	r7, #12
 8011ee6:	46bd      	mov	sp, r7
 8011ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eec:	4770      	bx	lr
 8011eee:	bf00      	nop
 8011ef0:	20001f80 	.word	0x20001f80

08011ef4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011ef4:	b480      	push	{r7}
 8011ef6:	b083      	sub	sp, #12
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8011efc:	bf00      	nop
 8011efe:	370c      	adds	r7, #12
 8011f00:	46bd      	mov	sp, r7
 8011f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f06:	4770      	bx	lr

08011f08 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8011f0c:	f7f2 f828 	bl	8003f60 <SystemClock_Config>
}
 8011f10:	bf00      	nop
 8011f12:	bd80      	pop	{r7, pc}

08011f14 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011f14:	b480      	push	{r7}
 8011f16:	b085      	sub	sp, #20
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	4603      	mov	r3, r0
 8011f1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011f1e:	2300      	movs	r3, #0
 8011f20:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011f22:	79fb      	ldrb	r3, [r7, #7]
 8011f24:	2b03      	cmp	r3, #3
 8011f26:	d817      	bhi.n	8011f58 <USBD_Get_USB_Status+0x44>
 8011f28:	a201      	add	r2, pc, #4	@ (adr r2, 8011f30 <USBD_Get_USB_Status+0x1c>)
 8011f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f2e:	bf00      	nop
 8011f30:	08011f41 	.word	0x08011f41
 8011f34:	08011f47 	.word	0x08011f47
 8011f38:	08011f4d 	.word	0x08011f4d
 8011f3c:	08011f53 	.word	0x08011f53
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011f40:	2300      	movs	r3, #0
 8011f42:	73fb      	strb	r3, [r7, #15]
    break;
 8011f44:	e00b      	b.n	8011f5e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011f46:	2303      	movs	r3, #3
 8011f48:	73fb      	strb	r3, [r7, #15]
    break;
 8011f4a:	e008      	b.n	8011f5e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011f4c:	2301      	movs	r3, #1
 8011f4e:	73fb      	strb	r3, [r7, #15]
    break;
 8011f50:	e005      	b.n	8011f5e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011f52:	2303      	movs	r3, #3
 8011f54:	73fb      	strb	r3, [r7, #15]
    break;
 8011f56:	e002      	b.n	8011f5e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011f58:	2303      	movs	r3, #3
 8011f5a:	73fb      	strb	r3, [r7, #15]
    break;
 8011f5c:	bf00      	nop
  }
  return usb_status;
 8011f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f60:	4618      	mov	r0, r3
 8011f62:	3714      	adds	r7, #20
 8011f64:	46bd      	mov	sp, r7
 8011f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f6a:	4770      	bx	lr

08011f6c <__cvt>:
 8011f6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011f70:	ec57 6b10 	vmov	r6, r7, d0
 8011f74:	2f00      	cmp	r7, #0
 8011f76:	460c      	mov	r4, r1
 8011f78:	4619      	mov	r1, r3
 8011f7a:	463b      	mov	r3, r7
 8011f7c:	bfbb      	ittet	lt
 8011f7e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8011f82:	461f      	movlt	r7, r3
 8011f84:	2300      	movge	r3, #0
 8011f86:	232d      	movlt	r3, #45	@ 0x2d
 8011f88:	700b      	strb	r3, [r1, #0]
 8011f8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011f8c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8011f90:	4691      	mov	r9, r2
 8011f92:	f023 0820 	bic.w	r8, r3, #32
 8011f96:	bfbc      	itt	lt
 8011f98:	4632      	movlt	r2, r6
 8011f9a:	4616      	movlt	r6, r2
 8011f9c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8011fa0:	d005      	beq.n	8011fae <__cvt+0x42>
 8011fa2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8011fa6:	d100      	bne.n	8011faa <__cvt+0x3e>
 8011fa8:	3401      	adds	r4, #1
 8011faa:	2102      	movs	r1, #2
 8011fac:	e000      	b.n	8011fb0 <__cvt+0x44>
 8011fae:	2103      	movs	r1, #3
 8011fb0:	ab03      	add	r3, sp, #12
 8011fb2:	9301      	str	r3, [sp, #4]
 8011fb4:	ab02      	add	r3, sp, #8
 8011fb6:	9300      	str	r3, [sp, #0]
 8011fb8:	ec47 6b10 	vmov	d0, r6, r7
 8011fbc:	4653      	mov	r3, sl
 8011fbe:	4622      	mov	r2, r4
 8011fc0:	f000 fe62 	bl	8012c88 <_dtoa_r>
 8011fc4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8011fc8:	4605      	mov	r5, r0
 8011fca:	d119      	bne.n	8012000 <__cvt+0x94>
 8011fcc:	f019 0f01 	tst.w	r9, #1
 8011fd0:	d00e      	beq.n	8011ff0 <__cvt+0x84>
 8011fd2:	eb00 0904 	add.w	r9, r0, r4
 8011fd6:	2200      	movs	r2, #0
 8011fd8:	2300      	movs	r3, #0
 8011fda:	4630      	mov	r0, r6
 8011fdc:	4639      	mov	r1, r7
 8011fde:	f7ee fd4b 	bl	8000a78 <__aeabi_dcmpeq>
 8011fe2:	b108      	cbz	r0, 8011fe8 <__cvt+0x7c>
 8011fe4:	f8cd 900c 	str.w	r9, [sp, #12]
 8011fe8:	2230      	movs	r2, #48	@ 0x30
 8011fea:	9b03      	ldr	r3, [sp, #12]
 8011fec:	454b      	cmp	r3, r9
 8011fee:	d31e      	bcc.n	801202e <__cvt+0xc2>
 8011ff0:	9b03      	ldr	r3, [sp, #12]
 8011ff2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011ff4:	1b5b      	subs	r3, r3, r5
 8011ff6:	4628      	mov	r0, r5
 8011ff8:	6013      	str	r3, [r2, #0]
 8011ffa:	b004      	add	sp, #16
 8011ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012000:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8012004:	eb00 0904 	add.w	r9, r0, r4
 8012008:	d1e5      	bne.n	8011fd6 <__cvt+0x6a>
 801200a:	7803      	ldrb	r3, [r0, #0]
 801200c:	2b30      	cmp	r3, #48	@ 0x30
 801200e:	d10a      	bne.n	8012026 <__cvt+0xba>
 8012010:	2200      	movs	r2, #0
 8012012:	2300      	movs	r3, #0
 8012014:	4630      	mov	r0, r6
 8012016:	4639      	mov	r1, r7
 8012018:	f7ee fd2e 	bl	8000a78 <__aeabi_dcmpeq>
 801201c:	b918      	cbnz	r0, 8012026 <__cvt+0xba>
 801201e:	f1c4 0401 	rsb	r4, r4, #1
 8012022:	f8ca 4000 	str.w	r4, [sl]
 8012026:	f8da 3000 	ldr.w	r3, [sl]
 801202a:	4499      	add	r9, r3
 801202c:	e7d3      	b.n	8011fd6 <__cvt+0x6a>
 801202e:	1c59      	adds	r1, r3, #1
 8012030:	9103      	str	r1, [sp, #12]
 8012032:	701a      	strb	r2, [r3, #0]
 8012034:	e7d9      	b.n	8011fea <__cvt+0x7e>

08012036 <__exponent>:
 8012036:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012038:	2900      	cmp	r1, #0
 801203a:	bfba      	itte	lt
 801203c:	4249      	neglt	r1, r1
 801203e:	232d      	movlt	r3, #45	@ 0x2d
 8012040:	232b      	movge	r3, #43	@ 0x2b
 8012042:	2909      	cmp	r1, #9
 8012044:	7002      	strb	r2, [r0, #0]
 8012046:	7043      	strb	r3, [r0, #1]
 8012048:	dd29      	ble.n	801209e <__exponent+0x68>
 801204a:	f10d 0307 	add.w	r3, sp, #7
 801204e:	461d      	mov	r5, r3
 8012050:	270a      	movs	r7, #10
 8012052:	461a      	mov	r2, r3
 8012054:	fbb1 f6f7 	udiv	r6, r1, r7
 8012058:	fb07 1416 	mls	r4, r7, r6, r1
 801205c:	3430      	adds	r4, #48	@ 0x30
 801205e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012062:	460c      	mov	r4, r1
 8012064:	2c63      	cmp	r4, #99	@ 0x63
 8012066:	f103 33ff 	add.w	r3, r3, #4294967295
 801206a:	4631      	mov	r1, r6
 801206c:	dcf1      	bgt.n	8012052 <__exponent+0x1c>
 801206e:	3130      	adds	r1, #48	@ 0x30
 8012070:	1e94      	subs	r4, r2, #2
 8012072:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012076:	1c41      	adds	r1, r0, #1
 8012078:	4623      	mov	r3, r4
 801207a:	42ab      	cmp	r3, r5
 801207c:	d30a      	bcc.n	8012094 <__exponent+0x5e>
 801207e:	f10d 0309 	add.w	r3, sp, #9
 8012082:	1a9b      	subs	r3, r3, r2
 8012084:	42ac      	cmp	r4, r5
 8012086:	bf88      	it	hi
 8012088:	2300      	movhi	r3, #0
 801208a:	3302      	adds	r3, #2
 801208c:	4403      	add	r3, r0
 801208e:	1a18      	subs	r0, r3, r0
 8012090:	b003      	add	sp, #12
 8012092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012094:	f813 6b01 	ldrb.w	r6, [r3], #1
 8012098:	f801 6f01 	strb.w	r6, [r1, #1]!
 801209c:	e7ed      	b.n	801207a <__exponent+0x44>
 801209e:	2330      	movs	r3, #48	@ 0x30
 80120a0:	3130      	adds	r1, #48	@ 0x30
 80120a2:	7083      	strb	r3, [r0, #2]
 80120a4:	70c1      	strb	r1, [r0, #3]
 80120a6:	1d03      	adds	r3, r0, #4
 80120a8:	e7f1      	b.n	801208e <__exponent+0x58>
	...

080120ac <_printf_float>:
 80120ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120b0:	b08d      	sub	sp, #52	@ 0x34
 80120b2:	460c      	mov	r4, r1
 80120b4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80120b8:	4616      	mov	r6, r2
 80120ba:	461f      	mov	r7, r3
 80120bc:	4605      	mov	r5, r0
 80120be:	f000 fcd5 	bl	8012a6c <_localeconv_r>
 80120c2:	6803      	ldr	r3, [r0, #0]
 80120c4:	9304      	str	r3, [sp, #16]
 80120c6:	4618      	mov	r0, r3
 80120c8:	f7ee f8aa 	bl	8000220 <strlen>
 80120cc:	2300      	movs	r3, #0
 80120ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80120d0:	f8d8 3000 	ldr.w	r3, [r8]
 80120d4:	9005      	str	r0, [sp, #20]
 80120d6:	3307      	adds	r3, #7
 80120d8:	f023 0307 	bic.w	r3, r3, #7
 80120dc:	f103 0208 	add.w	r2, r3, #8
 80120e0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80120e4:	f8d4 b000 	ldr.w	fp, [r4]
 80120e8:	f8c8 2000 	str.w	r2, [r8]
 80120ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80120f0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80120f4:	9307      	str	r3, [sp, #28]
 80120f6:	f8cd 8018 	str.w	r8, [sp, #24]
 80120fa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80120fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012102:	4b9c      	ldr	r3, [pc, #624]	@ (8012374 <_printf_float+0x2c8>)
 8012104:	f04f 32ff 	mov.w	r2, #4294967295
 8012108:	f7ee fce8 	bl	8000adc <__aeabi_dcmpun>
 801210c:	bb70      	cbnz	r0, 801216c <_printf_float+0xc0>
 801210e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012112:	4b98      	ldr	r3, [pc, #608]	@ (8012374 <_printf_float+0x2c8>)
 8012114:	f04f 32ff 	mov.w	r2, #4294967295
 8012118:	f7ee fcc2 	bl	8000aa0 <__aeabi_dcmple>
 801211c:	bb30      	cbnz	r0, 801216c <_printf_float+0xc0>
 801211e:	2200      	movs	r2, #0
 8012120:	2300      	movs	r3, #0
 8012122:	4640      	mov	r0, r8
 8012124:	4649      	mov	r1, r9
 8012126:	f7ee fcb1 	bl	8000a8c <__aeabi_dcmplt>
 801212a:	b110      	cbz	r0, 8012132 <_printf_float+0x86>
 801212c:	232d      	movs	r3, #45	@ 0x2d
 801212e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012132:	4a91      	ldr	r2, [pc, #580]	@ (8012378 <_printf_float+0x2cc>)
 8012134:	4b91      	ldr	r3, [pc, #580]	@ (801237c <_printf_float+0x2d0>)
 8012136:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801213a:	bf94      	ite	ls
 801213c:	4690      	movls	r8, r2
 801213e:	4698      	movhi	r8, r3
 8012140:	2303      	movs	r3, #3
 8012142:	6123      	str	r3, [r4, #16]
 8012144:	f02b 0304 	bic.w	r3, fp, #4
 8012148:	6023      	str	r3, [r4, #0]
 801214a:	f04f 0900 	mov.w	r9, #0
 801214e:	9700      	str	r7, [sp, #0]
 8012150:	4633      	mov	r3, r6
 8012152:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012154:	4621      	mov	r1, r4
 8012156:	4628      	mov	r0, r5
 8012158:	f000 f9d2 	bl	8012500 <_printf_common>
 801215c:	3001      	adds	r0, #1
 801215e:	f040 808d 	bne.w	801227c <_printf_float+0x1d0>
 8012162:	f04f 30ff 	mov.w	r0, #4294967295
 8012166:	b00d      	add	sp, #52	@ 0x34
 8012168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801216c:	4642      	mov	r2, r8
 801216e:	464b      	mov	r3, r9
 8012170:	4640      	mov	r0, r8
 8012172:	4649      	mov	r1, r9
 8012174:	f7ee fcb2 	bl	8000adc <__aeabi_dcmpun>
 8012178:	b140      	cbz	r0, 801218c <_printf_float+0xe0>
 801217a:	464b      	mov	r3, r9
 801217c:	2b00      	cmp	r3, #0
 801217e:	bfbc      	itt	lt
 8012180:	232d      	movlt	r3, #45	@ 0x2d
 8012182:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8012186:	4a7e      	ldr	r2, [pc, #504]	@ (8012380 <_printf_float+0x2d4>)
 8012188:	4b7e      	ldr	r3, [pc, #504]	@ (8012384 <_printf_float+0x2d8>)
 801218a:	e7d4      	b.n	8012136 <_printf_float+0x8a>
 801218c:	6863      	ldr	r3, [r4, #4]
 801218e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8012192:	9206      	str	r2, [sp, #24]
 8012194:	1c5a      	adds	r2, r3, #1
 8012196:	d13b      	bne.n	8012210 <_printf_float+0x164>
 8012198:	2306      	movs	r3, #6
 801219a:	6063      	str	r3, [r4, #4]
 801219c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80121a0:	2300      	movs	r3, #0
 80121a2:	6022      	str	r2, [r4, #0]
 80121a4:	9303      	str	r3, [sp, #12]
 80121a6:	ab0a      	add	r3, sp, #40	@ 0x28
 80121a8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80121ac:	ab09      	add	r3, sp, #36	@ 0x24
 80121ae:	9300      	str	r3, [sp, #0]
 80121b0:	6861      	ldr	r1, [r4, #4]
 80121b2:	ec49 8b10 	vmov	d0, r8, r9
 80121b6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80121ba:	4628      	mov	r0, r5
 80121bc:	f7ff fed6 	bl	8011f6c <__cvt>
 80121c0:	9b06      	ldr	r3, [sp, #24]
 80121c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80121c4:	2b47      	cmp	r3, #71	@ 0x47
 80121c6:	4680      	mov	r8, r0
 80121c8:	d129      	bne.n	801221e <_printf_float+0x172>
 80121ca:	1cc8      	adds	r0, r1, #3
 80121cc:	db02      	blt.n	80121d4 <_printf_float+0x128>
 80121ce:	6863      	ldr	r3, [r4, #4]
 80121d0:	4299      	cmp	r1, r3
 80121d2:	dd41      	ble.n	8012258 <_printf_float+0x1ac>
 80121d4:	f1aa 0a02 	sub.w	sl, sl, #2
 80121d8:	fa5f fa8a 	uxtb.w	sl, sl
 80121dc:	3901      	subs	r1, #1
 80121de:	4652      	mov	r2, sl
 80121e0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80121e4:	9109      	str	r1, [sp, #36]	@ 0x24
 80121e6:	f7ff ff26 	bl	8012036 <__exponent>
 80121ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80121ec:	1813      	adds	r3, r2, r0
 80121ee:	2a01      	cmp	r2, #1
 80121f0:	4681      	mov	r9, r0
 80121f2:	6123      	str	r3, [r4, #16]
 80121f4:	dc02      	bgt.n	80121fc <_printf_float+0x150>
 80121f6:	6822      	ldr	r2, [r4, #0]
 80121f8:	07d2      	lsls	r2, r2, #31
 80121fa:	d501      	bpl.n	8012200 <_printf_float+0x154>
 80121fc:	3301      	adds	r3, #1
 80121fe:	6123      	str	r3, [r4, #16]
 8012200:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012204:	2b00      	cmp	r3, #0
 8012206:	d0a2      	beq.n	801214e <_printf_float+0xa2>
 8012208:	232d      	movs	r3, #45	@ 0x2d
 801220a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801220e:	e79e      	b.n	801214e <_printf_float+0xa2>
 8012210:	9a06      	ldr	r2, [sp, #24]
 8012212:	2a47      	cmp	r2, #71	@ 0x47
 8012214:	d1c2      	bne.n	801219c <_printf_float+0xf0>
 8012216:	2b00      	cmp	r3, #0
 8012218:	d1c0      	bne.n	801219c <_printf_float+0xf0>
 801221a:	2301      	movs	r3, #1
 801221c:	e7bd      	b.n	801219a <_printf_float+0xee>
 801221e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012222:	d9db      	bls.n	80121dc <_printf_float+0x130>
 8012224:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8012228:	d118      	bne.n	801225c <_printf_float+0x1b0>
 801222a:	2900      	cmp	r1, #0
 801222c:	6863      	ldr	r3, [r4, #4]
 801222e:	dd0b      	ble.n	8012248 <_printf_float+0x19c>
 8012230:	6121      	str	r1, [r4, #16]
 8012232:	b913      	cbnz	r3, 801223a <_printf_float+0x18e>
 8012234:	6822      	ldr	r2, [r4, #0]
 8012236:	07d0      	lsls	r0, r2, #31
 8012238:	d502      	bpl.n	8012240 <_printf_float+0x194>
 801223a:	3301      	adds	r3, #1
 801223c:	440b      	add	r3, r1
 801223e:	6123      	str	r3, [r4, #16]
 8012240:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012242:	f04f 0900 	mov.w	r9, #0
 8012246:	e7db      	b.n	8012200 <_printf_float+0x154>
 8012248:	b913      	cbnz	r3, 8012250 <_printf_float+0x1a4>
 801224a:	6822      	ldr	r2, [r4, #0]
 801224c:	07d2      	lsls	r2, r2, #31
 801224e:	d501      	bpl.n	8012254 <_printf_float+0x1a8>
 8012250:	3302      	adds	r3, #2
 8012252:	e7f4      	b.n	801223e <_printf_float+0x192>
 8012254:	2301      	movs	r3, #1
 8012256:	e7f2      	b.n	801223e <_printf_float+0x192>
 8012258:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801225c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801225e:	4299      	cmp	r1, r3
 8012260:	db05      	blt.n	801226e <_printf_float+0x1c2>
 8012262:	6823      	ldr	r3, [r4, #0]
 8012264:	6121      	str	r1, [r4, #16]
 8012266:	07d8      	lsls	r0, r3, #31
 8012268:	d5ea      	bpl.n	8012240 <_printf_float+0x194>
 801226a:	1c4b      	adds	r3, r1, #1
 801226c:	e7e7      	b.n	801223e <_printf_float+0x192>
 801226e:	2900      	cmp	r1, #0
 8012270:	bfd4      	ite	le
 8012272:	f1c1 0202 	rsble	r2, r1, #2
 8012276:	2201      	movgt	r2, #1
 8012278:	4413      	add	r3, r2
 801227a:	e7e0      	b.n	801223e <_printf_float+0x192>
 801227c:	6823      	ldr	r3, [r4, #0]
 801227e:	055a      	lsls	r2, r3, #21
 8012280:	d407      	bmi.n	8012292 <_printf_float+0x1e6>
 8012282:	6923      	ldr	r3, [r4, #16]
 8012284:	4642      	mov	r2, r8
 8012286:	4631      	mov	r1, r6
 8012288:	4628      	mov	r0, r5
 801228a:	47b8      	blx	r7
 801228c:	3001      	adds	r0, #1
 801228e:	d12b      	bne.n	80122e8 <_printf_float+0x23c>
 8012290:	e767      	b.n	8012162 <_printf_float+0xb6>
 8012292:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8012296:	f240 80dd 	bls.w	8012454 <_printf_float+0x3a8>
 801229a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801229e:	2200      	movs	r2, #0
 80122a0:	2300      	movs	r3, #0
 80122a2:	f7ee fbe9 	bl	8000a78 <__aeabi_dcmpeq>
 80122a6:	2800      	cmp	r0, #0
 80122a8:	d033      	beq.n	8012312 <_printf_float+0x266>
 80122aa:	4a37      	ldr	r2, [pc, #220]	@ (8012388 <_printf_float+0x2dc>)
 80122ac:	2301      	movs	r3, #1
 80122ae:	4631      	mov	r1, r6
 80122b0:	4628      	mov	r0, r5
 80122b2:	47b8      	blx	r7
 80122b4:	3001      	adds	r0, #1
 80122b6:	f43f af54 	beq.w	8012162 <_printf_float+0xb6>
 80122ba:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80122be:	4543      	cmp	r3, r8
 80122c0:	db02      	blt.n	80122c8 <_printf_float+0x21c>
 80122c2:	6823      	ldr	r3, [r4, #0]
 80122c4:	07d8      	lsls	r0, r3, #31
 80122c6:	d50f      	bpl.n	80122e8 <_printf_float+0x23c>
 80122c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80122cc:	4631      	mov	r1, r6
 80122ce:	4628      	mov	r0, r5
 80122d0:	47b8      	blx	r7
 80122d2:	3001      	adds	r0, #1
 80122d4:	f43f af45 	beq.w	8012162 <_printf_float+0xb6>
 80122d8:	f04f 0900 	mov.w	r9, #0
 80122dc:	f108 38ff 	add.w	r8, r8, #4294967295
 80122e0:	f104 0a1a 	add.w	sl, r4, #26
 80122e4:	45c8      	cmp	r8, r9
 80122e6:	dc09      	bgt.n	80122fc <_printf_float+0x250>
 80122e8:	6823      	ldr	r3, [r4, #0]
 80122ea:	079b      	lsls	r3, r3, #30
 80122ec:	f100 8103 	bmi.w	80124f6 <_printf_float+0x44a>
 80122f0:	68e0      	ldr	r0, [r4, #12]
 80122f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80122f4:	4298      	cmp	r0, r3
 80122f6:	bfb8      	it	lt
 80122f8:	4618      	movlt	r0, r3
 80122fa:	e734      	b.n	8012166 <_printf_float+0xba>
 80122fc:	2301      	movs	r3, #1
 80122fe:	4652      	mov	r2, sl
 8012300:	4631      	mov	r1, r6
 8012302:	4628      	mov	r0, r5
 8012304:	47b8      	blx	r7
 8012306:	3001      	adds	r0, #1
 8012308:	f43f af2b 	beq.w	8012162 <_printf_float+0xb6>
 801230c:	f109 0901 	add.w	r9, r9, #1
 8012310:	e7e8      	b.n	80122e4 <_printf_float+0x238>
 8012312:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012314:	2b00      	cmp	r3, #0
 8012316:	dc39      	bgt.n	801238c <_printf_float+0x2e0>
 8012318:	4a1b      	ldr	r2, [pc, #108]	@ (8012388 <_printf_float+0x2dc>)
 801231a:	2301      	movs	r3, #1
 801231c:	4631      	mov	r1, r6
 801231e:	4628      	mov	r0, r5
 8012320:	47b8      	blx	r7
 8012322:	3001      	adds	r0, #1
 8012324:	f43f af1d 	beq.w	8012162 <_printf_float+0xb6>
 8012328:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801232c:	ea59 0303 	orrs.w	r3, r9, r3
 8012330:	d102      	bne.n	8012338 <_printf_float+0x28c>
 8012332:	6823      	ldr	r3, [r4, #0]
 8012334:	07d9      	lsls	r1, r3, #31
 8012336:	d5d7      	bpl.n	80122e8 <_printf_float+0x23c>
 8012338:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801233c:	4631      	mov	r1, r6
 801233e:	4628      	mov	r0, r5
 8012340:	47b8      	blx	r7
 8012342:	3001      	adds	r0, #1
 8012344:	f43f af0d 	beq.w	8012162 <_printf_float+0xb6>
 8012348:	f04f 0a00 	mov.w	sl, #0
 801234c:	f104 0b1a 	add.w	fp, r4, #26
 8012350:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012352:	425b      	negs	r3, r3
 8012354:	4553      	cmp	r3, sl
 8012356:	dc01      	bgt.n	801235c <_printf_float+0x2b0>
 8012358:	464b      	mov	r3, r9
 801235a:	e793      	b.n	8012284 <_printf_float+0x1d8>
 801235c:	2301      	movs	r3, #1
 801235e:	465a      	mov	r2, fp
 8012360:	4631      	mov	r1, r6
 8012362:	4628      	mov	r0, r5
 8012364:	47b8      	blx	r7
 8012366:	3001      	adds	r0, #1
 8012368:	f43f aefb 	beq.w	8012162 <_printf_float+0xb6>
 801236c:	f10a 0a01 	add.w	sl, sl, #1
 8012370:	e7ee      	b.n	8012350 <_printf_float+0x2a4>
 8012372:	bf00      	nop
 8012374:	7fefffff 	.word	0x7fefffff
 8012378:	08014aac 	.word	0x08014aac
 801237c:	08014ab0 	.word	0x08014ab0
 8012380:	08014ab4 	.word	0x08014ab4
 8012384:	08014ab8 	.word	0x08014ab8
 8012388:	08014abc 	.word	0x08014abc
 801238c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801238e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012392:	4553      	cmp	r3, sl
 8012394:	bfa8      	it	ge
 8012396:	4653      	movge	r3, sl
 8012398:	2b00      	cmp	r3, #0
 801239a:	4699      	mov	r9, r3
 801239c:	dc36      	bgt.n	801240c <_printf_float+0x360>
 801239e:	f04f 0b00 	mov.w	fp, #0
 80123a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80123a6:	f104 021a 	add.w	r2, r4, #26
 80123aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80123ac:	9306      	str	r3, [sp, #24]
 80123ae:	eba3 0309 	sub.w	r3, r3, r9
 80123b2:	455b      	cmp	r3, fp
 80123b4:	dc31      	bgt.n	801241a <_printf_float+0x36e>
 80123b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80123b8:	459a      	cmp	sl, r3
 80123ba:	dc3a      	bgt.n	8012432 <_printf_float+0x386>
 80123bc:	6823      	ldr	r3, [r4, #0]
 80123be:	07da      	lsls	r2, r3, #31
 80123c0:	d437      	bmi.n	8012432 <_printf_float+0x386>
 80123c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80123c4:	ebaa 0903 	sub.w	r9, sl, r3
 80123c8:	9b06      	ldr	r3, [sp, #24]
 80123ca:	ebaa 0303 	sub.w	r3, sl, r3
 80123ce:	4599      	cmp	r9, r3
 80123d0:	bfa8      	it	ge
 80123d2:	4699      	movge	r9, r3
 80123d4:	f1b9 0f00 	cmp.w	r9, #0
 80123d8:	dc33      	bgt.n	8012442 <_printf_float+0x396>
 80123da:	f04f 0800 	mov.w	r8, #0
 80123de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80123e2:	f104 0b1a 	add.w	fp, r4, #26
 80123e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80123e8:	ebaa 0303 	sub.w	r3, sl, r3
 80123ec:	eba3 0309 	sub.w	r3, r3, r9
 80123f0:	4543      	cmp	r3, r8
 80123f2:	f77f af79 	ble.w	80122e8 <_printf_float+0x23c>
 80123f6:	2301      	movs	r3, #1
 80123f8:	465a      	mov	r2, fp
 80123fa:	4631      	mov	r1, r6
 80123fc:	4628      	mov	r0, r5
 80123fe:	47b8      	blx	r7
 8012400:	3001      	adds	r0, #1
 8012402:	f43f aeae 	beq.w	8012162 <_printf_float+0xb6>
 8012406:	f108 0801 	add.w	r8, r8, #1
 801240a:	e7ec      	b.n	80123e6 <_printf_float+0x33a>
 801240c:	4642      	mov	r2, r8
 801240e:	4631      	mov	r1, r6
 8012410:	4628      	mov	r0, r5
 8012412:	47b8      	blx	r7
 8012414:	3001      	adds	r0, #1
 8012416:	d1c2      	bne.n	801239e <_printf_float+0x2f2>
 8012418:	e6a3      	b.n	8012162 <_printf_float+0xb6>
 801241a:	2301      	movs	r3, #1
 801241c:	4631      	mov	r1, r6
 801241e:	4628      	mov	r0, r5
 8012420:	9206      	str	r2, [sp, #24]
 8012422:	47b8      	blx	r7
 8012424:	3001      	adds	r0, #1
 8012426:	f43f ae9c 	beq.w	8012162 <_printf_float+0xb6>
 801242a:	9a06      	ldr	r2, [sp, #24]
 801242c:	f10b 0b01 	add.w	fp, fp, #1
 8012430:	e7bb      	b.n	80123aa <_printf_float+0x2fe>
 8012432:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012436:	4631      	mov	r1, r6
 8012438:	4628      	mov	r0, r5
 801243a:	47b8      	blx	r7
 801243c:	3001      	adds	r0, #1
 801243e:	d1c0      	bne.n	80123c2 <_printf_float+0x316>
 8012440:	e68f      	b.n	8012162 <_printf_float+0xb6>
 8012442:	9a06      	ldr	r2, [sp, #24]
 8012444:	464b      	mov	r3, r9
 8012446:	4442      	add	r2, r8
 8012448:	4631      	mov	r1, r6
 801244a:	4628      	mov	r0, r5
 801244c:	47b8      	blx	r7
 801244e:	3001      	adds	r0, #1
 8012450:	d1c3      	bne.n	80123da <_printf_float+0x32e>
 8012452:	e686      	b.n	8012162 <_printf_float+0xb6>
 8012454:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012458:	f1ba 0f01 	cmp.w	sl, #1
 801245c:	dc01      	bgt.n	8012462 <_printf_float+0x3b6>
 801245e:	07db      	lsls	r3, r3, #31
 8012460:	d536      	bpl.n	80124d0 <_printf_float+0x424>
 8012462:	2301      	movs	r3, #1
 8012464:	4642      	mov	r2, r8
 8012466:	4631      	mov	r1, r6
 8012468:	4628      	mov	r0, r5
 801246a:	47b8      	blx	r7
 801246c:	3001      	adds	r0, #1
 801246e:	f43f ae78 	beq.w	8012162 <_printf_float+0xb6>
 8012472:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012476:	4631      	mov	r1, r6
 8012478:	4628      	mov	r0, r5
 801247a:	47b8      	blx	r7
 801247c:	3001      	adds	r0, #1
 801247e:	f43f ae70 	beq.w	8012162 <_printf_float+0xb6>
 8012482:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8012486:	2200      	movs	r2, #0
 8012488:	2300      	movs	r3, #0
 801248a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801248e:	f7ee faf3 	bl	8000a78 <__aeabi_dcmpeq>
 8012492:	b9c0      	cbnz	r0, 80124c6 <_printf_float+0x41a>
 8012494:	4653      	mov	r3, sl
 8012496:	f108 0201 	add.w	r2, r8, #1
 801249a:	4631      	mov	r1, r6
 801249c:	4628      	mov	r0, r5
 801249e:	47b8      	blx	r7
 80124a0:	3001      	adds	r0, #1
 80124a2:	d10c      	bne.n	80124be <_printf_float+0x412>
 80124a4:	e65d      	b.n	8012162 <_printf_float+0xb6>
 80124a6:	2301      	movs	r3, #1
 80124a8:	465a      	mov	r2, fp
 80124aa:	4631      	mov	r1, r6
 80124ac:	4628      	mov	r0, r5
 80124ae:	47b8      	blx	r7
 80124b0:	3001      	adds	r0, #1
 80124b2:	f43f ae56 	beq.w	8012162 <_printf_float+0xb6>
 80124b6:	f108 0801 	add.w	r8, r8, #1
 80124ba:	45d0      	cmp	r8, sl
 80124bc:	dbf3      	blt.n	80124a6 <_printf_float+0x3fa>
 80124be:	464b      	mov	r3, r9
 80124c0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80124c4:	e6df      	b.n	8012286 <_printf_float+0x1da>
 80124c6:	f04f 0800 	mov.w	r8, #0
 80124ca:	f104 0b1a 	add.w	fp, r4, #26
 80124ce:	e7f4      	b.n	80124ba <_printf_float+0x40e>
 80124d0:	2301      	movs	r3, #1
 80124d2:	4642      	mov	r2, r8
 80124d4:	e7e1      	b.n	801249a <_printf_float+0x3ee>
 80124d6:	2301      	movs	r3, #1
 80124d8:	464a      	mov	r2, r9
 80124da:	4631      	mov	r1, r6
 80124dc:	4628      	mov	r0, r5
 80124de:	47b8      	blx	r7
 80124e0:	3001      	adds	r0, #1
 80124e2:	f43f ae3e 	beq.w	8012162 <_printf_float+0xb6>
 80124e6:	f108 0801 	add.w	r8, r8, #1
 80124ea:	68e3      	ldr	r3, [r4, #12]
 80124ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80124ee:	1a5b      	subs	r3, r3, r1
 80124f0:	4543      	cmp	r3, r8
 80124f2:	dcf0      	bgt.n	80124d6 <_printf_float+0x42a>
 80124f4:	e6fc      	b.n	80122f0 <_printf_float+0x244>
 80124f6:	f04f 0800 	mov.w	r8, #0
 80124fa:	f104 0919 	add.w	r9, r4, #25
 80124fe:	e7f4      	b.n	80124ea <_printf_float+0x43e>

08012500 <_printf_common>:
 8012500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012504:	4616      	mov	r6, r2
 8012506:	4698      	mov	r8, r3
 8012508:	688a      	ldr	r2, [r1, #8]
 801250a:	690b      	ldr	r3, [r1, #16]
 801250c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012510:	4293      	cmp	r3, r2
 8012512:	bfb8      	it	lt
 8012514:	4613      	movlt	r3, r2
 8012516:	6033      	str	r3, [r6, #0]
 8012518:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801251c:	4607      	mov	r7, r0
 801251e:	460c      	mov	r4, r1
 8012520:	b10a      	cbz	r2, 8012526 <_printf_common+0x26>
 8012522:	3301      	adds	r3, #1
 8012524:	6033      	str	r3, [r6, #0]
 8012526:	6823      	ldr	r3, [r4, #0]
 8012528:	0699      	lsls	r1, r3, #26
 801252a:	bf42      	ittt	mi
 801252c:	6833      	ldrmi	r3, [r6, #0]
 801252e:	3302      	addmi	r3, #2
 8012530:	6033      	strmi	r3, [r6, #0]
 8012532:	6825      	ldr	r5, [r4, #0]
 8012534:	f015 0506 	ands.w	r5, r5, #6
 8012538:	d106      	bne.n	8012548 <_printf_common+0x48>
 801253a:	f104 0a19 	add.w	sl, r4, #25
 801253e:	68e3      	ldr	r3, [r4, #12]
 8012540:	6832      	ldr	r2, [r6, #0]
 8012542:	1a9b      	subs	r3, r3, r2
 8012544:	42ab      	cmp	r3, r5
 8012546:	dc26      	bgt.n	8012596 <_printf_common+0x96>
 8012548:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801254c:	6822      	ldr	r2, [r4, #0]
 801254e:	3b00      	subs	r3, #0
 8012550:	bf18      	it	ne
 8012552:	2301      	movne	r3, #1
 8012554:	0692      	lsls	r2, r2, #26
 8012556:	d42b      	bmi.n	80125b0 <_printf_common+0xb0>
 8012558:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801255c:	4641      	mov	r1, r8
 801255e:	4638      	mov	r0, r7
 8012560:	47c8      	blx	r9
 8012562:	3001      	adds	r0, #1
 8012564:	d01e      	beq.n	80125a4 <_printf_common+0xa4>
 8012566:	6823      	ldr	r3, [r4, #0]
 8012568:	6922      	ldr	r2, [r4, #16]
 801256a:	f003 0306 	and.w	r3, r3, #6
 801256e:	2b04      	cmp	r3, #4
 8012570:	bf02      	ittt	eq
 8012572:	68e5      	ldreq	r5, [r4, #12]
 8012574:	6833      	ldreq	r3, [r6, #0]
 8012576:	1aed      	subeq	r5, r5, r3
 8012578:	68a3      	ldr	r3, [r4, #8]
 801257a:	bf0c      	ite	eq
 801257c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012580:	2500      	movne	r5, #0
 8012582:	4293      	cmp	r3, r2
 8012584:	bfc4      	itt	gt
 8012586:	1a9b      	subgt	r3, r3, r2
 8012588:	18ed      	addgt	r5, r5, r3
 801258a:	2600      	movs	r6, #0
 801258c:	341a      	adds	r4, #26
 801258e:	42b5      	cmp	r5, r6
 8012590:	d11a      	bne.n	80125c8 <_printf_common+0xc8>
 8012592:	2000      	movs	r0, #0
 8012594:	e008      	b.n	80125a8 <_printf_common+0xa8>
 8012596:	2301      	movs	r3, #1
 8012598:	4652      	mov	r2, sl
 801259a:	4641      	mov	r1, r8
 801259c:	4638      	mov	r0, r7
 801259e:	47c8      	blx	r9
 80125a0:	3001      	adds	r0, #1
 80125a2:	d103      	bne.n	80125ac <_printf_common+0xac>
 80125a4:	f04f 30ff 	mov.w	r0, #4294967295
 80125a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125ac:	3501      	adds	r5, #1
 80125ae:	e7c6      	b.n	801253e <_printf_common+0x3e>
 80125b0:	18e1      	adds	r1, r4, r3
 80125b2:	1c5a      	adds	r2, r3, #1
 80125b4:	2030      	movs	r0, #48	@ 0x30
 80125b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80125ba:	4422      	add	r2, r4
 80125bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80125c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80125c4:	3302      	adds	r3, #2
 80125c6:	e7c7      	b.n	8012558 <_printf_common+0x58>
 80125c8:	2301      	movs	r3, #1
 80125ca:	4622      	mov	r2, r4
 80125cc:	4641      	mov	r1, r8
 80125ce:	4638      	mov	r0, r7
 80125d0:	47c8      	blx	r9
 80125d2:	3001      	adds	r0, #1
 80125d4:	d0e6      	beq.n	80125a4 <_printf_common+0xa4>
 80125d6:	3601      	adds	r6, #1
 80125d8:	e7d9      	b.n	801258e <_printf_common+0x8e>
	...

080125dc <_printf_i>:
 80125dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80125e0:	7e0f      	ldrb	r7, [r1, #24]
 80125e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80125e4:	2f78      	cmp	r7, #120	@ 0x78
 80125e6:	4691      	mov	r9, r2
 80125e8:	4680      	mov	r8, r0
 80125ea:	460c      	mov	r4, r1
 80125ec:	469a      	mov	sl, r3
 80125ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80125f2:	d807      	bhi.n	8012604 <_printf_i+0x28>
 80125f4:	2f62      	cmp	r7, #98	@ 0x62
 80125f6:	d80a      	bhi.n	801260e <_printf_i+0x32>
 80125f8:	2f00      	cmp	r7, #0
 80125fa:	f000 80d2 	beq.w	80127a2 <_printf_i+0x1c6>
 80125fe:	2f58      	cmp	r7, #88	@ 0x58
 8012600:	f000 80b9 	beq.w	8012776 <_printf_i+0x19a>
 8012604:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012608:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801260c:	e03a      	b.n	8012684 <_printf_i+0xa8>
 801260e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012612:	2b15      	cmp	r3, #21
 8012614:	d8f6      	bhi.n	8012604 <_printf_i+0x28>
 8012616:	a101      	add	r1, pc, #4	@ (adr r1, 801261c <_printf_i+0x40>)
 8012618:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801261c:	08012675 	.word	0x08012675
 8012620:	08012689 	.word	0x08012689
 8012624:	08012605 	.word	0x08012605
 8012628:	08012605 	.word	0x08012605
 801262c:	08012605 	.word	0x08012605
 8012630:	08012605 	.word	0x08012605
 8012634:	08012689 	.word	0x08012689
 8012638:	08012605 	.word	0x08012605
 801263c:	08012605 	.word	0x08012605
 8012640:	08012605 	.word	0x08012605
 8012644:	08012605 	.word	0x08012605
 8012648:	08012789 	.word	0x08012789
 801264c:	080126b3 	.word	0x080126b3
 8012650:	08012743 	.word	0x08012743
 8012654:	08012605 	.word	0x08012605
 8012658:	08012605 	.word	0x08012605
 801265c:	080127ab 	.word	0x080127ab
 8012660:	08012605 	.word	0x08012605
 8012664:	080126b3 	.word	0x080126b3
 8012668:	08012605 	.word	0x08012605
 801266c:	08012605 	.word	0x08012605
 8012670:	0801274b 	.word	0x0801274b
 8012674:	6833      	ldr	r3, [r6, #0]
 8012676:	1d1a      	adds	r2, r3, #4
 8012678:	681b      	ldr	r3, [r3, #0]
 801267a:	6032      	str	r2, [r6, #0]
 801267c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012680:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012684:	2301      	movs	r3, #1
 8012686:	e09d      	b.n	80127c4 <_printf_i+0x1e8>
 8012688:	6833      	ldr	r3, [r6, #0]
 801268a:	6820      	ldr	r0, [r4, #0]
 801268c:	1d19      	adds	r1, r3, #4
 801268e:	6031      	str	r1, [r6, #0]
 8012690:	0606      	lsls	r6, r0, #24
 8012692:	d501      	bpl.n	8012698 <_printf_i+0xbc>
 8012694:	681d      	ldr	r5, [r3, #0]
 8012696:	e003      	b.n	80126a0 <_printf_i+0xc4>
 8012698:	0645      	lsls	r5, r0, #25
 801269a:	d5fb      	bpl.n	8012694 <_printf_i+0xb8>
 801269c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80126a0:	2d00      	cmp	r5, #0
 80126a2:	da03      	bge.n	80126ac <_printf_i+0xd0>
 80126a4:	232d      	movs	r3, #45	@ 0x2d
 80126a6:	426d      	negs	r5, r5
 80126a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80126ac:	4859      	ldr	r0, [pc, #356]	@ (8012814 <_printf_i+0x238>)
 80126ae:	230a      	movs	r3, #10
 80126b0:	e011      	b.n	80126d6 <_printf_i+0xfa>
 80126b2:	6821      	ldr	r1, [r4, #0]
 80126b4:	6833      	ldr	r3, [r6, #0]
 80126b6:	0608      	lsls	r0, r1, #24
 80126b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80126bc:	d402      	bmi.n	80126c4 <_printf_i+0xe8>
 80126be:	0649      	lsls	r1, r1, #25
 80126c0:	bf48      	it	mi
 80126c2:	b2ad      	uxthmi	r5, r5
 80126c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80126c6:	4853      	ldr	r0, [pc, #332]	@ (8012814 <_printf_i+0x238>)
 80126c8:	6033      	str	r3, [r6, #0]
 80126ca:	bf14      	ite	ne
 80126cc:	230a      	movne	r3, #10
 80126ce:	2308      	moveq	r3, #8
 80126d0:	2100      	movs	r1, #0
 80126d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80126d6:	6866      	ldr	r6, [r4, #4]
 80126d8:	60a6      	str	r6, [r4, #8]
 80126da:	2e00      	cmp	r6, #0
 80126dc:	bfa2      	ittt	ge
 80126de:	6821      	ldrge	r1, [r4, #0]
 80126e0:	f021 0104 	bicge.w	r1, r1, #4
 80126e4:	6021      	strge	r1, [r4, #0]
 80126e6:	b90d      	cbnz	r5, 80126ec <_printf_i+0x110>
 80126e8:	2e00      	cmp	r6, #0
 80126ea:	d04b      	beq.n	8012784 <_printf_i+0x1a8>
 80126ec:	4616      	mov	r6, r2
 80126ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80126f2:	fb03 5711 	mls	r7, r3, r1, r5
 80126f6:	5dc7      	ldrb	r7, [r0, r7]
 80126f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80126fc:	462f      	mov	r7, r5
 80126fe:	42bb      	cmp	r3, r7
 8012700:	460d      	mov	r5, r1
 8012702:	d9f4      	bls.n	80126ee <_printf_i+0x112>
 8012704:	2b08      	cmp	r3, #8
 8012706:	d10b      	bne.n	8012720 <_printf_i+0x144>
 8012708:	6823      	ldr	r3, [r4, #0]
 801270a:	07df      	lsls	r7, r3, #31
 801270c:	d508      	bpl.n	8012720 <_printf_i+0x144>
 801270e:	6923      	ldr	r3, [r4, #16]
 8012710:	6861      	ldr	r1, [r4, #4]
 8012712:	4299      	cmp	r1, r3
 8012714:	bfde      	ittt	le
 8012716:	2330      	movle	r3, #48	@ 0x30
 8012718:	f806 3c01 	strble.w	r3, [r6, #-1]
 801271c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012720:	1b92      	subs	r2, r2, r6
 8012722:	6122      	str	r2, [r4, #16]
 8012724:	f8cd a000 	str.w	sl, [sp]
 8012728:	464b      	mov	r3, r9
 801272a:	aa03      	add	r2, sp, #12
 801272c:	4621      	mov	r1, r4
 801272e:	4640      	mov	r0, r8
 8012730:	f7ff fee6 	bl	8012500 <_printf_common>
 8012734:	3001      	adds	r0, #1
 8012736:	d14a      	bne.n	80127ce <_printf_i+0x1f2>
 8012738:	f04f 30ff 	mov.w	r0, #4294967295
 801273c:	b004      	add	sp, #16
 801273e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012742:	6823      	ldr	r3, [r4, #0]
 8012744:	f043 0320 	orr.w	r3, r3, #32
 8012748:	6023      	str	r3, [r4, #0]
 801274a:	4833      	ldr	r0, [pc, #204]	@ (8012818 <_printf_i+0x23c>)
 801274c:	2778      	movs	r7, #120	@ 0x78
 801274e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012752:	6823      	ldr	r3, [r4, #0]
 8012754:	6831      	ldr	r1, [r6, #0]
 8012756:	061f      	lsls	r7, r3, #24
 8012758:	f851 5b04 	ldr.w	r5, [r1], #4
 801275c:	d402      	bmi.n	8012764 <_printf_i+0x188>
 801275e:	065f      	lsls	r7, r3, #25
 8012760:	bf48      	it	mi
 8012762:	b2ad      	uxthmi	r5, r5
 8012764:	6031      	str	r1, [r6, #0]
 8012766:	07d9      	lsls	r1, r3, #31
 8012768:	bf44      	itt	mi
 801276a:	f043 0320 	orrmi.w	r3, r3, #32
 801276e:	6023      	strmi	r3, [r4, #0]
 8012770:	b11d      	cbz	r5, 801277a <_printf_i+0x19e>
 8012772:	2310      	movs	r3, #16
 8012774:	e7ac      	b.n	80126d0 <_printf_i+0xf4>
 8012776:	4827      	ldr	r0, [pc, #156]	@ (8012814 <_printf_i+0x238>)
 8012778:	e7e9      	b.n	801274e <_printf_i+0x172>
 801277a:	6823      	ldr	r3, [r4, #0]
 801277c:	f023 0320 	bic.w	r3, r3, #32
 8012780:	6023      	str	r3, [r4, #0]
 8012782:	e7f6      	b.n	8012772 <_printf_i+0x196>
 8012784:	4616      	mov	r6, r2
 8012786:	e7bd      	b.n	8012704 <_printf_i+0x128>
 8012788:	6833      	ldr	r3, [r6, #0]
 801278a:	6825      	ldr	r5, [r4, #0]
 801278c:	6961      	ldr	r1, [r4, #20]
 801278e:	1d18      	adds	r0, r3, #4
 8012790:	6030      	str	r0, [r6, #0]
 8012792:	062e      	lsls	r6, r5, #24
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	d501      	bpl.n	801279c <_printf_i+0x1c0>
 8012798:	6019      	str	r1, [r3, #0]
 801279a:	e002      	b.n	80127a2 <_printf_i+0x1c6>
 801279c:	0668      	lsls	r0, r5, #25
 801279e:	d5fb      	bpl.n	8012798 <_printf_i+0x1bc>
 80127a0:	8019      	strh	r1, [r3, #0]
 80127a2:	2300      	movs	r3, #0
 80127a4:	6123      	str	r3, [r4, #16]
 80127a6:	4616      	mov	r6, r2
 80127a8:	e7bc      	b.n	8012724 <_printf_i+0x148>
 80127aa:	6833      	ldr	r3, [r6, #0]
 80127ac:	1d1a      	adds	r2, r3, #4
 80127ae:	6032      	str	r2, [r6, #0]
 80127b0:	681e      	ldr	r6, [r3, #0]
 80127b2:	6862      	ldr	r2, [r4, #4]
 80127b4:	2100      	movs	r1, #0
 80127b6:	4630      	mov	r0, r6
 80127b8:	f7ed fce2 	bl	8000180 <memchr>
 80127bc:	b108      	cbz	r0, 80127c2 <_printf_i+0x1e6>
 80127be:	1b80      	subs	r0, r0, r6
 80127c0:	6060      	str	r0, [r4, #4]
 80127c2:	6863      	ldr	r3, [r4, #4]
 80127c4:	6123      	str	r3, [r4, #16]
 80127c6:	2300      	movs	r3, #0
 80127c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80127cc:	e7aa      	b.n	8012724 <_printf_i+0x148>
 80127ce:	6923      	ldr	r3, [r4, #16]
 80127d0:	4632      	mov	r2, r6
 80127d2:	4649      	mov	r1, r9
 80127d4:	4640      	mov	r0, r8
 80127d6:	47d0      	blx	sl
 80127d8:	3001      	adds	r0, #1
 80127da:	d0ad      	beq.n	8012738 <_printf_i+0x15c>
 80127dc:	6823      	ldr	r3, [r4, #0]
 80127de:	079b      	lsls	r3, r3, #30
 80127e0:	d413      	bmi.n	801280a <_printf_i+0x22e>
 80127e2:	68e0      	ldr	r0, [r4, #12]
 80127e4:	9b03      	ldr	r3, [sp, #12]
 80127e6:	4298      	cmp	r0, r3
 80127e8:	bfb8      	it	lt
 80127ea:	4618      	movlt	r0, r3
 80127ec:	e7a6      	b.n	801273c <_printf_i+0x160>
 80127ee:	2301      	movs	r3, #1
 80127f0:	4632      	mov	r2, r6
 80127f2:	4649      	mov	r1, r9
 80127f4:	4640      	mov	r0, r8
 80127f6:	47d0      	blx	sl
 80127f8:	3001      	adds	r0, #1
 80127fa:	d09d      	beq.n	8012738 <_printf_i+0x15c>
 80127fc:	3501      	adds	r5, #1
 80127fe:	68e3      	ldr	r3, [r4, #12]
 8012800:	9903      	ldr	r1, [sp, #12]
 8012802:	1a5b      	subs	r3, r3, r1
 8012804:	42ab      	cmp	r3, r5
 8012806:	dcf2      	bgt.n	80127ee <_printf_i+0x212>
 8012808:	e7eb      	b.n	80127e2 <_printf_i+0x206>
 801280a:	2500      	movs	r5, #0
 801280c:	f104 0619 	add.w	r6, r4, #25
 8012810:	e7f5      	b.n	80127fe <_printf_i+0x222>
 8012812:	bf00      	nop
 8012814:	08014abe 	.word	0x08014abe
 8012818:	08014acf 	.word	0x08014acf

0801281c <std>:
 801281c:	2300      	movs	r3, #0
 801281e:	b510      	push	{r4, lr}
 8012820:	4604      	mov	r4, r0
 8012822:	e9c0 3300 	strd	r3, r3, [r0]
 8012826:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801282a:	6083      	str	r3, [r0, #8]
 801282c:	8181      	strh	r1, [r0, #12]
 801282e:	6643      	str	r3, [r0, #100]	@ 0x64
 8012830:	81c2      	strh	r2, [r0, #14]
 8012832:	6183      	str	r3, [r0, #24]
 8012834:	4619      	mov	r1, r3
 8012836:	2208      	movs	r2, #8
 8012838:	305c      	adds	r0, #92	@ 0x5c
 801283a:	f000 f90e 	bl	8012a5a <memset>
 801283e:	4b0d      	ldr	r3, [pc, #52]	@ (8012874 <std+0x58>)
 8012840:	6263      	str	r3, [r4, #36]	@ 0x24
 8012842:	4b0d      	ldr	r3, [pc, #52]	@ (8012878 <std+0x5c>)
 8012844:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012846:	4b0d      	ldr	r3, [pc, #52]	@ (801287c <std+0x60>)
 8012848:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801284a:	4b0d      	ldr	r3, [pc, #52]	@ (8012880 <std+0x64>)
 801284c:	6323      	str	r3, [r4, #48]	@ 0x30
 801284e:	4b0d      	ldr	r3, [pc, #52]	@ (8012884 <std+0x68>)
 8012850:	6224      	str	r4, [r4, #32]
 8012852:	429c      	cmp	r4, r3
 8012854:	d006      	beq.n	8012864 <std+0x48>
 8012856:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801285a:	4294      	cmp	r4, r2
 801285c:	d002      	beq.n	8012864 <std+0x48>
 801285e:	33d0      	adds	r3, #208	@ 0xd0
 8012860:	429c      	cmp	r4, r3
 8012862:	d105      	bne.n	8012870 <std+0x54>
 8012864:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801286c:	f000 b972 	b.w	8012b54 <__retarget_lock_init_recursive>
 8012870:	bd10      	pop	{r4, pc}
 8012872:	bf00      	nop
 8012874:	080129d5 	.word	0x080129d5
 8012878:	080129f7 	.word	0x080129f7
 801287c:	08012a2f 	.word	0x08012a2f
 8012880:	08012a53 	.word	0x08012a53
 8012884:	200021a0 	.word	0x200021a0

08012888 <stdio_exit_handler>:
 8012888:	4a02      	ldr	r2, [pc, #8]	@ (8012894 <stdio_exit_handler+0xc>)
 801288a:	4903      	ldr	r1, [pc, #12]	@ (8012898 <stdio_exit_handler+0x10>)
 801288c:	4803      	ldr	r0, [pc, #12]	@ (801289c <stdio_exit_handler+0x14>)
 801288e:	f000 b869 	b.w	8012964 <_fwalk_sglue>
 8012892:	bf00      	nop
 8012894:	20000128 	.word	0x20000128
 8012898:	080144a1 	.word	0x080144a1
 801289c:	20000138 	.word	0x20000138

080128a0 <cleanup_stdio>:
 80128a0:	6841      	ldr	r1, [r0, #4]
 80128a2:	4b0c      	ldr	r3, [pc, #48]	@ (80128d4 <cleanup_stdio+0x34>)
 80128a4:	4299      	cmp	r1, r3
 80128a6:	b510      	push	{r4, lr}
 80128a8:	4604      	mov	r4, r0
 80128aa:	d001      	beq.n	80128b0 <cleanup_stdio+0x10>
 80128ac:	f001 fdf8 	bl	80144a0 <_fflush_r>
 80128b0:	68a1      	ldr	r1, [r4, #8]
 80128b2:	4b09      	ldr	r3, [pc, #36]	@ (80128d8 <cleanup_stdio+0x38>)
 80128b4:	4299      	cmp	r1, r3
 80128b6:	d002      	beq.n	80128be <cleanup_stdio+0x1e>
 80128b8:	4620      	mov	r0, r4
 80128ba:	f001 fdf1 	bl	80144a0 <_fflush_r>
 80128be:	68e1      	ldr	r1, [r4, #12]
 80128c0:	4b06      	ldr	r3, [pc, #24]	@ (80128dc <cleanup_stdio+0x3c>)
 80128c2:	4299      	cmp	r1, r3
 80128c4:	d004      	beq.n	80128d0 <cleanup_stdio+0x30>
 80128c6:	4620      	mov	r0, r4
 80128c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80128cc:	f001 bde8 	b.w	80144a0 <_fflush_r>
 80128d0:	bd10      	pop	{r4, pc}
 80128d2:	bf00      	nop
 80128d4:	200021a0 	.word	0x200021a0
 80128d8:	20002208 	.word	0x20002208
 80128dc:	20002270 	.word	0x20002270

080128e0 <global_stdio_init.part.0>:
 80128e0:	b510      	push	{r4, lr}
 80128e2:	4b0b      	ldr	r3, [pc, #44]	@ (8012910 <global_stdio_init.part.0+0x30>)
 80128e4:	4c0b      	ldr	r4, [pc, #44]	@ (8012914 <global_stdio_init.part.0+0x34>)
 80128e6:	4a0c      	ldr	r2, [pc, #48]	@ (8012918 <global_stdio_init.part.0+0x38>)
 80128e8:	601a      	str	r2, [r3, #0]
 80128ea:	4620      	mov	r0, r4
 80128ec:	2200      	movs	r2, #0
 80128ee:	2104      	movs	r1, #4
 80128f0:	f7ff ff94 	bl	801281c <std>
 80128f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80128f8:	2201      	movs	r2, #1
 80128fa:	2109      	movs	r1, #9
 80128fc:	f7ff ff8e 	bl	801281c <std>
 8012900:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012904:	2202      	movs	r2, #2
 8012906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801290a:	2112      	movs	r1, #18
 801290c:	f7ff bf86 	b.w	801281c <std>
 8012910:	200022d8 	.word	0x200022d8
 8012914:	200021a0 	.word	0x200021a0
 8012918:	08012889 	.word	0x08012889

0801291c <__sfp_lock_acquire>:
 801291c:	4801      	ldr	r0, [pc, #4]	@ (8012924 <__sfp_lock_acquire+0x8>)
 801291e:	f000 b91a 	b.w	8012b56 <__retarget_lock_acquire_recursive>
 8012922:	bf00      	nop
 8012924:	200022e1 	.word	0x200022e1

08012928 <__sfp_lock_release>:
 8012928:	4801      	ldr	r0, [pc, #4]	@ (8012930 <__sfp_lock_release+0x8>)
 801292a:	f000 b915 	b.w	8012b58 <__retarget_lock_release_recursive>
 801292e:	bf00      	nop
 8012930:	200022e1 	.word	0x200022e1

08012934 <__sinit>:
 8012934:	b510      	push	{r4, lr}
 8012936:	4604      	mov	r4, r0
 8012938:	f7ff fff0 	bl	801291c <__sfp_lock_acquire>
 801293c:	6a23      	ldr	r3, [r4, #32]
 801293e:	b11b      	cbz	r3, 8012948 <__sinit+0x14>
 8012940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012944:	f7ff bff0 	b.w	8012928 <__sfp_lock_release>
 8012948:	4b04      	ldr	r3, [pc, #16]	@ (801295c <__sinit+0x28>)
 801294a:	6223      	str	r3, [r4, #32]
 801294c:	4b04      	ldr	r3, [pc, #16]	@ (8012960 <__sinit+0x2c>)
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d1f5      	bne.n	8012940 <__sinit+0xc>
 8012954:	f7ff ffc4 	bl	80128e0 <global_stdio_init.part.0>
 8012958:	e7f2      	b.n	8012940 <__sinit+0xc>
 801295a:	bf00      	nop
 801295c:	080128a1 	.word	0x080128a1
 8012960:	200022d8 	.word	0x200022d8

08012964 <_fwalk_sglue>:
 8012964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012968:	4607      	mov	r7, r0
 801296a:	4688      	mov	r8, r1
 801296c:	4614      	mov	r4, r2
 801296e:	2600      	movs	r6, #0
 8012970:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012974:	f1b9 0901 	subs.w	r9, r9, #1
 8012978:	d505      	bpl.n	8012986 <_fwalk_sglue+0x22>
 801297a:	6824      	ldr	r4, [r4, #0]
 801297c:	2c00      	cmp	r4, #0
 801297e:	d1f7      	bne.n	8012970 <_fwalk_sglue+0xc>
 8012980:	4630      	mov	r0, r6
 8012982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012986:	89ab      	ldrh	r3, [r5, #12]
 8012988:	2b01      	cmp	r3, #1
 801298a:	d907      	bls.n	801299c <_fwalk_sglue+0x38>
 801298c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012990:	3301      	adds	r3, #1
 8012992:	d003      	beq.n	801299c <_fwalk_sglue+0x38>
 8012994:	4629      	mov	r1, r5
 8012996:	4638      	mov	r0, r7
 8012998:	47c0      	blx	r8
 801299a:	4306      	orrs	r6, r0
 801299c:	3568      	adds	r5, #104	@ 0x68
 801299e:	e7e9      	b.n	8012974 <_fwalk_sglue+0x10>

080129a0 <iprintf>:
 80129a0:	b40f      	push	{r0, r1, r2, r3}
 80129a2:	b507      	push	{r0, r1, r2, lr}
 80129a4:	4906      	ldr	r1, [pc, #24]	@ (80129c0 <iprintf+0x20>)
 80129a6:	ab04      	add	r3, sp, #16
 80129a8:	6808      	ldr	r0, [r1, #0]
 80129aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80129ae:	6881      	ldr	r1, [r0, #8]
 80129b0:	9301      	str	r3, [sp, #4]
 80129b2:	f001 fbd9 	bl	8014168 <_vfiprintf_r>
 80129b6:	b003      	add	sp, #12
 80129b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80129bc:	b004      	add	sp, #16
 80129be:	4770      	bx	lr
 80129c0:	20000134 	.word	0x20000134

080129c4 <putchar>:
 80129c4:	4b02      	ldr	r3, [pc, #8]	@ (80129d0 <putchar+0xc>)
 80129c6:	4601      	mov	r1, r0
 80129c8:	6818      	ldr	r0, [r3, #0]
 80129ca:	6882      	ldr	r2, [r0, #8]
 80129cc:	f001 bd90 	b.w	80144f0 <_putc_r>
 80129d0:	20000134 	.word	0x20000134

080129d4 <__sread>:
 80129d4:	b510      	push	{r4, lr}
 80129d6:	460c      	mov	r4, r1
 80129d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80129dc:	f000 f86c 	bl	8012ab8 <_read_r>
 80129e0:	2800      	cmp	r0, #0
 80129e2:	bfab      	itete	ge
 80129e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80129e6:	89a3      	ldrhlt	r3, [r4, #12]
 80129e8:	181b      	addge	r3, r3, r0
 80129ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80129ee:	bfac      	ite	ge
 80129f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80129f2:	81a3      	strhlt	r3, [r4, #12]
 80129f4:	bd10      	pop	{r4, pc}

080129f6 <__swrite>:
 80129f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80129fa:	461f      	mov	r7, r3
 80129fc:	898b      	ldrh	r3, [r1, #12]
 80129fe:	05db      	lsls	r3, r3, #23
 8012a00:	4605      	mov	r5, r0
 8012a02:	460c      	mov	r4, r1
 8012a04:	4616      	mov	r6, r2
 8012a06:	d505      	bpl.n	8012a14 <__swrite+0x1e>
 8012a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a0c:	2302      	movs	r3, #2
 8012a0e:	2200      	movs	r2, #0
 8012a10:	f000 f840 	bl	8012a94 <_lseek_r>
 8012a14:	89a3      	ldrh	r3, [r4, #12]
 8012a16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012a1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012a1e:	81a3      	strh	r3, [r4, #12]
 8012a20:	4632      	mov	r2, r6
 8012a22:	463b      	mov	r3, r7
 8012a24:	4628      	mov	r0, r5
 8012a26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a2a:	f000 b857 	b.w	8012adc <_write_r>

08012a2e <__sseek>:
 8012a2e:	b510      	push	{r4, lr}
 8012a30:	460c      	mov	r4, r1
 8012a32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a36:	f000 f82d 	bl	8012a94 <_lseek_r>
 8012a3a:	1c43      	adds	r3, r0, #1
 8012a3c:	89a3      	ldrh	r3, [r4, #12]
 8012a3e:	bf15      	itete	ne
 8012a40:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012a42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012a46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012a4a:	81a3      	strheq	r3, [r4, #12]
 8012a4c:	bf18      	it	ne
 8012a4e:	81a3      	strhne	r3, [r4, #12]
 8012a50:	bd10      	pop	{r4, pc}

08012a52 <__sclose>:
 8012a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012a56:	f000 b80d 	b.w	8012a74 <_close_r>

08012a5a <memset>:
 8012a5a:	4402      	add	r2, r0
 8012a5c:	4603      	mov	r3, r0
 8012a5e:	4293      	cmp	r3, r2
 8012a60:	d100      	bne.n	8012a64 <memset+0xa>
 8012a62:	4770      	bx	lr
 8012a64:	f803 1b01 	strb.w	r1, [r3], #1
 8012a68:	e7f9      	b.n	8012a5e <memset+0x4>
	...

08012a6c <_localeconv_r>:
 8012a6c:	4800      	ldr	r0, [pc, #0]	@ (8012a70 <_localeconv_r+0x4>)
 8012a6e:	4770      	bx	lr
 8012a70:	20000274 	.word	0x20000274

08012a74 <_close_r>:
 8012a74:	b538      	push	{r3, r4, r5, lr}
 8012a76:	4d06      	ldr	r5, [pc, #24]	@ (8012a90 <_close_r+0x1c>)
 8012a78:	2300      	movs	r3, #0
 8012a7a:	4604      	mov	r4, r0
 8012a7c:	4608      	mov	r0, r1
 8012a7e:	602b      	str	r3, [r5, #0]
 8012a80:	f7f1 fe3c 	bl	80046fc <_close>
 8012a84:	1c43      	adds	r3, r0, #1
 8012a86:	d102      	bne.n	8012a8e <_close_r+0x1a>
 8012a88:	682b      	ldr	r3, [r5, #0]
 8012a8a:	b103      	cbz	r3, 8012a8e <_close_r+0x1a>
 8012a8c:	6023      	str	r3, [r4, #0]
 8012a8e:	bd38      	pop	{r3, r4, r5, pc}
 8012a90:	200022dc 	.word	0x200022dc

08012a94 <_lseek_r>:
 8012a94:	b538      	push	{r3, r4, r5, lr}
 8012a96:	4d07      	ldr	r5, [pc, #28]	@ (8012ab4 <_lseek_r+0x20>)
 8012a98:	4604      	mov	r4, r0
 8012a9a:	4608      	mov	r0, r1
 8012a9c:	4611      	mov	r1, r2
 8012a9e:	2200      	movs	r2, #0
 8012aa0:	602a      	str	r2, [r5, #0]
 8012aa2:	461a      	mov	r2, r3
 8012aa4:	f7f1 fe51 	bl	800474a <_lseek>
 8012aa8:	1c43      	adds	r3, r0, #1
 8012aaa:	d102      	bne.n	8012ab2 <_lseek_r+0x1e>
 8012aac:	682b      	ldr	r3, [r5, #0]
 8012aae:	b103      	cbz	r3, 8012ab2 <_lseek_r+0x1e>
 8012ab0:	6023      	str	r3, [r4, #0]
 8012ab2:	bd38      	pop	{r3, r4, r5, pc}
 8012ab4:	200022dc 	.word	0x200022dc

08012ab8 <_read_r>:
 8012ab8:	b538      	push	{r3, r4, r5, lr}
 8012aba:	4d07      	ldr	r5, [pc, #28]	@ (8012ad8 <_read_r+0x20>)
 8012abc:	4604      	mov	r4, r0
 8012abe:	4608      	mov	r0, r1
 8012ac0:	4611      	mov	r1, r2
 8012ac2:	2200      	movs	r2, #0
 8012ac4:	602a      	str	r2, [r5, #0]
 8012ac6:	461a      	mov	r2, r3
 8012ac8:	f7f1 fddf 	bl	800468a <_read>
 8012acc:	1c43      	adds	r3, r0, #1
 8012ace:	d102      	bne.n	8012ad6 <_read_r+0x1e>
 8012ad0:	682b      	ldr	r3, [r5, #0]
 8012ad2:	b103      	cbz	r3, 8012ad6 <_read_r+0x1e>
 8012ad4:	6023      	str	r3, [r4, #0]
 8012ad6:	bd38      	pop	{r3, r4, r5, pc}
 8012ad8:	200022dc 	.word	0x200022dc

08012adc <_write_r>:
 8012adc:	b538      	push	{r3, r4, r5, lr}
 8012ade:	4d07      	ldr	r5, [pc, #28]	@ (8012afc <_write_r+0x20>)
 8012ae0:	4604      	mov	r4, r0
 8012ae2:	4608      	mov	r0, r1
 8012ae4:	4611      	mov	r1, r2
 8012ae6:	2200      	movs	r2, #0
 8012ae8:	602a      	str	r2, [r5, #0]
 8012aea:	461a      	mov	r2, r3
 8012aec:	f7f1 fdea 	bl	80046c4 <_write>
 8012af0:	1c43      	adds	r3, r0, #1
 8012af2:	d102      	bne.n	8012afa <_write_r+0x1e>
 8012af4:	682b      	ldr	r3, [r5, #0]
 8012af6:	b103      	cbz	r3, 8012afa <_write_r+0x1e>
 8012af8:	6023      	str	r3, [r4, #0]
 8012afa:	bd38      	pop	{r3, r4, r5, pc}
 8012afc:	200022dc 	.word	0x200022dc

08012b00 <__errno>:
 8012b00:	4b01      	ldr	r3, [pc, #4]	@ (8012b08 <__errno+0x8>)
 8012b02:	6818      	ldr	r0, [r3, #0]
 8012b04:	4770      	bx	lr
 8012b06:	bf00      	nop
 8012b08:	20000134 	.word	0x20000134

08012b0c <__libc_init_array>:
 8012b0c:	b570      	push	{r4, r5, r6, lr}
 8012b0e:	4d0d      	ldr	r5, [pc, #52]	@ (8012b44 <__libc_init_array+0x38>)
 8012b10:	4c0d      	ldr	r4, [pc, #52]	@ (8012b48 <__libc_init_array+0x3c>)
 8012b12:	1b64      	subs	r4, r4, r5
 8012b14:	10a4      	asrs	r4, r4, #2
 8012b16:	2600      	movs	r6, #0
 8012b18:	42a6      	cmp	r6, r4
 8012b1a:	d109      	bne.n	8012b30 <__libc_init_array+0x24>
 8012b1c:	4d0b      	ldr	r5, [pc, #44]	@ (8012b4c <__libc_init_array+0x40>)
 8012b1e:	4c0c      	ldr	r4, [pc, #48]	@ (8012b50 <__libc_init_array+0x44>)
 8012b20:	f001 fef2 	bl	8014908 <_init>
 8012b24:	1b64      	subs	r4, r4, r5
 8012b26:	10a4      	asrs	r4, r4, #2
 8012b28:	2600      	movs	r6, #0
 8012b2a:	42a6      	cmp	r6, r4
 8012b2c:	d105      	bne.n	8012b3a <__libc_init_array+0x2e>
 8012b2e:	bd70      	pop	{r4, r5, r6, pc}
 8012b30:	f855 3b04 	ldr.w	r3, [r5], #4
 8012b34:	4798      	blx	r3
 8012b36:	3601      	adds	r6, #1
 8012b38:	e7ee      	b.n	8012b18 <__libc_init_array+0xc>
 8012b3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8012b3e:	4798      	blx	r3
 8012b40:	3601      	adds	r6, #1
 8012b42:	e7f2      	b.n	8012b2a <__libc_init_array+0x1e>
 8012b44:	08014e28 	.word	0x08014e28
 8012b48:	08014e28 	.word	0x08014e28
 8012b4c:	08014e28 	.word	0x08014e28
 8012b50:	08014e2c 	.word	0x08014e2c

08012b54 <__retarget_lock_init_recursive>:
 8012b54:	4770      	bx	lr

08012b56 <__retarget_lock_acquire_recursive>:
 8012b56:	4770      	bx	lr

08012b58 <__retarget_lock_release_recursive>:
 8012b58:	4770      	bx	lr

08012b5a <memcpy>:
 8012b5a:	440a      	add	r2, r1
 8012b5c:	4291      	cmp	r1, r2
 8012b5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8012b62:	d100      	bne.n	8012b66 <memcpy+0xc>
 8012b64:	4770      	bx	lr
 8012b66:	b510      	push	{r4, lr}
 8012b68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012b6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012b70:	4291      	cmp	r1, r2
 8012b72:	d1f9      	bne.n	8012b68 <memcpy+0xe>
 8012b74:	bd10      	pop	{r4, pc}

08012b76 <quorem>:
 8012b76:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b7a:	6903      	ldr	r3, [r0, #16]
 8012b7c:	690c      	ldr	r4, [r1, #16]
 8012b7e:	42a3      	cmp	r3, r4
 8012b80:	4607      	mov	r7, r0
 8012b82:	db7e      	blt.n	8012c82 <quorem+0x10c>
 8012b84:	3c01      	subs	r4, #1
 8012b86:	f101 0814 	add.w	r8, r1, #20
 8012b8a:	00a3      	lsls	r3, r4, #2
 8012b8c:	f100 0514 	add.w	r5, r0, #20
 8012b90:	9300      	str	r3, [sp, #0]
 8012b92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012b96:	9301      	str	r3, [sp, #4]
 8012b98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012b9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012ba0:	3301      	adds	r3, #1
 8012ba2:	429a      	cmp	r2, r3
 8012ba4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012ba8:	fbb2 f6f3 	udiv	r6, r2, r3
 8012bac:	d32e      	bcc.n	8012c0c <quorem+0x96>
 8012bae:	f04f 0a00 	mov.w	sl, #0
 8012bb2:	46c4      	mov	ip, r8
 8012bb4:	46ae      	mov	lr, r5
 8012bb6:	46d3      	mov	fp, sl
 8012bb8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012bbc:	b298      	uxth	r0, r3
 8012bbe:	fb06 a000 	mla	r0, r6, r0, sl
 8012bc2:	0c02      	lsrs	r2, r0, #16
 8012bc4:	0c1b      	lsrs	r3, r3, #16
 8012bc6:	fb06 2303 	mla	r3, r6, r3, r2
 8012bca:	f8de 2000 	ldr.w	r2, [lr]
 8012bce:	b280      	uxth	r0, r0
 8012bd0:	b292      	uxth	r2, r2
 8012bd2:	1a12      	subs	r2, r2, r0
 8012bd4:	445a      	add	r2, fp
 8012bd6:	f8de 0000 	ldr.w	r0, [lr]
 8012bda:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012bde:	b29b      	uxth	r3, r3
 8012be0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8012be4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012be8:	b292      	uxth	r2, r2
 8012bea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012bee:	45e1      	cmp	r9, ip
 8012bf0:	f84e 2b04 	str.w	r2, [lr], #4
 8012bf4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012bf8:	d2de      	bcs.n	8012bb8 <quorem+0x42>
 8012bfa:	9b00      	ldr	r3, [sp, #0]
 8012bfc:	58eb      	ldr	r3, [r5, r3]
 8012bfe:	b92b      	cbnz	r3, 8012c0c <quorem+0x96>
 8012c00:	9b01      	ldr	r3, [sp, #4]
 8012c02:	3b04      	subs	r3, #4
 8012c04:	429d      	cmp	r5, r3
 8012c06:	461a      	mov	r2, r3
 8012c08:	d32f      	bcc.n	8012c6a <quorem+0xf4>
 8012c0a:	613c      	str	r4, [r7, #16]
 8012c0c:	4638      	mov	r0, r7
 8012c0e:	f001 f979 	bl	8013f04 <__mcmp>
 8012c12:	2800      	cmp	r0, #0
 8012c14:	db25      	blt.n	8012c62 <quorem+0xec>
 8012c16:	4629      	mov	r1, r5
 8012c18:	2000      	movs	r0, #0
 8012c1a:	f858 2b04 	ldr.w	r2, [r8], #4
 8012c1e:	f8d1 c000 	ldr.w	ip, [r1]
 8012c22:	fa1f fe82 	uxth.w	lr, r2
 8012c26:	fa1f f38c 	uxth.w	r3, ip
 8012c2a:	eba3 030e 	sub.w	r3, r3, lr
 8012c2e:	4403      	add	r3, r0
 8012c30:	0c12      	lsrs	r2, r2, #16
 8012c32:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8012c36:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012c3a:	b29b      	uxth	r3, r3
 8012c3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012c40:	45c1      	cmp	r9, r8
 8012c42:	f841 3b04 	str.w	r3, [r1], #4
 8012c46:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012c4a:	d2e6      	bcs.n	8012c1a <quorem+0xa4>
 8012c4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012c50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012c54:	b922      	cbnz	r2, 8012c60 <quorem+0xea>
 8012c56:	3b04      	subs	r3, #4
 8012c58:	429d      	cmp	r5, r3
 8012c5a:	461a      	mov	r2, r3
 8012c5c:	d30b      	bcc.n	8012c76 <quorem+0x100>
 8012c5e:	613c      	str	r4, [r7, #16]
 8012c60:	3601      	adds	r6, #1
 8012c62:	4630      	mov	r0, r6
 8012c64:	b003      	add	sp, #12
 8012c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c6a:	6812      	ldr	r2, [r2, #0]
 8012c6c:	3b04      	subs	r3, #4
 8012c6e:	2a00      	cmp	r2, #0
 8012c70:	d1cb      	bne.n	8012c0a <quorem+0x94>
 8012c72:	3c01      	subs	r4, #1
 8012c74:	e7c6      	b.n	8012c04 <quorem+0x8e>
 8012c76:	6812      	ldr	r2, [r2, #0]
 8012c78:	3b04      	subs	r3, #4
 8012c7a:	2a00      	cmp	r2, #0
 8012c7c:	d1ef      	bne.n	8012c5e <quorem+0xe8>
 8012c7e:	3c01      	subs	r4, #1
 8012c80:	e7ea      	b.n	8012c58 <quorem+0xe2>
 8012c82:	2000      	movs	r0, #0
 8012c84:	e7ee      	b.n	8012c64 <quorem+0xee>
	...

08012c88 <_dtoa_r>:
 8012c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c8c:	69c7      	ldr	r7, [r0, #28]
 8012c8e:	b099      	sub	sp, #100	@ 0x64
 8012c90:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012c94:	ec55 4b10 	vmov	r4, r5, d0
 8012c98:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8012c9a:	9109      	str	r1, [sp, #36]	@ 0x24
 8012c9c:	4683      	mov	fp, r0
 8012c9e:	920e      	str	r2, [sp, #56]	@ 0x38
 8012ca0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8012ca2:	b97f      	cbnz	r7, 8012cc4 <_dtoa_r+0x3c>
 8012ca4:	2010      	movs	r0, #16
 8012ca6:	f000 fdfd 	bl	80138a4 <malloc>
 8012caa:	4602      	mov	r2, r0
 8012cac:	f8cb 001c 	str.w	r0, [fp, #28]
 8012cb0:	b920      	cbnz	r0, 8012cbc <_dtoa_r+0x34>
 8012cb2:	4ba7      	ldr	r3, [pc, #668]	@ (8012f50 <_dtoa_r+0x2c8>)
 8012cb4:	21ef      	movs	r1, #239	@ 0xef
 8012cb6:	48a7      	ldr	r0, [pc, #668]	@ (8012f54 <_dtoa_r+0x2cc>)
 8012cb8:	f001 fcf2 	bl	80146a0 <__assert_func>
 8012cbc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012cc0:	6007      	str	r7, [r0, #0]
 8012cc2:	60c7      	str	r7, [r0, #12]
 8012cc4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012cc8:	6819      	ldr	r1, [r3, #0]
 8012cca:	b159      	cbz	r1, 8012ce4 <_dtoa_r+0x5c>
 8012ccc:	685a      	ldr	r2, [r3, #4]
 8012cce:	604a      	str	r2, [r1, #4]
 8012cd0:	2301      	movs	r3, #1
 8012cd2:	4093      	lsls	r3, r2
 8012cd4:	608b      	str	r3, [r1, #8]
 8012cd6:	4658      	mov	r0, fp
 8012cd8:	f000 feda 	bl	8013a90 <_Bfree>
 8012cdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012ce0:	2200      	movs	r2, #0
 8012ce2:	601a      	str	r2, [r3, #0]
 8012ce4:	1e2b      	subs	r3, r5, #0
 8012ce6:	bfb9      	ittee	lt
 8012ce8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012cec:	9303      	strlt	r3, [sp, #12]
 8012cee:	2300      	movge	r3, #0
 8012cf0:	6033      	strge	r3, [r6, #0]
 8012cf2:	9f03      	ldr	r7, [sp, #12]
 8012cf4:	4b98      	ldr	r3, [pc, #608]	@ (8012f58 <_dtoa_r+0x2d0>)
 8012cf6:	bfbc      	itt	lt
 8012cf8:	2201      	movlt	r2, #1
 8012cfa:	6032      	strlt	r2, [r6, #0]
 8012cfc:	43bb      	bics	r3, r7
 8012cfe:	d112      	bne.n	8012d26 <_dtoa_r+0x9e>
 8012d00:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012d02:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012d06:	6013      	str	r3, [r2, #0]
 8012d08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8012d0c:	4323      	orrs	r3, r4
 8012d0e:	f000 854d 	beq.w	80137ac <_dtoa_r+0xb24>
 8012d12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012d14:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8012f6c <_dtoa_r+0x2e4>
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	f000 854f 	beq.w	80137bc <_dtoa_r+0xb34>
 8012d1e:	f10a 0303 	add.w	r3, sl, #3
 8012d22:	f000 bd49 	b.w	80137b8 <_dtoa_r+0xb30>
 8012d26:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012d2a:	2200      	movs	r2, #0
 8012d2c:	ec51 0b17 	vmov	r0, r1, d7
 8012d30:	2300      	movs	r3, #0
 8012d32:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8012d36:	f7ed fe9f 	bl	8000a78 <__aeabi_dcmpeq>
 8012d3a:	4680      	mov	r8, r0
 8012d3c:	b158      	cbz	r0, 8012d56 <_dtoa_r+0xce>
 8012d3e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8012d40:	2301      	movs	r3, #1
 8012d42:	6013      	str	r3, [r2, #0]
 8012d44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012d46:	b113      	cbz	r3, 8012d4e <_dtoa_r+0xc6>
 8012d48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012d4a:	4b84      	ldr	r3, [pc, #528]	@ (8012f5c <_dtoa_r+0x2d4>)
 8012d4c:	6013      	str	r3, [r2, #0]
 8012d4e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8012f70 <_dtoa_r+0x2e8>
 8012d52:	f000 bd33 	b.w	80137bc <_dtoa_r+0xb34>
 8012d56:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012d5a:	aa16      	add	r2, sp, #88	@ 0x58
 8012d5c:	a917      	add	r1, sp, #92	@ 0x5c
 8012d5e:	4658      	mov	r0, fp
 8012d60:	f001 f980 	bl	8014064 <__d2b>
 8012d64:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8012d68:	4681      	mov	r9, r0
 8012d6a:	2e00      	cmp	r6, #0
 8012d6c:	d077      	beq.n	8012e5e <_dtoa_r+0x1d6>
 8012d6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012d70:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8012d74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012d78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012d7c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8012d80:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8012d84:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8012d88:	4619      	mov	r1, r3
 8012d8a:	2200      	movs	r2, #0
 8012d8c:	4b74      	ldr	r3, [pc, #464]	@ (8012f60 <_dtoa_r+0x2d8>)
 8012d8e:	f7ed fa53 	bl	8000238 <__aeabi_dsub>
 8012d92:	a369      	add	r3, pc, #420	@ (adr r3, 8012f38 <_dtoa_r+0x2b0>)
 8012d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d98:	f7ed fc06 	bl	80005a8 <__aeabi_dmul>
 8012d9c:	a368      	add	r3, pc, #416	@ (adr r3, 8012f40 <_dtoa_r+0x2b8>)
 8012d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012da2:	f7ed fa4b 	bl	800023c <__adddf3>
 8012da6:	4604      	mov	r4, r0
 8012da8:	4630      	mov	r0, r6
 8012daa:	460d      	mov	r5, r1
 8012dac:	f7ed fb92 	bl	80004d4 <__aeabi_i2d>
 8012db0:	a365      	add	r3, pc, #404	@ (adr r3, 8012f48 <_dtoa_r+0x2c0>)
 8012db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012db6:	f7ed fbf7 	bl	80005a8 <__aeabi_dmul>
 8012dba:	4602      	mov	r2, r0
 8012dbc:	460b      	mov	r3, r1
 8012dbe:	4620      	mov	r0, r4
 8012dc0:	4629      	mov	r1, r5
 8012dc2:	f7ed fa3b 	bl	800023c <__adddf3>
 8012dc6:	4604      	mov	r4, r0
 8012dc8:	460d      	mov	r5, r1
 8012dca:	f7ed fe9d 	bl	8000b08 <__aeabi_d2iz>
 8012dce:	2200      	movs	r2, #0
 8012dd0:	4607      	mov	r7, r0
 8012dd2:	2300      	movs	r3, #0
 8012dd4:	4620      	mov	r0, r4
 8012dd6:	4629      	mov	r1, r5
 8012dd8:	f7ed fe58 	bl	8000a8c <__aeabi_dcmplt>
 8012ddc:	b140      	cbz	r0, 8012df0 <_dtoa_r+0x168>
 8012dde:	4638      	mov	r0, r7
 8012de0:	f7ed fb78 	bl	80004d4 <__aeabi_i2d>
 8012de4:	4622      	mov	r2, r4
 8012de6:	462b      	mov	r3, r5
 8012de8:	f7ed fe46 	bl	8000a78 <__aeabi_dcmpeq>
 8012dec:	b900      	cbnz	r0, 8012df0 <_dtoa_r+0x168>
 8012dee:	3f01      	subs	r7, #1
 8012df0:	2f16      	cmp	r7, #22
 8012df2:	d851      	bhi.n	8012e98 <_dtoa_r+0x210>
 8012df4:	4b5b      	ldr	r3, [pc, #364]	@ (8012f64 <_dtoa_r+0x2dc>)
 8012df6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dfe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012e02:	f7ed fe43 	bl	8000a8c <__aeabi_dcmplt>
 8012e06:	2800      	cmp	r0, #0
 8012e08:	d048      	beq.n	8012e9c <_dtoa_r+0x214>
 8012e0a:	3f01      	subs	r7, #1
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	9312      	str	r3, [sp, #72]	@ 0x48
 8012e10:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012e12:	1b9b      	subs	r3, r3, r6
 8012e14:	1e5a      	subs	r2, r3, #1
 8012e16:	bf44      	itt	mi
 8012e18:	f1c3 0801 	rsbmi	r8, r3, #1
 8012e1c:	2300      	movmi	r3, #0
 8012e1e:	9208      	str	r2, [sp, #32]
 8012e20:	bf54      	ite	pl
 8012e22:	f04f 0800 	movpl.w	r8, #0
 8012e26:	9308      	strmi	r3, [sp, #32]
 8012e28:	2f00      	cmp	r7, #0
 8012e2a:	db39      	blt.n	8012ea0 <_dtoa_r+0x218>
 8012e2c:	9b08      	ldr	r3, [sp, #32]
 8012e2e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8012e30:	443b      	add	r3, r7
 8012e32:	9308      	str	r3, [sp, #32]
 8012e34:	2300      	movs	r3, #0
 8012e36:	930a      	str	r3, [sp, #40]	@ 0x28
 8012e38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e3a:	2b09      	cmp	r3, #9
 8012e3c:	d864      	bhi.n	8012f08 <_dtoa_r+0x280>
 8012e3e:	2b05      	cmp	r3, #5
 8012e40:	bfc4      	itt	gt
 8012e42:	3b04      	subgt	r3, #4
 8012e44:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8012e46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e48:	f1a3 0302 	sub.w	r3, r3, #2
 8012e4c:	bfcc      	ite	gt
 8012e4e:	2400      	movgt	r4, #0
 8012e50:	2401      	movle	r4, #1
 8012e52:	2b03      	cmp	r3, #3
 8012e54:	d863      	bhi.n	8012f1e <_dtoa_r+0x296>
 8012e56:	e8df f003 	tbb	[pc, r3]
 8012e5a:	372a      	.short	0x372a
 8012e5c:	5535      	.short	0x5535
 8012e5e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8012e62:	441e      	add	r6, r3
 8012e64:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8012e68:	2b20      	cmp	r3, #32
 8012e6a:	bfc1      	itttt	gt
 8012e6c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8012e70:	409f      	lslgt	r7, r3
 8012e72:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8012e76:	fa24 f303 	lsrgt.w	r3, r4, r3
 8012e7a:	bfd6      	itet	le
 8012e7c:	f1c3 0320 	rsble	r3, r3, #32
 8012e80:	ea47 0003 	orrgt.w	r0, r7, r3
 8012e84:	fa04 f003 	lslle.w	r0, r4, r3
 8012e88:	f7ed fb14 	bl	80004b4 <__aeabi_ui2d>
 8012e8c:	2201      	movs	r2, #1
 8012e8e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8012e92:	3e01      	subs	r6, #1
 8012e94:	9214      	str	r2, [sp, #80]	@ 0x50
 8012e96:	e777      	b.n	8012d88 <_dtoa_r+0x100>
 8012e98:	2301      	movs	r3, #1
 8012e9a:	e7b8      	b.n	8012e0e <_dtoa_r+0x186>
 8012e9c:	9012      	str	r0, [sp, #72]	@ 0x48
 8012e9e:	e7b7      	b.n	8012e10 <_dtoa_r+0x188>
 8012ea0:	427b      	negs	r3, r7
 8012ea2:	930a      	str	r3, [sp, #40]	@ 0x28
 8012ea4:	2300      	movs	r3, #0
 8012ea6:	eba8 0807 	sub.w	r8, r8, r7
 8012eaa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012eac:	e7c4      	b.n	8012e38 <_dtoa_r+0x1b0>
 8012eae:	2300      	movs	r3, #0
 8012eb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012eb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	dc35      	bgt.n	8012f24 <_dtoa_r+0x29c>
 8012eb8:	2301      	movs	r3, #1
 8012eba:	9300      	str	r3, [sp, #0]
 8012ebc:	9307      	str	r3, [sp, #28]
 8012ebe:	461a      	mov	r2, r3
 8012ec0:	920e      	str	r2, [sp, #56]	@ 0x38
 8012ec2:	e00b      	b.n	8012edc <_dtoa_r+0x254>
 8012ec4:	2301      	movs	r3, #1
 8012ec6:	e7f3      	b.n	8012eb0 <_dtoa_r+0x228>
 8012ec8:	2300      	movs	r3, #0
 8012eca:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012ecc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012ece:	18fb      	adds	r3, r7, r3
 8012ed0:	9300      	str	r3, [sp, #0]
 8012ed2:	3301      	adds	r3, #1
 8012ed4:	2b01      	cmp	r3, #1
 8012ed6:	9307      	str	r3, [sp, #28]
 8012ed8:	bfb8      	it	lt
 8012eda:	2301      	movlt	r3, #1
 8012edc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8012ee0:	2100      	movs	r1, #0
 8012ee2:	2204      	movs	r2, #4
 8012ee4:	f102 0514 	add.w	r5, r2, #20
 8012ee8:	429d      	cmp	r5, r3
 8012eea:	d91f      	bls.n	8012f2c <_dtoa_r+0x2a4>
 8012eec:	6041      	str	r1, [r0, #4]
 8012eee:	4658      	mov	r0, fp
 8012ef0:	f000 fd8e 	bl	8013a10 <_Balloc>
 8012ef4:	4682      	mov	sl, r0
 8012ef6:	2800      	cmp	r0, #0
 8012ef8:	d13c      	bne.n	8012f74 <_dtoa_r+0x2ec>
 8012efa:	4b1b      	ldr	r3, [pc, #108]	@ (8012f68 <_dtoa_r+0x2e0>)
 8012efc:	4602      	mov	r2, r0
 8012efe:	f240 11af 	movw	r1, #431	@ 0x1af
 8012f02:	e6d8      	b.n	8012cb6 <_dtoa_r+0x2e>
 8012f04:	2301      	movs	r3, #1
 8012f06:	e7e0      	b.n	8012eca <_dtoa_r+0x242>
 8012f08:	2401      	movs	r4, #1
 8012f0a:	2300      	movs	r3, #0
 8012f0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8012f0e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8012f10:	f04f 33ff 	mov.w	r3, #4294967295
 8012f14:	9300      	str	r3, [sp, #0]
 8012f16:	9307      	str	r3, [sp, #28]
 8012f18:	2200      	movs	r2, #0
 8012f1a:	2312      	movs	r3, #18
 8012f1c:	e7d0      	b.n	8012ec0 <_dtoa_r+0x238>
 8012f1e:	2301      	movs	r3, #1
 8012f20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012f22:	e7f5      	b.n	8012f10 <_dtoa_r+0x288>
 8012f24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012f26:	9300      	str	r3, [sp, #0]
 8012f28:	9307      	str	r3, [sp, #28]
 8012f2a:	e7d7      	b.n	8012edc <_dtoa_r+0x254>
 8012f2c:	3101      	adds	r1, #1
 8012f2e:	0052      	lsls	r2, r2, #1
 8012f30:	e7d8      	b.n	8012ee4 <_dtoa_r+0x25c>
 8012f32:	bf00      	nop
 8012f34:	f3af 8000 	nop.w
 8012f38:	636f4361 	.word	0x636f4361
 8012f3c:	3fd287a7 	.word	0x3fd287a7
 8012f40:	8b60c8b3 	.word	0x8b60c8b3
 8012f44:	3fc68a28 	.word	0x3fc68a28
 8012f48:	509f79fb 	.word	0x509f79fb
 8012f4c:	3fd34413 	.word	0x3fd34413
 8012f50:	08014aed 	.word	0x08014aed
 8012f54:	08014b04 	.word	0x08014b04
 8012f58:	7ff00000 	.word	0x7ff00000
 8012f5c:	08014abd 	.word	0x08014abd
 8012f60:	3ff80000 	.word	0x3ff80000
 8012f64:	08014c00 	.word	0x08014c00
 8012f68:	08014b5c 	.word	0x08014b5c
 8012f6c:	08014ae9 	.word	0x08014ae9
 8012f70:	08014abc 	.word	0x08014abc
 8012f74:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012f78:	6018      	str	r0, [r3, #0]
 8012f7a:	9b07      	ldr	r3, [sp, #28]
 8012f7c:	2b0e      	cmp	r3, #14
 8012f7e:	f200 80a4 	bhi.w	80130ca <_dtoa_r+0x442>
 8012f82:	2c00      	cmp	r4, #0
 8012f84:	f000 80a1 	beq.w	80130ca <_dtoa_r+0x442>
 8012f88:	2f00      	cmp	r7, #0
 8012f8a:	dd33      	ble.n	8012ff4 <_dtoa_r+0x36c>
 8012f8c:	4bad      	ldr	r3, [pc, #692]	@ (8013244 <_dtoa_r+0x5bc>)
 8012f8e:	f007 020f 	and.w	r2, r7, #15
 8012f92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012f96:	ed93 7b00 	vldr	d7, [r3]
 8012f9a:	05f8      	lsls	r0, r7, #23
 8012f9c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012fa0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8012fa4:	d516      	bpl.n	8012fd4 <_dtoa_r+0x34c>
 8012fa6:	4ba8      	ldr	r3, [pc, #672]	@ (8013248 <_dtoa_r+0x5c0>)
 8012fa8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012fac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012fb0:	f7ed fc24 	bl	80007fc <__aeabi_ddiv>
 8012fb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012fb8:	f004 040f 	and.w	r4, r4, #15
 8012fbc:	2603      	movs	r6, #3
 8012fbe:	4da2      	ldr	r5, [pc, #648]	@ (8013248 <_dtoa_r+0x5c0>)
 8012fc0:	b954      	cbnz	r4, 8012fd8 <_dtoa_r+0x350>
 8012fc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012fc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012fca:	f7ed fc17 	bl	80007fc <__aeabi_ddiv>
 8012fce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012fd2:	e028      	b.n	8013026 <_dtoa_r+0x39e>
 8012fd4:	2602      	movs	r6, #2
 8012fd6:	e7f2      	b.n	8012fbe <_dtoa_r+0x336>
 8012fd8:	07e1      	lsls	r1, r4, #31
 8012fda:	d508      	bpl.n	8012fee <_dtoa_r+0x366>
 8012fdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012fe0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012fe4:	f7ed fae0 	bl	80005a8 <__aeabi_dmul>
 8012fe8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012fec:	3601      	adds	r6, #1
 8012fee:	1064      	asrs	r4, r4, #1
 8012ff0:	3508      	adds	r5, #8
 8012ff2:	e7e5      	b.n	8012fc0 <_dtoa_r+0x338>
 8012ff4:	f000 80d2 	beq.w	801319c <_dtoa_r+0x514>
 8012ff8:	427c      	negs	r4, r7
 8012ffa:	4b92      	ldr	r3, [pc, #584]	@ (8013244 <_dtoa_r+0x5bc>)
 8012ffc:	4d92      	ldr	r5, [pc, #584]	@ (8013248 <_dtoa_r+0x5c0>)
 8012ffe:	f004 020f 	and.w	r2, r4, #15
 8013002:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801300a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801300e:	f7ed facb 	bl	80005a8 <__aeabi_dmul>
 8013012:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013016:	1124      	asrs	r4, r4, #4
 8013018:	2300      	movs	r3, #0
 801301a:	2602      	movs	r6, #2
 801301c:	2c00      	cmp	r4, #0
 801301e:	f040 80b2 	bne.w	8013186 <_dtoa_r+0x4fe>
 8013022:	2b00      	cmp	r3, #0
 8013024:	d1d3      	bne.n	8012fce <_dtoa_r+0x346>
 8013026:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8013028:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801302c:	2b00      	cmp	r3, #0
 801302e:	f000 80b7 	beq.w	80131a0 <_dtoa_r+0x518>
 8013032:	4b86      	ldr	r3, [pc, #536]	@ (801324c <_dtoa_r+0x5c4>)
 8013034:	2200      	movs	r2, #0
 8013036:	4620      	mov	r0, r4
 8013038:	4629      	mov	r1, r5
 801303a:	f7ed fd27 	bl	8000a8c <__aeabi_dcmplt>
 801303e:	2800      	cmp	r0, #0
 8013040:	f000 80ae 	beq.w	80131a0 <_dtoa_r+0x518>
 8013044:	9b07      	ldr	r3, [sp, #28]
 8013046:	2b00      	cmp	r3, #0
 8013048:	f000 80aa 	beq.w	80131a0 <_dtoa_r+0x518>
 801304c:	9b00      	ldr	r3, [sp, #0]
 801304e:	2b00      	cmp	r3, #0
 8013050:	dd37      	ble.n	80130c2 <_dtoa_r+0x43a>
 8013052:	1e7b      	subs	r3, r7, #1
 8013054:	9304      	str	r3, [sp, #16]
 8013056:	4620      	mov	r0, r4
 8013058:	4b7d      	ldr	r3, [pc, #500]	@ (8013250 <_dtoa_r+0x5c8>)
 801305a:	2200      	movs	r2, #0
 801305c:	4629      	mov	r1, r5
 801305e:	f7ed faa3 	bl	80005a8 <__aeabi_dmul>
 8013062:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013066:	9c00      	ldr	r4, [sp, #0]
 8013068:	3601      	adds	r6, #1
 801306a:	4630      	mov	r0, r6
 801306c:	f7ed fa32 	bl	80004d4 <__aeabi_i2d>
 8013070:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013074:	f7ed fa98 	bl	80005a8 <__aeabi_dmul>
 8013078:	4b76      	ldr	r3, [pc, #472]	@ (8013254 <_dtoa_r+0x5cc>)
 801307a:	2200      	movs	r2, #0
 801307c:	f7ed f8de 	bl	800023c <__adddf3>
 8013080:	4605      	mov	r5, r0
 8013082:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8013086:	2c00      	cmp	r4, #0
 8013088:	f040 808d 	bne.w	80131a6 <_dtoa_r+0x51e>
 801308c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013090:	4b71      	ldr	r3, [pc, #452]	@ (8013258 <_dtoa_r+0x5d0>)
 8013092:	2200      	movs	r2, #0
 8013094:	f7ed f8d0 	bl	8000238 <__aeabi_dsub>
 8013098:	4602      	mov	r2, r0
 801309a:	460b      	mov	r3, r1
 801309c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80130a0:	462a      	mov	r2, r5
 80130a2:	4633      	mov	r3, r6
 80130a4:	f7ed fd10 	bl	8000ac8 <__aeabi_dcmpgt>
 80130a8:	2800      	cmp	r0, #0
 80130aa:	f040 828b 	bne.w	80135c4 <_dtoa_r+0x93c>
 80130ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80130b2:	462a      	mov	r2, r5
 80130b4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80130b8:	f7ed fce8 	bl	8000a8c <__aeabi_dcmplt>
 80130bc:	2800      	cmp	r0, #0
 80130be:	f040 8128 	bne.w	8013312 <_dtoa_r+0x68a>
 80130c2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80130c6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80130ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	f2c0 815a 	blt.w	8013386 <_dtoa_r+0x6fe>
 80130d2:	2f0e      	cmp	r7, #14
 80130d4:	f300 8157 	bgt.w	8013386 <_dtoa_r+0x6fe>
 80130d8:	4b5a      	ldr	r3, [pc, #360]	@ (8013244 <_dtoa_r+0x5bc>)
 80130da:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80130de:	ed93 7b00 	vldr	d7, [r3]
 80130e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	ed8d 7b00 	vstr	d7, [sp]
 80130ea:	da03      	bge.n	80130f4 <_dtoa_r+0x46c>
 80130ec:	9b07      	ldr	r3, [sp, #28]
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	f340 8101 	ble.w	80132f6 <_dtoa_r+0x66e>
 80130f4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80130f8:	4656      	mov	r6, sl
 80130fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80130fe:	4620      	mov	r0, r4
 8013100:	4629      	mov	r1, r5
 8013102:	f7ed fb7b 	bl	80007fc <__aeabi_ddiv>
 8013106:	f7ed fcff 	bl	8000b08 <__aeabi_d2iz>
 801310a:	4680      	mov	r8, r0
 801310c:	f7ed f9e2 	bl	80004d4 <__aeabi_i2d>
 8013110:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013114:	f7ed fa48 	bl	80005a8 <__aeabi_dmul>
 8013118:	4602      	mov	r2, r0
 801311a:	460b      	mov	r3, r1
 801311c:	4620      	mov	r0, r4
 801311e:	4629      	mov	r1, r5
 8013120:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8013124:	f7ed f888 	bl	8000238 <__aeabi_dsub>
 8013128:	f806 4b01 	strb.w	r4, [r6], #1
 801312c:	9d07      	ldr	r5, [sp, #28]
 801312e:	eba6 040a 	sub.w	r4, r6, sl
 8013132:	42a5      	cmp	r5, r4
 8013134:	4602      	mov	r2, r0
 8013136:	460b      	mov	r3, r1
 8013138:	f040 8117 	bne.w	801336a <_dtoa_r+0x6e2>
 801313c:	f7ed f87e 	bl	800023c <__adddf3>
 8013140:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013144:	4604      	mov	r4, r0
 8013146:	460d      	mov	r5, r1
 8013148:	f7ed fcbe 	bl	8000ac8 <__aeabi_dcmpgt>
 801314c:	2800      	cmp	r0, #0
 801314e:	f040 80f9 	bne.w	8013344 <_dtoa_r+0x6bc>
 8013152:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013156:	4620      	mov	r0, r4
 8013158:	4629      	mov	r1, r5
 801315a:	f7ed fc8d 	bl	8000a78 <__aeabi_dcmpeq>
 801315e:	b118      	cbz	r0, 8013168 <_dtoa_r+0x4e0>
 8013160:	f018 0f01 	tst.w	r8, #1
 8013164:	f040 80ee 	bne.w	8013344 <_dtoa_r+0x6bc>
 8013168:	4649      	mov	r1, r9
 801316a:	4658      	mov	r0, fp
 801316c:	f000 fc90 	bl	8013a90 <_Bfree>
 8013170:	2300      	movs	r3, #0
 8013172:	7033      	strb	r3, [r6, #0]
 8013174:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8013176:	3701      	adds	r7, #1
 8013178:	601f      	str	r7, [r3, #0]
 801317a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801317c:	2b00      	cmp	r3, #0
 801317e:	f000 831d 	beq.w	80137bc <_dtoa_r+0xb34>
 8013182:	601e      	str	r6, [r3, #0]
 8013184:	e31a      	b.n	80137bc <_dtoa_r+0xb34>
 8013186:	07e2      	lsls	r2, r4, #31
 8013188:	d505      	bpl.n	8013196 <_dtoa_r+0x50e>
 801318a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801318e:	f7ed fa0b 	bl	80005a8 <__aeabi_dmul>
 8013192:	3601      	adds	r6, #1
 8013194:	2301      	movs	r3, #1
 8013196:	1064      	asrs	r4, r4, #1
 8013198:	3508      	adds	r5, #8
 801319a:	e73f      	b.n	801301c <_dtoa_r+0x394>
 801319c:	2602      	movs	r6, #2
 801319e:	e742      	b.n	8013026 <_dtoa_r+0x39e>
 80131a0:	9c07      	ldr	r4, [sp, #28]
 80131a2:	9704      	str	r7, [sp, #16]
 80131a4:	e761      	b.n	801306a <_dtoa_r+0x3e2>
 80131a6:	4b27      	ldr	r3, [pc, #156]	@ (8013244 <_dtoa_r+0x5bc>)
 80131a8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80131aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80131ae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80131b2:	4454      	add	r4, sl
 80131b4:	2900      	cmp	r1, #0
 80131b6:	d053      	beq.n	8013260 <_dtoa_r+0x5d8>
 80131b8:	4928      	ldr	r1, [pc, #160]	@ (801325c <_dtoa_r+0x5d4>)
 80131ba:	2000      	movs	r0, #0
 80131bc:	f7ed fb1e 	bl	80007fc <__aeabi_ddiv>
 80131c0:	4633      	mov	r3, r6
 80131c2:	462a      	mov	r2, r5
 80131c4:	f7ed f838 	bl	8000238 <__aeabi_dsub>
 80131c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80131cc:	4656      	mov	r6, sl
 80131ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80131d2:	f7ed fc99 	bl	8000b08 <__aeabi_d2iz>
 80131d6:	4605      	mov	r5, r0
 80131d8:	f7ed f97c 	bl	80004d4 <__aeabi_i2d>
 80131dc:	4602      	mov	r2, r0
 80131de:	460b      	mov	r3, r1
 80131e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80131e4:	f7ed f828 	bl	8000238 <__aeabi_dsub>
 80131e8:	3530      	adds	r5, #48	@ 0x30
 80131ea:	4602      	mov	r2, r0
 80131ec:	460b      	mov	r3, r1
 80131ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80131f2:	f806 5b01 	strb.w	r5, [r6], #1
 80131f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80131fa:	f7ed fc47 	bl	8000a8c <__aeabi_dcmplt>
 80131fe:	2800      	cmp	r0, #0
 8013200:	d171      	bne.n	80132e6 <_dtoa_r+0x65e>
 8013202:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013206:	4911      	ldr	r1, [pc, #68]	@ (801324c <_dtoa_r+0x5c4>)
 8013208:	2000      	movs	r0, #0
 801320a:	f7ed f815 	bl	8000238 <__aeabi_dsub>
 801320e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8013212:	f7ed fc3b 	bl	8000a8c <__aeabi_dcmplt>
 8013216:	2800      	cmp	r0, #0
 8013218:	f040 8095 	bne.w	8013346 <_dtoa_r+0x6be>
 801321c:	42a6      	cmp	r6, r4
 801321e:	f43f af50 	beq.w	80130c2 <_dtoa_r+0x43a>
 8013222:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8013226:	4b0a      	ldr	r3, [pc, #40]	@ (8013250 <_dtoa_r+0x5c8>)
 8013228:	2200      	movs	r2, #0
 801322a:	f7ed f9bd 	bl	80005a8 <__aeabi_dmul>
 801322e:	4b08      	ldr	r3, [pc, #32]	@ (8013250 <_dtoa_r+0x5c8>)
 8013230:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8013234:	2200      	movs	r2, #0
 8013236:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801323a:	f7ed f9b5 	bl	80005a8 <__aeabi_dmul>
 801323e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013242:	e7c4      	b.n	80131ce <_dtoa_r+0x546>
 8013244:	08014c00 	.word	0x08014c00
 8013248:	08014bd8 	.word	0x08014bd8
 801324c:	3ff00000 	.word	0x3ff00000
 8013250:	40240000 	.word	0x40240000
 8013254:	401c0000 	.word	0x401c0000
 8013258:	40140000 	.word	0x40140000
 801325c:	3fe00000 	.word	0x3fe00000
 8013260:	4631      	mov	r1, r6
 8013262:	4628      	mov	r0, r5
 8013264:	f7ed f9a0 	bl	80005a8 <__aeabi_dmul>
 8013268:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801326c:	9415      	str	r4, [sp, #84]	@ 0x54
 801326e:	4656      	mov	r6, sl
 8013270:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013274:	f7ed fc48 	bl	8000b08 <__aeabi_d2iz>
 8013278:	4605      	mov	r5, r0
 801327a:	f7ed f92b 	bl	80004d4 <__aeabi_i2d>
 801327e:	4602      	mov	r2, r0
 8013280:	460b      	mov	r3, r1
 8013282:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013286:	f7ec ffd7 	bl	8000238 <__aeabi_dsub>
 801328a:	3530      	adds	r5, #48	@ 0x30
 801328c:	f806 5b01 	strb.w	r5, [r6], #1
 8013290:	4602      	mov	r2, r0
 8013292:	460b      	mov	r3, r1
 8013294:	42a6      	cmp	r6, r4
 8013296:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801329a:	f04f 0200 	mov.w	r2, #0
 801329e:	d124      	bne.n	80132ea <_dtoa_r+0x662>
 80132a0:	4bac      	ldr	r3, [pc, #688]	@ (8013554 <_dtoa_r+0x8cc>)
 80132a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80132a6:	f7ec ffc9 	bl	800023c <__adddf3>
 80132aa:	4602      	mov	r2, r0
 80132ac:	460b      	mov	r3, r1
 80132ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80132b2:	f7ed fc09 	bl	8000ac8 <__aeabi_dcmpgt>
 80132b6:	2800      	cmp	r0, #0
 80132b8:	d145      	bne.n	8013346 <_dtoa_r+0x6be>
 80132ba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80132be:	49a5      	ldr	r1, [pc, #660]	@ (8013554 <_dtoa_r+0x8cc>)
 80132c0:	2000      	movs	r0, #0
 80132c2:	f7ec ffb9 	bl	8000238 <__aeabi_dsub>
 80132c6:	4602      	mov	r2, r0
 80132c8:	460b      	mov	r3, r1
 80132ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80132ce:	f7ed fbdd 	bl	8000a8c <__aeabi_dcmplt>
 80132d2:	2800      	cmp	r0, #0
 80132d4:	f43f aef5 	beq.w	80130c2 <_dtoa_r+0x43a>
 80132d8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80132da:	1e73      	subs	r3, r6, #1
 80132dc:	9315      	str	r3, [sp, #84]	@ 0x54
 80132de:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80132e2:	2b30      	cmp	r3, #48	@ 0x30
 80132e4:	d0f8      	beq.n	80132d8 <_dtoa_r+0x650>
 80132e6:	9f04      	ldr	r7, [sp, #16]
 80132e8:	e73e      	b.n	8013168 <_dtoa_r+0x4e0>
 80132ea:	4b9b      	ldr	r3, [pc, #620]	@ (8013558 <_dtoa_r+0x8d0>)
 80132ec:	f7ed f95c 	bl	80005a8 <__aeabi_dmul>
 80132f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80132f4:	e7bc      	b.n	8013270 <_dtoa_r+0x5e8>
 80132f6:	d10c      	bne.n	8013312 <_dtoa_r+0x68a>
 80132f8:	4b98      	ldr	r3, [pc, #608]	@ (801355c <_dtoa_r+0x8d4>)
 80132fa:	2200      	movs	r2, #0
 80132fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013300:	f7ed f952 	bl	80005a8 <__aeabi_dmul>
 8013304:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013308:	f7ed fbd4 	bl	8000ab4 <__aeabi_dcmpge>
 801330c:	2800      	cmp	r0, #0
 801330e:	f000 8157 	beq.w	80135c0 <_dtoa_r+0x938>
 8013312:	2400      	movs	r4, #0
 8013314:	4625      	mov	r5, r4
 8013316:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013318:	43db      	mvns	r3, r3
 801331a:	9304      	str	r3, [sp, #16]
 801331c:	4656      	mov	r6, sl
 801331e:	2700      	movs	r7, #0
 8013320:	4621      	mov	r1, r4
 8013322:	4658      	mov	r0, fp
 8013324:	f000 fbb4 	bl	8013a90 <_Bfree>
 8013328:	2d00      	cmp	r5, #0
 801332a:	d0dc      	beq.n	80132e6 <_dtoa_r+0x65e>
 801332c:	b12f      	cbz	r7, 801333a <_dtoa_r+0x6b2>
 801332e:	42af      	cmp	r7, r5
 8013330:	d003      	beq.n	801333a <_dtoa_r+0x6b2>
 8013332:	4639      	mov	r1, r7
 8013334:	4658      	mov	r0, fp
 8013336:	f000 fbab 	bl	8013a90 <_Bfree>
 801333a:	4629      	mov	r1, r5
 801333c:	4658      	mov	r0, fp
 801333e:	f000 fba7 	bl	8013a90 <_Bfree>
 8013342:	e7d0      	b.n	80132e6 <_dtoa_r+0x65e>
 8013344:	9704      	str	r7, [sp, #16]
 8013346:	4633      	mov	r3, r6
 8013348:	461e      	mov	r6, r3
 801334a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801334e:	2a39      	cmp	r2, #57	@ 0x39
 8013350:	d107      	bne.n	8013362 <_dtoa_r+0x6da>
 8013352:	459a      	cmp	sl, r3
 8013354:	d1f8      	bne.n	8013348 <_dtoa_r+0x6c0>
 8013356:	9a04      	ldr	r2, [sp, #16]
 8013358:	3201      	adds	r2, #1
 801335a:	9204      	str	r2, [sp, #16]
 801335c:	2230      	movs	r2, #48	@ 0x30
 801335e:	f88a 2000 	strb.w	r2, [sl]
 8013362:	781a      	ldrb	r2, [r3, #0]
 8013364:	3201      	adds	r2, #1
 8013366:	701a      	strb	r2, [r3, #0]
 8013368:	e7bd      	b.n	80132e6 <_dtoa_r+0x65e>
 801336a:	4b7b      	ldr	r3, [pc, #492]	@ (8013558 <_dtoa_r+0x8d0>)
 801336c:	2200      	movs	r2, #0
 801336e:	f7ed f91b 	bl	80005a8 <__aeabi_dmul>
 8013372:	2200      	movs	r2, #0
 8013374:	2300      	movs	r3, #0
 8013376:	4604      	mov	r4, r0
 8013378:	460d      	mov	r5, r1
 801337a:	f7ed fb7d 	bl	8000a78 <__aeabi_dcmpeq>
 801337e:	2800      	cmp	r0, #0
 8013380:	f43f aebb 	beq.w	80130fa <_dtoa_r+0x472>
 8013384:	e6f0      	b.n	8013168 <_dtoa_r+0x4e0>
 8013386:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013388:	2a00      	cmp	r2, #0
 801338a:	f000 80db 	beq.w	8013544 <_dtoa_r+0x8bc>
 801338e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013390:	2a01      	cmp	r2, #1
 8013392:	f300 80bf 	bgt.w	8013514 <_dtoa_r+0x88c>
 8013396:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8013398:	2a00      	cmp	r2, #0
 801339a:	f000 80b7 	beq.w	801350c <_dtoa_r+0x884>
 801339e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80133a2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80133a4:	4646      	mov	r6, r8
 80133a6:	9a08      	ldr	r2, [sp, #32]
 80133a8:	2101      	movs	r1, #1
 80133aa:	441a      	add	r2, r3
 80133ac:	4658      	mov	r0, fp
 80133ae:	4498      	add	r8, r3
 80133b0:	9208      	str	r2, [sp, #32]
 80133b2:	f000 fc21 	bl	8013bf8 <__i2b>
 80133b6:	4605      	mov	r5, r0
 80133b8:	b15e      	cbz	r6, 80133d2 <_dtoa_r+0x74a>
 80133ba:	9b08      	ldr	r3, [sp, #32]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	dd08      	ble.n	80133d2 <_dtoa_r+0x74a>
 80133c0:	42b3      	cmp	r3, r6
 80133c2:	9a08      	ldr	r2, [sp, #32]
 80133c4:	bfa8      	it	ge
 80133c6:	4633      	movge	r3, r6
 80133c8:	eba8 0803 	sub.w	r8, r8, r3
 80133cc:	1af6      	subs	r6, r6, r3
 80133ce:	1ad3      	subs	r3, r2, r3
 80133d0:	9308      	str	r3, [sp, #32]
 80133d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80133d4:	b1f3      	cbz	r3, 8013414 <_dtoa_r+0x78c>
 80133d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80133d8:	2b00      	cmp	r3, #0
 80133da:	f000 80b7 	beq.w	801354c <_dtoa_r+0x8c4>
 80133de:	b18c      	cbz	r4, 8013404 <_dtoa_r+0x77c>
 80133e0:	4629      	mov	r1, r5
 80133e2:	4622      	mov	r2, r4
 80133e4:	4658      	mov	r0, fp
 80133e6:	f000 fcc7 	bl	8013d78 <__pow5mult>
 80133ea:	464a      	mov	r2, r9
 80133ec:	4601      	mov	r1, r0
 80133ee:	4605      	mov	r5, r0
 80133f0:	4658      	mov	r0, fp
 80133f2:	f000 fc17 	bl	8013c24 <__multiply>
 80133f6:	4649      	mov	r1, r9
 80133f8:	9004      	str	r0, [sp, #16]
 80133fa:	4658      	mov	r0, fp
 80133fc:	f000 fb48 	bl	8013a90 <_Bfree>
 8013400:	9b04      	ldr	r3, [sp, #16]
 8013402:	4699      	mov	r9, r3
 8013404:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013406:	1b1a      	subs	r2, r3, r4
 8013408:	d004      	beq.n	8013414 <_dtoa_r+0x78c>
 801340a:	4649      	mov	r1, r9
 801340c:	4658      	mov	r0, fp
 801340e:	f000 fcb3 	bl	8013d78 <__pow5mult>
 8013412:	4681      	mov	r9, r0
 8013414:	2101      	movs	r1, #1
 8013416:	4658      	mov	r0, fp
 8013418:	f000 fbee 	bl	8013bf8 <__i2b>
 801341c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801341e:	4604      	mov	r4, r0
 8013420:	2b00      	cmp	r3, #0
 8013422:	f000 81cf 	beq.w	80137c4 <_dtoa_r+0xb3c>
 8013426:	461a      	mov	r2, r3
 8013428:	4601      	mov	r1, r0
 801342a:	4658      	mov	r0, fp
 801342c:	f000 fca4 	bl	8013d78 <__pow5mult>
 8013430:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013432:	2b01      	cmp	r3, #1
 8013434:	4604      	mov	r4, r0
 8013436:	f300 8095 	bgt.w	8013564 <_dtoa_r+0x8dc>
 801343a:	9b02      	ldr	r3, [sp, #8]
 801343c:	2b00      	cmp	r3, #0
 801343e:	f040 8087 	bne.w	8013550 <_dtoa_r+0x8c8>
 8013442:	9b03      	ldr	r3, [sp, #12]
 8013444:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013448:	2b00      	cmp	r3, #0
 801344a:	f040 8089 	bne.w	8013560 <_dtoa_r+0x8d8>
 801344e:	9b03      	ldr	r3, [sp, #12]
 8013450:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8013454:	0d1b      	lsrs	r3, r3, #20
 8013456:	051b      	lsls	r3, r3, #20
 8013458:	b12b      	cbz	r3, 8013466 <_dtoa_r+0x7de>
 801345a:	9b08      	ldr	r3, [sp, #32]
 801345c:	3301      	adds	r3, #1
 801345e:	9308      	str	r3, [sp, #32]
 8013460:	f108 0801 	add.w	r8, r8, #1
 8013464:	2301      	movs	r3, #1
 8013466:	930a      	str	r3, [sp, #40]	@ 0x28
 8013468:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801346a:	2b00      	cmp	r3, #0
 801346c:	f000 81b0 	beq.w	80137d0 <_dtoa_r+0xb48>
 8013470:	6923      	ldr	r3, [r4, #16]
 8013472:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8013476:	6918      	ldr	r0, [r3, #16]
 8013478:	f000 fb72 	bl	8013b60 <__hi0bits>
 801347c:	f1c0 0020 	rsb	r0, r0, #32
 8013480:	9b08      	ldr	r3, [sp, #32]
 8013482:	4418      	add	r0, r3
 8013484:	f010 001f 	ands.w	r0, r0, #31
 8013488:	d077      	beq.n	801357a <_dtoa_r+0x8f2>
 801348a:	f1c0 0320 	rsb	r3, r0, #32
 801348e:	2b04      	cmp	r3, #4
 8013490:	dd6b      	ble.n	801356a <_dtoa_r+0x8e2>
 8013492:	9b08      	ldr	r3, [sp, #32]
 8013494:	f1c0 001c 	rsb	r0, r0, #28
 8013498:	4403      	add	r3, r0
 801349a:	4480      	add	r8, r0
 801349c:	4406      	add	r6, r0
 801349e:	9308      	str	r3, [sp, #32]
 80134a0:	f1b8 0f00 	cmp.w	r8, #0
 80134a4:	dd05      	ble.n	80134b2 <_dtoa_r+0x82a>
 80134a6:	4649      	mov	r1, r9
 80134a8:	4642      	mov	r2, r8
 80134aa:	4658      	mov	r0, fp
 80134ac:	f000 fcbe 	bl	8013e2c <__lshift>
 80134b0:	4681      	mov	r9, r0
 80134b2:	9b08      	ldr	r3, [sp, #32]
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	dd05      	ble.n	80134c4 <_dtoa_r+0x83c>
 80134b8:	4621      	mov	r1, r4
 80134ba:	461a      	mov	r2, r3
 80134bc:	4658      	mov	r0, fp
 80134be:	f000 fcb5 	bl	8013e2c <__lshift>
 80134c2:	4604      	mov	r4, r0
 80134c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d059      	beq.n	801357e <_dtoa_r+0x8f6>
 80134ca:	4621      	mov	r1, r4
 80134cc:	4648      	mov	r0, r9
 80134ce:	f000 fd19 	bl	8013f04 <__mcmp>
 80134d2:	2800      	cmp	r0, #0
 80134d4:	da53      	bge.n	801357e <_dtoa_r+0x8f6>
 80134d6:	1e7b      	subs	r3, r7, #1
 80134d8:	9304      	str	r3, [sp, #16]
 80134da:	4649      	mov	r1, r9
 80134dc:	2300      	movs	r3, #0
 80134de:	220a      	movs	r2, #10
 80134e0:	4658      	mov	r0, fp
 80134e2:	f000 faf7 	bl	8013ad4 <__multadd>
 80134e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80134e8:	4681      	mov	r9, r0
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	f000 8172 	beq.w	80137d4 <_dtoa_r+0xb4c>
 80134f0:	2300      	movs	r3, #0
 80134f2:	4629      	mov	r1, r5
 80134f4:	220a      	movs	r2, #10
 80134f6:	4658      	mov	r0, fp
 80134f8:	f000 faec 	bl	8013ad4 <__multadd>
 80134fc:	9b00      	ldr	r3, [sp, #0]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	4605      	mov	r5, r0
 8013502:	dc67      	bgt.n	80135d4 <_dtoa_r+0x94c>
 8013504:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013506:	2b02      	cmp	r3, #2
 8013508:	dc41      	bgt.n	801358e <_dtoa_r+0x906>
 801350a:	e063      	b.n	80135d4 <_dtoa_r+0x94c>
 801350c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801350e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8013512:	e746      	b.n	80133a2 <_dtoa_r+0x71a>
 8013514:	9b07      	ldr	r3, [sp, #28]
 8013516:	1e5c      	subs	r4, r3, #1
 8013518:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801351a:	42a3      	cmp	r3, r4
 801351c:	bfbf      	itttt	lt
 801351e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8013520:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8013522:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8013524:	1ae3      	sublt	r3, r4, r3
 8013526:	bfb4      	ite	lt
 8013528:	18d2      	addlt	r2, r2, r3
 801352a:	1b1c      	subge	r4, r3, r4
 801352c:	9b07      	ldr	r3, [sp, #28]
 801352e:	bfbc      	itt	lt
 8013530:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8013532:	2400      	movlt	r4, #0
 8013534:	2b00      	cmp	r3, #0
 8013536:	bfb5      	itete	lt
 8013538:	eba8 0603 	sublt.w	r6, r8, r3
 801353c:	9b07      	ldrge	r3, [sp, #28]
 801353e:	2300      	movlt	r3, #0
 8013540:	4646      	movge	r6, r8
 8013542:	e730      	b.n	80133a6 <_dtoa_r+0x71e>
 8013544:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8013546:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8013548:	4646      	mov	r6, r8
 801354a:	e735      	b.n	80133b8 <_dtoa_r+0x730>
 801354c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801354e:	e75c      	b.n	801340a <_dtoa_r+0x782>
 8013550:	2300      	movs	r3, #0
 8013552:	e788      	b.n	8013466 <_dtoa_r+0x7de>
 8013554:	3fe00000 	.word	0x3fe00000
 8013558:	40240000 	.word	0x40240000
 801355c:	40140000 	.word	0x40140000
 8013560:	9b02      	ldr	r3, [sp, #8]
 8013562:	e780      	b.n	8013466 <_dtoa_r+0x7de>
 8013564:	2300      	movs	r3, #0
 8013566:	930a      	str	r3, [sp, #40]	@ 0x28
 8013568:	e782      	b.n	8013470 <_dtoa_r+0x7e8>
 801356a:	d099      	beq.n	80134a0 <_dtoa_r+0x818>
 801356c:	9a08      	ldr	r2, [sp, #32]
 801356e:	331c      	adds	r3, #28
 8013570:	441a      	add	r2, r3
 8013572:	4498      	add	r8, r3
 8013574:	441e      	add	r6, r3
 8013576:	9208      	str	r2, [sp, #32]
 8013578:	e792      	b.n	80134a0 <_dtoa_r+0x818>
 801357a:	4603      	mov	r3, r0
 801357c:	e7f6      	b.n	801356c <_dtoa_r+0x8e4>
 801357e:	9b07      	ldr	r3, [sp, #28]
 8013580:	9704      	str	r7, [sp, #16]
 8013582:	2b00      	cmp	r3, #0
 8013584:	dc20      	bgt.n	80135c8 <_dtoa_r+0x940>
 8013586:	9300      	str	r3, [sp, #0]
 8013588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801358a:	2b02      	cmp	r3, #2
 801358c:	dd1e      	ble.n	80135cc <_dtoa_r+0x944>
 801358e:	9b00      	ldr	r3, [sp, #0]
 8013590:	2b00      	cmp	r3, #0
 8013592:	f47f aec0 	bne.w	8013316 <_dtoa_r+0x68e>
 8013596:	4621      	mov	r1, r4
 8013598:	2205      	movs	r2, #5
 801359a:	4658      	mov	r0, fp
 801359c:	f000 fa9a 	bl	8013ad4 <__multadd>
 80135a0:	4601      	mov	r1, r0
 80135a2:	4604      	mov	r4, r0
 80135a4:	4648      	mov	r0, r9
 80135a6:	f000 fcad 	bl	8013f04 <__mcmp>
 80135aa:	2800      	cmp	r0, #0
 80135ac:	f77f aeb3 	ble.w	8013316 <_dtoa_r+0x68e>
 80135b0:	4656      	mov	r6, sl
 80135b2:	2331      	movs	r3, #49	@ 0x31
 80135b4:	f806 3b01 	strb.w	r3, [r6], #1
 80135b8:	9b04      	ldr	r3, [sp, #16]
 80135ba:	3301      	adds	r3, #1
 80135bc:	9304      	str	r3, [sp, #16]
 80135be:	e6ae      	b.n	801331e <_dtoa_r+0x696>
 80135c0:	9c07      	ldr	r4, [sp, #28]
 80135c2:	9704      	str	r7, [sp, #16]
 80135c4:	4625      	mov	r5, r4
 80135c6:	e7f3      	b.n	80135b0 <_dtoa_r+0x928>
 80135c8:	9b07      	ldr	r3, [sp, #28]
 80135ca:	9300      	str	r3, [sp, #0]
 80135cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	f000 8104 	beq.w	80137dc <_dtoa_r+0xb54>
 80135d4:	2e00      	cmp	r6, #0
 80135d6:	dd05      	ble.n	80135e4 <_dtoa_r+0x95c>
 80135d8:	4629      	mov	r1, r5
 80135da:	4632      	mov	r2, r6
 80135dc:	4658      	mov	r0, fp
 80135de:	f000 fc25 	bl	8013e2c <__lshift>
 80135e2:	4605      	mov	r5, r0
 80135e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d05a      	beq.n	80136a0 <_dtoa_r+0xa18>
 80135ea:	6869      	ldr	r1, [r5, #4]
 80135ec:	4658      	mov	r0, fp
 80135ee:	f000 fa0f 	bl	8013a10 <_Balloc>
 80135f2:	4606      	mov	r6, r0
 80135f4:	b928      	cbnz	r0, 8013602 <_dtoa_r+0x97a>
 80135f6:	4b84      	ldr	r3, [pc, #528]	@ (8013808 <_dtoa_r+0xb80>)
 80135f8:	4602      	mov	r2, r0
 80135fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80135fe:	f7ff bb5a 	b.w	8012cb6 <_dtoa_r+0x2e>
 8013602:	692a      	ldr	r2, [r5, #16]
 8013604:	3202      	adds	r2, #2
 8013606:	0092      	lsls	r2, r2, #2
 8013608:	f105 010c 	add.w	r1, r5, #12
 801360c:	300c      	adds	r0, #12
 801360e:	f7ff faa4 	bl	8012b5a <memcpy>
 8013612:	2201      	movs	r2, #1
 8013614:	4631      	mov	r1, r6
 8013616:	4658      	mov	r0, fp
 8013618:	f000 fc08 	bl	8013e2c <__lshift>
 801361c:	f10a 0301 	add.w	r3, sl, #1
 8013620:	9307      	str	r3, [sp, #28]
 8013622:	9b00      	ldr	r3, [sp, #0]
 8013624:	4453      	add	r3, sl
 8013626:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013628:	9b02      	ldr	r3, [sp, #8]
 801362a:	f003 0301 	and.w	r3, r3, #1
 801362e:	462f      	mov	r7, r5
 8013630:	930a      	str	r3, [sp, #40]	@ 0x28
 8013632:	4605      	mov	r5, r0
 8013634:	9b07      	ldr	r3, [sp, #28]
 8013636:	4621      	mov	r1, r4
 8013638:	3b01      	subs	r3, #1
 801363a:	4648      	mov	r0, r9
 801363c:	9300      	str	r3, [sp, #0]
 801363e:	f7ff fa9a 	bl	8012b76 <quorem>
 8013642:	4639      	mov	r1, r7
 8013644:	9002      	str	r0, [sp, #8]
 8013646:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801364a:	4648      	mov	r0, r9
 801364c:	f000 fc5a 	bl	8013f04 <__mcmp>
 8013650:	462a      	mov	r2, r5
 8013652:	9008      	str	r0, [sp, #32]
 8013654:	4621      	mov	r1, r4
 8013656:	4658      	mov	r0, fp
 8013658:	f000 fc70 	bl	8013f3c <__mdiff>
 801365c:	68c2      	ldr	r2, [r0, #12]
 801365e:	4606      	mov	r6, r0
 8013660:	bb02      	cbnz	r2, 80136a4 <_dtoa_r+0xa1c>
 8013662:	4601      	mov	r1, r0
 8013664:	4648      	mov	r0, r9
 8013666:	f000 fc4d 	bl	8013f04 <__mcmp>
 801366a:	4602      	mov	r2, r0
 801366c:	4631      	mov	r1, r6
 801366e:	4658      	mov	r0, fp
 8013670:	920e      	str	r2, [sp, #56]	@ 0x38
 8013672:	f000 fa0d 	bl	8013a90 <_Bfree>
 8013676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013678:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801367a:	9e07      	ldr	r6, [sp, #28]
 801367c:	ea43 0102 	orr.w	r1, r3, r2
 8013680:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013682:	4319      	orrs	r1, r3
 8013684:	d110      	bne.n	80136a8 <_dtoa_r+0xa20>
 8013686:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801368a:	d029      	beq.n	80136e0 <_dtoa_r+0xa58>
 801368c:	9b08      	ldr	r3, [sp, #32]
 801368e:	2b00      	cmp	r3, #0
 8013690:	dd02      	ble.n	8013698 <_dtoa_r+0xa10>
 8013692:	9b02      	ldr	r3, [sp, #8]
 8013694:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8013698:	9b00      	ldr	r3, [sp, #0]
 801369a:	f883 8000 	strb.w	r8, [r3]
 801369e:	e63f      	b.n	8013320 <_dtoa_r+0x698>
 80136a0:	4628      	mov	r0, r5
 80136a2:	e7bb      	b.n	801361c <_dtoa_r+0x994>
 80136a4:	2201      	movs	r2, #1
 80136a6:	e7e1      	b.n	801366c <_dtoa_r+0x9e4>
 80136a8:	9b08      	ldr	r3, [sp, #32]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	db04      	blt.n	80136b8 <_dtoa_r+0xa30>
 80136ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80136b0:	430b      	orrs	r3, r1
 80136b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80136b4:	430b      	orrs	r3, r1
 80136b6:	d120      	bne.n	80136fa <_dtoa_r+0xa72>
 80136b8:	2a00      	cmp	r2, #0
 80136ba:	dded      	ble.n	8013698 <_dtoa_r+0xa10>
 80136bc:	4649      	mov	r1, r9
 80136be:	2201      	movs	r2, #1
 80136c0:	4658      	mov	r0, fp
 80136c2:	f000 fbb3 	bl	8013e2c <__lshift>
 80136c6:	4621      	mov	r1, r4
 80136c8:	4681      	mov	r9, r0
 80136ca:	f000 fc1b 	bl	8013f04 <__mcmp>
 80136ce:	2800      	cmp	r0, #0
 80136d0:	dc03      	bgt.n	80136da <_dtoa_r+0xa52>
 80136d2:	d1e1      	bne.n	8013698 <_dtoa_r+0xa10>
 80136d4:	f018 0f01 	tst.w	r8, #1
 80136d8:	d0de      	beq.n	8013698 <_dtoa_r+0xa10>
 80136da:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80136de:	d1d8      	bne.n	8013692 <_dtoa_r+0xa0a>
 80136e0:	9a00      	ldr	r2, [sp, #0]
 80136e2:	2339      	movs	r3, #57	@ 0x39
 80136e4:	7013      	strb	r3, [r2, #0]
 80136e6:	4633      	mov	r3, r6
 80136e8:	461e      	mov	r6, r3
 80136ea:	3b01      	subs	r3, #1
 80136ec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80136f0:	2a39      	cmp	r2, #57	@ 0x39
 80136f2:	d052      	beq.n	801379a <_dtoa_r+0xb12>
 80136f4:	3201      	adds	r2, #1
 80136f6:	701a      	strb	r2, [r3, #0]
 80136f8:	e612      	b.n	8013320 <_dtoa_r+0x698>
 80136fa:	2a00      	cmp	r2, #0
 80136fc:	dd07      	ble.n	801370e <_dtoa_r+0xa86>
 80136fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8013702:	d0ed      	beq.n	80136e0 <_dtoa_r+0xa58>
 8013704:	9a00      	ldr	r2, [sp, #0]
 8013706:	f108 0301 	add.w	r3, r8, #1
 801370a:	7013      	strb	r3, [r2, #0]
 801370c:	e608      	b.n	8013320 <_dtoa_r+0x698>
 801370e:	9b07      	ldr	r3, [sp, #28]
 8013710:	9a07      	ldr	r2, [sp, #28]
 8013712:	f803 8c01 	strb.w	r8, [r3, #-1]
 8013716:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013718:	4293      	cmp	r3, r2
 801371a:	d028      	beq.n	801376e <_dtoa_r+0xae6>
 801371c:	4649      	mov	r1, r9
 801371e:	2300      	movs	r3, #0
 8013720:	220a      	movs	r2, #10
 8013722:	4658      	mov	r0, fp
 8013724:	f000 f9d6 	bl	8013ad4 <__multadd>
 8013728:	42af      	cmp	r7, r5
 801372a:	4681      	mov	r9, r0
 801372c:	f04f 0300 	mov.w	r3, #0
 8013730:	f04f 020a 	mov.w	r2, #10
 8013734:	4639      	mov	r1, r7
 8013736:	4658      	mov	r0, fp
 8013738:	d107      	bne.n	801374a <_dtoa_r+0xac2>
 801373a:	f000 f9cb 	bl	8013ad4 <__multadd>
 801373e:	4607      	mov	r7, r0
 8013740:	4605      	mov	r5, r0
 8013742:	9b07      	ldr	r3, [sp, #28]
 8013744:	3301      	adds	r3, #1
 8013746:	9307      	str	r3, [sp, #28]
 8013748:	e774      	b.n	8013634 <_dtoa_r+0x9ac>
 801374a:	f000 f9c3 	bl	8013ad4 <__multadd>
 801374e:	4629      	mov	r1, r5
 8013750:	4607      	mov	r7, r0
 8013752:	2300      	movs	r3, #0
 8013754:	220a      	movs	r2, #10
 8013756:	4658      	mov	r0, fp
 8013758:	f000 f9bc 	bl	8013ad4 <__multadd>
 801375c:	4605      	mov	r5, r0
 801375e:	e7f0      	b.n	8013742 <_dtoa_r+0xaba>
 8013760:	9b00      	ldr	r3, [sp, #0]
 8013762:	2b00      	cmp	r3, #0
 8013764:	bfcc      	ite	gt
 8013766:	461e      	movgt	r6, r3
 8013768:	2601      	movle	r6, #1
 801376a:	4456      	add	r6, sl
 801376c:	2700      	movs	r7, #0
 801376e:	4649      	mov	r1, r9
 8013770:	2201      	movs	r2, #1
 8013772:	4658      	mov	r0, fp
 8013774:	f000 fb5a 	bl	8013e2c <__lshift>
 8013778:	4621      	mov	r1, r4
 801377a:	4681      	mov	r9, r0
 801377c:	f000 fbc2 	bl	8013f04 <__mcmp>
 8013780:	2800      	cmp	r0, #0
 8013782:	dcb0      	bgt.n	80136e6 <_dtoa_r+0xa5e>
 8013784:	d102      	bne.n	801378c <_dtoa_r+0xb04>
 8013786:	f018 0f01 	tst.w	r8, #1
 801378a:	d1ac      	bne.n	80136e6 <_dtoa_r+0xa5e>
 801378c:	4633      	mov	r3, r6
 801378e:	461e      	mov	r6, r3
 8013790:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013794:	2a30      	cmp	r2, #48	@ 0x30
 8013796:	d0fa      	beq.n	801378e <_dtoa_r+0xb06>
 8013798:	e5c2      	b.n	8013320 <_dtoa_r+0x698>
 801379a:	459a      	cmp	sl, r3
 801379c:	d1a4      	bne.n	80136e8 <_dtoa_r+0xa60>
 801379e:	9b04      	ldr	r3, [sp, #16]
 80137a0:	3301      	adds	r3, #1
 80137a2:	9304      	str	r3, [sp, #16]
 80137a4:	2331      	movs	r3, #49	@ 0x31
 80137a6:	f88a 3000 	strb.w	r3, [sl]
 80137aa:	e5b9      	b.n	8013320 <_dtoa_r+0x698>
 80137ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80137ae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801380c <_dtoa_r+0xb84>
 80137b2:	b11b      	cbz	r3, 80137bc <_dtoa_r+0xb34>
 80137b4:	f10a 0308 	add.w	r3, sl, #8
 80137b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80137ba:	6013      	str	r3, [r2, #0]
 80137bc:	4650      	mov	r0, sl
 80137be:	b019      	add	sp, #100	@ 0x64
 80137c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80137c6:	2b01      	cmp	r3, #1
 80137c8:	f77f ae37 	ble.w	801343a <_dtoa_r+0x7b2>
 80137cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80137ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80137d0:	2001      	movs	r0, #1
 80137d2:	e655      	b.n	8013480 <_dtoa_r+0x7f8>
 80137d4:	9b00      	ldr	r3, [sp, #0]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	f77f aed6 	ble.w	8013588 <_dtoa_r+0x900>
 80137dc:	4656      	mov	r6, sl
 80137de:	4621      	mov	r1, r4
 80137e0:	4648      	mov	r0, r9
 80137e2:	f7ff f9c8 	bl	8012b76 <quorem>
 80137e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80137ea:	f806 8b01 	strb.w	r8, [r6], #1
 80137ee:	9b00      	ldr	r3, [sp, #0]
 80137f0:	eba6 020a 	sub.w	r2, r6, sl
 80137f4:	4293      	cmp	r3, r2
 80137f6:	ddb3      	ble.n	8013760 <_dtoa_r+0xad8>
 80137f8:	4649      	mov	r1, r9
 80137fa:	2300      	movs	r3, #0
 80137fc:	220a      	movs	r2, #10
 80137fe:	4658      	mov	r0, fp
 8013800:	f000 f968 	bl	8013ad4 <__multadd>
 8013804:	4681      	mov	r9, r0
 8013806:	e7ea      	b.n	80137de <_dtoa_r+0xb56>
 8013808:	08014b5c 	.word	0x08014b5c
 801380c:	08014ae0 	.word	0x08014ae0

08013810 <_free_r>:
 8013810:	b538      	push	{r3, r4, r5, lr}
 8013812:	4605      	mov	r5, r0
 8013814:	2900      	cmp	r1, #0
 8013816:	d041      	beq.n	801389c <_free_r+0x8c>
 8013818:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801381c:	1f0c      	subs	r4, r1, #4
 801381e:	2b00      	cmp	r3, #0
 8013820:	bfb8      	it	lt
 8013822:	18e4      	addlt	r4, r4, r3
 8013824:	f000 f8e8 	bl	80139f8 <__malloc_lock>
 8013828:	4a1d      	ldr	r2, [pc, #116]	@ (80138a0 <_free_r+0x90>)
 801382a:	6813      	ldr	r3, [r2, #0]
 801382c:	b933      	cbnz	r3, 801383c <_free_r+0x2c>
 801382e:	6063      	str	r3, [r4, #4]
 8013830:	6014      	str	r4, [r2, #0]
 8013832:	4628      	mov	r0, r5
 8013834:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013838:	f000 b8e4 	b.w	8013a04 <__malloc_unlock>
 801383c:	42a3      	cmp	r3, r4
 801383e:	d908      	bls.n	8013852 <_free_r+0x42>
 8013840:	6820      	ldr	r0, [r4, #0]
 8013842:	1821      	adds	r1, r4, r0
 8013844:	428b      	cmp	r3, r1
 8013846:	bf01      	itttt	eq
 8013848:	6819      	ldreq	r1, [r3, #0]
 801384a:	685b      	ldreq	r3, [r3, #4]
 801384c:	1809      	addeq	r1, r1, r0
 801384e:	6021      	streq	r1, [r4, #0]
 8013850:	e7ed      	b.n	801382e <_free_r+0x1e>
 8013852:	461a      	mov	r2, r3
 8013854:	685b      	ldr	r3, [r3, #4]
 8013856:	b10b      	cbz	r3, 801385c <_free_r+0x4c>
 8013858:	42a3      	cmp	r3, r4
 801385a:	d9fa      	bls.n	8013852 <_free_r+0x42>
 801385c:	6811      	ldr	r1, [r2, #0]
 801385e:	1850      	adds	r0, r2, r1
 8013860:	42a0      	cmp	r0, r4
 8013862:	d10b      	bne.n	801387c <_free_r+0x6c>
 8013864:	6820      	ldr	r0, [r4, #0]
 8013866:	4401      	add	r1, r0
 8013868:	1850      	adds	r0, r2, r1
 801386a:	4283      	cmp	r3, r0
 801386c:	6011      	str	r1, [r2, #0]
 801386e:	d1e0      	bne.n	8013832 <_free_r+0x22>
 8013870:	6818      	ldr	r0, [r3, #0]
 8013872:	685b      	ldr	r3, [r3, #4]
 8013874:	6053      	str	r3, [r2, #4]
 8013876:	4408      	add	r0, r1
 8013878:	6010      	str	r0, [r2, #0]
 801387a:	e7da      	b.n	8013832 <_free_r+0x22>
 801387c:	d902      	bls.n	8013884 <_free_r+0x74>
 801387e:	230c      	movs	r3, #12
 8013880:	602b      	str	r3, [r5, #0]
 8013882:	e7d6      	b.n	8013832 <_free_r+0x22>
 8013884:	6820      	ldr	r0, [r4, #0]
 8013886:	1821      	adds	r1, r4, r0
 8013888:	428b      	cmp	r3, r1
 801388a:	bf04      	itt	eq
 801388c:	6819      	ldreq	r1, [r3, #0]
 801388e:	685b      	ldreq	r3, [r3, #4]
 8013890:	6063      	str	r3, [r4, #4]
 8013892:	bf04      	itt	eq
 8013894:	1809      	addeq	r1, r1, r0
 8013896:	6021      	streq	r1, [r4, #0]
 8013898:	6054      	str	r4, [r2, #4]
 801389a:	e7ca      	b.n	8013832 <_free_r+0x22>
 801389c:	bd38      	pop	{r3, r4, r5, pc}
 801389e:	bf00      	nop
 80138a0:	200022e8 	.word	0x200022e8

080138a4 <malloc>:
 80138a4:	4b02      	ldr	r3, [pc, #8]	@ (80138b0 <malloc+0xc>)
 80138a6:	4601      	mov	r1, r0
 80138a8:	6818      	ldr	r0, [r3, #0]
 80138aa:	f000 b825 	b.w	80138f8 <_malloc_r>
 80138ae:	bf00      	nop
 80138b0:	20000134 	.word	0x20000134

080138b4 <sbrk_aligned>:
 80138b4:	b570      	push	{r4, r5, r6, lr}
 80138b6:	4e0f      	ldr	r6, [pc, #60]	@ (80138f4 <sbrk_aligned+0x40>)
 80138b8:	460c      	mov	r4, r1
 80138ba:	6831      	ldr	r1, [r6, #0]
 80138bc:	4605      	mov	r5, r0
 80138be:	b911      	cbnz	r1, 80138c6 <sbrk_aligned+0x12>
 80138c0:	f000 fede 	bl	8014680 <_sbrk_r>
 80138c4:	6030      	str	r0, [r6, #0]
 80138c6:	4621      	mov	r1, r4
 80138c8:	4628      	mov	r0, r5
 80138ca:	f000 fed9 	bl	8014680 <_sbrk_r>
 80138ce:	1c43      	adds	r3, r0, #1
 80138d0:	d103      	bne.n	80138da <sbrk_aligned+0x26>
 80138d2:	f04f 34ff 	mov.w	r4, #4294967295
 80138d6:	4620      	mov	r0, r4
 80138d8:	bd70      	pop	{r4, r5, r6, pc}
 80138da:	1cc4      	adds	r4, r0, #3
 80138dc:	f024 0403 	bic.w	r4, r4, #3
 80138e0:	42a0      	cmp	r0, r4
 80138e2:	d0f8      	beq.n	80138d6 <sbrk_aligned+0x22>
 80138e4:	1a21      	subs	r1, r4, r0
 80138e6:	4628      	mov	r0, r5
 80138e8:	f000 feca 	bl	8014680 <_sbrk_r>
 80138ec:	3001      	adds	r0, #1
 80138ee:	d1f2      	bne.n	80138d6 <sbrk_aligned+0x22>
 80138f0:	e7ef      	b.n	80138d2 <sbrk_aligned+0x1e>
 80138f2:	bf00      	nop
 80138f4:	200022e4 	.word	0x200022e4

080138f8 <_malloc_r>:
 80138f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80138fc:	1ccd      	adds	r5, r1, #3
 80138fe:	f025 0503 	bic.w	r5, r5, #3
 8013902:	3508      	adds	r5, #8
 8013904:	2d0c      	cmp	r5, #12
 8013906:	bf38      	it	cc
 8013908:	250c      	movcc	r5, #12
 801390a:	2d00      	cmp	r5, #0
 801390c:	4606      	mov	r6, r0
 801390e:	db01      	blt.n	8013914 <_malloc_r+0x1c>
 8013910:	42a9      	cmp	r1, r5
 8013912:	d904      	bls.n	801391e <_malloc_r+0x26>
 8013914:	230c      	movs	r3, #12
 8013916:	6033      	str	r3, [r6, #0]
 8013918:	2000      	movs	r0, #0
 801391a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801391e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80139f4 <_malloc_r+0xfc>
 8013922:	f000 f869 	bl	80139f8 <__malloc_lock>
 8013926:	f8d8 3000 	ldr.w	r3, [r8]
 801392a:	461c      	mov	r4, r3
 801392c:	bb44      	cbnz	r4, 8013980 <_malloc_r+0x88>
 801392e:	4629      	mov	r1, r5
 8013930:	4630      	mov	r0, r6
 8013932:	f7ff ffbf 	bl	80138b4 <sbrk_aligned>
 8013936:	1c43      	adds	r3, r0, #1
 8013938:	4604      	mov	r4, r0
 801393a:	d158      	bne.n	80139ee <_malloc_r+0xf6>
 801393c:	f8d8 4000 	ldr.w	r4, [r8]
 8013940:	4627      	mov	r7, r4
 8013942:	2f00      	cmp	r7, #0
 8013944:	d143      	bne.n	80139ce <_malloc_r+0xd6>
 8013946:	2c00      	cmp	r4, #0
 8013948:	d04b      	beq.n	80139e2 <_malloc_r+0xea>
 801394a:	6823      	ldr	r3, [r4, #0]
 801394c:	4639      	mov	r1, r7
 801394e:	4630      	mov	r0, r6
 8013950:	eb04 0903 	add.w	r9, r4, r3
 8013954:	f000 fe94 	bl	8014680 <_sbrk_r>
 8013958:	4581      	cmp	r9, r0
 801395a:	d142      	bne.n	80139e2 <_malloc_r+0xea>
 801395c:	6821      	ldr	r1, [r4, #0]
 801395e:	1a6d      	subs	r5, r5, r1
 8013960:	4629      	mov	r1, r5
 8013962:	4630      	mov	r0, r6
 8013964:	f7ff ffa6 	bl	80138b4 <sbrk_aligned>
 8013968:	3001      	adds	r0, #1
 801396a:	d03a      	beq.n	80139e2 <_malloc_r+0xea>
 801396c:	6823      	ldr	r3, [r4, #0]
 801396e:	442b      	add	r3, r5
 8013970:	6023      	str	r3, [r4, #0]
 8013972:	f8d8 3000 	ldr.w	r3, [r8]
 8013976:	685a      	ldr	r2, [r3, #4]
 8013978:	bb62      	cbnz	r2, 80139d4 <_malloc_r+0xdc>
 801397a:	f8c8 7000 	str.w	r7, [r8]
 801397e:	e00f      	b.n	80139a0 <_malloc_r+0xa8>
 8013980:	6822      	ldr	r2, [r4, #0]
 8013982:	1b52      	subs	r2, r2, r5
 8013984:	d420      	bmi.n	80139c8 <_malloc_r+0xd0>
 8013986:	2a0b      	cmp	r2, #11
 8013988:	d917      	bls.n	80139ba <_malloc_r+0xc2>
 801398a:	1961      	adds	r1, r4, r5
 801398c:	42a3      	cmp	r3, r4
 801398e:	6025      	str	r5, [r4, #0]
 8013990:	bf18      	it	ne
 8013992:	6059      	strne	r1, [r3, #4]
 8013994:	6863      	ldr	r3, [r4, #4]
 8013996:	bf08      	it	eq
 8013998:	f8c8 1000 	streq.w	r1, [r8]
 801399c:	5162      	str	r2, [r4, r5]
 801399e:	604b      	str	r3, [r1, #4]
 80139a0:	4630      	mov	r0, r6
 80139a2:	f000 f82f 	bl	8013a04 <__malloc_unlock>
 80139a6:	f104 000b 	add.w	r0, r4, #11
 80139aa:	1d23      	adds	r3, r4, #4
 80139ac:	f020 0007 	bic.w	r0, r0, #7
 80139b0:	1ac2      	subs	r2, r0, r3
 80139b2:	bf1c      	itt	ne
 80139b4:	1a1b      	subne	r3, r3, r0
 80139b6:	50a3      	strne	r3, [r4, r2]
 80139b8:	e7af      	b.n	801391a <_malloc_r+0x22>
 80139ba:	6862      	ldr	r2, [r4, #4]
 80139bc:	42a3      	cmp	r3, r4
 80139be:	bf0c      	ite	eq
 80139c0:	f8c8 2000 	streq.w	r2, [r8]
 80139c4:	605a      	strne	r2, [r3, #4]
 80139c6:	e7eb      	b.n	80139a0 <_malloc_r+0xa8>
 80139c8:	4623      	mov	r3, r4
 80139ca:	6864      	ldr	r4, [r4, #4]
 80139cc:	e7ae      	b.n	801392c <_malloc_r+0x34>
 80139ce:	463c      	mov	r4, r7
 80139d0:	687f      	ldr	r7, [r7, #4]
 80139d2:	e7b6      	b.n	8013942 <_malloc_r+0x4a>
 80139d4:	461a      	mov	r2, r3
 80139d6:	685b      	ldr	r3, [r3, #4]
 80139d8:	42a3      	cmp	r3, r4
 80139da:	d1fb      	bne.n	80139d4 <_malloc_r+0xdc>
 80139dc:	2300      	movs	r3, #0
 80139de:	6053      	str	r3, [r2, #4]
 80139e0:	e7de      	b.n	80139a0 <_malloc_r+0xa8>
 80139e2:	230c      	movs	r3, #12
 80139e4:	6033      	str	r3, [r6, #0]
 80139e6:	4630      	mov	r0, r6
 80139e8:	f000 f80c 	bl	8013a04 <__malloc_unlock>
 80139ec:	e794      	b.n	8013918 <_malloc_r+0x20>
 80139ee:	6005      	str	r5, [r0, #0]
 80139f0:	e7d6      	b.n	80139a0 <_malloc_r+0xa8>
 80139f2:	bf00      	nop
 80139f4:	200022e8 	.word	0x200022e8

080139f8 <__malloc_lock>:
 80139f8:	4801      	ldr	r0, [pc, #4]	@ (8013a00 <__malloc_lock+0x8>)
 80139fa:	f7ff b8ac 	b.w	8012b56 <__retarget_lock_acquire_recursive>
 80139fe:	bf00      	nop
 8013a00:	200022e0 	.word	0x200022e0

08013a04 <__malloc_unlock>:
 8013a04:	4801      	ldr	r0, [pc, #4]	@ (8013a0c <__malloc_unlock+0x8>)
 8013a06:	f7ff b8a7 	b.w	8012b58 <__retarget_lock_release_recursive>
 8013a0a:	bf00      	nop
 8013a0c:	200022e0 	.word	0x200022e0

08013a10 <_Balloc>:
 8013a10:	b570      	push	{r4, r5, r6, lr}
 8013a12:	69c6      	ldr	r6, [r0, #28]
 8013a14:	4604      	mov	r4, r0
 8013a16:	460d      	mov	r5, r1
 8013a18:	b976      	cbnz	r6, 8013a38 <_Balloc+0x28>
 8013a1a:	2010      	movs	r0, #16
 8013a1c:	f7ff ff42 	bl	80138a4 <malloc>
 8013a20:	4602      	mov	r2, r0
 8013a22:	61e0      	str	r0, [r4, #28]
 8013a24:	b920      	cbnz	r0, 8013a30 <_Balloc+0x20>
 8013a26:	4b18      	ldr	r3, [pc, #96]	@ (8013a88 <_Balloc+0x78>)
 8013a28:	4818      	ldr	r0, [pc, #96]	@ (8013a8c <_Balloc+0x7c>)
 8013a2a:	216b      	movs	r1, #107	@ 0x6b
 8013a2c:	f000 fe38 	bl	80146a0 <__assert_func>
 8013a30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013a34:	6006      	str	r6, [r0, #0]
 8013a36:	60c6      	str	r6, [r0, #12]
 8013a38:	69e6      	ldr	r6, [r4, #28]
 8013a3a:	68f3      	ldr	r3, [r6, #12]
 8013a3c:	b183      	cbz	r3, 8013a60 <_Balloc+0x50>
 8013a3e:	69e3      	ldr	r3, [r4, #28]
 8013a40:	68db      	ldr	r3, [r3, #12]
 8013a42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013a46:	b9b8      	cbnz	r0, 8013a78 <_Balloc+0x68>
 8013a48:	2101      	movs	r1, #1
 8013a4a:	fa01 f605 	lsl.w	r6, r1, r5
 8013a4e:	1d72      	adds	r2, r6, #5
 8013a50:	0092      	lsls	r2, r2, #2
 8013a52:	4620      	mov	r0, r4
 8013a54:	f000 fe42 	bl	80146dc <_calloc_r>
 8013a58:	b160      	cbz	r0, 8013a74 <_Balloc+0x64>
 8013a5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013a5e:	e00e      	b.n	8013a7e <_Balloc+0x6e>
 8013a60:	2221      	movs	r2, #33	@ 0x21
 8013a62:	2104      	movs	r1, #4
 8013a64:	4620      	mov	r0, r4
 8013a66:	f000 fe39 	bl	80146dc <_calloc_r>
 8013a6a:	69e3      	ldr	r3, [r4, #28]
 8013a6c:	60f0      	str	r0, [r6, #12]
 8013a6e:	68db      	ldr	r3, [r3, #12]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d1e4      	bne.n	8013a3e <_Balloc+0x2e>
 8013a74:	2000      	movs	r0, #0
 8013a76:	bd70      	pop	{r4, r5, r6, pc}
 8013a78:	6802      	ldr	r2, [r0, #0]
 8013a7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013a7e:	2300      	movs	r3, #0
 8013a80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013a84:	e7f7      	b.n	8013a76 <_Balloc+0x66>
 8013a86:	bf00      	nop
 8013a88:	08014aed 	.word	0x08014aed
 8013a8c:	08014b6d 	.word	0x08014b6d

08013a90 <_Bfree>:
 8013a90:	b570      	push	{r4, r5, r6, lr}
 8013a92:	69c6      	ldr	r6, [r0, #28]
 8013a94:	4605      	mov	r5, r0
 8013a96:	460c      	mov	r4, r1
 8013a98:	b976      	cbnz	r6, 8013ab8 <_Bfree+0x28>
 8013a9a:	2010      	movs	r0, #16
 8013a9c:	f7ff ff02 	bl	80138a4 <malloc>
 8013aa0:	4602      	mov	r2, r0
 8013aa2:	61e8      	str	r0, [r5, #28]
 8013aa4:	b920      	cbnz	r0, 8013ab0 <_Bfree+0x20>
 8013aa6:	4b09      	ldr	r3, [pc, #36]	@ (8013acc <_Bfree+0x3c>)
 8013aa8:	4809      	ldr	r0, [pc, #36]	@ (8013ad0 <_Bfree+0x40>)
 8013aaa:	218f      	movs	r1, #143	@ 0x8f
 8013aac:	f000 fdf8 	bl	80146a0 <__assert_func>
 8013ab0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013ab4:	6006      	str	r6, [r0, #0]
 8013ab6:	60c6      	str	r6, [r0, #12]
 8013ab8:	b13c      	cbz	r4, 8013aca <_Bfree+0x3a>
 8013aba:	69eb      	ldr	r3, [r5, #28]
 8013abc:	6862      	ldr	r2, [r4, #4]
 8013abe:	68db      	ldr	r3, [r3, #12]
 8013ac0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013ac4:	6021      	str	r1, [r4, #0]
 8013ac6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013aca:	bd70      	pop	{r4, r5, r6, pc}
 8013acc:	08014aed 	.word	0x08014aed
 8013ad0:	08014b6d 	.word	0x08014b6d

08013ad4 <__multadd>:
 8013ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ad8:	690d      	ldr	r5, [r1, #16]
 8013ada:	4607      	mov	r7, r0
 8013adc:	460c      	mov	r4, r1
 8013ade:	461e      	mov	r6, r3
 8013ae0:	f101 0c14 	add.w	ip, r1, #20
 8013ae4:	2000      	movs	r0, #0
 8013ae6:	f8dc 3000 	ldr.w	r3, [ip]
 8013aea:	b299      	uxth	r1, r3
 8013aec:	fb02 6101 	mla	r1, r2, r1, r6
 8013af0:	0c1e      	lsrs	r6, r3, #16
 8013af2:	0c0b      	lsrs	r3, r1, #16
 8013af4:	fb02 3306 	mla	r3, r2, r6, r3
 8013af8:	b289      	uxth	r1, r1
 8013afa:	3001      	adds	r0, #1
 8013afc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013b00:	4285      	cmp	r5, r0
 8013b02:	f84c 1b04 	str.w	r1, [ip], #4
 8013b06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013b0a:	dcec      	bgt.n	8013ae6 <__multadd+0x12>
 8013b0c:	b30e      	cbz	r6, 8013b52 <__multadd+0x7e>
 8013b0e:	68a3      	ldr	r3, [r4, #8]
 8013b10:	42ab      	cmp	r3, r5
 8013b12:	dc19      	bgt.n	8013b48 <__multadd+0x74>
 8013b14:	6861      	ldr	r1, [r4, #4]
 8013b16:	4638      	mov	r0, r7
 8013b18:	3101      	adds	r1, #1
 8013b1a:	f7ff ff79 	bl	8013a10 <_Balloc>
 8013b1e:	4680      	mov	r8, r0
 8013b20:	b928      	cbnz	r0, 8013b2e <__multadd+0x5a>
 8013b22:	4602      	mov	r2, r0
 8013b24:	4b0c      	ldr	r3, [pc, #48]	@ (8013b58 <__multadd+0x84>)
 8013b26:	480d      	ldr	r0, [pc, #52]	@ (8013b5c <__multadd+0x88>)
 8013b28:	21ba      	movs	r1, #186	@ 0xba
 8013b2a:	f000 fdb9 	bl	80146a0 <__assert_func>
 8013b2e:	6922      	ldr	r2, [r4, #16]
 8013b30:	3202      	adds	r2, #2
 8013b32:	f104 010c 	add.w	r1, r4, #12
 8013b36:	0092      	lsls	r2, r2, #2
 8013b38:	300c      	adds	r0, #12
 8013b3a:	f7ff f80e 	bl	8012b5a <memcpy>
 8013b3e:	4621      	mov	r1, r4
 8013b40:	4638      	mov	r0, r7
 8013b42:	f7ff ffa5 	bl	8013a90 <_Bfree>
 8013b46:	4644      	mov	r4, r8
 8013b48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013b4c:	3501      	adds	r5, #1
 8013b4e:	615e      	str	r6, [r3, #20]
 8013b50:	6125      	str	r5, [r4, #16]
 8013b52:	4620      	mov	r0, r4
 8013b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b58:	08014b5c 	.word	0x08014b5c
 8013b5c:	08014b6d 	.word	0x08014b6d

08013b60 <__hi0bits>:
 8013b60:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013b64:	4603      	mov	r3, r0
 8013b66:	bf36      	itet	cc
 8013b68:	0403      	lslcc	r3, r0, #16
 8013b6a:	2000      	movcs	r0, #0
 8013b6c:	2010      	movcc	r0, #16
 8013b6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013b72:	bf3c      	itt	cc
 8013b74:	021b      	lslcc	r3, r3, #8
 8013b76:	3008      	addcc	r0, #8
 8013b78:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013b7c:	bf3c      	itt	cc
 8013b7e:	011b      	lslcc	r3, r3, #4
 8013b80:	3004      	addcc	r0, #4
 8013b82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013b86:	bf3c      	itt	cc
 8013b88:	009b      	lslcc	r3, r3, #2
 8013b8a:	3002      	addcc	r0, #2
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	db05      	blt.n	8013b9c <__hi0bits+0x3c>
 8013b90:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013b94:	f100 0001 	add.w	r0, r0, #1
 8013b98:	bf08      	it	eq
 8013b9a:	2020      	moveq	r0, #32
 8013b9c:	4770      	bx	lr

08013b9e <__lo0bits>:
 8013b9e:	6803      	ldr	r3, [r0, #0]
 8013ba0:	4602      	mov	r2, r0
 8013ba2:	f013 0007 	ands.w	r0, r3, #7
 8013ba6:	d00b      	beq.n	8013bc0 <__lo0bits+0x22>
 8013ba8:	07d9      	lsls	r1, r3, #31
 8013baa:	d421      	bmi.n	8013bf0 <__lo0bits+0x52>
 8013bac:	0798      	lsls	r0, r3, #30
 8013bae:	bf49      	itett	mi
 8013bb0:	085b      	lsrmi	r3, r3, #1
 8013bb2:	089b      	lsrpl	r3, r3, #2
 8013bb4:	2001      	movmi	r0, #1
 8013bb6:	6013      	strmi	r3, [r2, #0]
 8013bb8:	bf5c      	itt	pl
 8013bba:	6013      	strpl	r3, [r2, #0]
 8013bbc:	2002      	movpl	r0, #2
 8013bbe:	4770      	bx	lr
 8013bc0:	b299      	uxth	r1, r3
 8013bc2:	b909      	cbnz	r1, 8013bc8 <__lo0bits+0x2a>
 8013bc4:	0c1b      	lsrs	r3, r3, #16
 8013bc6:	2010      	movs	r0, #16
 8013bc8:	b2d9      	uxtb	r1, r3
 8013bca:	b909      	cbnz	r1, 8013bd0 <__lo0bits+0x32>
 8013bcc:	3008      	adds	r0, #8
 8013bce:	0a1b      	lsrs	r3, r3, #8
 8013bd0:	0719      	lsls	r1, r3, #28
 8013bd2:	bf04      	itt	eq
 8013bd4:	091b      	lsreq	r3, r3, #4
 8013bd6:	3004      	addeq	r0, #4
 8013bd8:	0799      	lsls	r1, r3, #30
 8013bda:	bf04      	itt	eq
 8013bdc:	089b      	lsreq	r3, r3, #2
 8013bde:	3002      	addeq	r0, #2
 8013be0:	07d9      	lsls	r1, r3, #31
 8013be2:	d403      	bmi.n	8013bec <__lo0bits+0x4e>
 8013be4:	085b      	lsrs	r3, r3, #1
 8013be6:	f100 0001 	add.w	r0, r0, #1
 8013bea:	d003      	beq.n	8013bf4 <__lo0bits+0x56>
 8013bec:	6013      	str	r3, [r2, #0]
 8013bee:	4770      	bx	lr
 8013bf0:	2000      	movs	r0, #0
 8013bf2:	4770      	bx	lr
 8013bf4:	2020      	movs	r0, #32
 8013bf6:	4770      	bx	lr

08013bf8 <__i2b>:
 8013bf8:	b510      	push	{r4, lr}
 8013bfa:	460c      	mov	r4, r1
 8013bfc:	2101      	movs	r1, #1
 8013bfe:	f7ff ff07 	bl	8013a10 <_Balloc>
 8013c02:	4602      	mov	r2, r0
 8013c04:	b928      	cbnz	r0, 8013c12 <__i2b+0x1a>
 8013c06:	4b05      	ldr	r3, [pc, #20]	@ (8013c1c <__i2b+0x24>)
 8013c08:	4805      	ldr	r0, [pc, #20]	@ (8013c20 <__i2b+0x28>)
 8013c0a:	f240 1145 	movw	r1, #325	@ 0x145
 8013c0e:	f000 fd47 	bl	80146a0 <__assert_func>
 8013c12:	2301      	movs	r3, #1
 8013c14:	6144      	str	r4, [r0, #20]
 8013c16:	6103      	str	r3, [r0, #16]
 8013c18:	bd10      	pop	{r4, pc}
 8013c1a:	bf00      	nop
 8013c1c:	08014b5c 	.word	0x08014b5c
 8013c20:	08014b6d 	.word	0x08014b6d

08013c24 <__multiply>:
 8013c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c28:	4614      	mov	r4, r2
 8013c2a:	690a      	ldr	r2, [r1, #16]
 8013c2c:	6923      	ldr	r3, [r4, #16]
 8013c2e:	429a      	cmp	r2, r3
 8013c30:	bfa8      	it	ge
 8013c32:	4623      	movge	r3, r4
 8013c34:	460f      	mov	r7, r1
 8013c36:	bfa4      	itt	ge
 8013c38:	460c      	movge	r4, r1
 8013c3a:	461f      	movge	r7, r3
 8013c3c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013c40:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013c44:	68a3      	ldr	r3, [r4, #8]
 8013c46:	6861      	ldr	r1, [r4, #4]
 8013c48:	eb0a 0609 	add.w	r6, sl, r9
 8013c4c:	42b3      	cmp	r3, r6
 8013c4e:	b085      	sub	sp, #20
 8013c50:	bfb8      	it	lt
 8013c52:	3101      	addlt	r1, #1
 8013c54:	f7ff fedc 	bl	8013a10 <_Balloc>
 8013c58:	b930      	cbnz	r0, 8013c68 <__multiply+0x44>
 8013c5a:	4602      	mov	r2, r0
 8013c5c:	4b44      	ldr	r3, [pc, #272]	@ (8013d70 <__multiply+0x14c>)
 8013c5e:	4845      	ldr	r0, [pc, #276]	@ (8013d74 <__multiply+0x150>)
 8013c60:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013c64:	f000 fd1c 	bl	80146a0 <__assert_func>
 8013c68:	f100 0514 	add.w	r5, r0, #20
 8013c6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013c70:	462b      	mov	r3, r5
 8013c72:	2200      	movs	r2, #0
 8013c74:	4543      	cmp	r3, r8
 8013c76:	d321      	bcc.n	8013cbc <__multiply+0x98>
 8013c78:	f107 0114 	add.w	r1, r7, #20
 8013c7c:	f104 0214 	add.w	r2, r4, #20
 8013c80:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013c84:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013c88:	9302      	str	r3, [sp, #8]
 8013c8a:	1b13      	subs	r3, r2, r4
 8013c8c:	3b15      	subs	r3, #21
 8013c8e:	f023 0303 	bic.w	r3, r3, #3
 8013c92:	3304      	adds	r3, #4
 8013c94:	f104 0715 	add.w	r7, r4, #21
 8013c98:	42ba      	cmp	r2, r7
 8013c9a:	bf38      	it	cc
 8013c9c:	2304      	movcc	r3, #4
 8013c9e:	9301      	str	r3, [sp, #4]
 8013ca0:	9b02      	ldr	r3, [sp, #8]
 8013ca2:	9103      	str	r1, [sp, #12]
 8013ca4:	428b      	cmp	r3, r1
 8013ca6:	d80c      	bhi.n	8013cc2 <__multiply+0x9e>
 8013ca8:	2e00      	cmp	r6, #0
 8013caa:	dd03      	ble.n	8013cb4 <__multiply+0x90>
 8013cac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d05b      	beq.n	8013d6c <__multiply+0x148>
 8013cb4:	6106      	str	r6, [r0, #16]
 8013cb6:	b005      	add	sp, #20
 8013cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cbc:	f843 2b04 	str.w	r2, [r3], #4
 8013cc0:	e7d8      	b.n	8013c74 <__multiply+0x50>
 8013cc2:	f8b1 a000 	ldrh.w	sl, [r1]
 8013cc6:	f1ba 0f00 	cmp.w	sl, #0
 8013cca:	d024      	beq.n	8013d16 <__multiply+0xf2>
 8013ccc:	f104 0e14 	add.w	lr, r4, #20
 8013cd0:	46a9      	mov	r9, r5
 8013cd2:	f04f 0c00 	mov.w	ip, #0
 8013cd6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013cda:	f8d9 3000 	ldr.w	r3, [r9]
 8013cde:	fa1f fb87 	uxth.w	fp, r7
 8013ce2:	b29b      	uxth	r3, r3
 8013ce4:	fb0a 330b 	mla	r3, sl, fp, r3
 8013ce8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013cec:	f8d9 7000 	ldr.w	r7, [r9]
 8013cf0:	4463      	add	r3, ip
 8013cf2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013cf6:	fb0a c70b 	mla	r7, sl, fp, ip
 8013cfa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8013cfe:	b29b      	uxth	r3, r3
 8013d00:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013d04:	4572      	cmp	r2, lr
 8013d06:	f849 3b04 	str.w	r3, [r9], #4
 8013d0a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013d0e:	d8e2      	bhi.n	8013cd6 <__multiply+0xb2>
 8013d10:	9b01      	ldr	r3, [sp, #4]
 8013d12:	f845 c003 	str.w	ip, [r5, r3]
 8013d16:	9b03      	ldr	r3, [sp, #12]
 8013d18:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013d1c:	3104      	adds	r1, #4
 8013d1e:	f1b9 0f00 	cmp.w	r9, #0
 8013d22:	d021      	beq.n	8013d68 <__multiply+0x144>
 8013d24:	682b      	ldr	r3, [r5, #0]
 8013d26:	f104 0c14 	add.w	ip, r4, #20
 8013d2a:	46ae      	mov	lr, r5
 8013d2c:	f04f 0a00 	mov.w	sl, #0
 8013d30:	f8bc b000 	ldrh.w	fp, [ip]
 8013d34:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013d38:	fb09 770b 	mla	r7, r9, fp, r7
 8013d3c:	4457      	add	r7, sl
 8013d3e:	b29b      	uxth	r3, r3
 8013d40:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013d44:	f84e 3b04 	str.w	r3, [lr], #4
 8013d48:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013d4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013d50:	f8be 3000 	ldrh.w	r3, [lr]
 8013d54:	fb09 330a 	mla	r3, r9, sl, r3
 8013d58:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013d5c:	4562      	cmp	r2, ip
 8013d5e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013d62:	d8e5      	bhi.n	8013d30 <__multiply+0x10c>
 8013d64:	9f01      	ldr	r7, [sp, #4]
 8013d66:	51eb      	str	r3, [r5, r7]
 8013d68:	3504      	adds	r5, #4
 8013d6a:	e799      	b.n	8013ca0 <__multiply+0x7c>
 8013d6c:	3e01      	subs	r6, #1
 8013d6e:	e79b      	b.n	8013ca8 <__multiply+0x84>
 8013d70:	08014b5c 	.word	0x08014b5c
 8013d74:	08014b6d 	.word	0x08014b6d

08013d78 <__pow5mult>:
 8013d78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d7c:	4615      	mov	r5, r2
 8013d7e:	f012 0203 	ands.w	r2, r2, #3
 8013d82:	4607      	mov	r7, r0
 8013d84:	460e      	mov	r6, r1
 8013d86:	d007      	beq.n	8013d98 <__pow5mult+0x20>
 8013d88:	4c25      	ldr	r4, [pc, #148]	@ (8013e20 <__pow5mult+0xa8>)
 8013d8a:	3a01      	subs	r2, #1
 8013d8c:	2300      	movs	r3, #0
 8013d8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013d92:	f7ff fe9f 	bl	8013ad4 <__multadd>
 8013d96:	4606      	mov	r6, r0
 8013d98:	10ad      	asrs	r5, r5, #2
 8013d9a:	d03d      	beq.n	8013e18 <__pow5mult+0xa0>
 8013d9c:	69fc      	ldr	r4, [r7, #28]
 8013d9e:	b97c      	cbnz	r4, 8013dc0 <__pow5mult+0x48>
 8013da0:	2010      	movs	r0, #16
 8013da2:	f7ff fd7f 	bl	80138a4 <malloc>
 8013da6:	4602      	mov	r2, r0
 8013da8:	61f8      	str	r0, [r7, #28]
 8013daa:	b928      	cbnz	r0, 8013db8 <__pow5mult+0x40>
 8013dac:	4b1d      	ldr	r3, [pc, #116]	@ (8013e24 <__pow5mult+0xac>)
 8013dae:	481e      	ldr	r0, [pc, #120]	@ (8013e28 <__pow5mult+0xb0>)
 8013db0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013db4:	f000 fc74 	bl	80146a0 <__assert_func>
 8013db8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013dbc:	6004      	str	r4, [r0, #0]
 8013dbe:	60c4      	str	r4, [r0, #12]
 8013dc0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013dc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013dc8:	b94c      	cbnz	r4, 8013dde <__pow5mult+0x66>
 8013dca:	f240 2171 	movw	r1, #625	@ 0x271
 8013dce:	4638      	mov	r0, r7
 8013dd0:	f7ff ff12 	bl	8013bf8 <__i2b>
 8013dd4:	2300      	movs	r3, #0
 8013dd6:	f8c8 0008 	str.w	r0, [r8, #8]
 8013dda:	4604      	mov	r4, r0
 8013ddc:	6003      	str	r3, [r0, #0]
 8013dde:	f04f 0900 	mov.w	r9, #0
 8013de2:	07eb      	lsls	r3, r5, #31
 8013de4:	d50a      	bpl.n	8013dfc <__pow5mult+0x84>
 8013de6:	4631      	mov	r1, r6
 8013de8:	4622      	mov	r2, r4
 8013dea:	4638      	mov	r0, r7
 8013dec:	f7ff ff1a 	bl	8013c24 <__multiply>
 8013df0:	4631      	mov	r1, r6
 8013df2:	4680      	mov	r8, r0
 8013df4:	4638      	mov	r0, r7
 8013df6:	f7ff fe4b 	bl	8013a90 <_Bfree>
 8013dfa:	4646      	mov	r6, r8
 8013dfc:	106d      	asrs	r5, r5, #1
 8013dfe:	d00b      	beq.n	8013e18 <__pow5mult+0xa0>
 8013e00:	6820      	ldr	r0, [r4, #0]
 8013e02:	b938      	cbnz	r0, 8013e14 <__pow5mult+0x9c>
 8013e04:	4622      	mov	r2, r4
 8013e06:	4621      	mov	r1, r4
 8013e08:	4638      	mov	r0, r7
 8013e0a:	f7ff ff0b 	bl	8013c24 <__multiply>
 8013e0e:	6020      	str	r0, [r4, #0]
 8013e10:	f8c0 9000 	str.w	r9, [r0]
 8013e14:	4604      	mov	r4, r0
 8013e16:	e7e4      	b.n	8013de2 <__pow5mult+0x6a>
 8013e18:	4630      	mov	r0, r6
 8013e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e1e:	bf00      	nop
 8013e20:	08014bc8 	.word	0x08014bc8
 8013e24:	08014aed 	.word	0x08014aed
 8013e28:	08014b6d 	.word	0x08014b6d

08013e2c <__lshift>:
 8013e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e30:	460c      	mov	r4, r1
 8013e32:	6849      	ldr	r1, [r1, #4]
 8013e34:	6923      	ldr	r3, [r4, #16]
 8013e36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013e3a:	68a3      	ldr	r3, [r4, #8]
 8013e3c:	4607      	mov	r7, r0
 8013e3e:	4691      	mov	r9, r2
 8013e40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013e44:	f108 0601 	add.w	r6, r8, #1
 8013e48:	42b3      	cmp	r3, r6
 8013e4a:	db0b      	blt.n	8013e64 <__lshift+0x38>
 8013e4c:	4638      	mov	r0, r7
 8013e4e:	f7ff fddf 	bl	8013a10 <_Balloc>
 8013e52:	4605      	mov	r5, r0
 8013e54:	b948      	cbnz	r0, 8013e6a <__lshift+0x3e>
 8013e56:	4602      	mov	r2, r0
 8013e58:	4b28      	ldr	r3, [pc, #160]	@ (8013efc <__lshift+0xd0>)
 8013e5a:	4829      	ldr	r0, [pc, #164]	@ (8013f00 <__lshift+0xd4>)
 8013e5c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013e60:	f000 fc1e 	bl	80146a0 <__assert_func>
 8013e64:	3101      	adds	r1, #1
 8013e66:	005b      	lsls	r3, r3, #1
 8013e68:	e7ee      	b.n	8013e48 <__lshift+0x1c>
 8013e6a:	2300      	movs	r3, #0
 8013e6c:	f100 0114 	add.w	r1, r0, #20
 8013e70:	f100 0210 	add.w	r2, r0, #16
 8013e74:	4618      	mov	r0, r3
 8013e76:	4553      	cmp	r3, sl
 8013e78:	db33      	blt.n	8013ee2 <__lshift+0xb6>
 8013e7a:	6920      	ldr	r0, [r4, #16]
 8013e7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013e80:	f104 0314 	add.w	r3, r4, #20
 8013e84:	f019 091f 	ands.w	r9, r9, #31
 8013e88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013e8c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013e90:	d02b      	beq.n	8013eea <__lshift+0xbe>
 8013e92:	f1c9 0e20 	rsb	lr, r9, #32
 8013e96:	468a      	mov	sl, r1
 8013e98:	2200      	movs	r2, #0
 8013e9a:	6818      	ldr	r0, [r3, #0]
 8013e9c:	fa00 f009 	lsl.w	r0, r0, r9
 8013ea0:	4310      	orrs	r0, r2
 8013ea2:	f84a 0b04 	str.w	r0, [sl], #4
 8013ea6:	f853 2b04 	ldr.w	r2, [r3], #4
 8013eaa:	459c      	cmp	ip, r3
 8013eac:	fa22 f20e 	lsr.w	r2, r2, lr
 8013eb0:	d8f3      	bhi.n	8013e9a <__lshift+0x6e>
 8013eb2:	ebac 0304 	sub.w	r3, ip, r4
 8013eb6:	3b15      	subs	r3, #21
 8013eb8:	f023 0303 	bic.w	r3, r3, #3
 8013ebc:	3304      	adds	r3, #4
 8013ebe:	f104 0015 	add.w	r0, r4, #21
 8013ec2:	4584      	cmp	ip, r0
 8013ec4:	bf38      	it	cc
 8013ec6:	2304      	movcc	r3, #4
 8013ec8:	50ca      	str	r2, [r1, r3]
 8013eca:	b10a      	cbz	r2, 8013ed0 <__lshift+0xa4>
 8013ecc:	f108 0602 	add.w	r6, r8, #2
 8013ed0:	3e01      	subs	r6, #1
 8013ed2:	4638      	mov	r0, r7
 8013ed4:	612e      	str	r6, [r5, #16]
 8013ed6:	4621      	mov	r1, r4
 8013ed8:	f7ff fdda 	bl	8013a90 <_Bfree>
 8013edc:	4628      	mov	r0, r5
 8013ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ee2:	f842 0f04 	str.w	r0, [r2, #4]!
 8013ee6:	3301      	adds	r3, #1
 8013ee8:	e7c5      	b.n	8013e76 <__lshift+0x4a>
 8013eea:	3904      	subs	r1, #4
 8013eec:	f853 2b04 	ldr.w	r2, [r3], #4
 8013ef0:	f841 2f04 	str.w	r2, [r1, #4]!
 8013ef4:	459c      	cmp	ip, r3
 8013ef6:	d8f9      	bhi.n	8013eec <__lshift+0xc0>
 8013ef8:	e7ea      	b.n	8013ed0 <__lshift+0xa4>
 8013efa:	bf00      	nop
 8013efc:	08014b5c 	.word	0x08014b5c
 8013f00:	08014b6d 	.word	0x08014b6d

08013f04 <__mcmp>:
 8013f04:	690a      	ldr	r2, [r1, #16]
 8013f06:	4603      	mov	r3, r0
 8013f08:	6900      	ldr	r0, [r0, #16]
 8013f0a:	1a80      	subs	r0, r0, r2
 8013f0c:	b530      	push	{r4, r5, lr}
 8013f0e:	d10e      	bne.n	8013f2e <__mcmp+0x2a>
 8013f10:	3314      	adds	r3, #20
 8013f12:	3114      	adds	r1, #20
 8013f14:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013f18:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013f1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013f20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013f24:	4295      	cmp	r5, r2
 8013f26:	d003      	beq.n	8013f30 <__mcmp+0x2c>
 8013f28:	d205      	bcs.n	8013f36 <__mcmp+0x32>
 8013f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8013f2e:	bd30      	pop	{r4, r5, pc}
 8013f30:	42a3      	cmp	r3, r4
 8013f32:	d3f3      	bcc.n	8013f1c <__mcmp+0x18>
 8013f34:	e7fb      	b.n	8013f2e <__mcmp+0x2a>
 8013f36:	2001      	movs	r0, #1
 8013f38:	e7f9      	b.n	8013f2e <__mcmp+0x2a>
	...

08013f3c <__mdiff>:
 8013f3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f40:	4689      	mov	r9, r1
 8013f42:	4606      	mov	r6, r0
 8013f44:	4611      	mov	r1, r2
 8013f46:	4648      	mov	r0, r9
 8013f48:	4614      	mov	r4, r2
 8013f4a:	f7ff ffdb 	bl	8013f04 <__mcmp>
 8013f4e:	1e05      	subs	r5, r0, #0
 8013f50:	d112      	bne.n	8013f78 <__mdiff+0x3c>
 8013f52:	4629      	mov	r1, r5
 8013f54:	4630      	mov	r0, r6
 8013f56:	f7ff fd5b 	bl	8013a10 <_Balloc>
 8013f5a:	4602      	mov	r2, r0
 8013f5c:	b928      	cbnz	r0, 8013f6a <__mdiff+0x2e>
 8013f5e:	4b3f      	ldr	r3, [pc, #252]	@ (801405c <__mdiff+0x120>)
 8013f60:	f240 2137 	movw	r1, #567	@ 0x237
 8013f64:	483e      	ldr	r0, [pc, #248]	@ (8014060 <__mdiff+0x124>)
 8013f66:	f000 fb9b 	bl	80146a0 <__assert_func>
 8013f6a:	2301      	movs	r3, #1
 8013f6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013f70:	4610      	mov	r0, r2
 8013f72:	b003      	add	sp, #12
 8013f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f78:	bfbc      	itt	lt
 8013f7a:	464b      	movlt	r3, r9
 8013f7c:	46a1      	movlt	r9, r4
 8013f7e:	4630      	mov	r0, r6
 8013f80:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013f84:	bfba      	itte	lt
 8013f86:	461c      	movlt	r4, r3
 8013f88:	2501      	movlt	r5, #1
 8013f8a:	2500      	movge	r5, #0
 8013f8c:	f7ff fd40 	bl	8013a10 <_Balloc>
 8013f90:	4602      	mov	r2, r0
 8013f92:	b918      	cbnz	r0, 8013f9c <__mdiff+0x60>
 8013f94:	4b31      	ldr	r3, [pc, #196]	@ (801405c <__mdiff+0x120>)
 8013f96:	f240 2145 	movw	r1, #581	@ 0x245
 8013f9a:	e7e3      	b.n	8013f64 <__mdiff+0x28>
 8013f9c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013fa0:	6926      	ldr	r6, [r4, #16]
 8013fa2:	60c5      	str	r5, [r0, #12]
 8013fa4:	f109 0310 	add.w	r3, r9, #16
 8013fa8:	f109 0514 	add.w	r5, r9, #20
 8013fac:	f104 0e14 	add.w	lr, r4, #20
 8013fb0:	f100 0b14 	add.w	fp, r0, #20
 8013fb4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013fb8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013fbc:	9301      	str	r3, [sp, #4]
 8013fbe:	46d9      	mov	r9, fp
 8013fc0:	f04f 0c00 	mov.w	ip, #0
 8013fc4:	9b01      	ldr	r3, [sp, #4]
 8013fc6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013fca:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013fce:	9301      	str	r3, [sp, #4]
 8013fd0:	fa1f f38a 	uxth.w	r3, sl
 8013fd4:	4619      	mov	r1, r3
 8013fd6:	b283      	uxth	r3, r0
 8013fd8:	1acb      	subs	r3, r1, r3
 8013fda:	0c00      	lsrs	r0, r0, #16
 8013fdc:	4463      	add	r3, ip
 8013fde:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013fe2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013fe6:	b29b      	uxth	r3, r3
 8013fe8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013fec:	4576      	cmp	r6, lr
 8013fee:	f849 3b04 	str.w	r3, [r9], #4
 8013ff2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013ff6:	d8e5      	bhi.n	8013fc4 <__mdiff+0x88>
 8013ff8:	1b33      	subs	r3, r6, r4
 8013ffa:	3b15      	subs	r3, #21
 8013ffc:	f023 0303 	bic.w	r3, r3, #3
 8014000:	3415      	adds	r4, #21
 8014002:	3304      	adds	r3, #4
 8014004:	42a6      	cmp	r6, r4
 8014006:	bf38      	it	cc
 8014008:	2304      	movcc	r3, #4
 801400a:	441d      	add	r5, r3
 801400c:	445b      	add	r3, fp
 801400e:	461e      	mov	r6, r3
 8014010:	462c      	mov	r4, r5
 8014012:	4544      	cmp	r4, r8
 8014014:	d30e      	bcc.n	8014034 <__mdiff+0xf8>
 8014016:	f108 0103 	add.w	r1, r8, #3
 801401a:	1b49      	subs	r1, r1, r5
 801401c:	f021 0103 	bic.w	r1, r1, #3
 8014020:	3d03      	subs	r5, #3
 8014022:	45a8      	cmp	r8, r5
 8014024:	bf38      	it	cc
 8014026:	2100      	movcc	r1, #0
 8014028:	440b      	add	r3, r1
 801402a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801402e:	b191      	cbz	r1, 8014056 <__mdiff+0x11a>
 8014030:	6117      	str	r7, [r2, #16]
 8014032:	e79d      	b.n	8013f70 <__mdiff+0x34>
 8014034:	f854 1b04 	ldr.w	r1, [r4], #4
 8014038:	46e6      	mov	lr, ip
 801403a:	0c08      	lsrs	r0, r1, #16
 801403c:	fa1c fc81 	uxtah	ip, ip, r1
 8014040:	4471      	add	r1, lr
 8014042:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8014046:	b289      	uxth	r1, r1
 8014048:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801404c:	f846 1b04 	str.w	r1, [r6], #4
 8014050:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014054:	e7dd      	b.n	8014012 <__mdiff+0xd6>
 8014056:	3f01      	subs	r7, #1
 8014058:	e7e7      	b.n	801402a <__mdiff+0xee>
 801405a:	bf00      	nop
 801405c:	08014b5c 	.word	0x08014b5c
 8014060:	08014b6d 	.word	0x08014b6d

08014064 <__d2b>:
 8014064:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014068:	460f      	mov	r7, r1
 801406a:	2101      	movs	r1, #1
 801406c:	ec59 8b10 	vmov	r8, r9, d0
 8014070:	4616      	mov	r6, r2
 8014072:	f7ff fccd 	bl	8013a10 <_Balloc>
 8014076:	4604      	mov	r4, r0
 8014078:	b930      	cbnz	r0, 8014088 <__d2b+0x24>
 801407a:	4602      	mov	r2, r0
 801407c:	4b23      	ldr	r3, [pc, #140]	@ (801410c <__d2b+0xa8>)
 801407e:	4824      	ldr	r0, [pc, #144]	@ (8014110 <__d2b+0xac>)
 8014080:	f240 310f 	movw	r1, #783	@ 0x30f
 8014084:	f000 fb0c 	bl	80146a0 <__assert_func>
 8014088:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801408c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014090:	b10d      	cbz	r5, 8014096 <__d2b+0x32>
 8014092:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8014096:	9301      	str	r3, [sp, #4]
 8014098:	f1b8 0300 	subs.w	r3, r8, #0
 801409c:	d023      	beq.n	80140e6 <__d2b+0x82>
 801409e:	4668      	mov	r0, sp
 80140a0:	9300      	str	r3, [sp, #0]
 80140a2:	f7ff fd7c 	bl	8013b9e <__lo0bits>
 80140a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80140aa:	b1d0      	cbz	r0, 80140e2 <__d2b+0x7e>
 80140ac:	f1c0 0320 	rsb	r3, r0, #32
 80140b0:	fa02 f303 	lsl.w	r3, r2, r3
 80140b4:	430b      	orrs	r3, r1
 80140b6:	40c2      	lsrs	r2, r0
 80140b8:	6163      	str	r3, [r4, #20]
 80140ba:	9201      	str	r2, [sp, #4]
 80140bc:	9b01      	ldr	r3, [sp, #4]
 80140be:	61a3      	str	r3, [r4, #24]
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	bf0c      	ite	eq
 80140c4:	2201      	moveq	r2, #1
 80140c6:	2202      	movne	r2, #2
 80140c8:	6122      	str	r2, [r4, #16]
 80140ca:	b1a5      	cbz	r5, 80140f6 <__d2b+0x92>
 80140cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80140d0:	4405      	add	r5, r0
 80140d2:	603d      	str	r5, [r7, #0]
 80140d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80140d8:	6030      	str	r0, [r6, #0]
 80140da:	4620      	mov	r0, r4
 80140dc:	b003      	add	sp, #12
 80140de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80140e2:	6161      	str	r1, [r4, #20]
 80140e4:	e7ea      	b.n	80140bc <__d2b+0x58>
 80140e6:	a801      	add	r0, sp, #4
 80140e8:	f7ff fd59 	bl	8013b9e <__lo0bits>
 80140ec:	9b01      	ldr	r3, [sp, #4]
 80140ee:	6163      	str	r3, [r4, #20]
 80140f0:	3020      	adds	r0, #32
 80140f2:	2201      	movs	r2, #1
 80140f4:	e7e8      	b.n	80140c8 <__d2b+0x64>
 80140f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80140fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80140fe:	6038      	str	r0, [r7, #0]
 8014100:	6918      	ldr	r0, [r3, #16]
 8014102:	f7ff fd2d 	bl	8013b60 <__hi0bits>
 8014106:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801410a:	e7e5      	b.n	80140d8 <__d2b+0x74>
 801410c:	08014b5c 	.word	0x08014b5c
 8014110:	08014b6d 	.word	0x08014b6d

08014114 <__sfputc_r>:
 8014114:	6893      	ldr	r3, [r2, #8]
 8014116:	3b01      	subs	r3, #1
 8014118:	2b00      	cmp	r3, #0
 801411a:	b410      	push	{r4}
 801411c:	6093      	str	r3, [r2, #8]
 801411e:	da08      	bge.n	8014132 <__sfputc_r+0x1e>
 8014120:	6994      	ldr	r4, [r2, #24]
 8014122:	42a3      	cmp	r3, r4
 8014124:	db01      	blt.n	801412a <__sfputc_r+0x16>
 8014126:	290a      	cmp	r1, #10
 8014128:	d103      	bne.n	8014132 <__sfputc_r+0x1e>
 801412a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801412e:	f000 ba13 	b.w	8014558 <__swbuf_r>
 8014132:	6813      	ldr	r3, [r2, #0]
 8014134:	1c58      	adds	r0, r3, #1
 8014136:	6010      	str	r0, [r2, #0]
 8014138:	7019      	strb	r1, [r3, #0]
 801413a:	4608      	mov	r0, r1
 801413c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014140:	4770      	bx	lr

08014142 <__sfputs_r>:
 8014142:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014144:	4606      	mov	r6, r0
 8014146:	460f      	mov	r7, r1
 8014148:	4614      	mov	r4, r2
 801414a:	18d5      	adds	r5, r2, r3
 801414c:	42ac      	cmp	r4, r5
 801414e:	d101      	bne.n	8014154 <__sfputs_r+0x12>
 8014150:	2000      	movs	r0, #0
 8014152:	e007      	b.n	8014164 <__sfputs_r+0x22>
 8014154:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014158:	463a      	mov	r2, r7
 801415a:	4630      	mov	r0, r6
 801415c:	f7ff ffda 	bl	8014114 <__sfputc_r>
 8014160:	1c43      	adds	r3, r0, #1
 8014162:	d1f3      	bne.n	801414c <__sfputs_r+0xa>
 8014164:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014168 <_vfiprintf_r>:
 8014168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801416c:	460d      	mov	r5, r1
 801416e:	b09d      	sub	sp, #116	@ 0x74
 8014170:	4614      	mov	r4, r2
 8014172:	4698      	mov	r8, r3
 8014174:	4606      	mov	r6, r0
 8014176:	b118      	cbz	r0, 8014180 <_vfiprintf_r+0x18>
 8014178:	6a03      	ldr	r3, [r0, #32]
 801417a:	b90b      	cbnz	r3, 8014180 <_vfiprintf_r+0x18>
 801417c:	f7fe fbda 	bl	8012934 <__sinit>
 8014180:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014182:	07d9      	lsls	r1, r3, #31
 8014184:	d405      	bmi.n	8014192 <_vfiprintf_r+0x2a>
 8014186:	89ab      	ldrh	r3, [r5, #12]
 8014188:	059a      	lsls	r2, r3, #22
 801418a:	d402      	bmi.n	8014192 <_vfiprintf_r+0x2a>
 801418c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801418e:	f7fe fce2 	bl	8012b56 <__retarget_lock_acquire_recursive>
 8014192:	89ab      	ldrh	r3, [r5, #12]
 8014194:	071b      	lsls	r3, r3, #28
 8014196:	d501      	bpl.n	801419c <_vfiprintf_r+0x34>
 8014198:	692b      	ldr	r3, [r5, #16]
 801419a:	b99b      	cbnz	r3, 80141c4 <_vfiprintf_r+0x5c>
 801419c:	4629      	mov	r1, r5
 801419e:	4630      	mov	r0, r6
 80141a0:	f000 fa18 	bl	80145d4 <__swsetup_r>
 80141a4:	b170      	cbz	r0, 80141c4 <_vfiprintf_r+0x5c>
 80141a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80141a8:	07dc      	lsls	r4, r3, #31
 80141aa:	d504      	bpl.n	80141b6 <_vfiprintf_r+0x4e>
 80141ac:	f04f 30ff 	mov.w	r0, #4294967295
 80141b0:	b01d      	add	sp, #116	@ 0x74
 80141b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141b6:	89ab      	ldrh	r3, [r5, #12]
 80141b8:	0598      	lsls	r0, r3, #22
 80141ba:	d4f7      	bmi.n	80141ac <_vfiprintf_r+0x44>
 80141bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80141be:	f7fe fccb 	bl	8012b58 <__retarget_lock_release_recursive>
 80141c2:	e7f3      	b.n	80141ac <_vfiprintf_r+0x44>
 80141c4:	2300      	movs	r3, #0
 80141c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80141c8:	2320      	movs	r3, #32
 80141ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80141ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80141d2:	2330      	movs	r3, #48	@ 0x30
 80141d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014384 <_vfiprintf_r+0x21c>
 80141d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80141dc:	f04f 0901 	mov.w	r9, #1
 80141e0:	4623      	mov	r3, r4
 80141e2:	469a      	mov	sl, r3
 80141e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80141e8:	b10a      	cbz	r2, 80141ee <_vfiprintf_r+0x86>
 80141ea:	2a25      	cmp	r2, #37	@ 0x25
 80141ec:	d1f9      	bne.n	80141e2 <_vfiprintf_r+0x7a>
 80141ee:	ebba 0b04 	subs.w	fp, sl, r4
 80141f2:	d00b      	beq.n	801420c <_vfiprintf_r+0xa4>
 80141f4:	465b      	mov	r3, fp
 80141f6:	4622      	mov	r2, r4
 80141f8:	4629      	mov	r1, r5
 80141fa:	4630      	mov	r0, r6
 80141fc:	f7ff ffa1 	bl	8014142 <__sfputs_r>
 8014200:	3001      	adds	r0, #1
 8014202:	f000 80a7 	beq.w	8014354 <_vfiprintf_r+0x1ec>
 8014206:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014208:	445a      	add	r2, fp
 801420a:	9209      	str	r2, [sp, #36]	@ 0x24
 801420c:	f89a 3000 	ldrb.w	r3, [sl]
 8014210:	2b00      	cmp	r3, #0
 8014212:	f000 809f 	beq.w	8014354 <_vfiprintf_r+0x1ec>
 8014216:	2300      	movs	r3, #0
 8014218:	f04f 32ff 	mov.w	r2, #4294967295
 801421c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014220:	f10a 0a01 	add.w	sl, sl, #1
 8014224:	9304      	str	r3, [sp, #16]
 8014226:	9307      	str	r3, [sp, #28]
 8014228:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801422c:	931a      	str	r3, [sp, #104]	@ 0x68
 801422e:	4654      	mov	r4, sl
 8014230:	2205      	movs	r2, #5
 8014232:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014236:	4853      	ldr	r0, [pc, #332]	@ (8014384 <_vfiprintf_r+0x21c>)
 8014238:	f7eb ffa2 	bl	8000180 <memchr>
 801423c:	9a04      	ldr	r2, [sp, #16]
 801423e:	b9d8      	cbnz	r0, 8014278 <_vfiprintf_r+0x110>
 8014240:	06d1      	lsls	r1, r2, #27
 8014242:	bf44      	itt	mi
 8014244:	2320      	movmi	r3, #32
 8014246:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801424a:	0713      	lsls	r3, r2, #28
 801424c:	bf44      	itt	mi
 801424e:	232b      	movmi	r3, #43	@ 0x2b
 8014250:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014254:	f89a 3000 	ldrb.w	r3, [sl]
 8014258:	2b2a      	cmp	r3, #42	@ 0x2a
 801425a:	d015      	beq.n	8014288 <_vfiprintf_r+0x120>
 801425c:	9a07      	ldr	r2, [sp, #28]
 801425e:	4654      	mov	r4, sl
 8014260:	2000      	movs	r0, #0
 8014262:	f04f 0c0a 	mov.w	ip, #10
 8014266:	4621      	mov	r1, r4
 8014268:	f811 3b01 	ldrb.w	r3, [r1], #1
 801426c:	3b30      	subs	r3, #48	@ 0x30
 801426e:	2b09      	cmp	r3, #9
 8014270:	d94b      	bls.n	801430a <_vfiprintf_r+0x1a2>
 8014272:	b1b0      	cbz	r0, 80142a2 <_vfiprintf_r+0x13a>
 8014274:	9207      	str	r2, [sp, #28]
 8014276:	e014      	b.n	80142a2 <_vfiprintf_r+0x13a>
 8014278:	eba0 0308 	sub.w	r3, r0, r8
 801427c:	fa09 f303 	lsl.w	r3, r9, r3
 8014280:	4313      	orrs	r3, r2
 8014282:	9304      	str	r3, [sp, #16]
 8014284:	46a2      	mov	sl, r4
 8014286:	e7d2      	b.n	801422e <_vfiprintf_r+0xc6>
 8014288:	9b03      	ldr	r3, [sp, #12]
 801428a:	1d19      	adds	r1, r3, #4
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	9103      	str	r1, [sp, #12]
 8014290:	2b00      	cmp	r3, #0
 8014292:	bfbb      	ittet	lt
 8014294:	425b      	neglt	r3, r3
 8014296:	f042 0202 	orrlt.w	r2, r2, #2
 801429a:	9307      	strge	r3, [sp, #28]
 801429c:	9307      	strlt	r3, [sp, #28]
 801429e:	bfb8      	it	lt
 80142a0:	9204      	strlt	r2, [sp, #16]
 80142a2:	7823      	ldrb	r3, [r4, #0]
 80142a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80142a6:	d10a      	bne.n	80142be <_vfiprintf_r+0x156>
 80142a8:	7863      	ldrb	r3, [r4, #1]
 80142aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80142ac:	d132      	bne.n	8014314 <_vfiprintf_r+0x1ac>
 80142ae:	9b03      	ldr	r3, [sp, #12]
 80142b0:	1d1a      	adds	r2, r3, #4
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	9203      	str	r2, [sp, #12]
 80142b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80142ba:	3402      	adds	r4, #2
 80142bc:	9305      	str	r3, [sp, #20]
 80142be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014394 <_vfiprintf_r+0x22c>
 80142c2:	7821      	ldrb	r1, [r4, #0]
 80142c4:	2203      	movs	r2, #3
 80142c6:	4650      	mov	r0, sl
 80142c8:	f7eb ff5a 	bl	8000180 <memchr>
 80142cc:	b138      	cbz	r0, 80142de <_vfiprintf_r+0x176>
 80142ce:	9b04      	ldr	r3, [sp, #16]
 80142d0:	eba0 000a 	sub.w	r0, r0, sl
 80142d4:	2240      	movs	r2, #64	@ 0x40
 80142d6:	4082      	lsls	r2, r0
 80142d8:	4313      	orrs	r3, r2
 80142da:	3401      	adds	r4, #1
 80142dc:	9304      	str	r3, [sp, #16]
 80142de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80142e2:	4829      	ldr	r0, [pc, #164]	@ (8014388 <_vfiprintf_r+0x220>)
 80142e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80142e8:	2206      	movs	r2, #6
 80142ea:	f7eb ff49 	bl	8000180 <memchr>
 80142ee:	2800      	cmp	r0, #0
 80142f0:	d03f      	beq.n	8014372 <_vfiprintf_r+0x20a>
 80142f2:	4b26      	ldr	r3, [pc, #152]	@ (801438c <_vfiprintf_r+0x224>)
 80142f4:	bb1b      	cbnz	r3, 801433e <_vfiprintf_r+0x1d6>
 80142f6:	9b03      	ldr	r3, [sp, #12]
 80142f8:	3307      	adds	r3, #7
 80142fa:	f023 0307 	bic.w	r3, r3, #7
 80142fe:	3308      	adds	r3, #8
 8014300:	9303      	str	r3, [sp, #12]
 8014302:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014304:	443b      	add	r3, r7
 8014306:	9309      	str	r3, [sp, #36]	@ 0x24
 8014308:	e76a      	b.n	80141e0 <_vfiprintf_r+0x78>
 801430a:	fb0c 3202 	mla	r2, ip, r2, r3
 801430e:	460c      	mov	r4, r1
 8014310:	2001      	movs	r0, #1
 8014312:	e7a8      	b.n	8014266 <_vfiprintf_r+0xfe>
 8014314:	2300      	movs	r3, #0
 8014316:	3401      	adds	r4, #1
 8014318:	9305      	str	r3, [sp, #20]
 801431a:	4619      	mov	r1, r3
 801431c:	f04f 0c0a 	mov.w	ip, #10
 8014320:	4620      	mov	r0, r4
 8014322:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014326:	3a30      	subs	r2, #48	@ 0x30
 8014328:	2a09      	cmp	r2, #9
 801432a:	d903      	bls.n	8014334 <_vfiprintf_r+0x1cc>
 801432c:	2b00      	cmp	r3, #0
 801432e:	d0c6      	beq.n	80142be <_vfiprintf_r+0x156>
 8014330:	9105      	str	r1, [sp, #20]
 8014332:	e7c4      	b.n	80142be <_vfiprintf_r+0x156>
 8014334:	fb0c 2101 	mla	r1, ip, r1, r2
 8014338:	4604      	mov	r4, r0
 801433a:	2301      	movs	r3, #1
 801433c:	e7f0      	b.n	8014320 <_vfiprintf_r+0x1b8>
 801433e:	ab03      	add	r3, sp, #12
 8014340:	9300      	str	r3, [sp, #0]
 8014342:	462a      	mov	r2, r5
 8014344:	4b12      	ldr	r3, [pc, #72]	@ (8014390 <_vfiprintf_r+0x228>)
 8014346:	a904      	add	r1, sp, #16
 8014348:	4630      	mov	r0, r6
 801434a:	f7fd feaf 	bl	80120ac <_printf_float>
 801434e:	4607      	mov	r7, r0
 8014350:	1c78      	adds	r0, r7, #1
 8014352:	d1d6      	bne.n	8014302 <_vfiprintf_r+0x19a>
 8014354:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014356:	07d9      	lsls	r1, r3, #31
 8014358:	d405      	bmi.n	8014366 <_vfiprintf_r+0x1fe>
 801435a:	89ab      	ldrh	r3, [r5, #12]
 801435c:	059a      	lsls	r2, r3, #22
 801435e:	d402      	bmi.n	8014366 <_vfiprintf_r+0x1fe>
 8014360:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014362:	f7fe fbf9 	bl	8012b58 <__retarget_lock_release_recursive>
 8014366:	89ab      	ldrh	r3, [r5, #12]
 8014368:	065b      	lsls	r3, r3, #25
 801436a:	f53f af1f 	bmi.w	80141ac <_vfiprintf_r+0x44>
 801436e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014370:	e71e      	b.n	80141b0 <_vfiprintf_r+0x48>
 8014372:	ab03      	add	r3, sp, #12
 8014374:	9300      	str	r3, [sp, #0]
 8014376:	462a      	mov	r2, r5
 8014378:	4b05      	ldr	r3, [pc, #20]	@ (8014390 <_vfiprintf_r+0x228>)
 801437a:	a904      	add	r1, sp, #16
 801437c:	4630      	mov	r0, r6
 801437e:	f7fe f92d 	bl	80125dc <_printf_i>
 8014382:	e7e4      	b.n	801434e <_vfiprintf_r+0x1e6>
 8014384:	08014cc8 	.word	0x08014cc8
 8014388:	08014cd2 	.word	0x08014cd2
 801438c:	080120ad 	.word	0x080120ad
 8014390:	08014143 	.word	0x08014143
 8014394:	08014cce 	.word	0x08014cce

08014398 <__sflush_r>:
 8014398:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801439c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143a0:	0716      	lsls	r6, r2, #28
 80143a2:	4605      	mov	r5, r0
 80143a4:	460c      	mov	r4, r1
 80143a6:	d454      	bmi.n	8014452 <__sflush_r+0xba>
 80143a8:	684b      	ldr	r3, [r1, #4]
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	dc02      	bgt.n	80143b4 <__sflush_r+0x1c>
 80143ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	dd48      	ble.n	8014446 <__sflush_r+0xae>
 80143b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80143b6:	2e00      	cmp	r6, #0
 80143b8:	d045      	beq.n	8014446 <__sflush_r+0xae>
 80143ba:	2300      	movs	r3, #0
 80143bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80143c0:	682f      	ldr	r7, [r5, #0]
 80143c2:	6a21      	ldr	r1, [r4, #32]
 80143c4:	602b      	str	r3, [r5, #0]
 80143c6:	d030      	beq.n	801442a <__sflush_r+0x92>
 80143c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80143ca:	89a3      	ldrh	r3, [r4, #12]
 80143cc:	0759      	lsls	r1, r3, #29
 80143ce:	d505      	bpl.n	80143dc <__sflush_r+0x44>
 80143d0:	6863      	ldr	r3, [r4, #4]
 80143d2:	1ad2      	subs	r2, r2, r3
 80143d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80143d6:	b10b      	cbz	r3, 80143dc <__sflush_r+0x44>
 80143d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80143da:	1ad2      	subs	r2, r2, r3
 80143dc:	2300      	movs	r3, #0
 80143de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80143e0:	6a21      	ldr	r1, [r4, #32]
 80143e2:	4628      	mov	r0, r5
 80143e4:	47b0      	blx	r6
 80143e6:	1c43      	adds	r3, r0, #1
 80143e8:	89a3      	ldrh	r3, [r4, #12]
 80143ea:	d106      	bne.n	80143fa <__sflush_r+0x62>
 80143ec:	6829      	ldr	r1, [r5, #0]
 80143ee:	291d      	cmp	r1, #29
 80143f0:	d82b      	bhi.n	801444a <__sflush_r+0xb2>
 80143f2:	4a2a      	ldr	r2, [pc, #168]	@ (801449c <__sflush_r+0x104>)
 80143f4:	410a      	asrs	r2, r1
 80143f6:	07d6      	lsls	r6, r2, #31
 80143f8:	d427      	bmi.n	801444a <__sflush_r+0xb2>
 80143fa:	2200      	movs	r2, #0
 80143fc:	6062      	str	r2, [r4, #4]
 80143fe:	04d9      	lsls	r1, r3, #19
 8014400:	6922      	ldr	r2, [r4, #16]
 8014402:	6022      	str	r2, [r4, #0]
 8014404:	d504      	bpl.n	8014410 <__sflush_r+0x78>
 8014406:	1c42      	adds	r2, r0, #1
 8014408:	d101      	bne.n	801440e <__sflush_r+0x76>
 801440a:	682b      	ldr	r3, [r5, #0]
 801440c:	b903      	cbnz	r3, 8014410 <__sflush_r+0x78>
 801440e:	6560      	str	r0, [r4, #84]	@ 0x54
 8014410:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014412:	602f      	str	r7, [r5, #0]
 8014414:	b1b9      	cbz	r1, 8014446 <__sflush_r+0xae>
 8014416:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801441a:	4299      	cmp	r1, r3
 801441c:	d002      	beq.n	8014424 <__sflush_r+0x8c>
 801441e:	4628      	mov	r0, r5
 8014420:	f7ff f9f6 	bl	8013810 <_free_r>
 8014424:	2300      	movs	r3, #0
 8014426:	6363      	str	r3, [r4, #52]	@ 0x34
 8014428:	e00d      	b.n	8014446 <__sflush_r+0xae>
 801442a:	2301      	movs	r3, #1
 801442c:	4628      	mov	r0, r5
 801442e:	47b0      	blx	r6
 8014430:	4602      	mov	r2, r0
 8014432:	1c50      	adds	r0, r2, #1
 8014434:	d1c9      	bne.n	80143ca <__sflush_r+0x32>
 8014436:	682b      	ldr	r3, [r5, #0]
 8014438:	2b00      	cmp	r3, #0
 801443a:	d0c6      	beq.n	80143ca <__sflush_r+0x32>
 801443c:	2b1d      	cmp	r3, #29
 801443e:	d001      	beq.n	8014444 <__sflush_r+0xac>
 8014440:	2b16      	cmp	r3, #22
 8014442:	d11e      	bne.n	8014482 <__sflush_r+0xea>
 8014444:	602f      	str	r7, [r5, #0]
 8014446:	2000      	movs	r0, #0
 8014448:	e022      	b.n	8014490 <__sflush_r+0xf8>
 801444a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801444e:	b21b      	sxth	r3, r3
 8014450:	e01b      	b.n	801448a <__sflush_r+0xf2>
 8014452:	690f      	ldr	r7, [r1, #16]
 8014454:	2f00      	cmp	r7, #0
 8014456:	d0f6      	beq.n	8014446 <__sflush_r+0xae>
 8014458:	0793      	lsls	r3, r2, #30
 801445a:	680e      	ldr	r6, [r1, #0]
 801445c:	bf08      	it	eq
 801445e:	694b      	ldreq	r3, [r1, #20]
 8014460:	600f      	str	r7, [r1, #0]
 8014462:	bf18      	it	ne
 8014464:	2300      	movne	r3, #0
 8014466:	eba6 0807 	sub.w	r8, r6, r7
 801446a:	608b      	str	r3, [r1, #8]
 801446c:	f1b8 0f00 	cmp.w	r8, #0
 8014470:	dde9      	ble.n	8014446 <__sflush_r+0xae>
 8014472:	6a21      	ldr	r1, [r4, #32]
 8014474:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8014476:	4643      	mov	r3, r8
 8014478:	463a      	mov	r2, r7
 801447a:	4628      	mov	r0, r5
 801447c:	47b0      	blx	r6
 801447e:	2800      	cmp	r0, #0
 8014480:	dc08      	bgt.n	8014494 <__sflush_r+0xfc>
 8014482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014486:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801448a:	81a3      	strh	r3, [r4, #12]
 801448c:	f04f 30ff 	mov.w	r0, #4294967295
 8014490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014494:	4407      	add	r7, r0
 8014496:	eba8 0800 	sub.w	r8, r8, r0
 801449a:	e7e7      	b.n	801446c <__sflush_r+0xd4>
 801449c:	dfbffffe 	.word	0xdfbffffe

080144a0 <_fflush_r>:
 80144a0:	b538      	push	{r3, r4, r5, lr}
 80144a2:	690b      	ldr	r3, [r1, #16]
 80144a4:	4605      	mov	r5, r0
 80144a6:	460c      	mov	r4, r1
 80144a8:	b913      	cbnz	r3, 80144b0 <_fflush_r+0x10>
 80144aa:	2500      	movs	r5, #0
 80144ac:	4628      	mov	r0, r5
 80144ae:	bd38      	pop	{r3, r4, r5, pc}
 80144b0:	b118      	cbz	r0, 80144ba <_fflush_r+0x1a>
 80144b2:	6a03      	ldr	r3, [r0, #32]
 80144b4:	b90b      	cbnz	r3, 80144ba <_fflush_r+0x1a>
 80144b6:	f7fe fa3d 	bl	8012934 <__sinit>
 80144ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d0f3      	beq.n	80144aa <_fflush_r+0xa>
 80144c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80144c4:	07d0      	lsls	r0, r2, #31
 80144c6:	d404      	bmi.n	80144d2 <_fflush_r+0x32>
 80144c8:	0599      	lsls	r1, r3, #22
 80144ca:	d402      	bmi.n	80144d2 <_fflush_r+0x32>
 80144cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80144ce:	f7fe fb42 	bl	8012b56 <__retarget_lock_acquire_recursive>
 80144d2:	4628      	mov	r0, r5
 80144d4:	4621      	mov	r1, r4
 80144d6:	f7ff ff5f 	bl	8014398 <__sflush_r>
 80144da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80144dc:	07da      	lsls	r2, r3, #31
 80144de:	4605      	mov	r5, r0
 80144e0:	d4e4      	bmi.n	80144ac <_fflush_r+0xc>
 80144e2:	89a3      	ldrh	r3, [r4, #12]
 80144e4:	059b      	lsls	r3, r3, #22
 80144e6:	d4e1      	bmi.n	80144ac <_fflush_r+0xc>
 80144e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80144ea:	f7fe fb35 	bl	8012b58 <__retarget_lock_release_recursive>
 80144ee:	e7dd      	b.n	80144ac <_fflush_r+0xc>

080144f0 <_putc_r>:
 80144f0:	b570      	push	{r4, r5, r6, lr}
 80144f2:	460d      	mov	r5, r1
 80144f4:	4614      	mov	r4, r2
 80144f6:	4606      	mov	r6, r0
 80144f8:	b118      	cbz	r0, 8014502 <_putc_r+0x12>
 80144fa:	6a03      	ldr	r3, [r0, #32]
 80144fc:	b90b      	cbnz	r3, 8014502 <_putc_r+0x12>
 80144fe:	f7fe fa19 	bl	8012934 <__sinit>
 8014502:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014504:	07d8      	lsls	r0, r3, #31
 8014506:	d405      	bmi.n	8014514 <_putc_r+0x24>
 8014508:	89a3      	ldrh	r3, [r4, #12]
 801450a:	0599      	lsls	r1, r3, #22
 801450c:	d402      	bmi.n	8014514 <_putc_r+0x24>
 801450e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014510:	f7fe fb21 	bl	8012b56 <__retarget_lock_acquire_recursive>
 8014514:	68a3      	ldr	r3, [r4, #8]
 8014516:	3b01      	subs	r3, #1
 8014518:	2b00      	cmp	r3, #0
 801451a:	60a3      	str	r3, [r4, #8]
 801451c:	da05      	bge.n	801452a <_putc_r+0x3a>
 801451e:	69a2      	ldr	r2, [r4, #24]
 8014520:	4293      	cmp	r3, r2
 8014522:	db12      	blt.n	801454a <_putc_r+0x5a>
 8014524:	b2eb      	uxtb	r3, r5
 8014526:	2b0a      	cmp	r3, #10
 8014528:	d00f      	beq.n	801454a <_putc_r+0x5a>
 801452a:	6823      	ldr	r3, [r4, #0]
 801452c:	1c5a      	adds	r2, r3, #1
 801452e:	6022      	str	r2, [r4, #0]
 8014530:	701d      	strb	r5, [r3, #0]
 8014532:	b2ed      	uxtb	r5, r5
 8014534:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014536:	07da      	lsls	r2, r3, #31
 8014538:	d405      	bmi.n	8014546 <_putc_r+0x56>
 801453a:	89a3      	ldrh	r3, [r4, #12]
 801453c:	059b      	lsls	r3, r3, #22
 801453e:	d402      	bmi.n	8014546 <_putc_r+0x56>
 8014540:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014542:	f7fe fb09 	bl	8012b58 <__retarget_lock_release_recursive>
 8014546:	4628      	mov	r0, r5
 8014548:	bd70      	pop	{r4, r5, r6, pc}
 801454a:	4629      	mov	r1, r5
 801454c:	4622      	mov	r2, r4
 801454e:	4630      	mov	r0, r6
 8014550:	f000 f802 	bl	8014558 <__swbuf_r>
 8014554:	4605      	mov	r5, r0
 8014556:	e7ed      	b.n	8014534 <_putc_r+0x44>

08014558 <__swbuf_r>:
 8014558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801455a:	460e      	mov	r6, r1
 801455c:	4614      	mov	r4, r2
 801455e:	4605      	mov	r5, r0
 8014560:	b118      	cbz	r0, 801456a <__swbuf_r+0x12>
 8014562:	6a03      	ldr	r3, [r0, #32]
 8014564:	b90b      	cbnz	r3, 801456a <__swbuf_r+0x12>
 8014566:	f7fe f9e5 	bl	8012934 <__sinit>
 801456a:	69a3      	ldr	r3, [r4, #24]
 801456c:	60a3      	str	r3, [r4, #8]
 801456e:	89a3      	ldrh	r3, [r4, #12]
 8014570:	071a      	lsls	r2, r3, #28
 8014572:	d501      	bpl.n	8014578 <__swbuf_r+0x20>
 8014574:	6923      	ldr	r3, [r4, #16]
 8014576:	b943      	cbnz	r3, 801458a <__swbuf_r+0x32>
 8014578:	4621      	mov	r1, r4
 801457a:	4628      	mov	r0, r5
 801457c:	f000 f82a 	bl	80145d4 <__swsetup_r>
 8014580:	b118      	cbz	r0, 801458a <__swbuf_r+0x32>
 8014582:	f04f 37ff 	mov.w	r7, #4294967295
 8014586:	4638      	mov	r0, r7
 8014588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801458a:	6823      	ldr	r3, [r4, #0]
 801458c:	6922      	ldr	r2, [r4, #16]
 801458e:	1a98      	subs	r0, r3, r2
 8014590:	6963      	ldr	r3, [r4, #20]
 8014592:	b2f6      	uxtb	r6, r6
 8014594:	4283      	cmp	r3, r0
 8014596:	4637      	mov	r7, r6
 8014598:	dc05      	bgt.n	80145a6 <__swbuf_r+0x4e>
 801459a:	4621      	mov	r1, r4
 801459c:	4628      	mov	r0, r5
 801459e:	f7ff ff7f 	bl	80144a0 <_fflush_r>
 80145a2:	2800      	cmp	r0, #0
 80145a4:	d1ed      	bne.n	8014582 <__swbuf_r+0x2a>
 80145a6:	68a3      	ldr	r3, [r4, #8]
 80145a8:	3b01      	subs	r3, #1
 80145aa:	60a3      	str	r3, [r4, #8]
 80145ac:	6823      	ldr	r3, [r4, #0]
 80145ae:	1c5a      	adds	r2, r3, #1
 80145b0:	6022      	str	r2, [r4, #0]
 80145b2:	701e      	strb	r6, [r3, #0]
 80145b4:	6962      	ldr	r2, [r4, #20]
 80145b6:	1c43      	adds	r3, r0, #1
 80145b8:	429a      	cmp	r2, r3
 80145ba:	d004      	beq.n	80145c6 <__swbuf_r+0x6e>
 80145bc:	89a3      	ldrh	r3, [r4, #12]
 80145be:	07db      	lsls	r3, r3, #31
 80145c0:	d5e1      	bpl.n	8014586 <__swbuf_r+0x2e>
 80145c2:	2e0a      	cmp	r6, #10
 80145c4:	d1df      	bne.n	8014586 <__swbuf_r+0x2e>
 80145c6:	4621      	mov	r1, r4
 80145c8:	4628      	mov	r0, r5
 80145ca:	f7ff ff69 	bl	80144a0 <_fflush_r>
 80145ce:	2800      	cmp	r0, #0
 80145d0:	d0d9      	beq.n	8014586 <__swbuf_r+0x2e>
 80145d2:	e7d6      	b.n	8014582 <__swbuf_r+0x2a>

080145d4 <__swsetup_r>:
 80145d4:	b538      	push	{r3, r4, r5, lr}
 80145d6:	4b29      	ldr	r3, [pc, #164]	@ (801467c <__swsetup_r+0xa8>)
 80145d8:	4605      	mov	r5, r0
 80145da:	6818      	ldr	r0, [r3, #0]
 80145dc:	460c      	mov	r4, r1
 80145de:	b118      	cbz	r0, 80145e8 <__swsetup_r+0x14>
 80145e0:	6a03      	ldr	r3, [r0, #32]
 80145e2:	b90b      	cbnz	r3, 80145e8 <__swsetup_r+0x14>
 80145e4:	f7fe f9a6 	bl	8012934 <__sinit>
 80145e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80145ec:	0719      	lsls	r1, r3, #28
 80145ee:	d422      	bmi.n	8014636 <__swsetup_r+0x62>
 80145f0:	06da      	lsls	r2, r3, #27
 80145f2:	d407      	bmi.n	8014604 <__swsetup_r+0x30>
 80145f4:	2209      	movs	r2, #9
 80145f6:	602a      	str	r2, [r5, #0]
 80145f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80145fc:	81a3      	strh	r3, [r4, #12]
 80145fe:	f04f 30ff 	mov.w	r0, #4294967295
 8014602:	e033      	b.n	801466c <__swsetup_r+0x98>
 8014604:	0758      	lsls	r0, r3, #29
 8014606:	d512      	bpl.n	801462e <__swsetup_r+0x5a>
 8014608:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801460a:	b141      	cbz	r1, 801461e <__swsetup_r+0x4a>
 801460c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014610:	4299      	cmp	r1, r3
 8014612:	d002      	beq.n	801461a <__swsetup_r+0x46>
 8014614:	4628      	mov	r0, r5
 8014616:	f7ff f8fb 	bl	8013810 <_free_r>
 801461a:	2300      	movs	r3, #0
 801461c:	6363      	str	r3, [r4, #52]	@ 0x34
 801461e:	89a3      	ldrh	r3, [r4, #12]
 8014620:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014624:	81a3      	strh	r3, [r4, #12]
 8014626:	2300      	movs	r3, #0
 8014628:	6063      	str	r3, [r4, #4]
 801462a:	6923      	ldr	r3, [r4, #16]
 801462c:	6023      	str	r3, [r4, #0]
 801462e:	89a3      	ldrh	r3, [r4, #12]
 8014630:	f043 0308 	orr.w	r3, r3, #8
 8014634:	81a3      	strh	r3, [r4, #12]
 8014636:	6923      	ldr	r3, [r4, #16]
 8014638:	b94b      	cbnz	r3, 801464e <__swsetup_r+0x7a>
 801463a:	89a3      	ldrh	r3, [r4, #12]
 801463c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014640:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014644:	d003      	beq.n	801464e <__swsetup_r+0x7a>
 8014646:	4621      	mov	r1, r4
 8014648:	4628      	mov	r0, r5
 801464a:	f000 f8b3 	bl	80147b4 <__smakebuf_r>
 801464e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014652:	f013 0201 	ands.w	r2, r3, #1
 8014656:	d00a      	beq.n	801466e <__swsetup_r+0x9a>
 8014658:	2200      	movs	r2, #0
 801465a:	60a2      	str	r2, [r4, #8]
 801465c:	6962      	ldr	r2, [r4, #20]
 801465e:	4252      	negs	r2, r2
 8014660:	61a2      	str	r2, [r4, #24]
 8014662:	6922      	ldr	r2, [r4, #16]
 8014664:	b942      	cbnz	r2, 8014678 <__swsetup_r+0xa4>
 8014666:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801466a:	d1c5      	bne.n	80145f8 <__swsetup_r+0x24>
 801466c:	bd38      	pop	{r3, r4, r5, pc}
 801466e:	0799      	lsls	r1, r3, #30
 8014670:	bf58      	it	pl
 8014672:	6962      	ldrpl	r2, [r4, #20]
 8014674:	60a2      	str	r2, [r4, #8]
 8014676:	e7f4      	b.n	8014662 <__swsetup_r+0x8e>
 8014678:	2000      	movs	r0, #0
 801467a:	e7f7      	b.n	801466c <__swsetup_r+0x98>
 801467c:	20000134 	.word	0x20000134

08014680 <_sbrk_r>:
 8014680:	b538      	push	{r3, r4, r5, lr}
 8014682:	4d06      	ldr	r5, [pc, #24]	@ (801469c <_sbrk_r+0x1c>)
 8014684:	2300      	movs	r3, #0
 8014686:	4604      	mov	r4, r0
 8014688:	4608      	mov	r0, r1
 801468a:	602b      	str	r3, [r5, #0]
 801468c:	f7f0 f86a 	bl	8004764 <_sbrk>
 8014690:	1c43      	adds	r3, r0, #1
 8014692:	d102      	bne.n	801469a <_sbrk_r+0x1a>
 8014694:	682b      	ldr	r3, [r5, #0]
 8014696:	b103      	cbz	r3, 801469a <_sbrk_r+0x1a>
 8014698:	6023      	str	r3, [r4, #0]
 801469a:	bd38      	pop	{r3, r4, r5, pc}
 801469c:	200022dc 	.word	0x200022dc

080146a0 <__assert_func>:
 80146a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80146a2:	4614      	mov	r4, r2
 80146a4:	461a      	mov	r2, r3
 80146a6:	4b09      	ldr	r3, [pc, #36]	@ (80146cc <__assert_func+0x2c>)
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	4605      	mov	r5, r0
 80146ac:	68d8      	ldr	r0, [r3, #12]
 80146ae:	b954      	cbnz	r4, 80146c6 <__assert_func+0x26>
 80146b0:	4b07      	ldr	r3, [pc, #28]	@ (80146d0 <__assert_func+0x30>)
 80146b2:	461c      	mov	r4, r3
 80146b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80146b8:	9100      	str	r1, [sp, #0]
 80146ba:	462b      	mov	r3, r5
 80146bc:	4905      	ldr	r1, [pc, #20]	@ (80146d4 <__assert_func+0x34>)
 80146be:	f000 f841 	bl	8014744 <fiprintf>
 80146c2:	f000 f8d5 	bl	8014870 <abort>
 80146c6:	4b04      	ldr	r3, [pc, #16]	@ (80146d8 <__assert_func+0x38>)
 80146c8:	e7f4      	b.n	80146b4 <__assert_func+0x14>
 80146ca:	bf00      	nop
 80146cc:	20000134 	.word	0x20000134
 80146d0:	08014d1e 	.word	0x08014d1e
 80146d4:	08014cf0 	.word	0x08014cf0
 80146d8:	08014ce3 	.word	0x08014ce3

080146dc <_calloc_r>:
 80146dc:	b570      	push	{r4, r5, r6, lr}
 80146de:	fba1 5402 	umull	r5, r4, r1, r2
 80146e2:	b93c      	cbnz	r4, 80146f4 <_calloc_r+0x18>
 80146e4:	4629      	mov	r1, r5
 80146e6:	f7ff f907 	bl	80138f8 <_malloc_r>
 80146ea:	4606      	mov	r6, r0
 80146ec:	b928      	cbnz	r0, 80146fa <_calloc_r+0x1e>
 80146ee:	2600      	movs	r6, #0
 80146f0:	4630      	mov	r0, r6
 80146f2:	bd70      	pop	{r4, r5, r6, pc}
 80146f4:	220c      	movs	r2, #12
 80146f6:	6002      	str	r2, [r0, #0]
 80146f8:	e7f9      	b.n	80146ee <_calloc_r+0x12>
 80146fa:	462a      	mov	r2, r5
 80146fc:	4621      	mov	r1, r4
 80146fe:	f7fe f9ac 	bl	8012a5a <memset>
 8014702:	e7f5      	b.n	80146f0 <_calloc_r+0x14>

08014704 <__ascii_mbtowc>:
 8014704:	b082      	sub	sp, #8
 8014706:	b901      	cbnz	r1, 801470a <__ascii_mbtowc+0x6>
 8014708:	a901      	add	r1, sp, #4
 801470a:	b142      	cbz	r2, 801471e <__ascii_mbtowc+0x1a>
 801470c:	b14b      	cbz	r3, 8014722 <__ascii_mbtowc+0x1e>
 801470e:	7813      	ldrb	r3, [r2, #0]
 8014710:	600b      	str	r3, [r1, #0]
 8014712:	7812      	ldrb	r2, [r2, #0]
 8014714:	1e10      	subs	r0, r2, #0
 8014716:	bf18      	it	ne
 8014718:	2001      	movne	r0, #1
 801471a:	b002      	add	sp, #8
 801471c:	4770      	bx	lr
 801471e:	4610      	mov	r0, r2
 8014720:	e7fb      	b.n	801471a <__ascii_mbtowc+0x16>
 8014722:	f06f 0001 	mvn.w	r0, #1
 8014726:	e7f8      	b.n	801471a <__ascii_mbtowc+0x16>

08014728 <__ascii_wctomb>:
 8014728:	4603      	mov	r3, r0
 801472a:	4608      	mov	r0, r1
 801472c:	b141      	cbz	r1, 8014740 <__ascii_wctomb+0x18>
 801472e:	2aff      	cmp	r2, #255	@ 0xff
 8014730:	d904      	bls.n	801473c <__ascii_wctomb+0x14>
 8014732:	228a      	movs	r2, #138	@ 0x8a
 8014734:	601a      	str	r2, [r3, #0]
 8014736:	f04f 30ff 	mov.w	r0, #4294967295
 801473a:	4770      	bx	lr
 801473c:	700a      	strb	r2, [r1, #0]
 801473e:	2001      	movs	r0, #1
 8014740:	4770      	bx	lr
	...

08014744 <fiprintf>:
 8014744:	b40e      	push	{r1, r2, r3}
 8014746:	b503      	push	{r0, r1, lr}
 8014748:	4601      	mov	r1, r0
 801474a:	ab03      	add	r3, sp, #12
 801474c:	4805      	ldr	r0, [pc, #20]	@ (8014764 <fiprintf+0x20>)
 801474e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014752:	6800      	ldr	r0, [r0, #0]
 8014754:	9301      	str	r3, [sp, #4]
 8014756:	f7ff fd07 	bl	8014168 <_vfiprintf_r>
 801475a:	b002      	add	sp, #8
 801475c:	f85d eb04 	ldr.w	lr, [sp], #4
 8014760:	b003      	add	sp, #12
 8014762:	4770      	bx	lr
 8014764:	20000134 	.word	0x20000134

08014768 <__swhatbuf_r>:
 8014768:	b570      	push	{r4, r5, r6, lr}
 801476a:	460c      	mov	r4, r1
 801476c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014770:	2900      	cmp	r1, #0
 8014772:	b096      	sub	sp, #88	@ 0x58
 8014774:	4615      	mov	r5, r2
 8014776:	461e      	mov	r6, r3
 8014778:	da0d      	bge.n	8014796 <__swhatbuf_r+0x2e>
 801477a:	89a3      	ldrh	r3, [r4, #12]
 801477c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014780:	f04f 0100 	mov.w	r1, #0
 8014784:	bf14      	ite	ne
 8014786:	2340      	movne	r3, #64	@ 0x40
 8014788:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801478c:	2000      	movs	r0, #0
 801478e:	6031      	str	r1, [r6, #0]
 8014790:	602b      	str	r3, [r5, #0]
 8014792:	b016      	add	sp, #88	@ 0x58
 8014794:	bd70      	pop	{r4, r5, r6, pc}
 8014796:	466a      	mov	r2, sp
 8014798:	f000 f848 	bl	801482c <_fstat_r>
 801479c:	2800      	cmp	r0, #0
 801479e:	dbec      	blt.n	801477a <__swhatbuf_r+0x12>
 80147a0:	9901      	ldr	r1, [sp, #4]
 80147a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80147a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80147aa:	4259      	negs	r1, r3
 80147ac:	4159      	adcs	r1, r3
 80147ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80147b2:	e7eb      	b.n	801478c <__swhatbuf_r+0x24>

080147b4 <__smakebuf_r>:
 80147b4:	898b      	ldrh	r3, [r1, #12]
 80147b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80147b8:	079d      	lsls	r5, r3, #30
 80147ba:	4606      	mov	r6, r0
 80147bc:	460c      	mov	r4, r1
 80147be:	d507      	bpl.n	80147d0 <__smakebuf_r+0x1c>
 80147c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80147c4:	6023      	str	r3, [r4, #0]
 80147c6:	6123      	str	r3, [r4, #16]
 80147c8:	2301      	movs	r3, #1
 80147ca:	6163      	str	r3, [r4, #20]
 80147cc:	b003      	add	sp, #12
 80147ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147d0:	ab01      	add	r3, sp, #4
 80147d2:	466a      	mov	r2, sp
 80147d4:	f7ff ffc8 	bl	8014768 <__swhatbuf_r>
 80147d8:	9f00      	ldr	r7, [sp, #0]
 80147da:	4605      	mov	r5, r0
 80147dc:	4639      	mov	r1, r7
 80147de:	4630      	mov	r0, r6
 80147e0:	f7ff f88a 	bl	80138f8 <_malloc_r>
 80147e4:	b948      	cbnz	r0, 80147fa <__smakebuf_r+0x46>
 80147e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80147ea:	059a      	lsls	r2, r3, #22
 80147ec:	d4ee      	bmi.n	80147cc <__smakebuf_r+0x18>
 80147ee:	f023 0303 	bic.w	r3, r3, #3
 80147f2:	f043 0302 	orr.w	r3, r3, #2
 80147f6:	81a3      	strh	r3, [r4, #12]
 80147f8:	e7e2      	b.n	80147c0 <__smakebuf_r+0xc>
 80147fa:	89a3      	ldrh	r3, [r4, #12]
 80147fc:	6020      	str	r0, [r4, #0]
 80147fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014802:	81a3      	strh	r3, [r4, #12]
 8014804:	9b01      	ldr	r3, [sp, #4]
 8014806:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801480a:	b15b      	cbz	r3, 8014824 <__smakebuf_r+0x70>
 801480c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014810:	4630      	mov	r0, r6
 8014812:	f000 f81d 	bl	8014850 <_isatty_r>
 8014816:	b128      	cbz	r0, 8014824 <__smakebuf_r+0x70>
 8014818:	89a3      	ldrh	r3, [r4, #12]
 801481a:	f023 0303 	bic.w	r3, r3, #3
 801481e:	f043 0301 	orr.w	r3, r3, #1
 8014822:	81a3      	strh	r3, [r4, #12]
 8014824:	89a3      	ldrh	r3, [r4, #12]
 8014826:	431d      	orrs	r5, r3
 8014828:	81a5      	strh	r5, [r4, #12]
 801482a:	e7cf      	b.n	80147cc <__smakebuf_r+0x18>

0801482c <_fstat_r>:
 801482c:	b538      	push	{r3, r4, r5, lr}
 801482e:	4d07      	ldr	r5, [pc, #28]	@ (801484c <_fstat_r+0x20>)
 8014830:	2300      	movs	r3, #0
 8014832:	4604      	mov	r4, r0
 8014834:	4608      	mov	r0, r1
 8014836:	4611      	mov	r1, r2
 8014838:	602b      	str	r3, [r5, #0]
 801483a:	f7ef ff6b 	bl	8004714 <_fstat>
 801483e:	1c43      	adds	r3, r0, #1
 8014840:	d102      	bne.n	8014848 <_fstat_r+0x1c>
 8014842:	682b      	ldr	r3, [r5, #0]
 8014844:	b103      	cbz	r3, 8014848 <_fstat_r+0x1c>
 8014846:	6023      	str	r3, [r4, #0]
 8014848:	bd38      	pop	{r3, r4, r5, pc}
 801484a:	bf00      	nop
 801484c:	200022dc 	.word	0x200022dc

08014850 <_isatty_r>:
 8014850:	b538      	push	{r3, r4, r5, lr}
 8014852:	4d06      	ldr	r5, [pc, #24]	@ (801486c <_isatty_r+0x1c>)
 8014854:	2300      	movs	r3, #0
 8014856:	4604      	mov	r4, r0
 8014858:	4608      	mov	r0, r1
 801485a:	602b      	str	r3, [r5, #0]
 801485c:	f7ef ff6a 	bl	8004734 <_isatty>
 8014860:	1c43      	adds	r3, r0, #1
 8014862:	d102      	bne.n	801486a <_isatty_r+0x1a>
 8014864:	682b      	ldr	r3, [r5, #0]
 8014866:	b103      	cbz	r3, 801486a <_isatty_r+0x1a>
 8014868:	6023      	str	r3, [r4, #0]
 801486a:	bd38      	pop	{r3, r4, r5, pc}
 801486c:	200022dc 	.word	0x200022dc

08014870 <abort>:
 8014870:	b508      	push	{r3, lr}
 8014872:	2006      	movs	r0, #6
 8014874:	f000 f82c 	bl	80148d0 <raise>
 8014878:	2001      	movs	r0, #1
 801487a:	f7ef fefb 	bl	8004674 <_exit>

0801487e <_raise_r>:
 801487e:	291f      	cmp	r1, #31
 8014880:	b538      	push	{r3, r4, r5, lr}
 8014882:	4605      	mov	r5, r0
 8014884:	460c      	mov	r4, r1
 8014886:	d904      	bls.n	8014892 <_raise_r+0x14>
 8014888:	2316      	movs	r3, #22
 801488a:	6003      	str	r3, [r0, #0]
 801488c:	f04f 30ff 	mov.w	r0, #4294967295
 8014890:	bd38      	pop	{r3, r4, r5, pc}
 8014892:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014894:	b112      	cbz	r2, 801489c <_raise_r+0x1e>
 8014896:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801489a:	b94b      	cbnz	r3, 80148b0 <_raise_r+0x32>
 801489c:	4628      	mov	r0, r5
 801489e:	f000 f831 	bl	8014904 <_getpid_r>
 80148a2:	4622      	mov	r2, r4
 80148a4:	4601      	mov	r1, r0
 80148a6:	4628      	mov	r0, r5
 80148a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80148ac:	f000 b818 	b.w	80148e0 <_kill_r>
 80148b0:	2b01      	cmp	r3, #1
 80148b2:	d00a      	beq.n	80148ca <_raise_r+0x4c>
 80148b4:	1c59      	adds	r1, r3, #1
 80148b6:	d103      	bne.n	80148c0 <_raise_r+0x42>
 80148b8:	2316      	movs	r3, #22
 80148ba:	6003      	str	r3, [r0, #0]
 80148bc:	2001      	movs	r0, #1
 80148be:	e7e7      	b.n	8014890 <_raise_r+0x12>
 80148c0:	2100      	movs	r1, #0
 80148c2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80148c6:	4620      	mov	r0, r4
 80148c8:	4798      	blx	r3
 80148ca:	2000      	movs	r0, #0
 80148cc:	e7e0      	b.n	8014890 <_raise_r+0x12>
	...

080148d0 <raise>:
 80148d0:	4b02      	ldr	r3, [pc, #8]	@ (80148dc <raise+0xc>)
 80148d2:	4601      	mov	r1, r0
 80148d4:	6818      	ldr	r0, [r3, #0]
 80148d6:	f7ff bfd2 	b.w	801487e <_raise_r>
 80148da:	bf00      	nop
 80148dc:	20000134 	.word	0x20000134

080148e0 <_kill_r>:
 80148e0:	b538      	push	{r3, r4, r5, lr}
 80148e2:	4d07      	ldr	r5, [pc, #28]	@ (8014900 <_kill_r+0x20>)
 80148e4:	2300      	movs	r3, #0
 80148e6:	4604      	mov	r4, r0
 80148e8:	4608      	mov	r0, r1
 80148ea:	4611      	mov	r1, r2
 80148ec:	602b      	str	r3, [r5, #0]
 80148ee:	f7ef feb1 	bl	8004654 <_kill>
 80148f2:	1c43      	adds	r3, r0, #1
 80148f4:	d102      	bne.n	80148fc <_kill_r+0x1c>
 80148f6:	682b      	ldr	r3, [r5, #0]
 80148f8:	b103      	cbz	r3, 80148fc <_kill_r+0x1c>
 80148fa:	6023      	str	r3, [r4, #0]
 80148fc:	bd38      	pop	{r3, r4, r5, pc}
 80148fe:	bf00      	nop
 8014900:	200022dc 	.word	0x200022dc

08014904 <_getpid_r>:
 8014904:	f7ef be9e 	b.w	8004644 <_getpid>

08014908 <_init>:
 8014908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801490a:	bf00      	nop
 801490c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801490e:	bc08      	pop	{r3}
 8014910:	469e      	mov	lr, r3
 8014912:	4770      	bx	lr

08014914 <_fini>:
 8014914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014916:	bf00      	nop
 8014918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801491a:	bc08      	pop	{r3}
 801491c:	469e      	mov	lr, r3
 801491e:	4770      	bx	lr
