
Rattatouille_Transfer_double.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013384  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  080134c4  080134c4  000144c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08013684  08013684  00014684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801368c  0801368c  0001468c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08013690  08013690  00014690  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000180  20000008  08013694  00015008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002028  20000188  08013814  00015188  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200021b0  08013814  000151b0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00015188  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002dbe9  00000000  00000000  000151b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000057ce  00000000  00000000  00042da1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002b38  00000000  00000000  00048570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00002155  00000000  00000000  0004b0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0002ab7d  00000000  00000000  0004d1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002f2e3  00000000  00000000  00077d7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00100a1c  00000000  00000000  000a705d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a7a79  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c220  00000000  00000000  001a7abc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000071  00000000  00000000  001b3cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000188 	.word	0x20000188
 800015c:	00000000 	.word	0x00000000
 8000160:	080134ac 	.word	0x080134ac

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000018c 	.word	0x2000018c
 800017c:	080134ac 	.word	0x080134ac

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <__aeabi_dmul>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000226:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800022a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800022e:	bf1d      	ittte	ne
 8000230:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000234:	ea94 0f0c 	teqne	r4, ip
 8000238:	ea95 0f0c 	teqne	r5, ip
 800023c:	f000 f8de 	bleq	80003fc <__aeabi_dmul+0x1dc>
 8000240:	442c      	add	r4, r5
 8000242:	ea81 0603 	eor.w	r6, r1, r3
 8000246:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800024a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800024e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000252:	bf18      	it	ne
 8000254:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000258:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800025c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000260:	d038      	beq.n	80002d4 <__aeabi_dmul+0xb4>
 8000262:	fba0 ce02 	umull	ip, lr, r0, r2
 8000266:	f04f 0500 	mov.w	r5, #0
 800026a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800026e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000272:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000276:	f04f 0600 	mov.w	r6, #0
 800027a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800027e:	f09c 0f00 	teq	ip, #0
 8000282:	bf18      	it	ne
 8000284:	f04e 0e01 	orrne.w	lr, lr, #1
 8000288:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800028c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000290:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000294:	d204      	bcs.n	80002a0 <__aeabi_dmul+0x80>
 8000296:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800029a:	416d      	adcs	r5, r5
 800029c:	eb46 0606 	adc.w	r6, r6, r6
 80002a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002b4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002b8:	bf88      	it	hi
 80002ba:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002be:	d81e      	bhi.n	80002fe <__aeabi_dmul+0xde>
 80002c0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002c4:	bf08      	it	eq
 80002c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002ca:	f150 0000 	adcs.w	r0, r0, #0
 80002ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002d2:	bd70      	pop	{r4, r5, r6, pc}
 80002d4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002d8:	ea46 0101 	orr.w	r1, r6, r1
 80002dc:	ea40 0002 	orr.w	r0, r0, r2
 80002e0:	ea81 0103 	eor.w	r1, r1, r3
 80002e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e8:	bfc2      	ittt	gt
 80002ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002f2:	bd70      	popgt	{r4, r5, r6, pc}
 80002f4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002f8:	f04f 0e00 	mov.w	lr, #0
 80002fc:	3c01      	subs	r4, #1
 80002fe:	f300 80ab 	bgt.w	8000458 <__aeabi_dmul+0x238>
 8000302:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000306:	bfde      	ittt	le
 8000308:	2000      	movle	r0, #0
 800030a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800030e:	bd70      	pople	{r4, r5, r6, pc}
 8000310:	f1c4 0400 	rsb	r4, r4, #0
 8000314:	3c20      	subs	r4, #32
 8000316:	da35      	bge.n	8000384 <__aeabi_dmul+0x164>
 8000318:	340c      	adds	r4, #12
 800031a:	dc1b      	bgt.n	8000354 <__aeabi_dmul+0x134>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0520 	rsb	r5, r4, #32
 8000324:	fa00 f305 	lsl.w	r3, r0, r5
 8000328:	fa20 f004 	lsr.w	r0, r0, r4
 800032c:	fa01 f205 	lsl.w	r2, r1, r5
 8000330:	ea40 0002 	orr.w	r0, r0, r2
 8000334:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000338:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800033c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000340:	fa21 f604 	lsr.w	r6, r1, r4
 8000344:	eb42 0106 	adc.w	r1, r2, r6
 8000348:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800034c:	bf08      	it	eq
 800034e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f1c4 040c 	rsb	r4, r4, #12
 8000358:	f1c4 0520 	rsb	r5, r4, #32
 800035c:	fa00 f304 	lsl.w	r3, r0, r4
 8000360:	fa20 f005 	lsr.w	r0, r0, r5
 8000364:	fa01 f204 	lsl.w	r2, r1, r4
 8000368:	ea40 0002 	orr.w	r0, r0, r2
 800036c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000370:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800037c:	bf08      	it	eq
 800037e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f1c4 0520 	rsb	r5, r4, #32
 8000388:	fa00 f205 	lsl.w	r2, r0, r5
 800038c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000390:	fa20 f304 	lsr.w	r3, r0, r4
 8000394:	fa01 f205 	lsl.w	r2, r1, r5
 8000398:	ea43 0302 	orr.w	r3, r3, r2
 800039c:	fa21 f004 	lsr.w	r0, r1, r4
 80003a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003a4:	fa21 f204 	lsr.w	r2, r1, r4
 80003a8:	ea20 0002 	bic.w	r0, r0, r2
 80003ac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003b4:	bf08      	it	eq
 80003b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003ba:	bd70      	pop	{r4, r5, r6, pc}
 80003bc:	f094 0f00 	teq	r4, #0
 80003c0:	d10f      	bne.n	80003e2 <__aeabi_dmul+0x1c2>
 80003c2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003c6:	0040      	lsls	r0, r0, #1
 80003c8:	eb41 0101 	adc.w	r1, r1, r1
 80003cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003d0:	bf08      	it	eq
 80003d2:	3c01      	subeq	r4, #1
 80003d4:	d0f7      	beq.n	80003c6 <__aeabi_dmul+0x1a6>
 80003d6:	ea41 0106 	orr.w	r1, r1, r6
 80003da:	f095 0f00 	teq	r5, #0
 80003de:	bf18      	it	ne
 80003e0:	4770      	bxne	lr
 80003e2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003e6:	0052      	lsls	r2, r2, #1
 80003e8:	eb43 0303 	adc.w	r3, r3, r3
 80003ec:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003f0:	bf08      	it	eq
 80003f2:	3d01      	subeq	r5, #1
 80003f4:	d0f7      	beq.n	80003e6 <__aeabi_dmul+0x1c6>
 80003f6:	ea43 0306 	orr.w	r3, r3, r6
 80003fa:	4770      	bx	lr
 80003fc:	ea94 0f0c 	teq	r4, ip
 8000400:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000404:	bf18      	it	ne
 8000406:	ea95 0f0c 	teqne	r5, ip
 800040a:	d00c      	beq.n	8000426 <__aeabi_dmul+0x206>
 800040c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000410:	bf18      	it	ne
 8000412:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000416:	d1d1      	bne.n	80003bc <__aeabi_dmul+0x19c>
 8000418:	ea81 0103 	eor.w	r1, r1, r3
 800041c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000420:	f04f 0000 	mov.w	r0, #0
 8000424:	bd70      	pop	{r4, r5, r6, pc}
 8000426:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800042a:	bf06      	itte	eq
 800042c:	4610      	moveq	r0, r2
 800042e:	4619      	moveq	r1, r3
 8000430:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000434:	d019      	beq.n	800046a <__aeabi_dmul+0x24a>
 8000436:	ea94 0f0c 	teq	r4, ip
 800043a:	d102      	bne.n	8000442 <__aeabi_dmul+0x222>
 800043c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000440:	d113      	bne.n	800046a <__aeabi_dmul+0x24a>
 8000442:	ea95 0f0c 	teq	r5, ip
 8000446:	d105      	bne.n	8000454 <__aeabi_dmul+0x234>
 8000448:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800044c:	bf1c      	itt	ne
 800044e:	4610      	movne	r0, r2
 8000450:	4619      	movne	r1, r3
 8000452:	d10a      	bne.n	800046a <__aeabi_dmul+0x24a>
 8000454:	ea81 0103 	eor.w	r1, r1, r3
 8000458:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800045c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000460:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000464:	f04f 0000 	mov.w	r0, #0
 8000468:	bd70      	pop	{r4, r5, r6, pc}
 800046a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800046e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000472:	bd70      	pop	{r4, r5, r6, pc}

08000474 <__aeabi_drsub>:
 8000474:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000478:	e002      	b.n	8000480 <__adddf3>
 800047a:	bf00      	nop

0800047c <__aeabi_dsub>:
 800047c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000480 <__adddf3>:
 8000480:	b530      	push	{r4, r5, lr}
 8000482:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000486:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800048a:	ea94 0f05 	teq	r4, r5
 800048e:	bf08      	it	eq
 8000490:	ea90 0f02 	teqeq	r0, r2
 8000494:	bf1f      	itttt	ne
 8000496:	ea54 0c00 	orrsne.w	ip, r4, r0
 800049a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800049e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a6:	f000 80e2 	beq.w	800066e <__adddf3+0x1ee>
 80004aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004b2:	bfb8      	it	lt
 80004b4:	426d      	neglt	r5, r5
 80004b6:	dd0c      	ble.n	80004d2 <__adddf3+0x52>
 80004b8:	442c      	add	r4, r5
 80004ba:	ea80 0202 	eor.w	r2, r0, r2
 80004be:	ea81 0303 	eor.w	r3, r1, r3
 80004c2:	ea82 0000 	eor.w	r0, r2, r0
 80004c6:	ea83 0101 	eor.w	r1, r3, r1
 80004ca:	ea80 0202 	eor.w	r2, r0, r2
 80004ce:	ea81 0303 	eor.w	r3, r1, r3
 80004d2:	2d36      	cmp	r5, #54	@ 0x36
 80004d4:	bf88      	it	hi
 80004d6:	bd30      	pophi	{r4, r5, pc}
 80004d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e8:	d002      	beq.n	80004f0 <__adddf3+0x70>
 80004ea:	4240      	negs	r0, r0
 80004ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004fc:	d002      	beq.n	8000504 <__adddf3+0x84>
 80004fe:	4252      	negs	r2, r2
 8000500:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000504:	ea94 0f05 	teq	r4, r5
 8000508:	f000 80a7 	beq.w	800065a <__adddf3+0x1da>
 800050c:	f1a4 0401 	sub.w	r4, r4, #1
 8000510:	f1d5 0e20 	rsbs	lr, r5, #32
 8000514:	db0d      	blt.n	8000532 <__adddf3+0xb2>
 8000516:	fa02 fc0e 	lsl.w	ip, r2, lr
 800051a:	fa22 f205 	lsr.w	r2, r2, r5
 800051e:	1880      	adds	r0, r0, r2
 8000520:	f141 0100 	adc.w	r1, r1, #0
 8000524:	fa03 f20e 	lsl.w	r2, r3, lr
 8000528:	1880      	adds	r0, r0, r2
 800052a:	fa43 f305 	asr.w	r3, r3, r5
 800052e:	4159      	adcs	r1, r3
 8000530:	e00e      	b.n	8000550 <__adddf3+0xd0>
 8000532:	f1a5 0520 	sub.w	r5, r5, #32
 8000536:	f10e 0e20 	add.w	lr, lr, #32
 800053a:	2a01      	cmp	r2, #1
 800053c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000540:	bf28      	it	cs
 8000542:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000546:	fa43 f305 	asr.w	r3, r3, r5
 800054a:	18c0      	adds	r0, r0, r3
 800054c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000554:	d507      	bpl.n	8000566 <__adddf3+0xe6>
 8000556:	f04f 0e00 	mov.w	lr, #0
 800055a:	f1dc 0c00 	rsbs	ip, ip, #0
 800055e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000562:	eb6e 0101 	sbc.w	r1, lr, r1
 8000566:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800056a:	d31b      	bcc.n	80005a4 <__adddf3+0x124>
 800056c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000570:	d30c      	bcc.n	800058c <__adddf3+0x10c>
 8000572:	0849      	lsrs	r1, r1, #1
 8000574:	ea5f 0030 	movs.w	r0, r0, rrx
 8000578:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800057c:	f104 0401 	add.w	r4, r4, #1
 8000580:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000584:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000588:	f080 809a 	bcs.w	80006c0 <__adddf3+0x240>
 800058c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	ea41 0105 	orr.w	r1, r1, r5
 80005a2:	bd30      	pop	{r4, r5, pc}
 80005a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a8:	4140      	adcs	r0, r0
 80005aa:	eb41 0101 	adc.w	r1, r1, r1
 80005ae:	3c01      	subs	r4, #1
 80005b0:	bf28      	it	cs
 80005b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005b6:	d2e9      	bcs.n	800058c <__adddf3+0x10c>
 80005b8:	f091 0f00 	teq	r1, #0
 80005bc:	bf04      	itt	eq
 80005be:	4601      	moveq	r1, r0
 80005c0:	2000      	moveq	r0, #0
 80005c2:	fab1 f381 	clz	r3, r1
 80005c6:	bf08      	it	eq
 80005c8:	3320      	addeq	r3, #32
 80005ca:	f1a3 030b 	sub.w	r3, r3, #11
 80005ce:	f1b3 0220 	subs.w	r2, r3, #32
 80005d2:	da0c      	bge.n	80005ee <__adddf3+0x16e>
 80005d4:	320c      	adds	r2, #12
 80005d6:	dd08      	ble.n	80005ea <__adddf3+0x16a>
 80005d8:	f102 0c14 	add.w	ip, r2, #20
 80005dc:	f1c2 020c 	rsb	r2, r2, #12
 80005e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005e4:	fa21 f102 	lsr.w	r1, r1, r2
 80005e8:	e00c      	b.n	8000604 <__adddf3+0x184>
 80005ea:	f102 0214 	add.w	r2, r2, #20
 80005ee:	bfd8      	it	le
 80005f0:	f1c2 0c20 	rsble	ip, r2, #32
 80005f4:	fa01 f102 	lsl.w	r1, r1, r2
 80005f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005fc:	bfdc      	itt	le
 80005fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000602:	4090      	lslle	r0, r2
 8000604:	1ae4      	subs	r4, r4, r3
 8000606:	bfa2      	ittt	ge
 8000608:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800060c:	4329      	orrge	r1, r5
 800060e:	bd30      	popge	{r4, r5, pc}
 8000610:	ea6f 0404 	mvn.w	r4, r4
 8000614:	3c1f      	subs	r4, #31
 8000616:	da1c      	bge.n	8000652 <__adddf3+0x1d2>
 8000618:	340c      	adds	r4, #12
 800061a:	dc0e      	bgt.n	800063a <__adddf3+0x1ba>
 800061c:	f104 0414 	add.w	r4, r4, #20
 8000620:	f1c4 0220 	rsb	r2, r4, #32
 8000624:	fa20 f004 	lsr.w	r0, r0, r4
 8000628:	fa01 f302 	lsl.w	r3, r1, r2
 800062c:	ea40 0003 	orr.w	r0, r0, r3
 8000630:	fa21 f304 	lsr.w	r3, r1, r4
 8000634:	ea45 0103 	orr.w	r1, r5, r3
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	f1c4 040c 	rsb	r4, r4, #12
 800063e:	f1c4 0220 	rsb	r2, r4, #32
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 f304 	lsl.w	r3, r1, r4
 800064a:	ea40 0003 	orr.w	r0, r0, r3
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	fa21 f004 	lsr.w	r0, r1, r4
 8000656:	4629      	mov	r1, r5
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	f094 0f00 	teq	r4, #0
 800065e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000662:	bf06      	itte	eq
 8000664:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000668:	3401      	addeq	r4, #1
 800066a:	3d01      	subne	r5, #1
 800066c:	e74e      	b.n	800050c <__adddf3+0x8c>
 800066e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000672:	bf18      	it	ne
 8000674:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000678:	d029      	beq.n	80006ce <__adddf3+0x24e>
 800067a:	ea94 0f05 	teq	r4, r5
 800067e:	bf08      	it	eq
 8000680:	ea90 0f02 	teqeq	r0, r2
 8000684:	d005      	beq.n	8000692 <__adddf3+0x212>
 8000686:	ea54 0c00 	orrs.w	ip, r4, r0
 800068a:	bf04      	itt	eq
 800068c:	4619      	moveq	r1, r3
 800068e:	4610      	moveq	r0, r2
 8000690:	bd30      	pop	{r4, r5, pc}
 8000692:	ea91 0f03 	teq	r1, r3
 8000696:	bf1e      	ittt	ne
 8000698:	2100      	movne	r1, #0
 800069a:	2000      	movne	r0, #0
 800069c:	bd30      	popne	{r4, r5, pc}
 800069e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006a2:	d105      	bne.n	80006b0 <__adddf3+0x230>
 80006a4:	0040      	lsls	r0, r0, #1
 80006a6:	4149      	adcs	r1, r1
 80006a8:	bf28      	it	cs
 80006aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006ae:	bd30      	pop	{r4, r5, pc}
 80006b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006b4:	bf3c      	itt	cc
 80006b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006ba:	bd30      	popcc	{r4, r5, pc}
 80006bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd30      	pop	{r4, r5, pc}
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf1a      	itte	ne
 80006d4:	4619      	movne	r1, r3
 80006d6:	4610      	movne	r0, r2
 80006d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006dc:	bf1c      	itt	ne
 80006de:	460b      	movne	r3, r1
 80006e0:	4602      	movne	r2, r0
 80006e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006e6:	bf06      	itte	eq
 80006e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006ec:	ea91 0f03 	teqeq	r1, r3
 80006f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006f4:	bd30      	pop	{r4, r5, pc}
 80006f6:	bf00      	nop

080006f8 <__aeabi_ui2d>:
 80006f8:	f090 0f00 	teq	r0, #0
 80006fc:	bf04      	itt	eq
 80006fe:	2100      	moveq	r1, #0
 8000700:	4770      	bxeq	lr
 8000702:	b530      	push	{r4, r5, lr}
 8000704:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000708:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800070c:	f04f 0500 	mov.w	r5, #0
 8000710:	f04f 0100 	mov.w	r1, #0
 8000714:	e750      	b.n	80005b8 <__adddf3+0x138>
 8000716:	bf00      	nop

08000718 <__aeabi_i2d>:
 8000718:	f090 0f00 	teq	r0, #0
 800071c:	bf04      	itt	eq
 800071e:	2100      	moveq	r1, #0
 8000720:	4770      	bxeq	lr
 8000722:	b530      	push	{r4, r5, lr}
 8000724:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000728:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800072c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000730:	bf48      	it	mi
 8000732:	4240      	negmi	r0, r0
 8000734:	f04f 0100 	mov.w	r1, #0
 8000738:	e73e      	b.n	80005b8 <__adddf3+0x138>
 800073a:	bf00      	nop

0800073c <__aeabi_f2d>:
 800073c:	0042      	lsls	r2, r0, #1
 800073e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000742:	ea4f 0131 	mov.w	r1, r1, rrx
 8000746:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800074a:	bf1f      	itttt	ne
 800074c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000750:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000754:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000758:	4770      	bxne	lr
 800075a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800075e:	bf08      	it	eq
 8000760:	4770      	bxeq	lr
 8000762:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000766:	bf04      	itt	eq
 8000768:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800076c:	4770      	bxeq	lr
 800076e:	b530      	push	{r4, r5, lr}
 8000770:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000774:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000778:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	e71c      	b.n	80005b8 <__adddf3+0x138>
 800077e:	bf00      	nop

08000780 <__aeabi_ul2d>:
 8000780:	ea50 0201 	orrs.w	r2, r0, r1
 8000784:	bf08      	it	eq
 8000786:	4770      	bxeq	lr
 8000788:	b530      	push	{r4, r5, lr}
 800078a:	f04f 0500 	mov.w	r5, #0
 800078e:	e00a      	b.n	80007a6 <__aeabi_l2d+0x16>

08000790 <__aeabi_l2d>:
 8000790:	ea50 0201 	orrs.w	r2, r0, r1
 8000794:	bf08      	it	eq
 8000796:	4770      	bxeq	lr
 8000798:	b530      	push	{r4, r5, lr}
 800079a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800079e:	d502      	bpl.n	80007a6 <__aeabi_l2d+0x16>
 80007a0:	4240      	negs	r0, r0
 80007a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007b2:	f43f aed8 	beq.w	8000566 <__adddf3+0xe6>
 80007b6:	f04f 0203 	mov.w	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c6:	bf18      	it	ne
 80007c8:	3203      	addne	r2, #3
 80007ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007ce:	f1c2 0320 	rsb	r3, r2, #32
 80007d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007d6:	fa20 f002 	lsr.w	r0, r0, r2
 80007da:	fa01 fe03 	lsl.w	lr, r1, r3
 80007de:	ea40 000e 	orr.w	r0, r0, lr
 80007e2:	fa21 f102 	lsr.w	r1, r1, r2
 80007e6:	4414      	add	r4, r2
 80007e8:	e6bd      	b.n	8000566 <__adddf3+0xe6>
 80007ea:	bf00      	nop

080007ec <__aeabi_d2f>:
 80007ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80007f4:	bf24      	itt	cs
 80007f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80007fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80007fe:	d90d      	bls.n	800081c <__aeabi_d2f+0x30>
 8000800:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000804:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000808:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800080c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000810:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000814:	bf08      	it	eq
 8000816:	f020 0001 	biceq.w	r0, r0, #1
 800081a:	4770      	bx	lr
 800081c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000820:	d121      	bne.n	8000866 <__aeabi_d2f+0x7a>
 8000822:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000826:	bfbc      	itt	lt
 8000828:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800082c:	4770      	bxlt	lr
 800082e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000832:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000836:	f1c2 0218 	rsb	r2, r2, #24
 800083a:	f1c2 0c20 	rsb	ip, r2, #32
 800083e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000842:	fa20 f002 	lsr.w	r0, r0, r2
 8000846:	bf18      	it	ne
 8000848:	f040 0001 	orrne.w	r0, r0, #1
 800084c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000850:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000854:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000858:	ea40 000c 	orr.w	r0, r0, ip
 800085c:	fa23 f302 	lsr.w	r3, r3, r2
 8000860:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000864:	e7cc      	b.n	8000800 <__aeabi_d2f+0x14>
 8000866:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800086a:	d107      	bne.n	800087c <__aeabi_d2f+0x90>
 800086c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000870:	bf1e      	ittt	ne
 8000872:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000876:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800087a:	4770      	bxne	lr
 800087c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000880:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000884:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b96a 	b.w	8000b78 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	460c      	mov	r4, r1
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d14e      	bne.n	8000966 <__udivmoddi4+0xaa>
 80008c8:	4694      	mov	ip, r2
 80008ca:	458c      	cmp	ip, r1
 80008cc:	4686      	mov	lr, r0
 80008ce:	fab2 f282 	clz	r2, r2
 80008d2:	d962      	bls.n	800099a <__udivmoddi4+0xde>
 80008d4:	b14a      	cbz	r2, 80008ea <__udivmoddi4+0x2e>
 80008d6:	f1c2 0320 	rsb	r3, r2, #32
 80008da:	4091      	lsls	r1, r2
 80008dc:	fa20 f303 	lsr.w	r3, r0, r3
 80008e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008e4:	4319      	orrs	r1, r3
 80008e6:	fa00 fe02 	lsl.w	lr, r0, r2
 80008ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008ee:	fa1f f68c 	uxth.w	r6, ip
 80008f2:	fbb1 f4f7 	udiv	r4, r1, r7
 80008f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008fa:	fb07 1114 	mls	r1, r7, r4, r1
 80008fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000902:	fb04 f106 	mul.w	r1, r4, r6
 8000906:	4299      	cmp	r1, r3
 8000908:	d90a      	bls.n	8000920 <__udivmoddi4+0x64>
 800090a:	eb1c 0303 	adds.w	r3, ip, r3
 800090e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000912:	f080 8112 	bcs.w	8000b3a <__udivmoddi4+0x27e>
 8000916:	4299      	cmp	r1, r3
 8000918:	f240 810f 	bls.w	8000b3a <__udivmoddi4+0x27e>
 800091c:	3c02      	subs	r4, #2
 800091e:	4463      	add	r3, ip
 8000920:	1a59      	subs	r1, r3, r1
 8000922:	fa1f f38e 	uxth.w	r3, lr
 8000926:	fbb1 f0f7 	udiv	r0, r1, r7
 800092a:	fb07 1110 	mls	r1, r7, r0, r1
 800092e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000932:	fb00 f606 	mul.w	r6, r0, r6
 8000936:	429e      	cmp	r6, r3
 8000938:	d90a      	bls.n	8000950 <__udivmoddi4+0x94>
 800093a:	eb1c 0303 	adds.w	r3, ip, r3
 800093e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000942:	f080 80fc 	bcs.w	8000b3e <__udivmoddi4+0x282>
 8000946:	429e      	cmp	r6, r3
 8000948:	f240 80f9 	bls.w	8000b3e <__udivmoddi4+0x282>
 800094c:	4463      	add	r3, ip
 800094e:	3802      	subs	r0, #2
 8000950:	1b9b      	subs	r3, r3, r6
 8000952:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000956:	2100      	movs	r1, #0
 8000958:	b11d      	cbz	r5, 8000962 <__udivmoddi4+0xa6>
 800095a:	40d3      	lsrs	r3, r2
 800095c:	2200      	movs	r2, #0
 800095e:	e9c5 3200 	strd	r3, r2, [r5]
 8000962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000966:	428b      	cmp	r3, r1
 8000968:	d905      	bls.n	8000976 <__udivmoddi4+0xba>
 800096a:	b10d      	cbz	r5, 8000970 <__udivmoddi4+0xb4>
 800096c:	e9c5 0100 	strd	r0, r1, [r5]
 8000970:	2100      	movs	r1, #0
 8000972:	4608      	mov	r0, r1
 8000974:	e7f5      	b.n	8000962 <__udivmoddi4+0xa6>
 8000976:	fab3 f183 	clz	r1, r3
 800097a:	2900      	cmp	r1, #0
 800097c:	d146      	bne.n	8000a0c <__udivmoddi4+0x150>
 800097e:	42a3      	cmp	r3, r4
 8000980:	d302      	bcc.n	8000988 <__udivmoddi4+0xcc>
 8000982:	4290      	cmp	r0, r2
 8000984:	f0c0 80f0 	bcc.w	8000b68 <__udivmoddi4+0x2ac>
 8000988:	1a86      	subs	r6, r0, r2
 800098a:	eb64 0303 	sbc.w	r3, r4, r3
 800098e:	2001      	movs	r0, #1
 8000990:	2d00      	cmp	r5, #0
 8000992:	d0e6      	beq.n	8000962 <__udivmoddi4+0xa6>
 8000994:	e9c5 6300 	strd	r6, r3, [r5]
 8000998:	e7e3      	b.n	8000962 <__udivmoddi4+0xa6>
 800099a:	2a00      	cmp	r2, #0
 800099c:	f040 8090 	bne.w	8000ac0 <__udivmoddi4+0x204>
 80009a0:	eba1 040c 	sub.w	r4, r1, ip
 80009a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009a8:	fa1f f78c 	uxth.w	r7, ip
 80009ac:	2101      	movs	r1, #1
 80009ae:	fbb4 f6f8 	udiv	r6, r4, r8
 80009b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009b6:	fb08 4416 	mls	r4, r8, r6, r4
 80009ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009be:	fb07 f006 	mul.w	r0, r7, r6
 80009c2:	4298      	cmp	r0, r3
 80009c4:	d908      	bls.n	80009d8 <__udivmoddi4+0x11c>
 80009c6:	eb1c 0303 	adds.w	r3, ip, r3
 80009ca:	f106 34ff 	add.w	r4, r6, #4294967295
 80009ce:	d202      	bcs.n	80009d6 <__udivmoddi4+0x11a>
 80009d0:	4298      	cmp	r0, r3
 80009d2:	f200 80cd 	bhi.w	8000b70 <__udivmoddi4+0x2b4>
 80009d6:	4626      	mov	r6, r4
 80009d8:	1a1c      	subs	r4, r3, r0
 80009da:	fa1f f38e 	uxth.w	r3, lr
 80009de:	fbb4 f0f8 	udiv	r0, r4, r8
 80009e2:	fb08 4410 	mls	r4, r8, r0, r4
 80009e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009ea:	fb00 f707 	mul.w	r7, r0, r7
 80009ee:	429f      	cmp	r7, r3
 80009f0:	d908      	bls.n	8000a04 <__udivmoddi4+0x148>
 80009f2:	eb1c 0303 	adds.w	r3, ip, r3
 80009f6:	f100 34ff 	add.w	r4, r0, #4294967295
 80009fa:	d202      	bcs.n	8000a02 <__udivmoddi4+0x146>
 80009fc:	429f      	cmp	r7, r3
 80009fe:	f200 80b0 	bhi.w	8000b62 <__udivmoddi4+0x2a6>
 8000a02:	4620      	mov	r0, r4
 8000a04:	1bdb      	subs	r3, r3, r7
 8000a06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a0a:	e7a5      	b.n	8000958 <__udivmoddi4+0x9c>
 8000a0c:	f1c1 0620 	rsb	r6, r1, #32
 8000a10:	408b      	lsls	r3, r1
 8000a12:	fa22 f706 	lsr.w	r7, r2, r6
 8000a16:	431f      	orrs	r7, r3
 8000a18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a20:	ea43 030c 	orr.w	r3, r3, ip
 8000a24:	40f4      	lsrs	r4, r6
 8000a26:	fa00 f801 	lsl.w	r8, r0, r1
 8000a2a:	0c38      	lsrs	r0, r7, #16
 8000a2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a30:	fbb4 fef0 	udiv	lr, r4, r0
 8000a34:	fa1f fc87 	uxth.w	ip, r7
 8000a38:	fb00 441e 	mls	r4, r0, lr, r4
 8000a3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a40:	fb0e f90c 	mul.w	r9, lr, ip
 8000a44:	45a1      	cmp	r9, r4
 8000a46:	fa02 f201 	lsl.w	r2, r2, r1
 8000a4a:	d90a      	bls.n	8000a62 <__udivmoddi4+0x1a6>
 8000a4c:	193c      	adds	r4, r7, r4
 8000a4e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a52:	f080 8084 	bcs.w	8000b5e <__udivmoddi4+0x2a2>
 8000a56:	45a1      	cmp	r9, r4
 8000a58:	f240 8081 	bls.w	8000b5e <__udivmoddi4+0x2a2>
 8000a5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a60:	443c      	add	r4, r7
 8000a62:	eba4 0409 	sub.w	r4, r4, r9
 8000a66:	fa1f f983 	uxth.w	r9, r3
 8000a6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a7a:	45a4      	cmp	ip, r4
 8000a7c:	d907      	bls.n	8000a8e <__udivmoddi4+0x1d2>
 8000a7e:	193c      	adds	r4, r7, r4
 8000a80:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a84:	d267      	bcs.n	8000b56 <__udivmoddi4+0x29a>
 8000a86:	45a4      	cmp	ip, r4
 8000a88:	d965      	bls.n	8000b56 <__udivmoddi4+0x29a>
 8000a8a:	3b02      	subs	r3, #2
 8000a8c:	443c      	add	r4, r7
 8000a8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a92:	fba0 9302 	umull	r9, r3, r0, r2
 8000a96:	eba4 040c 	sub.w	r4, r4, ip
 8000a9a:	429c      	cmp	r4, r3
 8000a9c:	46ce      	mov	lr, r9
 8000a9e:	469c      	mov	ip, r3
 8000aa0:	d351      	bcc.n	8000b46 <__udivmoddi4+0x28a>
 8000aa2:	d04e      	beq.n	8000b42 <__udivmoddi4+0x286>
 8000aa4:	b155      	cbz	r5, 8000abc <__udivmoddi4+0x200>
 8000aa6:	ebb8 030e 	subs.w	r3, r8, lr
 8000aaa:	eb64 040c 	sbc.w	r4, r4, ip
 8000aae:	fa04 f606 	lsl.w	r6, r4, r6
 8000ab2:	40cb      	lsrs	r3, r1
 8000ab4:	431e      	orrs	r6, r3
 8000ab6:	40cc      	lsrs	r4, r1
 8000ab8:	e9c5 6400 	strd	r6, r4, [r5]
 8000abc:	2100      	movs	r1, #0
 8000abe:	e750      	b.n	8000962 <__udivmoddi4+0xa6>
 8000ac0:	f1c2 0320 	rsb	r3, r2, #32
 8000ac4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ac8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000acc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ad0:	4094      	lsls	r4, r2
 8000ad2:	430c      	orrs	r4, r1
 8000ad4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000adc:	fa1f f78c 	uxth.w	r7, ip
 8000ae0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ae4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ae8:	0c23      	lsrs	r3, r4, #16
 8000aea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aee:	fb00 f107 	mul.w	r1, r0, r7
 8000af2:	4299      	cmp	r1, r3
 8000af4:	d908      	bls.n	8000b08 <__udivmoddi4+0x24c>
 8000af6:	eb1c 0303 	adds.w	r3, ip, r3
 8000afa:	f100 36ff 	add.w	r6, r0, #4294967295
 8000afe:	d22c      	bcs.n	8000b5a <__udivmoddi4+0x29e>
 8000b00:	4299      	cmp	r1, r3
 8000b02:	d92a      	bls.n	8000b5a <__udivmoddi4+0x29e>
 8000b04:	3802      	subs	r0, #2
 8000b06:	4463      	add	r3, ip
 8000b08:	1a5b      	subs	r3, r3, r1
 8000b0a:	b2a4      	uxth	r4, r4
 8000b0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b10:	fb08 3311 	mls	r3, r8, r1, r3
 8000b14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b18:	fb01 f307 	mul.w	r3, r1, r7
 8000b1c:	42a3      	cmp	r3, r4
 8000b1e:	d908      	bls.n	8000b32 <__udivmoddi4+0x276>
 8000b20:	eb1c 0404 	adds.w	r4, ip, r4
 8000b24:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b28:	d213      	bcs.n	8000b52 <__udivmoddi4+0x296>
 8000b2a:	42a3      	cmp	r3, r4
 8000b2c:	d911      	bls.n	8000b52 <__udivmoddi4+0x296>
 8000b2e:	3902      	subs	r1, #2
 8000b30:	4464      	add	r4, ip
 8000b32:	1ae4      	subs	r4, r4, r3
 8000b34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b38:	e739      	b.n	80009ae <__udivmoddi4+0xf2>
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	e6f0      	b.n	8000920 <__udivmoddi4+0x64>
 8000b3e:	4608      	mov	r0, r1
 8000b40:	e706      	b.n	8000950 <__udivmoddi4+0x94>
 8000b42:	45c8      	cmp	r8, r9
 8000b44:	d2ae      	bcs.n	8000aa4 <__udivmoddi4+0x1e8>
 8000b46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b4e:	3801      	subs	r0, #1
 8000b50:	e7a8      	b.n	8000aa4 <__udivmoddi4+0x1e8>
 8000b52:	4631      	mov	r1, r6
 8000b54:	e7ed      	b.n	8000b32 <__udivmoddi4+0x276>
 8000b56:	4603      	mov	r3, r0
 8000b58:	e799      	b.n	8000a8e <__udivmoddi4+0x1d2>
 8000b5a:	4630      	mov	r0, r6
 8000b5c:	e7d4      	b.n	8000b08 <__udivmoddi4+0x24c>
 8000b5e:	46d6      	mov	lr, sl
 8000b60:	e77f      	b.n	8000a62 <__udivmoddi4+0x1a6>
 8000b62:	4463      	add	r3, ip
 8000b64:	3802      	subs	r0, #2
 8000b66:	e74d      	b.n	8000a04 <__udivmoddi4+0x148>
 8000b68:	4606      	mov	r6, r0
 8000b6a:	4623      	mov	r3, r4
 8000b6c:	4608      	mov	r0, r1
 8000b6e:	e70f      	b.n	8000990 <__udivmoddi4+0xd4>
 8000b70:	3e02      	subs	r6, #2
 8000b72:	4463      	add	r3, ip
 8000b74:	e730      	b.n	80009d8 <__udivmoddi4+0x11c>
 8000b76:	bf00      	nop

08000b78 <__aeabi_idiv0>:
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <bmi160_get_regs>:
/*!
 * @brief This API reads the data from the given register address
 * of sensor.
 */
int8_t bmi160_get_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 8000b7c:	b590      	push	{r4, r7, lr}
 8000b7e:	b087      	sub	sp, #28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60b9      	str	r1, [r7, #8]
 8000b84:	607b      	str	r3, [r7, #4]
 8000b86:	4603      	mov	r3, r0
 8000b88:	73fb      	strb	r3, [r7, #15]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	75fb      	strb	r3, [r7, #23]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->read == NULL))
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d003      	beq.n	8000ba0 <bmi160_get_regs+0x24>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	69db      	ldr	r3, [r3, #28]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d102      	bne.n	8000ba6 <bmi160_get_regs+0x2a>
    {
        rslt = BMI160_E_NULL_PTR;
 8000ba0:	23ff      	movs	r3, #255	@ 0xff
 8000ba2:	75fb      	strb	r3, [r7, #23]
 8000ba4:	e017      	b.n	8000bd6 <bmi160_get_regs+0x5a>
    }
    else if (len == 0)
 8000ba6:	89bb      	ldrh	r3, [r7, #12]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d102      	bne.n	8000bb2 <bmi160_get_regs+0x36>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 8000bac:	23f4      	movs	r3, #244	@ 0xf4
 8000bae:	75fb      	strb	r3, [r7, #23]
 8000bb0:	e011      	b.n	8000bd6 <bmi160_get_regs+0x5a>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	789b      	ldrb	r3, [r3, #2]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d103      	bne.n	8000bc2 <bmi160_get_regs+0x46>
        {
            reg_addr = (reg_addr | BMI160_SPI_RD_MASK);
 8000bba:	7bfb      	ldrb	r3, [r7, #15]
 8000bbc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000bc0:	73fb      	strb	r3, [r7, #15]
        }

        rslt = dev->read(dev->id, reg_addr, data, len);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	69dc      	ldr	r4, [r3, #28]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	7858      	ldrb	r0, [r3, #1]
 8000bca:	89bb      	ldrh	r3, [r7, #12]
 8000bcc:	7bf9      	ldrb	r1, [r7, #15]
 8000bce:	68ba      	ldr	r2, [r7, #8]
 8000bd0:	47a0      	blx	r4
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000bd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	371c      	adds	r7, #28
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd90      	pop	{r4, r7, pc}

08000be2 <bmi160_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of sensor.
 */
int8_t bmi160_set_regs(uint8_t reg_addr, uint8_t *data, uint16_t len, const struct bmi160_dev *dev)
{
 8000be2:	b590      	push	{r4, r7, lr}
 8000be4:	b087      	sub	sp, #28
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	60b9      	str	r1, [r7, #8]
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	4603      	mov	r3, r0
 8000bee:	73fb      	strb	r3, [r7, #15]
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	81bb      	strh	r3, [r7, #12]
    int8_t rslt = BMI160_OK;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	75fb      	strb	r3, [r7, #23]
    uint8_t count = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	75bb      	strb	r3, [r7, #22]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->write == NULL))
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d003      	beq.n	8000c0a <bmi160_set_regs+0x28>
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6a1b      	ldr	r3, [r3, #32]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d102      	bne.n	8000c10 <bmi160_set_regs+0x2e>
    {
        rslt = BMI160_E_NULL_PTR;
 8000c0a:	23ff      	movs	r3, #255	@ 0xff
 8000c0c:	75fb      	strb	r3, [r7, #23]
 8000c0e:	e045      	b.n	8000c9c <bmi160_set_regs+0xba>
    }
    else if (len == 0)
 8000c10:	89bb      	ldrh	r3, [r7, #12]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d102      	bne.n	8000c1c <bmi160_set_regs+0x3a>
    {
        rslt = BMI160_E_READ_WRITE_LENGTH_INVALID;
 8000c16:	23f4      	movs	r3, #244	@ 0xf4
 8000c18:	75fb      	strb	r3, [r7, #23]
 8000c1a:	e03f      	b.n	8000c9c <bmi160_set_regs+0xba>
    }
    else
    {
        /* Configuring reg_addr for SPI Interface */
        if (dev->intf == BMI160_SPI_INTF)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	789b      	ldrb	r3, [r3, #2]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d103      	bne.n	8000c2c <bmi160_set_regs+0x4a>
        {
            reg_addr = (reg_addr & BMI160_SPI_WR_MASK);
 8000c24:	7bfb      	ldrb	r3, [r7, #15]
 8000c26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000c2a:	73fb      	strb	r3, [r7, #15]
        }

        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	7a1b      	ldrb	r3, [r3, #8]
 8000c30:	2b11      	cmp	r3, #17
 8000c32:	d003      	beq.n	8000c3c <bmi160_set_regs+0x5a>
            (dev->prev_gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	7c1b      	ldrb	r3, [r3, #16]
        if ((dev->prev_accel_cfg.power == BMI160_ACCEL_NORMAL_MODE) ||
 8000c38:	2b15      	cmp	r3, #21
 8000c3a:	d124      	bne.n	8000c86 <bmi160_set_regs+0xa4>
        {
            rslt = dev->write(dev->id, reg_addr, data, len);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	6a1c      	ldr	r4, [r3, #32]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	7858      	ldrb	r0, [r3, #1]
 8000c44:	89bb      	ldrh	r3, [r7, #12]
 8000c46:	7bf9      	ldrb	r1, [r7, #15]
 8000c48:	68ba      	ldr	r2, [r7, #8]
 8000c4a:	47a0      	blx	r4
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	75fb      	strb	r3, [r7, #23]

            /* Kindly refer bmi160 data sheet section 3.2.4 */
            dev->delay_ms(1);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c54:	2001      	movs	r0, #1
 8000c56:	4798      	blx	r3
 8000c58:	e01a      	b.n	8000c90 <bmi160_set_regs+0xae>
        {
            /*Burst write is not allowed in
             * suspend & low power mode */
            for (; count < len; count++)
            {
                rslt = dev->write(dev->id, reg_addr, &data[count], 1);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6a1c      	ldr	r4, [r3, #32]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	7858      	ldrb	r0, [r3, #1]
 8000c62:	7dbb      	ldrb	r3, [r7, #22]
 8000c64:	68ba      	ldr	r2, [r7, #8]
 8000c66:	441a      	add	r2, r3
 8000c68:	7bf9      	ldrb	r1, [r7, #15]
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	47a0      	blx	r4
 8000c6e:	4603      	mov	r3, r0
 8000c70:	75fb      	strb	r3, [r7, #23]
                reg_addr++;
 8000c72:	7bfb      	ldrb	r3, [r7, #15]
 8000c74:	3301      	adds	r3, #1
 8000c76:	73fb      	strb	r3, [r7, #15]

                /* Kindly refer bmi160 data sheet section 3.2.4 */
                dev->delay_ms(1);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	4798      	blx	r3
            for (; count < len; count++)
 8000c80:	7dbb      	ldrb	r3, [r7, #22]
 8000c82:	3301      	adds	r3, #1
 8000c84:	75bb      	strb	r3, [r7, #22]
 8000c86:	7dbb      	ldrb	r3, [r7, #22]
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	89ba      	ldrh	r2, [r7, #12]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d8e4      	bhi.n	8000c5a <bmi160_set_regs+0x78>

            }
        }

        if (rslt != BMI160_OK)
 8000c90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <bmi160_set_regs+0xba>
        {
            rslt = BMI160_E_COM_FAIL;
 8000c98:	23fe      	movs	r3, #254	@ 0xfe
 8000c9a:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8000c9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	371c      	adds	r7, #28
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd90      	pop	{r4, r7, pc}

08000ca8 <bmi160_init>:
 *  @brief This API is the entry point for sensor.It performs
 *  the selection of I2C/SPI read mechanism according to the
 *  selected interface and reads the chip-id of bmi160 sensor.
 */
int8_t bmi160_init(struct bmi160_dev *dev)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data;
    uint8_t try = 3;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f000 fd33 	bl	8001720 <null_ptr_check>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	73fb      	strb	r3, [r7, #15]

    /* Dummy read of 0x7F register to enable SPI Interface
     * if SPI is used */
    if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 8000cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d10c      	bne.n	8000ce0 <bmi160_init+0x38>
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	789b      	ldrb	r3, [r3, #2]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d108      	bne.n	8000ce0 <bmi160_init+0x38>
    {
        rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 8000cce:	f107 010d 	add.w	r1, r7, #13
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	207f      	movs	r0, #127	@ 0x7f
 8000cd8:	f7ff ff50 	bl	8000b7c <bmi160_get_regs>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	73fb      	strb	r3, [r7, #15]
    }

    if (rslt == BMI160_OK)
 8000ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d127      	bne.n	8000d38 <bmi160_init+0x90>
    {
        /* Assign chip id as zero */
        dev->chip_id = 0;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2200      	movs	r2, #0
 8000cec:	701a      	strb	r2, [r3, #0]

        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 8000cee:	e007      	b.n	8000d00 <bmi160_init+0x58>
        {
            /* Read chip_id */
            rslt = bmi160_get_regs(BMI160_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 8000cf0:	6879      	ldr	r1, [r7, #4]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f7ff ff40 	bl	8000b7c <bmi160_get_regs>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	73fb      	strb	r3, [r7, #15]
        while ((try--) && (dev->chip_id != BMI160_CHIP_ID))
 8000d00:	7bbb      	ldrb	r3, [r7, #14]
 8000d02:	1e5a      	subs	r2, r3, #1
 8000d04:	73ba      	strb	r2, [r7, #14]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d003      	beq.n	8000d12 <bmi160_init+0x6a>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2bd1      	cmp	r3, #209	@ 0xd1
 8000d10:	d1ee      	bne.n	8000cf0 <bmi160_init+0x48>
        }

        if ((rslt == BMI160_OK) && (dev->chip_id == BMI160_CHIP_ID))
 8000d12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d10c      	bne.n	8000d34 <bmi160_init+0x8c>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2bd1      	cmp	r3, #209	@ 0xd1
 8000d20:	d108      	bne.n	8000d34 <bmi160_init+0x8c>
        {
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	22ff      	movs	r2, #255	@ 0xff
 8000d26:	70da      	strb	r2, [r3, #3]

            /* Soft reset */
            rslt = bmi160_soft_reset(dev);
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f000 f80b 	bl	8000d44 <bmi160_soft_reset>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	73fb      	strb	r3, [r7, #15]
 8000d32:	e001      	b.n	8000d38 <bmi160_init+0x90>
        }
        else
        {
            rslt = BMI160_E_DEV_NOT_FOUND;
 8000d34:	23fd      	movs	r3, #253	@ 0xfd
 8000d36:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8000d38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3710      	adds	r7, #16
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <bmi160_soft_reset>:
/*!
 * @brief This API resets and restarts the device.
 * All register values are overwritten with default parameters.
 */
int8_t bmi160_soft_reset(struct bmi160_dev *dev)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = BMI160_SOFT_RESET_CMD;
 8000d4c:	23b6      	movs	r3, #182	@ 0xb6
 8000d4e:	73bb      	strb	r3, [r7, #14]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d003      	beq.n	8000d5e <bmi160_soft_reset+0x1a>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d102      	bne.n	8000d64 <bmi160_soft_reset+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 8000d5e:	23ff      	movs	r3, #255	@ 0xff
 8000d60:	73fb      	strb	r3, [r7, #15]
 8000d62:	e024      	b.n	8000dae <bmi160_soft_reset+0x6a>
    }
    else
    {
        /* Reset the device */
        rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &data, 1, dev);
 8000d64:	f107 010e 	add.w	r1, r7, #14
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	207e      	movs	r0, #126	@ 0x7e
 8000d6e:	f7ff ff38 	bl	8000be2 <bmi160_set_regs>
 8000d72:	4603      	mov	r3, r0
 8000d74:	73fb      	strb	r3, [r7, #15]
        dev->delay_ms(BMI160_SOFT_RESET_DELAY_MS);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	4798      	blx	r3
        if ((rslt == BMI160_OK) && (dev->intf == BMI160_SPI_INTF))
 8000d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d10c      	bne.n	8000da0 <bmi160_soft_reset+0x5c>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	789b      	ldrb	r3, [r3, #2]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d108      	bne.n	8000da0 <bmi160_soft_reset+0x5c>
        {
            /* Dummy read of 0x7F register to enable SPI Interface
             * if SPI is used */
            rslt = bmi160_get_regs(BMI160_SPI_COMM_TEST_ADDR, &data, 1, dev);
 8000d8e:	f107 010e 	add.w	r1, r7, #14
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	2201      	movs	r2, #1
 8000d96:	207f      	movs	r0, #127	@ 0x7f
 8000d98:	f7ff fef0 	bl	8000b7c <bmi160_get_regs>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	73fb      	strb	r3, [r7, #15]
        }

        if (rslt == BMI160_OK)
 8000da0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d102      	bne.n	8000dae <bmi160_soft_reset+0x6a>
        {
            /* Update the default parameters */
            default_param_settg(dev);
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f000 fcd9 	bl	8001760 <default_param_settg>
        }
    }

    return rslt;
 8000dae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <bmi160_set_sens_conf>:
/*!
 * @brief This API configures the power mode, range and bandwidth
 * of sensor.
 */
int8_t bmi160_set_sens_conf(struct bmi160_dev *dev)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b084      	sub	sp, #16
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
    int8_t rslt = BMI160_OK;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d003      	beq.n	8000dd4 <bmi160_set_sens_conf+0x1a>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d102      	bne.n	8000dda <bmi160_set_sens_conf+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 8000dd4:	23ff      	movs	r3, #255	@ 0xff
 8000dd6:	73fb      	strb	r3, [r7, #15]
 8000dd8:	e01f      	b.n	8000e1a <bmi160_set_sens_conf+0x60>
    }
    else
    {
        rslt = set_accel_conf(dev);
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f000 fcea 	bl	80017b4 <set_accel_conf>
 8000de0:	4603      	mov	r3, r0
 8000de2:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8000de4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d116      	bne.n	8000e1a <bmi160_set_sens_conf+0x60>
        {
            rslt = set_gyro_conf(dev);
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f000 fe25 	bl	8001a3c <set_gyro_conf>
 8000df2:	4603      	mov	r3, r0
 8000df4:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8000df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d10d      	bne.n	8000e1a <bmi160_set_sens_conf+0x60>
            {
                /* write power mode for accel and gyro */
                rslt = bmi160_set_power_mode(dev);
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f000 f811 	bl	8000e26 <bmi160_set_power_mode>
 8000e04:	4603      	mov	r3, r0
 8000e06:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8000e08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d104      	bne.n	8000e1a <bmi160_set_sens_conf+0x60>
                {
                    rslt = check_invalid_settg(dev);
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f000 fdde 	bl	80019d2 <check_invalid_settg>
 8000e16:	4603      	mov	r3, r0
 8000e18:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8000e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <bmi160_set_power_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bmi160_set_power_mode(struct bmi160_dev *dev)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b084      	sub	sp, #16
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d003      	beq.n	8000e40 <bmi160_set_power_mode+0x1a>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d102      	bne.n	8000e46 <bmi160_set_power_mode+0x20>
    {
        rslt = BMI160_E_NULL_PTR;
 8000e40:	23ff      	movs	r3, #255	@ 0xff
 8000e42:	73fb      	strb	r3, [r7, #15]
 8000e44:	e00d      	b.n	8000e62 <bmi160_set_power_mode+0x3c>
    }
    else
    {
        rslt = set_accel_pwr(dev);
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f000 ff01 	bl	8001c4e <set_accel_pwr>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8000e50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d104      	bne.n	8000e62 <bmi160_set_power_mode+0x3c>
        {
            rslt = set_gyro_pwr(dev);
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f000 ff8f 	bl	8001d7c <set_gyro_pwr>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8000e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <bmi160_get_sensor_data>:
 */
int8_t bmi160_get_sensor_data(uint8_t select_sensor,
                              struct bmi160_sensor_data *accel,
                              struct bmi160_sensor_data *gyro,
                              const struct bmi160_dev *dev)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b086      	sub	sp, #24
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
 8000e78:	603b      	str	r3, [r7, #0]
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BMI160_OK;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	75fb      	strb	r3, [r7, #23]
    uint8_t time_sel;
    uint8_t sen_sel;
    uint8_t len = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	75bb      	strb	r3, [r7, #22]

    /*Extract the sensor  and time select information*/
    sen_sel = select_sensor & BMI160_SEN_SEL_MASK;
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	f003 0307 	and.w	r3, r3, #7
 8000e8c:	757b      	strb	r3, [r7, #21]
    time_sel = ((sen_sel & BMI160_TIME_SEL) >> 2);
 8000e8e:	7d7b      	ldrb	r3, [r7, #21]
 8000e90:	109b      	asrs	r3, r3, #2
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	f003 0301 	and.w	r3, r3, #1
 8000e98:	753b      	strb	r3, [r7, #20]
    sen_sel = sen_sel & (BMI160_ACCEL_SEL | BMI160_GYRO_SEL);
 8000e9a:	7d7b      	ldrb	r3, [r7, #21]
 8000e9c:	f003 0303 	and.w	r3, r3, #3
 8000ea0:	757b      	strb	r3, [r7, #21]
    if (time_sel == 1)
 8000ea2:	7d3b      	ldrb	r3, [r7, #20]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d101      	bne.n	8000eac <bmi160_get_sensor_data+0x3e>
    {
        len = 3;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	75bb      	strb	r3, [r7, #22]
    }

    /* Null-pointer check */
    if (dev != NULL)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d03c      	beq.n	8000f2c <bmi160_get_sensor_data+0xbe>
    {
        switch (sen_sel)
 8000eb2:	7d7b      	ldrb	r3, [r7, #21]
 8000eb4:	2b03      	cmp	r3, #3
 8000eb6:	d024      	beq.n	8000f02 <bmi160_get_sensor_data+0x94>
 8000eb8:	2b03      	cmp	r3, #3
 8000eba:	dc34      	bgt.n	8000f26 <bmi160_get_sensor_data+0xb8>
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d002      	beq.n	8000ec6 <bmi160_get_sensor_data+0x58>
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d00f      	beq.n	8000ee4 <bmi160_get_sensor_data+0x76>
 8000ec4:	e02f      	b.n	8000f26 <bmi160_get_sensor_data+0xb8>
        {
            case BMI160_ACCEL_ONLY:

                /* Null-pointer check */
                if (accel == NULL)
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d102      	bne.n	8000ed2 <bmi160_get_sensor_data+0x64>
                {
                    rslt = BMI160_E_NULL_PTR;
 8000ecc:	23ff      	movs	r3, #255	@ 0xff
 8000ece:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_accel_data(len, accel, dev);
                }

                break;
 8000ed0:	e02e      	b.n	8000f30 <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_data(len, accel, dev);
 8000ed2:	7dbb      	ldrb	r3, [r7, #22]
 8000ed4:	683a      	ldr	r2, [r7, #0]
 8000ed6:	68b9      	ldr	r1, [r7, #8]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f000 ff93 	bl	8001e04 <get_accel_data>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	75fb      	strb	r3, [r7, #23]
                break;
 8000ee2:	e025      	b.n	8000f30 <bmi160_get_sensor_data+0xc2>
            case BMI160_GYRO_ONLY:

                /* Null-pointer check */
                if (gyro == NULL)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d102      	bne.n	8000ef0 <bmi160_get_sensor_data+0x82>
                {
                    rslt = BMI160_E_NULL_PTR;
 8000eea:	23ff      	movs	r3, #255	@ 0xff
 8000eec:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_gyro_data(len, gyro, dev);
                }

                break;
 8000eee:	e01f      	b.n	8000f30 <bmi160_get_sensor_data+0xc2>
                    rslt = get_gyro_data(len, gyro, dev);
 8000ef0:	7dbb      	ldrb	r3, [r7, #22]
 8000ef2:	683a      	ldr	r2, [r7, #0]
 8000ef4:	6879      	ldr	r1, [r7, #4]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f001 f84e 	bl	8001f98 <get_gyro_data>
 8000efc:	4603      	mov	r3, r0
 8000efe:	75fb      	strb	r3, [r7, #23]
                break;
 8000f00:	e016      	b.n	8000f30 <bmi160_get_sensor_data+0xc2>
            case BMI160_BOTH_ACCEL_AND_GYRO:

                /* Null-pointer check */
                if ((gyro == NULL) || (accel == NULL))
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d002      	beq.n	8000f0e <bmi160_get_sensor_data+0xa0>
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d102      	bne.n	8000f14 <bmi160_get_sensor_data+0xa6>
                {
                    rslt = BMI160_E_NULL_PTR;
 8000f0e:	23ff      	movs	r3, #255	@ 0xff
 8000f10:	75fb      	strb	r3, [r7, #23]
                else
                {
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
                }

                break;
 8000f12:	e00d      	b.n	8000f30 <bmi160_get_sensor_data+0xc2>
                    rslt = get_accel_gyro_data(len, accel, gyro, dev);
 8000f14:	7db8      	ldrb	r0, [r7, #22]
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	687a      	ldr	r2, [r7, #4]
 8000f1a:	68b9      	ldr	r1, [r7, #8]
 8000f1c:	f001 f985 	bl	800222a <get_accel_gyro_data>
 8000f20:	4603      	mov	r3, r0
 8000f22:	75fb      	strb	r3, [r7, #23]
                break;
 8000f24:	e004      	b.n	8000f30 <bmi160_get_sensor_data+0xc2>
            default:
                rslt = BMI160_E_INVALID_INPUT;
 8000f26:	23fb      	movs	r3, #251	@ 0xfb
 8000f28:	75fb      	strb	r3, [r7, #23]
                break;
 8000f2a:	e001      	b.n	8000f30 <bmi160_get_sensor_data+0xc2>
        }
    }
    else
    {
        rslt = BMI160_E_NULL_PTR;
 8000f2c:	23ff      	movs	r3, #255	@ 0xff
 8000f2e:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8000f30:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3718      	adds	r7, #24
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <bmi160_set_int_config>:
/*!
 * @brief This API configures the necessary interrupt based on
 *  the user settings in the bmi160_int_settg structure instance.
 */
int8_t bmi160_set_int_config(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 8000f46:	2300      	movs	r3, #0
 8000f48:	73fb      	strb	r3, [r7, #15]

    switch (int_config->int_type)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	785b      	ldrb	r3, [r3, #1]
 8000f4e:	2b0d      	cmp	r3, #13
 8000f50:	d879      	bhi.n	8001046 <bmi160_set_int_config+0x10a>
 8000f52:	a201      	add	r2, pc, #4	@ (adr r2, 8000f58 <bmi160_set_int_config+0x1c>)
 8000f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f58:	08000f91 	.word	0x08000f91
 8000f5c:	08000f9f 	.word	0x08000f9f
 8000f60:	08000fc9 	.word	0x08000fc9
 8000f64:	08000fbb 	.word	0x08000fbb
 8000f68:	08000fbb 	.word	0x08000fbb
 8000f6c:	08000fd7 	.word	0x08000fd7
 8000f70:	08000fe5 	.word	0x08000fe5
 8000f74:	08001001 	.word	0x08001001
 8000f78:	08000ff3 	.word	0x08000ff3
 8000f7c:	08000fad 	.word	0x08000fad
 8000f80:	0800100f 	.word	0x0800100f
 8000f84:	0800101d 	.word	0x0800101d
 8000f88:	0800102b 	.word	0x0800102b
 8000f8c:	08001039 	.word	0x08001039
    {
        case BMI160_ACC_ANY_MOTION_INT:

            /*Any-motion  interrupt*/
            rslt = set_accel_any_motion_int(int_config, dev);
 8000f90:	6839      	ldr	r1, [r7, #0]
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f000 f95a 	bl	800124c <set_accel_any_motion_int>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	73fb      	strb	r3, [r7, #15]
            break;
 8000f9c:	e054      	b.n	8001048 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_SIG_MOTION_INT:

            /* Significant motion interrupt */
            rslt = set_accel_sig_motion_int(int_config, dev);
 8000f9e:	6839      	ldr	r1, [r7, #0]
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f000 f9ed 	bl	8001380 <set_accel_sig_motion_int>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	73fb      	strb	r3, [r7, #15]
            break;
 8000faa:	e04d      	b.n	8001048 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_SLOW_NO_MOTION_INT:

            /* Slow or no motion interrupt */
            rslt = set_accel_no_motion_int(int_config, dev);
 8000fac:	6839      	ldr	r1, [r7, #0]
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f000 fa14 	bl	80013dc <set_accel_no_motion_int>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	73fb      	strb	r3, [r7, #15]
            break;
 8000fb8:	e046      	b.n	8001048 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_DOUBLE_TAP_INT:
        case BMI160_ACC_SINGLE_TAP_INT:

            /* Double tap and single tap Interrupt */
            rslt = set_accel_tap_int(int_config, dev);
 8000fba:	6839      	ldr	r1, [r7, #0]
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f000 f973 	bl	80012a8 <set_accel_tap_int>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	73fb      	strb	r3, [r7, #15]
            break;
 8000fc6:	e03f      	b.n	8001048 <bmi160_set_int_config+0x10c>
        case BMI160_STEP_DETECT_INT:

            /* Step detector interrupt */
            rslt = set_accel_step_detect_int(int_config, dev);
 8000fc8:	6839      	ldr	r1, [r7, #0]
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 fa34 	bl	8001438 <set_accel_step_detect_int>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	73fb      	strb	r3, [r7, #15]
            break;
 8000fd4:	e038      	b.n	8001048 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_ORIENT_INT:

            /* Orientation interrupt */
            rslt = set_accel_orientation_int(int_config, dev);
 8000fd6:	6839      	ldr	r1, [r7, #0]
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f000 fa6e 	bl	80014ba <set_accel_orientation_int>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	73fb      	strb	r3, [r7, #15]
            break;
 8000fe2:	e031      	b.n	8001048 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_FLAT_INT:

            /* Flat detection interrupt */
            rslt = set_accel_flat_detect_int(int_config, dev);
 8000fe4:	6839      	ldr	r1, [r7, #0]
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f000 faa8 	bl	800153c <set_accel_flat_detect_int>
 8000fec:	4603      	mov	r3, r0
 8000fee:	73fb      	strb	r3, [r7, #15]
            break;
 8000ff0:	e02a      	b.n	8001048 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_LOW_G_INT:

            /* Low-g interrupt */
            rslt = set_accel_low_g_int(int_config, dev);
 8000ff2:	6839      	ldr	r1, [r7, #0]
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f000 fae2 	bl	80015be <set_accel_low_g_int>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	73fb      	strb	r3, [r7, #15]
            break;
 8000ffe:	e023      	b.n	8001048 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_HIGH_G_INT:

            /* High-g interrupt */
            rslt = set_accel_high_g_int(int_config, dev);
 8001000:	6839      	ldr	r1, [r7, #0]
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f000 fb26 	bl	8001654 <set_accel_high_g_int>
 8001008:	4603      	mov	r3, r0
 800100a:	73fb      	strb	r3, [r7, #15]
            break;
 800100c:	e01c      	b.n	8001048 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_DATA_RDY_INT:

            /* Data ready interrupt */
            rslt = set_accel_gyro_data_ready_int(int_config, dev);
 800100e:	6839      	ldr	r1, [r7, #0]
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f000 f982 	bl	800131a <set_accel_gyro_data_ready_int>
 8001016:	4603      	mov	r3, r0
 8001018:	73fb      	strb	r3, [r7, #15]
            break;
 800101a:	e015      	b.n	8001048 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_FIFO_FULL_INT:

            /* Fifo full interrupt */
            rslt = set_fifo_full_int(int_config, dev);
 800101c:	6839      	ldr	r1, [r7, #0]
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f002 fd50 	bl	8003ac4 <set_fifo_full_int>
 8001024:	4603      	mov	r3, r0
 8001026:	73fb      	strb	r3, [r7, #15]
            break;
 8001028:	e00e      	b.n	8001048 <bmi160_set_int_config+0x10c>
        case BMI160_ACC_GYRO_FIFO_WATERMARK_INT:

            /* Fifo water-mark interrupt */
            rslt = set_fifo_watermark_int(int_config, dev);
 800102a:	6839      	ldr	r1, [r7, #0]
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f002 fdb0 	bl	8003b92 <set_fifo_watermark_int>
 8001032:	4603      	mov	r3, r0
 8001034:	73fb      	strb	r3, [r7, #15]
            break;
 8001036:	e007      	b.n	8001048 <bmi160_set_int_config+0x10c>
        case BMI160_FIFO_TAG_INT_PIN:

            /* Fifo tagging feature support */
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8001038:	6839      	ldr	r1, [r7, #0]
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f000 fb55 	bl	80016ea <set_intr_pin_config>
 8001040:	4603      	mov	r3, r0
 8001042:	73fb      	strb	r3, [r7, #15]
            break;
 8001044:	e000      	b.n	8001048 <bmi160_set_int_config+0x10c>
        default:
            break;
 8001046:	bf00      	nop
    }

    return rslt;
 8001048:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <bmi160_start_foc>:
 *  Gyro FOC always targets value of 0 dps
 */
int8_t bmi160_start_foc(const struct bmi160_foc_conf *foc_conf,
                        struct bmi160_offsets *offset,
                        struct bmi160_dev const *dev)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f000 fb5d 	bl	8001720 <null_ptr_check>
 8001066:	4603      	mov	r3, r0
 8001068:	75fb      	strb	r3, [r7, #23]
    if (rslt != BMI160_OK)
 800106a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d002      	beq.n	8001078 <bmi160_start_foc+0x24>
    {
        rslt = BMI160_E_NULL_PTR;
 8001072:	23ff      	movs	r3, #255	@ 0xff
 8001074:	75fb      	strb	r3, [r7, #23]
 8001076:	e068      	b.n	800114a <bmi160_start_foc+0xf6>
    }
    else
    {
        /* Set the offset enable bits */
        rslt = configure_offset_enable(foc_conf, dev);
 8001078:	6879      	ldr	r1, [r7, #4]
 800107a:	68f8      	ldr	r0, [r7, #12]
 800107c:	f002 fe10 	bl	8003ca0 <configure_offset_enable>
 8001080:	4603      	mov	r3, r0
 8001082:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8001084:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d15e      	bne.n	800114a <bmi160_start_foc+0xf6>
        {
            /* Read the FOC config from the sensor */
            rslt = bmi160_get_regs(BMI160_FOC_CONF_ADDR, &data, 1, dev);
 800108c:	f107 0116 	add.w	r1, r7, #22
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2201      	movs	r2, #1
 8001094:	2069      	movs	r0, #105	@ 0x69
 8001096:	f7ff fd71 	bl	8000b7c <bmi160_get_regs>
 800109a:	4603      	mov	r3, r0
 800109c:	75fb      	strb	r3, [r7, #23]

            /* Set the FOC config for gyro */
            data = BMI160_SET_BITS(data, BMI160_GYRO_FOC_EN, foc_conf->foc_gyr_en);
 800109e:	7dbb      	ldrb	r3, [r7, #22]
 80010a0:	b25b      	sxtb	r3, r3
 80010a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80010a6:	b25a      	sxtb	r2, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	019b      	lsls	r3, r3, #6
 80010ae:	b25b      	sxtb	r3, r3
 80010b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010b4:	b25b      	sxtb	r3, r3
 80010b6:	4313      	orrs	r3, r2
 80010b8:	b25b      	sxtb	r3, r3
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	75bb      	strb	r3, [r7, #22]

            /* Set the FOC config for accel xyz axes */
            data = BMI160_SET_BITS(data, BMI160_ACCEL_FOC_X_CONF, foc_conf->foc_acc_x);
 80010be:	7dbb      	ldrb	r3, [r7, #22]
 80010c0:	b25b      	sxtb	r3, r3
 80010c2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80010c6:	b25a      	sxtb	r2, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	785b      	ldrb	r3, [r3, #1]
 80010cc:	011b      	lsls	r3, r3, #4
 80010ce:	b25b      	sxtb	r3, r3
 80010d0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80010d4:	b25b      	sxtb	r3, r3
 80010d6:	4313      	orrs	r3, r2
 80010d8:	b25b      	sxtb	r3, r3
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	75bb      	strb	r3, [r7, #22]
            data = BMI160_SET_BITS(data, BMI160_ACCEL_FOC_Y_CONF, foc_conf->foc_acc_y);
 80010de:	7dbb      	ldrb	r3, [r7, #22]
 80010e0:	b25b      	sxtb	r3, r3
 80010e2:	f023 030c 	bic.w	r3, r3, #12
 80010e6:	b25a      	sxtb	r2, r3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	789b      	ldrb	r3, [r3, #2]
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	b25b      	sxtb	r3, r3
 80010f0:	f003 030c 	and.w	r3, r3, #12
 80010f4:	b25b      	sxtb	r3, r3
 80010f6:	4313      	orrs	r3, r2
 80010f8:	b25b      	sxtb	r3, r3
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	75bb      	strb	r3, [r7, #22]
            data = BMI160_SET_BITS_POS_0(data, BMI160_ACCEL_FOC_Z_CONF, foc_conf->foc_acc_z);
 80010fe:	7dbb      	ldrb	r3, [r7, #22]
 8001100:	b25b      	sxtb	r3, r3
 8001102:	f023 0303 	bic.w	r3, r3, #3
 8001106:	b25a      	sxtb	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	78db      	ldrb	r3, [r3, #3]
 800110c:	b25b      	sxtb	r3, r3
 800110e:	f003 0303 	and.w	r3, r3, #3
 8001112:	b25b      	sxtb	r3, r3
 8001114:	4313      	orrs	r3, r2
 8001116:	b25b      	sxtb	r3, r3
 8001118:	b2db      	uxtb	r3, r3
 800111a:	75bb      	strb	r3, [r7, #22]
            if (rslt == BMI160_OK)
 800111c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d112      	bne.n	800114a <bmi160_start_foc+0xf6>
            {
                /* Set the FOC config in the sensor */
                rslt = bmi160_set_regs(BMI160_FOC_CONF_ADDR, &data, 1, dev);
 8001124:	f107 0116 	add.w	r1, r7, #22
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2201      	movs	r2, #1
 800112c:	2069      	movs	r0, #105	@ 0x69
 800112e:	f7ff fd58 	bl	8000be2 <bmi160_set_regs>
 8001132:	4603      	mov	r3, r0
 8001134:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMI160_OK)
 8001136:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d105      	bne.n	800114a <bmi160_start_foc+0xf6>
                {
                    /* Procedure to trigger
                     * FOC and check status */
                    rslt = trigger_foc(offset, dev);
 800113e:	6879      	ldr	r1, [r7, #4]
 8001140:	68b8      	ldr	r0, [r7, #8]
 8001142:	f002 fdf7 	bl	8003d34 <trigger_foc>
 8001146:	4603      	mov	r3, r0
 8001148:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    }

    return rslt;
 800114a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <bmi160_get_offsets>:

/*!
 *  @brief This API reads and stores the offset values of accel and gyro
 */
int8_t bmi160_get_offsets(struct bmi160_offsets *offset, const struct bmi160_dev *dev)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b088      	sub	sp, #32
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
 800115e:	6039      	str	r1, [r7, #0]
    uint8_t lsb, msb;
    int16_t offset_msb, offset_lsb;
    int16_t offset_data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001160:	6838      	ldr	r0, [r7, #0]
 8001162:	f000 fadd 	bl	8001720 <null_ptr_check>
 8001166:	4603      	mov	r3, r0
 8001168:	77fb      	strb	r3, [r7, #31]
    if (rslt != BMI160_OK)
 800116a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d002      	beq.n	8001178 <bmi160_get_offsets+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8001172:	23ff      	movs	r3, #255	@ 0xff
 8001174:	77fb      	strb	r3, [r7, #31]
 8001176:	e063      	b.n	8001240 <bmi160_get_offsets+0xea>
    }
    else
    {
        /* Read the FOC config from the sensor */
        rslt = bmi160_get_regs(BMI160_OFFSET_ADDR, data, 7, dev);
 8001178:	f107 010c 	add.w	r1, r7, #12
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	2207      	movs	r2, #7
 8001180:	2071      	movs	r0, #113	@ 0x71
 8001182:	f7ff fcfb 	bl	8000b7c <bmi160_get_regs>
 8001186:	4603      	mov	r3, r0
 8001188:	77fb      	strb	r3, [r7, #31]

        /* Accel offsets */
        offset->off_acc_x = (int8_t)data[0];
 800118a:	7b3b      	ldrb	r3, [r7, #12]
 800118c:	b25a      	sxtb	r2, r3
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	701a      	strb	r2, [r3, #0]
        offset->off_acc_y = (int8_t)data[1];
 8001192:	7b7b      	ldrb	r3, [r7, #13]
 8001194:	b25a      	sxtb	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	705a      	strb	r2, [r3, #1]
        offset->off_acc_z = (int8_t)data[2];
 800119a:	7bbb      	ldrb	r3, [r7, #14]
 800119c:	b25a      	sxtb	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	709a      	strb	r2, [r3, #2]

        /* Gyro x-axis offset */
        lsb = data[3];
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS_POS_0(data[6], BMI160_GYRO_OFFSET_X);
 80011a6:	7cbb      	ldrb	r3, [r7, #18]
 80011a8:	f003 0303 	and.w	r3, r3, #3
 80011ac:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 80011ae:	7f7b      	ldrb	r3, [r7, #29]
 80011b0:	039b      	lsls	r3, r3, #14
 80011b2:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 80011b4:	7fbb      	ldrb	r3, [r7, #30]
 80011b6:	019b      	lsls	r3, r3, #6
 80011b8:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 80011ba:	8b7a      	ldrh	r2, [r7, #26]
 80011bc:	8b3b      	ldrh	r3, [r7, #24]
 80011be:	4313      	orrs	r3, r2
 80011c0:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_x = (int16_t)(offset_data / 64);
 80011c2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	da00      	bge.n	80011cc <bmi160_get_offsets+0x76>
 80011ca:	333f      	adds	r3, #63	@ 0x3f
 80011cc:	119b      	asrs	r3, r3, #6
 80011ce:	b21a      	sxth	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	809a      	strh	r2, [r3, #4]

        /* Gyro y-axis offset */
        lsb = data[4];
 80011d4:	7c3b      	ldrb	r3, [r7, #16]
 80011d6:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Y);
 80011d8:	7cbb      	ldrb	r3, [r7, #18]
 80011da:	109b      	asrs	r3, r3, #2
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	f003 0303 	and.w	r3, r3, #3
 80011e2:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 80011e4:	7f7b      	ldrb	r3, [r7, #29]
 80011e6:	039b      	lsls	r3, r3, #14
 80011e8:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 80011ea:	7fbb      	ldrb	r3, [r7, #30]
 80011ec:	019b      	lsls	r3, r3, #6
 80011ee:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 80011f0:	8b7a      	ldrh	r2, [r7, #26]
 80011f2:	8b3b      	ldrh	r3, [r7, #24]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_y = (int16_t)(offset_data / 64);
 80011f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	da00      	bge.n	8001202 <bmi160_get_offsets+0xac>
 8001200:	333f      	adds	r3, #63	@ 0x3f
 8001202:	119b      	asrs	r3, r3, #6
 8001204:	b21a      	sxth	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	80da      	strh	r2, [r3, #6]

        /* Gyro z-axis offset */
        lsb = data[5];
 800120a:	7c7b      	ldrb	r3, [r7, #17]
 800120c:	77bb      	strb	r3, [r7, #30]
        msb = BMI160_GET_BITS(data[6], BMI160_GYRO_OFFSET_Z);
 800120e:	7cbb      	ldrb	r3, [r7, #18]
 8001210:	111b      	asrs	r3, r3, #4
 8001212:	b2db      	uxtb	r3, r3
 8001214:	f003 0303 	and.w	r3, r3, #3
 8001218:	777b      	strb	r3, [r7, #29]
        offset_msb = (int16_t)(msb << 14);
 800121a:	7f7b      	ldrb	r3, [r7, #29]
 800121c:	039b      	lsls	r3, r3, #14
 800121e:	837b      	strh	r3, [r7, #26]
        offset_lsb = lsb << 6;
 8001220:	7fbb      	ldrb	r3, [r7, #30]
 8001222:	019b      	lsls	r3, r3, #6
 8001224:	833b      	strh	r3, [r7, #24]
        offset_data = offset_msb | offset_lsb;
 8001226:	8b7a      	ldrh	r2, [r7, #26]
 8001228:	8b3b      	ldrh	r3, [r7, #24]
 800122a:	4313      	orrs	r3, r2
 800122c:	82fb      	strh	r3, [r7, #22]

        /* Divide by 64 to get the Right shift by 6 value */
        offset->off_gyro_z = (int16_t)(offset_data / 64);
 800122e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001232:	2b00      	cmp	r3, #0
 8001234:	da00      	bge.n	8001238 <bmi160_get_offsets+0xe2>
 8001236:	333f      	adds	r3, #63	@ 0x3f
 8001238:	119b      	asrs	r3, r3, #6
 800123a:	b21a      	sxth	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	811a      	strh	r2, [r3, #8]
    }

    return rslt;
 8001240:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001244:	4618      	mov	r0, r3
 8001246:	3720      	adds	r7, #32
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <set_accel_any_motion_int>:
 * @brief This API sets the any-motion interrupt of the sensor.
 * This interrupt occurs when accel values exceeds preset threshold
 * for a certain period of time.
 */
static int8_t set_accel_any_motion_int(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001256:	6838      	ldr	r0, [r7, #0]
 8001258:	f000 fa62 	bl	8001720 <null_ptr_check>
 800125c:	4603      	mov	r3, r0
 800125e:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8001260:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d102      	bne.n	800126e <set_accel_any_motion_int+0x22>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d102      	bne.n	8001274 <set_accel_any_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 800126e:	23ff      	movs	r3, #255	@ 0xff
 8001270:	73fb      	strb	r3, [r7, #15]
 8001272:	e013      	b.n	800129c <set_accel_any_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg = &(int_config->int_type_cfg.acc_any_motion_int);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3304      	adds	r3, #4
 8001278:	60bb      	str	r3, [r7, #8]
        rslt = enable_accel_any_motion_int(any_motion_int_cfg, dev);
 800127a:	6839      	ldr	r1, [r7, #0]
 800127c:	68b8      	ldr	r0, [r7, #8]
 800127e:	f001 f912 	bl	80024a6 <enable_accel_any_motion_int>
 8001282:	4603      	mov	r3, r0
 8001284:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d106      	bne.n	800129c <set_accel_any_motion_int+0x50>
        {
            rslt = config_any_motion_int_settg(int_config, any_motion_int_cfg, dev);
 800128e:	683a      	ldr	r2, [r7, #0]
 8001290:	68b9      	ldr	r1, [r7, #8]
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f001 fb3f 	bl	8002916 <config_any_motion_int_settg>
 8001298:	4603      	mov	r3, r0
 800129a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800129c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <set_accel_tap_int>:
/*!
 * @brief This API sets tap interrupts.Interrupt is fired when
 * tap movements happen.
 */
static int8_t set_accel_tap_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80012b2:	6838      	ldr	r0, [r7, #0]
 80012b4:	f000 fa34 	bl	8001720 <null_ptr_check>
 80012b8:	4603      	mov	r3, r0
 80012ba:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80012bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d102      	bne.n	80012ca <set_accel_tap_int+0x22>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d102      	bne.n	80012d0 <set_accel_tap_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80012ca:	23ff      	movs	r3, #255	@ 0xff
 80012cc:	73fb      	strb	r3, [r7, #15]
 80012ce:	e01e      	b.n	800130e <set_accel_tap_int+0x66>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_tap_int_cfg *tap_int_cfg = &(int_config->int_type_cfg.acc_tap_int);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3304      	adds	r3, #4
 80012d4:	60bb      	str	r3, [r7, #8]
        rslt = enable_tap_int(int_config, tap_int_cfg, dev);
 80012d6:	683a      	ldr	r2, [r7, #0]
 80012d8:	68b9      	ldr	r1, [r7, #8]
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f001 fe79 	bl	8002fd2 <enable_tap_int>
 80012e0:	4603      	mov	r3, r0
 80012e2:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80012e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d110      	bne.n	800130e <set_accel_tap_int+0x66>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 80012ec:	6839      	ldr	r1, [r7, #0]
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f000 f9fb 	bl	80016ea <set_intr_pin_config>
 80012f4:	4603      	mov	r3, r0
 80012f6:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80012f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d106      	bne.n	800130e <set_accel_tap_int+0x66>
            {
                rslt = config_tap_int_settg(int_config, tap_int_cfg, dev);
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	68b9      	ldr	r1, [r7, #8]
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f001 feb7 	bl	8003078 <config_tap_int_settg>
 800130a:	4603      	mov	r3, r0
 800130c:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800130e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001312:	4618      	mov	r0, r3
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <set_accel_gyro_data_ready_int>:
/*!
 * @brief This API sets the data ready interrupt for both accel and gyro.
 * This interrupt occurs when new accel and gyro data comes.
 */
static int8_t set_accel_gyro_data_ready_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 800131a:	b580      	push	{r7, lr}
 800131c:	b084      	sub	sp, #16
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
 8001322:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001324:	6838      	ldr	r0, [r7, #0]
 8001326:	f000 f9fb 	bl	8001720 <null_ptr_check>
 800132a:	4603      	mov	r3, r0
 800132c:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 800132e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d102      	bne.n	800133c <set_accel_gyro_data_ready_int+0x22>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d102      	bne.n	8001342 <set_accel_gyro_data_ready_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 800133c:	23ff      	movs	r3, #255	@ 0xff
 800133e:	73fb      	strb	r3, [r7, #15]
 8001340:	e018      	b.n	8001374 <set_accel_gyro_data_ready_int+0x5a>
    }
    else
    {
        rslt = enable_data_ready_int(dev);
 8001342:	6838      	ldr	r0, [r7, #0]
 8001344:	f001 fb20 	bl	8002988 <enable_data_ready_int>
 8001348:	4603      	mov	r3, r0
 800134a:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800134c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d10f      	bne.n	8001374 <set_accel_gyro_data_ready_int+0x5a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8001354:	6839      	ldr	r1, [r7, #0]
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 f9c7 	bl	80016ea <set_intr_pin_config>
 800135c:	4603      	mov	r3, r0
 800135e:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001360:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d105      	bne.n	8001374 <set_accel_gyro_data_ready_int+0x5a>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 8001368:	6839      	ldr	r1, [r7, #0]
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f001 f9d4 	bl	8002718 <map_hardware_interrupt>
 8001370:	4603      	mov	r3, r0
 8001372:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001374:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <set_accel_sig_motion_int>:
/*!
 * @brief This API sets the significant motion interrupt of the sensor.This
 * interrupt occurs when there is change in user location.
 */
static int8_t set_accel_sig_motion_int(struct bmi160_int_settg *int_config, struct bmi160_dev *dev)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800138a:	6838      	ldr	r0, [r7, #0]
 800138c:	f000 f9c8 	bl	8001720 <null_ptr_check>
 8001390:	4603      	mov	r3, r0
 8001392:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8001394:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d102      	bne.n	80013a2 <set_accel_sig_motion_int+0x22>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d102      	bne.n	80013a8 <set_accel_sig_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80013a2:	23ff      	movs	r3, #255	@ 0xff
 80013a4:	73fb      	strb	r3, [r7, #15]
 80013a6:	e013      	b.n	80013d0 <set_accel_sig_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg = &(int_config->int_type_cfg.acc_sig_motion_int);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3304      	adds	r3, #4
 80013ac:	60bb      	str	r3, [r7, #8]
        rslt = enable_sig_motion_int(sig_mot_int_cfg, dev);
 80013ae:	6839      	ldr	r1, [r7, #0]
 80013b0:	68b8      	ldr	r0, [r7, #8]
 80013b2:	f001 fc3f 	bl	8002c34 <enable_sig_motion_int>
 80013b6:	4603      	mov	r3, r0
 80013b8:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80013ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d106      	bne.n	80013d0 <set_accel_sig_motion_int+0x50>
        {
            rslt = config_sig_motion_int_settg(int_config, sig_mot_int_cfg, dev);
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	68b9      	ldr	r1, [r7, #8]
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f001 fc75 	bl	8002cb6 <config_sig_motion_int_settg>
 80013cc:	4603      	mov	r3, r0
 80013ce:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80013d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <set_accel_no_motion_int>:
 * Slow motion is similar to any motion interrupt.No motion interrupt
 * occurs when slope bet. two accel values falls below preset threshold
 * for preset duration.
 */
static int8_t set_accel_no_motion_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
 80013e4:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80013e6:	6838      	ldr	r0, [r7, #0]
 80013e8:	f000 f99a 	bl	8001720 <null_ptr_check>
 80013ec:	4603      	mov	r3, r0
 80013ee:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80013f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d102      	bne.n	80013fe <set_accel_no_motion_int+0x22>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d102      	bne.n	8001404 <set_accel_no_motion_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80013fe:	23ff      	movs	r3, #255	@ 0xff
 8001400:	73fb      	strb	r3, [r7, #15]
 8001402:	e013      	b.n	800142c <set_accel_no_motion_int+0x50>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg = &(int_config->int_type_cfg.acc_no_motion_int);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3304      	adds	r3, #4
 8001408:	60bb      	str	r3, [r7, #8]
        rslt = enable_no_motion_int(no_mot_int_cfg, dev);
 800140a:	6839      	ldr	r1, [r7, #0]
 800140c:	68b8      	ldr	r0, [r7, #8]
 800140e:	f001 fae8 	bl	80029e2 <enable_no_motion_int>
 8001412:	4603      	mov	r3, r0
 8001414:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d106      	bne.n	800142c <set_accel_no_motion_int+0x50>
        {
            /* Configure the INT PIN settings*/
            rslt = config_no_motion_int_settg(int_config, no_mot_int_cfg, dev);
 800141e:	683a      	ldr	r2, [r7, #0]
 8001420:	68b9      	ldr	r1, [r7, #8]
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f001 fb32 	bl	8002a8c <config_no_motion_int_settg>
 8001428:	4603      	mov	r3, r0
 800142a:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 800142c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}

08001438 <set_accel_step_detect_int>:
 * @brief This API sets the step detection interrupt.This interrupt
 * occurs when the single step causes accel values to go above
 * preset threshold.
 */
static int8_t set_accel_step_detect_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001442:	6838      	ldr	r0, [r7, #0]
 8001444:	f000 f96c 	bl	8001720 <null_ptr_check>
 8001448:	4603      	mov	r3, r0
 800144a:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 800144c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d102      	bne.n	800145a <set_accel_step_detect_int+0x22>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d102      	bne.n	8001460 <set_accel_step_detect_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 800145a:	23ff      	movs	r3, #255	@ 0xff
 800145c:	73fb      	strb	r3, [r7, #15]
 800145e:	e026      	b.n	80014ae <set_accel_step_detect_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg = &(int_config->int_type_cfg.acc_step_detect_int);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3304      	adds	r3, #4
 8001464:	60bb      	str	r3, [r7, #8]
        rslt = enable_step_detect_int(step_detect_int_cfg, dev);
 8001466:	6839      	ldr	r1, [r7, #0]
 8001468:	68b8      	ldr	r0, [r7, #8]
 800146a:	f001 fcf9 	bl	8002e60 <enable_step_detect_int>
 800146e:	4603      	mov	r3, r0
 8001470:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d119      	bne.n	80014ae <set_accel_step_detect_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 800147a:	6839      	ldr	r1, [r7, #0]
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f000 f934 	bl	80016ea <set_intr_pin_config>
 8001482:	4603      	mov	r3, r0
 8001484:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10f      	bne.n	80014ae <set_accel_step_detect_int+0x76>
            {
                rslt = map_feature_interrupt(int_config, dev);
 800148e:	6839      	ldr	r1, [r7, #0]
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f001 f8a7 	bl	80025e4 <map_feature_interrupt>
 8001496:	4603      	mov	r3, r0
 8001498:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 800149a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d105      	bne.n	80014ae <set_accel_step_detect_int+0x76>
                {
                    rslt = config_step_detect(step_detect_int_cfg, dev);
 80014a2:	6839      	ldr	r1, [r7, #0]
 80014a4:	68b8      	ldr	r0, [r7, #8]
 80014a6:	f001 fd14 	bl	8002ed2 <config_step_detect>
 80014aa:	4603      	mov	r3, r0
 80014ac:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80014ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <set_accel_orientation_int>:
 * @brief This API sets the orientation interrupt of the sensor.This
 * interrupt occurs when there is orientation change in the sensor
 * with respect to gravitational field vector g.
 */
static int8_t set_accel_orientation_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b084      	sub	sp, #16
 80014be:	af00      	add	r7, sp, #0
 80014c0:	6078      	str	r0, [r7, #4]
 80014c2:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80014c4:	6838      	ldr	r0, [r7, #0]
 80014c6:	f000 f92b 	bl	8001720 <null_ptr_check>
 80014ca:	4603      	mov	r3, r0
 80014cc:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80014ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d102      	bne.n	80014dc <set_accel_orientation_int+0x22>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d102      	bne.n	80014e2 <set_accel_orientation_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80014dc:	23ff      	movs	r3, #255	@ 0xff
 80014de:	73fb      	strb	r3, [r7, #15]
 80014e0:	e026      	b.n	8001530 <set_accel_orientation_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_orient_int_cfg *orient_int_cfg = &(int_config->int_type_cfg.acc_orient_int);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	3304      	adds	r3, #4
 80014e6:	60bb      	str	r3, [r7, #8]
        rslt = enable_orient_int(orient_int_cfg, dev);
 80014e8:	6839      	ldr	r1, [r7, #0]
 80014ea:	68b8      	ldr	r0, [r7, #8]
 80014ec:	f001 fec8 	bl	8003280 <enable_orient_int>
 80014f0:	4603      	mov	r3, r0
 80014f2:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80014f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d119      	bne.n	8001530 <set_accel_orientation_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 80014fc:	6839      	ldr	r1, [r7, #0]
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f000 f8f3 	bl	80016ea <set_intr_pin_config>
 8001504:	4603      	mov	r3, r0
 8001506:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001508:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d10f      	bne.n	8001530 <set_accel_orientation_int+0x76>
            {
                /* map INT pin to orient interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 8001510:	6839      	ldr	r1, [r7, #0]
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f001 f866 	bl	80025e4 <map_feature_interrupt>
 8001518:	4603      	mov	r3, r0
 800151a:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 800151c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d105      	bne.n	8001530 <set_accel_orientation_int+0x76>
                {
                    /* configure the
                     * orientation setting*/
                    rslt = config_orient_int_settg(orient_int_cfg, dev);
 8001524:	6839      	ldr	r1, [r7, #0]
 8001526:	68b8      	ldr	r0, [r7, #8]
 8001528:	f001 fee3 	bl	80032f2 <config_orient_int_settg>
 800152c:	4603      	mov	r3, r0
 800152e:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001530:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <set_accel_flat_detect_int>:
/*!
 * @brief This API sets the flat interrupt of the sensor.This interrupt
 * occurs in case of flat orientation
 */
static int8_t set_accel_flat_detect_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8001546:	6838      	ldr	r0, [r7, #0]
 8001548:	f000 f8ea 	bl	8001720 <null_ptr_check>
 800154c:	4603      	mov	r3, r0
 800154e:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8001550:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d102      	bne.n	800155e <set_accel_flat_detect_int+0x22>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d102      	bne.n	8001564 <set_accel_flat_detect_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 800155e:	23ff      	movs	r3, #255	@ 0xff
 8001560:	73fb      	strb	r3, [r7, #15]
 8001562:	e026      	b.n	80015b2 <set_accel_flat_detect_int+0x76>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_flat_detect_int_cfg *flat_detect_int = &(int_config->int_type_cfg.acc_flat_int);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3304      	adds	r3, #4
 8001568:	60bb      	str	r3, [r7, #8]

        /* enable the flat interrupt */
        rslt = enable_flat_int(flat_detect_int, dev);
 800156a:	6839      	ldr	r1, [r7, #0]
 800156c:	68b8      	ldr	r0, [r7, #8]
 800156e:	f001 ff4f 	bl	8003410 <enable_flat_int>
 8001572:	4603      	mov	r3, r0
 8001574:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d119      	bne.n	80015b2 <set_accel_flat_detect_int+0x76>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 800157e:	6839      	ldr	r1, [r7, #0]
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f000 f8b2 	bl	80016ea <set_intr_pin_config>
 8001586:	4603      	mov	r3, r0
 8001588:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800158a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d10f      	bne.n	80015b2 <set_accel_flat_detect_int+0x76>
            {
                /* map INT pin to flat interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 8001592:	6839      	ldr	r1, [r7, #0]
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f001 f825 	bl	80025e4 <map_feature_interrupt>
 800159a:	4603      	mov	r3, r0
 800159c:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 800159e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d105      	bne.n	80015b2 <set_accel_flat_detect_int+0x76>
                {
                    /* configure the flat setting*/
                    rslt = config_flat_int_settg(flat_detect_int, dev);
 80015a6:	6839      	ldr	r1, [r7, #0]
 80015a8:	68b8      	ldr	r0, [r7, #8]
 80015aa:	f001 ff67 	bl	800347c <config_flat_int_settg>
 80015ae:	4603      	mov	r3, r0
 80015b0:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80015b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3710      	adds	r7, #16
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <set_accel_low_g_int>:
/*!
 * @brief This API sets the low-g interrupt of the sensor.This interrupt
 * occurs during free-fall.
 */
static int8_t set_accel_low_g_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b084      	sub	sp, #16
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
 80015c6:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 80015c8:	6838      	ldr	r0, [r7, #0]
 80015ca:	f000 f8a9 	bl	8001720 <null_ptr_check>
 80015ce:	4603      	mov	r3, r0
 80015d0:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 80015d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d102      	bne.n	80015e0 <set_accel_low_g_int+0x22>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d102      	bne.n	80015e6 <set_accel_low_g_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 80015e0:	23ff      	movs	r3, #255	@ 0xff
 80015e2:	73fb      	strb	r3, [r7, #15]
 80015e4:	e030      	b.n	8001648 <set_accel_low_g_int+0x8a>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_low_g_int_cfg *low_g_int = &(int_config->int_type_cfg.acc_low_g_int);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	3304      	adds	r3, #4
 80015ea:	60bb      	str	r3, [r7, #8]

        /* Enable the low-g interrupt*/
        rslt = enable_low_g_int(low_g_int, dev);
 80015ec:	6839      	ldr	r1, [r7, #0]
 80015ee:	68b8      	ldr	r0, [r7, #8]
 80015f0:	f001 ffa0 	bl	8003534 <enable_low_g_int>
 80015f4:	4603      	mov	r3, r0
 80015f6:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80015f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d123      	bne.n	8001648 <set_accel_low_g_int+0x8a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8001600:	6839      	ldr	r1, [r7, #0]
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f000 f871 	bl	80016ea <set_intr_pin_config>
 8001608:	4603      	mov	r3, r0
 800160a:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 800160c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d119      	bne.n	8001648 <set_accel_low_g_int+0x8a>
            {
                /* Map INT pin to low-g interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 8001614:	6839      	ldr	r1, [r7, #0]
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 ffe4 	bl	80025e4 <map_feature_interrupt>
 800161c:	4603      	mov	r3, r0
 800161e:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 8001620:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d10f      	bne.n	8001648 <set_accel_low_g_int+0x8a>
                {
                    /* configure the data source
                     * for low-g interrupt*/
                    rslt = config_low_g_data_src(low_g_int, dev);
 8001628:	6839      	ldr	r1, [r7, #0]
 800162a:	68b8      	ldr	r0, [r7, #8]
 800162c:	f001 ffbb 	bl	80035a6 <config_low_g_data_src>
 8001630:	4603      	mov	r3, r0
 8001632:	73fb      	strb	r3, [r7, #15]
                    if (rslt == BMI160_OK)
 8001634:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d105      	bne.n	8001648 <set_accel_low_g_int+0x8a>
                    {
                        rslt = config_low_g_int_settg(low_g_int, dev);
 800163c:	6839      	ldr	r1, [r7, #0]
 800163e:	68b8      	ldr	r0, [r7, #8]
 8001640:	f001 ffe8 	bl	8003614 <config_low_g_int_settg>
 8001644:	4603      	mov	r3, r0
 8001646:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8001648:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3710      	adds	r7, #16
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <set_accel_high_g_int>:
 * occurs if the absolute value of acceleration data of any enabled axis
 * exceeds the programmed threshold and the sign of the value does not
 * change for a preset duration.
 */
static int8_t set_accel_high_g_int(struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 800165e:	6838      	ldr	r0, [r7, #0]
 8001660:	f000 f85e 	bl	8001720 <null_ptr_check>
 8001664:	4603      	mov	r3, r0
 8001666:	73fb      	strb	r3, [r7, #15]
    if ((rslt != BMI160_OK) || (int_config == NULL))
 8001668:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d102      	bne.n	8001676 <set_accel_high_g_int+0x22>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d102      	bne.n	800167c <set_accel_high_g_int+0x28>
    {
        rslt = BMI160_E_NULL_PTR;
 8001676:	23ff      	movs	r3, #255	@ 0xff
 8001678:	73fb      	strb	r3, [r7, #15]
 800167a:	e030      	b.n	80016de <set_accel_high_g_int+0x8a>
    }
    else
    {
        /* updating the interrupt structure to local structure */
        struct bmi160_acc_high_g_int_cfg *high_g_int_cfg = &(int_config->int_type_cfg.acc_high_g_int);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3304      	adds	r3, #4
 8001680:	60bb      	str	r3, [r7, #8]

        /* Enable the high-g interrupt */
        rslt = enable_high_g_int(high_g_int_cfg, dev);
 8001682:	6839      	ldr	r1, [r7, #0]
 8001684:	68b8      	ldr	r0, [r7, #8]
 8001686:	f002 f81d 	bl	80036c4 <enable_high_g_int>
 800168a:	4603      	mov	r3, r0
 800168c:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 800168e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d123      	bne.n	80016de <set_accel_high_g_int+0x8a>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8001696:	6839      	ldr	r1, [r7, #0]
 8001698:	6878      	ldr	r0, [r7, #4]
 800169a:	f000 f826 	bl	80016ea <set_intr_pin_config>
 800169e:	4603      	mov	r3, r0
 80016a0:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 80016a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d119      	bne.n	80016de <set_accel_high_g_int+0x8a>
            {
                /* Map INT pin to high-g interrupt */
                rslt = map_feature_interrupt(int_config, dev);
 80016aa:	6839      	ldr	r1, [r7, #0]
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f000 ff99 	bl	80025e4 <map_feature_interrupt>
 80016b2:	4603      	mov	r3, r0
 80016b4:	73fb      	strb	r3, [r7, #15]
                if (rslt == BMI160_OK)
 80016b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d10f      	bne.n	80016de <set_accel_high_g_int+0x8a>
                {
                    /* configure the data source
                     * for high-g interrupt*/
                    rslt = config_high_g_data_src(high_g_int_cfg, dev);
 80016be:	6839      	ldr	r1, [r7, #0]
 80016c0:	68b8      	ldr	r0, [r7, #8]
 80016c2:	f002 f85a 	bl	800377a <config_high_g_data_src>
 80016c6:	4603      	mov	r3, r0
 80016c8:	73fb      	strb	r3, [r7, #15]
                    if (rslt == BMI160_OK)
 80016ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d105      	bne.n	80016de <set_accel_high_g_int+0x8a>
                    {
                        rslt = config_high_g_int_settg(high_g_int_cfg, dev);
 80016d2:	6839      	ldr	r1, [r7, #0]
 80016d4:	68b8      	ldr	r0, [r7, #8]
 80016d6:	f002 f887 	bl	80037e8 <config_high_g_int_settg>
 80016da:	4603      	mov	r3, r0
 80016dc:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80016de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <set_intr_pin_config>:
/*!
 * @brief This API configures the pins to fire the
 * interrupt signal when it occurs.
 */
static int8_t set_intr_pin_config(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b084      	sub	sp, #16
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
 80016f2:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* configure the behavioural settings of interrupt pin */
    rslt = config_int_out_ctrl(int_config, dev);
 80016f4:	6839      	ldr	r1, [r7, #0]
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f002 f8bc 	bl	8003874 <config_int_out_ctrl>
 80016fc:	4603      	mov	r3, r0
 80016fe:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001700:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d105      	bne.n	8001714 <set_intr_pin_config+0x2a>
    {
        rslt = config_int_latch(int_config, dev);
 8001708:	6839      	ldr	r1, [r7, #0]
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f002 f977 	bl	80039fe <config_int_latch>
 8001710:	4603      	mov	r3, r0
 8001712:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001714:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3710      	adds	r7, #16
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bmi160_dev *dev)
{
 8001720:	b480      	push	{r7}
 8001722:	b085      	sub	sp, #20
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00b      	beq.n	8001746 <null_ptr_check+0x26>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d007      	beq.n	8001746 <null_ptr_check+0x26>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a1b      	ldr	r3, [r3, #32]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <null_ptr_check+0x26>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001742:	2b00      	cmp	r3, #0
 8001744:	d102      	bne.n	800174c <null_ptr_check+0x2c>
    {
        rslt = BMI160_E_NULL_PTR;
 8001746:	23ff      	movs	r3, #255	@ 0xff
 8001748:	73fb      	strb	r3, [r7, #15]
 800174a:	e001      	b.n	8001750 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BMI160_OK;
 800174c:	2300      	movs	r3, #0
 800174e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001750:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3714      	adds	r7, #20
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <default_param_settg>:
/*!
 * @brief This API sets the default configuration parameters of accel & gyro.
 * Also maintain the previous state of configurations.
 */
static void default_param_settg(struct bmi160_dev *dev)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
    /* Initializing accel and gyro params with
     * default values */
    dev->accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2202      	movs	r2, #2
 800176c:	71da      	strb	r2, [r3, #7]
    dev->accel_cfg.odr = BMI160_ACCEL_ODR_100HZ;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2208      	movs	r2, #8
 8001772:	715a      	strb	r2, [r3, #5]
    dev->accel_cfg.power = BMI160_ACCEL_SUSPEND_MODE;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2210      	movs	r2, #16
 8001778:	711a      	strb	r2, [r3, #4]
    dev->accel_cfg.range = BMI160_ACCEL_RANGE_2G;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2203      	movs	r2, #3
 800177e:	719a      	strb	r2, [r3, #6]
    dev->gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2202      	movs	r2, #2
 8001784:	73da      	strb	r2, [r3, #15]
    dev->gyro_cfg.odr = BMI160_GYRO_ODR_100HZ;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2208      	movs	r2, #8
 800178a:	735a      	strb	r2, [r3, #13]
    dev->gyro_cfg.power = BMI160_GYRO_SUSPEND_MODE;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2214      	movs	r2, #20
 8001790:	731a      	strb	r2, [r3, #12]
    dev->gyro_cfg.range = BMI160_GYRO_RANGE_2000_DPS;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2200      	movs	r2, #0
 8001796:	739a      	strb	r2, [r3, #14]

    /* To maintain the previous state of accel configuration */
    dev->prev_accel_cfg = dev->accel_cfg;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	6852      	ldr	r2, [r2, #4]
 800179e:	609a      	str	r2, [r3, #8]

    /* To maintain the previous state of gyro configuration */
    dev->prev_gyro_cfg = dev->gyro_cfg;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	68d2      	ldr	r2, [r2, #12]
 80017a6:	611a      	str	r2, [r3, #16]
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <set_accel_conf>:

/*!
 * @brief This API set the accel configuration.
 */
static int8_t set_accel_conf(struct bmi160_dev *dev)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 80017bc:	2300      	movs	r3, #0
 80017be:	81bb      	strh	r3, [r7, #12]

    rslt = check_accel_config(data, dev);
 80017c0:	f107 030c 	add.w	r3, r7, #12
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f000 f833 	bl	8001832 <check_accel_config>
 80017cc:	4603      	mov	r3, r0
 80017ce:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80017d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d126      	bne.n	8001826 <set_accel_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, &data[0], 1, dev);
 80017d8:	f107 010c 	add.w	r1, r7, #12
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	2040      	movs	r0, #64	@ 0x40
 80017e2:	f7ff f9fe 	bl	8000be2 <bmi160_set_regs>
 80017e6:	4603      	mov	r3, r0
 80017e8:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 80017ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d119      	bne.n	8001826 <set_accel_conf+0x72>
        {
            dev->prev_accel_cfg.odr = dev->accel_cfg.odr;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	795a      	ldrb	r2, [r3, #5]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	725a      	strb	r2, [r3, #9]
            dev->prev_accel_cfg.bw = dev->accel_cfg.bw;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	79da      	ldrb	r2, [r3, #7]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	72da      	strb	r2, [r3, #11]

            /* write accel range */
            rslt = bmi160_set_regs(BMI160_ACCEL_RANGE_ADDR, &data[1], 1, dev);
 8001802:	f107 030c 	add.w	r3, r7, #12
 8001806:	1c59      	adds	r1, r3, #1
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	2041      	movs	r0, #65	@ 0x41
 800180e:	f7ff f9e8 	bl	8000be2 <bmi160_set_regs>
 8001812:	4603      	mov	r3, r0
 8001814:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d103      	bne.n	8001826 <set_accel_conf+0x72>
            {
                dev->prev_accel_cfg.range = dev->accel_cfg.range;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	799a      	ldrb	r2, [r3, #6]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	729a      	strb	r2, [r3, #10]
            }
        }
    }

    return rslt;
 8001826:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <check_accel_config>:

/*!
 * @brief This API check the accel configuration.
 */
static int8_t check_accel_config(uint8_t *data, const struct bmi160_dev *dev)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b084      	sub	sp, #16
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read accel Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 2, dev);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	2202      	movs	r2, #2
 8001840:	6879      	ldr	r1, [r7, #4]
 8001842:	2040      	movs	r0, #64	@ 0x40
 8001844:	f7ff f99a 	bl	8000b7c <bmi160_get_regs>
 8001848:	4603      	mov	r3, r0
 800184a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800184c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d11b      	bne.n	800188c <check_accel_config+0x5a>
    {
        rslt = process_accel_odr(&data[0], dev);
 8001854:	6839      	ldr	r1, [r7, #0]
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 f81e 	bl	8001898 <process_accel_odr>
 800185c:	4603      	mov	r3, r0
 800185e:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d111      	bne.n	800188c <check_accel_config+0x5a>
        {
            rslt = process_accel_bw(&data[0], dev);
 8001868:	6839      	ldr	r1, [r7, #0]
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 f848 	bl	8001900 <process_accel_bw>
 8001870:	4603      	mov	r3, r0
 8001872:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001874:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d107      	bne.n	800188c <check_accel_config+0x5a>
            {
                rslt = process_accel_range(&data[1], dev);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3301      	adds	r3, #1
 8001880:	6839      	ldr	r1, [r7, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f000 f871 	bl	800196a <process_accel_range>
 8001888:	4603      	mov	r3, r0
 800188a:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800188c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <process_accel_odr>:

/*!
 * @brief This API process the accel odr.
 */
static int8_t process_accel_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.odr <= BMI160_ACCEL_ODR_1600HZ)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	795b      	ldrb	r3, [r3, #5]
 80018b2:	2b0c      	cmp	r3, #12
 80018b4:	d81a      	bhi.n	80018ec <process_accel_odr+0x54>
    {
        if (dev->accel_cfg.odr != dev->prev_accel_cfg.odr)
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	795a      	ldrb	r2, [r3, #5]
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	7a5b      	ldrb	r3, [r3, #9]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d016      	beq.n	80018f0 <process_accel_odr+0x58>
        {
            odr = (uint8_t)dev->accel_cfg.odr;
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	795b      	ldrb	r3, [r3, #5]
 80018c6:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_ODR_MASK;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	f023 030f 	bic.w	r3, r3, #15
 80018d0:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_ACCEL_ODR_MASK);
 80018d2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	b25a      	sxtb	r2, r3
 80018dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	b25b      	sxtb	r3, r3
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	701a      	strb	r2, [r3, #0]
 80018ea:	e001      	b.n	80018f0 <process_accel_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 80018ec:	23fc      	movs	r3, #252	@ 0xfc
 80018ee:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80018f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <process_accel_bw>:

/*!
 * @brief This API process the accel bandwidth.
 */
static int8_t process_accel_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 800190a:	2300      	movs	r3, #0
 800190c:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 800190e:	2300      	movs	r3, #0
 8001910:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.bw <= BMI160_ACCEL_BW_RES_AVG128)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	79db      	ldrb	r3, [r3, #7]
 800191a:	2b07      	cmp	r3, #7
 800191c:	d81b      	bhi.n	8001956 <process_accel_bw+0x56>
    {
        if (dev->accel_cfg.bw != dev->prev_accel_cfg.bw)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	79da      	ldrb	r2, [r3, #7]
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	7adb      	ldrb	r3, [r3, #11]
 8001926:	429a      	cmp	r2, r3
 8001928:	d017      	beq.n	800195a <process_accel_bw+0x5a>
        {
            bw = (uint8_t)dev->accel_cfg.bw;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	79db      	ldrb	r3, [r3, #7]
 800192e:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_BW_MASK;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001938:	73bb      	strb	r3, [r7, #14]

            /* Adding bandwidth */
            *data = temp | ((bw << 4) & BMI160_ACCEL_BW_MASK);
 800193a:	7b7b      	ldrb	r3, [r7, #13]
 800193c:	011b      	lsls	r3, r3, #4
 800193e:	b25b      	sxtb	r3, r3
 8001940:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001944:	b25a      	sxtb	r2, r3
 8001946:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800194a:	4313      	orrs	r3, r2
 800194c:	b25b      	sxtb	r3, r3
 800194e:	b2da      	uxtb	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	701a      	strb	r2, [r3, #0]
 8001954:	e001      	b.n	800195a <process_accel_bw+0x5a>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001956:	23fc      	movs	r3, #252	@ 0xfc
 8001958:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800195a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800195e:	4618      	mov	r0, r3
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <process_accel_range>:

/*!
 * @brief This API process the accel range.
 */
static int8_t process_accel_range(uint8_t *data, const struct bmi160_dev *dev)
{
 800196a:	b480      	push	{r7}
 800196c:	b085      	sub	sp, #20
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
 8001972:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001974:	2300      	movs	r3, #0
 8001976:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 800197c:	2300      	movs	r3, #0
 800197e:	737b      	strb	r3, [r7, #13]

    if (dev->accel_cfg.range <= BMI160_ACCEL_RANGE_16G)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	799b      	ldrb	r3, [r3, #6]
 8001984:	2b0c      	cmp	r3, #12
 8001986:	d81a      	bhi.n	80019be <process_accel_range+0x54>
    {
        if (dev->accel_cfg.range != dev->prev_accel_cfg.range)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	799a      	ldrb	r2, [r3, #6]
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	7a9b      	ldrb	r3, [r3, #10]
 8001990:	429a      	cmp	r2, r3
 8001992:	d016      	beq.n	80019c2 <process_accel_range+0x58>
        {
            range = (uint8_t)dev->accel_cfg.range;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	799b      	ldrb	r3, [r3, #6]
 8001998:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_ACCEL_RANGE_MASK;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	f023 030f 	bic.w	r3, r3, #15
 80019a2:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_ACCEL_RANGE_MASK);
 80019a4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80019a8:	f003 030f 	and.w	r3, r3, #15
 80019ac:	b25a      	sxtb	r2, r3
 80019ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	b25b      	sxtb	r3, r3
 80019b6:	b2da      	uxtb	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	701a      	strb	r2, [r3, #0]
 80019bc:	e001      	b.n	80019c2 <process_accel_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 80019be:	23fc      	movs	r3, #252	@ 0xfc
 80019c0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80019c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <check_invalid_settg>:
/*!
 * @brief This API checks the invalid settings for ODR & Bw for
 * Accel and Gyro.
 */
static int8_t check_invalid_settg(const struct bmi160_dev *dev)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b084      	sub	sp, #16
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 80019da:	2300      	movs	r3, #0
 80019dc:	73bb      	strb	r3, [r7, #14]

    /* read the error reg */
    rslt = bmi160_get_regs(BMI160_ERROR_REG_ADDR, &data, 1, dev);
 80019de:	f107 010e 	add.w	r1, r7, #14
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	2002      	movs	r0, #2
 80019e8:	f7ff f8c8 	bl	8000b7c <bmi160_get_regs>
 80019ec:	4603      	mov	r3, r0
 80019ee:	73fb      	strb	r3, [r7, #15]
    data = data >> 1;
 80019f0:	7bbb      	ldrb	r3, [r7, #14]
 80019f2:	085b      	lsrs	r3, r3, #1
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	73bb      	strb	r3, [r7, #14]
    data = data & BMI160_ERR_REG_MASK;
 80019f8:	7bbb      	ldrb	r3, [r7, #14]
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	73bb      	strb	r3, [r7, #14]
    if (data == 1)
 8001a02:	7bbb      	ldrb	r3, [r7, #14]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d102      	bne.n	8001a0e <check_invalid_settg+0x3c>
    {
        rslt = BMI160_E_ACCEL_ODR_BW_INVALID;
 8001a08:	23fa      	movs	r3, #250	@ 0xfa
 8001a0a:	73fb      	strb	r3, [r7, #15]
 8001a0c:	e010      	b.n	8001a30 <check_invalid_settg+0x5e>
    }
    else if (data == 2)
 8001a0e:	7bbb      	ldrb	r3, [r7, #14]
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d102      	bne.n	8001a1a <check_invalid_settg+0x48>
    {
        rslt = BMI160_E_GYRO_ODR_BW_INVALID;
 8001a14:	23f9      	movs	r3, #249	@ 0xf9
 8001a16:	73fb      	strb	r3, [r7, #15]
 8001a18:	e00a      	b.n	8001a30 <check_invalid_settg+0x5e>
    }
    else if (data == 3)
 8001a1a:	7bbb      	ldrb	r3, [r7, #14]
 8001a1c:	2b03      	cmp	r3, #3
 8001a1e:	d102      	bne.n	8001a26 <check_invalid_settg+0x54>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INT_INVALID;
 8001a20:	23f8      	movs	r3, #248	@ 0xf8
 8001a22:	73fb      	strb	r3, [r7, #15]
 8001a24:	e004      	b.n	8001a30 <check_invalid_settg+0x5e>
    }
    else if (data == 7)
 8001a26:	7bbb      	ldrb	r3, [r7, #14]
 8001a28:	2b07      	cmp	r3, #7
 8001a2a:	d101      	bne.n	8001a30 <check_invalid_settg+0x5e>
    {
        rslt = BMI160_E_LWP_PRE_FLTR_INVALID;
 8001a2c:	23f7      	movs	r3, #247	@ 0xf7
 8001a2e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001a30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <set_gyro_conf>:
static int8_t set_gyro_conf(struct bmi160_dev *dev)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data[2] = { 0 };
 8001a44:	2300      	movs	r3, #0
 8001a46:	81bb      	strh	r3, [r7, #12]

    rslt = check_gyro_config(data, dev);
 8001a48:	f107 030c 	add.w	r3, r7, #12
 8001a4c:	6879      	ldr	r1, [r7, #4]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f000 f833 	bl	8001aba <check_gyro_config>
 8001a54:	4603      	mov	r3, r0
 8001a56:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001a58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d126      	bne.n	8001aae <set_gyro_conf+0x72>
    {
        /* Write output data rate and bandwidth */
        rslt = bmi160_set_regs(BMI160_GYRO_CONFIG_ADDR, &data[0], 1, dev);
 8001a60:	f107 010c 	add.w	r1, r7, #12
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	2042      	movs	r0, #66	@ 0x42
 8001a6a:	f7ff f8ba 	bl	8000be2 <bmi160_set_regs>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d119      	bne.n	8001aae <set_gyro_conf+0x72>
        {
            dev->prev_gyro_cfg.odr = dev->gyro_cfg.odr;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	7b5a      	ldrb	r2, [r3, #13]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	745a      	strb	r2, [r3, #17]
            dev->prev_gyro_cfg.bw = dev->gyro_cfg.bw;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	7bda      	ldrb	r2, [r3, #15]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	74da      	strb	r2, [r3, #19]

            /* Write gyro range */
            rslt = bmi160_set_regs(BMI160_GYRO_RANGE_ADDR, &data[1], 1, dev);
 8001a8a:	f107 030c 	add.w	r3, r7, #12
 8001a8e:	1c59      	adds	r1, r3, #1
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	2043      	movs	r0, #67	@ 0x43
 8001a96:	f7ff f8a4 	bl	8000be2 <bmi160_set_regs>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d103      	bne.n	8001aae <set_gyro_conf+0x72>
            {
                dev->prev_gyro_cfg.range = dev->gyro_cfg.range;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	7b9a      	ldrb	r2, [r3, #14]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	749a      	strb	r2, [r3, #18]
            }
        }
    }

    return rslt;
 8001aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <check_gyro_config>:

/*!
 * @brief This API check the gyro configuration.
 */
static int8_t check_gyro_config(uint8_t *data, const struct bmi160_dev *dev)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b084      	sub	sp, #16
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
 8001ac2:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* read gyro Output data rate and bandwidth */
    rslt = bmi160_get_regs(BMI160_GYRO_CONFIG_ADDR, data, 2, dev);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	2042      	movs	r0, #66	@ 0x42
 8001acc:	f7ff f856 	bl	8000b7c <bmi160_get_regs>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001ad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d11b      	bne.n	8001b14 <check_gyro_config+0x5a>
    {
        rslt = process_gyro_odr(&data[0], dev);
 8001adc:	6839      	ldr	r1, [r7, #0]
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 f81e 	bl	8001b20 <process_gyro_odr>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8001ae8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d111      	bne.n	8001b14 <check_gyro_config+0x5a>
        {
            rslt = process_gyro_bw(&data[0], dev);
 8001af0:	6839      	ldr	r1, [r7, #0]
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f000 f848 	bl	8001b88 <process_gyro_bw>
 8001af8:	4603      	mov	r3, r0
 8001afa:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001afc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d107      	bne.n	8001b14 <check_gyro_config+0x5a>
            {
                rslt = process_gyro_range(&data[1], dev);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3301      	adds	r3, #1
 8001b08:	6839      	ldr	r1, [r7, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f000 f86b 	bl	8001be6 <process_gyro_range>
 8001b10:	4603      	mov	r3, r0
 8001b12:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8001b14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <process_gyro_odr>:

/*!
 * @brief This API process the gyro odr.
 */
static int8_t process_gyro_odr(uint8_t *data, const struct bmi160_dev *dev)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	73bb      	strb	r3, [r7, #14]
    uint8_t odr = 0;
 8001b32:	2300      	movs	r3, #0
 8001b34:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.odr <= BMI160_GYRO_ODR_3200HZ)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	7b5b      	ldrb	r3, [r3, #13]
 8001b3a:	2b0d      	cmp	r3, #13
 8001b3c:	d81a      	bhi.n	8001b74 <process_gyro_odr+0x54>
    {
        if (dev->gyro_cfg.odr != dev->prev_gyro_cfg.odr)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	7b5a      	ldrb	r2, [r3, #13]
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	7c5b      	ldrb	r3, [r3, #17]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d016      	beq.n	8001b78 <process_gyro_odr+0x58>
        {
            odr = (uint8_t)dev->gyro_cfg.odr;
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	7b5b      	ldrb	r3, [r3, #13]
 8001b4e:	737b      	strb	r3, [r7, #13]
            temp = (*data & ~BMI160_GYRO_ODR_MASK);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	f023 030f 	bic.w	r3, r3, #15
 8001b58:	73bb      	strb	r3, [r7, #14]

            /* Adding output data rate */
            *data = temp | (odr & BMI160_GYRO_ODR_MASK);
 8001b5a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	b25a      	sxtb	r2, r3
 8001b64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	b25b      	sxtb	r3, r3
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	701a      	strb	r2, [r3, #0]
 8001b72:	e001      	b.n	8001b78 <process_gyro_odr+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001b74:	23fc      	movs	r3, #252	@ 0xfc
 8001b76:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001b78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr

08001b88 <process_gyro_bw>:

/*!
 * @brief This API process the gyro bandwidth.
 */
static int8_t process_gyro_bw(uint8_t *data, const struct bmi160_dev *dev)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001b96:	2300      	movs	r3, #0
 8001b98:	73bb      	strb	r3, [r7, #14]
    uint8_t bw = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.bw <= BMI160_GYRO_BW_NORMAL_MODE)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	7bdb      	ldrb	r3, [r3, #15]
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d815      	bhi.n	8001bd2 <process_gyro_bw+0x4a>
    {
        bw = (uint8_t)dev->gyro_cfg.bw;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	7bdb      	ldrb	r3, [r3, #15]
 8001baa:	737b      	strb	r3, [r7, #13]
        temp = *data & ~BMI160_GYRO_BW_MASK;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001bb4:	73bb      	strb	r3, [r7, #14]

        /* Adding bandwidth */
        *data = temp | ((bw << 4) & BMI160_GYRO_BW_MASK);
 8001bb6:	7b7b      	ldrb	r3, [r7, #13]
 8001bb8:	011b      	lsls	r3, r3, #4
 8001bba:	b25b      	sxtb	r3, r3
 8001bbc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8001bc0:	b25a      	sxtb	r2, r3
 8001bc2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	b25b      	sxtb	r3, r3
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	701a      	strb	r2, [r3, #0]
 8001bd0:	e001      	b.n	8001bd6 <process_gyro_bw+0x4e>
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001bd2:	23fc      	movs	r3, #252	@ 0xfc
 8001bd4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001bd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <process_gyro_range>:

/*!
 * @brief This API process the gyro range.
 */
static int8_t process_gyro_range(uint8_t *data, const struct bmi160_dev *dev)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b085      	sub	sp, #20
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	6039      	str	r1, [r7, #0]
    int8_t rslt = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	73fb      	strb	r3, [r7, #15]
    uint8_t temp = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	73bb      	strb	r3, [r7, #14]
    uint8_t range = 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	737b      	strb	r3, [r7, #13]

    if (dev->gyro_cfg.range <= BMI160_GYRO_RANGE_125_DPS)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	7b9b      	ldrb	r3, [r3, #14]
 8001c00:	2b04      	cmp	r3, #4
 8001c02:	d81a      	bhi.n	8001c3a <process_gyro_range+0x54>
    {
        if (dev->gyro_cfg.range != dev->prev_gyro_cfg.range)
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	7b9a      	ldrb	r2, [r3, #14]
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	7c9b      	ldrb	r3, [r3, #18]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d016      	beq.n	8001c3e <process_gyro_range+0x58>
        {
            range = (uint8_t)dev->gyro_cfg.range;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	7b9b      	ldrb	r3, [r3, #14]
 8001c14:	737b      	strb	r3, [r7, #13]
            temp = *data & ~BMI160_GYRO_RANGE_MASK;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	f023 0307 	bic.w	r3, r3, #7
 8001c1e:	73bb      	strb	r3, [r7, #14]

            /* Adding range */
            *data = temp | (range & BMI160_GYRO_RANGE_MASK);
 8001c20:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	b25a      	sxtb	r2, r3
 8001c2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	b25b      	sxtb	r3, r3
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	701a      	strb	r2, [r3, #0]
 8001c38:	e001      	b.n	8001c3e <process_gyro_range+0x58>
        }
    }
    else
    {
        rslt = BMI160_E_OUT_OF_RANGE;
 8001c3a:	23fc      	movs	r3, #252	@ 0xfc
 8001c3c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001c3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3714      	adds	r7, #20
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr

08001c4e <set_accel_pwr>:

/*!
 * @brief This API sets the accel power.
 */
static int8_t set_accel_pwr(struct bmi160_dev *dev)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b084      	sub	sp, #16
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	73fb      	strb	r3, [r7, #15]
    uint8_t data = 0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	73bb      	strb	r3, [r7, #14]

    if ((dev->accel_cfg.power >= BMI160_ACCEL_SUSPEND_MODE) && (dev->accel_cfg.power <= BMI160_ACCEL_LOWPOWER_MODE))
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	791b      	ldrb	r3, [r3, #4]
 8001c62:	2b0f      	cmp	r3, #15
 8001c64:	d92b      	bls.n	8001cbe <set_accel_pwr+0x70>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	791b      	ldrb	r3, [r3, #4]
 8001c6a:	2b12      	cmp	r3, #18
 8001c6c:	d827      	bhi.n	8001cbe <set_accel_pwr+0x70>
    {
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	791a      	ldrb	r2, [r3, #4]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	7a1b      	ldrb	r3, [r3, #8]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d024      	beq.n	8001cc4 <set_accel_pwr+0x76>
        {
            rslt = process_under_sampling(&data, dev);
 8001c7a:	f107 030e 	add.w	r3, r7, #14
 8001c7e:	6879      	ldr	r1, [r7, #4]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f000 f826 	bl	8001cd2 <process_under_sampling>
 8001c86:	4603      	mov	r3, r0
 8001c88:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8001c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d118      	bne.n	8001cc4 <set_accel_pwr+0x76>
            {
                /* Write accel power */
                rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->accel_cfg.power, 1, dev);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	1d19      	adds	r1, r3, #4
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	207e      	movs	r0, #126	@ 0x7e
 8001c9c:	f7fe ffa1 	bl	8000be2 <bmi160_set_regs>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	73fb      	strb	r3, [r7, #15]

                /* Add delay of 3.8 ms - refer data sheet table 24*/
                if (dev->prev_accel_cfg.power == BMI160_ACCEL_SUSPEND_MODE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	7a1b      	ldrb	r3, [r3, #8]
 8001ca8:	2b10      	cmp	r3, #16
 8001caa:	d103      	bne.n	8001cb4 <set_accel_pwr+0x66>
                {
                    dev->delay_ms(BMI160_ACCEL_DELAY_MS);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb0:	2005      	movs	r0, #5
 8001cb2:	4798      	blx	r3
                }

                dev->prev_accel_cfg.power = dev->accel_cfg.power;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	791a      	ldrb	r2, [r3, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	721a      	strb	r2, [r3, #8]
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8001cbc:	e002      	b.n	8001cc4 <set_accel_pwr+0x76>
            }
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 8001cbe:	23f3      	movs	r3, #243	@ 0xf3
 8001cc0:	73fb      	strb	r3, [r7, #15]
 8001cc2:	e000      	b.n	8001cc6 <set_accel_pwr+0x78>
        if (dev->accel_cfg.power != dev->prev_accel_cfg.power)
 8001cc4:	bf00      	nop
    }

    return rslt;
 8001cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <process_under_sampling>:

/*!
 * @brief This API process the undersampling setting of Accel.
 */
static int8_t process_under_sampling(uint8_t *data, const struct bmi160_dev *dev)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b084      	sub	sp, #16
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
 8001cda:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	73bb      	strb	r3, [r7, #14]
    uint8_t pre_filter[2] = { 0 };
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	81bb      	strh	r3, [r7, #12]

    rslt = bmi160_get_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	6879      	ldr	r1, [r7, #4]
 8001cea:	2040      	movs	r0, #64	@ 0x40
 8001cec:	f7fe ff46 	bl	8000b7c <bmi160_get_regs>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8001cf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d139      	bne.n	8001d70 <process_under_sampling+0x9e>
    {
        if (dev->accel_cfg.power == BMI160_ACCEL_LOWPOWER_MODE)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	791b      	ldrb	r3, [r3, #4]
 8001d00:	2b12      	cmp	r3, #18
 8001d02:	d120      	bne.n	8001d46 <process_under_sampling+0x74>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d0c:	73bb      	strb	r3, [r7, #14]

            /* Set under-sampling parameter */
            *data = temp | ((1 << 7) & BMI160_ACCEL_UNDERSAMPLING_MASK);
 8001d0e:	7bbb      	ldrb	r3, [r7, #14]
 8001d10:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	2040      	movs	r0, #64	@ 0x40
 8001d22:	f7fe ff5e 	bl	8000be2 <bmi160_set_regs>
 8001d26:	4603      	mov	r3, r0
 8001d28:	73fb      	strb	r3, [r7, #15]

            /* Disable the pre-filter data in low power mode */
            if (rslt == BMI160_OK)
 8001d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d11e      	bne.n	8001d70 <process_under_sampling+0x9e>
            {
                /* Disable the Pre-filter data*/
                rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, pre_filter, 2, dev);
 8001d32:	f107 010c 	add.w	r1, r7, #12
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	2202      	movs	r2, #2
 8001d3a:	2058      	movs	r0, #88	@ 0x58
 8001d3c:	f7fe ff51 	bl	8000be2 <bmi160_set_regs>
 8001d40:	4603      	mov	r3, r0
 8001d42:	73fb      	strb	r3, [r7, #15]
 8001d44:	e014      	b.n	8001d70 <process_under_sampling+0x9e>
            }
        }
        else if (*data & BMI160_ACCEL_UNDERSAMPLING_MASK)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	b25b      	sxtb	r3, r3
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	da0f      	bge.n	8001d70 <process_under_sampling+0x9e>
        {
            temp = *data & ~BMI160_ACCEL_UNDERSAMPLING_MASK;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d58:	73bb      	strb	r3, [r7, #14]

            /* Disable under-sampling parameter if already enabled */
            *data = temp;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	7bba      	ldrb	r2, [r7, #14]
 8001d5e:	701a      	strb	r2, [r3, #0]

            /* Write data */
            rslt = bmi160_set_regs(BMI160_ACCEL_CONFIG_ADDR, data, 1, dev);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	2201      	movs	r2, #1
 8001d64:	6879      	ldr	r1, [r7, #4]
 8001d66:	2040      	movs	r0, #64	@ 0x40
 8001d68:	f7fe ff3b 	bl	8000be2 <bmi160_set_regs>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <set_gyro_pwr>:

/*!
 * @brief This API sets the gyro power mode.
 */
static int8_t set_gyro_pwr(struct bmi160_dev *dev)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
    int8_t rslt = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	73fb      	strb	r3, [r7, #15]

    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	7b1b      	ldrb	r3, [r3, #12]
 8001d8c:	2b14      	cmp	r3, #20
 8001d8e:	d007      	beq.n	8001da0 <set_gyro_pwr+0x24>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	7b1b      	ldrb	r3, [r3, #12]
 8001d94:	2b15      	cmp	r3, #21
 8001d96:	d003      	beq.n	8001da0 <set_gyro_pwr+0x24>
        (dev->gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE))
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	7b1b      	ldrb	r3, [r3, #12]
    if ((dev->gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE) || (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE) ||
 8001d9c:	2b17      	cmp	r3, #23
 8001d9e:	d129      	bne.n	8001df4 <set_gyro_pwr+0x78>
    {
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	7b1a      	ldrb	r2, [r3, #12]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	7c1b      	ldrb	r3, [r3, #16]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d025      	beq.n	8001df8 <set_gyro_pwr+0x7c>
        {
            /* Write gyro power */
            rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &dev->gyro_cfg.power, 1, dev);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f103 010c 	add.w	r1, r3, #12
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	207e      	movs	r0, #126	@ 0x7e
 8001db8:	f7fe ff13 	bl	8000be2 <bmi160_set_regs>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	73fb      	strb	r3, [r7, #15]
            if (dev->prev_gyro_cfg.power == BMI160_GYRO_SUSPEND_MODE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	7c1b      	ldrb	r3, [r3, #16]
 8001dc4:	2b14      	cmp	r3, #20
 8001dc6:	d104      	bne.n	8001dd2 <set_gyro_pwr+0x56>
            {
                /* Delay of 80 ms - datasheet Table 24 */
                dev->delay_ms(BMI160_GYRO_DELAY_MS);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dcc:	2050      	movs	r0, #80	@ 0x50
 8001dce:	4798      	blx	r3
 8001dd0:	e00b      	b.n	8001dea <set_gyro_pwr+0x6e>
            }
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	7c1b      	ldrb	r3, [r3, #16]
 8001dd6:	2b17      	cmp	r3, #23
 8001dd8:	d107      	bne.n	8001dea <set_gyro_pwr+0x6e>
                     (dev->gyro_cfg.power == BMI160_GYRO_NORMAL_MODE))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	7b1b      	ldrb	r3, [r3, #12]
            else if ((dev->prev_gyro_cfg.power == BMI160_GYRO_FASTSTARTUP_MODE) &&
 8001dde:	2b15      	cmp	r3, #21
 8001de0:	d103      	bne.n	8001dea <set_gyro_pwr+0x6e>
            {
                /* This delay is required for transition from
                 * fast-startup mode to normal mode - datasheet Table 3 */
                dev->delay_ms(10);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de6:	200a      	movs	r0, #10
 8001de8:	4798      	blx	r3
            else
            {
                /* do nothing */
            }

            dev->prev_gyro_cfg.power = dev->gyro_cfg.power;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	7b1a      	ldrb	r2, [r3, #12]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	741a      	strb	r2, [r3, #16]
        if (dev->gyro_cfg.power != dev->prev_gyro_cfg.power)
 8001df2:	e001      	b.n	8001df8 <set_gyro_pwr+0x7c>
        }
    }
    else
    {
        rslt = BMI160_E_INVALID_CONFIG;
 8001df4:	23f3      	movs	r3, #243	@ 0xf3
 8001df6:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8001df8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <get_accel_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_accel_data(uint8_t len, struct bmi160_sensor_data *accel, const struct bmi160_dev *dev)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08c      	sub	sp, #48	@ 0x30
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
 8001e10:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[9] = { 0 };
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	f107 0318 	add.w	r3, r7, #24
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	711a      	strb	r2, [r3, #4]
    uint8_t time_0 = 0;
 8001e26:	2300      	movs	r3, #0
 8001e28:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    /* read accel sensor data along with time if requested */
    rslt = bmi160_get_regs(BMI160_ACCEL_DATA_ADDR, data_array, 6 + len, dev);
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	3306      	adds	r3, #6
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	f107 0114 	add.w	r1, r7, #20
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2012      	movs	r0, #18
 8001e44:	f7fe fe9a 	bl	8000b7c <bmi160_get_regs>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (rslt == BMI160_OK)
 8001e4e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f040 8097 	bne.w	8001f86 <get_accel_data+0x182>
    {
        /* Accel Data */
        lsb = data_array[idx++];
 8001e58:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001e5c:	1c5a      	adds	r2, r3, #1
 8001e5e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001e62:	3330      	adds	r3, #48	@ 0x30
 8001e64:	443b      	add	r3, r7
 8001e66:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001e6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8001e6e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001e72:	1c5a      	adds	r2, r3, #1
 8001e74:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001e78:	3330      	adds	r3, #48	@ 0x30
 8001e7a:	443b      	add	r3, r7
 8001e7c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001e80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8001e84:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001e88:	021b      	lsls	r3, r3, #8
 8001e8a:	b21a      	sxth	r2, r3
 8001e8c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001e90:	b21b      	sxth	r3, r3
 8001e92:	4313      	orrs	r3, r2
 8001e94:	843b      	strh	r3, [r7, #32]
        accel->x = msblsb; /* Data in X axis */
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	8c3a      	ldrh	r2, [r7, #32]
 8001e9a:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 8001e9c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001ea0:	1c5a      	adds	r2, r3, #1
 8001ea2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001ea6:	3330      	adds	r3, #48	@ 0x30
 8001ea8:	443b      	add	r3, r7
 8001eaa:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8001eb2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001eb6:	1c5a      	adds	r2, r3, #1
 8001eb8:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001ebc:	3330      	adds	r3, #48	@ 0x30
 8001ebe:	443b      	add	r3, r7
 8001ec0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001ec4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8001ec8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001ecc:	021b      	lsls	r3, r3, #8
 8001ece:	b21a      	sxth	r2, r3
 8001ed0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001ed4:	b21b      	sxth	r3, r3
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	843b      	strh	r3, [r7, #32]
        accel->y = msblsb; /* Data in Y axis */
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	8c3a      	ldrh	r2, [r7, #32]
 8001ede:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 8001ee0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001ee4:	1c5a      	adds	r2, r3, #1
 8001ee6:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001eea:	3330      	adds	r3, #48	@ 0x30
 8001eec:	443b      	add	r3, r7
 8001eee:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001ef2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8001ef6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001efa:	1c5a      	adds	r2, r3, #1
 8001efc:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001f00:	3330      	adds	r3, #48	@ 0x30
 8001f02:	443b      	add	r3, r7
 8001f04:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001f08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8001f0c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001f10:	021b      	lsls	r3, r3, #8
 8001f12:	b21a      	sxth	r2, r3
 8001f14:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001f18:	b21b      	sxth	r3, r3
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	843b      	strh	r3, [r7, #32]
        accel->z = msblsb; /* Data in Z axis */
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	8c3a      	ldrh	r2, [r7, #32]
 8001f22:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	2b03      	cmp	r3, #3
 8001f28:	d129      	bne.n	8001f7e <get_accel_data+0x17a>
        {
            time_0 = data_array[idx++];
 8001f2a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001f2e:	1c5a      	adds	r2, r3, #1
 8001f30:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001f34:	3330      	adds	r3, #48	@ 0x30
 8001f36:	443b      	add	r3, r7
 8001f38:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001f3c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 8001f40:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001f44:	1c5a      	adds	r2, r3, #1
 8001f46:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001f4a:	3330      	adds	r3, #48	@ 0x30
 8001f4c:	443b      	add	r3, r7
 8001f4e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001f52:	021b      	lsls	r3, r3, #8
 8001f54:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 8001f56:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001f5a:	1c5a      	adds	r2, r3, #1
 8001f5c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001f60:	3330      	adds	r3, #48	@ 0x30
 8001f62:	443b      	add	r3, r7
 8001f64:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001f68:	041b      	lsls	r3, r3, #16
 8001f6a:	627b      	str	r3, [r7, #36]	@ 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8001f6c:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f70:	431a      	orrs	r2, r3
 8001f72:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001f76:	431a      	orrs	r2, r3
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	e006      	b.n	8001f8c <get_accel_data+0x188>
        }
        else
        {
            accel->sensortime = 0;
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	2200      	movs	r2, #0
 8001f82:	609a      	str	r2, [r3, #8]
 8001f84:	e002      	b.n	8001f8c <get_accel_data+0x188>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 8001f86:	23fe      	movs	r3, #254	@ 0xfe
 8001f88:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 8001f8c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3730      	adds	r7, #48	@ 0x30
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <get_gyro_data>:
/*!
 * @brief This API reads accel data along with sensor time if time is requested
 * by user. Kindly refer the user guide(README.md) for more info.
 */
static int8_t get_gyro_data(uint8_t len, struct bmi160_sensor_data *gyro, const struct bmi160_dev *dev)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08c      	sub	sp, #48	@ 0x30
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
 8001fa4:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[15] = { 0 };
 8001fac:	2300      	movs	r3, #0
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	f107 0314 	add.w	r3, r7, #20
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	f8c3 2007 	str.w	r2, [r3, #7]
    uint8_t time_0 = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t lsb;
    uint8_t msb;
    int16_t msblsb;

    if (len == 0)
 8001fcc:	7bfb      	ldrb	r3, [r7, #15]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d17b      	bne.n	80020ca <get_gyro_data+0x132>
    {
        /* read gyro data only */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 6, dev);
 8001fd2:	f107 0110 	add.w	r1, r7, #16
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2206      	movs	r2, #6
 8001fda:	200c      	movs	r0, #12
 8001fdc:	f7fe fdce 	bl	8000b7c <bmi160_get_regs>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rslt == BMI160_OK)
 8001fe6:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d169      	bne.n	80020c2 <get_gyro_data+0x12a>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 8001fee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001ff2:	1c5a      	adds	r2, r3, #1
 8001ff4:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8001ff8:	3330      	adds	r3, #48	@ 0x30
 8001ffa:	443b      	add	r3, r7
 8001ffc:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002000:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 8002004:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002008:	1c5a      	adds	r2, r3, #1
 800200a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800200e:	3330      	adds	r3, #48	@ 0x30
 8002010:	443b      	add	r3, r7
 8002012:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002016:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 800201a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800201e:	021b      	lsls	r3, r3, #8
 8002020:	b21a      	sxth	r2, r3
 8002022:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002026:	b21b      	sxth	r3, r3
 8002028:	4313      	orrs	r3, r2
 800202a:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* Data in X axis */
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	8c3a      	ldrh	r2, [r7, #32]
 8002030:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 8002032:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800203c:	3330      	adds	r3, #48	@ 0x30
 800203e:	443b      	add	r3, r7
 8002040:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002044:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 8002048:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800204c:	1c5a      	adds	r2, r3, #1
 800204e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002052:	3330      	adds	r3, #48	@ 0x30
 8002054:	443b      	add	r3, r7
 8002056:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800205a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 800205e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002062:	021b      	lsls	r3, r3, #8
 8002064:	b21a      	sxth	r2, r3
 8002066:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800206a:	b21b      	sxth	r3, r3
 800206c:	4313      	orrs	r3, r2
 800206e:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* Data in Y axis */
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	8c3a      	ldrh	r2, [r7, #32]
 8002074:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 8002076:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800207a:	1c5a      	adds	r2, r3, #1
 800207c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002080:	3330      	adds	r3, #48	@ 0x30
 8002082:	443b      	add	r3, r7
 8002084:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002088:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 800208c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002090:	1c5a      	adds	r2, r3, #1
 8002092:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002096:	3330      	adds	r3, #48	@ 0x30
 8002098:	443b      	add	r3, r7
 800209a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800209e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 80020a2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80020a6:	021b      	lsls	r3, r3, #8
 80020a8:	b21a      	sxth	r2, r3
 80020aa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80020ae:	b21b      	sxth	r3, r3
 80020b0:	4313      	orrs	r3, r2
 80020b2:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* Data in Z axis */
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	8c3a      	ldrh	r2, [r7, #32]
 80020b8:	809a      	strh	r2, [r3, #4]
            gyro->sensortime = 0;
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	2200      	movs	r2, #0
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	e0ad      	b.n	800221e <get_gyro_data+0x286>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 80020c2:	23fe      	movs	r3, #254	@ 0xfe
 80020c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80020c8:	e0a9      	b.n	800221e <get_gyro_data+0x286>
        }
    }
    else
    {
        /* read gyro sensor data along with time */
        rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	330c      	adds	r3, #12
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	f107 0110 	add.w	r1, r7, #16
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	200c      	movs	r0, #12
 80020da:	f7fe fd4f 	bl	8000b7c <bmi160_get_regs>
 80020de:	4603      	mov	r3, r0
 80020e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rslt == BMI160_OK)
 80020e4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f040 8095 	bne.w	8002218 <get_gyro_data+0x280>
        {
            /* Gyro Data */
            lsb = data_array[idx++];
 80020ee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80020f2:	1c5a      	adds	r2, r3, #1
 80020f4:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80020f8:	3330      	adds	r3, #48	@ 0x30
 80020fa:	443b      	add	r3, r7
 80020fc:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002100:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 8002104:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002108:	1c5a      	adds	r2, r3, #1
 800210a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800210e:	3330      	adds	r3, #48	@ 0x30
 8002110:	443b      	add	r3, r7
 8002112:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002116:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 800211a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800211e:	021b      	lsls	r3, r3, #8
 8002120:	b21a      	sxth	r2, r3
 8002122:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002126:	b21b      	sxth	r3, r3
 8002128:	4313      	orrs	r3, r2
 800212a:	843b      	strh	r3, [r7, #32]
            gyro->x = msblsb; /* gyro X axis data */
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	8c3a      	ldrh	r2, [r7, #32]
 8002130:	801a      	strh	r2, [r3, #0]
            lsb = data_array[idx++];
 8002132:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002136:	1c5a      	adds	r2, r3, #1
 8002138:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800213c:	3330      	adds	r3, #48	@ 0x30
 800213e:	443b      	add	r3, r7
 8002140:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002144:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 8002148:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800214c:	1c5a      	adds	r2, r3, #1
 800214e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002152:	3330      	adds	r3, #48	@ 0x30
 8002154:	443b      	add	r3, r7
 8002156:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800215a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 800215e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002162:	021b      	lsls	r3, r3, #8
 8002164:	b21a      	sxth	r2, r3
 8002166:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800216a:	b21b      	sxth	r3, r3
 800216c:	4313      	orrs	r3, r2
 800216e:	843b      	strh	r3, [r7, #32]
            gyro->y = msblsb; /* gyro Y axis data */
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	8c3a      	ldrh	r2, [r7, #32]
 8002174:	805a      	strh	r2, [r3, #2]
            lsb = data_array[idx++];
 8002176:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002180:	3330      	adds	r3, #48	@ 0x30
 8002182:	443b      	add	r3, r7
 8002184:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002188:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            msb = data_array[idx++];
 800218c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002190:	1c5a      	adds	r2, r3, #1
 8002192:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002196:	3330      	adds	r3, #48	@ 0x30
 8002198:	443b      	add	r3, r7
 800219a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800219e:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            msblsb = (int16_t)((msb << 8) | lsb);
 80021a2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80021a6:	021b      	lsls	r3, r3, #8
 80021a8:	b21a      	sxth	r2, r3
 80021aa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80021ae:	b21b      	sxth	r3, r3
 80021b0:	4313      	orrs	r3, r2
 80021b2:	843b      	strh	r3, [r7, #32]
            gyro->z = msblsb; /* gyro Z axis data */
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	8c3a      	ldrh	r2, [r7, #32]
 80021b8:	809a      	strh	r2, [r3, #4]
            idx = idx + 6;
 80021ba:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80021be:	3306      	adds	r3, #6
 80021c0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            time_0 = data_array[idx++];
 80021c4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80021c8:	1c5a      	adds	r2, r3, #1
 80021ca:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80021ce:	3330      	adds	r3, #48	@ 0x30
 80021d0:	443b      	add	r3, r7
 80021d2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80021d6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 80021da:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80021de:	1c5a      	adds	r2, r3, #1
 80021e0:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80021e4:	3330      	adds	r3, #48	@ 0x30
 80021e6:	443b      	add	r3, r7
 80021e8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80021ec:	021b      	lsls	r3, r3, #8
 80021ee:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 80021f0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80021f4:	1c5a      	adds	r2, r3, #1
 80021f6:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80021fa:	3330      	adds	r3, #48	@ 0x30
 80021fc:	443b      	add	r3, r7
 80021fe:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002202:	041b      	lsls	r3, r3, #16
 8002204:	627b      	str	r3, [r7, #36]	@ 0x24
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8002206:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220a:	431a      	orrs	r2, r3
 800220c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002210:	431a      	orrs	r2, r3
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	609a      	str	r2, [r3, #8]
 8002216:	e002      	b.n	800221e <get_gyro_data+0x286>
        }
        else
        {
            rslt = BMI160_E_COM_FAIL;
 8002218:	23fe      	movs	r3, #254	@ 0xfe
 800221a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }
    }

    return rslt;
 800221e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 8002222:	4618      	mov	r0, r3
 8002224:	3730      	adds	r7, #48	@ 0x30
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}

0800222a <get_accel_gyro_data>:
 */
static int8_t get_accel_gyro_data(uint8_t len,
                                  struct bmi160_sensor_data *accel,
                                  struct bmi160_sensor_data *gyro,
                                  const struct bmi160_dev *dev)
{
 800222a:	b580      	push	{r7, lr}
 800222c:	b08c      	sub	sp, #48	@ 0x30
 800222e:	af00      	add	r7, sp, #0
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	607a      	str	r2, [r7, #4]
 8002234:	603b      	str	r3, [r7, #0]
 8002236:	4603      	mov	r3, r0
 8002238:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t idx = 0;
 800223a:	2300      	movs	r3, #0
 800223c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint8_t data_array[15] = { 0 };
 8002240:	2300      	movs	r3, #0
 8002242:	613b      	str	r3, [r7, #16]
 8002244:	f107 0314 	add.w	r3, r7, #20
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	f8c3 2007 	str.w	r2, [r3, #7]
    uint8_t time_0 = 0;
 8002252:	2300      	movs	r3, #0
 8002254:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint16_t time_1 = 0;
 8002258:	2300      	movs	r3, #0
 800225a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    uint32_t time_2 = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t msb;
    int16_t msblsb;

    /* read both accel and gyro sensor data
     * along with time if requested */
    rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 12 + len, dev);
 8002260:	7bfb      	ldrb	r3, [r7, #15]
 8002262:	b29b      	uxth	r3, r3
 8002264:	330c      	adds	r3, #12
 8002266:	b29a      	uxth	r2, r3
 8002268:	f107 0110 	add.w	r1, r7, #16
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	200c      	movs	r0, #12
 8002270:	f7fe fc84 	bl	8000b7c <bmi160_get_regs>
 8002274:	4603      	mov	r3, r0
 8002276:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (rslt == BMI160_OK)
 800227a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800227e:	2b00      	cmp	r3, #0
 8002280:	f040 8108 	bne.w	8002494 <get_accel_gyro_data+0x26a>
    {
        /* Gyro Data */
        lsb = data_array[idx++];
 8002284:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800228e:	3330      	adds	r3, #48	@ 0x30
 8002290:	443b      	add	r3, r7
 8002292:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002296:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 800229a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800229e:	1c5a      	adds	r2, r3, #1
 80022a0:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80022a4:	3330      	adds	r3, #48	@ 0x30
 80022a6:	443b      	add	r3, r7
 80022a8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80022ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 80022b0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80022b4:	021b      	lsls	r3, r3, #8
 80022b6:	b21a      	sxth	r2, r3
 80022b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80022bc:	b21b      	sxth	r3, r3
 80022be:	4313      	orrs	r3, r2
 80022c0:	843b      	strh	r3, [r7, #32]
        gyro->x = msblsb; /* gyro X axis data */
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	8c3a      	ldrh	r2, [r7, #32]
 80022c6:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 80022c8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80022cc:	1c5a      	adds	r2, r3, #1
 80022ce:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80022d2:	3330      	adds	r3, #48	@ 0x30
 80022d4:	443b      	add	r3, r7
 80022d6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80022da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 80022de:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80022e2:	1c5a      	adds	r2, r3, #1
 80022e4:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80022e8:	3330      	adds	r3, #48	@ 0x30
 80022ea:	443b      	add	r3, r7
 80022ec:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80022f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 80022f4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80022f8:	021b      	lsls	r3, r3, #8
 80022fa:	b21a      	sxth	r2, r3
 80022fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002300:	b21b      	sxth	r3, r3
 8002302:	4313      	orrs	r3, r2
 8002304:	843b      	strh	r3, [r7, #32]
        gyro->y = msblsb; /* gyro Y axis data */
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	8c3a      	ldrh	r2, [r7, #32]
 800230a:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 800230c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002310:	1c5a      	adds	r2, r3, #1
 8002312:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002316:	3330      	adds	r3, #48	@ 0x30
 8002318:	443b      	add	r3, r7
 800231a:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800231e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8002322:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002326:	1c5a      	adds	r2, r3, #1
 8002328:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800232c:	3330      	adds	r3, #48	@ 0x30
 800232e:	443b      	add	r3, r7
 8002330:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002334:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8002338:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800233c:	021b      	lsls	r3, r3, #8
 800233e:	b21a      	sxth	r2, r3
 8002340:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002344:	b21b      	sxth	r3, r3
 8002346:	4313      	orrs	r3, r2
 8002348:	843b      	strh	r3, [r7, #32]
        gyro->z = msblsb; /* gyro Z axis data */
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	8c3a      	ldrh	r2, [r7, #32]
 800234e:	809a      	strh	r2, [r3, #4]
        /* Accel Data */
        lsb = data_array[idx++];
 8002350:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002354:	1c5a      	adds	r2, r3, #1
 8002356:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800235a:	3330      	adds	r3, #48	@ 0x30
 800235c:	443b      	add	r3, r7
 800235e:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002362:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 8002366:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800236a:	1c5a      	adds	r2, r3, #1
 800236c:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002370:	3330      	adds	r3, #48	@ 0x30
 8002372:	443b      	add	r3, r7
 8002374:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002378:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 800237c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002380:	021b      	lsls	r3, r3, #8
 8002382:	b21a      	sxth	r2, r3
 8002384:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002388:	b21b      	sxth	r3, r3
 800238a:	4313      	orrs	r3, r2
 800238c:	843b      	strh	r3, [r7, #32]
        accel->x = (int16_t)msblsb; /* accel X axis data */
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	8c3a      	ldrh	r2, [r7, #32]
 8002392:	801a      	strh	r2, [r3, #0]
        lsb = data_array[idx++];
 8002394:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002398:	1c5a      	adds	r2, r3, #1
 800239a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800239e:	3330      	adds	r3, #48	@ 0x30
 80023a0:	443b      	add	r3, r7
 80023a2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80023a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 80023aa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80023ae:	1c5a      	adds	r2, r3, #1
 80023b0:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80023b4:	3330      	adds	r3, #48	@ 0x30
 80023b6:	443b      	add	r3, r7
 80023b8:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80023bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 80023c0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80023c4:	021b      	lsls	r3, r3, #8
 80023c6:	b21a      	sxth	r2, r3
 80023c8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80023cc:	b21b      	sxth	r3, r3
 80023ce:	4313      	orrs	r3, r2
 80023d0:	843b      	strh	r3, [r7, #32]
        accel->y = (int16_t)msblsb; /* accel Y axis data */
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	8c3a      	ldrh	r2, [r7, #32]
 80023d6:	805a      	strh	r2, [r3, #2]
        lsb = data_array[idx++];
 80023d8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80023dc:	1c5a      	adds	r2, r3, #1
 80023de:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80023e2:	3330      	adds	r3, #48	@ 0x30
 80023e4:	443b      	add	r3, r7
 80023e6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80023ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        msb = data_array[idx++];
 80023ee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80023f8:	3330      	adds	r3, #48	@ 0x30
 80023fa:	443b      	add	r3, r7
 80023fc:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002400:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        msblsb = (int16_t)((msb << 8) | lsb);
 8002404:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8002408:	021b      	lsls	r3, r3, #8
 800240a:	b21a      	sxth	r2, r3
 800240c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002410:	b21b      	sxth	r3, r3
 8002412:	4313      	orrs	r3, r2
 8002414:	843b      	strh	r3, [r7, #32]
        accel->z = (int16_t)msblsb; /* accel Z axis data */
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	8c3a      	ldrh	r2, [r7, #32]
 800241a:	809a      	strh	r2, [r3, #4]
        if (len == 3)
 800241c:	7bfb      	ldrb	r3, [r7, #15]
 800241e:	2b03      	cmp	r3, #3
 8002420:	d131      	bne.n	8002486 <get_accel_gyro_data+0x25c>
        {
            time_0 = data_array[idx++];
 8002422:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002426:	1c5a      	adds	r2, r3, #1
 8002428:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800242c:	3330      	adds	r3, #48	@ 0x30
 800242e:	443b      	add	r3, r7
 8002430:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002434:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
            time_1 = (uint16_t)(data_array[idx++] << 8);
 8002438:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800243c:	1c5a      	adds	r2, r3, #1
 800243e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002442:	3330      	adds	r3, #48	@ 0x30
 8002444:	443b      	add	r3, r7
 8002446:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800244a:	021b      	lsls	r3, r3, #8
 800244c:	857b      	strh	r3, [r7, #42]	@ 0x2a
            time_2 = (uint32_t)(data_array[idx++] << 16);
 800244e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002452:	1c5a      	adds	r2, r3, #1
 8002454:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002458:	3330      	adds	r3, #48	@ 0x30
 800245a:	443b      	add	r3, r7
 800245c:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002460:	041b      	lsls	r3, r3, #16
 8002462:	627b      	str	r3, [r7, #36]	@ 0x24
            accel->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8002464:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002468:	431a      	orrs	r2, r3
 800246a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800246e:	431a      	orrs	r2, r3
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	609a      	str	r2, [r3, #8]
            gyro->sensortime = (uint32_t)(time_2 | time_1 | time_0);
 8002474:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8002476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002478:	431a      	orrs	r2, r3
 800247a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800247e:	431a      	orrs	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	e009      	b.n	800249a <get_accel_gyro_data+0x270>
        }
        else
        {
            accel->sensortime = 0;
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	2200      	movs	r2, #0
 800248a:	609a      	str	r2, [r3, #8]
            gyro->sensortime = 0;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	609a      	str	r2, [r3, #8]
 8002492:	e002      	b.n	800249a <get_accel_gyro_data+0x270>
        }
    }
    else
    {
        rslt = BMI160_E_COM_FAIL;
 8002494:	23fe      	movs	r3, #254	@ 0xfe
 8002496:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return rslt;
 800249a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3730      	adds	r7, #48	@ 0x30
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <enable_accel_any_motion_int>:
/*!
 * @brief This API enables the any-motion interrupt for accel.
 */
static int8_t enable_accel_any_motion_int(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                          struct bmi160_dev *dev)
{
 80024a6:	b580      	push	{r7, lr}
 80024a8:	b084      	sub	sp, #16
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
 80024ae:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80024b4:	2300      	movs	r3, #0
 80024b6:	73bb      	strb	r3, [r7, #14]

    /* Enable any motion x, any motion y, any motion z
     * in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 80024b8:	f107 010d 	add.w	r1, r7, #13
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	2201      	movs	r2, #1
 80024c0:	2050      	movs	r0, #80	@ 0x50
 80024c2:	f7fe fb5b 	bl	8000b7c <bmi160_get_regs>
 80024c6:	4603      	mov	r3, r0
 80024c8:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80024ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d151      	bne.n	8002576 <enable_accel_any_motion_int+0xd0>
    {
        if (any_motion_int_cfg->anymotion_en == BMI160_ENABLE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	b2db      	uxtb	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d039      	beq.n	8002554 <enable_accel_any_motion_int+0xae>
        {
            temp = data & ~BMI160_ANY_MOTION_X_INT_EN_MASK;
 80024e0:	7b7b      	ldrb	r3, [r7, #13]
 80024e2:	f023 0301 	bic.w	r3, r3, #1
 80024e6:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion x axis */
            data = temp | (any_motion_int_cfg->anymotion_x & BMI160_ANY_MOTION_X_INT_EN_MASK);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	461a      	mov	r2, r3
 80024f4:	7bbb      	ldrb	r3, [r7, #14]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_ANY_MOTION_Y_INT_EN_MASK;
 80024fc:	7b7b      	ldrb	r3, [r7, #13]
 80024fe:	f023 0302 	bic.w	r3, r3, #2
 8002502:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion y axis */
            data = temp | ((any_motion_int_cfg->anymotion_y << 1) & BMI160_ANY_MOTION_Y_INT_EN_MASK);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800250c:	b2db      	uxtb	r3, r3
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	b25b      	sxtb	r3, r3
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	b25a      	sxtb	r2, r3
 8002518:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800251c:	4313      	orrs	r3, r2
 800251e:	b25b      	sxtb	r3, r3
 8002520:	b2db      	uxtb	r3, r3
 8002522:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_ANY_MOTION_Z_INT_EN_MASK;
 8002524:	7b7b      	ldrb	r3, [r7, #13]
 8002526:	f023 0304 	bic.w	r3, r3, #4
 800252a:	73bb      	strb	r3, [r7, #14]

            /* Adding Any_motion z axis */
            data = temp | ((any_motion_int_cfg->anymotion_z << 2) & BMI160_ANY_MOTION_Z_INT_EN_MASK);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002534:	b2db      	uxtb	r3, r3
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	b25b      	sxtb	r3, r3
 800253a:	f003 0304 	and.w	r3, r3, #4
 800253e:	b25a      	sxtb	r2, r3
 8002540:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002544:	4313      	orrs	r3, r2
 8002546:	b25b      	sxtb	r3, r3
 8002548:	b2db      	uxtb	r3, r3
 800254a:	737b      	strb	r3, [r7, #13]

            /* any-motion feature selected*/
            dev->any_sig_sel = BMI160_ANY_MOTION_ENABLED;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	2200      	movs	r2, #0
 8002550:	70da      	strb	r2, [r3, #3]
 8002552:	e007      	b.n	8002564 <enable_accel_any_motion_int+0xbe>
        }
        else
        {
            data = data & ~BMI160_ANY_MOTION_ALL_INT_EN_MASK;
 8002554:	7b7b      	ldrb	r3, [r7, #13]
 8002556:	f023 0307 	bic.w	r3, r3, #7
 800255a:	b2db      	uxtb	r3, r3
 800255c:	737b      	strb	r3, [r7, #13]

            /* neither any-motion feature nor sig-motion selected */
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	22ff      	movs	r2, #255	@ 0xff
 8002562:	70da      	strb	r2, [r3, #3]
        }

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8002564:	f107 010d 	add.w	r1, r7, #13
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	2201      	movs	r2, #1
 800256c:	2050      	movs	r0, #80	@ 0x50
 800256e:	f7fe fb38 	bl	8000be2 <bmi160_set_regs>
 8002572:	4603      	mov	r3, r0
 8002574:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002576:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800257a:	4618      	mov	r0, r3
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <disable_sig_motion_int>:

/*!
 * @brief This API disable the sig-motion interrupt.
 */
static int8_t disable_sig_motion_int(const struct bmi160_dev *dev)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b084      	sub	sp, #16
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 800258a:	2300      	movs	r3, #0
 800258c:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 800258e:	2300      	movs	r3, #0
 8002590:	73bb      	strb	r3, [r7, #14]

    /* Disabling Significant motion interrupt if enabled */
    rslt = bmi160_get_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 8002592:	f107 010d 	add.w	r1, r7, #13
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	2062      	movs	r0, #98	@ 0x62
 800259c:	f7fe faee 	bl	8000b7c <bmi160_get_regs>
 80025a0:	4603      	mov	r3, r0
 80025a2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80025a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d115      	bne.n	80025d8 <disable_sig_motion_int+0x56>
    {
        temp = (data & BMI160_SIG_MOTION_SEL_MASK);
 80025ac:	7b7b      	ldrb	r3, [r7, #13]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	73bb      	strb	r3, [r7, #14]
        if (temp)
 80025b4:	7bbb      	ldrb	r3, [r7, #14]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00e      	beq.n	80025d8 <disable_sig_motion_int+0x56>
        {
            temp = data & ~BMI160_SIG_MOTION_SEL_MASK;
 80025ba:	7b7b      	ldrb	r3, [r7, #13]
 80025bc:	f023 0302 	bic.w	r3, r3, #2
 80025c0:	73bb      	strb	r3, [r7, #14]
            data = temp;
 80025c2:	7bbb      	ldrb	r3, [r7, #14]
 80025c4:	737b      	strb	r3, [r7, #13]

            /* Write data to register */
            rslt = bmi160_set_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 80025c6:	f107 010d 	add.w	r1, r7, #13
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	2062      	movs	r0, #98	@ 0x62
 80025d0:	f7fe fb07 	bl	8000be2 <bmi160_set_regs>
 80025d4:	4603      	mov	r3, r0
 80025d6:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 80025d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <map_feature_interrupt>:
/*!
 *  @brief This API is used to map/unmap the Any/Sig motion, Step det/Low-g,
 *  Double tap, Single tap, Orientation, Flat, High-G, Nomotion interrupt pins.
 */
static int8_t map_feature_interrupt(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data[3] = { 0, 0, 0 };
 80025ee:	4a48      	ldr	r2, [pc, #288]	@ (8002710 <map_feature_interrupt+0x12c>)
 80025f0:	f107 030c 	add.w	r3, r7, #12
 80025f4:	6812      	ldr	r2, [r2, #0]
 80025f6:	4611      	mov	r1, r2
 80025f8:	8019      	strh	r1, [r3, #0]
 80025fa:	3302      	adds	r3, #2
 80025fc:	0c12      	lsrs	r2, r2, #16
 80025fe:	701a      	strb	r2, [r3, #0]
    uint8_t temp[3] = { 0, 0, 0 };
 8002600:	4a43      	ldr	r2, [pc, #268]	@ (8002710 <map_feature_interrupt+0x12c>)
 8002602:	f107 0308 	add.w	r3, r7, #8
 8002606:	6812      	ldr	r2, [r2, #0]
 8002608:	4611      	mov	r1, r2
 800260a:	8019      	strh	r1, [r3, #0]
 800260c:	3302      	adds	r3, #2
 800260e:	0c12      	lsrs	r2, r2, #16
 8002610:	701a      	strb	r2, [r3, #0]

    rslt = bmi160_get_regs(BMI160_INT_MAP_0_ADDR, data, 3, dev);
 8002612:	f107 010c 	add.w	r1, r7, #12
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	2203      	movs	r2, #3
 800261a:	2055      	movs	r0, #85	@ 0x55
 800261c:	f7fe faae 	bl	8000b7c <bmi160_get_regs>
 8002620:	4603      	mov	r3, r0
 8002622:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002624:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d16a      	bne.n	8002702 <map_feature_interrupt+0x11e>
    {
        temp[0] = data[0] & ~int_mask_lookup_table[int_config->int_type];
 800262c:	7b3b      	ldrb	r3, [r7, #12]
 800262e:	b25a      	sxtb	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	785b      	ldrb	r3, [r3, #1]
 8002634:	4619      	mov	r1, r3
 8002636:	4b37      	ldr	r3, [pc, #220]	@ (8002714 <map_feature_interrupt+0x130>)
 8002638:	5c5b      	ldrb	r3, [r3, r1]
 800263a:	b25b      	sxtb	r3, r3
 800263c:	43db      	mvns	r3, r3
 800263e:	b25b      	sxtb	r3, r3
 8002640:	4013      	ands	r3, r2
 8002642:	b25b      	sxtb	r3, r3
 8002644:	b2db      	uxtb	r3, r3
 8002646:	723b      	strb	r3, [r7, #8]
        temp[2] = data[2] & ~int_mask_lookup_table[int_config->int_type];
 8002648:	7bbb      	ldrb	r3, [r7, #14]
 800264a:	b25a      	sxtb	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	785b      	ldrb	r3, [r3, #1]
 8002650:	4619      	mov	r1, r3
 8002652:	4b30      	ldr	r3, [pc, #192]	@ (8002714 <map_feature_interrupt+0x130>)
 8002654:	5c5b      	ldrb	r3, [r3, r1]
 8002656:	b25b      	sxtb	r3, r3
 8002658:	43db      	mvns	r3, r3
 800265a:	b25b      	sxtb	r3, r3
 800265c:	4013      	ands	r3, r2
 800265e:	b25b      	sxtb	r3, r3
 8002660:	b2db      	uxtb	r3, r3
 8002662:	72bb      	strb	r3, [r7, #10]
        switch (int_config->int_channel)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b03      	cmp	r3, #3
 800266a:	d83b      	bhi.n	80026e4 <map_feature_interrupt+0x100>
 800266c:	a201      	add	r2, pc, #4	@ (adr r2, 8002674 <map_feature_interrupt+0x90>)
 800266e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002672:	bf00      	nop
 8002674:	08002685 	.word	0x08002685
 8002678:	0800268f 	.word	0x0800268f
 800267c:	080026a7 	.word	0x080026a7
 8002680:	080026bf 	.word	0x080026bf
        {
            case BMI160_INT_CHANNEL_NONE:
                data[0] = temp[0];
 8002684:	7a3b      	ldrb	r3, [r7, #8]
 8002686:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2];
 8002688:	7abb      	ldrb	r3, [r7, #10]
 800268a:	73bb      	strb	r3, [r7, #14]
                break;
 800268c:	e02c      	b.n	80026e8 <map_feature_interrupt+0x104>
            case BMI160_INT_CHANNEL_1:
                data[0] = temp[0] | int_mask_lookup_table[int_config->int_type];
 800268e:	7a3a      	ldrb	r2, [r7, #8]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	785b      	ldrb	r3, [r3, #1]
 8002694:	4619      	mov	r1, r3
 8002696:	4b1f      	ldr	r3, [pc, #124]	@ (8002714 <map_feature_interrupt+0x130>)
 8002698:	5c5b      	ldrb	r3, [r3, r1]
 800269a:	4313      	orrs	r3, r2
 800269c:	b2db      	uxtb	r3, r3
 800269e:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2];
 80026a0:	7abb      	ldrb	r3, [r7, #10]
 80026a2:	73bb      	strb	r3, [r7, #14]
                break;
 80026a4:	e020      	b.n	80026e8 <map_feature_interrupt+0x104>
            case BMI160_INT_CHANNEL_2:
                data[2] = temp[2] | int_mask_lookup_table[int_config->int_type];
 80026a6:	7aba      	ldrb	r2, [r7, #10]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	785b      	ldrb	r3, [r3, #1]
 80026ac:	4619      	mov	r1, r3
 80026ae:	4b19      	ldr	r3, [pc, #100]	@ (8002714 <map_feature_interrupt+0x130>)
 80026b0:	5c5b      	ldrb	r3, [r3, r1]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	73bb      	strb	r3, [r7, #14]
                data[0] = temp[0];
 80026b8:	7a3b      	ldrb	r3, [r7, #8]
 80026ba:	733b      	strb	r3, [r7, #12]
                break;
 80026bc:	e014      	b.n	80026e8 <map_feature_interrupt+0x104>
            case BMI160_INT_CHANNEL_BOTH:
                data[0] = temp[0] | int_mask_lookup_table[int_config->int_type];
 80026be:	7a3a      	ldrb	r2, [r7, #8]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	785b      	ldrb	r3, [r3, #1]
 80026c4:	4619      	mov	r1, r3
 80026c6:	4b13      	ldr	r3, [pc, #76]	@ (8002714 <map_feature_interrupt+0x130>)
 80026c8:	5c5b      	ldrb	r3, [r3, r1]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	733b      	strb	r3, [r7, #12]
                data[2] = temp[2] | int_mask_lookup_table[int_config->int_type];
 80026d0:	7aba      	ldrb	r2, [r7, #10]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	785b      	ldrb	r3, [r3, #1]
 80026d6:	4619      	mov	r1, r3
 80026d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002714 <map_feature_interrupt+0x130>)
 80026da:	5c5b      	ldrb	r3, [r3, r1]
 80026dc:	4313      	orrs	r3, r2
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	73bb      	strb	r3, [r7, #14]
                break;
 80026e2:	e001      	b.n	80026e8 <map_feature_interrupt+0x104>
            default:
                rslt = BMI160_E_OUT_OF_RANGE;
 80026e4:	23fc      	movs	r3, #252	@ 0xfc
 80026e6:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMI160_OK)
 80026e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d108      	bne.n	8002702 <map_feature_interrupt+0x11e>
        {
            rslt = bmi160_set_regs(BMI160_INT_MAP_0_ADDR, data, 3, dev);
 80026f0:	f107 010c 	add.w	r1, r7, #12
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	2203      	movs	r2, #3
 80026f8:	2055      	movs	r0, #85	@ 0x55
 80026fa:	f7fe fa72 	bl	8000be2 <bmi160_set_regs>
 80026fe:	4603      	mov	r3, r0
 8002700:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8002702:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	080134c4 	.word	0x080134c4
 8002714:	08013574 	.word	0x08013574

08002718 <map_hardware_interrupt>:
/*!
 *  @brief This API is used to map/unmap the Dataready(Accel & Gyro), FIFO full
 *  and FIFO watermark interrupt.
 */
static int8_t map_hardware_interrupt(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002722:	2300      	movs	r3, #0
 8002724:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002726:	2300      	movs	r3, #0
 8002728:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_MAP_1_ADDR, &data, 1, dev);
 800272a:	f107 010d 	add.w	r1, r7, #13
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	2201      	movs	r2, #1
 8002732:	2056      	movs	r0, #86	@ 0x56
 8002734:	f7fe fa22 	bl	8000b7c <bmi160_get_regs>
 8002738:	4603      	mov	r3, r0
 800273a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800273c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d168      	bne.n	8002816 <map_hardware_interrupt+0xfe>
    {
        temp = data & ~int_mask_lookup_table[int_config->int_type];
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	785b      	ldrb	r3, [r3, #1]
 8002748:	461a      	mov	r2, r3
 800274a:	4b36      	ldr	r3, [pc, #216]	@ (8002824 <map_hardware_interrupt+0x10c>)
 800274c:	5c9b      	ldrb	r3, [r3, r2]
 800274e:	b25b      	sxtb	r3, r3
 8002750:	43db      	mvns	r3, r3
 8002752:	b25a      	sxtb	r2, r3
 8002754:	7b7b      	ldrb	r3, [r7, #13]
 8002756:	b25b      	sxtb	r3, r3
 8002758:	4013      	ands	r3, r2
 800275a:	b25b      	sxtb	r3, r3
 800275c:	73bb      	strb	r3, [r7, #14]
        temp = temp & ~((uint8_t)(int_mask_lookup_table[int_config->int_type] << 4));
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	785b      	ldrb	r3, [r3, #1]
 8002762:	461a      	mov	r2, r3
 8002764:	4b2f      	ldr	r3, [pc, #188]	@ (8002824 <map_hardware_interrupt+0x10c>)
 8002766:	5c9b      	ldrb	r3, [r3, r2]
 8002768:	011b      	lsls	r3, r3, #4
 800276a:	b2db      	uxtb	r3, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	b2db      	uxtb	r3, r3
 8002770:	b25a      	sxtb	r2, r3
 8002772:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002776:	4013      	ands	r3, r2
 8002778:	b25b      	sxtb	r3, r3
 800277a:	73bb      	strb	r3, [r7, #14]
        switch (int_config->int_channel)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b03      	cmp	r3, #3
 8002782:	d839      	bhi.n	80027f8 <map_hardware_interrupt+0xe0>
 8002784:	a201      	add	r2, pc, #4	@ (adr r2, 800278c <map_hardware_interrupt+0x74>)
 8002786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800278a:	bf00      	nop
 800278c:	0800279d 	.word	0x0800279d
 8002790:	080027a3 	.word	0x080027a3
 8002794:	080027bb 	.word	0x080027bb
 8002798:	080027cf 	.word	0x080027cf
        {
            case BMI160_INT_CHANNEL_NONE:
                data = temp;
 800279c:	7bbb      	ldrb	r3, [r7, #14]
 800279e:	737b      	strb	r3, [r7, #13]
                break;
 80027a0:	e02c      	b.n	80027fc <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_1:
                data = temp | (uint8_t)((int_mask_lookup_table[int_config->int_type]) << 4);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	785b      	ldrb	r3, [r3, #1]
 80027a6:	461a      	mov	r2, r3
 80027a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002824 <map_hardware_interrupt+0x10c>)
 80027aa:	5c9b      	ldrb	r3, [r3, r2]
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	7bbb      	ldrb	r3, [r7, #14]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	737b      	strb	r3, [r7, #13]
                break;
 80027b8:	e020      	b.n	80027fc <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_2:
                data = temp | int_mask_lookup_table[int_config->int_type];
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	785b      	ldrb	r3, [r3, #1]
 80027be:	461a      	mov	r2, r3
 80027c0:	4b18      	ldr	r3, [pc, #96]	@ (8002824 <map_hardware_interrupt+0x10c>)
 80027c2:	5c9a      	ldrb	r2, [r3, r2]
 80027c4:	7bbb      	ldrb	r3, [r7, #14]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	737b      	strb	r3, [r7, #13]
                break;
 80027cc:	e016      	b.n	80027fc <map_hardware_interrupt+0xe4>
            case BMI160_INT_CHANNEL_BOTH:
                data = temp | int_mask_lookup_table[int_config->int_type];
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	785b      	ldrb	r3, [r3, #1]
 80027d2:	461a      	mov	r2, r3
 80027d4:	4b13      	ldr	r3, [pc, #76]	@ (8002824 <map_hardware_interrupt+0x10c>)
 80027d6:	5c9a      	ldrb	r2, [r3, r2]
 80027d8:	7bbb      	ldrb	r3, [r7, #14]
 80027da:	4313      	orrs	r3, r2
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	737b      	strb	r3, [r7, #13]
                data = data | (uint8_t)((int_mask_lookup_table[int_config->int_type]) << 4);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	785b      	ldrb	r3, [r3, #1]
 80027e4:	461a      	mov	r2, r3
 80027e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002824 <map_hardware_interrupt+0x10c>)
 80027e8:	5c9b      	ldrb	r3, [r3, r2]
 80027ea:	011b      	lsls	r3, r3, #4
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	7b7b      	ldrb	r3, [r7, #13]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	737b      	strb	r3, [r7, #13]
                break;
 80027f6:	e001      	b.n	80027fc <map_hardware_interrupt+0xe4>
            default:
                rslt = BMI160_E_OUT_OF_RANGE;
 80027f8:	23fc      	movs	r3, #252	@ 0xfc
 80027fa:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BMI160_OK)
 80027fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d108      	bne.n	8002816 <map_hardware_interrupt+0xfe>
        {
            rslt = bmi160_set_regs(BMI160_INT_MAP_1_ADDR, &data, 1, dev);
 8002804:	f107 010d 	add.w	r1, r7, #13
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	2201      	movs	r2, #1
 800280c:	2056      	movs	r0, #86	@ 0x56
 800280e:	f7fe f9e8 	bl	8000be2 <bmi160_set_regs>
 8002812:	4603      	mov	r3, r0
 8002814:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8002816:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	08013574 	.word	0x08013574

08002828 <config_any_motion_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for any-motion interrupt.
 */
static int8_t config_any_motion_src(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                    const struct bmi160_dev *dev)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002832:	2300      	movs	r3, #0
 8002834:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002836:	2300      	movs	r3, #0
 8002838:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 800283a:	f107 010d 	add.w	r1, r7, #13
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	2201      	movs	r2, #1
 8002842:	2059      	movs	r0, #89	@ 0x59
 8002844:	f7fe f99a 	bl	8000b7c <bmi160_get_regs>
 8002848:	4603      	mov	r3, r0
 800284a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800284c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d119      	bne.n	8002888 <config_any_motion_src+0x60>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 8002854:	7b7b      	ldrb	r3, [r7, #13]
 8002856:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800285a:	73bb      	strb	r3, [r7, #14]
        data = temp | ((any_motion_int_cfg->anymotion_data_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002864:	b2db      	uxtb	r3, r3
 8002866:	01db      	lsls	r3, r3, #7
 8002868:	b25a      	sxtb	r2, r3
 800286a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800286e:	4313      	orrs	r3, r2
 8002870:	b25b      	sxtb	r3, r3
 8002872:	b2db      	uxtb	r3, r3
 8002874:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8002876:	f107 010d 	add.w	r1, r7, #13
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	2201      	movs	r2, #1
 800287e:	2059      	movs	r0, #89	@ 0x59
 8002880:	f7fe f9af 	bl	8000be2 <bmi160_set_regs>
 8002884:	4603      	mov	r3, r0
 8002886:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002888:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800288c:	4618      	mov	r0, r3
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <config_any_dur_threshold>:
 * @brief This API configure the duration and threshold of
 * any-motion interrupt.
 */
static int8_t config_any_dur_threshold(const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                       const struct bmi160_dev *dev)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800289e:	2300      	movs	r3, #0
 80028a0:	733b      	strb	r3, [r7, #12]
    uint8_t temp = 0;
 80028a2:	2300      	movs	r3, #0
 80028a4:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[2] = { 0 };
 80028a6:	2300      	movs	r3, #0
 80028a8:	813b      	strh	r3, [r7, #8]
    uint8_t dur;

    /* Configure Int Motion 0 register */
    rslt = bmi160_get_regs(BMI160_INT_MOTION_0_ADDR, &data, 1, dev);
 80028aa:	f107 010c 	add.w	r1, r7, #12
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	2201      	movs	r2, #1
 80028b2:	205f      	movs	r0, #95	@ 0x5f
 80028b4:	f7fe f962 	bl	8000b7c <bmi160_get_regs>
 80028b8:	4603      	mov	r3, r0
 80028ba:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80028bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d122      	bne.n	800290a <config_any_dur_threshold+0x76>
    {
        /* slope duration */
        dur = (uint8_t)any_motion_int_cfg->anymotion_dur;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	737b      	strb	r3, [r7, #13]
        temp = data & ~BMI160_SLOPE_INT_DUR_MASK;
 80028d0:	7b3b      	ldrb	r3, [r7, #12]
 80028d2:	f023 0303 	bic.w	r3, r3, #3
 80028d6:	73bb      	strb	r3, [r7, #14]
        data = temp | (dur & BMI160_MOTION_SRC_INT_MASK);
 80028d8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80028dc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80028e0:	b25a      	sxtb	r2, r3
 80028e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	b25b      	sxtb	r3, r3
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	733b      	strb	r3, [r7, #12]
        data_array[0] = data;
 80028ee:	7b3b      	ldrb	r3, [r7, #12]
 80028f0:	723b      	strb	r3, [r7, #8]

        /* add slope threshold */
        data_array[1] = any_motion_int_cfg->anymotion_thr;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	785b      	ldrb	r3, [r3, #1]
 80028f6:	727b      	strb	r3, [r7, #9]
        /* INT MOTION 0 and INT MOTION 1 address lie consecutively,
         * hence writing data to respective registers at one go */

        /* Writing to Int_motion 0 and
         * Int_motion 1 Address simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_MOTION_0_ADDR, data_array, 2, dev);
 80028f8:	f107 0108 	add.w	r1, r7, #8
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	2202      	movs	r2, #2
 8002900:	205f      	movs	r0, #95	@ 0x5f
 8002902:	f7fe f96e 	bl	8000be2 <bmi160_set_regs>
 8002906:	4603      	mov	r3, r0
 8002908:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800290a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <config_any_motion_int_settg>:
 * @brief This API configure necessary setting of any-motion interrupt.
 */
static int8_t config_any_motion_int_settg(const struct bmi160_int_settg *int_config,
                                          const struct bmi160_acc_any_mot_int_cfg *any_motion_int_cfg,
                                          const struct bmi160_dev *dev)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b086      	sub	sp, #24
 800291a:	af00      	add	r7, sp, #0
 800291c:	60f8      	str	r0, [r7, #12]
 800291e:	60b9      	str	r1, [r7, #8]
 8002920:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f7fe fee0 	bl	80016ea <set_intr_pin_config>
 800292a:	4603      	mov	r3, r0
 800292c:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 800292e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d122      	bne.n	800297c <config_any_motion_int_settg+0x66>
    {
        rslt = disable_sig_motion_int(dev);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7ff fe23 	bl	8002582 <disable_sig_motion_int>
 800293c:	4603      	mov	r3, r0
 800293e:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8002940:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d119      	bne.n	800297c <config_any_motion_int_settg+0x66>
        {
            rslt = map_feature_interrupt(int_config, dev);
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f7ff fe4a 	bl	80025e4 <map_feature_interrupt>
 8002950:	4603      	mov	r3, r0
 8002952:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 8002954:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10f      	bne.n	800297c <config_any_motion_int_settg+0x66>
            {
                rslt = config_any_motion_src(any_motion_int_cfg, dev);
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	68b8      	ldr	r0, [r7, #8]
 8002960:	f7ff ff62 	bl	8002828 <config_any_motion_src>
 8002964:	4603      	mov	r3, r0
 8002966:	75fb      	strb	r3, [r7, #23]
                if (rslt == BMI160_OK)
 8002968:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d105      	bne.n	800297c <config_any_motion_int_settg+0x66>
                {
                    rslt = config_any_dur_threshold(any_motion_int_cfg, dev);
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	68b8      	ldr	r0, [r7, #8]
 8002974:	f7ff ff8e 	bl	8002894 <config_any_dur_threshold>
 8002978:	4603      	mov	r3, r0
 800297a:	75fb      	strb	r3, [r7, #23]
                }
            }
        }
    }

    return rslt;
 800297c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <enable_data_ready_int>:

/*!
 * @brief This API enable the data ready interrupt.
 */
static int8_t enable_data_ready_int(const struct bmi160_dev *dev)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 8002990:	2300      	movs	r3, #0
 8002992:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002994:	2300      	movs	r3, #0
 8002996:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8002998:	f107 010d 	add.w	r1, r7, #13
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	2051      	movs	r0, #81	@ 0x51
 80029a2:	f7fe f8eb 	bl	8000b7c <bmi160_get_regs>
 80029a6:	4603      	mov	r3, r0
 80029a8:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80029aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d111      	bne.n	80029d6 <enable_data_ready_int+0x4e>
    {
        temp = data & ~BMI160_DATA_RDY_INT_EN_MASK;
 80029b2:	7b7b      	ldrb	r3, [r7, #13]
 80029b4:	f023 0310 	bic.w	r3, r3, #16
 80029b8:	73bb      	strb	r3, [r7, #14]
        data = temp | ((1 << 4) & BMI160_DATA_RDY_INT_EN_MASK);
 80029ba:	7bbb      	ldrb	r3, [r7, #14]
 80029bc:	f043 0310 	orr.w	r3, r3, #16
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	737b      	strb	r3, [r7, #13]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80029c4:	f107 010d 	add.w	r1, r7, #13
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	2051      	movs	r0, #81	@ 0x51
 80029ce:	f7fe f908 	bl	8000be2 <bmi160_set_regs>
 80029d2:	4603      	mov	r3, r0
 80029d4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80029d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <enable_no_motion_int>:
/*!
 * @brief This API enables the no motion/slow motion interrupt.
 */
static int8_t enable_no_motion_int(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                   const struct bmi160_dev *dev)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b084      	sub	sp, #16
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
 80029ea:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80029ec:	2300      	movs	r3, #0
 80029ee:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80029f0:	2300      	movs	r3, #0
 80029f2:	73bb      	strb	r3, [r7, #14]

    /* Enable no motion x, no motion y, no motion z
     * in Int Enable 2 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 80029f4:	f107 010d 	add.w	r1, r7, #13
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	2201      	movs	r2, #1
 80029fc:	2052      	movs	r0, #82	@ 0x52
 80029fe:	f7fe f8bd 	bl	8000b7c <bmi160_get_regs>
 8002a02:	4603      	mov	r3, r0
 8002a04:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d138      	bne.n	8002a80 <enable_no_motion_int+0x9e>
    {
        if (no_mot_int_cfg->no_motion_x == 1)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d008      	beq.n	8002a2e <enable_no_motion_int+0x4c>
        {
            temp = data & ~BMI160_NO_MOTION_X_INT_EN_MASK;
 8002a1c:	7b7b      	ldrb	r3, [r7, #13]
 8002a1e:	f023 0301 	bic.w	r3, r3, #1
 8002a22:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | (1 & BMI160_NO_MOTION_X_INT_EN_MASK);
 8002a24:	7bbb      	ldrb	r3, [r7, #14]
 8002a26:	f043 0301 	orr.w	r3, r3, #1
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	737b      	strb	r3, [r7, #13]
        }

        if (no_mot_int_cfg->no_motion_y == 1)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d008      	beq.n	8002a4e <enable_no_motion_int+0x6c>
        {
            temp = data & ~BMI160_NO_MOTION_Y_INT_EN_MASK;
 8002a3c:	7b7b      	ldrb	r3, [r7, #13]
 8002a3e:	f023 0302 	bic.w	r3, r3, #2
 8002a42:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | ((1 << 1) & BMI160_NO_MOTION_Y_INT_EN_MASK);
 8002a44:	7bbb      	ldrb	r3, [r7, #14]
 8002a46:	f043 0302 	orr.w	r3, r3, #2
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	737b      	strb	r3, [r7, #13]
        }

        if (no_mot_int_cfg->no_motion_z == 1)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	f003 0304 	and.w	r3, r3, #4
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d008      	beq.n	8002a6e <enable_no_motion_int+0x8c>
        {
            temp = data & ~BMI160_NO_MOTION_Z_INT_EN_MASK;
 8002a5c:	7b7b      	ldrb	r3, [r7, #13]
 8002a5e:	f023 0304 	bic.w	r3, r3, #4
 8002a62:	73bb      	strb	r3, [r7, #14]

            /* Adding No_motion x axis */
            data = temp | ((1 << 2) & BMI160_NO_MOTION_Z_INT_EN_MASK);
 8002a64:	7bbb      	ldrb	r3, [r7, #14]
 8002a66:	f043 0304 	orr.w	r3, r3, #4
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	737b      	strb	r3, [r7, #13]
        }

        /* write data to Int Enable 2 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 8002a6e:	f107 010d 	add.w	r1, r7, #13
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	2201      	movs	r2, #1
 8002a76:	2052      	movs	r0, #82	@ 0x52
 8002a78:	f7fe f8b3 	bl	8000be2 <bmi160_set_regs>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002a80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <config_no_motion_int_settg>:
 * no motion/slow motion interrupt.
 */
static int8_t config_no_motion_int_settg(const struct bmi160_int_settg *int_config,
                                         const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                         const struct bmi160_dev *dev)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	68f8      	ldr	r0, [r7, #12]
 8002a9c:	f7fe fe25 	bl	80016ea <set_intr_pin_config>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8002aa4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d119      	bne.n	8002ae0 <config_no_motion_int_settg+0x54>
    {
        rslt = map_feature_interrupt(int_config, dev);
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	68f8      	ldr	r0, [r7, #12]
 8002ab0:	f7ff fd98 	bl	80025e4 <map_feature_interrupt>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8002ab8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10f      	bne.n	8002ae0 <config_no_motion_int_settg+0x54>
        {
            rslt = config_no_motion_data_src(no_mot_int_cfg, dev);
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	68b8      	ldr	r0, [r7, #8]
 8002ac4:	f000 f812 	bl	8002aec <config_no_motion_data_src>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 8002acc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d105      	bne.n	8002ae0 <config_no_motion_int_settg+0x54>
            {
                rslt = config_no_motion_dur_thr(no_mot_int_cfg, dev);
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	68b8      	ldr	r0, [r7, #8]
 8002ad8:	f000 f83e 	bl	8002b58 <config_no_motion_dur_thr>
 8002adc:	4603      	mov	r3, r0
 8002ade:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8002ae0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3718      	adds	r7, #24
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <config_no_motion_data_src>:
/*!
 * @brief This API configure the source of interrupt for no motion.
 */
static int8_t config_no_motion_data_src(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                        const struct bmi160_dev *dev)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002af6:	2300      	movs	r3, #0
 8002af8:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002afa:	2300      	movs	r3, #0
 8002afc:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8002afe:	f107 010d 	add.w	r1, r7, #13
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2201      	movs	r2, #1
 8002b06:	2059      	movs	r0, #89	@ 0x59
 8002b08:	f7fe f838 	bl	8000b7c <bmi160_get_regs>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002b10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d119      	bne.n	8002b4c <config_no_motion_data_src+0x60>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 8002b18:	7b7b      	ldrb	r3, [r7, #13]
 8002b1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b1e:	73bb      	strb	r3, [r7, #14]
        data = temp | ((no_mot_int_cfg->no_motion_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	785b      	ldrb	r3, [r3, #1]
 8002b24:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	01db      	lsls	r3, r3, #7
 8002b2c:	b25a      	sxtb	r2, r3
 8002b2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	b25b      	sxtb	r3, r3
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8002b3a:	f107 010d 	add.w	r1, r7, #13
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	2201      	movs	r2, #1
 8002b42:	2059      	movs	r0, #89	@ 0x59
 8002b44:	f7fe f84d 	bl	8000be2 <bmi160_set_regs>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002b4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <config_no_motion_dur_thr>:
 * @brief This API configure the duration and threshold of
 * no motion/slow motion interrupt along with selection of no/slow motion.
 */
static int8_t config_no_motion_dur_thr(const struct bmi160_acc_no_motion_int_cfg *no_mot_int_cfg,
                                       const struct bmi160_dev *dev)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002b62:	2300      	movs	r3, #0
 8002b64:	72fb      	strb	r3, [r7, #11]
    uint8_t temp = 0;
 8002b66:	2300      	movs	r3, #0
 8002b68:	73bb      	strb	r3, [r7, #14]
    uint8_t temp_1 = 0;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	737b      	strb	r3, [r7, #13]
    uint8_t reg_addr;
    uint8_t data_array[2] = { 0 };
 8002b6e:	2300      	movs	r3, #0
 8002b70:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_MOTION register */
    reg_addr = BMI160_INT_MOTION_0_ADDR;
 8002b72:	235f      	movs	r3, #95	@ 0x5f
 8002b74:	733b      	strb	r3, [r7, #12]
    rslt = bmi160_get_regs(reg_addr, &data, 1, dev);
 8002b76:	f107 010b 	add.w	r1, r7, #11
 8002b7a:	7b38      	ldrb	r0, [r7, #12]
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f7fd fffc 	bl	8000b7c <bmi160_get_regs>
 8002b84:	4603      	mov	r3, r0
 8002b86:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002b88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d14b      	bne.n	8002c28 <config_no_motion_dur_thr+0xd0>
    {
        temp = data & ~BMI160_NO_MOTION_INT_DUR_MASK;
 8002b90:	7afb      	ldrb	r3, [r7, #11]
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	73bb      	strb	r3, [r7, #14]

        /* Adding no_motion duration */
        data = temp | ((no_mot_int_cfg->no_motion_dur << 2) & BMI160_NO_MOTION_INT_DUR_MASK);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	881b      	ldrh	r3, [r3, #0]
 8002b9c:	f3c3 03c5 	ubfx	r3, r3, #3, #6
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	b25a      	sxtb	r2, r3
 8002ba6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	b25b      	sxtb	r3, r3
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	72fb      	strb	r3, [r7, #11]

        /* Write data to NO_MOTION 0 address */
        rslt = bmi160_set_regs(reg_addr, &data, 1, dev);
 8002bb2:	f107 010b 	add.w	r1, r7, #11
 8002bb6:	7b38      	ldrb	r0, [r7, #12]
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f7fe f811 	bl	8000be2 <bmi160_set_regs>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8002bc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d12d      	bne.n	8002c28 <config_no_motion_dur_thr+0xd0>
        {
            reg_addr = BMI160_INT_MOTION_3_ADDR;
 8002bcc:	2362      	movs	r3, #98	@ 0x62
 8002bce:	733b      	strb	r3, [r7, #12]
            rslt = bmi160_get_regs(reg_addr, &data, 1, dev);
 8002bd0:	f107 010b 	add.w	r1, r7, #11
 8002bd4:	7b38      	ldrb	r0, [r7, #12]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f7fd ffcf 	bl	8000b7c <bmi160_get_regs>
 8002bde:	4603      	mov	r3, r0
 8002be0:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8002be2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d11e      	bne.n	8002c28 <config_no_motion_dur_thr+0xd0>
            {
                temp = data & ~BMI160_NO_MOTION_SEL_BIT_MASK;
 8002bea:	7afb      	ldrb	r3, [r7, #11]
 8002bec:	f023 0301 	bic.w	r3, r3, #1
 8002bf0:	73bb      	strb	r3, [r7, #14]

                /* Adding no_motion_sel bit */
                temp_1 = (no_mot_int_cfg->no_motion_sel & BMI160_NO_MOTION_SEL_BIT_MASK);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	785b      	ldrb	r3, [r3, #1]
 8002bf6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	737b      	strb	r3, [r7, #13]
                data = (temp | temp_1);
 8002bfe:	7bba      	ldrb	r2, [r7, #14]
 8002c00:	7b7b      	ldrb	r3, [r7, #13]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	72fb      	strb	r3, [r7, #11]
                data_array[1] = data;
 8002c08:	7afb      	ldrb	r3, [r7, #11]
 8002c0a:	727b      	strb	r3, [r7, #9]

                /* Adding no motion threshold */
                data_array[0] = no_mot_int_cfg->no_motion_thres;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	789b      	ldrb	r3, [r3, #2]
 8002c10:	723b      	strb	r3, [r7, #8]
                reg_addr = BMI160_INT_MOTION_2_ADDR;
 8002c12:	2361      	movs	r3, #97	@ 0x61
 8002c14:	733b      	strb	r3, [r7, #12]

                /* writing data to INT_MOTION 2 and INT_MOTION 3
                 * address simultaneously */
                rslt = bmi160_set_regs(reg_addr, data_array, 2, dev);
 8002c16:	f107 0108 	add.w	r1, r7, #8
 8002c1a:	7b38      	ldrb	r0, [r7, #12]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	2202      	movs	r2, #2
 8002c20:	f7fd ffdf 	bl	8000be2 <bmi160_set_regs>
 8002c24:	4603      	mov	r3, r0
 8002c26:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8002c28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <enable_sig_motion_int>:

/*!
 * @brief This API enables the sig-motion motion interrupt.
 */
static int8_t enable_sig_motion_int(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg, struct bmi160_dev *dev)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002c42:	2300      	movs	r3, #0
 8002c44:	73bb      	strb	r3, [r7, #14]

    /* For significant motion,enable any motion x,any motion y,
     * any motion z in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8002c46:	f107 010d 	add.w	r1, r7, #13
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	2050      	movs	r0, #80	@ 0x50
 8002c50:	f7fd ff94 	bl	8000b7c <bmi160_get_regs>
 8002c54:	4603      	mov	r3, r0
 8002c56:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002c58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d124      	bne.n	8002caa <enable_sig_motion_int+0x76>
    {
        if (sig_mot_int_cfg->sig_en == BMI160_ENABLE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	f003 0320 	and.w	r3, r3, #32
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00c      	beq.n	8002c88 <enable_sig_motion_int+0x54>
        {
            temp = data & ~BMI160_SIG_MOTION_INT_EN_MASK;
 8002c6e:	7b7b      	ldrb	r3, [r7, #13]
 8002c70:	f023 0307 	bic.w	r3, r3, #7
 8002c74:	73bb      	strb	r3, [r7, #14]
            data = temp | (7 & BMI160_SIG_MOTION_INT_EN_MASK);
 8002c76:	7bbb      	ldrb	r3, [r7, #14]
 8002c78:	f043 0307 	orr.w	r3, r3, #7
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	737b      	strb	r3, [r7, #13]

            /* sig-motion feature selected*/
            dev->any_sig_sel = BMI160_SIG_MOTION_ENABLED;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	2201      	movs	r2, #1
 8002c84:	70da      	strb	r2, [r3, #3]
 8002c86:	e007      	b.n	8002c98 <enable_sig_motion_int+0x64>
        }
        else
        {
            data = data & ~BMI160_SIG_MOTION_INT_EN_MASK;
 8002c88:	7b7b      	ldrb	r3, [r7, #13]
 8002c8a:	f023 0307 	bic.w	r3, r3, #7
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	737b      	strb	r3, [r7, #13]

            /* neither any-motion feature nor sig-motion selected */
            dev->any_sig_sel = BMI160_BOTH_ANY_SIG_MOTION_DISABLED;
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	22ff      	movs	r2, #255	@ 0xff
 8002c96:	70da      	strb	r2, [r3, #3]
        }

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8002c98:	f107 010d 	add.w	r1, r7, #13
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	2050      	movs	r0, #80	@ 0x50
 8002ca2:	f7fd ff9e 	bl	8000be2 <bmi160_set_regs>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3710      	adds	r7, #16
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <config_sig_motion_int_settg>:
 * significant motion interrupt.
 */
static int8_t config_sig_motion_int_settg(const struct bmi160_int_settg *int_config,
                                          const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                          const struct bmi160_dev *dev)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b086      	sub	sp, #24
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	60f8      	str	r0, [r7, #12]
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f7fe fd10 	bl	80016ea <set_intr_pin_config>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8002cce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d119      	bne.n	8002d0a <config_sig_motion_int_settg+0x54>
    {
        rslt = map_feature_interrupt(int_config, dev);
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f7ff fc83 	bl	80025e4 <map_feature_interrupt>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 8002ce2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10f      	bne.n	8002d0a <config_sig_motion_int_settg+0x54>
        {
            rslt = config_sig_motion_data_src(sig_mot_int_cfg, dev);
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	68b8      	ldr	r0, [r7, #8]
 8002cee:	f000 f812 	bl	8002d16 <config_sig_motion_data_src>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 8002cf6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d105      	bne.n	8002d0a <config_sig_motion_int_settg+0x54>
            {
                rslt = config_sig_dur_threshold(sig_mot_int_cfg, dev);
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	68b8      	ldr	r0, [r7, #8]
 8002d02:	f000 f83e 	bl	8002d82 <config_sig_dur_threshold>
 8002d06:	4603      	mov	r3, r0
 8002d08:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 8002d0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3718      	adds	r7, #24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <config_sig_motion_data_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for sig motion interrupt.
 */
static int8_t config_sig_motion_data_src(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                         const struct bmi160_dev *dev)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b084      	sub	sp, #16
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
 8002d1e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 1 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8002d28:	f107 010d 	add.w	r1, r7, #13
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	2059      	movs	r0, #89	@ 0x59
 8002d32:	f7fd ff23 	bl	8000b7c <bmi160_get_regs>
 8002d36:	4603      	mov	r3, r0
 8002d38:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d119      	bne.n	8002d76 <config_sig_motion_data_src+0x60>
    {
        temp = data & ~BMI160_MOTION_SRC_INT_MASK;
 8002d42:	7b7b      	ldrb	r3, [r7, #13]
 8002d44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d48:	73bb      	strb	r3, [r7, #14]
        data = temp | ((sig_mot_int_cfg->sig_data_src << 7) & BMI160_MOTION_SRC_INT_MASK);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	01db      	lsls	r3, r3, #7
 8002d56:	b25a      	sxtb	r2, r3
 8002d58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	b25b      	sxtb	r3, r3
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	737b      	strb	r3, [r7, #13]

        /* Write data to DATA 1 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_1_ADDR, &data, 1, dev);
 8002d64:	f107 010d 	add.w	r1, r7, #13
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	2059      	movs	r0, #89	@ 0x59
 8002d6e:	f7fd ff38 	bl	8000be2 <bmi160_set_regs>
 8002d72:	4603      	mov	r3, r0
 8002d74:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <config_sig_dur_threshold>:
 * @brief This API configure the threshold, skip and proof time of
 * sig motion interrupt.
 */
static int8_t config_sig_dur_threshold(const struct bmi160_acc_sig_mot_int_cfg *sig_mot_int_cfg,
                                       const struct bmi160_dev *dev)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b084      	sub	sp, #16
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
 8002d8a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;
    uint8_t temp = 0;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	73bb      	strb	r3, [r7, #14]

    /* Configuring INT_MOTION registers */

    /* Write significant motion threshold.
     * This threshold is same as any motion threshold */
    data = sig_mot_int_cfg->sig_mot_thres;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	785b      	ldrb	r3, [r3, #1]
 8002d94:	737b      	strb	r3, [r7, #13]

    /* Write data to INT_MOTION 1 address */
    rslt = bmi160_set_regs(BMI160_INT_MOTION_1_ADDR, &data, 1, dev);
 8002d96:	f107 010d 	add.w	r1, r7, #13
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	2060      	movs	r0, #96	@ 0x60
 8002da0:	f7fd ff1f 	bl	8000be2 <bmi160_set_regs>
 8002da4:	4603      	mov	r3, r0
 8002da6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002da8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d151      	bne.n	8002e54 <config_sig_dur_threshold+0xd2>
    {
        rslt = bmi160_get_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 8002db0:	f107 010d 	add.w	r1, r7, #13
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	2201      	movs	r2, #1
 8002db8:	2062      	movs	r0, #98	@ 0x62
 8002dba:	f7fd fedf 	bl	8000b7c <bmi160_get_regs>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8002dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d144      	bne.n	8002e54 <config_sig_dur_threshold+0xd2>
        {
            temp = data & ~BMI160_SIG_MOTION_SKIP_MASK;
 8002dca:	7b7b      	ldrb	r3, [r7, #13]
 8002dcc:	f023 030c 	bic.w	r3, r3, #12
 8002dd0:	73bb      	strb	r3, [r7, #14]

            /* adding skip time of sig_motion interrupt*/
            data = temp | ((sig_mot_int_cfg->sig_mot_skip << 2) & BMI160_SIG_MOTION_SKIP_MASK);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	b25b      	sxtb	r3, r3
 8002de0:	f003 030c 	and.w	r3, r3, #12
 8002de4:	b25a      	sxtb	r2, r3
 8002de6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	b25b      	sxtb	r3, r3
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	737b      	strb	r3, [r7, #13]
            temp = data & ~BMI160_SIG_MOTION_PROOF_MASK;
 8002df2:	7b7b      	ldrb	r3, [r7, #13]
 8002df4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002df8:	73bb      	strb	r3, [r7, #14]

            /* adding proof time of sig_motion interrupt */
            data = temp | ((sig_mot_int_cfg->sig_mot_proof << 4) & BMI160_SIG_MOTION_PROOF_MASK);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	011b      	lsls	r3, r3, #4
 8002e06:	b25b      	sxtb	r3, r3
 8002e08:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002e0c:	b25a      	sxtb	r2, r3
 8002e0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	b25b      	sxtb	r3, r3
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	737b      	strb	r3, [r7, #13]

            /* configure the int_sig_mot_sel bit to select
             * significant motion interrupt */
            temp = data & ~BMI160_SIG_MOTION_SEL_MASK;
 8002e1a:	7b7b      	ldrb	r3, [r7, #13]
 8002e1c:	f023 0302 	bic.w	r3, r3, #2
 8002e20:	73bb      	strb	r3, [r7, #14]
            data = temp | ((sig_mot_int_cfg->sig_en << 1) & BMI160_SIG_MOTION_SEL_MASK);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	b25b      	sxtb	r3, r3
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	b25a      	sxtb	r2, r3
 8002e36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	b25b      	sxtb	r3, r3
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	737b      	strb	r3, [r7, #13]
            rslt = bmi160_set_regs(BMI160_INT_MOTION_3_ADDR, &data, 1, dev);
 8002e42:	f107 010d 	add.w	r1, r7, #13
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	2062      	movs	r0, #98	@ 0x62
 8002e4c:	f7fd fec9 	bl	8000be2 <bmi160_set_regs>
 8002e50:	4603      	mov	r3, r0
 8002e52:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8002e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <enable_step_detect_int>:
/*!
 * @brief This API enables the step detector interrupt.
 */
static int8_t enable_step_detect_int(const struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg,
                                     const struct bmi160_dev *dev)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 2 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 8002e72:	f107 010d 	add.w	r1, r7, #13
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2201      	movs	r2, #1
 8002e7a:	2052      	movs	r0, #82	@ 0x52
 8002e7c:	f7fd fe7e 	bl	8000b7c <bmi160_get_regs>
 8002e80:	4603      	mov	r3, r0
 8002e82:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8002e84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d11c      	bne.n	8002ec6 <enable_step_detect_int+0x66>
    {
        temp = data & ~BMI160_STEP_DETECT_INT_EN_MASK;
 8002e8c:	7b7b      	ldrb	r3, [r7, #13]
 8002e8e:	f023 0308 	bic.w	r3, r3, #8
 8002e92:	73bb      	strb	r3, [r7, #14]
        data = temp | ((step_detect_int_cfg->step_detector_en << 3) & BMI160_STEP_DETECT_INT_EN_MASK);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	b25b      	sxtb	r3, r3
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	b25a      	sxtb	r2, r3
 8002ea8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	b25b      	sxtb	r3, r3
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	737b      	strb	r3, [r7, #13]

        /* Writing data to INT ENABLE 2 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_2_ADDR, &data, 1, dev);
 8002eb4:	f107 010d 	add.w	r1, r7, #13
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	2052      	movs	r0, #82	@ 0x52
 8002ebe:	f7fd fe90 	bl	8000be2 <bmi160_set_regs>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3710      	adds	r7, #16
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <config_step_detect>:
/*!
 * @brief This API configure the step detector parameter.
 */
static int8_t config_step_detect(const struct bmi160_acc_step_detect_int_cfg *step_detect_int_cfg,
                                 const struct bmi160_dev *dev)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b084      	sub	sp, #16
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
 8002eda:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8002edc:	2300      	movs	r3, #0
 8002ede:	73fb      	strb	r3, [r7, #15]
    uint8_t data_array[2] = { 0 };
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	81bb      	strh	r3, [r7, #12]

    if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_NORMAL)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d104      	bne.n	8002efc <config_step_detect+0x2a>
    {
        /* Normal mode setting */
        data_array[0] = 0x15;
 8002ef2:	2315      	movs	r3, #21
 8002ef4:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x03;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	737b      	strb	r3, [r7, #13]
 8002efa:	e05b      	b.n	8002fb4 <config_step_detect+0xe2>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_SENSITIVE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b40      	cmp	r3, #64	@ 0x40
 8002f08:	d104      	bne.n	8002f14 <config_step_detect+0x42>
    {
        /* Sensitive mode setting */
        data_array[0] = 0x2D;
 8002f0a:	232d      	movs	r3, #45	@ 0x2d
 8002f0c:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x00;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	737b      	strb	r3, [r7, #13]
 8002f12:	e04f      	b.n	8002fb4 <config_step_detect+0xe2>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_ROBUST)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b80      	cmp	r3, #128	@ 0x80
 8002f20:	d104      	bne.n	8002f2c <config_step_detect+0x5a>
    {
        /* Robust mode setting */
        data_array[0] = 0x1D;
 8002f22:	231d      	movs	r3, #29
 8002f24:	733b      	strb	r3, [r7, #12]
        data_array[1] = 0x07;
 8002f26:	2307      	movs	r3, #7
 8002f28:	737b      	strb	r3, [r7, #13]
 8002f2a:	e043      	b.n	8002fb4 <config_step_detect+0xe2>
    }
    else if (step_detect_int_cfg->step_detector_mode == BMI160_STEP_DETECT_USER_DEFINE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f38:	d13c      	bne.n	8002fb4 <config_step_detect+0xe2>
    {
        /* Non recommended User defined setting */
        /* Configuring STEP_CONFIG register */
        rslt = bmi160_get_regs(BMI160_INT_STEP_CONFIG_0_ADDR, &data_array[0], 2, dev);
 8002f3a:	f107 010c 	add.w	r1, r7, #12
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	2202      	movs	r2, #2
 8002f42:	207a      	movs	r0, #122	@ 0x7a
 8002f44:	f7fd fe1a 	bl	8000b7c <bmi160_get_regs>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	73bb      	strb	r3, [r7, #14]
        if (rslt == BMI160_OK)
 8002f4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d12f      	bne.n	8002fb4 <config_step_detect+0xe2>
        {
            temp = data_array[0] & ~BMI160_STEP_DETECT_MIN_THRES_MASK;
 8002f54:	7b3b      	ldrb	r3, [r7, #12]
 8002f56:	f023 0318 	bic.w	r3, r3, #24
 8002f5a:	73fb      	strb	r3, [r7, #15]

            /* Adding min_threshold */
            data_array[0] = temp | ((step_detect_int_cfg->min_threshold << 3) & BMI160_STEP_DETECT_MIN_THRES_MASK);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	b25b      	sxtb	r3, r3
 8002f6a:	f003 0318 	and.w	r3, r3, #24
 8002f6e:	b25a      	sxtb	r2, r3
 8002f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	b25b      	sxtb	r3, r3
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	733b      	strb	r3, [r7, #12]
            temp = data_array[0] & ~BMI160_STEP_DETECT_STEPTIME_MIN_MASK;
 8002f7c:	7b3b      	ldrb	r3, [r7, #12]
 8002f7e:	f023 0307 	bic.w	r3, r3, #7
 8002f82:	73fb      	strb	r3, [r7, #15]

            /* Adding steptime_min */
            data_array[0] = temp | ((step_detect_int_cfg->steptime_min) & BMI160_STEP_DETECT_STEPTIME_MIN_MASK);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	f3c3 03c2 	ubfx	r3, r3, #3, #3
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	461a      	mov	r2, r3
 8002f90:	7bfb      	ldrb	r3, [r7, #15]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	733b      	strb	r3, [r7, #12]
            temp = data_array[1] & ~BMI160_STEP_MIN_BUF_MASK;
 8002f98:	7b7b      	ldrb	r3, [r7, #13]
 8002f9a:	f023 0307 	bic.w	r3, r3, #7
 8002f9e:	73fb      	strb	r3, [r7, #15]

            /* Adding steptime_min */
            data_array[1] = temp | ((step_detect_int_cfg->step_min_buf) & BMI160_STEP_MIN_BUF_MASK);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	785b      	ldrb	r3, [r3, #1]
 8002fa4:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	461a      	mov	r2, r3
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	737b      	strb	r3, [r7, #13]
        }
    }

    /* Write data to STEP_CONFIG register */
    rslt = bmi160_set_regs(BMI160_INT_STEP_CONFIG_0_ADDR, data_array, 2, dev);
 8002fb4:	f107 010c 	add.w	r1, r7, #12
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	207a      	movs	r0, #122	@ 0x7a
 8002fbe:	f7fd fe10 	bl	8000be2 <bmi160_set_regs>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	73bb      	strb	r3, [r7, #14]

    return rslt;
 8002fc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <enable_tap_int>:
 * @brief This API enables the single/double tap interrupt.
 */
static int8_t enable_tap_int(const struct bmi160_int_settg *int_config,
                             const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                             const struct bmi160_dev *dev)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b086      	sub	sp, #24
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	60f8      	str	r0, [r7, #12]
 8002fda:	60b9      	str	r1, [r7, #8]
 8002fdc:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t data = 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	757b      	strb	r3, [r7, #21]
    uint8_t temp = 0;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	75bb      	strb	r3, [r7, #22]

    /* Enable single tap or double tap interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8002fe6:	f107 0115 	add.w	r1, r7, #21
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	2050      	movs	r0, #80	@ 0x50
 8002ff0:	f7fd fdc4 	bl	8000b7c <bmi160_get_regs>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8002ff8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d135      	bne.n	800306c <enable_tap_int+0x9a>
    {
        if (int_config->int_type == BMI160_ACC_SINGLE_TAP_INT)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	785b      	ldrb	r3, [r3, #1]
 8003004:	2b04      	cmp	r3, #4
 8003006:	d114      	bne.n	8003032 <enable_tap_int+0x60>
        {
            temp = data & ~BMI160_SINGLE_TAP_INT_EN_MASK;
 8003008:	7d7b      	ldrb	r3, [r7, #21]
 800300a:	f023 0320 	bic.w	r3, r3, #32
 800300e:	75bb      	strb	r3, [r7, #22]
            data = temp | ((tap_int_cfg->tap_en << 5) & BMI160_SINGLE_TAP_INT_EN_MASK);
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	785b      	ldrb	r3, [r3, #1]
 8003014:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003018:	b2db      	uxtb	r3, r3
 800301a:	015b      	lsls	r3, r3, #5
 800301c:	b25b      	sxtb	r3, r3
 800301e:	f003 0320 	and.w	r3, r3, #32
 8003022:	b25a      	sxtb	r2, r3
 8003024:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003028:	4313      	orrs	r3, r2
 800302a:	b25b      	sxtb	r3, r3
 800302c:	b2db      	uxtb	r3, r3
 800302e:	757b      	strb	r3, [r7, #21]
 8003030:	e013      	b.n	800305a <enable_tap_int+0x88>
        }
        else
        {
            temp = data & ~BMI160_DOUBLE_TAP_INT_EN_MASK;
 8003032:	7d7b      	ldrb	r3, [r7, #21]
 8003034:	f023 0310 	bic.w	r3, r3, #16
 8003038:	75bb      	strb	r3, [r7, #22]
            data = temp | ((tap_int_cfg->tap_en << 4) & BMI160_DOUBLE_TAP_INT_EN_MASK);
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	785b      	ldrb	r3, [r3, #1]
 800303e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003042:	b2db      	uxtb	r3, r3
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	b25b      	sxtb	r3, r3
 8003048:	f003 0310 	and.w	r3, r3, #16
 800304c:	b25a      	sxtb	r2, r3
 800304e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003052:	4313      	orrs	r3, r2
 8003054:	b25b      	sxtb	r3, r3
 8003056:	b2db      	uxtb	r3, r3
 8003058:	757b      	strb	r3, [r7, #21]
        }

        /* Write to Enable 0 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 800305a:	f107 0115 	add.w	r1, r7, #21
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2201      	movs	r2, #1
 8003062:	2050      	movs	r0, #80	@ 0x50
 8003064:	f7fd fdbd 	bl	8000be2 <bmi160_set_regs>
 8003068:	4603      	mov	r3, r0
 800306a:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800306c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003070:	4618      	mov	r0, r3
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <config_tap_int_settg>:
 * tap interrupt.
 */
static int8_t config_tap_int_settg(const struct bmi160_int_settg *int_config,
                                   const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                                   const struct bmi160_dev *dev)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
    int8_t rslt;

    /* Configure Interrupt pins */
    rslt = set_intr_pin_config(int_config, dev);
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f7fe fb2f 	bl	80016ea <set_intr_pin_config>
 800308c:	4603      	mov	r3, r0
 800308e:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8003090:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d11a      	bne.n	80030ce <config_tap_int_settg+0x56>
    {
        rslt = map_feature_interrupt(int_config, dev);
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f7ff faa2 	bl	80025e4 <map_feature_interrupt>
 80030a0:	4603      	mov	r3, r0
 80030a2:	75fb      	strb	r3, [r7, #23]
        if (rslt == BMI160_OK)
 80030a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d110      	bne.n	80030ce <config_tap_int_settg+0x56>
        {
            rslt = config_tap_data_src(tap_int_cfg, dev);
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	68b8      	ldr	r0, [r7, #8]
 80030b0:	f000 f813 	bl	80030da <config_tap_data_src>
 80030b4:	4603      	mov	r3, r0
 80030b6:	75fb      	strb	r3, [r7, #23]
            if (rslt == BMI160_OK)
 80030b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d106      	bne.n	80030ce <config_tap_int_settg+0x56>
            {
                rslt = config_tap_param(int_config, tap_int_cfg, dev);
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	68b9      	ldr	r1, [r7, #8]
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 f841 	bl	800314c <config_tap_param>
 80030ca:	4603      	mov	r3, r0
 80030cc:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    return rslt;
 80030ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <config_tap_data_src>:
/*!
 * @brief This API configure the source of data(filter & pre-filter)
 * for tap interrupt.
 */
static int8_t config_tap_data_src(const struct bmi160_acc_tap_int_cfg *tap_int_cfg, const struct bmi160_dev *dev)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b084      	sub	sp, #16
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
 80030e2:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80030e4:	2300      	movs	r3, #0
 80030e6:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80030e8:	2300      	movs	r3, #0
 80030ea:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 80030ec:	f107 010d 	add.w	r1, r7, #13
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	2201      	movs	r2, #1
 80030f4:	2058      	movs	r0, #88	@ 0x58
 80030f6:	f7fd fd41 	bl	8000b7c <bmi160_get_regs>
 80030fa:	4603      	mov	r3, r0
 80030fc:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80030fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d11c      	bne.n	8003140 <config_tap_data_src+0x66>
    {
        temp = data & ~BMI160_TAP_SRC_INT_MASK;
 8003106:	7b7b      	ldrb	r3, [r7, #13]
 8003108:	f023 0308 	bic.w	r3, r3, #8
 800310c:	73bb      	strb	r3, [r7, #14]
        data = temp | ((tap_int_cfg->tap_data_src << 3) & BMI160_TAP_SRC_INT_MASK);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	785b      	ldrb	r3, [r3, #1]
 8003112:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003116:	b2db      	uxtb	r3, r3
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	b25b      	sxtb	r3, r3
 800311c:	f003 0308 	and.w	r3, r3, #8
 8003120:	b25a      	sxtb	r2, r3
 8003122:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003126:	4313      	orrs	r3, r2
 8003128:	b25b      	sxtb	r3, r3
 800312a:	b2db      	uxtb	r3, r3
 800312c:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 800312e:	f107 010d 	add.w	r1, r7, #13
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2201      	movs	r2, #1
 8003136:	2058      	movs	r0, #88	@ 0x58
 8003138:	f7fd fd53 	bl	8000be2 <bmi160_set_regs>
 800313c:	4603      	mov	r3, r0
 800313e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003140:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3710      	adds	r7, #16
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <config_tap_param>:
 * Threshold, quite, shock, and duration.
 */
static int8_t config_tap_param(const struct bmi160_int_settg *int_config,
                               const struct bmi160_acc_tap_int_cfg *tap_int_cfg,
                               const struct bmi160_dev *dev)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b088      	sub	sp, #32
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
    int8_t rslt;
    uint8_t temp = 0;
 8003158:	2300      	movs	r3, #0
 800315a:	777b      	strb	r3, [r7, #29]
    uint8_t data = 0;
 800315c:	2300      	movs	r3, #0
 800315e:	77bb      	strb	r3, [r7, #30]
    uint8_t data_array[2] = { 0 };
 8003160:	2300      	movs	r3, #0
 8003162:	82bb      	strh	r3, [r7, #20]
    uint8_t count = 0;
 8003164:	2300      	movs	r3, #0
 8003166:	773b      	strb	r3, [r7, #28]
    uint8_t dur, shock, quiet, thres;

    /* Configure tap 0 register for tap shock,tap quiet duration
     * in case of single tap interrupt */
    rslt = bmi160_get_regs(BMI160_INT_TAP_0_ADDR, data_array, 2, dev);
 8003168:	f107 0114 	add.w	r1, r7, #20
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2202      	movs	r2, #2
 8003170:	2063      	movs	r0, #99	@ 0x63
 8003172:	f7fd fd03 	bl	8000b7c <bmi160_get_regs>
 8003176:	4603      	mov	r3, r0
 8003178:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMI160_OK)
 800317a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d178      	bne.n	8003274 <config_tap_param+0x128>
    {
        data = data_array[count];
 8003182:	7f3b      	ldrb	r3, [r7, #28]
 8003184:	3320      	adds	r3, #32
 8003186:	443b      	add	r3, r7
 8003188:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800318c:	77bb      	strb	r3, [r7, #30]
        if (int_config->int_type == BMI160_ACC_DOUBLE_TAP_INT)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	785b      	ldrb	r3, [r3, #1]
 8003192:	2b03      	cmp	r3, #3
 8003194:	d113      	bne.n	80031be <config_tap_param+0x72>
        {
            dur = (uint8_t)tap_int_cfg->tap_dur;
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	f3c3 13c2 	ubfx	r3, r3, #7, #3
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	76fb      	strb	r3, [r7, #27]
            temp = (data & ~BMI160_TAP_DUR_MASK);
 80031a2:	7fbb      	ldrb	r3, [r7, #30]
 80031a4:	f023 0307 	bic.w	r3, r3, #7
 80031a8:	777b      	strb	r3, [r7, #29]

            /* Add tap duration data in case of
             * double tap interrupt */
            data = temp | (dur & BMI160_TAP_DUR_MASK);
 80031aa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	b25a      	sxtb	r2, r3
 80031b4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	b25b      	sxtb	r3, r3
 80031bc:	77bb      	strb	r3, [r7, #30]
        }

        shock = (uint8_t)tap_int_cfg->tap_shock;
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	76bb      	strb	r3, [r7, #26]
        temp = data & ~BMI160_TAP_SHOCK_DUR_MASK;
 80031ca:	7fbb      	ldrb	r3, [r7, #30]
 80031cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031d0:	777b      	strb	r3, [r7, #29]
        data = temp | ((shock << 6) & BMI160_TAP_SHOCK_DUR_MASK);
 80031d2:	7ebb      	ldrb	r3, [r7, #26]
 80031d4:	019b      	lsls	r3, r3, #6
 80031d6:	b25b      	sxtb	r3, r3
 80031d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031dc:	b25a      	sxtb	r2, r3
 80031de:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	b25b      	sxtb	r3, r3
 80031e6:	77bb      	strb	r3, [r7, #30]
        quiet = (uint8_t)tap_int_cfg->tap_quiet;
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	767b      	strb	r3, [r7, #25]
        temp = data & ~BMI160_TAP_QUIET_DUR_MASK;
 80031f4:	7fbb      	ldrb	r3, [r7, #30]
 80031f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031fa:	777b      	strb	r3, [r7, #29]
        data = temp | ((quiet << 7) & BMI160_TAP_QUIET_DUR_MASK);
 80031fc:	7e7b      	ldrb	r3, [r7, #25]
 80031fe:	01db      	lsls	r3, r3, #7
 8003200:	b25a      	sxtb	r2, r3
 8003202:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003206:	4313      	orrs	r3, r2
 8003208:	b25b      	sxtb	r3, r3
 800320a:	77bb      	strb	r3, [r7, #30]
        data_array[count++] = data;
 800320c:	7f3b      	ldrb	r3, [r7, #28]
 800320e:	1c5a      	adds	r2, r3, #1
 8003210:	773a      	strb	r2, [r7, #28]
 8003212:	3320      	adds	r3, #32
 8003214:	443b      	add	r3, r7
 8003216:	7fba      	ldrb	r2, [r7, #30]
 8003218:	f803 2c0c 	strb.w	r2, [r3, #-12]
        data = data_array[count];
 800321c:	7f3b      	ldrb	r3, [r7, #28]
 800321e:	3320      	adds	r3, #32
 8003220:	443b      	add	r3, r7
 8003222:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003226:	77bb      	strb	r3, [r7, #30]
        thres = (uint8_t)tap_int_cfg->tap_thr;
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8003230:	b2db      	uxtb	r3, r3
 8003232:	763b      	strb	r3, [r7, #24]
        temp = data & ~BMI160_TAP_THRES_MASK;
 8003234:	7fbb      	ldrb	r3, [r7, #30]
 8003236:	f023 031f 	bic.w	r3, r3, #31
 800323a:	777b      	strb	r3, [r7, #29]
        data = temp | (thres & BMI160_TAP_THRES_MASK);
 800323c:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8003240:	f003 031f 	and.w	r3, r3, #31
 8003244:	b25a      	sxtb	r2, r3
 8003246:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800324a:	4313      	orrs	r3, r2
 800324c:	b25b      	sxtb	r3, r3
 800324e:	77bb      	strb	r3, [r7, #30]
        data_array[count++] = data;
 8003250:	7f3b      	ldrb	r3, [r7, #28]
 8003252:	1c5a      	adds	r2, r3, #1
 8003254:	773a      	strb	r2, [r7, #28]
 8003256:	3320      	adds	r3, #32
 8003258:	443b      	add	r3, r7
 800325a:	7fba      	ldrb	r2, [r7, #30]
 800325c:	f803 2c0c 	strb.w	r2, [r3, #-12]

        /* TAP 0 and TAP 1 address lie consecutively,
         * hence writing data to respective registers at one go */

        /* Writing to Tap 0 and Tap 1 Address simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_TAP_0_ADDR, data_array, count, dev);
 8003260:	7f3b      	ldrb	r3, [r7, #28]
 8003262:	b29a      	uxth	r2, r3
 8003264:	f107 0114 	add.w	r1, r7, #20
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2063      	movs	r0, #99	@ 0x63
 800326c:	f7fd fcb9 	bl	8000be2 <bmi160_set_regs>
 8003270:	4603      	mov	r3, r0
 8003272:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8003274:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3720      	adds	r7, #32
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <enable_orient_int>:

/*!
 * @brief This API enables the orient interrupt.
 */
static int8_t enable_orient_int(const struct bmi160_acc_orient_int_cfg *orient_int_cfg, const struct bmi160_dev *dev)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800328a:	2300      	movs	r3, #0
 800328c:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 800328e:	2300      	movs	r3, #0
 8003290:	73bb      	strb	r3, [r7, #14]

    /* Enable data ready interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8003292:	f107 010d 	add.w	r1, r7, #13
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	2201      	movs	r2, #1
 800329a:	2050      	movs	r0, #80	@ 0x50
 800329c:	f7fd fc6e 	bl	8000b7c <bmi160_get_regs>
 80032a0:	4603      	mov	r3, r0
 80032a2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80032a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d11c      	bne.n	80032e6 <enable_orient_int+0x66>
    {
        temp = data & ~BMI160_ORIENT_INT_EN_MASK;
 80032ac:	7b7b      	ldrb	r3, [r7, #13]
 80032ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032b2:	73bb      	strb	r3, [r7, #14]
        data = temp | ((orient_int_cfg->orient_en << 6) & BMI160_ORIENT_INT_EN_MASK);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	789b      	ldrb	r3, [r3, #2]
 80032b8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	019b      	lsls	r3, r3, #6
 80032c0:	b25b      	sxtb	r3, r3
 80032c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032c6:	b25a      	sxtb	r2, r3
 80032c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	b25b      	sxtb	r3, r3
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 80032d4:	f107 010d 	add.w	r1, r7, #13
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	2201      	movs	r2, #1
 80032dc:	2050      	movs	r0, #80	@ 0x50
 80032de:	f7fd fc80 	bl	8000be2 <bmi160_set_regs>
 80032e2:	4603      	mov	r3, r0
 80032e4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80032e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <config_orient_int_settg>:
/*!
 * @brief This API configure the necessary setting of orientation interrupt.
 */
static int8_t config_orient_int_settg(const struct bmi160_acc_orient_int_cfg *orient_int_cfg,
                                      const struct bmi160_dev *dev)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b084      	sub	sp, #16
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
 80032fa:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80032fc:	2300      	movs	r3, #0
 80032fe:	73bb      	strb	r3, [r7, #14]
    uint8_t temp = 0;
 8003300:	2300      	movs	r3, #0
 8003302:	737b      	strb	r3, [r7, #13]
    uint8_t data_array[2] = { 0, 0 };
 8003304:	2300      	movs	r3, #0
 8003306:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_ORIENT registers */
    rslt = bmi160_get_regs(BMI160_INT_ORIENT_0_ADDR, data_array, 2, dev);
 8003308:	f107 0108 	add.w	r1, r7, #8
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	2202      	movs	r2, #2
 8003310:	2065      	movs	r0, #101	@ 0x65
 8003312:	f7fd fc33 	bl	8000b7c <bmi160_get_regs>
 8003316:	4603      	mov	r3, r0
 8003318:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800331a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d170      	bne.n	8003404 <config_orient_int_settg+0x112>
    {
        data = data_array[0];
 8003322:	7a3b      	ldrb	r3, [r7, #8]
 8003324:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_MODE_MASK;
 8003326:	7bbb      	ldrb	r3, [r7, #14]
 8003328:	f023 0303 	bic.w	r3, r3, #3
 800332c:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation mode */
        data = temp | ((orient_int_cfg->orient_mode) & BMI160_ORIENT_MODE_MASK);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003336:	b2db      	uxtb	r3, r3
 8003338:	461a      	mov	r2, r3
 800333a:	7b7b      	ldrb	r3, [r7, #13]
 800333c:	4313      	orrs	r3, r2
 800333e:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_BLOCK_MASK;
 8003340:	7bbb      	ldrb	r3, [r7, #14]
 8003342:	f023 030c 	bic.w	r3, r3, #12
 8003346:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation blocking */
        data = temp | ((orient_int_cfg->orient_blocking << 2) & BMI160_ORIENT_BLOCK_MASK);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8003350:	b2db      	uxtb	r3, r3
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	b25b      	sxtb	r3, r3
 8003356:	f003 030c 	and.w	r3, r3, #12
 800335a:	b25a      	sxtb	r2, r3
 800335c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003360:	4313      	orrs	r3, r2
 8003362:	b25b      	sxtb	r3, r3
 8003364:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_HYST_MASK;
 8003366:	7bbb      	ldrb	r3, [r7, #14]
 8003368:	f003 030f 	and.w	r3, r3, #15
 800336c:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation hysteresis */
        data = temp | ((orient_int_cfg->orient_hyst << 4) & BMI160_ORIENT_HYST_MASK);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003376:	b2db      	uxtb	r3, r3
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	b25a      	sxtb	r2, r3
 800337c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8003380:	4313      	orrs	r3, r2
 8003382:	b25b      	sxtb	r3, r3
 8003384:	73bb      	strb	r3, [r7, #14]
        data_array[0] = data;
 8003386:	7bbb      	ldrb	r3, [r7, #14]
 8003388:	723b      	strb	r3, [r7, #8]
        data = data_array[1];
 800338a:	7a7b      	ldrb	r3, [r7, #9]
 800338c:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_THETA_MASK;
 800338e:	7bbb      	ldrb	r3, [r7, #14]
 8003390:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003394:	737b      	strb	r3, [r7, #13]

        /* Adding Orientation threshold */
        data = temp | ((orient_int_cfg->orient_theta) & BMI160_ORIENT_THETA_MASK);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	785b      	ldrb	r3, [r3, #1]
 800339a:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	461a      	mov	r2, r3
 80033a2:	7b7b      	ldrb	r3, [r7, #13]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_ORIENT_UD_ENABLE;
 80033a8:	7bbb      	ldrb	r3, [r7, #14]
 80033aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033ae:	737b      	strb	r3, [r7, #13]

        /* Adding Orient_ud_en */
        data = temp | ((orient_int_cfg->orient_ud_en << 6) & BMI160_ORIENT_UD_ENABLE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	785b      	ldrb	r3, [r3, #1]
 80033b4:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	019b      	lsls	r3, r3, #6
 80033bc:	b25b      	sxtb	r3, r3
 80033be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033c2:	b25a      	sxtb	r2, r3
 80033c4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	b25b      	sxtb	r3, r3
 80033cc:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_AXES_EN_MASK;
 80033ce:	7bbb      	ldrb	r3, [r7, #14]
 80033d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033d4:	737b      	strb	r3, [r7, #13]

        /* Adding axes_en */
        data = temp | ((orient_int_cfg->axes_ex << 7) & BMI160_AXES_EN_MASK);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	785b      	ldrb	r3, [r3, #1]
 80033da:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	01db      	lsls	r3, r3, #7
 80033e2:	b25a      	sxtb	r2, r3
 80033e4:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	b25b      	sxtb	r3, r3
 80033ec:	73bb      	strb	r3, [r7, #14]
        data_array[1] = data;
 80033ee:	7bbb      	ldrb	r3, [r7, #14]
 80033f0:	727b      	strb	r3, [r7, #9]

        /* Writing data to INT_ORIENT 0 and INT_ORIENT 1
         * registers simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_ORIENT_0_ADDR, data_array, 2, dev);
 80033f2:	f107 0108 	add.w	r1, r7, #8
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	2202      	movs	r2, #2
 80033fa:	2065      	movs	r0, #101	@ 0x65
 80033fc:	f7fd fbf1 	bl	8000be2 <bmi160_set_regs>
 8003400:	4603      	mov	r3, r0
 8003402:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003404:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}

08003410 <enable_flat_int>:

/*!
 * @brief This API enables the flat interrupt.
 */
static int8_t enable_flat_int(const struct bmi160_acc_flat_detect_int_cfg *flat_int, const struct bmi160_dev *dev)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800341a:	2300      	movs	r3, #0
 800341c:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 800341e:	2300      	movs	r3, #0
 8003420:	73bb      	strb	r3, [r7, #14]

    /* Enable flat interrupt in Int Enable 0 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 8003422:	f107 010d 	add.w	r1, r7, #13
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	2201      	movs	r2, #1
 800342a:	2050      	movs	r0, #80	@ 0x50
 800342c:	f7fd fba6 	bl	8000b7c <bmi160_get_regs>
 8003430:	4603      	mov	r3, r0
 8003432:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003434:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d119      	bne.n	8003470 <enable_flat_int+0x60>
    {
        temp = data & ~BMI160_FLAT_INT_EN_MASK;
 800343c:	7b7b      	ldrb	r3, [r7, #13]
 800343e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003442:	73bb      	strb	r3, [r7, #14]
        data = temp | ((flat_int->flat_en << 7) & BMI160_FLAT_INT_EN_MASK);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	785b      	ldrb	r3, [r3, #1]
 8003448:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800344c:	b2db      	uxtb	r3, r3
 800344e:	01db      	lsls	r3, r3, #7
 8003450:	b25a      	sxtb	r2, r3
 8003452:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003456:	4313      	orrs	r3, r2
 8003458:	b25b      	sxtb	r3, r3
 800345a:	b2db      	uxtb	r3, r3
 800345c:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_0_ADDR, &data, 1, dev);
 800345e:	f107 010d 	add.w	r1, r7, #13
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	2201      	movs	r2, #1
 8003466:	2050      	movs	r0, #80	@ 0x50
 8003468:	f7fd fbbb 	bl	8000be2 <bmi160_set_regs>
 800346c:	4603      	mov	r3, r0
 800346e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003470:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <config_flat_int_settg>:

/*!
 * @brief This API configure the necessary setting of flat interrupt.
 */
static int8_t config_flat_int_settg(const struct bmi160_acc_flat_detect_int_cfg *flat_int, const struct bmi160_dev *dev)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8003486:	2300      	movs	r3, #0
 8003488:	73bb      	strb	r3, [r7, #14]
    uint8_t temp = 0;
 800348a:	2300      	movs	r3, #0
 800348c:	737b      	strb	r3, [r7, #13]
    uint8_t data_array[2] = { 0, 0 };
 800348e:	2300      	movs	r3, #0
 8003490:	813b      	strh	r3, [r7, #8]

    /* Configuring INT_FLAT register */
    rslt = bmi160_get_regs(BMI160_INT_FLAT_0_ADDR, data_array, 2, dev);
 8003492:	f107 0108 	add.w	r1, r7, #8
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	2202      	movs	r2, #2
 800349a:	2067      	movs	r0, #103	@ 0x67
 800349c:	f7fd fb6e 	bl	8000b7c <bmi160_get_regs>
 80034a0:	4603      	mov	r3, r0
 80034a2:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80034a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d13d      	bne.n	8003528 <config_flat_int_settg+0xac>
    {
        data = data_array[0];
 80034ac:	7a3b      	ldrb	r3, [r7, #8]
 80034ae:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_THRES_MASK;
 80034b0:	7bbb      	ldrb	r3, [r7, #14]
 80034b2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80034b6:	737b      	strb	r3, [r7, #13]

        /* Adding flat theta */
        data = temp | ((flat_int->flat_theta) & BMI160_FLAT_THRES_MASK);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	f3c3 0305 	ubfx	r3, r3, #0, #6
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	461a      	mov	r2, r3
 80034c4:	7b7b      	ldrb	r3, [r7, #13]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	73bb      	strb	r3, [r7, #14]
        data_array[0] = data;
 80034ca:	7bbb      	ldrb	r3, [r7, #14]
 80034cc:	723b      	strb	r3, [r7, #8]
        data = data_array[1];
 80034ce:	7a7b      	ldrb	r3, [r7, #9]
 80034d0:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_HOLD_TIME_MASK;
 80034d2:	7bbb      	ldrb	r3, [r7, #14]
 80034d4:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80034d8:	737b      	strb	r3, [r7, #13]

        /* Adding flat hold time */
        data = temp | ((flat_int->flat_hold_time << 4) & BMI160_FLAT_HOLD_TIME_MASK);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	785b      	ldrb	r3, [r3, #1]
 80034de:	f3c3 0341 	ubfx	r3, r3, #1, #2
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	011b      	lsls	r3, r3, #4
 80034e6:	b25b      	sxtb	r3, r3
 80034e8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80034ec:	b25a      	sxtb	r2, r3
 80034ee:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	b25b      	sxtb	r3, r3
 80034f6:	73bb      	strb	r3, [r7, #14]
        temp = data & ~BMI160_FLAT_HYST_MASK;
 80034f8:	7bbb      	ldrb	r3, [r7, #14]
 80034fa:	f023 0307 	bic.w	r3, r3, #7
 80034fe:	737b      	strb	r3, [r7, #13]

        /* Adding flat hysteresis */
        data = temp | ((flat_int->flat_hy) & BMI160_FLAT_HYST_MASK);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	881b      	ldrh	r3, [r3, #0]
 8003504:	f3c3 1382 	ubfx	r3, r3, #6, #3
 8003508:	b2db      	uxtb	r3, r3
 800350a:	461a      	mov	r2, r3
 800350c:	7b7b      	ldrb	r3, [r7, #13]
 800350e:	4313      	orrs	r3, r2
 8003510:	73bb      	strb	r3, [r7, #14]
        data_array[1] = data;
 8003512:	7bbb      	ldrb	r3, [r7, #14]
 8003514:	727b      	strb	r3, [r7, #9]

        /* Writing data to INT_FLAT 0 and INT_FLAT 1
         * registers simultaneously */
        rslt = bmi160_set_regs(BMI160_INT_FLAT_0_ADDR, data_array, 2, dev);
 8003516:	f107 0108 	add.w	r1, r7, #8
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2202      	movs	r2, #2
 800351e:	2067      	movs	r0, #103	@ 0x67
 8003520:	f7fd fb5f 	bl	8000be2 <bmi160_set_regs>
 8003524:	4603      	mov	r3, r0
 8003526:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003528:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <enable_low_g_int>:

/*!
 * @brief This API enables the Low-g interrupt.
 */
static int8_t enable_low_g_int(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 800353e:	2300      	movs	r3, #0
 8003540:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8003542:	2300      	movs	r3, #0
 8003544:	73bb      	strb	r3, [r7, #14]

    /* Enable low-g interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8003546:	f107 010d 	add.w	r1, r7, #13
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2201      	movs	r2, #1
 800354e:	2051      	movs	r0, #81	@ 0x51
 8003550:	f7fd fb14 	bl	8000b7c <bmi160_get_regs>
 8003554:	4603      	mov	r3, r0
 8003556:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003558:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d11c      	bne.n	800359a <enable_low_g_int+0x66>
    {
        temp = data & ~BMI160_LOW_G_INT_EN_MASK;
 8003560:	7b7b      	ldrb	r3, [r7, #13]
 8003562:	f023 0308 	bic.w	r3, r3, #8
 8003566:	73bb      	strb	r3, [r7, #14]
        data = temp | ((low_g_int->low_en << 3) & BMI160_LOW_G_INT_EN_MASK);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	789b      	ldrb	r3, [r3, #2]
 800356c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003570:	b2db      	uxtb	r3, r3
 8003572:	00db      	lsls	r3, r3, #3
 8003574:	b25b      	sxtb	r3, r3
 8003576:	f003 0308 	and.w	r3, r3, #8
 800357a:	b25a      	sxtb	r2, r3
 800357c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003580:	4313      	orrs	r3, r2
 8003582:	b25b      	sxtb	r3, r3
 8003584:	b2db      	uxtb	r3, r3
 8003586:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8003588:	f107 010d 	add.w	r1, r7, #13
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	2201      	movs	r2, #1
 8003590:	2051      	movs	r0, #81	@ 0x51
 8003592:	f7fd fb26 	bl	8000be2 <bmi160_set_regs>
 8003596:	4603      	mov	r3, r0
 8003598:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800359a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <config_low_g_data_src>:
/*!
 * @brief This API configure the source of data(filter & pre-filter)
 * for low-g interrupt.
 */
static int8_t config_low_g_data_src(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b084      	sub	sp, #16
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
 80035ae:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80035b0:	2300      	movs	r3, #0
 80035b2:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80035b4:	2300      	movs	r3, #0
 80035b6:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 80035b8:	f107 010d 	add.w	r1, r7, #13
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	2201      	movs	r2, #1
 80035c0:	2058      	movs	r0, #88	@ 0x58
 80035c2:	f7fd fadb 	bl	8000b7c <bmi160_get_regs>
 80035c6:	4603      	mov	r3, r0
 80035c8:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80035ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d119      	bne.n	8003606 <config_low_g_data_src+0x60>
    {
        temp = data & ~BMI160_LOW_HIGH_SRC_INT_MASK;
 80035d2:	7b7b      	ldrb	r3, [r7, #13]
 80035d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035d8:	73bb      	strb	r3, [r7, #14]
        data = temp | ((low_g_int->low_data_src << 7) & BMI160_LOW_HIGH_SRC_INT_MASK);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	789b      	ldrb	r3, [r3, #2]
 80035de:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	01db      	lsls	r3, r3, #7
 80035e6:	b25a      	sxtb	r2, r3
 80035e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	b25b      	sxtb	r3, r3
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 80035f4:	f107 010d 	add.w	r1, r7, #13
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	2201      	movs	r2, #1
 80035fc:	2058      	movs	r0, #88	@ 0x58
 80035fe:	f7fd faf0 	bl	8000be2 <bmi160_set_regs>
 8003602:	4603      	mov	r3, r0
 8003604:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003606:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800360a:	4618      	mov	r0, r3
 800360c:	3710      	adds	r7, #16
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
	...

08003614 <config_low_g_int_settg>:

/*!
 * @brief This API configure the necessary setting of low-g interrupt.
 */
static int8_t config_low_g_int_settg(const struct bmi160_acc_low_g_int_cfg *low_g_int, const struct bmi160_dev *dev)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 800361e:	2300      	movs	r3, #0
 8003620:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[3] = { 0, 0, 0 };
 8003622:	4a27      	ldr	r2, [pc, #156]	@ (80036c0 <config_low_g_int_settg+0xac>)
 8003624:	f107 0308 	add.w	r3, r7, #8
 8003628:	6812      	ldr	r2, [r2, #0]
 800362a:	4611      	mov	r1, r2
 800362c:	8019      	strh	r1, [r3, #0]
 800362e:	3302      	adds	r3, #2
 8003630:	0c12      	lsrs	r2, r2, #16
 8003632:	701a      	strb	r2, [r3, #0]

    /* Configuring INT_LOWHIGH register for low-g interrupt */
    rslt = bmi160_get_regs(BMI160_INT_LOWHIGH_2_ADDR, &data_array[2], 1, dev);
 8003634:	f107 0308 	add.w	r3, r7, #8
 8003638:	1c99      	adds	r1, r3, #2
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	2201      	movs	r2, #1
 800363e:	205c      	movs	r0, #92	@ 0x5c
 8003640:	f7fd fa9c 	bl	8000b7c <bmi160_get_regs>
 8003644:	4603      	mov	r3, r0
 8003646:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003648:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d130      	bne.n	80036b2 <config_low_g_int_settg+0x9e>
    {
        temp = data_array[2] & ~BMI160_LOW_G_HYST_MASK;
 8003650:	7abb      	ldrb	r3, [r7, #10]
 8003652:	f023 0303 	bic.w	r3, r3, #3
 8003656:	73bb      	strb	r3, [r7, #14]

        /* Adding low-g hysteresis */
        data_array[2] = temp | (low_g_int->low_hyst & BMI160_LOW_G_HYST_MASK);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	789b      	ldrb	r3, [r3, #2]
 800365c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8003660:	b2db      	uxtb	r3, r3
 8003662:	461a      	mov	r2, r3
 8003664:	7bbb      	ldrb	r3, [r7, #14]
 8003666:	4313      	orrs	r3, r2
 8003668:	b2db      	uxtb	r3, r3
 800366a:	72bb      	strb	r3, [r7, #10]
        temp = data_array[2] & ~BMI160_LOW_G_LOW_MODE_MASK;
 800366c:	7abb      	ldrb	r3, [r7, #10]
 800366e:	f023 0304 	bic.w	r3, r3, #4
 8003672:	73bb      	strb	r3, [r7, #14]

        /* Adding low-mode */
        data_array[2] = temp | ((low_g_int->low_mode << 2) & BMI160_LOW_G_LOW_MODE_MASK);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	789b      	ldrb	r3, [r3, #2]
 8003678:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800367c:	b2db      	uxtb	r3, r3
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	b25b      	sxtb	r3, r3
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	b25a      	sxtb	r2, r3
 8003688:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800368c:	4313      	orrs	r3, r2
 800368e:	b25b      	sxtb	r3, r3
 8003690:	b2db      	uxtb	r3, r3
 8003692:	72bb      	strb	r3, [r7, #10]

        /* Adding low-g threshold */
        data_array[1] = low_g_int->low_thres;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	785b      	ldrb	r3, [r3, #1]
 8003698:	727b      	strb	r3, [r7, #9]

        /* Adding low-g interrupt delay */
        data_array[0] = low_g_int->low_dur;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	723b      	strb	r3, [r7, #8]

        /* Writing data to INT_LOWHIGH 0,1,2 registers simultaneously*/
        rslt = bmi160_set_regs(BMI160_INT_LOWHIGH_0_ADDR, data_array, 3, dev);
 80036a0:	f107 0108 	add.w	r1, r7, #8
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	2203      	movs	r2, #3
 80036a8:	205a      	movs	r0, #90	@ 0x5a
 80036aa:	f7fd fa9a 	bl	8000be2 <bmi160_set_regs>
 80036ae:	4603      	mov	r3, r0
 80036b0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80036b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	080134c4 	.word	0x080134c4

080036c4 <enable_high_g_int>:

/*!
 * @brief This API enables the high-g interrupt.
 */
static int8_t enable_high_g_int(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg, const struct bmi160_dev *dev)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 80036ce:	2300      	movs	r3, #0
 80036d0:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 80036d2:	2300      	movs	r3, #0
 80036d4:	73bb      	strb	r3, [r7, #14]

    /* Enable low-g interrupt in Int Enable 1 register */
    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 80036d6:	f107 010d 	add.w	r1, r7, #13
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	2201      	movs	r2, #1
 80036de:	2051      	movs	r0, #81	@ 0x51
 80036e0:	f7fd fa4c 	bl	8000b7c <bmi160_get_regs>
 80036e4:	4603      	mov	r3, r0
 80036e6:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 80036e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d13e      	bne.n	800376e <enable_high_g_int+0xaa>
    {
        /* Adding high-g X-axis */
        temp = data & ~BMI160_HIGH_G_X_INT_EN_MASK;
 80036f0:	7b7b      	ldrb	r3, [r7, #13]
 80036f2:	f023 0301 	bic.w	r3, r3, #1
 80036f6:	73bb      	strb	r3, [r7, #14]
        data = temp | (high_g_int_cfg->high_g_x & BMI160_HIGH_G_X_INT_EN_MASK);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003700:	b2db      	uxtb	r3, r3
 8003702:	461a      	mov	r2, r3
 8003704:	7bbb      	ldrb	r3, [r7, #14]
 8003706:	4313      	orrs	r3, r2
 8003708:	b2db      	uxtb	r3, r3
 800370a:	737b      	strb	r3, [r7, #13]

        /* Adding high-g Y-axis */
        temp = data & ~BMI160_HIGH_G_Y_INT_EN_MASK;
 800370c:	7b7b      	ldrb	r3, [r7, #13]
 800370e:	f023 0302 	bic.w	r3, r3, #2
 8003712:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_g_y << 1) & BMI160_HIGH_G_Y_INT_EN_MASK);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800371c:	b2db      	uxtb	r3, r3
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	b25b      	sxtb	r3, r3
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	b25a      	sxtb	r2, r3
 8003728:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800372c:	4313      	orrs	r3, r2
 800372e:	b25b      	sxtb	r3, r3
 8003730:	b2db      	uxtb	r3, r3
 8003732:	737b      	strb	r3, [r7, #13]

        /* Adding high-g Z-axis */
        temp = data & ~BMI160_HIGH_G_Z_INT_EN_MASK;
 8003734:	7b7b      	ldrb	r3, [r7, #13]
 8003736:	f023 0304 	bic.w	r3, r3, #4
 800373a:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_g_z << 2) & BMI160_HIGH_G_Z_INT_EN_MASK);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003744:	b2db      	uxtb	r3, r3
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	b25b      	sxtb	r3, r3
 800374a:	f003 0304 	and.w	r3, r3, #4
 800374e:	b25a      	sxtb	r2, r3
 8003750:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003754:	4313      	orrs	r3, r2
 8003756:	b25b      	sxtb	r3, r3
 8003758:	b2db      	uxtb	r3, r3
 800375a:	737b      	strb	r3, [r7, #13]

        /* write data to Int Enable 0 register */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 800375c:	f107 010d 	add.w	r1, r7, #13
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	2201      	movs	r2, #1
 8003764:	2051      	movs	r0, #81	@ 0x51
 8003766:	f7fd fa3c 	bl	8000be2 <bmi160_set_regs>
 800376a:	4603      	mov	r3, r0
 800376c:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800376e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003772:	4618      	mov	r0, r3
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <config_high_g_data_src>:
 * @brief This API configure the source of data(filter & pre-filter)
 * for high-g interrupt.
 */
static int8_t config_high_g_data_src(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg,
                                     const struct bmi160_dev *dev)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b084      	sub	sp, #16
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
 8003782:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8003784:	2300      	movs	r3, #0
 8003786:	737b      	strb	r3, [r7, #13]
    uint8_t temp = 0;
 8003788:	2300      	movs	r3, #0
 800378a:	73bb      	strb	r3, [r7, #14]

    /* Configure Int data 0 register to add source of interrupt */
    rslt = bmi160_get_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 800378c:	f107 010d 	add.w	r1, r7, #13
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	2201      	movs	r2, #1
 8003794:	2058      	movs	r0, #88	@ 0x58
 8003796:	f7fd f9f1 	bl	8000b7c <bmi160_get_regs>
 800379a:	4603      	mov	r3, r0
 800379c:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800379e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d119      	bne.n	80037da <config_high_g_data_src+0x60>
    {
        temp = data & ~BMI160_LOW_HIGH_SRC_INT_MASK;
 80037a6:	7b7b      	ldrb	r3, [r7, #13]
 80037a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80037ac:	73bb      	strb	r3, [r7, #14]
        data = temp | ((high_g_int_cfg->high_data_src << 7) & BMI160_LOW_HIGH_SRC_INT_MASK);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	01db      	lsls	r3, r3, #7
 80037ba:	b25a      	sxtb	r2, r3
 80037bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	b25b      	sxtb	r3, r3
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	737b      	strb	r3, [r7, #13]

        /* Write data to Data 0 address */
        rslt = bmi160_set_regs(BMI160_INT_DATA_0_ADDR, &data, 1, dev);
 80037c8:	f107 010d 	add.w	r1, r7, #13
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	2201      	movs	r2, #1
 80037d0:	2058      	movs	r0, #88	@ 0x58
 80037d2:	f7fd fa06 	bl	8000be2 <bmi160_set_regs>
 80037d6:	4603      	mov	r3, r0
 80037d8:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80037da:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
	...

080037e8 <config_high_g_int_settg>:
/*!
 * @brief This API configure the necessary setting of high-g interrupt.
 */
static int8_t config_high_g_int_settg(const struct bmi160_acc_high_g_int_cfg *high_g_int_cfg,
                                      const struct bmi160_dev *dev)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b084      	sub	sp, #16
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 80037f2:	2300      	movs	r3, #0
 80037f4:	73bb      	strb	r3, [r7, #14]
    uint8_t data_array[3] = { 0, 0, 0 };
 80037f6:	4a1e      	ldr	r2, [pc, #120]	@ (8003870 <config_high_g_int_settg+0x88>)
 80037f8:	f107 0308 	add.w	r3, r7, #8
 80037fc:	6812      	ldr	r2, [r2, #0]
 80037fe:	4611      	mov	r1, r2
 8003800:	8019      	strh	r1, [r3, #0]
 8003802:	3302      	adds	r3, #2
 8003804:	0c12      	lsrs	r2, r2, #16
 8003806:	701a      	strb	r2, [r3, #0]

    rslt = bmi160_get_regs(BMI160_INT_LOWHIGH_2_ADDR, &data_array[0], 1, dev);
 8003808:	f107 0108 	add.w	r1, r7, #8
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	2201      	movs	r2, #1
 8003810:	205c      	movs	r0, #92	@ 0x5c
 8003812:	f7fd f9b3 	bl	8000b7c <bmi160_get_regs>
 8003816:	4603      	mov	r3, r0
 8003818:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 800381a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d11f      	bne.n	8003862 <config_high_g_int_settg+0x7a>
    {
        temp = data_array[0] & ~BMI160_HIGH_G_HYST_MASK;
 8003822:	7a3b      	ldrb	r3, [r7, #8]
 8003824:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003828:	73bb      	strb	r3, [r7, #14]

        /* Adding high-g hysteresis */
        data_array[0] = temp | ((high_g_int_cfg->high_hy << 6) & BMI160_HIGH_G_HYST_MASK);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003832:	b2db      	uxtb	r3, r3
 8003834:	019b      	lsls	r3, r3, #6
 8003836:	b25a      	sxtb	r2, r3
 8003838:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800383c:	4313      	orrs	r3, r2
 800383e:	b25b      	sxtb	r3, r3
 8003840:	b2db      	uxtb	r3, r3
 8003842:	723b      	strb	r3, [r7, #8]

        /* Adding high-g duration */
        data_array[1] = high_g_int_cfg->high_dur;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	789b      	ldrb	r3, [r3, #2]
 8003848:	727b      	strb	r3, [r7, #9]

        /* Adding high-g threshold */
        data_array[2] = high_g_int_cfg->high_thres;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	785b      	ldrb	r3, [r3, #1]
 800384e:	72bb      	strb	r3, [r7, #10]
        rslt = bmi160_set_regs(BMI160_INT_LOWHIGH_2_ADDR, data_array, 3, dev);
 8003850:	f107 0108 	add.w	r1, r7, #8
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	2203      	movs	r2, #3
 8003858:	205c      	movs	r0, #92	@ 0x5c
 800385a:	f7fd f9c2 	bl	8000be2 <bmi160_set_regs>
 800385e:	4603      	mov	r3, r0
 8003860:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003862:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	080134c4 	.word	0x080134c4

08003874 <config_int_out_ctrl>:

/*!
 * @brief This API configure the behavioural setting of interrupt pin.
 */
static int8_t config_int_out_ctrl(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 800387e:	2300      	movs	r3, #0
 8003880:	75bb      	strb	r3, [r7, #22]
    uint8_t data = 0;
 8003882:	2300      	movs	r3, #0
 8003884:	73fb      	strb	r3, [r7, #15]

    /* Configuration of output interrupt signals on pins INT1 and INT2 are
     * done in BMI160_INT_OUT_CTRL_ADDR register*/
    rslt = bmi160_get_regs(BMI160_INT_OUT_CTRL_ADDR, &data, 1, dev);
 8003886:	f107 010f 	add.w	r1, r7, #15
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2201      	movs	r2, #1
 800388e:	2053      	movs	r0, #83	@ 0x53
 8003890:	f7fd f974 	bl	8000b7c <bmi160_get_regs>
 8003894:	4603      	mov	r3, r0
 8003896:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8003898:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800389c:	2b00      	cmp	r3, #0
 800389e:	f040 80a8 	bne.w	80039f2 <config_int_out_ctrl+0x17e>
    {
        /* updating the interrupt pin structure to local structure */
        const struct bmi160_int_pin_settg *intr_pin_sett = &(int_config->int_pin_settg);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	3302      	adds	r3, #2
 80038a6:	613b      	str	r3, [r7, #16]

        /* Configuring channel 1 */
        if (int_config->int_channel == BMI160_INT_CHANNEL_1)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d14a      	bne.n	8003946 <config_int_out_ctrl+0xd2>
        {
            /* Output enable */
            temp = data & ~BMI160_INT1_OUTPUT_EN_MASK;
 80038b0:	7bfb      	ldrb	r3, [r7, #15]
 80038b2:	f023 0308 	bic.w	r3, r3, #8
 80038b6:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_en << 3) & BMI160_INT1_OUTPUT_EN_MASK);
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	b25b      	sxtb	r3, r3
 80038c6:	f003 0308 	and.w	r3, r3, #8
 80038ca:	b25a      	sxtb	r2, r3
 80038cc:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	b25b      	sxtb	r3, r3
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	73fb      	strb	r3, [r7, #15]

            /* Output mode */
            temp = data & ~BMI160_INT1_OUTPUT_MODE_MASK;
 80038d8:	7bfb      	ldrb	r3, [r7, #15]
 80038da:	f023 0304 	bic.w	r3, r3, #4
 80038de:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_mode << 2) & BMI160_INT1_OUTPUT_MODE_MASK);
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	b25b      	sxtb	r3, r3
 80038ee:	f003 0304 	and.w	r3, r3, #4
 80038f2:	b25a      	sxtb	r2, r3
 80038f4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	b25b      	sxtb	r3, r3
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	73fb      	strb	r3, [r7, #15]

            /* Output type */
            temp = data & ~BMI160_INT1_OUTPUT_TYPE_MASK;
 8003900:	7bfb      	ldrb	r3, [r7, #15]
 8003902:	f023 0302 	bic.w	r3, r3, #2
 8003906:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_type << 1) & BMI160_INT1_OUTPUT_TYPE_MASK);
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8003910:	b2db      	uxtb	r3, r3
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	b25b      	sxtb	r3, r3
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	b25a      	sxtb	r2, r3
 800391c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003920:	4313      	orrs	r3, r2
 8003922:	b25b      	sxtb	r3, r3
 8003924:	b2db      	uxtb	r3, r3
 8003926:	73fb      	strb	r3, [r7, #15]

            /* edge control */
            temp = data & ~BMI160_INT1_EDGE_CTRL_MASK;
 8003928:	7bfb      	ldrb	r3, [r7, #15]
 800392a:	f023 0301 	bic.w	r3, r3, #1
 800392e:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->edge_ctrl) & BMI160_INT1_EDGE_CTRL_MASK);
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8003938:	b2db      	uxtb	r3, r3
 800393a:	461a      	mov	r2, r3
 800393c:	7dbb      	ldrb	r3, [r7, #22]
 800393e:	4313      	orrs	r3, r2
 8003940:	b2db      	uxtb	r3, r3
 8003942:	73fb      	strb	r3, [r7, #15]
 8003944:	e04c      	b.n	80039e0 <config_int_out_ctrl+0x16c>
        }
        else
        {
            /* Configuring channel 2 */
            /* Output enable */
            temp = data & ~BMI160_INT2_OUTPUT_EN_MASK;
 8003946:	7bfb      	ldrb	r3, [r7, #15]
 8003948:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800394c:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_en << 7) & BMI160_INT2_OUTPUT_EN_MASK);
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003956:	b2db      	uxtb	r3, r3
 8003958:	01db      	lsls	r3, r3, #7
 800395a:	b25a      	sxtb	r2, r3
 800395c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003960:	4313      	orrs	r3, r2
 8003962:	b25b      	sxtb	r3, r3
 8003964:	b2db      	uxtb	r3, r3
 8003966:	73fb      	strb	r3, [r7, #15]

            /* Output mode */
            temp = data & ~BMI160_INT2_OUTPUT_MODE_MASK;
 8003968:	7bfb      	ldrb	r3, [r7, #15]
 800396a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800396e:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_mode << 6) & BMI160_INT2_OUTPUT_MODE_MASK);
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003978:	b2db      	uxtb	r3, r3
 800397a:	019b      	lsls	r3, r3, #6
 800397c:	b25b      	sxtb	r3, r3
 800397e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003982:	b25a      	sxtb	r2, r3
 8003984:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003988:	4313      	orrs	r3, r2
 800398a:	b25b      	sxtb	r3, r3
 800398c:	b2db      	uxtb	r3, r3
 800398e:	73fb      	strb	r3, [r7, #15]

            /* Output type */
            temp = data & ~BMI160_INT2_OUTPUT_TYPE_MASK;
 8003990:	7bfb      	ldrb	r3, [r7, #15]
 8003992:	f023 0320 	bic.w	r3, r3, #32
 8003996:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->output_type << 5) & BMI160_INT2_OUTPUT_TYPE_MASK);
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	015b      	lsls	r3, r3, #5
 80039a4:	b25b      	sxtb	r3, r3
 80039a6:	f003 0320 	and.w	r3, r3, #32
 80039aa:	b25a      	sxtb	r2, r3
 80039ac:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	b25b      	sxtb	r3, r3
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	73fb      	strb	r3, [r7, #15]

            /* edge control */
            temp = data & ~BMI160_INT2_EDGE_CTRL_MASK;
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
 80039ba:	f023 0310 	bic.w	r3, r3, #16
 80039be:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->edge_ctrl << 4) & BMI160_INT2_EDGE_CTRL_MASK);
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	011b      	lsls	r3, r3, #4
 80039cc:	b25b      	sxtb	r3, r3
 80039ce:	f003 0310 	and.w	r3, r3, #16
 80039d2:	b25a      	sxtb	r2, r3
 80039d4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80039d8:	4313      	orrs	r3, r2
 80039da:	b25b      	sxtb	r3, r3
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	73fb      	strb	r3, [r7, #15]
        }

        rslt = bmi160_set_regs(BMI160_INT_OUT_CTRL_ADDR, &data, 1, dev);
 80039e0:	f107 010f 	add.w	r1, r7, #15
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	2201      	movs	r2, #1
 80039e8:	2053      	movs	r0, #83	@ 0x53
 80039ea:	f7fd f8fa 	bl	8000be2 <bmi160_set_regs>
 80039ee:	4603      	mov	r3, r0
 80039f0:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80039f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3718      	adds	r7, #24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <config_int_latch>:

/*!
 * @brief This API configure the mode(input enable, latch or non-latch) of interrupt pin.
 */
static int8_t config_int_latch(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b086      	sub	sp, #24
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
 8003a06:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t temp = 0;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	75bb      	strb	r3, [r7, #22]
    uint8_t data = 0;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	73fb      	strb	r3, [r7, #15]

    /* Configuration of latch on pins INT1 and INT2 are done in
     * BMI160_INT_LATCH_ADDR register*/
    rslt = bmi160_get_regs(BMI160_INT_LATCH_ADDR, &data, 1, dev);
 8003a10:	f107 010f 	add.w	r1, r7, #15
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	2201      	movs	r2, #1
 8003a18:	2054      	movs	r0, #84	@ 0x54
 8003a1a:	f7fd f8af 	bl	8000b7c <bmi160_get_regs>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	75fb      	strb	r3, [r7, #23]
    if (rslt == BMI160_OK)
 8003a22:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d146      	bne.n	8003ab8 <config_int_latch+0xba>
    {
        /* updating the interrupt pin structure to local structure */
        const struct bmi160_int_pin_settg *intr_pin_sett = &(int_config->int_pin_settg);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	3302      	adds	r3, #2
 8003a2e:	613b      	str	r3, [r7, #16]
        if (int_config->int_channel == BMI160_INT_CHANNEL_1)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d114      	bne.n	8003a62 <config_int_latch+0x64>
        {
            /* Configuring channel 1 */
            /* Input enable */
            temp = data & ~BMI160_INT1_INPUT_EN_MASK;
 8003a38:	7bfb      	ldrb	r3, [r7, #15]
 8003a3a:	f023 0310 	bic.w	r3, r3, #16
 8003a3e:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->input_en << 4) & BMI160_INT1_INPUT_EN_MASK);
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	011b      	lsls	r3, r3, #4
 8003a4c:	b25b      	sxtb	r3, r3
 8003a4e:	f003 0310 	and.w	r3, r3, #16
 8003a52:	b25a      	sxtb	r2, r3
 8003a54:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	b25b      	sxtb	r3, r3
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	73fb      	strb	r3, [r7, #15]
 8003a60:	e013      	b.n	8003a8a <config_int_latch+0x8c>
        }
        else
        {
            /* Configuring channel 2 */
            /* Input enable */
            temp = data & ~BMI160_INT2_INPUT_EN_MASK;
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
 8003a64:	f023 0320 	bic.w	r3, r3, #32
 8003a68:	75bb      	strb	r3, [r7, #22]
            data = temp | ((intr_pin_sett->input_en << 5) & BMI160_INT2_INPUT_EN_MASK);
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	015b      	lsls	r3, r3, #5
 8003a76:	b25b      	sxtb	r3, r3
 8003a78:	f003 0320 	and.w	r3, r3, #32
 8003a7c:	b25a      	sxtb	r2, r3
 8003a7e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	b25b      	sxtb	r3, r3
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	73fb      	strb	r3, [r7, #15]

        /* In case of latch interrupt,update the latch duration */

        /* Latching holds the interrupt for the amount of latch
         * duration time */
        temp = data & ~BMI160_INT_LATCH_MASK;
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
 8003a8c:	f023 030f 	bic.w	r3, r3, #15
 8003a90:	75bb      	strb	r3, [r7, #22]
        data = temp | (intr_pin_sett->latch_dur & BMI160_INT_LATCH_MASK);
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	881b      	ldrh	r3, [r3, #0]
 8003a96:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	7dbb      	ldrb	r3, [r7, #22]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	73fb      	strb	r3, [r7, #15]

        /* OUT_CTRL_INT and LATCH_INT address lie consecutively,
         * hence writing data to respective registers at one go */
        rslt = bmi160_set_regs(BMI160_INT_LATCH_ADDR, &data, 1, dev);
 8003aa6:	f107 010f 	add.w	r1, r7, #15
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	2201      	movs	r2, #1
 8003aae:	2054      	movs	r0, #84	@ 0x54
 8003ab0:	f7fd f897 	bl	8000be2 <bmi160_set_regs>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8003ab8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3718      	adds	r7, #24
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <set_fifo_full_int>:
 *  @brief This API sets FIFO full interrupt of the sensor.This interrupt
 *  occurs when the FIFO is full and the next full data sample would cause
 *  a FIFO overflow, which may delete the old samples.
 */
static int8_t set_fifo_full_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	73fb      	strb	r3, [r7, #15]

    /* Null-pointer check */
    if ((dev == NULL) || (dev->delay_ms == NULL))
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <set_fifo_full_int+0x1c>
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d102      	bne.n	8003ae6 <set_fifo_full_int+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8003ae0:	23ff      	movs	r3, #255	@ 0xff
 8003ae2:	73fb      	strb	r3, [r7, #15]
 8003ae4:	e019      	b.n	8003b1a <set_fifo_full_int+0x56>
    }
    else
    {
        /*enable the fifo full interrupt */
        rslt = enable_fifo_full_int(int_config, dev);
 8003ae6:	6839      	ldr	r1, [r7, #0]
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f81c 	bl	8003b26 <enable_fifo_full_int>
 8003aee:	4603      	mov	r3, r0
 8003af0:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8003af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10f      	bne.n	8003b1a <set_fifo_full_int+0x56>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8003afa:	6839      	ldr	r1, [r7, #0]
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f7fd fdf4 	bl	80016ea <set_intr_pin_config>
 8003b02:	4603      	mov	r3, r0
 8003b04:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8003b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d105      	bne.n	8003b1a <set_fifo_full_int+0x56>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 8003b0e:	6839      	ldr	r1, [r7, #0]
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f7fe fe01 	bl	8002718 <map_hardware_interrupt>
 8003b16:	4603      	mov	r3, r0
 8003b18:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8003b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <enable_fifo_full_int>:

/*!
 * @brief This enable the FIFO full interrupt engine.
 */
static int8_t enable_fifo_full_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b084      	sub	sp, #16
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
 8003b2e:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8003b30:	2300      	movs	r3, #0
 8003b32:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8003b34:	f107 010e 	add.w	r1, r7, #14
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	2051      	movs	r0, #81	@ 0x51
 8003b3e:	f7fd f81d 	bl	8000b7c <bmi160_get_regs>
 8003b42:	4603      	mov	r3, r0
 8003b44:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d11b      	bne.n	8003b86 <enable_fifo_full_int+0x60>
    {
        data = BMI160_SET_BITS(data, BMI160_FIFO_FULL_INT, int_config->fifo_full_int_en);
 8003b4e:	7bbb      	ldrb	r3, [r7, #14]
 8003b50:	b25b      	sxtb	r3, r3
 8003b52:	f023 0320 	bic.w	r3, r3, #32
 8003b56:	b25a      	sxtb	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	7a1b      	ldrb	r3, [r3, #8]
 8003b5c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	015b      	lsls	r3, r3, #5
 8003b64:	b25b      	sxtb	r3, r3
 8003b66:	f003 0320 	and.w	r3, r3, #32
 8003b6a:	b25b      	sxtb	r3, r3
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	b25b      	sxtb	r3, r3
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	73bb      	strb	r3, [r7, #14]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8003b74:	f107 010e 	add.w	r1, r7, #14
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	2051      	movs	r0, #81	@ 0x51
 8003b7e:	f7fd f830 	bl	8000be2 <bmi160_set_regs>
 8003b82:	4603      	mov	r3, r0
 8003b84:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}

08003b92 <set_fifo_watermark_int>:
 *  @brief This API sets FIFO watermark interrupt of the sensor.The FIFO
 *  watermark interrupt is fired, when the FIFO fill level is above a fifo
 *  watermark.
 */
static int8_t set_fifo_watermark_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8003b92:	b580      	push	{r7, lr}
 8003b94:	b084      	sub	sp, #16
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
 8003b9a:	6039      	str	r1, [r7, #0]
    int8_t rslt = BMI160_OK;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->delay_ms == NULL))
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <set_fifo_watermark_int+0x1c>
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d102      	bne.n	8003bb4 <set_fifo_watermark_int+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8003bae:	23ff      	movs	r3, #255	@ 0xff
 8003bb0:	73fb      	strb	r3, [r7, #15]
 8003bb2:	e019      	b.n	8003be8 <set_fifo_watermark_int+0x56>
    }
    else
    {
        /* Enable fifo-watermark interrupt in Int Enable 1 register */
        rslt = enable_fifo_wtm_int(int_config, dev);
 8003bb4:	6839      	ldr	r1, [r7, #0]
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f81c 	bl	8003bf4 <enable_fifo_wtm_int>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8003bc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10f      	bne.n	8003be8 <set_fifo_watermark_int+0x56>
        {
            /* Configure Interrupt pins */
            rslt = set_intr_pin_config(int_config, dev);
 8003bc8:	6839      	ldr	r1, [r7, #0]
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f7fd fd8d 	bl	80016ea <set_intr_pin_config>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	73fb      	strb	r3, [r7, #15]
            if (rslt == BMI160_OK)
 8003bd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d105      	bne.n	8003be8 <set_fifo_watermark_int+0x56>
            {
                rslt = map_hardware_interrupt(int_config, dev);
 8003bdc:	6839      	ldr	r1, [r7, #0]
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7fe fd9a 	bl	8002718 <map_hardware_interrupt>
 8003be4:	4603      	mov	r3, r0
 8003be6:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8003be8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <enable_fifo_wtm_int>:

/*!
 * @brief This enable the FIFO watermark interrupt engine.
 */
static int8_t enable_fifo_wtm_int(const struct bmi160_int_settg *int_config, const struct bmi160_dev *dev)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data = 0;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	73bb      	strb	r3, [r7, #14]

    rslt = bmi160_get_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8003c02:	f107 010e 	add.w	r1, r7, #14
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	2051      	movs	r0, #81	@ 0x51
 8003c0c:	f7fc ffb6 	bl	8000b7c <bmi160_get_regs>
 8003c10:	4603      	mov	r3, r0
 8003c12:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d11b      	bne.n	8003c54 <enable_fifo_wtm_int+0x60>
    {
        data = BMI160_SET_BITS(data, BMI160_FIFO_WTM_INT, int_config->fifo_wtm_int_en);
 8003c1c:	7bbb      	ldrb	r3, [r7, #14]
 8003c1e:	b25b      	sxtb	r3, r3
 8003c20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c24:	b25a      	sxtb	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	7a1b      	ldrb	r3, [r3, #8]
 8003c2a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	019b      	lsls	r3, r3, #6
 8003c32:	b25b      	sxtb	r3, r3
 8003c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c38:	b25b      	sxtb	r3, r3
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	b25b      	sxtb	r3, r3
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	73bb      	strb	r3, [r7, #14]

        /* Writing data to INT ENABLE 1 Address */
        rslt = bmi160_set_regs(BMI160_INT_ENABLE_1_ADDR, &data, 1, dev);
 8003c42:	f107 010e 	add.w	r1, r7, #14
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	2051      	movs	r0, #81	@ 0x51
 8003c4c:	f7fc ffc9 	bl	8000be2 <bmi160_set_regs>
 8003c50:	4603      	mov	r3, r0
 8003c52:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8003c54:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}

08003c60 <get_foc_status>:

/*!
 *  @brief This API is used to get the FOC status from the sensor
 */
static int8_t get_foc_status(uint8_t *foc_status, struct bmi160_dev const *dev)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;

    /* Read the FOC status from sensor */
    rslt = bmi160_get_regs(BMI160_STATUS_ADDR, &data, 1, dev);
 8003c6a:	f107 010e 	add.w	r1, r7, #14
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	2201      	movs	r2, #1
 8003c72:	201b      	movs	r0, #27
 8003c74:	f7fc ff82 	bl	8000b7c <bmi160_get_regs>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	73fb      	strb	r3, [r7, #15]
    if (rslt == BMI160_OK)
 8003c7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d107      	bne.n	8003c94 <get_foc_status+0x34>
    {
        /* Get the foc_status bit */
        *foc_status = BMI160_GET_BITS(data, BMI160_FOC_STATUS);
 8003c84:	7bbb      	ldrb	r3, [r7, #14]
 8003c86:	10db      	asrs	r3, r3, #3
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	b2da      	uxtb	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8003c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <configure_offset_enable>:

/*!
 *  @brief This API is used to configure the offset enable bits in the sensor
 */
static int8_t configure_offset_enable(const struct bmi160_foc_conf *foc_conf, struct bmi160_dev const *dev)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t data;

    /* Null-pointer check */
    rslt = null_ptr_check(dev);
 8003caa:	6838      	ldr	r0, [r7, #0]
 8003cac:	f7fd fd38 	bl	8001720 <null_ptr_check>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	73fb      	strb	r3, [r7, #15]
    if (rslt != BMI160_OK)
 8003cb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d002      	beq.n	8003cc2 <configure_offset_enable+0x22>
    {
        rslt = BMI160_E_NULL_PTR;
 8003cbc:	23ff      	movs	r3, #255	@ 0xff
 8003cbe:	73fb      	strb	r3, [r7, #15]
 8003cc0:	e032      	b.n	8003d28 <configure_offset_enable+0x88>
    }
    else
    {
        /* Read the FOC config from the sensor */
        rslt = bmi160_get_regs(BMI160_OFFSET_CONF_ADDR, &data, 1, dev);
 8003cc2:	f107 010e 	add.w	r1, r7, #14
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	2077      	movs	r0, #119	@ 0x77
 8003ccc:	f7fc ff56 	bl	8000b7c <bmi160_get_regs>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	73fb      	strb	r3, [r7, #15]
        if (rslt == BMI160_OK)
 8003cd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d125      	bne.n	8003d28 <configure_offset_enable+0x88>
        {
            /* Set the offset enable/disable for gyro */
            data = BMI160_SET_BITS(data, BMI160_GYRO_OFFSET_EN, foc_conf->gyro_off_en);
 8003cdc:	7bbb      	ldrb	r3, [r7, #14]
 8003cde:	b25b      	sxtb	r3, r3
 8003ce0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ce4:	b25a      	sxtb	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	795b      	ldrb	r3, [r3, #5]
 8003cea:	01db      	lsls	r3, r3, #7
 8003cec:	b25b      	sxtb	r3, r3
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	b25b      	sxtb	r3, r3
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	73bb      	strb	r3, [r7, #14]

            /* Set the offset enable/disable for accel */
            data = BMI160_SET_BITS(data, BMI160_ACCEL_OFFSET_EN, foc_conf->acc_off_en);
 8003cf6:	7bbb      	ldrb	r3, [r7, #14]
 8003cf8:	b25b      	sxtb	r3, r3
 8003cfa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cfe:	b25a      	sxtb	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	791b      	ldrb	r3, [r3, #4]
 8003d04:	019b      	lsls	r3, r3, #6
 8003d06:	b25b      	sxtb	r3, r3
 8003d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d0c:	b25b      	sxtb	r3, r3
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	b25b      	sxtb	r3, r3
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	73bb      	strb	r3, [r7, #14]

            /* Set the offset config in the sensor */
            rslt = bmi160_set_regs(BMI160_OFFSET_CONF_ADDR, &data, 1, dev);
 8003d16:	f107 010e 	add.w	r1, r7, #14
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	2077      	movs	r0, #119	@ 0x77
 8003d20:	f7fc ff5f 	bl	8000be2 <bmi160_set_regs>
 8003d24:	4603      	mov	r3, r0
 8003d26:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8003d28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <trigger_foc>:

static int8_t trigger_foc(struct bmi160_offsets *offset, struct bmi160_dev const *dev)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b088      	sub	sp, #32
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t foc_status = BMI160_ENABLE;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	777b      	strb	r3, [r7, #29]
    uint8_t cmd = BMI160_START_FOC_CMD;
 8003d42:	2303      	movs	r3, #3
 8003d44:	773b      	strb	r3, [r7, #28]
    uint8_t timeout = 0;
 8003d46:	2300      	movs	r3, #0
 8003d48:	77bb      	strb	r3, [r7, #30]
    uint8_t data_array[20];

    /* Start the FOC process */
    rslt = bmi160_set_regs(BMI160_COMMAND_REG_ADDR, &cmd, 1, dev);
 8003d4a:	f107 011c 	add.w	r1, r7, #28
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2201      	movs	r2, #1
 8003d52:	207e      	movs	r0, #126	@ 0x7e
 8003d54:	f7fc ff45 	bl	8000be2 <bmi160_set_regs>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	77fb      	strb	r3, [r7, #31]
    if (rslt == BMI160_OK)
 8003d5c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d141      	bne.n	8003de8 <trigger_foc+0xb4>
    {
        /* Check the FOC status*/
        rslt = get_foc_status(&foc_status, dev);
 8003d64:	f107 031d 	add.w	r3, r7, #29
 8003d68:	6839      	ldr	r1, [r7, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7ff ff78 	bl	8003c60 <get_foc_status>
 8003d70:	4603      	mov	r3, r0
 8003d72:	77fb      	strb	r3, [r7, #31]

        if ((rslt != BMI160_OK) || (foc_status != BMI160_ENABLE))
 8003d74:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d112      	bne.n	8003da2 <trigger_foc+0x6e>
 8003d7c:	7f7b      	ldrb	r3, [r7, #29]
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d025      	beq.n	8003dce <trigger_foc+0x9a>
        {
            while ((foc_status != BMI160_ENABLE) && (timeout < 32))
 8003d82:	e00e      	b.n	8003da2 <trigger_foc+0x6e>
            {
                /* Maximum time of 250ms is given in 10
                 * steps of 25ms each - 250ms refer datasheet 2.9.1 */
                dev->delay_ms(25);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d88:	2019      	movs	r0, #25
 8003d8a:	4798      	blx	r3

                /* Check the FOC status*/
                rslt = get_foc_status(&foc_status, dev);
 8003d8c:	f107 031d 	add.w	r3, r7, #29
 8003d90:	6839      	ldr	r1, [r7, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7ff ff64 	bl	8003c60 <get_foc_status>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	77fb      	strb	r3, [r7, #31]
                timeout++;
 8003d9c:	7fbb      	ldrb	r3, [r7, #30]
 8003d9e:	3301      	adds	r3, #1
 8003da0:	77bb      	strb	r3, [r7, #30]
            while ((foc_status != BMI160_ENABLE) && (timeout < 32))
 8003da2:	7f7b      	ldrb	r3, [r7, #29]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d002      	beq.n	8003dae <trigger_foc+0x7a>
 8003da8:	7fbb      	ldrb	r3, [r7, #30]
 8003daa:	2b1f      	cmp	r3, #31
 8003dac:	d9ea      	bls.n	8003d84 <trigger_foc+0x50>
            }

            if ((rslt == BMI160_OK) && (foc_status == BMI160_ENABLE))
 8003dae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d109      	bne.n	8003dca <trigger_foc+0x96>
 8003db6:	7f7b      	ldrb	r3, [r7, #29]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d106      	bne.n	8003dca <trigger_foc+0x96>
            {
                /* Get offset values from sensor */
                rslt = bmi160_get_offsets(offset, dev);
 8003dbc:	6839      	ldr	r1, [r7, #0]
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f7fd f9c9 	bl	8001156 <bmi160_get_offsets>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	77fb      	strb	r3, [r7, #31]
 8003dc8:	e001      	b.n	8003dce <trigger_foc+0x9a>
            }
            else
            {
                /* FOC failure case */
                rslt = BMI160_E_FOC_FAILURE;
 8003dca:	23f5      	movs	r3, #245	@ 0xf5
 8003dcc:	77fb      	strb	r3, [r7, #31]
            }
        }

        if (rslt == BMI160_OK)
 8003dce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d108      	bne.n	8003de8 <trigger_foc+0xb4>
        {
            /* Read registers 0x04-0x17 */
            rslt = bmi160_get_regs(BMI160_GYRO_DATA_ADDR, data_array, 20, dev);
 8003dd6:	f107 0108 	add.w	r1, r7, #8
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2214      	movs	r2, #20
 8003dde:	200c      	movs	r0, #12
 8003de0:	f7fc fecc 	bl	8000b7c <bmi160_get_regs>
 8003de4:	4603      	mov	r3, r0
 8003de6:	77fb      	strb	r3, [r7, #31]
        }
    }

    return rslt;
 8003de8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3720      	adds	r7, #32
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <BMI160_init>:
uint8_t BMI160_Ascale_bit, BMI160_Gscale_bit;

float bmi160_aRes, bmi160_gRes;

int8_t BMI160_init(BMI160_t *DataStruct)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]

	int8_t rslt;

	set_bmi160_Ares();
 8003dfc:	f000 f970 	bl	80040e0 <set_bmi160_Ares>
	set_bmi160_Gres();
 8003e00:	f000 f99a 	bl	8004138 <set_bmi160_Gres>
	get_bmi160_Ares();
 8003e04:	f000 f9ca 	bl	800419c <get_bmi160_Ares>
	get_bmi160_Gres();
 8003e08:	f000 f9fe 	bl	8004208 <get_bmi160_Gres>

    sensor.id = 0;
 8003e0c:	4b52      	ldr	r3, [pc, #328]	@ (8003f58 <BMI160_init+0x164>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	705a      	strb	r2, [r3, #1]
    sensor.intf = BMI160_I2C_INTF;
 8003e12:	4b51      	ldr	r3, [pc, #324]	@ (8003f58 <BMI160_init+0x164>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	709a      	strb	r2, [r3, #2]
    sensor.read = SensorAPI_I2Cx_Read;
 8003e18:	4b4f      	ldr	r3, [pc, #316]	@ (8003f58 <BMI160_init+0x164>)
 8003e1a:	4a50      	ldr	r2, [pc, #320]	@ (8003f5c <BMI160_init+0x168>)
 8003e1c:	61da      	str	r2, [r3, #28]
    sensor.write = SensorAPI_I2Cx_Write;
 8003e1e:	4b4e      	ldr	r3, [pc, #312]	@ (8003f58 <BMI160_init+0x164>)
 8003e20:	4a4f      	ldr	r2, [pc, #316]	@ (8003f60 <BMI160_init+0x16c>)
 8003e22:	621a      	str	r2, [r3, #32]
    sensor.delay_ms = HAL_Delay;
 8003e24:	4b4c      	ldr	r3, [pc, #304]	@ (8003f58 <BMI160_init+0x164>)
 8003e26:	4a4f      	ldr	r2, [pc, #316]	@ (8003f64 <BMI160_init+0x170>)
 8003e28:	625a      	str	r2, [r3, #36]	@ 0x24
    sensor.read_write_len = 32;
 8003e2a:	4b4b      	ldr	r3, [pc, #300]	@ (8003f58 <BMI160_init+0x164>)
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	851a      	strh	r2, [r3, #40]	@ 0x28

    rslt = bmi160_soft_reset(&sensor);
 8003e30:	4849      	ldr	r0, [pc, #292]	@ (8003f58 <BMI160_init+0x164>)
 8003e32:	f7fc ff87 	bl	8000d44 <bmi160_soft_reset>
 8003e36:	4603      	mov	r3, r0
 8003e38:	73fb      	strb	r3, [r7, #15]
    sensor.delay_ms(200);
 8003e3a:	4b47      	ldr	r3, [pc, #284]	@ (8003f58 <BMI160_init+0x164>)
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3e:	20c8      	movs	r0, #200	@ 0xc8
 8003e40:	4798      	blx	r3
    rslt = bmi160_init(&sensor);
 8003e42:	4845      	ldr	r0, [pc, #276]	@ (8003f58 <BMI160_init+0x164>)
 8003e44:	f7fc ff30 	bl	8000ca8 <bmi160_init>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    uint8_t reg_addr = BMI160_CHIP_ID_ADDR;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	73bb      	strb	r3, [r7, #14]
    uint8_t chipID = 0;
 8003e50:	2300      	movs	r3, #0
 8003e52:	72fb      	strb	r3, [r7, #11]
    uint16_t len = 1;
 8003e54:	2301      	movs	r3, #1
 8003e56:	81bb      	strh	r3, [r7, #12]
    rslt = bmi160_get_regs(reg_addr, &chipID, len, &sensor);
 8003e58:	89ba      	ldrh	r2, [r7, #12]
 8003e5a:	f107 010b 	add.w	r1, r7, #11
 8003e5e:	7bb8      	ldrb	r0, [r7, #14]
 8003e60:	4b3d      	ldr	r3, [pc, #244]	@ (8003f58 <BMI160_init+0x164>)
 8003e62:	f7fc fe8b 	bl	8000b7c <bmi160_get_regs>
 8003e66:	4603      	mov	r3, r0
 8003e68:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    /* Select the Output data rate, range of accelerometer sensor */
    sensor.accel_cfg.odr = BMI160_ACCEL_ODR_800HZ; //BMI160_ACCEL_ODR_400HZ
 8003e6a:	4b3b      	ldr	r3, [pc, #236]	@ (8003f58 <BMI160_init+0x164>)
 8003e6c:	220b      	movs	r2, #11
 8003e6e:	715a      	strb	r2, [r3, #5]
    sensor.delay_ms(100);
 8003e70:	4b39      	ldr	r3, [pc, #228]	@ (8003f58 <BMI160_init+0x164>)
 8003e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e74:	2064      	movs	r0, #100	@ 0x64
 8003e76:	4798      	blx	r3
    sensor.accel_cfg.range = BMI160_Ascale_bit;
 8003e78:	4b3b      	ldr	r3, [pc, #236]	@ (8003f68 <BMI160_init+0x174>)
 8003e7a:	781a      	ldrb	r2, [r3, #0]
 8003e7c:	4b36      	ldr	r3, [pc, #216]	@ (8003f58 <BMI160_init+0x164>)
 8003e7e:	719a      	strb	r2, [r3, #6]
    sensor.delay_ms(100);
 8003e80:	4b35      	ldr	r3, [pc, #212]	@ (8003f58 <BMI160_init+0x164>)
 8003e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e84:	2064      	movs	r0, #100	@ 0x64
 8003e86:	4798      	blx	r3

    /* Select the power mode of accelerometer sensor */
    sensor.accel_cfg.power = BMI160_ACCEL_NORMAL_MODE;
 8003e88:	4b33      	ldr	r3, [pc, #204]	@ (8003f58 <BMI160_init+0x164>)
 8003e8a:	2211      	movs	r2, #17
 8003e8c:	711a      	strb	r2, [r3, #4]
    sensor.delay_ms(100);
 8003e8e:	4b32      	ldr	r3, [pc, #200]	@ (8003f58 <BMI160_init+0x164>)
 8003e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e92:	2064      	movs	r0, #100	@ 0x64
 8003e94:	4798      	blx	r3
    sensor.accel_cfg.bw = BMI160_ACCEL_BW_NORMAL_AVG4; //BMI160_ACCEL_BW_OSR2_AVG2
 8003e96:	4b30      	ldr	r3, [pc, #192]	@ (8003f58 <BMI160_init+0x164>)
 8003e98:	2202      	movs	r2, #2
 8003e9a:	71da      	strb	r2, [r3, #7]
    sensor.delay_ms(100);
 8003e9c:	4b2e      	ldr	r3, [pc, #184]	@ (8003f58 <BMI160_init+0x164>)
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea0:	2064      	movs	r0, #100	@ 0x64
 8003ea2:	4798      	blx	r3


    /* Select the Output data rate, range of Gyroscope sensor */
    sensor.gyro_cfg.odr = BMI160_GYRO_ODR_800HZ; //BMI160_GYRO_ODR_400HZ
 8003ea4:	4b2c      	ldr	r3, [pc, #176]	@ (8003f58 <BMI160_init+0x164>)
 8003ea6:	220b      	movs	r2, #11
 8003ea8:	735a      	strb	r2, [r3, #13]
    sensor.delay_ms(100);
 8003eaa:	4b2b      	ldr	r3, [pc, #172]	@ (8003f58 <BMI160_init+0x164>)
 8003eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eae:	2064      	movs	r0, #100	@ 0x64
 8003eb0:	4798      	blx	r3
    sensor.gyro_cfg.range = BMI160_Gscale_bit; // BMI160_GYRO_RANGE_250_DPS
 8003eb2:	4b2e      	ldr	r3, [pc, #184]	@ (8003f6c <BMI160_init+0x178>)
 8003eb4:	781a      	ldrb	r2, [r3, #0]
 8003eb6:	4b28      	ldr	r3, [pc, #160]	@ (8003f58 <BMI160_init+0x164>)
 8003eb8:	739a      	strb	r2, [r3, #14]
    sensor.delay_ms(100);
 8003eba:	4b27      	ldr	r3, [pc, #156]	@ (8003f58 <BMI160_init+0x164>)
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebe:	2064      	movs	r0, #100	@ 0x64
 8003ec0:	4798      	blx	r3

    /* Select the power mode of Gyroscope sensor */
    sensor.gyro_cfg.power = BMI160_GYRO_NORMAL_MODE;
 8003ec2:	4b25      	ldr	r3, [pc, #148]	@ (8003f58 <BMI160_init+0x164>)
 8003ec4:	2215      	movs	r2, #21
 8003ec6:	731a      	strb	r2, [r3, #12]
    sensor.delay_ms(100);
 8003ec8:	4b23      	ldr	r3, [pc, #140]	@ (8003f58 <BMI160_init+0x164>)
 8003eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ecc:	2064      	movs	r0, #100	@ 0x64
 8003ece:	4798      	blx	r3
    sensor.gyro_cfg.bw = BMI160_GYRO_BW_NORMAL_MODE; //BMI160_GYRO_BW_NORMAL_MODE
 8003ed0:	4b21      	ldr	r3, [pc, #132]	@ (8003f58 <BMI160_init+0x164>)
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	73da      	strb	r2, [r3, #15]
    sensor.delay_ms(100);
 8003ed6:	4b20      	ldr	r3, [pc, #128]	@ (8003f58 <BMI160_init+0x164>)
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eda:	2064      	movs	r0, #100	@ 0x64
 8003edc:	4798      	blx	r3

    /* Set the sensor configuration */
    rslt = bmi160_set_sens_conf(&sensor);
 8003ede:	481e      	ldr	r0, [pc, #120]	@ (8003f58 <BMI160_init+0x164>)
 8003ee0:	f7fc ff6b 	bl	8000dba <bmi160_set_sens_conf>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	73fb      	strb	r3, [r7, #15]

    /********************************************************************/

    rslt = start_foc();
 8003ee8:	f000 f844 	bl	8003f74 <start_foc>
 8003eec:	4603      	mov	r3, r0
 8003eee:	73fb      	strb	r3, [r7, #15]

	/********************************************************************/

    /* Select the Interrupt channel/pin */
    int_config.int_channel = BMI160_INT_CHANNEL_1;// Interrupt channel/pin 1
 8003ef0:	4b1f      	ldr	r3, [pc, #124]	@ (8003f70 <BMI160_init+0x17c>)
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	701a      	strb	r2, [r3, #0]

    /* Select the Interrupt type */
    int_config.int_type = BMI160_ACC_GYRO_DATA_RDY_INT;// Choosing Any motion interrupt
 8003ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8003f70 <BMI160_init+0x17c>)
 8003ef8:	220a      	movs	r2, #10
 8003efa:	705a      	strb	r2, [r3, #1]
    /* Select the interrupt channel/pin settings */
    int_config.int_pin_settg.output_en = BMI160_ENABLE;// Enabling interrupt pins to act as output pin
 8003efc:	4a1c      	ldr	r2, [pc, #112]	@ (8003f70 <BMI160_init+0x17c>)
 8003efe:	7893      	ldrb	r3, [r2, #2]
 8003f00:	f043 0301 	orr.w	r3, r3, #1
 8003f04:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.output_mode = BMI160_DISABLE;// Choosing push-pull mode for interrupt pin
 8003f06:	4a1a      	ldr	r2, [pc, #104]	@ (8003f70 <BMI160_init+0x17c>)
 8003f08:	7893      	ldrb	r3, [r2, #2]
 8003f0a:	f36f 0341 	bfc	r3, #1, #1
 8003f0e:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.output_type = BMI160_DISABLE;// Choosing active low output
 8003f10:	4a17      	ldr	r2, [pc, #92]	@ (8003f70 <BMI160_init+0x17c>)
 8003f12:	7893      	ldrb	r3, [r2, #2]
 8003f14:	f36f 0382 	bfc	r3, #2, #1
 8003f18:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.edge_ctrl = BMI160_ENABLE;// Choosing edge triggered output
 8003f1a:	4a15      	ldr	r2, [pc, #84]	@ (8003f70 <BMI160_init+0x17c>)
 8003f1c:	7893      	ldrb	r3, [r2, #2]
 8003f1e:	f043 0308 	orr.w	r3, r3, #8
 8003f22:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.input_en = BMI160_DISABLE;// Disabling interrupt pin to act as input
 8003f24:	4a12      	ldr	r2, [pc, #72]	@ (8003f70 <BMI160_init+0x17c>)
 8003f26:	7893      	ldrb	r3, [r2, #2]
 8003f28:	f36f 1304 	bfc	r3, #4, #1
 8003f2c:	7093      	strb	r3, [r2, #2]
    int_config.int_pin_settg.latch_dur = BMI160_LATCH_DUR_NONE;// non-latched output
 8003f2e:	4a10      	ldr	r2, [pc, #64]	@ (8003f70 <BMI160_init+0x17c>)
 8003f30:	8853      	ldrh	r3, [r2, #2]
 8003f32:	f36f 1348 	bfc	r3, #5, #4
 8003f36:	8053      	strh	r3, [r2, #2]

    /* Set the Any-motion interrupt */
    rslt = bmi160_set_int_config(&int_config, &sensor); /* sensor is an instance of the structure bmi160_dev  */
 8003f38:	4907      	ldr	r1, [pc, #28]	@ (8003f58 <BMI160_init+0x164>)
 8003f3a:	480d      	ldr	r0, [pc, #52]	@ (8003f70 <BMI160_init+0x17c>)
 8003f3c:	f7fc fffe 	bl	8000f3c <bmi160_set_int_config>
 8003f40:	4603      	mov	r3, r0
 8003f42:	73fb      	strb	r3, [r7, #15]

    DataStruct->INIT_OK_i8 = rslt;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	7bfa      	ldrb	r2, [r7, #15]
 8003f48:	761a      	strb	r2, [r3, #24]
    return rslt;
 8003f4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	200001a4 	.word	0x200001a4
 8003f5c:	08004291 	.word	0x08004291
 8003f60:	080042d5 	.word	0x080042d5
 8003f64:	080053bd 	.word	0x080053bd
 8003f68:	20000206 	.word	0x20000206
 8003f6c:	20000207 	.word	0x20000207
 8003f70:	200001fc 	.word	0x200001fc

08003f74 <start_foc>:

int8_t start_foc()
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
	int8_t rslt = 0;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	71fb      	strb	r3, [r7, #7]

	/* Enable FOC for accel with target values of z = 1g ; x,y as 0g */
	foc_conf.acc_off_en = BMI160_ENABLE;
 8003f7e:	4b13      	ldr	r3, [pc, #76]	@ (8003fcc <start_foc+0x58>)
 8003f80:	2201      	movs	r2, #1
 8003f82:	711a      	strb	r2, [r3, #4]
	foc_conf.foc_acc_x  = BMI160_FOC_ACCEL_0G;
 8003f84:	4b11      	ldr	r3, [pc, #68]	@ (8003fcc <start_foc+0x58>)
 8003f86:	2203      	movs	r2, #3
 8003f88:	705a      	strb	r2, [r3, #1]
	foc_conf.foc_acc_y  = BMI160_FOC_ACCEL_0G;
 8003f8a:	4b10      	ldr	r3, [pc, #64]	@ (8003fcc <start_foc+0x58>)
 8003f8c:	2203      	movs	r2, #3
 8003f8e:	709a      	strb	r2, [r3, #2]
	foc_conf.foc_acc_z  = BMI160_FOC_ACCEL_POSITIVE_G;
 8003f90:	4b0e      	ldr	r3, [pc, #56]	@ (8003fcc <start_foc+0x58>)
 8003f92:	2201      	movs	r2, #1
 8003f94:	70da      	strb	r2, [r3, #3]
	sensor.delay_ms(100);
 8003f96:	4b0e      	ldr	r3, [pc, #56]	@ (8003fd0 <start_foc+0x5c>)
 8003f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f9a:	2064      	movs	r0, #100	@ 0x64
 8003f9c:	4798      	blx	r3

	/* Enable FOC for gyro */
	foc_conf.foc_gyr_en = BMI160_ENABLE;
 8003f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8003fcc <start_foc+0x58>)
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	701a      	strb	r2, [r3, #0]
	foc_conf.gyro_off_en = BMI160_ENABLE;
 8003fa4:	4b09      	ldr	r3, [pc, #36]	@ (8003fcc <start_foc+0x58>)
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	715a      	strb	r2, [r3, #5]
	sensor.delay_ms(100);
 8003faa:	4b09      	ldr	r3, [pc, #36]	@ (8003fd0 <start_foc+0x5c>)
 8003fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fae:	2064      	movs	r0, #100	@ 0x64
 8003fb0:	4798      	blx	r3

	rslt = bmi160_start_foc(&foc_conf, &offsets, &sensor);
 8003fb2:	4a07      	ldr	r2, [pc, #28]	@ (8003fd0 <start_foc+0x5c>)
 8003fb4:	4907      	ldr	r1, [pc, #28]	@ (8003fd4 <start_foc+0x60>)
 8003fb6:	4805      	ldr	r0, [pc, #20]	@ (8003fcc <start_foc+0x58>)
 8003fb8:	f7fd f84c 	bl	8001054 <bmi160_start_foc>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	71fb      	strb	r3, [r7, #7]

	return rslt;
 8003fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3708      	adds	r7, #8
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	200001e8 	.word	0x200001e8
 8003fd0:	200001a4 	.word	0x200001a4
 8003fd4:	200001f0 	.word	0x200001f0

08003fd8 <bmi160ReadAccelGyro>:

int8_t bmi160ReadAccelGyro(BMI160_t *DataStruct)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b08a      	sub	sp, #40	@ 0x28
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	float ax, ay, az, gx, gy, gz;

	rslt = bmi160_get_sensor_data((BMI160_ACCEL_SEL | BMI160_GYRO_SEL), &accel, &gyro, &sensor);
 8003fe0:	4b3a      	ldr	r3, [pc, #232]	@ (80040cc <bmi160ReadAccelGyro+0xf4>)
 8003fe2:	4a3b      	ldr	r2, [pc, #236]	@ (80040d0 <bmi160ReadAccelGyro+0xf8>)
 8003fe4:	493b      	ldr	r1, [pc, #236]	@ (80040d4 <bmi160ReadAccelGyro+0xfc>)
 8003fe6:	2003      	movs	r0, #3
 8003fe8:	f7fc ff41 	bl	8000e6e <bmi160_get_sensor_data>
 8003fec:	4603      	mov	r3, r0
 8003fee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	ax = (float)accel.x / bmi160_aRes;
 8003ff2:	4b38      	ldr	r3, [pc, #224]	@ (80040d4 <bmi160ReadAccelGyro+0xfc>)
 8003ff4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ff8:	ee07 3a90 	vmov	s15, r3
 8003ffc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004000:	4b35      	ldr	r3, [pc, #212]	@ (80040d8 <bmi160ReadAccelGyro+0x100>)
 8004002:	ed93 7a00 	vldr	s14, [r3]
 8004006:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800400a:	edc7 7a08 	vstr	s15, [r7, #32]
	ay = (float)accel.y / bmi160_aRes;
 800400e:	4b31      	ldr	r3, [pc, #196]	@ (80040d4 <bmi160ReadAccelGyro+0xfc>)
 8004010:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004014:	ee07 3a90 	vmov	s15, r3
 8004018:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800401c:	4b2e      	ldr	r3, [pc, #184]	@ (80040d8 <bmi160ReadAccelGyro+0x100>)
 800401e:	ed93 7a00 	vldr	s14, [r3]
 8004022:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004026:	edc7 7a07 	vstr	s15, [r7, #28]
	az = (float)accel.z / bmi160_aRes;
 800402a:	4b2a      	ldr	r3, [pc, #168]	@ (80040d4 <bmi160ReadAccelGyro+0xfc>)
 800402c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004030:	ee07 3a90 	vmov	s15, r3
 8004034:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004038:	4b27      	ldr	r3, [pc, #156]	@ (80040d8 <bmi160ReadAccelGyro+0x100>)
 800403a:	ed93 7a00 	vldr	s14, [r3]
 800403e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004042:	edc7 7a06 	vstr	s15, [r7, #24]

	gx = (float)gyro.x / bmi160_gRes;
 8004046:	4b22      	ldr	r3, [pc, #136]	@ (80040d0 <bmi160ReadAccelGyro+0xf8>)
 8004048:	f9b3 3000 	ldrsh.w	r3, [r3]
 800404c:	ee07 3a90 	vmov	s15, r3
 8004050:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004054:	4b21      	ldr	r3, [pc, #132]	@ (80040dc <bmi160ReadAccelGyro+0x104>)
 8004056:	ed93 7a00 	vldr	s14, [r3]
 800405a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800405e:	edc7 7a05 	vstr	s15, [r7, #20]
	gy = (float)gyro.y / bmi160_gRes;
 8004062:	4b1b      	ldr	r3, [pc, #108]	@ (80040d0 <bmi160ReadAccelGyro+0xf8>)
 8004064:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004068:	ee07 3a90 	vmov	s15, r3
 800406c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004070:	4b1a      	ldr	r3, [pc, #104]	@ (80040dc <bmi160ReadAccelGyro+0x104>)
 8004072:	ed93 7a00 	vldr	s14, [r3]
 8004076:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800407a:	edc7 7a04 	vstr	s15, [r7, #16]
	gz = (float)gyro.z / bmi160_gRes;
 800407e:	4b14      	ldr	r3, [pc, #80]	@ (80040d0 <bmi160ReadAccelGyro+0xf8>)
 8004080:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004084:	ee07 3a90 	vmov	s15, r3
 8004088:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800408c:	4b13      	ldr	r3, [pc, #76]	@ (80040dc <bmi160ReadAccelGyro+0x104>)
 800408e:	ed93 7a00 	vldr	s14, [r3]
 8004092:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004096:	edc7 7a03 	vstr	s15, [r7, #12]


	DataStruct->BMI160_Ax_f32 = ax;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a3a      	ldr	r2, [r7, #32]
 800409e:	601a      	str	r2, [r3, #0]
	DataStruct->BMI160_Ay_f32 = ay;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	69fa      	ldr	r2, [r7, #28]
 80040a4:	605a      	str	r2, [r3, #4]
	DataStruct->BMI160_Az_f32 = az;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	609a      	str	r2, [r3, #8]

	DataStruct->BMI160_Gx_f32 = gx;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	60da      	str	r2, [r3, #12]
	DataStruct->BMI160_Gy_f32 = gy;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	611a      	str	r2, [r3, #16]
	DataStruct->BMI160_Gz_f32 = gz;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	615a      	str	r2, [r3, #20]

	return rslt;
 80040be:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3728      	adds	r7, #40	@ 0x28
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	200001a4 	.word	0x200001a4
 80040d0:	200001dc 	.word	0x200001dc
 80040d4:	200001d0 	.word	0x200001d0
 80040d8:	20000208 	.word	0x20000208
 80040dc:	2000020c 	.word	0x2000020c

080040e0 <set_bmi160_Ares>:

void set_bmi160_Ares()
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0
	switch (BMI160_Asens)
 80040e4:	4b12      	ldr	r3, [pc, #72]	@ (8004130 <set_bmi160_Ares+0x50>)
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	3b01      	subs	r3, #1
 80040ea:	2b03      	cmp	r3, #3
 80040ec:	d81a      	bhi.n	8004124 <set_bmi160_Ares+0x44>
 80040ee:	a201      	add	r2, pc, #4	@ (adr r2, 80040f4 <set_bmi160_Ares+0x14>)
 80040f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f4:	08004105 	.word	0x08004105
 80040f8:	0800410d 	.word	0x0800410d
 80040fc:	08004115 	.word	0x08004115
 8004100:	0800411d 	.word	0x0800411d
	{
		case AFS_2G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_2G;
 8004104:	4b0b      	ldr	r3, [pc, #44]	@ (8004134 <set_bmi160_Ares+0x54>)
 8004106:	2203      	movs	r2, #3
 8004108:	701a      	strb	r2, [r3, #0]
			break;
 800410a:	e00b      	b.n	8004124 <set_bmi160_Ares+0x44>
		case AFS_4G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_4G;
 800410c:	4b09      	ldr	r3, [pc, #36]	@ (8004134 <set_bmi160_Ares+0x54>)
 800410e:	2205      	movs	r2, #5
 8004110:	701a      	strb	r2, [r3, #0]
			break;
 8004112:	e007      	b.n	8004124 <set_bmi160_Ares+0x44>
		case AFS_8G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_8G;
 8004114:	4b07      	ldr	r3, [pc, #28]	@ (8004134 <set_bmi160_Ares+0x54>)
 8004116:	2208      	movs	r2, #8
 8004118:	701a      	strb	r2, [r3, #0]
			break;
 800411a:	e003      	b.n	8004124 <set_bmi160_Ares+0x44>
		case AFS_16G:
			BMI160_Ascale_bit = BMI160_ACCEL_RANGE_16G;
 800411c:	4b05      	ldr	r3, [pc, #20]	@ (8004134 <set_bmi160_Ares+0x54>)
 800411e:	220c      	movs	r2, #12
 8004120:	701a      	strb	r2, [r3, #0]
			break;
 8004122:	bf00      	nop
	}
}
 8004124:	bf00      	nop
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	20000008 	.word	0x20000008
 8004134:	20000206 	.word	0x20000206

08004138 <set_bmi160_Gres>:

void set_bmi160_Gres()
{
 8004138:	b480      	push	{r7}
 800413a:	af00      	add	r7, sp, #0
	switch (BMI160_Gsens)
 800413c:	4b15      	ldr	r3, [pc, #84]	@ (8004194 <set_bmi160_Gres+0x5c>)
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	3b01      	subs	r3, #1
 8004142:	2b04      	cmp	r3, #4
 8004144:	d820      	bhi.n	8004188 <set_bmi160_Gres+0x50>
 8004146:	a201      	add	r2, pc, #4	@ (adr r2, 800414c <set_bmi160_Gres+0x14>)
 8004148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414c:	08004161 	.word	0x08004161
 8004150:	08004169 	.word	0x08004169
 8004154:	08004171 	.word	0x08004171
 8004158:	08004179 	.word	0x08004179
 800415c:	08004181 	.word	0x08004181
	{
		case GFS_125DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_125_DPS;
 8004160:	4b0d      	ldr	r3, [pc, #52]	@ (8004198 <set_bmi160_Gres+0x60>)
 8004162:	2204      	movs	r2, #4
 8004164:	701a      	strb	r2, [r3, #0]
			break;
 8004166:	e00f      	b.n	8004188 <set_bmi160_Gres+0x50>
		case GFS_250DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_250_DPS;
 8004168:	4b0b      	ldr	r3, [pc, #44]	@ (8004198 <set_bmi160_Gres+0x60>)
 800416a:	2203      	movs	r2, #3
 800416c:	701a      	strb	r2, [r3, #0]
			break;
 800416e:	e00b      	b.n	8004188 <set_bmi160_Gres+0x50>
		case GFS_500DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_500_DPS;
 8004170:	4b09      	ldr	r3, [pc, #36]	@ (8004198 <set_bmi160_Gres+0x60>)
 8004172:	2202      	movs	r2, #2
 8004174:	701a      	strb	r2, [r3, #0]
			break;
 8004176:	e007      	b.n	8004188 <set_bmi160_Gres+0x50>
		case GFS_1000DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_1000_DPS;
 8004178:	4b07      	ldr	r3, [pc, #28]	@ (8004198 <set_bmi160_Gres+0x60>)
 800417a:	2201      	movs	r2, #1
 800417c:	701a      	strb	r2, [r3, #0]
			break;
 800417e:	e003      	b.n	8004188 <set_bmi160_Gres+0x50>
		case GFS_2000DPS:
			BMI160_Gscale_bit = BMI160_GYRO_RANGE_2000_DPS;
 8004180:	4b05      	ldr	r3, [pc, #20]	@ (8004198 <set_bmi160_Gres+0x60>)
 8004182:	2200      	movs	r2, #0
 8004184:	701a      	strb	r2, [r3, #0]
			break;
 8004186:	bf00      	nop
	}
}
 8004188:	bf00      	nop
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	20000009 	.word	0x20000009
 8004198:	20000207 	.word	0x20000207

0800419c <get_bmi160_Ares>:

void get_bmi160_Ares()
{
 800419c:	b480      	push	{r7}
 800419e:	af00      	add	r7, sp, #0
	switch (BMI160_Ascale)
 80041a0:	4b17      	ldr	r3, [pc, #92]	@ (8004200 <get_bmi160_Ares+0x64>)
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	2b04      	cmp	r3, #4
 80041a6:	d826      	bhi.n	80041f6 <get_bmi160_Ares+0x5a>
 80041a8:	a201      	add	r2, pc, #4	@ (adr r2, 80041b0 <get_bmi160_Ares+0x14>)
 80041aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ae:	bf00      	nop
 80041b0:	080041c5 	.word	0x080041c5
 80041b4:	080041cf 	.word	0x080041cf
 80041b8:	080041d9 	.word	0x080041d9
 80041bc:	080041e3 	.word	0x080041e3
 80041c0:	080041ed 	.word	0x080041ed
	{
		case AFS_RAW:
			bmi160_aRes = 1.0f;
 80041c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004204 <get_bmi160_Ares+0x68>)
 80041c6:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80041ca:	601a      	str	r2, [r3, #0]
			break;
 80041cc:	e013      	b.n	80041f6 <get_bmi160_Ares+0x5a>
		case AFS_2G:
			bmi160_aRes = 16384.0f;
 80041ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004204 <get_bmi160_Ares+0x68>)
 80041d0:	f04f 428d 	mov.w	r2, #1182793728	@ 0x46800000
 80041d4:	601a      	str	r2, [r3, #0]
			break;
 80041d6:	e00e      	b.n	80041f6 <get_bmi160_Ares+0x5a>
		case AFS_4G:
			bmi160_aRes = 8192.0f;
 80041d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004204 <get_bmi160_Ares+0x68>)
 80041da:	f04f 428c 	mov.w	r2, #1174405120	@ 0x46000000
 80041de:	601a      	str	r2, [r3, #0]
			break;
 80041e0:	e009      	b.n	80041f6 <get_bmi160_Ares+0x5a>
		case AFS_8G:
			bmi160_aRes = 4096.0f;
 80041e2:	4b08      	ldr	r3, [pc, #32]	@ (8004204 <get_bmi160_Ares+0x68>)
 80041e4:	f04f 428b 	mov.w	r2, #1166016512	@ 0x45800000
 80041e8:	601a      	str	r2, [r3, #0]
			break;
 80041ea:	e004      	b.n	80041f6 <get_bmi160_Ares+0x5a>
		case AFS_16G:
			bmi160_aRes = 2048.0f;
 80041ec:	4b05      	ldr	r3, [pc, #20]	@ (8004204 <get_bmi160_Ares+0x68>)
 80041ee:	f04f 428a 	mov.w	r2, #1157627904	@ 0x45000000
 80041f2:	601a      	str	r2, [r3, #0]
			break;
 80041f4:	bf00      	nop
	}
}
 80041f6:	bf00      	nop
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr
 8004200:	2000000a 	.word	0x2000000a
 8004204:	20000208 	.word	0x20000208

08004208 <get_bmi160_Gres>:

void get_bmi160_Gres()
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
	switch (BMI160_Gscale)
 800420c:	4b18      	ldr	r3, [pc, #96]	@ (8004270 <get_bmi160_Gres+0x68>)
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	2b05      	cmp	r3, #5
 8004212:	d828      	bhi.n	8004266 <get_bmi160_Gres+0x5e>
 8004214:	a201      	add	r2, pc, #4	@ (adr r2, 800421c <get_bmi160_Gres+0x14>)
 8004216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421a:	bf00      	nop
 800421c:	08004235 	.word	0x08004235
 8004220:	0800423f 	.word	0x0800423f
 8004224:	08004247 	.word	0x08004247
 8004228:	0800424f 	.word	0x0800424f
 800422c:	08004257 	.word	0x08004257
 8004230:	0800425f 	.word	0x0800425f
	{
		case GFS_RAW:
			bmi160_aRes = 1.0f;
 8004234:	4b0f      	ldr	r3, [pc, #60]	@ (8004274 <get_bmi160_Gres+0x6c>)
 8004236:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800423a:	601a      	str	r2, [r3, #0]
			break;
 800423c:	e013      	b.n	8004266 <get_bmi160_Gres+0x5e>
		case GFS_125DPS:
			bmi160_gRes = 262.4f;
 800423e:	4b0e      	ldr	r3, [pc, #56]	@ (8004278 <get_bmi160_Gres+0x70>)
 8004240:	4a0e      	ldr	r2, [pc, #56]	@ (800427c <get_bmi160_Gres+0x74>)
 8004242:	601a      	str	r2, [r3, #0]
			break;
 8004244:	e00f      	b.n	8004266 <get_bmi160_Gres+0x5e>
		case GFS_250DPS:
			bmi160_gRes = 131.2f;
 8004246:	4b0c      	ldr	r3, [pc, #48]	@ (8004278 <get_bmi160_Gres+0x70>)
 8004248:	4a0d      	ldr	r2, [pc, #52]	@ (8004280 <get_bmi160_Gres+0x78>)
 800424a:	601a      	str	r2, [r3, #0]
			break;
 800424c:	e00b      	b.n	8004266 <get_bmi160_Gres+0x5e>
		case GFS_500DPS:
			bmi160_gRes = 65.6f;
 800424e:	4b0a      	ldr	r3, [pc, #40]	@ (8004278 <get_bmi160_Gres+0x70>)
 8004250:	4a0c      	ldr	r2, [pc, #48]	@ (8004284 <get_bmi160_Gres+0x7c>)
 8004252:	601a      	str	r2, [r3, #0]
			break;
 8004254:	e007      	b.n	8004266 <get_bmi160_Gres+0x5e>
		case GFS_1000DPS:
			bmi160_gRes = 32.8f;
 8004256:	4b08      	ldr	r3, [pc, #32]	@ (8004278 <get_bmi160_Gres+0x70>)
 8004258:	4a0b      	ldr	r2, [pc, #44]	@ (8004288 <get_bmi160_Gres+0x80>)
 800425a:	601a      	str	r2, [r3, #0]
			break;
 800425c:	e003      	b.n	8004266 <get_bmi160_Gres+0x5e>
		case GFS_2000DPS:
			bmi160_gRes = 16.4f;
 800425e:	4b06      	ldr	r3, [pc, #24]	@ (8004278 <get_bmi160_Gres+0x70>)
 8004260:	4a0a      	ldr	r2, [pc, #40]	@ (800428c <get_bmi160_Gres+0x84>)
 8004262:	601a      	str	r2, [r3, #0]
			break;
 8004264:	bf00      	nop
	}
}
 8004266:	bf00      	nop
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	2000000b 	.word	0x2000000b
 8004274:	20000208 	.word	0x20000208
 8004278:	2000020c 	.word	0x2000020c
 800427c:	43833333 	.word	0x43833333
 8004280:	43033333 	.word	0x43033333
 8004284:	42833333 	.word	0x42833333
 8004288:	42033333 	.word	0x42033333
 800428c:	41833333 	.word	0x41833333

08004290 <SensorAPI_I2Cx_Read>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af02      	add	r7, sp, #8
 8004296:	603a      	str	r2, [r7, #0]
 8004298:	461a      	mov	r2, r3
 800429a:	4603      	mov	r3, r0
 800429c:	71fb      	strb	r3, [r7, #7]
 800429e:	460b      	mov	r3, r1
 80042a0:	71bb      	strb	r3, [r7, #6]
 80042a2:	4613      	mov	r3, r2
 80042a4:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, &reg_addr, 1, I2CTIMEOUT);
 80042a6:	1dba      	adds	r2, r7, #6
 80042a8:	2364      	movs	r3, #100	@ 0x64
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	2301      	movs	r3, #1
 80042ae:	21d2      	movs	r1, #210	@ 0xd2
 80042b0:	4807      	ldr	r0, [pc, #28]	@ (80042d0 <SensorAPI_I2Cx_Read+0x40>)
 80042b2:	f003 f995 	bl	80075e0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&I2C_HANDLE, BMI160_ADDR, data, len, I2CTIMEOUT);
 80042b6:	88bb      	ldrh	r3, [r7, #4]
 80042b8:	2264      	movs	r2, #100	@ 0x64
 80042ba:	9200      	str	r2, [sp, #0]
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	21d2      	movs	r1, #210	@ 0xd2
 80042c0:	4803      	ldr	r0, [pc, #12]	@ (80042d0 <SensorAPI_I2Cx_Read+0x40>)
 80042c2:	f003 faa5 	bl	8007810 <HAL_I2C_Master_Receive>
	return 0;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3708      	adds	r7, #8
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	20000500 	.word	0x20000500

080042d4 <SensorAPI_I2Cx_Write>:
* Input          : I2C2 device_address, register address, data, data lenght
* Output         : None
* Return         : None
*******************************************************************************/
int8_t SensorAPI_I2Cx_Write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af02      	add	r7, sp, #8
 80042da:	603a      	str	r2, [r7, #0]
 80042dc:	461a      	mov	r2, r3
 80042de:	4603      	mov	r3, r0
 80042e0:	71fb      	strb	r3, [r7, #7]
 80042e2:	460b      	mov	r3, r1
 80042e4:	71bb      	strb	r3, [r7, #6]
 80042e6:	4613      	mov	r3, r2
 80042e8:	80bb      	strh	r3, [r7, #4]
	GTXBuffer[0] = reg_addr;
 80042ea:	4a0c      	ldr	r2, [pc, #48]	@ (800431c <SensorAPI_I2Cx_Write+0x48>)
 80042ec:	79bb      	ldrb	r3, [r7, #6]
 80042ee:	7013      	strb	r3, [r2, #0]
	memcpy(&GTXBuffer[1], data, len);
 80042f0:	88bb      	ldrh	r3, [r7, #4]
 80042f2:	461a      	mov	r2, r3
 80042f4:	6839      	ldr	r1, [r7, #0]
 80042f6:	480a      	ldr	r0, [pc, #40]	@ (8004320 <SensorAPI_I2Cx_Write+0x4c>)
 80042f8:	f00e faf9 	bl	80128ee <memcpy>

	HAL_I2C_Master_Transmit(&I2C_HANDLE, BMI160_ADDR, GTXBuffer, len+1, I2CTIMEOUT);
 80042fc:	88bb      	ldrh	r3, [r7, #4]
 80042fe:	3301      	adds	r3, #1
 8004300:	b29b      	uxth	r3, r3
 8004302:	2264      	movs	r2, #100	@ 0x64
 8004304:	9200      	str	r2, [sp, #0]
 8004306:	4a05      	ldr	r2, [pc, #20]	@ (800431c <SensorAPI_I2Cx_Write+0x48>)
 8004308:	21d2      	movs	r1, #210	@ 0xd2
 800430a:	4806      	ldr	r0, [pc, #24]	@ (8004324 <SensorAPI_I2Cx_Write+0x50>)
 800430c:	f003 f968 	bl	80075e0 <HAL_I2C_Master_Transmit>
	return 0;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	20000210 	.word	0x20000210
 8004320:	20000211 	.word	0x20000211
 8004324:	20000500 	.word	0x20000500

08004328 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004330:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004334:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004336:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4313      	orrs	r3, r2
 800433e:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004340:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004344:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4013      	ands	r3, r2
 800434a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800434c:	68fb      	ldr	r3, [r7, #12]
}
 800434e:	bf00      	nop
 8004350:	3714      	adds	r7, #20
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800435a:	b480      	push	{r7}
 800435c:	b085      	sub	sp, #20
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004362:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004366:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004368:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4313      	orrs	r3, r2
 8004370:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004372:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004376:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4013      	ands	r3, r2
 800437c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800437e:	68fb      	ldr	r3, [r7, #12]
}
 8004380:	bf00      	nop
 8004382:	3714      	adds	r7, #20
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim2)
  {
 800438c:	b480      	push	{r7}
 800438e:	b085      	sub	sp, #20
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
	////this updates the X and Y axes of my joystick
	  for(uint8_t i = 0; i<hadc1.Init.NbrOfConversion; i++){
 8004394:	2300      	movs	r3, #0
 8004396:	73fb      	strb	r3, [r7, #15]
 8004398:	e00a      	b.n	80043b0 <HAL_TIM_PeriodElapsedCallback+0x24>
		  mic = (uint16_t) rawValues[0];
 800439a:	4b0c      	ldr	r3, [pc, #48]	@ (80043cc <HAL_TIM_PeriodElapsedCallback+0x40>)
 800439c:	881a      	ldrh	r2, [r3, #0]
 800439e:	4b0c      	ldr	r3, [pc, #48]	@ (80043d0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80043a0:	801a      	strh	r2, [r3, #0]
		  mic2 = mic;
 80043a2:	4b0b      	ldr	r3, [pc, #44]	@ (80043d0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80043a4:	881a      	ldrh	r2, [r3, #0]
 80043a6:	4b0b      	ldr	r3, [pc, #44]	@ (80043d4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80043a8:	801a      	strh	r2, [r3, #0]
	  for(uint8_t i = 0; i<hadc1.Init.NbrOfConversion; i++){
 80043aa:	7bfb      	ldrb	r3, [r7, #15]
 80043ac:	3301      	adds	r3, #1
 80043ae:	73fb      	strb	r3, [r7, #15]
 80043b0:	7bfa      	ldrb	r2, [r7, #15]
 80043b2:	4b09      	ldr	r3, [pc, #36]	@ (80043d8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d3ef      	bcc.n	800439a <HAL_TIM_PeriodElapsedCallback+0xe>
	  }
	  flag = 1;
 80043ba:	4b08      	ldr	r3, [pc, #32]	@ (80043dc <HAL_TIM_PeriodElapsedCallback+0x50>)
 80043bc:	2201      	movs	r2, #1
 80043be:	701a      	strb	r2, [r3, #0]
	  sprintf(msg, "X axis: %hu, Y axis: %hu \r\n", Xaxis, Yaxis);
	  status = CDC_Transmit_FS(msg, strlen((char*)msg));
	  if (status == USBD_OK) {
	  	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port,LED_RED_Pin); // Example: Toggle LED on success
	  }*/
  }
 80043c0:	bf00      	nop
 80043c2:	3714      	adds	r7, #20
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	200005a4 	.word	0x200005a4
 80043d0:	200005a0 	.word	0x200005a0
 80043d4:	200005a2 	.word	0x200005a2
 80043d8:	2000043c 	.word	0x2000043c
 80043dc:	200005a8 	.word	0x200005a8

080043e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80043e0:	b590      	push	{r4, r7, lr}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80043e6:	f000 ff63 	bl	80052b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80043ea:	f000 f909 	bl	8004600 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80043ee:	f000 f96b 	bl	80046c8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80043f2:	f000 faaf 	bl	8004954 <MX_GPIO_Init>
  MX_DMA_Init();
 80043f6:	f000 fa9b 	bl	8004930 <MX_DMA_Init>
  MX_ADC1_Init();
 80043fa:	f000 f997 	bl	800472c <MX_ADC1_Init>
  MX_TIM2_Init();
 80043fe:	f000 fa49 	bl	8004894 <MX_TIM2_Init>
  MX_USB_Device_Init();
 8004402:	f00d fb97 	bl	8011b34 <MX_USB_Device_Init>
  MX_I2C1_Init();
 8004406:	f000 fa05 	bl	8004814 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ////This begins the process of storing our ADC readings into the DMA. The DMA can be thought of a temporary storage location.
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) rawValues, 2);
 800440a:	2202      	movs	r2, #2
 800440c:	496e      	ldr	r1, [pc, #440]	@ (80045c8 <main+0x1e8>)
 800440e:	486f      	ldr	r0, [pc, #444]	@ (80045cc <main+0x1ec>)
 8004410:	f001 fb2c 	bl	8005a6c <HAL_ADC_Start_DMA>
    ////This begins our timer 2
  HAL_TIM_Base_Start_IT(&htim2);
 8004414:	486e      	ldr	r0, [pc, #440]	@ (80045d0 <main+0x1f0>)
 8004416:	f007 ff6d 	bl	800c2f4 <HAL_TIM_Base_Start_IT>

  while (BMI160_init(imu_t) == 1); // waits for IMU to be ready
 800441a:	bf00      	nop
 800441c:	4b6d      	ldr	r3, [pc, #436]	@ (80045d4 <main+0x1f4>)
 800441e:	466c      	mov	r4, sp
 8004420:	f103 0210 	add.w	r2, r3, #16
 8004424:	ca07      	ldmia	r2, {r0, r1, r2}
 8004426:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800442a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800442c:	f7ff fce2 	bl	8003df4 <BMI160_init>
 8004430:	4603      	mov	r3, r0
 8004432:	2b01      	cmp	r3, #1
 8004434:	d0f2      	beq.n	800441c <main+0x3c>

  if (imu_t.INIT_OK_i8 != TRUE){
 8004436:	4b67      	ldr	r3, [pc, #412]	@ (80045d4 <main+0x1f4>)
 8004438:	f993 3018 	ldrsb.w	r3, [r3, #24]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d004      	beq.n	800444a <main+0x6a>
	  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 8004440:	2201      	movs	r2, #1
 8004442:	2102      	movs	r1, #2
 8004444:	4864      	ldr	r0, [pc, #400]	@ (80045d8 <main+0x1f8>)
 8004446:	f002 ffdb 	bl	8007400 <HAL_GPIO_WritePin>
  }

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_BLUE);
 800444a:	2000      	movs	r0, #0
 800444c:	f000 fdd8 	bl	8005000 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 8004450:	2001      	movs	r0, #1
 8004452:	f000 fdd5 	bl	8005000 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8004456:	2002      	movs	r0, #2
 8004458:	f000 fdd2 	bl	8005000 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 800445c:	2101      	movs	r1, #1
 800445e:	2000      	movs	r0, #0
 8004460:	f000 fe08 	bl	8005074 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 8004464:	2101      	movs	r1, #1
 8004466:	2001      	movs	r0, #1
 8004468:	f000 fe04 	bl	8005074 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 800446c:	2101      	movs	r1, #1
 800446e:	2002      	movs	r0, #2
 8004470:	f000 fe00 	bl	8005074 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8004474:	4b59      	ldr	r3, [pc, #356]	@ (80045dc <main+0x1fc>)
 8004476:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800447a:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800447c:	4b57      	ldr	r3, [pc, #348]	@ (80045dc <main+0x1fc>)
 800447e:	2200      	movs	r2, #0
 8004480:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8004482:	4b56      	ldr	r3, [pc, #344]	@ (80045dc <main+0x1fc>)
 8004484:	2200      	movs	r2, #0
 8004486:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8004488:	4b54      	ldr	r3, [pc, #336]	@ (80045dc <main+0x1fc>)
 800448a:	2200      	movs	r2, #0
 800448c:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800448e:	4b53      	ldr	r3, [pc, #332]	@ (80045dc <main+0x1fc>)
 8004490:	2200      	movs	r2, #0
 8004492:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8004494:	4951      	ldr	r1, [pc, #324]	@ (80045dc <main+0x1fc>)
 8004496:	2000      	movs	r0, #0
 8004498:	f000 fe5c 	bl	8005154 <BSP_COM_Init>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <main+0xc6>
  {
    Error_Handler();
 80044a2:	f000 faae 	bl	8004a02 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  /*                                                                          ********************************************************************* */
  while (1)
  {
	  bmi160ReadAccelGyro(&imu_t);
 80044a6:	484b      	ldr	r0, [pc, #300]	@ (80045d4 <main+0x1f4>)
 80044a8:	f7ff fd96 	bl	8003fd8 <bmi160ReadAccelGyro>

	  if (flag==1){
 80044ac:	4b4c      	ldr	r3, [pc, #304]	@ (80045e0 <main+0x200>)
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d1f8      	bne.n	80044a6 <main+0xc6>
		  a_f32[2] = 3;

		  g_f32[0] = 4;
		  g_f32[1] = 5;
		  g_f32[2] = 6;*/
		  a_f32[0] = imu_t.BMI160_Ax_f32*g;
 80044b4:	4b47      	ldr	r3, [pc, #284]	@ (80045d4 <main+0x1f4>)
 80044b6:	ed93 7a00 	vldr	s14, [r3]
 80044ba:	4b4a      	ldr	r3, [pc, #296]	@ (80045e4 <main+0x204>)
 80044bc:	edd3 7a00 	vldr	s15, [r3]
 80044c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044c4:	4b48      	ldr	r3, [pc, #288]	@ (80045e8 <main+0x208>)
 80044c6:	edc3 7a00 	vstr	s15, [r3]
		  a_f32[1] = -imu_t.BMI160_Ay_f32*g;
 80044ca:	4b42      	ldr	r3, [pc, #264]	@ (80045d4 <main+0x1f4>)
 80044cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80044d0:	eeb1 7a67 	vneg.f32	s14, s15
 80044d4:	4b43      	ldr	r3, [pc, #268]	@ (80045e4 <main+0x204>)
 80044d6:	edd3 7a00 	vldr	s15, [r3]
 80044da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044de:	4b42      	ldr	r3, [pc, #264]	@ (80045e8 <main+0x208>)
 80044e0:	edc3 7a01 	vstr	s15, [r3, #4]
		  a_f32[2] = -imu_t.BMI160_Az_f32*g;
 80044e4:	4b3b      	ldr	r3, [pc, #236]	@ (80045d4 <main+0x1f4>)
 80044e6:	edd3 7a02 	vldr	s15, [r3, #8]
 80044ea:	eeb1 7a67 	vneg.f32	s14, s15
 80044ee:	4b3d      	ldr	r3, [pc, #244]	@ (80045e4 <main+0x204>)
 80044f0:	edd3 7a00 	vldr	s15, [r3]
 80044f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044f8:	4b3b      	ldr	r3, [pc, #236]	@ (80045e8 <main+0x208>)
 80044fa:	edc3 7a02 	vstr	s15, [r3, #8]

		  g_f32[0] = imu_t.BMI160_Gx_f32*0.0174533;
 80044fe:	4b35      	ldr	r3, [pc, #212]	@ (80045d4 <main+0x1f4>)
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	4618      	mov	r0, r3
 8004504:	f7fc f91a 	bl	800073c <__aeabi_f2d>
 8004508:	a32d      	add	r3, pc, #180	@ (adr r3, 80045c0 <main+0x1e0>)
 800450a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450e:	f7fb fe87 	bl	8000220 <__aeabi_dmul>
 8004512:	4602      	mov	r2, r0
 8004514:	460b      	mov	r3, r1
 8004516:	4610      	mov	r0, r2
 8004518:	4619      	mov	r1, r3
 800451a:	f7fc f967 	bl	80007ec <__aeabi_d2f>
 800451e:	4603      	mov	r3, r0
 8004520:	4a32      	ldr	r2, [pc, #200]	@ (80045ec <main+0x20c>)
 8004522:	6013      	str	r3, [r2, #0]
		  g_f32[1] = -imu_t.BMI160_Gy_f32*0.0174533;
 8004524:	4b2b      	ldr	r3, [pc, #172]	@ (80045d4 <main+0x1f4>)
 8004526:	edd3 7a04 	vldr	s15, [r3, #16]
 800452a:	eef1 7a67 	vneg.f32	s15, s15
 800452e:	ee17 3a90 	vmov	r3, s15
 8004532:	4618      	mov	r0, r3
 8004534:	f7fc f902 	bl	800073c <__aeabi_f2d>
 8004538:	a321      	add	r3, pc, #132	@ (adr r3, 80045c0 <main+0x1e0>)
 800453a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453e:	f7fb fe6f 	bl	8000220 <__aeabi_dmul>
 8004542:	4602      	mov	r2, r0
 8004544:	460b      	mov	r3, r1
 8004546:	4610      	mov	r0, r2
 8004548:	4619      	mov	r1, r3
 800454a:	f7fc f94f 	bl	80007ec <__aeabi_d2f>
 800454e:	4603      	mov	r3, r0
 8004550:	4a26      	ldr	r2, [pc, #152]	@ (80045ec <main+0x20c>)
 8004552:	6053      	str	r3, [r2, #4]
		  g_f32[2] = -imu_t.BMI160_Gz_f32*0.0174533;
 8004554:	4b1f      	ldr	r3, [pc, #124]	@ (80045d4 <main+0x1f4>)
 8004556:	edd3 7a05 	vldr	s15, [r3, #20]
 800455a:	eef1 7a67 	vneg.f32	s15, s15
 800455e:	ee17 3a90 	vmov	r3, s15
 8004562:	4618      	mov	r0, r3
 8004564:	f7fc f8ea 	bl	800073c <__aeabi_f2d>
 8004568:	a315      	add	r3, pc, #84	@ (adr r3, 80045c0 <main+0x1e0>)
 800456a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456e:	f7fb fe57 	bl	8000220 <__aeabi_dmul>
 8004572:	4602      	mov	r2, r0
 8004574:	460b      	mov	r3, r1
 8004576:	4610      	mov	r0, r2
 8004578:	4619      	mov	r1, r3
 800457a:	f7fc f937 	bl	80007ec <__aeabi_d2f>
 800457e:	4603      	mov	r3, r0
 8004580:	4a1a      	ldr	r2, [pc, #104]	@ (80045ec <main+0x20c>)
 8004582:	6093      	str	r3, [r2, #8]

		  prepare_data_packet_both(g_f32,a_f32,mic,mic2,USB_buffer,&packet_length);
 8004584:	4b1a      	ldr	r3, [pc, #104]	@ (80045f0 <main+0x210>)
 8004586:	881a      	ldrh	r2, [r3, #0]
 8004588:	4b1a      	ldr	r3, [pc, #104]	@ (80045f4 <main+0x214>)
 800458a:	881b      	ldrh	r3, [r3, #0]
 800458c:	491a      	ldr	r1, [pc, #104]	@ (80045f8 <main+0x218>)
 800458e:	9101      	str	r1, [sp, #4]
 8004590:	491a      	ldr	r1, [pc, #104]	@ (80045fc <main+0x21c>)
 8004592:	9100      	str	r1, [sp, #0]
 8004594:	4914      	ldr	r1, [pc, #80]	@ (80045e8 <main+0x208>)
 8004596:	4815      	ldr	r0, [pc, #84]	@ (80045ec <main+0x20c>)
 8004598:	f000 fa08 	bl	80049ac <prepare_data_packet_both>
		  CDC_Transmit_FS(USB_buffer, packet_length);
 800459c:	4b16      	ldr	r3, [pc, #88]	@ (80045f8 <main+0x218>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	4619      	mov	r1, r3
 80045a4:	4815      	ldr	r0, [pc, #84]	@ (80045fc <main+0x21c>)
 80045a6:	f00d fb83 	bl	8011cb0 <CDC_Transmit_FS>
		  HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port,LED_GREEN_Pin);
 80045aa:	2101      	movs	r1, #1
 80045ac:	480a      	ldr	r0, [pc, #40]	@ (80045d8 <main+0x1f8>)
 80045ae:	f002 ff3f 	bl	8007430 <HAL_GPIO_TogglePin>
		  /*sprintf(msg, "X axis: %hu, Y axis: %hu", Xaxis, Yaxis);
		  CDC_Transmit_FS((uint8_t *)msg, strlen(msg));*/

		  flag = 0;
 80045b2:	4b0b      	ldr	r3, [pc, #44]	@ (80045e0 <main+0x200>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	701a      	strb	r2, [r3, #0]
	  bmi160ReadAccelGyro(&imu_t);
 80045b8:	e775      	b.n	80044a6 <main+0xc6>
 80045ba:	bf00      	nop
 80045bc:	f3af 8000 	nop.w
 80045c0:	22d4405f 	.word	0x22d4405f
 80045c4:	3f91df47 	.word	0x3f91df47
 80045c8:	200005a4 	.word	0x200005a4
 80045cc:	2000043c 	.word	0x2000043c
 80045d0:	20000554 	.word	0x20000554
 80045d4:	20000410 	.word	0x20000410
 80045d8:	48000400 	.word	0x48000400
 80045dc:	2000042c 	.word	0x2000042c
 80045e0:	200005a8 	.word	0x200005a8
 80045e4:	2000000c 	.word	0x2000000c
 80045e8:	200005dc 	.word	0x200005dc
 80045ec:	200005d0 	.word	0x200005d0
 80045f0:	200005a0 	.word	0x200005a0
 80045f4:	200005a2 	.word	0x200005a2
 80045f8:	200005cc 	.word	0x200005cc
 80045fc:	200005ac 	.word	0x200005ac

08004600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b09a      	sub	sp, #104	@ 0x68
 8004604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004606:	f107 0320 	add.w	r3, r7, #32
 800460a:	2248      	movs	r2, #72	@ 0x48
 800460c:	2100      	movs	r1, #0
 800460e:	4618      	mov	r0, r3
 8004610:	f00e f8f1 	bl	80127f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004614:	1d3b      	adds	r3, r7, #4
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	605a      	str	r2, [r3, #4]
 800461c:	609a      	str	r2, [r3, #8]
 800461e:	60da      	str	r2, [r3, #12]
 8004620:	611a      	str	r2, [r3, #16]
 8004622:	615a      	str	r2, [r3, #20]
 8004624:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004626:	4b27      	ldr	r3, [pc, #156]	@ (80046c4 <SystemClock_Config+0xc4>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800462e:	4a25      	ldr	r2, [pc, #148]	@ (80046c4 <SystemClock_Config+0xc4>)
 8004630:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004634:	6013      	str	r3, [r2, #0]
 8004636:	4b23      	ldr	r3, [pc, #140]	@ (80046c4 <SystemClock_Config+0xc4>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800463e:	603b      	str	r3, [r7, #0]
 8004640:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8004642:	2303      	movs	r3, #3
 8004644:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004646:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800464a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800464c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004650:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004652:	2340      	movs	r3, #64	@ 0x40
 8004654:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004656:	2302      	movs	r3, #2
 8004658:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800465a:	2303      	movs	r3, #3
 800465c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800465e:	2310      	movs	r3, #16
 8004660:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 8;
 8004662:	2308      	movs	r3, #8
 8004664:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004666:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800466a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800466c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004670:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004672:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004676:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004678:	f107 0320 	add.w	r3, r7, #32
 800467c:	4618      	mov	r0, r3
 800467e:	f006 fba9 	bl	800add4 <HAL_RCC_OscConfig>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d001      	beq.n	800468c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8004688:	f000 f9bb 	bl	8004a02 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800468c:	236f      	movs	r3, #111	@ 0x6f
 800468e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004690:	2303      	movs	r3, #3
 8004692:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004694:	2300      	movs	r3, #0
 8004696:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004698:	2300      	movs	r3, #0
 800469a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800469c:	2300      	movs	r3, #0
 800469e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 80046a0:	2380      	movs	r3, #128	@ 0x80
 80046a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80046a4:	2300      	movs	r3, #0
 80046a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80046a8:	1d3b      	adds	r3, r7, #4
 80046aa:	2103      	movs	r1, #3
 80046ac:	4618      	mov	r0, r3
 80046ae:	f006 ff05 	bl	800b4bc <HAL_RCC_ClockConfig>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d001      	beq.n	80046bc <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80046b8:	f000 f9a3 	bl	8004a02 <Error_Handler>
  }
}
 80046bc:	bf00      	nop
 80046be:	3768      	adds	r7, #104	@ 0x68
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	58000400 	.word	0x58000400

080046c8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b094      	sub	sp, #80	@ 0x50
 80046cc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80046ce:	463b      	mov	r3, r7
 80046d0:	2250      	movs	r2, #80	@ 0x50
 80046d2:	2100      	movs	r1, #0
 80046d4:	4618      	mov	r0, r3
 80046d6:	f00e f88e 	bl	80127f6 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_USB
 80046da:	f44f 5314 	mov.w	r3, #9472	@ 0x2500
 80046de:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC;
  PeriphClkInitStruct.PLLSAI1.PLLN = 6;
 80046e0:	2306      	movs	r3, #6
 80046e2:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80046e4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80046e8:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80046ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80046ee:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80046f0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80046f4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_USBCLK|RCC_PLLSAI1_ADCCLK;
 80046f6:	f04f 5388 	mov.w	r3, #285212672	@ 0x11000000
 80046fa:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80046fc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004700:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8004702:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004706:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8004708:	2300      	movs	r3, #0
 800470a:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 800470c:	2300      	movs	r3, #0
 800470e:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004710:	463b      	mov	r3, r7
 8004712:	4618      	mov	r0, r3
 8004714:	f007 fb0f 	bl	800bd36 <HAL_RCCEx_PeriphCLKConfig>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 800471e:	f000 f970 	bl	8004a02 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8004722:	bf00      	nop
 8004724:	3750      	adds	r7, #80	@ 0x50
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
	...

0800472c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004732:	463b      	mov	r3, r7
 8004734:	2200      	movs	r2, #0
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	605a      	str	r2, [r3, #4]
 800473a:	609a      	str	r2, [r3, #8]
 800473c:	60da      	str	r2, [r3, #12]
 800473e:	611a      	str	r2, [r3, #16]
 8004740:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8004742:	4b30      	ldr	r3, [pc, #192]	@ (8004804 <MX_ADC1_Init+0xd8>)
 8004744:	4a30      	ldr	r2, [pc, #192]	@ (8004808 <MX_ADC1_Init+0xdc>)
 8004746:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8004748:	4b2e      	ldr	r3, [pc, #184]	@ (8004804 <MX_ADC1_Init+0xd8>)
 800474a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800474e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004750:	4b2c      	ldr	r3, [pc, #176]	@ (8004804 <MX_ADC1_Init+0xd8>)
 8004752:	2200      	movs	r2, #0
 8004754:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004756:	4b2b      	ldr	r3, [pc, #172]	@ (8004804 <MX_ADC1_Init+0xd8>)
 8004758:	2200      	movs	r2, #0
 800475a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800475c:	4b29      	ldr	r3, [pc, #164]	@ (8004804 <MX_ADC1_Init+0xd8>)
 800475e:	2201      	movs	r2, #1
 8004760:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004762:	4b28      	ldr	r3, [pc, #160]	@ (8004804 <MX_ADC1_Init+0xd8>)
 8004764:	2204      	movs	r2, #4
 8004766:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004768:	4b26      	ldr	r3, [pc, #152]	@ (8004804 <MX_ADC1_Init+0xd8>)
 800476a:	2200      	movs	r2, #0
 800476c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800476e:	4b25      	ldr	r3, [pc, #148]	@ (8004804 <MX_ADC1_Init+0xd8>)
 8004770:	2201      	movs	r2, #1
 8004772:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8004774:	4b23      	ldr	r3, [pc, #140]	@ (8004804 <MX_ADC1_Init+0xd8>)
 8004776:	2202      	movs	r2, #2
 8004778:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800477a:	4b22      	ldr	r3, [pc, #136]	@ (8004804 <MX_ADC1_Init+0xd8>)
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004782:	4b20      	ldr	r3, [pc, #128]	@ (8004804 <MX_ADC1_Init+0xd8>)
 8004784:	2200      	movs	r2, #0
 8004786:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004788:	4b1e      	ldr	r3, [pc, #120]	@ (8004804 <MX_ADC1_Init+0xd8>)
 800478a:	2200      	movs	r2, #0
 800478c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800478e:	4b1d      	ldr	r3, [pc, #116]	@ (8004804 <MX_ADC1_Init+0xd8>)
 8004790:	2201      	movs	r2, #1
 8004792:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004796:	4b1b      	ldr	r3, [pc, #108]	@ (8004804 <MX_ADC1_Init+0xd8>)
 8004798:	2200      	movs	r2, #0
 800479a:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800479c:	4b19      	ldr	r3, [pc, #100]	@ (8004804 <MX_ADC1_Init+0xd8>)
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80047a4:	4817      	ldr	r0, [pc, #92]	@ (8004804 <MX_ADC1_Init+0xd8>)
 80047a6:	f001 f815 	bl	80057d4 <HAL_ADC_Init>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d001      	beq.n	80047b4 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 80047b0:	f000 f927 	bl	8004a02 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80047b4:	4b15      	ldr	r3, [pc, #84]	@ (800480c <MX_ADC1_Init+0xe0>)
 80047b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80047b8:	2306      	movs	r3, #6
 80047ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80047bc:	2306      	movs	r3, #6
 80047be:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80047c0:	237f      	movs	r3, #127	@ 0x7f
 80047c2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80047c4:	2304      	movs	r3, #4
 80047c6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80047c8:	2300      	movs	r3, #0
 80047ca:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80047cc:	463b      	mov	r3, r7
 80047ce:	4619      	mov	r1, r3
 80047d0:	480c      	ldr	r0, [pc, #48]	@ (8004804 <MX_ADC1_Init+0xd8>)
 80047d2:	f001 fbad 	bl	8005f30 <HAL_ADC_ConfigChannel>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80047dc:	f000 f911 	bl	8004a02 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80047e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004810 <MX_ADC1_Init+0xe4>)
 80047e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80047e4:	230c      	movs	r3, #12
 80047e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80047e8:	463b      	mov	r3, r7
 80047ea:	4619      	mov	r1, r3
 80047ec:	4805      	ldr	r0, [pc, #20]	@ (8004804 <MX_ADC1_Init+0xd8>)
 80047ee:	f001 fb9f 	bl	8005f30 <HAL_ADC_ConfigChannel>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d001      	beq.n	80047fc <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 80047f8:	f000 f903 	bl	8004a02 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80047fc:	bf00      	nop
 80047fe:	3718      	adds	r7, #24
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	2000043c 	.word	0x2000043c
 8004808:	50040000 	.word	0x50040000
 800480c:	04300002 	.word	0x04300002
 8004810:	08600004 	.word	0x08600004

08004814 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004818:	4b1b      	ldr	r3, [pc, #108]	@ (8004888 <MX_I2C1_Init+0x74>)
 800481a:	4a1c      	ldr	r2, [pc, #112]	@ (800488c <MX_I2C1_Init+0x78>)
 800481c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10B17DB5;
 800481e:	4b1a      	ldr	r3, [pc, #104]	@ (8004888 <MX_I2C1_Init+0x74>)
 8004820:	4a1b      	ldr	r2, [pc, #108]	@ (8004890 <MX_I2C1_Init+0x7c>)
 8004822:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004824:	4b18      	ldr	r3, [pc, #96]	@ (8004888 <MX_I2C1_Init+0x74>)
 8004826:	2200      	movs	r2, #0
 8004828:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800482a:	4b17      	ldr	r3, [pc, #92]	@ (8004888 <MX_I2C1_Init+0x74>)
 800482c:	2201      	movs	r2, #1
 800482e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004830:	4b15      	ldr	r3, [pc, #84]	@ (8004888 <MX_I2C1_Init+0x74>)
 8004832:	2200      	movs	r2, #0
 8004834:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004836:	4b14      	ldr	r3, [pc, #80]	@ (8004888 <MX_I2C1_Init+0x74>)
 8004838:	2200      	movs	r2, #0
 800483a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800483c:	4b12      	ldr	r3, [pc, #72]	@ (8004888 <MX_I2C1_Init+0x74>)
 800483e:	2200      	movs	r2, #0
 8004840:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004842:	4b11      	ldr	r3, [pc, #68]	@ (8004888 <MX_I2C1_Init+0x74>)
 8004844:	2200      	movs	r2, #0
 8004846:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004848:	4b0f      	ldr	r3, [pc, #60]	@ (8004888 <MX_I2C1_Init+0x74>)
 800484a:	2200      	movs	r2, #0
 800484c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800484e:	480e      	ldr	r0, [pc, #56]	@ (8004888 <MX_I2C1_Init+0x74>)
 8004850:	f002 fe2b 	bl	80074aa <HAL_I2C_Init>
 8004854:	4603      	mov	r3, r0
 8004856:	2b00      	cmp	r3, #0
 8004858:	d001      	beq.n	800485e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800485a:	f000 f8d2 	bl	8004a02 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800485e:	2100      	movs	r1, #0
 8004860:	4809      	ldr	r0, [pc, #36]	@ (8004888 <MX_I2C1_Init+0x74>)
 8004862:	f004 f949 	bl	8008af8 <HAL_I2CEx_ConfigAnalogFilter>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d001      	beq.n	8004870 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800486c:	f000 f8c9 	bl	8004a02 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004870:	2100      	movs	r1, #0
 8004872:	4805      	ldr	r0, [pc, #20]	@ (8004888 <MX_I2C1_Init+0x74>)
 8004874:	f004 f98b 	bl	8008b8e <HAL_I2CEx_ConfigDigitalFilter>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800487e:	f000 f8c0 	bl	8004a02 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004882:	bf00      	nop
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	20000500 	.word	0x20000500
 800488c:	40005400 	.word	0x40005400
 8004890:	10b17db5 	.word	0x10b17db5

08004894 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b088      	sub	sp, #32
 8004898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800489a:	f107 0310 	add.w	r3, r7, #16
 800489e:	2200      	movs	r2, #0
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	605a      	str	r2, [r3, #4]
 80048a4:	609a      	str	r2, [r3, #8]
 80048a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048a8:	1d3b      	adds	r3, r7, #4
 80048aa:	2200      	movs	r2, #0
 80048ac:	601a      	str	r2, [r3, #0]
 80048ae:	605a      	str	r2, [r3, #4]
 80048b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80048b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004928 <MX_TIM2_Init+0x94>)
 80048b4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80048b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 80048ba:	4b1b      	ldr	r3, [pc, #108]	@ (8004928 <MX_TIM2_Init+0x94>)
 80048bc:	220a      	movs	r2, #10
 80048be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048c0:	4b19      	ldr	r3, [pc, #100]	@ (8004928 <MX_TIM2_Init+0x94>)
 80048c2:	2200      	movs	r2, #0
 80048c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 320000-1;
 80048c6:	4b18      	ldr	r3, [pc, #96]	@ (8004928 <MX_TIM2_Init+0x94>)
 80048c8:	4a18      	ldr	r2, [pc, #96]	@ (800492c <MX_TIM2_Init+0x98>)
 80048ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048cc:	4b16      	ldr	r3, [pc, #88]	@ (8004928 <MX_TIM2_Init+0x94>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80048d2:	4b15      	ldr	r3, [pc, #84]	@ (8004928 <MX_TIM2_Init+0x94>)
 80048d4:	2280      	movs	r2, #128	@ 0x80
 80048d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80048d8:	4813      	ldr	r0, [pc, #76]	@ (8004928 <MX_TIM2_Init+0x94>)
 80048da:	f007 fcb3 	bl	800c244 <HAL_TIM_Base_Init>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d001      	beq.n	80048e8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80048e4:	f000 f88d 	bl	8004a02 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80048e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80048ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80048ee:	f107 0310 	add.w	r3, r7, #16
 80048f2:	4619      	mov	r1, r3
 80048f4:	480c      	ldr	r0, [pc, #48]	@ (8004928 <MX_TIM2_Init+0x94>)
 80048f6:	f007 fe52 	bl	800c59e <HAL_TIM_ConfigClockSource>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8004900:	f000 f87f 	bl	8004a02 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004904:	2320      	movs	r3, #32
 8004906:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004908:	2300      	movs	r3, #0
 800490a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800490c:	1d3b      	adds	r3, r7, #4
 800490e:	4619      	mov	r1, r3
 8004910:	4805      	ldr	r0, [pc, #20]	@ (8004928 <MX_TIM2_Init+0x94>)
 8004912:	f008 f841 	bl	800c998 <HAL_TIMEx_MasterConfigSynchronization>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d001      	beq.n	8004920 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800491c:	f000 f871 	bl	8004a02 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004920:	bf00      	nop
 8004922:	3720      	adds	r7, #32
 8004924:	46bd      	mov	sp, r7
 8004926:	bd80      	pop	{r7, pc}
 8004928:	20000554 	.word	0x20000554
 800492c:	0004e1ff 	.word	0x0004e1ff

08004930 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004934:	2004      	movs	r0, #4
 8004936:	f7ff fcf7 	bl	8004328 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800493a:	2001      	movs	r0, #1
 800493c:	f7ff fcf4 	bl	8004328 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004940:	2200      	movs	r2, #0
 8004942:	2100      	movs	r1, #0
 8004944:	200b      	movs	r0, #11
 8004946:	f002 f8d4 	bl	8006af2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800494a:	200b      	movs	r0, #11
 800494c:	f002 f8eb 	bl	8006b26 <HAL_NVIC_EnableIRQ>

}
 8004950:	bf00      	nop
 8004952:	bd80      	pop	{r7, pc}

08004954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800495a:	1d3b      	adds	r3, r7, #4
 800495c:	2200      	movs	r2, #0
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	605a      	str	r2, [r3, #4]
 8004962:	609a      	str	r2, [r3, #8]
 8004964:	60da      	str	r2, [r3, #12]
 8004966:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004968:	2004      	movs	r0, #4
 800496a:	f7ff fcf6 	bl	800435a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800496e:	2002      	movs	r0, #2
 8004970:	f7ff fcf3 	bl	800435a <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004974:	2001      	movs	r0, #1
 8004976:	f7ff fcf0 	bl	800435a <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800497a:	2200      	movs	r2, #0
 800497c:	2103      	movs	r1, #3
 800497e:	480a      	ldr	r0, [pc, #40]	@ (80049a8 <MX_GPIO_Init+0x54>)
 8004980:	f002 fd3e 	bl	8007400 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8004984:	2303      	movs	r3, #3
 8004986:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004988:	2301      	movs	r3, #1
 800498a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800498c:	2300      	movs	r3, #0
 800498e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004990:	2300      	movs	r3, #0
 8004992:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004994:	1d3b      	adds	r3, r7, #4
 8004996:	4619      	mov	r1, r3
 8004998:	4803      	ldr	r0, [pc, #12]	@ (80049a8 <MX_GPIO_Init+0x54>)
 800499a:	f002 fbc1 	bl	8007120 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800499e:	bf00      	nop
 80049a0:	3718      	adds	r7, #24
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	48000400 	.word	0x48000400

080049ac <prepare_data_packet_both>:

/* USER CODE BEGIN 4 */
void prepare_data_packet_both(float g_f32[3], float a_f32[3], uint16_t var1, uint16_t var2, uint8_t *buffer, size_t *length) {
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b084      	sub	sp, #16
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	60b9      	str	r1, [r7, #8]
 80049b6:	4611      	mov	r1, r2
 80049b8:	461a      	mov	r2, r3
 80049ba:	460b      	mov	r3, r1
 80049bc:	80fb      	strh	r3, [r7, #6]
 80049be:	4613      	mov	r3, r2
 80049c0:	80bb      	strh	r3, [r7, #4]
    // Define the start byte
    buffer[0] = (uint8_t)-128;
 80049c2:	69bb      	ldr	r3, [r7, #24]
 80049c4:	2280      	movs	r2, #128	@ 0x80
 80049c6:	701a      	strb	r2, [r3, #0]

    memcpy(&buffer[1], g_f32, sizeof(float) * 3);
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	3301      	adds	r3, #1
 80049cc:	220c      	movs	r2, #12
 80049ce:	68f9      	ldr	r1, [r7, #12]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f00d ff8c 	bl	80128ee <memcpy>
    memcpy(&buffer[1 + sizeof(float) * 3], a_f32, sizeof(float) * 3);
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	330d      	adds	r3, #13
 80049da:	220c      	movs	r2, #12
 80049dc:	68b9      	ldr	r1, [r7, #8]
 80049de:	4618      	mov	r0, r3
 80049e0:	f00d ff85 	bl	80128ee <memcpy>
    memcpy(&buffer[1 + 2 * sizeof(float) * 3], &var1, sizeof(uint16_t));
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	3319      	adds	r3, #25
 80049e8:	88fa      	ldrh	r2, [r7, #6]
 80049ea:	801a      	strh	r2, [r3, #0]
    memcpy(&buffer[1 + 2 * sizeof(float) * 3 + sizeof(uint16_t)], &var2, sizeof(uint16_t));
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	331b      	adds	r3, #27
 80049f0:	88ba      	ldrh	r2, [r7, #4]
 80049f2:	801a      	strh	r2, [r3, #0]
    // Copy the int8_t variables into the buffer
    /*buffer[1 + 2 * sizeof(float) * 3 + sizeof(uint16_t)] = (uint16_t)var1;
    buffer[1 + 2 * sizeof(float) * 3 + sizeof(uint16_t)] = (uint16_t)var2;*/

    // Set the total length of the packet
    *length = 1 + 2 * sizeof(float) * 3 + 2*sizeof(uint16_t);
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	221d      	movs	r2, #29
 80049f8:	601a      	str	r2, [r3, #0]
}
 80049fa:	bf00      	nop
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a02:	b480      	push	{r7}
 8004a04:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a06:	b672      	cpsid	i
}
 8004a08:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004a0a:	bf00      	nop
 8004a0c:	e7fd      	b.n	8004a0a <Error_Handler+0x8>

08004a0e <LL_AHB2_GRP1_EnableClock>:
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b085      	sub	sp, #20
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004a16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004a1c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004a26:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004a32:	68fb      	ldr	r3, [r7, #12]
}
 8004a34:	bf00      	nop
 8004a36:	3714      	adds	r7, #20
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8004a48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a4c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004a4e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8004a58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004a5c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4013      	ands	r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004a64:	68fb      	ldr	r3, [r7, #12]
}
 8004a66:	bf00      	nop
 8004a68:	3714      	adds	r7, #20
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a72:	b480      	push	{r7}
 8004a74:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a76:	bf00      	nop
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b088      	sub	sp, #32
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a88:	f107 030c 	add.w	r3, r7, #12
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	601a      	str	r2, [r3, #0]
 8004a90:	605a      	str	r2, [r3, #4]
 8004a92:	609a      	str	r2, [r3, #8]
 8004a94:	60da      	str	r2, [r3, #12]
 8004a96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a26      	ldr	r2, [pc, #152]	@ (8004b38 <HAL_ADC_MspInit+0xb8>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d145      	bne.n	8004b2e <HAL_ADC_MspInit+0xae>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004aa2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8004aa6:	f7ff ffb2 	bl	8004a0e <LL_AHB2_GRP1_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004aaa:	2004      	movs	r0, #4
 8004aac:	f7ff ffaf 	bl	8004a0e <LL_AHB2_GRP1_EnableClock>
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004abc:	f107 030c 	add.w	r3, r7, #12
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	481e      	ldr	r0, [pc, #120]	@ (8004b3c <HAL_ADC_MspInit+0xbc>)
 8004ac4:	f002 fb2c 	bl	8007120 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8004b40 <HAL_ADC_MspInit+0xc0>)
 8004aca:	4a1e      	ldr	r2, [pc, #120]	@ (8004b44 <HAL_ADC_MspInit+0xc4>)
 8004acc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004ace:	4b1c      	ldr	r3, [pc, #112]	@ (8004b40 <HAL_ADC_MspInit+0xc0>)
 8004ad0:	2205      	movs	r2, #5
 8004ad2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8004b40 <HAL_ADC_MspInit+0xc0>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ada:	4b19      	ldr	r3, [pc, #100]	@ (8004b40 <HAL_ADC_MspInit+0xc0>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004ae0:	4b17      	ldr	r3, [pc, #92]	@ (8004b40 <HAL_ADC_MspInit+0xc0>)
 8004ae2:	2280      	movs	r2, #128	@ 0x80
 8004ae4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004ae6:	4b16      	ldr	r3, [pc, #88]	@ (8004b40 <HAL_ADC_MspInit+0xc0>)
 8004ae8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004aec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004aee:	4b14      	ldr	r3, [pc, #80]	@ (8004b40 <HAL_ADC_MspInit+0xc0>)
 8004af0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004af4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004af6:	4b12      	ldr	r3, [pc, #72]	@ (8004b40 <HAL_ADC_MspInit+0xc0>)
 8004af8:	2220      	movs	r2, #32
 8004afa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004afc:	4b10      	ldr	r3, [pc, #64]	@ (8004b40 <HAL_ADC_MspInit+0xc0>)
 8004afe:	2200      	movs	r2, #0
 8004b00:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004b02:	480f      	ldr	r0, [pc, #60]	@ (8004b40 <HAL_ADC_MspInit+0xc0>)
 8004b04:	f002 f82a 	bl	8006b5c <HAL_DMA_Init>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <HAL_ADC_MspInit+0x92>
    {
      Error_Handler();
 8004b0e:	f7ff ff78 	bl	8004a02 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	4a0a      	ldr	r2, [pc, #40]	@ (8004b40 <HAL_ADC_MspInit+0xc0>)
 8004b16:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004b18:	4a09      	ldr	r2, [pc, #36]	@ (8004b40 <HAL_ADC_MspInit+0xc0>)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 2, 0);
 8004b1e:	2200      	movs	r2, #0
 8004b20:	2102      	movs	r1, #2
 8004b22:	2012      	movs	r0, #18
 8004b24:	f001 ffe5 	bl	8006af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8004b28:	2012      	movs	r0, #18
 8004b2a:	f001 fffc 	bl	8006b26 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8004b2e:	bf00      	nop
 8004b30:	3720      	adds	r7, #32
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	50040000 	.word	0x50040000
 8004b3c:	48000800 	.word	0x48000800
 8004b40:	200004a0 	.word	0x200004a0
 8004b44:	40020008 	.word	0x40020008

08004b48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b09c      	sub	sp, #112	@ 0x70
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b50:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004b54:	2200      	movs	r2, #0
 8004b56:	601a      	str	r2, [r3, #0]
 8004b58:	605a      	str	r2, [r3, #4]
 8004b5a:	609a      	str	r2, [r3, #8]
 8004b5c:	60da      	str	r2, [r3, #12]
 8004b5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004b60:	f107 030c 	add.w	r3, r7, #12
 8004b64:	2250      	movs	r2, #80	@ 0x50
 8004b66:	2100      	movs	r1, #0
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f00d fe44 	bl	80127f6 <memset>
  if(hi2c->Instance==I2C1)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a1f      	ldr	r2, [pc, #124]	@ (8004bf0 <HAL_I2C_MspInit+0xa8>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d136      	bne.n	8004be6 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004b78:	2304      	movs	r3, #4
 8004b7a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004b7c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8004b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004b82:	f107 030c 	add.w	r3, r7, #12
 8004b86:	4618      	mov	r0, r3
 8004b88:	f007 f8d5 	bl	800bd36 <HAL_RCCEx_PeriphCLKConfig>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8004b92:	f7ff ff36 	bl	8004a02 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b96:	2002      	movs	r0, #2
 8004b98:	f7ff ff39 	bl	8004a0e <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004b9c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004ba0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ba2:	2312      	movs	r3, #18
 8004ba4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004baa:	2300      	movs	r3, #0
 8004bac:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004bae:	2304      	movs	r3, #4
 8004bb0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bb2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	480e      	ldr	r0, [pc, #56]	@ (8004bf4 <HAL_I2C_MspInit+0xac>)
 8004bba:	f002 fab1 	bl	8007120 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004bbe:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8004bc2:	f7ff ff3d 	bl	8004a40 <LL_APB1_GRP1_EnableClock>
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	2100      	movs	r1, #0
 8004bca:	201e      	movs	r0, #30
 8004bcc:	f001 ff91 	bl	8006af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004bd0:	201e      	movs	r0, #30
 8004bd2:	f001 ffa8 	bl	8006b26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	2100      	movs	r1, #0
 8004bda:	201f      	movs	r0, #31
 8004bdc:	f001 ff89 	bl	8006af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004be0:	201f      	movs	r0, #31
 8004be2:	f001 ffa0 	bl	8006b26 <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8004be6:	bf00      	nop
 8004be8:	3770      	adds	r7, #112	@ 0x70
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	40005400 	.word	0x40005400
 8004bf4:	48000400 	.word	0x48000400

08004bf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c08:	d10a      	bne.n	8004c20 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004c0a:	2001      	movs	r0, #1
 8004c0c:	f7ff ff18 	bl	8004a40 <LL_APB1_GRP1_EnableClock>
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004c10:	2200      	movs	r2, #0
 8004c12:	2100      	movs	r1, #0
 8004c14:	201c      	movs	r0, #28
 8004c16:	f001 ff6c 	bl	8006af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004c1a:	201c      	movs	r0, #28
 8004c1c:	f001 ff83 	bl	8006b26 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8004c20:	bf00      	nop
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004c2c:	bf00      	nop
 8004c2e:	e7fd      	b.n	8004c2c <NMI_Handler+0x4>

08004c30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c30:	b480      	push	{r7}
 8004c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c34:	bf00      	nop
 8004c36:	e7fd      	b.n	8004c34 <HardFault_Handler+0x4>

08004c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c3c:	bf00      	nop
 8004c3e:	e7fd      	b.n	8004c3c <MemManage_Handler+0x4>

08004c40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c44:	bf00      	nop
 8004c46:	e7fd      	b.n	8004c44 <BusFault_Handler+0x4>

08004c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c4c:	bf00      	nop
 8004c4e:	e7fd      	b.n	8004c4c <UsageFault_Handler+0x4>

08004c50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004c50:	b480      	push	{r7}
 8004c52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c54:	bf00      	nop
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c62:	bf00      	nop
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c70:	bf00      	nop
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr

08004c7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c7e:	f000 fb71 	bl	8005364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c82:	bf00      	nop
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 8004c8a:	2001      	movs	r0, #1
 8004c8c:	f002 fbea 	bl	8007464 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004c90:	bf00      	nop
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 8004c98:	2002      	movs	r0, #2
 8004c9a:	f002 fbe3 	bl	8007464 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004c9e:	bf00      	nop
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 8004ca6:	2010      	movs	r0, #16
 8004ca8:	f002 fbdc 	bl	8007464 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8004cac:	bf00      	nop
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004cb4:	4802      	ldr	r0, [pc, #8]	@ (8004cc0 <DMA1_Channel1_IRQHandler+0x10>)
 8004cb6:	f002 f8d3 	bl	8006e60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004cba:	bf00      	nop
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	200004a0 	.word	0x200004a0

08004cc4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004cc8:	4802      	ldr	r0, [pc, #8]	@ (8004cd4 <ADC1_IRQHandler+0x10>)
 8004cca:	f000 ff53 	bl	8005b74 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8004cce:	bf00      	nop
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	2000043c 	.word	0x2000043c

08004cd8 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt.
  */
void USB_HP_IRQHandler(void)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004cdc:	4802      	ldr	r0, [pc, #8]	@ (8004ce8 <USB_HP_IRQHandler+0x10>)
 8004cde:	f004 f892 	bl	8008e06 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 8004ce2:	bf00      	nop
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	20001b68 	.word	0x20001b68

08004cec <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt, USB wake-up interrupt through EXTI line 28.
  */
void USB_LP_IRQHandler(void)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004cf0:	4802      	ldr	r0, [pc, #8]	@ (8004cfc <USB_LP_IRQHandler+0x10>)
 8004cf2:	f004 f888 	bl	8008e06 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8004cf6:	bf00      	nop
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	20001b68 	.word	0x20001b68

08004d00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004d04:	4802      	ldr	r0, [pc, #8]	@ (8004d10 <TIM2_IRQHandler+0x10>)
 8004d06:	f007 fb43 	bl	800c390 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004d0a:	bf00      	nop
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	20000554 	.word	0x20000554

08004d14 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004d18:	4802      	ldr	r0, [pc, #8]	@ (8004d24 <I2C1_EV_IRQHandler+0x10>)
 8004d1a:	f002 fe6f 	bl	80079fc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004d1e:	bf00      	nop
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	20000500 	.word	0x20000500

08004d28 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004d2c:	4802      	ldr	r0, [pc, #8]	@ (8004d38 <I2C1_ER_IRQHandler+0x10>)
 8004d2e:	f002 fe7f 	bl	8007a30 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004d32:	bf00      	nop
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	20000500 	.word	0x20000500

08004d3c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d48:	2300      	movs	r3, #0
 8004d4a:	617b      	str	r3, [r7, #20]
 8004d4c:	e00a      	b.n	8004d64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004d4e:	f3af 8000 	nop.w
 8004d52:	4601      	mov	r1, r0
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	1c5a      	adds	r2, r3, #1
 8004d58:	60ba      	str	r2, [r7, #8]
 8004d5a:	b2ca      	uxtb	r2, r1
 8004d5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	3301      	adds	r3, #1
 8004d62:	617b      	str	r3, [r7, #20]
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	dbf0      	blt.n	8004d4e <_read+0x12>
  }

  return len;
 8004d6c:	687b      	ldr	r3, [r7, #4]
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3718      	adds	r7, #24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b086      	sub	sp, #24
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	60f8      	str	r0, [r7, #12]
 8004d7e:	60b9      	str	r1, [r7, #8]
 8004d80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d82:	2300      	movs	r3, #0
 8004d84:	617b      	str	r3, [r7, #20]
 8004d86:	e009      	b.n	8004d9c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	1c5a      	adds	r2, r3, #1
 8004d8c:	60ba      	str	r2, [r7, #8]
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f000 fa41 	bl	8005218 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	617b      	str	r3, [r7, #20]
 8004d9c:	697a      	ldr	r2, [r7, #20]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	dbf1      	blt.n	8004d88 <_write+0x12>
  }
  return len;
 8004da4:	687b      	ldr	r3, [r7, #4]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3718      	adds	r7, #24
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <_close>:

int _close(int file)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b083      	sub	sp, #12
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004db6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b083      	sub	sp, #12
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
 8004dce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004dd6:	605a      	str	r2, [r3, #4]
  return 0;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	370c      	adds	r7, #12
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr

08004de6 <_isatty>:

int _isatty(int file)
{
 8004de6:	b480      	push	{r7}
 8004de8:	b083      	sub	sp, #12
 8004dea:	af00      	add	r7, sp, #0
 8004dec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004dee:	2301      	movs	r3, #1
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3714      	adds	r7, #20
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
	...

08004e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004e20:	4a14      	ldr	r2, [pc, #80]	@ (8004e74 <_sbrk+0x5c>)
 8004e22:	4b15      	ldr	r3, [pc, #84]	@ (8004e78 <_sbrk+0x60>)
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004e2c:	4b13      	ldr	r3, [pc, #76]	@ (8004e7c <_sbrk+0x64>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d102      	bne.n	8004e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004e34:	4b11      	ldr	r3, [pc, #68]	@ (8004e7c <_sbrk+0x64>)
 8004e36:	4a12      	ldr	r2, [pc, #72]	@ (8004e80 <_sbrk+0x68>)
 8004e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004e3a:	4b10      	ldr	r3, [pc, #64]	@ (8004e7c <_sbrk+0x64>)
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4413      	add	r3, r2
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d207      	bcs.n	8004e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004e48:	f00d fd24 	bl	8012894 <__errno>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	220c      	movs	r2, #12
 8004e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004e52:	f04f 33ff 	mov.w	r3, #4294967295
 8004e56:	e009      	b.n	8004e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004e58:	4b08      	ldr	r3, [pc, #32]	@ (8004e7c <_sbrk+0x64>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004e5e:	4b07      	ldr	r3, [pc, #28]	@ (8004e7c <_sbrk+0x64>)
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4413      	add	r3, r2
 8004e66:	4a05      	ldr	r2, [pc, #20]	@ (8004e7c <_sbrk+0x64>)
 8004e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3718      	adds	r7, #24
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	20030000 	.word	0x20030000
 8004e78:	00000400 	.word	0x00000400
 8004e7c:	200005e8 	.word	0x200005e8
 8004e80:	200021b0 	.word	0x200021b0

08004e84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004e84:	b480      	push	{r7}
 8004e86:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 8004e88:	4b24      	ldr	r3, [pc, #144]	@ (8004f1c <SystemInit+0x98>)
 8004e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e8e:	4a23      	ldr	r2, [pc, #140]	@ (8004f1c <SystemInit+0x98>)
 8004e90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004e94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8004e98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ea2:	f043 0301 	orr.w	r3, r3, #1
 8004ea6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8004ea8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004eac:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8004eb0:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8004eb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004ebc:	4b18      	ldr	r3, [pc, #96]	@ (8004f20 <SystemInit+0x9c>)
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8004ec2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004eca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ece:	f023 0305 	bic.w	r3, r3, #5
 8004ed2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004ed6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004eda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004ede:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004ee2:	f023 0301 	bic.w	r3, r3, #1
 8004ee6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8004eea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004eee:	4a0d      	ldr	r2, [pc, #52]	@ (8004f24 <SystemInit+0xa0>)
 8004ef0:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8004ef2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004ef6:	4a0b      	ldr	r2, [pc, #44]	@ (8004f24 <SystemInit+0xa0>)
 8004ef8:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004efa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004f04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f08:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004f0a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004f0e:	2200      	movs	r2, #0
 8004f10:	619a      	str	r2, [r3, #24]
}
 8004f12:	bf00      	nop
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr
 8004f1c:	e000ed00 	.word	0xe000ed00
 8004f20:	faf6fefb 	.word	0xfaf6fefb
 8004f24:	22041000 	.word	0x22041000

08004f28 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8004f28:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f2a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f2c:	3304      	adds	r3, #4

08004f2e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f2e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f30:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8004f32:	d3f9      	bcc.n	8004f28 <CopyDataInit>
  bx lr
 8004f34:	4770      	bx	lr

08004f36 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8004f36:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8004f38:	3004      	adds	r0, #4

08004f3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8004f3a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8004f3c:	d3fb      	bcc.n	8004f36 <FillZerobss>
  bx lr
 8004f3e:	4770      	bx	lr

08004f40 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004f40:	480c      	ldr	r0, [pc, #48]	@ (8004f74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004f42:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004f44:	f7ff ff9e 	bl	8004e84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8004f48:	480b      	ldr	r0, [pc, #44]	@ (8004f78 <LoopForever+0x6>)
 8004f4a:	490c      	ldr	r1, [pc, #48]	@ (8004f7c <LoopForever+0xa>)
 8004f4c:	4a0c      	ldr	r2, [pc, #48]	@ (8004f80 <LoopForever+0xe>)
 8004f4e:	2300      	movs	r3, #0
 8004f50:	f7ff ffed 	bl	8004f2e <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8004f54:	480b      	ldr	r0, [pc, #44]	@ (8004f84 <LoopForever+0x12>)
 8004f56:	490c      	ldr	r1, [pc, #48]	@ (8004f88 <LoopForever+0x16>)
 8004f58:	4a0c      	ldr	r2, [pc, #48]	@ (8004f8c <LoopForever+0x1a>)
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	f7ff ffe7 	bl	8004f2e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8004f60:	480b      	ldr	r0, [pc, #44]	@ (8004f90 <LoopForever+0x1e>)
 8004f62:	490c      	ldr	r1, [pc, #48]	@ (8004f94 <LoopForever+0x22>)
 8004f64:	2300      	movs	r3, #0
 8004f66:	f7ff ffe8 	bl	8004f3a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004f6a:	f00d fc99 	bl	80128a0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004f6e:	f7ff fa37 	bl	80043e0 <main>

08004f72 <LoopForever>:

LoopForever:
  b LoopForever
 8004f72:	e7fe      	b.n	8004f72 <LoopForever>
  ldr   r0, =_estack
 8004f74:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8004f78:	20000008 	.word	0x20000008
 8004f7c:	20000188 	.word	0x20000188
 8004f80:	08013694 	.word	0x08013694
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 8004f84:	20030000 	.word	0x20030000
 8004f88:	20030000 	.word	0x20030000
 8004f8c:	08013814 	.word	0x08013814
  INIT_BSS _sbss, _ebss
 8004f90:	20000188 	.word	0x20000188
 8004f94:	200021b0 	.word	0x200021b0

08004f98 <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004f98:	e7fe      	b.n	8004f98 <AES1_IRQHandler>

08004f9a <LL_AHB2_GRP1_EnableClock>:
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b085      	sub	sp, #20
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004fa2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fa6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004fa8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004fb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fb6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4013      	ands	r3, r2
 8004fbc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
}
 8004fc0:	bf00      	nop
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004fd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fd8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004fda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004fe4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004fe8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4013      	ands	r3, r2
 8004fee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
}
 8004ff2:	bf00      	nop
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
	...

08005000 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b088      	sub	sp, #32
 8005004:	af00      	add	r7, sp, #0
 8005006:	4603      	mov	r3, r0
 8005008:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 800500a:	f107 030c 	add.w	r3, r7, #12
 800500e:	2200      	movs	r2, #0
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	605a      	str	r2, [r3, #4]
 8005014:	609a      	str	r2, [r3, #8]
 8005016:	60da      	str	r2, [r3, #12]
 8005018:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800501a:	2002      	movs	r0, #2
 800501c:	f7ff ffbd 	bl	8004f9a <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8005020:	79fb      	ldrb	r3, [r7, #7]
 8005022:	4a12      	ldr	r2, [pc, #72]	@ (800506c <BSP_LED_Init+0x6c>)
 8005024:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005028:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 800502a:	2301      	movs	r3, #1
 800502c:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 800502e:	2300      	movs	r3, #0
 8005030:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005032:	2302      	movs	r3, #2
 8005034:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8005036:	79fb      	ldrb	r3, [r7, #7]
 8005038:	4a0d      	ldr	r2, [pc, #52]	@ (8005070 <BSP_LED_Init+0x70>)
 800503a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800503e:	f107 020c 	add.w	r2, r7, #12
 8005042:	4611      	mov	r1, r2
 8005044:	4618      	mov	r0, r3
 8005046:	f002 f86b 	bl	8007120 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 800504a:	79fb      	ldrb	r3, [r7, #7]
 800504c:	4a08      	ldr	r2, [pc, #32]	@ (8005070 <BSP_LED_Init+0x70>)
 800504e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005052:	79fb      	ldrb	r3, [r7, #7]
 8005054:	4a05      	ldr	r2, [pc, #20]	@ (800506c <BSP_LED_Init+0x6c>)
 8005056:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800505a:	2200      	movs	r2, #0
 800505c:	4619      	mov	r1, r3
 800505e:	f002 f9cf 	bl	8007400 <HAL_GPIO_WritePin>
}
 8005062:	bf00      	nop
 8005064:	3720      	adds	r7, #32
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	08013624 	.word	0x08013624
 8005070:	20000014 	.word	0x20000014

08005074 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b088      	sub	sp, #32
 8005078:	af00      	add	r7, sp, #0
 800507a:	4603      	mov	r3, r0
 800507c:	460a      	mov	r2, r1
 800507e:	71fb      	strb	r3, [r7, #7]
 8005080:	4613      	mov	r3, r2
 8005082:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8005084:	f107 030c 	add.w	r3, r7, #12
 8005088:	2200      	movs	r2, #0
 800508a:	601a      	str	r2, [r3, #0]
 800508c:	605a      	str	r2, [r3, #4]
 800508e:	609a      	str	r2, [r3, #8]
 8005090:	60da      	str	r2, [r3, #12]
 8005092:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8005094:	79fb      	ldrb	r3, [r7, #7]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d103      	bne.n	80050a2 <BSP_PB_Init+0x2e>
 800509a:	2004      	movs	r0, #4
 800509c:	f7ff ff7d 	bl	8004f9a <LL_AHB2_GRP1_EnableClock>
 80050a0:	e00c      	b.n	80050bc <BSP_PB_Init+0x48>
 80050a2:	79fb      	ldrb	r3, [r7, #7]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d103      	bne.n	80050b0 <BSP_PB_Init+0x3c>
 80050a8:	2008      	movs	r0, #8
 80050aa:	f7ff ff76 	bl	8004f9a <LL_AHB2_GRP1_EnableClock>
 80050ae:	e005      	b.n	80050bc <BSP_PB_Init+0x48>
 80050b0:	79fb      	ldrb	r3, [r7, #7]
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d102      	bne.n	80050bc <BSP_PB_Init+0x48>
 80050b6:	2008      	movs	r0, #8
 80050b8:	f7ff ff6f 	bl	8004f9a <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80050bc:	79bb      	ldrb	r3, [r7, #6]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d117      	bne.n	80050f2 <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 80050c2:	79fb      	ldrb	r3, [r7, #7]
 80050c4:	4a20      	ldr	r2, [pc, #128]	@ (8005148 <BSP_PB_Init+0xd4>)
 80050c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050ca:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 80050cc:	2300      	movs	r3, #0
 80050ce:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 80050d0:	2301      	movs	r3, #1
 80050d2:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80050d4:	2302      	movs	r3, #2
 80050d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80050d8:	79fb      	ldrb	r3, [r7, #7]
 80050da:	4a1c      	ldr	r2, [pc, #112]	@ (800514c <BSP_PB_Init+0xd8>)
 80050dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050e0:	f107 020c 	add.w	r2, r7, #12
 80050e4:	4611      	mov	r1, r2
 80050e6:	4618      	mov	r0, r3
 80050e8:	f002 f81a 	bl	8007120 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 80050ec:	2001      	movs	r0, #1
 80050ee:	f000 f965 	bl	80053bc <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80050f2:	79bb      	ldrb	r3, [r7, #6]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d123      	bne.n	8005140 <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 80050f8:	79fb      	ldrb	r3, [r7, #7]
 80050fa:	4a13      	ldr	r2, [pc, #76]	@ (8005148 <BSP_PB_Init+0xd4>)
 80050fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005100:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8005102:	2301      	movs	r3, #1
 8005104:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8005106:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800510a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 800510c:	79fb      	ldrb	r3, [r7, #7]
 800510e:	4a0f      	ldr	r2, [pc, #60]	@ (800514c <BSP_PB_Init+0xd8>)
 8005110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005114:	f107 020c 	add.w	r2, r7, #12
 8005118:	4611      	mov	r1, r2
 800511a:	4618      	mov	r0, r3
 800511c:	f002 f800 	bl	8007120 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8005120:	79fb      	ldrb	r3, [r7, #7]
 8005122:	4a0b      	ldr	r2, [pc, #44]	@ (8005150 <BSP_PB_Init+0xdc>)
 8005124:	5cd3      	ldrb	r3, [r2, r3]
 8005126:	b25b      	sxtb	r3, r3
 8005128:	2200      	movs	r2, #0
 800512a:	210f      	movs	r1, #15
 800512c:	4618      	mov	r0, r3
 800512e:	f001 fce0 	bl	8006af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8005132:	79fb      	ldrb	r3, [r7, #7]
 8005134:	4a06      	ldr	r2, [pc, #24]	@ (8005150 <BSP_PB_Init+0xdc>)
 8005136:	5cd3      	ldrb	r3, [r2, r3]
 8005138:	b25b      	sxtb	r3, r3
 800513a:	4618      	mov	r0, r3
 800513c:	f001 fcf3 	bl	8006b26 <HAL_NVIC_EnableIRQ>
  }
}
 8005140:	bf00      	nop
 8005142:	3720      	adds	r7, #32
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	0801362c 	.word	0x0801362c
 800514c:	20000020 	.word	0x20000020
 8005150:	08013634 	.word	0x08013634

08005154 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b084      	sub	sp, #16
 8005158:	af00      	add	r7, sp, #0
 800515a:	4603      	mov	r3, r0
 800515c:	6039      	str	r1, [r7, #0]
 800515e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8005160:	2300      	movs	r3, #0
 8005162:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8005164:	79fb      	ldrb	r3, [r7, #7]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d903      	bls.n	8005172 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800516a:	f06f 0301 	mvn.w	r3, #1
 800516e:	60fb      	str	r3, [r7, #12]
 8005170:	e018      	b.n	80051a4 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8005172:	79fb      	ldrb	r3, [r7, #7]
 8005174:	2294      	movs	r2, #148	@ 0x94
 8005176:	fb02 f303 	mul.w	r3, r2, r3
 800517a:	4a0d      	ldr	r2, [pc, #52]	@ (80051b0 <BSP_COM_Init+0x5c>)
 800517c:	4413      	add	r3, r2
 800517e:	4618      	mov	r0, r3
 8005180:	f000 f866 	bl	8005250 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8005184:	79fb      	ldrb	r3, [r7, #7]
 8005186:	2294      	movs	r2, #148	@ 0x94
 8005188:	fb02 f303 	mul.w	r3, r2, r3
 800518c:	4a08      	ldr	r2, [pc, #32]	@ (80051b0 <BSP_COM_Init+0x5c>)
 800518e:	4413      	add	r3, r2
 8005190:	6839      	ldr	r1, [r7, #0]
 8005192:	4618      	mov	r0, r3
 8005194:	f000 f80e 	bl	80051b4 <MX_LPUART1_Init>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d002      	beq.n	80051a4 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 800519e:	f06f 0303 	mvn.w	r3, #3
 80051a2:	e000      	b.n	80051a6 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 80051a4:	68fb      	ldr	r3, [r7, #12]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	200005ec 	.word	0x200005ec

080051b4 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80051be:	4b15      	ldr	r3, [pc, #84]	@ (8005214 <MX_LPUART1_Init+0x60>)
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	220c      	movs	r2, #12
 80051d2:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	895b      	ldrh	r3, [r3, #10]
 80051d8:	461a      	mov	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	891b      	ldrh	r3, [r3, #8]
 80051ea:	461a      	mov	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	899b      	ldrh	r3, [r3, #12]
 80051f4:	461a      	mov	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8005200:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f007 fc66 	bl	800cad4 <HAL_UART_Init>
 8005208:	4603      	mov	r3, r0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3708      	adds	r7, #8
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	2000002c 	.word	0x2000002c

08005218 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8005220:	4b09      	ldr	r3, [pc, #36]	@ (8005248 <__io_putchar+0x30>)
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	461a      	mov	r2, r3
 8005226:	2394      	movs	r3, #148	@ 0x94
 8005228:	fb02 f303 	mul.w	r3, r2, r3
 800522c:	4a07      	ldr	r2, [pc, #28]	@ (800524c <__io_putchar+0x34>)
 800522e:	1898      	adds	r0, r3, r2
 8005230:	1d39      	adds	r1, r7, #4
 8005232:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005236:	2201      	movs	r2, #1
 8005238:	f007 fca6 	bl	800cb88 <HAL_UART_Transmit>
  return ch;
 800523c:	687b      	ldr	r3, [r7, #4]
}
 800523e:	4618      	mov	r0, r3
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	20000680 	.word	0x20000680
 800524c:	200005ec 	.word	0x200005ec

08005250 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b088      	sub	sp, #32
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8005258:	2002      	movs	r0, #2
 800525a:	f7ff fe9e 	bl	8004f9a <LL_AHB2_GRP1_EnableClock>
  COM1_RX_GPIO_CLK_ENABLE();
 800525e:	2002      	movs	r0, #2
 8005260:	f7ff fe9b 	bl	8004f9a <LL_AHB2_GRP1_EnableClock>

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8005264:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8005268:	f7ff feb0 	bl	8004fcc <LL_APB2_GRP1_EnableClock>

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 800526c:	2340      	movs	r3, #64	@ 0x40
 800526e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005270:	2302      	movs	r3, #2
 8005272:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8005274:	2302      	movs	r3, #2
 8005276:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005278:	2301      	movs	r3, #1
 800527a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Alternate = COM1_TX_AF;
 800527c:	2307      	movs	r3, #7
 800527e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8005280:	f107 030c 	add.w	r3, r7, #12
 8005284:	4619      	mov	r1, r3
 8005286:	4809      	ldr	r0, [pc, #36]	@ (80052ac <COM1_MspInit+0x5c>)
 8005288:	f001 ff4a 	bl	8007120 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 800528c:	2380      	movs	r3, #128	@ 0x80
 800528e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8005290:	2302      	movs	r3, #2
 8005292:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8005294:	2307      	movs	r3, #7
 8005296:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8005298:	f107 030c 	add.w	r3, r7, #12
 800529c:	4619      	mov	r1, r3
 800529e:	4803      	ldr	r0, [pc, #12]	@ (80052ac <COM1_MspInit+0x5c>)
 80052a0:	f001 ff3e 	bl	8007120 <HAL_GPIO_Init>
}
 80052a4:	bf00      	nop
 80052a6:	3720      	adds	r7, #32
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	48000400 	.word	0x48000400

080052b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80052b6:	2300      	movs	r3, #0
 80052b8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80052ba:	4b0c      	ldr	r3, [pc, #48]	@ (80052ec <HAL_Init+0x3c>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a0b      	ldr	r2, [pc, #44]	@ (80052ec <HAL_Init+0x3c>)
 80052c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052c4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80052c6:	2003      	movs	r0, #3
 80052c8:	f001 fc08 	bl	8006adc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80052cc:	2000      	movs	r0, #0
 80052ce:	f000 f80f 	bl	80052f0 <HAL_InitTick>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d002      	beq.n	80052de <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	71fb      	strb	r3, [r7, #7]
 80052dc:	e001      	b.n	80052e2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80052de:	f7ff fbc8 	bl	8004a72 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80052e2:	79fb      	ldrb	r3, [r7, #7]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3708      	adds	r7, #8
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	58004000 	.word	0x58004000

080052f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80052f8:	2300      	movs	r3, #0
 80052fa:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80052fc:	4b17      	ldr	r3, [pc, #92]	@ (800535c <HAL_InitTick+0x6c>)
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d024      	beq.n	800534e <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8005304:	f006 fa86 	bl	800b814 <HAL_RCC_GetHCLKFreq>
 8005308:	4602      	mov	r2, r0
 800530a:	4b14      	ldr	r3, [pc, #80]	@ (800535c <HAL_InitTick+0x6c>)
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	4619      	mov	r1, r3
 8005310:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005314:	fbb3 f3f1 	udiv	r3, r3, r1
 8005318:	fbb2 f3f3 	udiv	r3, r2, r3
 800531c:	4618      	mov	r0, r3
 800531e:	f001 fc10 	bl	8006b42 <HAL_SYSTICK_Config>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10f      	bne.n	8005348 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b0f      	cmp	r3, #15
 800532c:	d809      	bhi.n	8005342 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800532e:	2200      	movs	r2, #0
 8005330:	6879      	ldr	r1, [r7, #4]
 8005332:	f04f 30ff 	mov.w	r0, #4294967295
 8005336:	f001 fbdc 	bl	8006af2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800533a:	4a09      	ldr	r2, [pc, #36]	@ (8005360 <HAL_InitTick+0x70>)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6013      	str	r3, [r2, #0]
 8005340:	e007      	b.n	8005352 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	73fb      	strb	r3, [r7, #15]
 8005346:	e004      	b.n	8005352 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	73fb      	strb	r3, [r7, #15]
 800534c:	e001      	b.n	8005352 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005352:	7bfb      	ldrb	r3, [r7, #15]
}
 8005354:	4618      	mov	r0, r3
 8005356:	3710      	adds	r7, #16
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}
 800535c:	20000034 	.word	0x20000034
 8005360:	20000030 	.word	0x20000030

08005364 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005364:	b480      	push	{r7}
 8005366:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005368:	4b06      	ldr	r3, [pc, #24]	@ (8005384 <HAL_IncTick+0x20>)
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	461a      	mov	r2, r3
 800536e:	4b06      	ldr	r3, [pc, #24]	@ (8005388 <HAL_IncTick+0x24>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4413      	add	r3, r2
 8005374:	4a04      	ldr	r2, [pc, #16]	@ (8005388 <HAL_IncTick+0x24>)
 8005376:	6013      	str	r3, [r2, #0]
}
 8005378:	bf00      	nop
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	20000034 	.word	0x20000034
 8005388:	20000684 	.word	0x20000684

0800538c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800538c:	b480      	push	{r7}
 800538e:	af00      	add	r7, sp, #0
  return uwTick;
 8005390:	4b03      	ldr	r3, [pc, #12]	@ (80053a0 <HAL_GetTick+0x14>)
 8005392:	681b      	ldr	r3, [r3, #0]
}
 8005394:	4618      	mov	r0, r3
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	20000684 	.word	0x20000684

080053a4 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80053a4:	b480      	push	{r7}
 80053a6:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80053a8:	4b03      	ldr	r3, [pc, #12]	@ (80053b8 <HAL_GetTickPrio+0x14>)
 80053aa:	681b      	ldr	r3, [r3, #0]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	20000030 	.word	0x20000030

080053bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80053c4:	f7ff ffe2 	bl	800538c <HAL_GetTick>
 80053c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d4:	d005      	beq.n	80053e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80053d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005400 <HAL_Delay+0x44>)
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	461a      	mov	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	4413      	add	r3, r2
 80053e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80053e2:	bf00      	nop
 80053e4:	f7ff ffd2 	bl	800538c <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d8f7      	bhi.n	80053e4 <HAL_Delay+0x28>
  {
  }
}
 80053f4:	bf00      	nop
 80053f6:	bf00      	nop
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	20000034 	.word	0x20000034

08005404 <LL_ADC_SetCommonClock>:
  *
  *         (*) Value available on all STM32 devices except: STM32W10xxx, STM32W15xxx.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
#if defined(ADC_SUPPORT_2_5_MSPS)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
#else
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	431a      	orrs	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	609a      	str	r2, [r3, #8]
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 800541e:	bf00      	nop
 8005420:	370c      	adds	r7, #12
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800542a:	b480      	push	{r7}
 800542c:	b083      	sub	sp, #12
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
 8005432:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	431a      	orrs	r2, r3
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	609a      	str	r2, [r3, #8]
}
 8005444:	bf00      	nop
 8005446:	370c      	adds	r7, #12
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8005460:	4618      	mov	r0, r3
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800546c:	b480      	push	{r7}
 800546e:	b087      	sub	sp, #28
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
 8005478:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	3360      	adds	r3, #96	@ 0x60
 800547e:	461a      	mov	r2, r3
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	4413      	add	r3, r2
 8005486:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	4b08      	ldr	r3, [pc, #32]	@ (80054b0 <LL_ADC_SetOffset+0x44>)
 800548e:	4013      	ands	r3, r2
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8005496:	683a      	ldr	r2, [r7, #0]
 8005498:	430a      	orrs	r2, r1
 800549a:	4313      	orrs	r3, r2
 800549c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80054a4:	bf00      	nop
 80054a6:	371c      	adds	r7, #28
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr
 80054b0:	03fff000 	.word	0x03fff000

080054b4 <LL_ADC_GetOffsetChannel>:
  *         (4) For ADC channel read back from ADC register,
  *             comparison with internal channel parameter to be done
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b085      	sub	sp, #20
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	3360      	adds	r3, #96	@ 0x60
 80054c2:	461a      	mov	r2, r3
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	009b      	lsls	r3, r3, #2
 80054c8:	4413      	add	r3, r2
 80054ca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3714      	adds	r7, #20
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr

080054e0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	3360      	adds	r3, #96	@ 0x60
 80054f0:	461a      	mov	r2, r3
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	4413      	add	r3, r2
 80054f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	431a      	orrs	r2, r3
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800550a:	bf00      	nop
 800550c:	371c      	adds	r7, #28
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005516:	b480      	push	{r7}
 8005518:	b083      	sub	sp, #12
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
#else
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005526:	2b00      	cmp	r3, #0
 8005528:	d101      	bne.n	800552e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800552a:	2301      	movs	r3, #1
 800552c:	e000      	b.n	8005530 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800552e:	2300      	movs	r3, #0
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8005530:	4618      	mov	r0, r3
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32WB devices (except devices: STM32WB10xx, STM32WB15xx, STM32WB1Mxx) fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800553c:	b480      	push	{r7}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	3330      	adds	r3, #48	@ 0x30
 800554c:	461a      	mov	r2, r3
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	0a1b      	lsrs	r3, r3, #8
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	f003 030c 	and.w	r3, r3, #12
 8005558:	4413      	add	r3, r2
 800555a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	f003 031f 	and.w	r3, r3, #31
 8005566:	211f      	movs	r1, #31
 8005568:	fa01 f303 	lsl.w	r3, r1, r3
 800556c:	43db      	mvns	r3, r3
 800556e:	401a      	ands	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	0e9b      	lsrs	r3, r3, #26
 8005574:	f003 011f 	and.w	r1, r3, #31
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	f003 031f 	and.w	r3, r3, #31
 800557e:	fa01 f303 	lsl.w	r3, r1, r3
 8005582:	431a      	orrs	r2, r3
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8005588:	bf00      	nop
 800558a:	371c      	adds	r7, #28
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 8005594:	b480      	push	{r7}
 8005596:	b083      	sub	sp, #12
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
#if defined(ADC_SUPPORT_2_5_MSPS)
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
#else
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	f003 0303 	and.w	r3, r3, #3
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055bc:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d101      	bne.n	80055c8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80055c4:	2301      	movs	r3, #1
 80055c6:	e000      	b.n	80055ca <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	370c      	adds	r7, #12
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr

080055d6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80055d6:	b480      	push	{r7}
 80055d8:	b087      	sub	sp, #28
 80055da:	af00      	add	r7, sp, #0
 80055dc:	60f8      	str	r0, [r7, #12]
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	607a      	str	r2, [r7, #4]
#else
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	3314      	adds	r3, #20
 80055e6:	461a      	mov	r2, r3
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	0e5b      	lsrs	r3, r3, #25
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	f003 0304 	and.w	r3, r3, #4
 80055f2:	4413      	add	r3, r2
 80055f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	0d1b      	lsrs	r3, r3, #20
 80055fe:	f003 031f 	and.w	r3, r3, #31
 8005602:	2107      	movs	r1, #7
 8005604:	fa01 f303 	lsl.w	r3, r1, r3
 8005608:	43db      	mvns	r3, r3
 800560a:	401a      	ands	r2, r3
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	0d1b      	lsrs	r3, r3, #20
 8005610:	f003 031f 	and.w	r3, r3, #31
 8005614:	6879      	ldr	r1, [r7, #4]
 8005616:	fa01 f303 	lsl.w	r3, r1, r3
 800561a:	431a      	orrs	r2, r3
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
#endif /* ADC_SUPPORT_2_5_MSPS */
}
 8005620:	bf00      	nop
 8005622:	371c      	adds	r7, #28
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005644:	43db      	mvns	r3, r3
 8005646:	401a      	ands	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f003 0318 	and.w	r3, r3, #24
 800564e:	4908      	ldr	r1, [pc, #32]	@ (8005670 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005650:	40d9      	lsrs	r1, r3
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	400b      	ands	r3, r1
 8005656:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800565a:	431a      	orrs	r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005662:	bf00      	nop
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	0007ffff 	.word	0x0007ffff

08005674 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005684:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	6093      	str	r3, [r2, #8]
}
 800568c:	bf00      	nop
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056ac:	d101      	bne.n	80056b2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80056ae:	2301      	movs	r3, #1
 80056b0:	e000      	b.n	80056b4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80056b2:	2300      	movs	r3, #0
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr

080056c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b083      	sub	sp, #12
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80056d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80056d4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056fc:	d101      	bne.n	8005702 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80056fe:	2301      	movs	r3, #1
 8005700:	e000      	b.n	8005704 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005720:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005724:	f043 0201 	orr.w	r2, r3, #1
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f003 0301 	and.w	r3, r3, #1
 8005748:	2b01      	cmp	r3, #1
 800574a:	d101      	bne.n	8005750 <LL_ADC_IsEnabled+0x18>
 800574c:	2301      	movs	r3, #1
 800574e:	e000      	b.n	8005752 <LL_ADC_IsEnabled+0x1a>
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	370c      	adds	r7, #12
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800575e:	b480      	push	{r7}
 8005760:	b083      	sub	sp, #12
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800576e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005772:	f043 0204 	orr.w	r2, r3, #4
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800577a:	bf00      	nop
 800577c:	370c      	adds	r7, #12
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005786:	b480      	push	{r7}
 8005788:	b083      	sub	sp, #12
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f003 0304 	and.w	r3, r3, #4
 8005796:	2b04      	cmp	r3, #4
 8005798:	d101      	bne.n	800579e <LL_ADC_REG_IsConversionOngoing+0x18>
 800579a:	2301      	movs	r3, #1
 800579c:	e000      	b.n	80057a0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f003 0308 	and.w	r3, r3, #8
 80057bc:	2b08      	cmp	r3, #8
 80057be:	d101      	bne.n	80057c4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80057c0:	2301      	movs	r3, #1
 80057c2:	e000      	b.n	80057c6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
	...

080057d4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b088      	sub	sp, #32
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80057dc:	2300      	movs	r3, #0
 80057de:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR = 0UL;
 80057e0:	2300      	movs	r3, #0
 80057e2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80057e4:	2300      	movs	r3, #0
 80057e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Check ADC handle */
  if (hadc == NULL)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d101      	bne.n	80057f2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	e12e      	b.n	8005a50 <HAL_ADC_Init+0x27c>
    }
  }
#else
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	2b00      	cmp	r3, #0
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d109      	bne.n	8005814 <HAL_ADC_Init+0x40>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f7ff f93d 	bl	8004a80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2200      	movs	r2, #0
 800580a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* - Exit from deep power-down mode and ADC voltage regulator enable        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  /* Feature "deep power-down" not available on ADC peripheral of this STM32WB device */
#else
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4618      	mov	r0, r3
 800581a:	f7ff ff3d 	bl	8005698 <LL_ADC_IsDeepPowerDownEnabled>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d004      	beq.n	800582e <HAL_ADC_Init+0x5a>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4618      	mov	r0, r3
 800582a:	f7ff ff23 	bl	8005674 <LL_ADC_DisableDeepPowerDown>
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4618      	mov	r0, r3
 8005834:	f7ff ff58 	bl	80056e8 <LL_ADC_IsInternalRegulatorEnabled>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d115      	bne.n	800586a <HAL_ADC_Init+0x96>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4618      	mov	r0, r3
 8005844:	f7ff ff3c 	bl	80056c0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005848:	4b83      	ldr	r3, [pc, #524]	@ (8005a58 <HAL_ADC_Init+0x284>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	099b      	lsrs	r3, r3, #6
 800584e:	4a83      	ldr	r2, [pc, #524]	@ (8005a5c <HAL_ADC_Init+0x288>)
 8005850:	fba2 2303 	umull	r2, r3, r2, r3
 8005854:	099b      	lsrs	r3, r3, #6
 8005856:	3301      	adds	r3, #1
 8005858:	005b      	lsls	r3, r3, #1
 800585a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800585c:	e002      	b.n	8005864 <HAL_ADC_Init+0x90>
    {
      wait_loop_index--;
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	3b01      	subs	r3, #1
 8005862:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1f9      	bne.n	800585e <HAL_ADC_Init+0x8a>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4618      	mov	r0, r3
 8005870:	f7ff ff3a 	bl	80056e8 <LL_ADC_IsInternalRegulatorEnabled>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d10d      	bne.n	8005896 <HAL_ADC_Init+0xc2>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800587e:	f043 0210 	orr.w	r2, r3, #16
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800588a:	f043 0201 	orr.w	r2, r3, #1
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4618      	mov	r0, r3
 800589c:	f7ff ff73 	bl	8005786 <LL_ADC_REG_IsConversionOngoing>
 80058a0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058a6:	f003 0310 	and.w	r3, r3, #16
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f040 80c7 	bne.w	8005a3e <HAL_ADC_Init+0x26a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	f040 80c3 	bne.w	8005a3e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058bc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80058c0:	f043 0202 	orr.w	r2, r3, #2
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7ff ff33 	bl	8005738 <LL_ADC_IsEnabled>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10b      	bne.n	80058f0 <HAL_ADC_Init+0x11c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80058d8:	4861      	ldr	r0, [pc, #388]	@ (8005a60 <HAL_ADC_Init+0x28c>)
 80058da:	f7ff ff2d 	bl	8005738 <LL_ADC_IsEnabled>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d105      	bne.n	80058f0 <HAL_ADC_Init+0x11c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	4619      	mov	r1, r3
 80058ea:	485e      	ldr	r0, [pc, #376]	@ (8005a64 <HAL_ADC_Init+0x290>)
 80058ec:	f7ff fd8a 	bl	8005404 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	7e5b      	ldrb	r3, [r3, #25]
 80058f4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80058fa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005900:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005906:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800590e:	041b      	lsls	r3, r3, #16
                hadc->Init.Resolution                                                  |
 8005910:	4313      	orrs	r3, r2
    tmpCFGR |= (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005912:	69ba      	ldr	r2, [r7, #24]
 8005914:	4313      	orrs	r3, r2
 8005916:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d106      	bne.n	8005930 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005926:	3b01      	subs	r3, #1
 8005928:	045b      	lsls	r3, r3, #17
 800592a:	69ba      	ldr	r2, [r7, #24]
 800592c:	4313      	orrs	r3, r2
 800592e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005934:	2b00      	cmp	r3, #0
 8005936:	d009      	beq.n	800594c <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800593c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005944:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005946:	69ba      	ldr	r2, [r7, #24]
 8005948:	4313      	orrs	r3, r2
 800594a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68da      	ldr	r2, [r3, #12]
 8005952:	4b45      	ldr	r3, [pc, #276]	@ (8005a68 <HAL_ADC_Init+0x294>)
 8005954:	4013      	ands	r3, r2
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	6812      	ldr	r2, [r2, #0]
 800595a:	69b9      	ldr	r1, [r7, #24]
 800595c:	430b      	orrs	r3, r1
 800595e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4618      	mov	r0, r3
 8005966:	f7ff ff0e 	bl	8005786 <LL_ADC_REG_IsConversionOngoing>
 800596a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4618      	mov	r0, r3
 8005972:	f7ff ff1b 	bl	80057ac <LL_ADC_INJ_IsConversionOngoing>
 8005976:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d13d      	bne.n	80059fa <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d13a      	bne.n	80059fa <HAL_ADC_Init+0x226>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005988:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005990:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005992:	4313      	orrs	r3, r2
 8005994:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059a0:	f023 0302 	bic.w	r3, r3, #2
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	6812      	ldr	r2, [r2, #0]
 80059a8:	69b9      	ldr	r1, [r7, #24]
 80059aa:	430b      	orrs	r3, r1
 80059ac:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d118      	bne.n	80059ea <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80059c2:	f023 0304 	bic.w	r3, r3, #4
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80059ce:	4311      	orrs	r1, r2
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80059d4:	4311      	orrs	r1, r2
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80059da:	430a      	orrs	r2, r1
 80059dc:	431a      	orrs	r2, r3
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f042 0201 	orr.w	r2, r2, #1
 80059e6:	611a      	str	r2, [r3, #16]
 80059e8:	e007      	b.n	80059fa <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	691a      	ldr	r2, [r3, #16]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f022 0201 	bic.w	r2, r2, #1
 80059f8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d10c      	bne.n	8005a1c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a08:	f023 010f 	bic.w	r1, r3, #15
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	69db      	ldr	r3, [r3, #28]
 8005a10:	1e5a      	subs	r2, r3, #1
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	430a      	orrs	r2, r1
 8005a18:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a1a:	e007      	b.n	8005a2c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f022 020f 	bic.w	r2, r2, #15
 8005a2a:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a30:	f023 0303 	bic.w	r3, r3, #3
 8005a34:	f043 0201 	orr.w	r2, r3, #1
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	655a      	str	r2, [r3, #84]	@ 0x54
 8005a3c:	e007      	b.n	8005a4e <HAL_ADC_Init+0x27a>
#endif /* ADC_SUPPORT_2_5_MSPS */
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a42:	f043 0210 	orr.w	r2, r3, #16
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005a4e:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3720      	adds	r7, #32
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}
 8005a58:	20000010 	.word	0x20000010
 8005a5c:	053e2d63 	.word	0x053e2d63
 8005a60:	50040000 	.word	0x50040000
 8005a64:	50040300 	.word	0x50040300
 8005a68:	fff0c007 	.word	0xfff0c007

08005a6c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b086      	sub	sp, #24
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f7ff fe82 	bl	8005786 <LL_ADC_REG_IsConversionOngoing>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d167      	bne.n	8005b58 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d101      	bne.n	8005a96 <HAL_ADC_Start_DMA+0x2a>
 8005a92:	2302      	movs	r3, #2
 8005a94:	e063      	b.n	8005b5e <HAL_ADC_Start_DMA+0xf2>
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f000 fe0c 	bl	80066bc <ADC_Enable>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005aa8:	7dfb      	ldrb	r3, [r7, #23]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d14f      	bne.n	8005b4e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ab2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005ab6:	f023 0301 	bic.w	r3, r3, #1
 8005aba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(ADC_SUPPORT_2_5_MSPS)
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
#else
        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ac6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d006      	beq.n	8005adc <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ad2:	f023 0206 	bic.w	r2, r3, #6
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	659a      	str	r2, [r3, #88]	@ 0x58
 8005ada:	e002      	b.n	8005ae2 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	659a      	str	r2, [r3, #88]	@ 0x58
        }
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ae6:	4a20      	ldr	r2, [pc, #128]	@ (8005b68 <HAL_ADC_Start_DMA+0xfc>)
 8005ae8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aee:	4a1f      	ldr	r2, [pc, #124]	@ (8005b6c <HAL_ADC_Start_DMA+0x100>)
 8005af0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005af6:	4a1e      	ldr	r2, [pc, #120]	@ (8005b70 <HAL_ADC_Start_DMA+0x104>)
 8005af8:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	221c      	movs	r2, #28
 8005b00:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	685a      	ldr	r2, [r3, #4]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f042 0210 	orr.w	r2, r2, #16
 8005b18:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
#if  defined(ADC_SUPPORT_2_5_MSPS)
        SET_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN);
#else
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	68da      	ldr	r2, [r3, #12]
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f042 0201 	orr.w	r2, r2, #1
 8005b28:	60da      	str	r2, [r3, #12]
#endif /* ADC_SUPPORT_2_5_MSPS */

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	3340      	adds	r3, #64	@ 0x40
 8005b34:	4619      	mov	r1, r3
 8005b36:	68ba      	ldr	r2, [r7, #8]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f001 f8b7 	bl	8006cac <HAL_DMA_Start_IT>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7ff fe09 	bl	800575e <LL_ADC_REG_StartConversion>
 8005b4c:	e006      	b.n	8005b5c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005b56:	e001      	b.n	8005b5c <HAL_ADC_Start_DMA+0xf0>
      }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005b58:	2302      	movs	r3, #2
 8005b5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3718      	adds	r7, #24
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	080067b1 	.word	0x080067b1
 8005b6c:	08006889 	.word	0x08006889
 8005b70:	080068a5 	.word	0x080068a5

08005b74 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b088      	sub	sp, #32
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	f003 0302 	and.w	r3, r3, #2
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d017      	beq.n	8005bca <HAL_ADC_IRQHandler+0x56>
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f003 0302 	and.w	r3, r3, #2
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d012      	beq.n	8005bca <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ba8:	f003 0310 	and.w	r3, r3, #16
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d105      	bne.n	8005bbc <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bb4:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f000 feb3 	bl	8006928 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	f003 0304 	and.w	r3, r3, #4
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d004      	beq.n	8005bde <HAL_ADC_IRQHandler+0x6a>
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f003 0304 	and.w	r3, r3, #4
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d109      	bne.n	8005bf2 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005bde:	69bb      	ldr	r3, [r7, #24]
 8005be0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d05d      	beq.n	8005ca4 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	f003 0308 	and.w	r3, r3, #8
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d058      	beq.n	8005ca4 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bf6:	f003 0310 	and.w	r3, r3, #16
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d105      	bne.n	8005c0a <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c02:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7ff fc81 	bl	8005516 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d03d      	beq.n	8005c96 <HAL_ADC_IRQHandler+0x122>
    {
      /* Carry on if continuous mode is disabled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
      if (READ_BIT (hadc->Instance->CFGR1, ADC_CFGR1_CONT) != ADC_CFGR1_CONT)
#else
      if (READ_BIT (hadc->Instance->CFGR, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c28:	d035      	beq.n	8005c96 <HAL_ADC_IRQHandler+0x122>
#endif /* ADC_SUPPORT_2_5_MSPS */
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 0308 	and.w	r3, r3, #8
 8005c34:	2b08      	cmp	r3, #8
 8005c36:	d12e      	bne.n	8005c96 <HAL_ADC_IRQHandler+0x122>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f7ff fda2 	bl	8005786 <LL_ADC_REG_IsConversionOngoing>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d11a      	bne.n	8005c7e <HAL_ADC_IRQHandler+0x10a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f022 020c 	bic.w	r2, r2, #12
 8005c56:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c5c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d112      	bne.n	8005c96 <HAL_ADC_IRQHandler+0x122>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c74:	f043 0201 	orr.w	r2, r3, #1
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	655a      	str	r2, [r3, #84]	@ 0x54
 8005c7c:	e00b      	b.n	8005c96 <HAL_ADC_IRQHandler+0x122>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c82:	f043 0210 	orr.w	r2, r3, #16
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c8e:	f043 0201 	orr.w	r2, r3, #1
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 f922 	bl	8005ee0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	220c      	movs	r2, #12
 8005ca2:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	f003 0320 	and.w	r3, r3, #32
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d004      	beq.n	8005cb8 <HAL_ADC_IRQHandler+0x144>
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f003 0320 	and.w	r3, r3, #32
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d109      	bne.n	8005ccc <HAL_ADC_IRQHandler+0x158>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d074      	beq.n	8005dac <HAL_ADC_IRQHandler+0x238>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d06f      	beq.n	8005dac <HAL_ADC_IRQHandler+0x238>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cd0:	f003 0310 	and.w	r3, r3, #16
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d105      	bne.n	8005ce4 <HAL_ADC_IRQHandler+0x170>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cdc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7ff fc61 	bl	80055b0 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005cee:	6138      	str	r0, [r7, #16]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7ff fc0e 	bl	8005516 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005cfa:	60f8      	str	r0, [r7, #12]
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	60bb      	str	r3, [r7, #8]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d049      	beq.n	8005d9e <HAL_ADC_IRQHandler+0x22a>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d007      	beq.n	8005d24 <HAL_ADC_IRQHandler+0x1b0>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d041      	beq.n	8005d9e <HAL_ADC_IRQHandler+0x22a>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d13c      	bne.n	8005d9e <HAL_ADC_IRQHandler+0x22a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d2e:	2b40      	cmp	r3, #64	@ 0x40
 8005d30:	d135      	bne.n	8005d9e <HAL_ADC_IRQHandler+0x22a>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM) == 0UL)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d12e      	bne.n	8005d9e <HAL_ADC_IRQHandler+0x22a>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4618      	mov	r0, r3
 8005d46:	f7ff fd31 	bl	80057ac <LL_ADC_INJ_IsConversionOngoing>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d11a      	bne.n	8005d86 <HAL_ADC_IRQHandler+0x212>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	685a      	ldr	r2, [r3, #4]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005d5e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d64:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d112      	bne.n	8005d9e <HAL_ADC_IRQHandler+0x22a>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d7c:	f043 0201 	orr.w	r2, r3, #1
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	655a      	str	r2, [r3, #84]	@ 0x54
 8005d84:	e00b      	b.n	8005d9e <HAL_ADC_IRQHandler+0x22a>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d8a:	f043 0210 	orr.w	r2, r3, #16
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d96:	f043 0201 	orr.w	r2, r3, #1
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fd9a 	bl	80068d8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2260      	movs	r2, #96	@ 0x60
 8005daa:	601a      	str	r2, [r3, #0]
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d011      	beq.n	8005dda <HAL_ADC_IRQHandler+0x266>
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00c      	beq.n	8005dda <HAL_ADC_IRQHandler+0x266>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005dc4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 f89b 	bl	8005f08 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2280      	movs	r2, #128	@ 0x80
 8005dd8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d012      	beq.n	8005e0a <HAL_ADC_IRQHandler+0x296>
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00d      	beq.n	8005e0a <HAL_ADC_IRQHandler+0x296>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005df2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 fd80 	bl	8006900 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e08:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d012      	beq.n	8005e3a <HAL_ADC_IRQHandler+0x2c6>
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00d      	beq.n	8005e3a <HAL_ADC_IRQHandler+0x2c6>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e22:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 fd72 	bl	8006914 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e38:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005e3a:	69bb      	ldr	r3, [r7, #24]
 8005e3c:	f003 0310 	and.w	r3, r3, #16
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d02b      	beq.n	8005e9c <HAL_ADC_IRQHandler+0x328>
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	f003 0310 	and.w	r3, r3, #16
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d026      	beq.n	8005e9c <HAL_ADC_IRQHandler+0x328>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d102      	bne.n	8005e5c <HAL_ADC_IRQHandler+0x2e8>
    {
      overrun_error = 1UL;
 8005e56:	2301      	movs	r3, #1
 8005e58:	61fb      	str	r3, [r7, #28]
 8005e5a:	e009      	b.n	8005e70 <HAL_ADC_IRQHandler+0x2fc>
    }
    else
    {
      /* Check DMA configuration */
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7ff fb97 	bl	8005594 <LL_ADC_REG_GetDMATransfer>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d001      	beq.n	8005e70 <HAL_ADC_IRQHandler+0x2fc>
      {
        overrun_error = 1UL;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	61fb      	str	r3, [r7, #28]
      }
    }

    if (overrun_error == 1UL)
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d10e      	bne.n	8005e94 <HAL_ADC_IRQHandler+0x320>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e7a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e86:	f043 0202 	orr.w	r2, r3, #2
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 f844 	bl	8005f1c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2210      	movs	r2, #16
 8005e9a:	601a      	str	r2, [r3, #0]

#if  defined(ADC_SUPPORT_2_5_MSPS)
/* Feature "ADC group injected" not available on ADC peripheral of this STM32WB device */
#else
  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d018      	beq.n	8005ed8 <HAL_ADC_IRQHandler+0x364>
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d013      	beq.n	8005ed8 <HAL_ADC_IRQHandler+0x364>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eb4:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ec0:	f043 0208 	orr.w	r2, r3, #8
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005ed0:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 fd0a 	bl	80068ec <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
#endif /* ADC_SUPPORT_2_5_MSPS */

}
 8005ed8:	bf00      	nop
 8005eda:	3720      	adds	r7, #32
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005efc:	bf00      	nop
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005f10:	bf00      	nop
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *sConfig)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b0b6      	sub	sp, #216	@ 0xd8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
  
#else
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005f40:	2300      	movs	r3, #0
 8005f42:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005f4a:	2b01      	cmp	r3, #1
 8005f4c:	d101      	bne.n	8005f52 <HAL_ADC_ConfigChannel+0x22>
 8005f4e:	2302      	movs	r3, #2
 8005f50:	e39f      	b.n	8006692 <HAL_ADC_ConfigChannel+0x762>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7ff fc11 	bl	8005786 <LL_ADC_REG_IsConversionOngoing>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f040 8384 	bne.w	8006674 <HAL_ADC_ConfigChannel+0x744>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6818      	ldr	r0, [r3, #0]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	6859      	ldr	r1, [r3, #4]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	461a      	mov	r2, r3
 8005f7a:	f7ff fadf 	bl	800553c <LL_ADC_REG_SetSequencerRanks>
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
#if defined(ADC_SUPPORT_2_5_MSPS)
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
#else
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7ff fbff 	bl	8005786 <LL_ADC_REG_IsConversionOngoing>
 8005f88:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4618      	mov	r0, r3
 8005f92:	f7ff fc0b 	bl	80057ac <LL_ADC_INJ_IsConversionOngoing>
 8005f96:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005f9a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f040 81a6 	bne.w	80062f0 <HAL_ADC_ConfigChannel+0x3c0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005fa4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f040 81a1 	bne.w	80062f0 <HAL_ADC_ConfigChannel+0x3c0>
       )
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6818      	ldr	r0, [r3, #0]
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	6819      	ldr	r1, [r3, #0]
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	461a      	mov	r2, r3
 8005fbc:	f7ff fb0b 	bl	80055d6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	695a      	ldr	r2, [r3, #20]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	08db      	lsrs	r3, r3, #3
 8005fcc:	f003 0303 	and.w	r3, r3, #3
 8005fd0:	005b      	lsls	r3, r3, #1
 8005fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	2b04      	cmp	r3, #4
 8005fe0:	d00a      	beq.n	8005ff8 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6818      	ldr	r0, [r3, #0]
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	6919      	ldr	r1, [r3, #16]
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005ff2:	f7ff fa3b 	bl	800546c <LL_ADC_SetOffset>
 8005ff6:	e17b      	b.n	80062f0 <HAL_ADC_ConfigChannel+0x3c0>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7ff fa58 	bl	80054b4 <LL_ADC_GetOffsetChannel>
 8006004:	4603      	mov	r3, r0
 8006006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800600a:	2b00      	cmp	r3, #0
 800600c:	d10a      	bne.n	8006024 <HAL_ADC_ConfigChannel+0xf4>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	2100      	movs	r1, #0
 8006014:	4618      	mov	r0, r3
 8006016:	f7ff fa4d 	bl	80054b4 <LL_ADC_GetOffsetChannel>
 800601a:	4603      	mov	r3, r0
 800601c:	0e9b      	lsrs	r3, r3, #26
 800601e:	f003 021f 	and.w	r2, r3, #31
 8006022:	e01e      	b.n	8006062 <HAL_ADC_ConfigChannel+0x132>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2100      	movs	r1, #0
 800602a:	4618      	mov	r0, r3
 800602c:	f7ff fa42 	bl	80054b4 <LL_ADC_GetOffsetChannel>
 8006030:	4603      	mov	r3, r0
 8006032:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006036:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800603a:	fa93 f3a3 	rbit	r3, r3
 800603e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006042:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006046:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800604a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d101      	bne.n	8006056 <HAL_ADC_ConfigChannel+0x126>
  {
    return 32U;
 8006052:	2320      	movs	r3, #32
 8006054:	e004      	b.n	8006060 <HAL_ADC_ConfigChannel+0x130>
  }
  return __builtin_clz(value);
 8006056:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800605a:	fab3 f383 	clz	r3, r3
 800605e:	b2db      	uxtb	r3, r3
 8006060:	461a      	mov	r2, r3
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800606a:	2b00      	cmp	r3, #0
 800606c:	d105      	bne.n	800607a <HAL_ADC_ConfigChannel+0x14a>
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	0e9b      	lsrs	r3, r3, #26
 8006074:	f003 031f 	and.w	r3, r3, #31
 8006078:	e018      	b.n	80060ac <HAL_ADC_ConfigChannel+0x17c>
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006082:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006086:	fa93 f3a3 	rbit	r3, r3
 800608a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800608e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006092:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8006096:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800609a:	2b00      	cmp	r3, #0
 800609c:	d101      	bne.n	80060a2 <HAL_ADC_ConfigChannel+0x172>
    return 32U;
 800609e:	2320      	movs	r3, #32
 80060a0:	e004      	b.n	80060ac <HAL_ADC_ConfigChannel+0x17c>
  return __builtin_clz(value);
 80060a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80060a6:	fab3 f383 	clz	r3, r3
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d106      	bne.n	80060be <HAL_ADC_ConfigChannel+0x18e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2200      	movs	r2, #0
 80060b6:	2100      	movs	r1, #0
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7ff fa11 	bl	80054e0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2101      	movs	r1, #1
 80060c4:	4618      	mov	r0, r3
 80060c6:	f7ff f9f5 	bl	80054b4 <LL_ADC_GetOffsetChannel>
 80060ca:	4603      	mov	r3, r0
 80060cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d10a      	bne.n	80060ea <HAL_ADC_ConfigChannel+0x1ba>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2101      	movs	r1, #1
 80060da:	4618      	mov	r0, r3
 80060dc:	f7ff f9ea 	bl	80054b4 <LL_ADC_GetOffsetChannel>
 80060e0:	4603      	mov	r3, r0
 80060e2:	0e9b      	lsrs	r3, r3, #26
 80060e4:	f003 021f 	and.w	r2, r3, #31
 80060e8:	e01e      	b.n	8006128 <HAL_ADC_ConfigChannel+0x1f8>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2101      	movs	r1, #1
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7ff f9df 	bl	80054b4 <LL_ADC_GetOffsetChannel>
 80060f6:	4603      	mov	r3, r0
 80060f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006100:	fa93 f3a3 	rbit	r3, r3
 8006104:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8006108:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800610c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8006110:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006114:	2b00      	cmp	r3, #0
 8006116:	d101      	bne.n	800611c <HAL_ADC_ConfigChannel+0x1ec>
    return 32U;
 8006118:	2320      	movs	r3, #32
 800611a:	e004      	b.n	8006126 <HAL_ADC_ConfigChannel+0x1f6>
  return __builtin_clz(value);
 800611c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006120:	fab3 f383 	clz	r3, r3
 8006124:	b2db      	uxtb	r3, r3
 8006126:	461a      	mov	r2, r3
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006130:	2b00      	cmp	r3, #0
 8006132:	d105      	bne.n	8006140 <HAL_ADC_ConfigChannel+0x210>
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	0e9b      	lsrs	r3, r3, #26
 800613a:	f003 031f 	and.w	r3, r3, #31
 800613e:	e018      	b.n	8006172 <HAL_ADC_ConfigChannel+0x242>
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006148:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800614c:	fa93 f3a3 	rbit	r3, r3
 8006150:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8006154:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006158:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800615c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006160:	2b00      	cmp	r3, #0
 8006162:	d101      	bne.n	8006168 <HAL_ADC_ConfigChannel+0x238>
    return 32U;
 8006164:	2320      	movs	r3, #32
 8006166:	e004      	b.n	8006172 <HAL_ADC_ConfigChannel+0x242>
  return __builtin_clz(value);
 8006168:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800616c:	fab3 f383 	clz	r3, r3
 8006170:	b2db      	uxtb	r3, r3
 8006172:	429a      	cmp	r2, r3
 8006174:	d106      	bne.n	8006184 <HAL_ADC_ConfigChannel+0x254>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2200      	movs	r2, #0
 800617c:	2101      	movs	r1, #1
 800617e:	4618      	mov	r0, r3
 8006180:	f7ff f9ae 	bl	80054e0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2102      	movs	r1, #2
 800618a:	4618      	mov	r0, r3
 800618c:	f7ff f992 	bl	80054b4 <LL_ADC_GetOffsetChannel>
 8006190:	4603      	mov	r3, r0
 8006192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10a      	bne.n	80061b0 <HAL_ADC_ConfigChannel+0x280>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	2102      	movs	r1, #2
 80061a0:	4618      	mov	r0, r3
 80061a2:	f7ff f987 	bl	80054b4 <LL_ADC_GetOffsetChannel>
 80061a6:	4603      	mov	r3, r0
 80061a8:	0e9b      	lsrs	r3, r3, #26
 80061aa:	f003 021f 	and.w	r2, r3, #31
 80061ae:	e01e      	b.n	80061ee <HAL_ADC_ConfigChannel+0x2be>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2102      	movs	r1, #2
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7ff f97c 	bl	80054b4 <LL_ADC_GetOffsetChannel>
 80061bc:	4603      	mov	r3, r0
 80061be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061c6:	fa93 f3a3 	rbit	r3, r3
 80061ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80061ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80061d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80061d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <HAL_ADC_ConfigChannel+0x2b2>
    return 32U;
 80061de:	2320      	movs	r3, #32
 80061e0:	e004      	b.n	80061ec <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80061e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80061e6:	fab3 f383 	clz	r3, r3
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	461a      	mov	r2, r3
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d105      	bne.n	8006206 <HAL_ADC_ConfigChannel+0x2d6>
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	0e9b      	lsrs	r3, r3, #26
 8006200:	f003 031f 	and.w	r3, r3, #31
 8006204:	e016      	b.n	8006234 <HAL_ADC_ConfigChannel+0x304>
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800620e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006212:	fa93 f3a3 	rbit	r3, r3
 8006216:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8006218:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800621a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800621e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006222:	2b00      	cmp	r3, #0
 8006224:	d101      	bne.n	800622a <HAL_ADC_ConfigChannel+0x2fa>
    return 32U;
 8006226:	2320      	movs	r3, #32
 8006228:	e004      	b.n	8006234 <HAL_ADC_ConfigChannel+0x304>
  return __builtin_clz(value);
 800622a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800622e:	fab3 f383 	clz	r3, r3
 8006232:	b2db      	uxtb	r3, r3
 8006234:	429a      	cmp	r2, r3
 8006236:	d106      	bne.n	8006246 <HAL_ADC_ConfigChannel+0x316>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2200      	movs	r2, #0
 800623e:	2102      	movs	r1, #2
 8006240:	4618      	mov	r0, r3
 8006242:	f7ff f94d 	bl	80054e0 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2103      	movs	r1, #3
 800624c:	4618      	mov	r0, r3
 800624e:	f7ff f931 	bl	80054b4 <LL_ADC_GetOffsetChannel>
 8006252:	4603      	mov	r3, r0
 8006254:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10a      	bne.n	8006272 <HAL_ADC_ConfigChannel+0x342>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2103      	movs	r1, #3
 8006262:	4618      	mov	r0, r3
 8006264:	f7ff f926 	bl	80054b4 <LL_ADC_GetOffsetChannel>
 8006268:	4603      	mov	r3, r0
 800626a:	0e9b      	lsrs	r3, r3, #26
 800626c:	f003 021f 	and.w	r2, r3, #31
 8006270:	e017      	b.n	80062a2 <HAL_ADC_ConfigChannel+0x372>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2103      	movs	r1, #3
 8006278:	4618      	mov	r0, r3
 800627a:	f7ff f91b 	bl	80054b4 <LL_ADC_GetOffsetChannel>
 800627e:	4603      	mov	r3, r0
 8006280:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006282:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006284:	fa93 f3a3 	rbit	r3, r3
 8006288:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800628a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800628c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800628e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006290:	2b00      	cmp	r3, #0
 8006292:	d101      	bne.n	8006298 <HAL_ADC_ConfigChannel+0x368>
    return 32U;
 8006294:	2320      	movs	r3, #32
 8006296:	e003      	b.n	80062a0 <HAL_ADC_ConfigChannel+0x370>
  return __builtin_clz(value);
 8006298:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800629a:	fab3 f383 	clz	r3, r3
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	461a      	mov	r2, r3
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d105      	bne.n	80062ba <HAL_ADC_ConfigChannel+0x38a>
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	0e9b      	lsrs	r3, r3, #26
 80062b4:	f003 031f 	and.w	r3, r3, #31
 80062b8:	e011      	b.n	80062de <HAL_ADC_ConfigChannel+0x3ae>
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80062c2:	fa93 f3a3 	rbit	r3, r3
 80062c6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80062c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80062cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d101      	bne.n	80062d6 <HAL_ADC_ConfigChannel+0x3a6>
    return 32U;
 80062d2:	2320      	movs	r3, #32
 80062d4:	e003      	b.n	80062de <HAL_ADC_ConfigChannel+0x3ae>
  return __builtin_clz(value);
 80062d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80062d8:	fab3 f383 	clz	r3, r3
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	429a      	cmp	r2, r3
 80062e0:	d106      	bne.n	80062f0 <HAL_ADC_ConfigChannel+0x3c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2200      	movs	r2, #0
 80062e8:	2103      	movs	r1, #3
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7ff f8f8 	bl	80054e0 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4618      	mov	r0, r3
 80062f6:	f7ff fa1f 	bl	8005738 <LL_ADC_IsEnabled>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f040 81c2 	bne.w	8006686 <HAL_ADC_ConfigChannel+0x756>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6818      	ldr	r0, [r3, #0]
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	6819      	ldr	r1, [r3, #0]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	461a      	mov	r2, r3
 8006310:	f7ff f98c 	bl	800562c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	4a8e      	ldr	r2, [pc, #568]	@ (8006554 <HAL_ADC_ConfigChannel+0x624>)
 800631a:	4293      	cmp	r3, r2
 800631c:	f040 8130 	bne.w	8006580 <HAL_ADC_ConfigChannel+0x650>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800632c:	2b00      	cmp	r3, #0
 800632e:	d10b      	bne.n	8006348 <HAL_ADC_ConfigChannel+0x418>
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	0e9b      	lsrs	r3, r3, #26
 8006336:	3301      	adds	r3, #1
 8006338:	f003 031f 	and.w	r3, r3, #31
 800633c:	2b09      	cmp	r3, #9
 800633e:	bf94      	ite	ls
 8006340:	2301      	movls	r3, #1
 8006342:	2300      	movhi	r3, #0
 8006344:	b2db      	uxtb	r3, r3
 8006346:	e019      	b.n	800637c <HAL_ADC_ConfigChannel+0x44c>
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800634e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006350:	fa93 f3a3 	rbit	r3, r3
 8006354:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8006356:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006358:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800635a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800635c:	2b00      	cmp	r3, #0
 800635e:	d101      	bne.n	8006364 <HAL_ADC_ConfigChannel+0x434>
    return 32U;
 8006360:	2320      	movs	r3, #32
 8006362:	e003      	b.n	800636c <HAL_ADC_ConfigChannel+0x43c>
  return __builtin_clz(value);
 8006364:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006366:	fab3 f383 	clz	r3, r3
 800636a:	b2db      	uxtb	r3, r3
 800636c:	3301      	adds	r3, #1
 800636e:	f003 031f 	and.w	r3, r3, #31
 8006372:	2b09      	cmp	r3, #9
 8006374:	bf94      	ite	ls
 8006376:	2301      	movls	r3, #1
 8006378:	2300      	movhi	r3, #0
 800637a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800637c:	2b00      	cmp	r3, #0
 800637e:	d079      	beq.n	8006474 <HAL_ADC_ConfigChannel+0x544>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006388:	2b00      	cmp	r3, #0
 800638a:	d107      	bne.n	800639c <HAL_ADC_ConfigChannel+0x46c>
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	0e9b      	lsrs	r3, r3, #26
 8006392:	3301      	adds	r3, #1
 8006394:	069b      	lsls	r3, r3, #26
 8006396:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800639a:	e015      	b.n	80063c8 <HAL_ADC_ConfigChannel+0x498>
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063a4:	fa93 f3a3 	rbit	r3, r3
 80063a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80063aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063ac:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80063ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d101      	bne.n	80063b8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80063b4:	2320      	movs	r3, #32
 80063b6:	e003      	b.n	80063c0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80063b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063ba:	fab3 f383 	clz	r3, r3
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	3301      	adds	r3, #1
 80063c2:	069b      	lsls	r3, r3, #26
 80063c4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d109      	bne.n	80063e8 <HAL_ADC_ConfigChannel+0x4b8>
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	0e9b      	lsrs	r3, r3, #26
 80063da:	3301      	adds	r3, #1
 80063dc:	f003 031f 	and.w	r3, r3, #31
 80063e0:	2101      	movs	r1, #1
 80063e2:	fa01 f303 	lsl.w	r3, r1, r3
 80063e6:	e017      	b.n	8006418 <HAL_ADC_ConfigChannel+0x4e8>
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063f0:	fa93 f3a3 	rbit	r3, r3
 80063f4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80063f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80063fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d101      	bne.n	8006404 <HAL_ADC_ConfigChannel+0x4d4>
    return 32U;
 8006400:	2320      	movs	r3, #32
 8006402:	e003      	b.n	800640c <HAL_ADC_ConfigChannel+0x4dc>
  return __builtin_clz(value);
 8006404:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006406:	fab3 f383 	clz	r3, r3
 800640a:	b2db      	uxtb	r3, r3
 800640c:	3301      	adds	r3, #1
 800640e:	f003 031f 	and.w	r3, r3, #31
 8006412:	2101      	movs	r1, #1
 8006414:	fa01 f303 	lsl.w	r3, r1, r3
 8006418:	ea42 0103 	orr.w	r1, r2, r3
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10a      	bne.n	800643e <HAL_ADC_ConfigChannel+0x50e>
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	0e9b      	lsrs	r3, r3, #26
 800642e:	3301      	adds	r3, #1
 8006430:	f003 021f 	and.w	r2, r3, #31
 8006434:	4613      	mov	r3, r2
 8006436:	005b      	lsls	r3, r3, #1
 8006438:	4413      	add	r3, r2
 800643a:	051b      	lsls	r3, r3, #20
 800643c:	e018      	b.n	8006470 <HAL_ADC_ConfigChannel+0x540>
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006446:	fa93 f3a3 	rbit	r3, r3
 800644a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800644c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800644e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8006450:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006452:	2b00      	cmp	r3, #0
 8006454:	d101      	bne.n	800645a <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8006456:	2320      	movs	r3, #32
 8006458:	e003      	b.n	8006462 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800645a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800645c:	fab3 f383 	clz	r3, r3
 8006460:	b2db      	uxtb	r3, r3
 8006462:	3301      	adds	r3, #1
 8006464:	f003 021f 	and.w	r2, r3, #31
 8006468:	4613      	mov	r3, r2
 800646a:	005b      	lsls	r3, r3, #1
 800646c:	4413      	add	r3, r2
 800646e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006470:	430b      	orrs	r3, r1
 8006472:	e080      	b.n	8006576 <HAL_ADC_ConfigChannel+0x646>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800647c:	2b00      	cmp	r3, #0
 800647e:	d107      	bne.n	8006490 <HAL_ADC_ConfigChannel+0x560>
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	0e9b      	lsrs	r3, r3, #26
 8006486:	3301      	adds	r3, #1
 8006488:	069b      	lsls	r3, r3, #26
 800648a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800648e:	e015      	b.n	80064bc <HAL_ADC_ConfigChannel+0x58c>
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006498:	fa93 f3a3 	rbit	r3, r3
 800649c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800649e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80064a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d101      	bne.n	80064ac <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 80064a8:	2320      	movs	r3, #32
 80064aa:	e003      	b.n	80064b4 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 80064ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ae:	fab3 f383 	clz	r3, r3
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	3301      	adds	r3, #1
 80064b6:	069b      	lsls	r3, r3, #26
 80064b8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d109      	bne.n	80064dc <HAL_ADC_ConfigChannel+0x5ac>
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	0e9b      	lsrs	r3, r3, #26
 80064ce:	3301      	adds	r3, #1
 80064d0:	f003 031f 	and.w	r3, r3, #31
 80064d4:	2101      	movs	r1, #1
 80064d6:	fa01 f303 	lsl.w	r3, r1, r3
 80064da:	e017      	b.n	800650c <HAL_ADC_ConfigChannel+0x5dc>
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064e2:	6a3b      	ldr	r3, [r7, #32]
 80064e4:	fa93 f3a3 	rbit	r3, r3
 80064e8:	61fb      	str	r3, [r7, #28]
  return result;
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80064ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d101      	bne.n	80064f8 <HAL_ADC_ConfigChannel+0x5c8>
    return 32U;
 80064f4:	2320      	movs	r3, #32
 80064f6:	e003      	b.n	8006500 <HAL_ADC_ConfigChannel+0x5d0>
  return __builtin_clz(value);
 80064f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fa:	fab3 f383 	clz	r3, r3
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	3301      	adds	r3, #1
 8006502:	f003 031f 	and.w	r3, r3, #31
 8006506:	2101      	movs	r1, #1
 8006508:	fa01 f303 	lsl.w	r3, r1, r3
 800650c:	ea42 0103 	orr.w	r1, r2, r3
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10d      	bne.n	8006538 <HAL_ADC_ConfigChannel+0x608>
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	0e9b      	lsrs	r3, r3, #26
 8006522:	3301      	adds	r3, #1
 8006524:	f003 021f 	and.w	r2, r3, #31
 8006528:	4613      	mov	r3, r2
 800652a:	005b      	lsls	r3, r3, #1
 800652c:	4413      	add	r3, r2
 800652e:	3b1e      	subs	r3, #30
 8006530:	051b      	lsls	r3, r3, #20
 8006532:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006536:	e01d      	b.n	8006574 <HAL_ADC_ConfigChannel+0x644>
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	fa93 f3a3 	rbit	r3, r3
 8006544:	613b      	str	r3, [r7, #16]
  return result;
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d103      	bne.n	8006558 <HAL_ADC_ConfigChannel+0x628>
    return 32U;
 8006550:	2320      	movs	r3, #32
 8006552:	e005      	b.n	8006560 <HAL_ADC_ConfigChannel+0x630>
 8006554:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	fab3 f383 	clz	r3, r3
 800655e:	b2db      	uxtb	r3, r3
 8006560:	3301      	adds	r3, #1
 8006562:	f003 021f 	and.w	r2, r3, #31
 8006566:	4613      	mov	r3, r2
 8006568:	005b      	lsls	r3, r3, #1
 800656a:	4413      	add	r3, r2
 800656c:	3b1e      	subs	r3, #30
 800656e:	051b      	lsls	r3, r3, #20
 8006570:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006574:	430b      	orrs	r3, r1
                                      sConfig->SamplingTime);
 8006576:	683a      	ldr	r2, [r7, #0]
 8006578:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800657a:	4619      	mov	r1, r3
 800657c:	f7ff f82b 	bl	80055d6 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	681a      	ldr	r2, [r3, #0]
 8006584:	4b45      	ldr	r3, [pc, #276]	@ (800669c <HAL_ADC_ConfigChannel+0x76c>)
 8006586:	4013      	ands	r3, r2
 8006588:	2b00      	cmp	r3, #0
 800658a:	d07c      	beq.n	8006686 <HAL_ADC_ConfigChannel+0x756>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800658c:	4844      	ldr	r0, [pc, #272]	@ (80066a0 <HAL_ADC_ConfigChannel+0x770>)
 800658e:	f7fe ff5f 	bl	8005450 <LL_ADC_GetCommonPathInternalCh>
 8006592:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006596:	4843      	ldr	r0, [pc, #268]	@ (80066a4 <HAL_ADC_ConfigChannel+0x774>)
 8006598:	f7ff f8ce 	bl	8005738 <LL_ADC_IsEnabled>
 800659c:	4603      	mov	r3, r0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d15e      	bne.n	8006660 <HAL_ADC_ConfigChannel+0x730>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a40      	ldr	r2, [pc, #256]	@ (80066a8 <HAL_ADC_ConfigChannel+0x778>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d127      	bne.n	80065fc <HAL_ADC_ConfigChannel+0x6cc>
 80065ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80065b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d121      	bne.n	80065fc <HAL_ADC_ConfigChannel+0x6cc>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a39      	ldr	r2, [pc, #228]	@ (80066a4 <HAL_ADC_ConfigChannel+0x774>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d161      	bne.n	8006686 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80065c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80065c6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80065ca:	4619      	mov	r1, r3
 80065cc:	4834      	ldr	r0, [pc, #208]	@ (80066a0 <HAL_ADC_ConfigChannel+0x770>)
 80065ce:	f7fe ff2c 	bl	800542a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80065d2:	4b36      	ldr	r3, [pc, #216]	@ (80066ac <HAL_ADC_ConfigChannel+0x77c>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	099b      	lsrs	r3, r3, #6
 80065d8:	4a35      	ldr	r2, [pc, #212]	@ (80066b0 <HAL_ADC_ConfigChannel+0x780>)
 80065da:	fba2 2303 	umull	r2, r3, r2, r3
 80065de:	099b      	lsrs	r3, r3, #6
 80065e0:	1c5a      	adds	r2, r3, #1
 80065e2:	4613      	mov	r3, r2
 80065e4:	005b      	lsls	r3, r3, #1
 80065e6:	4413      	add	r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80065ec:	e002      	b.n	80065f4 <HAL_ADC_ConfigChannel+0x6c4>
              {
                wait_loop_index--;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	3b01      	subs	r3, #1
 80065f2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d1f9      	bne.n	80065ee <HAL_ADC_ConfigChannel+0x6be>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80065fa:	e044      	b.n	8006686 <HAL_ADC_ConfigChannel+0x756>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a2c      	ldr	r2, [pc, #176]	@ (80066b4 <HAL_ADC_ConfigChannel+0x784>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d113      	bne.n	800662e <HAL_ADC_ConfigChannel+0x6fe>
 8006606:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800660a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d10d      	bne.n	800662e <HAL_ADC_ConfigChannel+0x6fe>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a23      	ldr	r2, [pc, #140]	@ (80066a4 <HAL_ADC_ConfigChannel+0x774>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d134      	bne.n	8006686 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800661c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006620:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006624:	4619      	mov	r1, r3
 8006626:	481e      	ldr	r0, [pc, #120]	@ (80066a0 <HAL_ADC_ConfigChannel+0x770>)
 8006628:	f7fe feff 	bl	800542a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800662c:	e02b      	b.n	8006686 <HAL_ADC_ConfigChannel+0x756>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a21      	ldr	r2, [pc, #132]	@ (80066b8 <HAL_ADC_ConfigChannel+0x788>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d126      	bne.n	8006686 <HAL_ADC_ConfigChannel+0x756>
 8006638:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800663c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006640:	2b00      	cmp	r3, #0
 8006642:	d120      	bne.n	8006686 <HAL_ADC_ConfigChannel+0x756>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	4a16      	ldr	r2, [pc, #88]	@ (80066a4 <HAL_ADC_ConfigChannel+0x774>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d11b      	bne.n	8006686 <HAL_ADC_ConfigChannel+0x756>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800664e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006652:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006656:	4619      	mov	r1, r3
 8006658:	4811      	ldr	r0, [pc, #68]	@ (80066a0 <HAL_ADC_ConfigChannel+0x770>)
 800665a:	f7fe fee6 	bl	800542a <LL_ADC_SetCommonPathInternalCh>
 800665e:	e012      	b.n	8006686 <HAL_ADC_ConfigChannel+0x756>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006664:	f043 0220 	orr.w	r2, r3, #32
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8006672:	e008      	b.n	8006686 <HAL_ADC_ConfigChannel+0x756>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006678:	f043 0220 	orr.w	r2, r3, #32
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
#endif /* ADC_SUPPORT_2_5_MSPS */

  /* Return function status */
  return tmp_hal_status;
 800668e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8006692:	4618      	mov	r0, r3
 8006694:	37d8      	adds	r7, #216	@ 0xd8
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	80080000 	.word	0x80080000
 80066a0:	50040300 	.word	0x50040300
 80066a4:	50040000 	.word	0x50040000
 80066a8:	c7520000 	.word	0xc7520000
 80066ac:	20000010 	.word	0x20000010
 80066b0:	053e2d63 	.word	0x053e2d63
 80066b4:	cb840000 	.word	0xcb840000
 80066b8:	80000001 	.word	0x80000001

080066bc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b084      	sub	sp, #16
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80066c4:	2300      	movs	r3, #0
 80066c6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4618      	mov	r0, r3
 80066ce:	f7ff f833 	bl	8005738 <LL_ADC_IsEnabled>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d15e      	bne.n	8006796 <ADC_Enable+0xda>
  {
    /* Check if conditions to enable the ADC are fulfilled */
#if  defined(ADC_SUPPORT_2_5_MSPS)
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
#else
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	689a      	ldr	r2, [r3, #8]
 80066de:	4b30      	ldr	r3, [pc, #192]	@ (80067a0 <ADC_Enable+0xe4>)
 80066e0:	4013      	ands	r3, r2
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00d      	beq.n	8006702 <ADC_Enable+0x46>
#endif /* ADC_SUPPORT_2_5_MSPS */
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066ea:	f043 0210 	orr.w	r2, r3, #16
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80066f6:	f043 0201 	orr.w	r2, r3, #1
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e04a      	b.n	8006798 <ADC_Enable+0xdc>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4618      	mov	r0, r3
 8006708:	f7ff f802 	bl	8005710 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800670c:	4825      	ldr	r0, [pc, #148]	@ (80067a4 <ADC_Enable+0xe8>)
 800670e:	f7fe fe9f 	bl	8005450 <LL_ADC_GetCommonPathInternalCh>
 8006712:	4603      	mov	r3, r0
 8006714:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00f      	beq.n	800673c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800671c:	4b22      	ldr	r3, [pc, #136]	@ (80067a8 <ADC_Enable+0xec>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	099b      	lsrs	r3, r3, #6
 8006722:	4a22      	ldr	r2, [pc, #136]	@ (80067ac <ADC_Enable+0xf0>)
 8006724:	fba2 2303 	umull	r2, r3, r2, r3
 8006728:	099b      	lsrs	r3, r3, #6
 800672a:	3301      	adds	r3, #1
 800672c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800672e:	e002      	b.n	8006736 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	3b01      	subs	r3, #1
 8006734:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d1f9      	bne.n	8006730 <ADC_Enable+0x74>
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
#endif /*ADC_SUPPORT_2_5_MSPS */
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800673c:	f7fe fe26 	bl	800538c <HAL_GetTick>
 8006740:	60f8      	str	r0, [r7, #12]
      
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006742:	e021      	b.n	8006788 <ADC_Enable+0xcc>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if(LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4618      	mov	r0, r3
 800674a:	f7fe fff5 	bl	8005738 <LL_ADC_IsEnabled>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d104      	bne.n	800675e <ADC_Enable+0xa2>
        {
          LL_ADC_Enable(hadc->Instance);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4618      	mov	r0, r3
 800675a:	f7fe ffd9 	bl	8005710 <LL_ADC_Enable>
        }
        
        if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800675e:	f7fe fe15 	bl	800538c <HAL_GetTick>
 8006762:	4602      	mov	r2, r0
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	2b02      	cmp	r3, #2
 800676a:	d90d      	bls.n	8006788 <ADC_Enable+0xcc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006770:	f043 0210 	orr.w	r2, r3, #16
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	655a      	str	r2, [r3, #84]	@ 0x54
          
          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800677c:	f043 0201 	orr.w	r2, r3, #1
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	659a      	str	r2, [r3, #88]	@ 0x58
          
          return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e007      	b.n	8006798 <ADC_Enable+0xdc>
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	2b01      	cmp	r3, #1
 8006794:	d1d6      	bne.n	8006744 <ADC_Enable+0x88>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	8000003f 	.word	0x8000003f
 80067a4:	50040300 	.word	0x50040300
 80067a8:	20000010 	.word	0x20000010
 80067ac:	053e2d63 	.word	0x053e2d63

080067b0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067bc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067c2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d14b      	bne.n	8006862 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ce:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	655a      	str	r2, [r3, #84]	@ 0x54
        }
      }
    }
    
#else
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 0308 	and.w	r3, r3, #8
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d021      	beq.n	8006828 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7fe fe94 	bl	8005516 <LL_ADC_REG_IsTriggerSourceSWStart>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d032      	beq.n	800685a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68db      	ldr	r3, [r3, #12]
 80067fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d12b      	bne.n	800685a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006806:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006812:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d11f      	bne.n	800685a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800681e:	f043 0201 	orr.w	r2, r3, #1
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	655a      	str	r2, [r3, #84]	@ 0x54
 8006826:	e018      	b.n	800685a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	f003 0302 	and.w	r3, r3, #2
 8006832:	2b00      	cmp	r3, #0
 8006834:	d111      	bne.n	800685a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800683a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006846:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800684a:	2b00      	cmp	r3, #0
 800684c:	d105      	bne.n	800685a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006852:	f043 0201 	orr.w	r2, r3, #1
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f7ff fb40 	bl	8005ee0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006860:	e00e      	b.n	8006880 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006866:	f003 0310 	and.w	r3, r3, #16
 800686a:	2b00      	cmp	r3, #0
 800686c:	d003      	beq.n	8006876 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800686e:	68f8      	ldr	r0, [r7, #12]
 8006870:	f7ff fb54 	bl	8005f1c <HAL_ADC_ErrorCallback>
}
 8006874:	e004      	b.n	8006880 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800687a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	4798      	blx	r3
}
 8006880:	bf00      	nop
 8006882:	3710      	adds	r7, #16
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006894:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f7ff fb2c 	bl	8005ef4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800689c:	bf00      	nop
 800689e:	3710      	adds	r7, #16
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068b0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068c2:	f043 0204 	orr.w	r2, r3, #4
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f7ff fb26 	bl	8005f1c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80068d0:	bf00      	nop
 80068d2:	3710      	adds	r7, #16
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80068e0:	bf00      	nop
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80068f4:	bf00      	nop
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006930:	bf00      	nop
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f003 0307 	and.w	r3, r3, #7
 800694a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800694c:	4b0c      	ldr	r3, [pc, #48]	@ (8006980 <__NVIC_SetPriorityGrouping+0x44>)
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006952:	68ba      	ldr	r2, [r7, #8]
 8006954:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006958:	4013      	ands	r3, r2
 800695a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006964:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006968:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800696c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800696e:	4a04      	ldr	r2, [pc, #16]	@ (8006980 <__NVIC_SetPriorityGrouping+0x44>)
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	60d3      	str	r3, [r2, #12]
}
 8006974:	bf00      	nop
 8006976:	3714      	adds	r7, #20
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr
 8006980:	e000ed00 	.word	0xe000ed00

08006984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006984:	b480      	push	{r7}
 8006986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006988:	4b04      	ldr	r3, [pc, #16]	@ (800699c <__NVIC_GetPriorityGrouping+0x18>)
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	0a1b      	lsrs	r3, r3, #8
 800698e:	f003 0307 	and.w	r3, r3, #7
}
 8006992:	4618      	mov	r0, r3
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr
 800699c:	e000ed00 	.word	0xe000ed00

080069a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	4603      	mov	r3, r0
 80069a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	db0b      	blt.n	80069ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80069b2:	79fb      	ldrb	r3, [r7, #7]
 80069b4:	f003 021f 	and.w	r2, r3, #31
 80069b8:	4907      	ldr	r1, [pc, #28]	@ (80069d8 <__NVIC_EnableIRQ+0x38>)
 80069ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069be:	095b      	lsrs	r3, r3, #5
 80069c0:	2001      	movs	r0, #1
 80069c2:	fa00 f202 	lsl.w	r2, r0, r2
 80069c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80069ca:	bf00      	nop
 80069cc:	370c      	adds	r7, #12
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	e000e100 	.word	0xe000e100

080069dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	4603      	mov	r3, r0
 80069e4:	6039      	str	r1, [r7, #0]
 80069e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	db0a      	blt.n	8006a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	b2da      	uxtb	r2, r3
 80069f4:	490c      	ldr	r1, [pc, #48]	@ (8006a28 <__NVIC_SetPriority+0x4c>)
 80069f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069fa:	0112      	lsls	r2, r2, #4
 80069fc:	b2d2      	uxtb	r2, r2
 80069fe:	440b      	add	r3, r1
 8006a00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006a04:	e00a      	b.n	8006a1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	b2da      	uxtb	r2, r3
 8006a0a:	4908      	ldr	r1, [pc, #32]	@ (8006a2c <__NVIC_SetPriority+0x50>)
 8006a0c:	79fb      	ldrb	r3, [r7, #7]
 8006a0e:	f003 030f 	and.w	r3, r3, #15
 8006a12:	3b04      	subs	r3, #4
 8006a14:	0112      	lsls	r2, r2, #4
 8006a16:	b2d2      	uxtb	r2, r2
 8006a18:	440b      	add	r3, r1
 8006a1a:	761a      	strb	r2, [r3, #24]
}
 8006a1c:	bf00      	nop
 8006a1e:	370c      	adds	r7, #12
 8006a20:	46bd      	mov	sp, r7
 8006a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a26:	4770      	bx	lr
 8006a28:	e000e100 	.word	0xe000e100
 8006a2c:	e000ed00 	.word	0xe000ed00

08006a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b089      	sub	sp, #36	@ 0x24
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f003 0307 	and.w	r3, r3, #7
 8006a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	f1c3 0307 	rsb	r3, r3, #7
 8006a4a:	2b04      	cmp	r3, #4
 8006a4c:	bf28      	it	cs
 8006a4e:	2304      	movcs	r3, #4
 8006a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	3304      	adds	r3, #4
 8006a56:	2b06      	cmp	r3, #6
 8006a58:	d902      	bls.n	8006a60 <NVIC_EncodePriority+0x30>
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	3b03      	subs	r3, #3
 8006a5e:	e000      	b.n	8006a62 <NVIC_EncodePriority+0x32>
 8006a60:	2300      	movs	r3, #0
 8006a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a64:	f04f 32ff 	mov.w	r2, #4294967295
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6e:	43da      	mvns	r2, r3
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	401a      	ands	r2, r3
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006a78:	f04f 31ff 	mov.w	r1, #4294967295
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a82:	43d9      	mvns	r1, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a88:	4313      	orrs	r3, r2
         );
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3724      	adds	r7, #36	@ 0x24
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
	...

08006a98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006aa8:	d301      	bcc.n	8006aae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e00f      	b.n	8006ace <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006aae:	4a0a      	ldr	r2, [pc, #40]	@ (8006ad8 <SysTick_Config+0x40>)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006ab6:	210f      	movs	r1, #15
 8006ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8006abc:	f7ff ff8e 	bl	80069dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006ac0:	4b05      	ldr	r3, [pc, #20]	@ (8006ad8 <SysTick_Config+0x40>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006ac6:	4b04      	ldr	r3, [pc, #16]	@ (8006ad8 <SysTick_Config+0x40>)
 8006ac8:	2207      	movs	r2, #7
 8006aca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3708      	adds	r7, #8
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	e000e010 	.word	0xe000e010

08006adc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b082      	sub	sp, #8
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f7ff ff29 	bl	800693c <__NVIC_SetPriorityGrouping>
}
 8006aea:	bf00      	nop
 8006aec:	3708      	adds	r7, #8
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006af2:	b580      	push	{r7, lr}
 8006af4:	b086      	sub	sp, #24
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	4603      	mov	r3, r0
 8006afa:	60b9      	str	r1, [r7, #8]
 8006afc:	607a      	str	r2, [r7, #4]
 8006afe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006b00:	f7ff ff40 	bl	8006984 <__NVIC_GetPriorityGrouping>
 8006b04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	68b9      	ldr	r1, [r7, #8]
 8006b0a:	6978      	ldr	r0, [r7, #20]
 8006b0c:	f7ff ff90 	bl	8006a30 <NVIC_EncodePriority>
 8006b10:	4602      	mov	r2, r0
 8006b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b16:	4611      	mov	r1, r2
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f7ff ff5f 	bl	80069dc <__NVIC_SetPriority>
}
 8006b1e:	bf00      	nop
 8006b20:	3718      	adds	r7, #24
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b082      	sub	sp, #8
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b34:	4618      	mov	r0, r3
 8006b36:	f7ff ff33 	bl	80069a0 <__NVIC_EnableIRQ>
}
 8006b3a:	bf00      	nop
 8006b3c:	3708      	adds	r7, #8
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b082      	sub	sp, #8
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f7ff ffa4 	bl	8006a98 <SysTick_Config>
 8006b50:	4603      	mov	r3, r0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3708      	adds	r7, #8
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
	...

08006b5c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d101      	bne.n	8006b6e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e08e      	b.n	8006c8c <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	461a      	mov	r2, r3
 8006b74:	4b47      	ldr	r3, [pc, #284]	@ (8006c94 <HAL_DMA_Init+0x138>)
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d80f      	bhi.n	8006b9a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	461a      	mov	r2, r3
 8006b80:	4b45      	ldr	r3, [pc, #276]	@ (8006c98 <HAL_DMA_Init+0x13c>)
 8006b82:	4413      	add	r3, r2
 8006b84:	4a45      	ldr	r2, [pc, #276]	@ (8006c9c <HAL_DMA_Init+0x140>)
 8006b86:	fba2 2303 	umull	r2, r3, r2, r3
 8006b8a:	091b      	lsrs	r3, r3, #4
 8006b8c:	009a      	lsls	r2, r3, #2
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a42      	ldr	r2, [pc, #264]	@ (8006ca0 <HAL_DMA_Init+0x144>)
 8006b96:	641a      	str	r2, [r3, #64]	@ 0x40
 8006b98:	e00e      	b.n	8006bb8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	4b40      	ldr	r3, [pc, #256]	@ (8006ca4 <HAL_DMA_Init+0x148>)
 8006ba2:	4413      	add	r3, r2
 8006ba4:	4a3d      	ldr	r2, [pc, #244]	@ (8006c9c <HAL_DMA_Init+0x140>)
 8006ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8006baa:	091b      	lsrs	r3, r3, #4
 8006bac:	009a      	lsls	r2, r3, #2
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a3c      	ldr	r2, [pc, #240]	@ (8006ca8 <HAL_DMA_Init+0x14c>)
 8006bb6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2202      	movs	r2, #2
 8006bbc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006bce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bd2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006bdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	691b      	ldr	r3, [r3, #16]
 8006be2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006be8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	699b      	ldr	r3, [r3, #24]
 8006bee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006bf4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
 8006bfa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 fa24 	bl	8007058 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c18:	d102      	bne.n	8006c20 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	685a      	ldr	r2, [r3, #4]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c28:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8006c2c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006c36:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d010      	beq.n	8006c62 <HAL_DMA_Init+0x106>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	2b04      	cmp	r3, #4
 8006c46:	d80c      	bhi.n	8006c62 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 fa43 	bl	80070d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c52:	2200      	movs	r2, #0
 8006c54:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006c5e:	605a      	str	r2, [r3, #4]
 8006c60:	e008      	b.n	8006c74 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2200      	movs	r2, #0
 8006c72:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	40020407 	.word	0x40020407
 8006c98:	bffdfff8 	.word	0xbffdfff8
 8006c9c:	cccccccd 	.word	0xcccccccd
 8006ca0:	40020000 	.word	0x40020000
 8006ca4:	bffdfbf8 	.word	0xbffdfbf8
 8006ca8:	40020400 	.word	0x40020400

08006cac <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b086      	sub	sp, #24
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	607a      	str	r2, [r7, #4]
 8006cb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d101      	bne.n	8006ccc <HAL_DMA_Start_IT+0x20>
 8006cc8:	2302      	movs	r3, #2
 8006cca:	e066      	b.n	8006d9a <HAL_DMA_Start_IT+0xee>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d155      	bne.n	8006d8c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f022 0201 	bic.w	r2, r2, #1
 8006cfc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	68b9      	ldr	r1, [r7, #8]
 8006d04:	68f8      	ldr	r0, [r7, #12]
 8006d06:	f000 f968 	bl	8006fda <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d008      	beq.n	8006d24 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f042 020e 	orr.w	r2, r2, #14
 8006d20:	601a      	str	r2, [r3, #0]
 8006d22:	e00f      	b.n	8006d44 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f022 0204 	bic.w	r2, r2, #4
 8006d32:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f042 020a 	orr.w	r2, r2, #10
 8006d42:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d007      	beq.n	8006d62 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d60:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d007      	beq.n	8006d7a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006d78:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f042 0201 	orr.w	r2, r2, #1
 8006d88:	601a      	str	r2, [r3, #0]
 8006d8a:	e005      	b.n	8006d98 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006d94:	2302      	movs	r3, #2
 8006d96:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006d98:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3718      	adds	r7, #24
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b084      	sub	sp, #16
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006daa:	2300      	movs	r3, #0
 8006dac:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b02      	cmp	r3, #2
 8006db8:	d005      	beq.n	8006dc6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2204      	movs	r2, #4
 8006dbe:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	73fb      	strb	r3, [r7, #15]
 8006dc4:	e047      	b.n	8006e56 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f022 020e 	bic.w	r2, r2, #14
 8006dd4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f022 0201 	bic.w	r2, r2, #1
 8006de4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006df0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006df4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dfa:	f003 021c 	and.w	r2, r3, #28
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e02:	2101      	movs	r1, #1
 8006e04:	fa01 f202 	lsl.w	r2, r1, r2
 8006e08:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006e12:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00c      	beq.n	8006e36 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e26:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006e2a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006e34:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2201      	movs	r2, #1
 8006e3a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d003      	beq.n	8006e56 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	4798      	blx	r3
    }
  }
  return status;
 8006e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3710      	adds	r7, #16
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b084      	sub	sp, #16
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e7c:	f003 031c 	and.w	r3, r3, #28
 8006e80:	2204      	movs	r2, #4
 8006e82:	409a      	lsls	r2, r3
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	4013      	ands	r3, r2
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d026      	beq.n	8006eda <HAL_DMA_IRQHandler+0x7a>
 8006e8c:	68bb      	ldr	r3, [r7, #8]
 8006e8e:	f003 0304 	and.w	r3, r3, #4
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d021      	beq.n	8006eda <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 0320 	and.w	r3, r3, #32
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d107      	bne.n	8006eb4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f022 0204 	bic.w	r2, r2, #4
 8006eb2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eb8:	f003 021c 	and.w	r2, r3, #28
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ec0:	2104      	movs	r1, #4
 8006ec2:	fa01 f202 	lsl.w	r2, r1, r2
 8006ec6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d071      	beq.n	8006fb4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006ed8:	e06c      	b.n	8006fb4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ede:	f003 031c 	and.w	r3, r3, #28
 8006ee2:	2202      	movs	r2, #2
 8006ee4:	409a      	lsls	r2, r3
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	4013      	ands	r3, r2
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d02e      	beq.n	8006f4c <HAL_DMA_IRQHandler+0xec>
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	f003 0302 	and.w	r3, r3, #2
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d029      	beq.n	8006f4c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0320 	and.w	r3, r3, #32
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d10b      	bne.n	8006f1e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f022 020a 	bic.w	r2, r2, #10
 8006f14:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f22:	f003 021c 	and.w	r2, r3, #28
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f2a:	2102      	movs	r1, #2
 8006f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8006f30:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d038      	beq.n	8006fb4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006f4a:	e033      	b.n	8006fb4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f50:	f003 031c 	and.w	r3, r3, #28
 8006f54:	2208      	movs	r2, #8
 8006f56:	409a      	lsls	r2, r3
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d02a      	beq.n	8006fb6 <HAL_DMA_IRQHandler+0x156>
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	f003 0308 	and.w	r3, r3, #8
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d025      	beq.n	8006fb6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f022 020e 	bic.w	r2, r2, #14
 8006f78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f7e:	f003 021c 	and.w	r2, r3, #28
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f86:	2101      	movs	r1, #1
 8006f88:	fa01 f202 	lsl.w	r2, r1, r2
 8006f8c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2201      	movs	r2, #1
 8006f92:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d004      	beq.n	8006fb6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006fb4:	bf00      	nop
 8006fb6:	bf00      	nop
}
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006fbe:	b480      	push	{r7}
 8006fc0:	b083      	sub	sp, #12
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006fcc:	b2db      	uxtb	r3, r3
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	370c      	adds	r7, #12
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr

08006fda <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b085      	sub	sp, #20
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	60f8      	str	r0, [r7, #12]
 8006fe2:	60b9      	str	r1, [r7, #8]
 8006fe4:	607a      	str	r2, [r7, #4]
 8006fe6:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006ff0:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d004      	beq.n	8007004 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007002:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007008:	f003 021c 	and.w	r2, r3, #28
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007010:	2101      	movs	r1, #1
 8007012:	fa01 f202 	lsl.w	r2, r1, r2
 8007016:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	683a      	ldr	r2, [r7, #0]
 800701e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	2b10      	cmp	r3, #16
 8007026:	d108      	bne.n	800703a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007038:	e007      	b.n	800704a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	68ba      	ldr	r2, [r7, #8]
 8007040:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	60da      	str	r2, [r3, #12]
}
 800704a:	bf00      	nop
 800704c:	3714      	adds	r7, #20
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
	...

08007058 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	461a      	mov	r2, r3
 8007066:	4b17      	ldr	r3, [pc, #92]	@ (80070c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007068:	429a      	cmp	r2, r3
 800706a:	d80a      	bhi.n	8007082 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007070:	089b      	lsrs	r3, r3, #2
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007078:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	6493      	str	r3, [r2, #72]	@ 0x48
 8007080:	e007      	b.n	8007092 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007086:	089b      	lsrs	r3, r3, #2
 8007088:	009a      	lsls	r2, r3, #2
 800708a:	4b0f      	ldr	r3, [pc, #60]	@ (80070c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800708c:	4413      	add	r3, r2
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	b2db      	uxtb	r3, r3
 8007098:	3b08      	subs	r3, #8
 800709a:	4a0c      	ldr	r2, [pc, #48]	@ (80070cc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800709c:	fba2 2303 	umull	r2, r3, r2, r3
 80070a0:	091b      	lsrs	r3, r3, #4
 80070a2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a0a      	ldr	r2, [pc, #40]	@ (80070d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80070a8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f003 031f 	and.w	r3, r3, #31
 80070b0:	2201      	movs	r2, #1
 80070b2:	409a      	lsls	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80070b8:	bf00      	nop
 80070ba:	3714      	adds	r7, #20
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr
 80070c4:	40020407 	.word	0x40020407
 80070c8:	4002081c 	.word	0x4002081c
 80070cc:	cccccccd 	.word	0xcccccccd
 80070d0:	40020880 	.word	0x40020880

080070d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b085      	sub	sp, #20
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80070e4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	4b0b      	ldr	r3, [pc, #44]	@ (8007118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80070ea:	4413      	add	r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	461a      	mov	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a09      	ldr	r2, [pc, #36]	@ (800711c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80070f8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	3b01      	subs	r3, #1
 80070fe:	f003 0303 	and.w	r3, r3, #3
 8007102:	2201      	movs	r2, #1
 8007104:	409a      	lsls	r2, r3
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800710a:	bf00      	nop
 800710c:	3714      	adds	r7, #20
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	1000823f 	.word	0x1000823f
 800711c:	40020940 	.word	0x40020940

08007120 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007120:	b480      	push	{r7}
 8007122:	b087      	sub	sp, #28
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800712a:	2300      	movs	r3, #0
 800712c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800712e:	e14c      	b.n	80073ca <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	2101      	movs	r1, #1
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	fa01 f303 	lsl.w	r3, r1, r3
 800713c:	4013      	ands	r3, r2
 800713e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	2b00      	cmp	r3, #0
 8007144:	f000 813e 	beq.w	80073c4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	f003 0303 	and.w	r3, r3, #3
 8007150:	2b01      	cmp	r3, #1
 8007152:	d005      	beq.n	8007160 <HAL_GPIO_Init+0x40>
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	f003 0303 	and.w	r3, r3, #3
 800715c:	2b02      	cmp	r3, #2
 800715e:	d130      	bne.n	80071c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	005b      	lsls	r3, r3, #1
 800716a:	2203      	movs	r2, #3
 800716c:	fa02 f303 	lsl.w	r3, r2, r3
 8007170:	43db      	mvns	r3, r3
 8007172:	693a      	ldr	r2, [r7, #16]
 8007174:	4013      	ands	r3, r2
 8007176:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	68da      	ldr	r2, [r3, #12]
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	005b      	lsls	r3, r3, #1
 8007180:	fa02 f303 	lsl.w	r3, r2, r3
 8007184:	693a      	ldr	r2, [r7, #16]
 8007186:	4313      	orrs	r3, r2
 8007188:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	693a      	ldr	r2, [r7, #16]
 800718e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007196:	2201      	movs	r2, #1
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	fa02 f303 	lsl.w	r3, r2, r3
 800719e:	43db      	mvns	r3, r3
 80071a0:	693a      	ldr	r2, [r7, #16]
 80071a2:	4013      	ands	r3, r2
 80071a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	091b      	lsrs	r3, r3, #4
 80071ac:	f003 0201 	and.w	r2, r3, #1
 80071b0:	697b      	ldr	r3, [r7, #20]
 80071b2:	fa02 f303 	lsl.w	r3, r2, r3
 80071b6:	693a      	ldr	r2, [r7, #16]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	693a      	ldr	r2, [r7, #16]
 80071c0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	f003 0303 	and.w	r3, r3, #3
 80071ca:	2b03      	cmp	r3, #3
 80071cc:	d017      	beq.n	80071fe <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	005b      	lsls	r3, r3, #1
 80071d8:	2203      	movs	r2, #3
 80071da:	fa02 f303 	lsl.w	r3, r2, r3
 80071de:	43db      	mvns	r3, r3
 80071e0:	693a      	ldr	r2, [r7, #16]
 80071e2:	4013      	ands	r3, r2
 80071e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	689a      	ldr	r2, [r3, #8]
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	005b      	lsls	r3, r3, #1
 80071ee:	fa02 f303 	lsl.w	r3, r2, r3
 80071f2:	693a      	ldr	r2, [r7, #16]
 80071f4:	4313      	orrs	r3, r2
 80071f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	693a      	ldr	r2, [r7, #16]
 80071fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	f003 0303 	and.w	r3, r3, #3
 8007206:	2b02      	cmp	r3, #2
 8007208:	d123      	bne.n	8007252 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	08da      	lsrs	r2, r3, #3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	3208      	adds	r2, #8
 8007212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007216:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	f003 0307 	and.w	r3, r3, #7
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	220f      	movs	r2, #15
 8007222:	fa02 f303 	lsl.w	r3, r2, r3
 8007226:	43db      	mvns	r3, r3
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	4013      	ands	r3, r2
 800722c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	691a      	ldr	r2, [r3, #16]
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	f003 0307 	and.w	r3, r3, #7
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	fa02 f303 	lsl.w	r3, r2, r3
 800723e:	693a      	ldr	r2, [r7, #16]
 8007240:	4313      	orrs	r3, r2
 8007242:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	08da      	lsrs	r2, r3, #3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	3208      	adds	r2, #8
 800724c:	6939      	ldr	r1, [r7, #16]
 800724e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	005b      	lsls	r3, r3, #1
 800725c:	2203      	movs	r2, #3
 800725e:	fa02 f303 	lsl.w	r3, r2, r3
 8007262:	43db      	mvns	r3, r3
 8007264:	693a      	ldr	r2, [r7, #16]
 8007266:	4013      	ands	r3, r2
 8007268:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	f003 0203 	and.w	r2, r3, #3
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	005b      	lsls	r3, r3, #1
 8007276:	fa02 f303 	lsl.w	r3, r2, r3
 800727a:	693a      	ldr	r2, [r7, #16]
 800727c:	4313      	orrs	r3, r2
 800727e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	693a      	ldr	r2, [r7, #16]
 8007284:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800728e:	2b00      	cmp	r3, #0
 8007290:	f000 8098 	beq.w	80073c4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8007294:	4a54      	ldr	r2, [pc, #336]	@ (80073e8 <HAL_GPIO_Init+0x2c8>)
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	089b      	lsrs	r3, r3, #2
 800729a:	3302      	adds	r3, #2
 800729c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	f003 0303 	and.w	r3, r3, #3
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	220f      	movs	r2, #15
 80072ac:	fa02 f303 	lsl.w	r3, r2, r3
 80072b0:	43db      	mvns	r3, r3
 80072b2:	693a      	ldr	r2, [r7, #16]
 80072b4:	4013      	ands	r3, r2
 80072b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80072be:	d019      	beq.n	80072f4 <HAL_GPIO_Init+0x1d4>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a4a      	ldr	r2, [pc, #296]	@ (80073ec <HAL_GPIO_Init+0x2cc>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d013      	beq.n	80072f0 <HAL_GPIO_Init+0x1d0>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a49      	ldr	r2, [pc, #292]	@ (80073f0 <HAL_GPIO_Init+0x2d0>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d00d      	beq.n	80072ec <HAL_GPIO_Init+0x1cc>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a48      	ldr	r2, [pc, #288]	@ (80073f4 <HAL_GPIO_Init+0x2d4>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d007      	beq.n	80072e8 <HAL_GPIO_Init+0x1c8>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a47      	ldr	r2, [pc, #284]	@ (80073f8 <HAL_GPIO_Init+0x2d8>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d101      	bne.n	80072e4 <HAL_GPIO_Init+0x1c4>
 80072e0:	2304      	movs	r3, #4
 80072e2:	e008      	b.n	80072f6 <HAL_GPIO_Init+0x1d6>
 80072e4:	2307      	movs	r3, #7
 80072e6:	e006      	b.n	80072f6 <HAL_GPIO_Init+0x1d6>
 80072e8:	2303      	movs	r3, #3
 80072ea:	e004      	b.n	80072f6 <HAL_GPIO_Init+0x1d6>
 80072ec:	2302      	movs	r3, #2
 80072ee:	e002      	b.n	80072f6 <HAL_GPIO_Init+0x1d6>
 80072f0:	2301      	movs	r3, #1
 80072f2:	e000      	b.n	80072f6 <HAL_GPIO_Init+0x1d6>
 80072f4:	2300      	movs	r3, #0
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	f002 0203 	and.w	r2, r2, #3
 80072fc:	0092      	lsls	r2, r2, #2
 80072fe:	4093      	lsls	r3, r2
 8007300:	693a      	ldr	r2, [r7, #16]
 8007302:	4313      	orrs	r3, r2
 8007304:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007306:	4938      	ldr	r1, [pc, #224]	@ (80073e8 <HAL_GPIO_Init+0x2c8>)
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	089b      	lsrs	r3, r3, #2
 800730c:	3302      	adds	r3, #2
 800730e:	693a      	ldr	r2, [r7, #16]
 8007310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007314:	4b39      	ldr	r3, [pc, #228]	@ (80073fc <HAL_GPIO_Init+0x2dc>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	43db      	mvns	r3, r3
 800731e:	693a      	ldr	r2, [r7, #16]
 8007320:	4013      	ands	r3, r2
 8007322:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d003      	beq.n	8007338 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8007330:	693a      	ldr	r2, [r7, #16]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	4313      	orrs	r3, r2
 8007336:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007338:	4a30      	ldr	r2, [pc, #192]	@ (80073fc <HAL_GPIO_Init+0x2dc>)
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800733e:	4b2f      	ldr	r3, [pc, #188]	@ (80073fc <HAL_GPIO_Init+0x2dc>)
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	43db      	mvns	r3, r3
 8007348:	693a      	ldr	r2, [r7, #16]
 800734a:	4013      	ands	r3, r2
 800734c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007356:	2b00      	cmp	r3, #0
 8007358:	d003      	beq.n	8007362 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800735a:	693a      	ldr	r2, [r7, #16]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	4313      	orrs	r3, r2
 8007360:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007362:	4a26      	ldr	r2, [pc, #152]	@ (80073fc <HAL_GPIO_Init+0x2dc>)
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007368:	4b24      	ldr	r3, [pc, #144]	@ (80073fc <HAL_GPIO_Init+0x2dc>)
 800736a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800736e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	43db      	mvns	r3, r3
 8007374:	693a      	ldr	r2, [r7, #16]
 8007376:	4013      	ands	r3, r2
 8007378:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007382:	2b00      	cmp	r3, #0
 8007384:	d003      	beq.n	800738e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8007386:	693a      	ldr	r2, [r7, #16]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	4313      	orrs	r3, r2
 800738c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800738e:	4a1b      	ldr	r2, [pc, #108]	@ (80073fc <HAL_GPIO_Init+0x2dc>)
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 8007396:	4b19      	ldr	r3, [pc, #100]	@ (80073fc <HAL_GPIO_Init+0x2dc>)
 8007398:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800739c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	43db      	mvns	r3, r3
 80073a2:	693a      	ldr	r2, [r7, #16]
 80073a4:	4013      	ands	r3, r2
 80073a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d003      	beq.n	80073bc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80073b4:	693a      	ldr	r2, [r7, #16]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80073bc:	4a0f      	ldr	r2, [pc, #60]	@ (80073fc <HAL_GPIO_Init+0x2dc>)
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	3301      	adds	r3, #1
 80073c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	fa22 f303 	lsr.w	r3, r2, r3
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f47f aeab 	bne.w	8007130 <HAL_GPIO_Init+0x10>
  }
}
 80073da:	bf00      	nop
 80073dc:	bf00      	nop
 80073de:	371c      	adds	r7, #28
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr
 80073e8:	40010000 	.word	0x40010000
 80073ec:	48000400 	.word	0x48000400
 80073f0:	48000800 	.word	0x48000800
 80073f4:	48000c00 	.word	0x48000c00
 80073f8:	48001000 	.word	0x48001000
 80073fc:	58000800 	.word	0x58000800

08007400 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	460b      	mov	r3, r1
 800740a:	807b      	strh	r3, [r7, #2]
 800740c:	4613      	mov	r3, r2
 800740e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007410:	787b      	ldrb	r3, [r7, #1]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d003      	beq.n	800741e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007416:	887a      	ldrh	r2, [r7, #2]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800741c:	e002      	b.n	8007424 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800741e:	887a      	ldrh	r2, [r7, #2]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <HAL_GPIO_TogglePin>:
  * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
  * @param GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007430:	b480      	push	{r7}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
 8007438:	460b      	mov	r3, r1
 800743a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	695b      	ldr	r3, [r3, #20]
 8007440:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007442:	887a      	ldrh	r2, [r7, #2]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	4013      	ands	r3, r2
 8007448:	041a      	lsls	r2, r3, #16
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	43d9      	mvns	r1, r3
 800744e:	887b      	ldrh	r3, [r7, #2]
 8007450:	400b      	ands	r3, r1
 8007452:	431a      	orrs	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	619a      	str	r2, [r3, #24]
}
 8007458:	bf00      	nop
 800745a:	3714      	adds	r7, #20
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr

08007464 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
 800746a:	4603      	mov	r3, r0
 800746c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800746e:	4b08      	ldr	r3, [pc, #32]	@ (8007490 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007470:	68da      	ldr	r2, [r3, #12]
 8007472:	88fb      	ldrh	r3, [r7, #6]
 8007474:	4013      	ands	r3, r2
 8007476:	2b00      	cmp	r3, #0
 8007478:	d006      	beq.n	8007488 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800747a:	4a05      	ldr	r2, [pc, #20]	@ (8007490 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800747c:	88fb      	ldrh	r3, [r7, #6]
 800747e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007480:	88fb      	ldrh	r3, [r7, #6]
 8007482:	4618      	mov	r0, r3
 8007484:	f000 f806 	bl	8007494 <HAL_GPIO_EXTI_Callback>
  }
}
 8007488:	bf00      	nop
 800748a:	3708      	adds	r7, #8
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	58000800 	.word	0x58000800

08007494 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	4603      	mov	r3, r0
 800749c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800749e:	bf00      	nop
 80074a0:	370c      	adds	r7, #12
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr

080074aa <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b082      	sub	sp, #8
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d101      	bne.n	80074bc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	e08d      	b.n	80075d8 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d106      	bne.n	80074d6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f7fd fb39 	bl	8004b48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2224      	movs	r2, #36	@ 0x24
 80074da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f022 0201 	bic.w	r2, r2, #1
 80074ec:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	685a      	ldr	r2, [r3, #4]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80074fa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	689a      	ldr	r2, [r3, #8]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800750a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d107      	bne.n	8007524 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	689a      	ldr	r2, [r3, #8]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007520:	609a      	str	r2, [r3, #8]
 8007522:	e006      	b.n	8007532 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	689a      	ldr	r2, [r3, #8]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8007530:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	2b02      	cmp	r3, #2
 8007538:	d108      	bne.n	800754c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	685a      	ldr	r2, [r3, #4]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007548:	605a      	str	r2, [r3, #4]
 800754a:	e007      	b.n	800755c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	685a      	ldr	r2, [r3, #4]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800755a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	6812      	ldr	r2, [r2, #0]
 8007566:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800756a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800756e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68da      	ldr	r2, [r3, #12]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800757e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	691a      	ldr	r2, [r3, #16]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	695b      	ldr	r3, [r3, #20]
 8007588:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	699b      	ldr	r3, [r3, #24]
 8007590:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	430a      	orrs	r2, r1
 8007598:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	69d9      	ldr	r1, [r3, #28]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a1a      	ldr	r2, [r3, #32]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	430a      	orrs	r2, r1
 80075a8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f042 0201 	orr.w	r2, r2, #1
 80075b8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2220      	movs	r2, #32
 80075c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80075d6:	2300      	movs	r3, #0
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3708      	adds	r7, #8
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b088      	sub	sp, #32
 80075e4:	af02      	add	r7, sp, #8
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	607a      	str	r2, [r7, #4]
 80075ea:	461a      	mov	r2, r3
 80075ec:	460b      	mov	r3, r1
 80075ee:	817b      	strh	r3, [r7, #10]
 80075f0:	4613      	mov	r3, r2
 80075f2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	2b20      	cmp	r3, #32
 80075fe:	f040 80fd 	bne.w	80077fc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007608:	2b01      	cmp	r3, #1
 800760a:	d101      	bne.n	8007610 <HAL_I2C_Master_Transmit+0x30>
 800760c:	2302      	movs	r3, #2
 800760e:	e0f6      	b.n	80077fe <HAL_I2C_Master_Transmit+0x21e>
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2201      	movs	r2, #1
 8007614:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007618:	f7fd feb8 	bl	800538c <HAL_GetTick>
 800761c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	9300      	str	r3, [sp, #0]
 8007622:	2319      	movs	r3, #25
 8007624:	2201      	movs	r2, #1
 8007626:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800762a:	68f8      	ldr	r0, [r7, #12]
 800762c:	f000 ff85 	bl	800853a <I2C_WaitOnFlagUntilTimeout>
 8007630:	4603      	mov	r3, r0
 8007632:	2b00      	cmp	r3, #0
 8007634:	d001      	beq.n	800763a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e0e1      	b.n	80077fe <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2221      	movs	r2, #33	@ 0x21
 800763e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2210      	movs	r2, #16
 8007646:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	893a      	ldrh	r2, [r7, #8]
 800765a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2200      	movs	r2, #0
 8007660:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007666:	b29b      	uxth	r3, r3
 8007668:	2bff      	cmp	r3, #255	@ 0xff
 800766a:	d906      	bls.n	800767a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	22ff      	movs	r2, #255	@ 0xff
 8007670:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007672:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007676:	617b      	str	r3, [r7, #20]
 8007678:	e007      	b.n	800768a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800767e:	b29a      	uxth	r2, r3
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007684:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007688:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800768e:	2b00      	cmp	r3, #0
 8007690:	d024      	beq.n	80076dc <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007696:	781a      	ldrb	r2, [r3, #0]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076a2:	1c5a      	adds	r2, r3, #1
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	3b01      	subs	r3, #1
 80076b0:	b29a      	uxth	r2, r3
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076ba:	3b01      	subs	r3, #1
 80076bc:	b29a      	uxth	r2, r3
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	3301      	adds	r3, #1
 80076ca:	b2da      	uxtb	r2, r3
 80076cc:	8979      	ldrh	r1, [r7, #10]
 80076ce:	4b4e      	ldr	r3, [pc, #312]	@ (8007808 <HAL_I2C_Master_Transmit+0x228>)
 80076d0:	9300      	str	r3, [sp, #0]
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f001 f97f 	bl	80089d8 <I2C_TransferConfig>
 80076da:	e066      	b.n	80077aa <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	8979      	ldrh	r1, [r7, #10]
 80076e4:	4b48      	ldr	r3, [pc, #288]	@ (8007808 <HAL_I2C_Master_Transmit+0x228>)
 80076e6:	9300      	str	r3, [sp, #0]
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f001 f974 	bl	80089d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80076f0:	e05b      	b.n	80077aa <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80076f2:	693a      	ldr	r2, [r7, #16]
 80076f4:	6a39      	ldr	r1, [r7, #32]
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f000 ff78 	bl	80085ec <I2C_WaitOnTXISFlagUntilTimeout>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d001      	beq.n	8007706 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e07b      	b.n	80077fe <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800770a:	781a      	ldrb	r2, [r3, #0]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007716:	1c5a      	adds	r2, r3, #1
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007720:	b29b      	uxth	r3, r3
 8007722:	3b01      	subs	r3, #1
 8007724:	b29a      	uxth	r2, r3
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800772e:	3b01      	subs	r3, #1
 8007730:	b29a      	uxth	r2, r3
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800773a:	b29b      	uxth	r3, r3
 800773c:	2b00      	cmp	r3, #0
 800773e:	d034      	beq.n	80077aa <HAL_I2C_Master_Transmit+0x1ca>
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007744:	2b00      	cmp	r3, #0
 8007746:	d130      	bne.n	80077aa <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	9300      	str	r3, [sp, #0]
 800774c:	6a3b      	ldr	r3, [r7, #32]
 800774e:	2200      	movs	r2, #0
 8007750:	2180      	movs	r1, #128	@ 0x80
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f000 fef1 	bl	800853a <I2C_WaitOnFlagUntilTimeout>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d001      	beq.n	8007762 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	e04d      	b.n	80077fe <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007766:	b29b      	uxth	r3, r3
 8007768:	2bff      	cmp	r3, #255	@ 0xff
 800776a:	d90e      	bls.n	800778a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	22ff      	movs	r2, #255	@ 0xff
 8007770:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007776:	b2da      	uxtb	r2, r3
 8007778:	8979      	ldrh	r1, [r7, #10]
 800777a:	2300      	movs	r3, #0
 800777c:	9300      	str	r3, [sp, #0]
 800777e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007782:	68f8      	ldr	r0, [r7, #12]
 8007784:	f001 f928 	bl	80089d8 <I2C_TransferConfig>
 8007788:	e00f      	b.n	80077aa <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800778e:	b29a      	uxth	r2, r3
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007798:	b2da      	uxtb	r2, r3
 800779a:	8979      	ldrh	r1, [r7, #10]
 800779c:	2300      	movs	r3, #0
 800779e:	9300      	str	r3, [sp, #0]
 80077a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f001 f917 	bl	80089d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d19e      	bne.n	80076f2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077b4:	693a      	ldr	r2, [r7, #16]
 80077b6:	6a39      	ldr	r1, [r7, #32]
 80077b8:	68f8      	ldr	r0, [r7, #12]
 80077ba:	f000 ff5e 	bl	800867a <I2C_WaitOnSTOPFlagUntilTimeout>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d001      	beq.n	80077c8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80077c4:	2301      	movs	r3, #1
 80077c6:	e01a      	b.n	80077fe <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2220      	movs	r2, #32
 80077ce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	6859      	ldr	r1, [r3, #4]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	4b0c      	ldr	r3, [pc, #48]	@ (800780c <HAL_I2C_Master_Transmit+0x22c>)
 80077dc:	400b      	ands	r3, r1
 80077de:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2220      	movs	r2, #32
 80077e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80077f8:	2300      	movs	r3, #0
 80077fa:	e000      	b.n	80077fe <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80077fc:	2302      	movs	r3, #2
  }
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3718      	adds	r7, #24
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	80002000 	.word	0x80002000
 800780c:	fe00e800 	.word	0xfe00e800

08007810 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b088      	sub	sp, #32
 8007814:	af02      	add	r7, sp, #8
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	607a      	str	r2, [r7, #4]
 800781a:	461a      	mov	r2, r3
 800781c:	460b      	mov	r3, r1
 800781e:	817b      	strh	r3, [r7, #10]
 8007820:	4613      	mov	r3, r2
 8007822:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800782a:	b2db      	uxtb	r3, r3
 800782c:	2b20      	cmp	r3, #32
 800782e:	f040 80db 	bne.w	80079e8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007838:	2b01      	cmp	r3, #1
 800783a:	d101      	bne.n	8007840 <HAL_I2C_Master_Receive+0x30>
 800783c:	2302      	movs	r3, #2
 800783e:	e0d4      	b.n	80079ea <HAL_I2C_Master_Receive+0x1da>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007848:	f7fd fda0 	bl	800538c <HAL_GetTick>
 800784c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	9300      	str	r3, [sp, #0]
 8007852:	2319      	movs	r3, #25
 8007854:	2201      	movs	r2, #1
 8007856:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f000 fe6d 	bl	800853a <I2C_WaitOnFlagUntilTimeout>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d001      	beq.n	800786a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e0bf      	b.n	80079ea <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2222      	movs	r2, #34	@ 0x22
 800786e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2210      	movs	r2, #16
 8007876:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	687a      	ldr	r2, [r7, #4]
 8007884:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	893a      	ldrh	r2, [r7, #8]
 800788a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2200      	movs	r2, #0
 8007890:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007896:	b29b      	uxth	r3, r3
 8007898:	2bff      	cmp	r3, #255	@ 0xff
 800789a:	d90e      	bls.n	80078ba <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	22ff      	movs	r2, #255	@ 0xff
 80078a0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078a6:	b2da      	uxtb	r2, r3
 80078a8:	8979      	ldrh	r1, [r7, #10]
 80078aa:	4b52      	ldr	r3, [pc, #328]	@ (80079f4 <HAL_I2C_Master_Receive+0x1e4>)
 80078ac:	9300      	str	r3, [sp, #0]
 80078ae:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	f001 f890 	bl	80089d8 <I2C_TransferConfig>
 80078b8:	e06d      	b.n	8007996 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80078be:	b29a      	uxth	r2, r3
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078c8:	b2da      	uxtb	r2, r3
 80078ca:	8979      	ldrh	r1, [r7, #10]
 80078cc:	4b49      	ldr	r3, [pc, #292]	@ (80079f4 <HAL_I2C_Master_Receive+0x1e4>)
 80078ce:	9300      	str	r3, [sp, #0]
 80078d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f001 f87f 	bl	80089d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80078da:	e05c      	b.n	8007996 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078dc:	697a      	ldr	r2, [r7, #20]
 80078de:	6a39      	ldr	r1, [r7, #32]
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f000 ff0d 	bl	8008700 <I2C_WaitOnRXNEFlagUntilTimeout>
 80078e6:	4603      	mov	r3, r0
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d001      	beq.n	80078f0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	e07c      	b.n	80079ea <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078fa:	b2d2      	uxtb	r2, r2
 80078fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007902:	1c5a      	adds	r2, r3, #1
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800790c:	3b01      	subs	r3, #1
 800790e:	b29a      	uxth	r2, r3
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007918:	b29b      	uxth	r3, r3
 800791a:	3b01      	subs	r3, #1
 800791c:	b29a      	uxth	r2, r3
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007926:	b29b      	uxth	r3, r3
 8007928:	2b00      	cmp	r3, #0
 800792a:	d034      	beq.n	8007996 <HAL_I2C_Master_Receive+0x186>
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007930:	2b00      	cmp	r3, #0
 8007932:	d130      	bne.n	8007996 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	9300      	str	r3, [sp, #0]
 8007938:	6a3b      	ldr	r3, [r7, #32]
 800793a:	2200      	movs	r2, #0
 800793c:	2180      	movs	r1, #128	@ 0x80
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	f000 fdfb 	bl	800853a <I2C_WaitOnFlagUntilTimeout>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d001      	beq.n	800794e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e04d      	b.n	80079ea <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007952:	b29b      	uxth	r3, r3
 8007954:	2bff      	cmp	r3, #255	@ 0xff
 8007956:	d90e      	bls.n	8007976 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	22ff      	movs	r2, #255	@ 0xff
 800795c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007962:	b2da      	uxtb	r2, r3
 8007964:	8979      	ldrh	r1, [r7, #10]
 8007966:	2300      	movs	r3, #0
 8007968:	9300      	str	r3, [sp, #0]
 800796a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f001 f832 	bl	80089d8 <I2C_TransferConfig>
 8007974:	e00f      	b.n	8007996 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800797a:	b29a      	uxth	r2, r3
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007984:	b2da      	uxtb	r2, r3
 8007986:	8979      	ldrh	r1, [r7, #10]
 8007988:	2300      	movs	r3, #0
 800798a:	9300      	str	r3, [sp, #0]
 800798c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007990:	68f8      	ldr	r0, [r7, #12]
 8007992:	f001 f821 	bl	80089d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800799a:	b29b      	uxth	r3, r3
 800799c:	2b00      	cmp	r3, #0
 800799e:	d19d      	bne.n	80078dc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80079a0:	697a      	ldr	r2, [r7, #20]
 80079a2:	6a39      	ldr	r1, [r7, #32]
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f000 fe68 	bl	800867a <I2C_WaitOnSTOPFlagUntilTimeout>
 80079aa:	4603      	mov	r3, r0
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d001      	beq.n	80079b4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e01a      	b.n	80079ea <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2220      	movs	r2, #32
 80079ba:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	6859      	ldr	r1, [r3, #4]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	4b0c      	ldr	r3, [pc, #48]	@ (80079f8 <HAL_I2C_Master_Receive+0x1e8>)
 80079c8:	400b      	ands	r3, r1
 80079ca:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2220      	movs	r2, #32
 80079d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2200      	movs	r2, #0
 80079e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80079e4:	2300      	movs	r3, #0
 80079e6:	e000      	b.n	80079ea <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80079e8:	2302      	movs	r3, #2
  }
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3718      	adds	r7, #24
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	80002400 	.word	0x80002400
 80079f8:	fe00e800 	.word	0xfe00e800

080079fc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d005      	beq.n	8007a28 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a20:	68ba      	ldr	r2, [r7, #8]
 8007a22:	68f9      	ldr	r1, [r7, #12]
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	4798      	blx	r3
  }
}
 8007a28:	bf00      	nop
 8007a2a:	3710      	adds	r7, #16
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	699b      	ldr	r3, [r3, #24]
 8007a3e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00f      	beq.n	8007a72 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d00a      	beq.n	8007a72 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a60:	f043 0201 	orr.w	r2, r3, #1
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007a70:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d00f      	beq.n	8007a9c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00a      	beq.n	8007a9c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a8a:	f043 0208 	orr.w	r2, r3, #8
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007a9a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d00f      	beq.n	8007ac6 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00a      	beq.n	8007ac6 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ab4:	f043 0202 	orr.w	r2, r3, #2
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ac4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aca:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f003 030b 	and.w	r3, r3, #11
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d003      	beq.n	8007ade <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8007ad6:	68f9      	ldr	r1, [r7, #12]
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f000 fbd5 	bl	8008288 <I2C_ITError>
  }
}
 8007ade:	bf00      	nop
 8007ae0:	3718      	adds	r7, #24
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b083      	sub	sp, #12
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007aee:	bf00      	nop
 8007af0:	370c      	adds	r7, #12
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr

08007afa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007afa:	b480      	push	{r7}
 8007afc:	b083      	sub	sp, #12
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007b02:	bf00      	nop
 8007b04:	370c      	adds	r7, #12
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr

08007b0e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007b0e:	b480      	push	{r7}
 8007b10:	b083      	sub	sp, #12
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
 8007b16:	460b      	mov	r3, r1
 8007b18:	70fb      	strb	r3, [r7, #3]
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007b1e:	bf00      	nop
 8007b20:	370c      	adds	r7, #12
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b083      	sub	sp, #12
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007b32:	bf00      	nop
 8007b34:	370c      	adds	r7, #12
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr

08007b3e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007b3e:	b480      	push	{r7}
 8007b40:	b083      	sub	sp, #12
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007b46:	bf00      	nop
 8007b48:	370c      	adds	r7, #12
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr

08007b52 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007b52:	b480      	push	{r7}
 8007b54:	b083      	sub	sp, #12
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007b5a:	bf00      	nop
 8007b5c:	370c      	adds	r7, #12
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr

08007b66 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8007b66:	b580      	push	{r7, lr}
 8007b68:	b086      	sub	sp, #24
 8007b6a:	af00      	add	r7, sp, #0
 8007b6c:	60f8      	str	r0, [r7, #12]
 8007b6e:	60b9      	str	r1, [r7, #8]
 8007b70:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b76:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d101      	bne.n	8007b8a <I2C_Slave_ISR_IT+0x24>
 8007b86:	2302      	movs	r3, #2
 8007b88:	e0e2      	b.n	8007d50 <I2C_Slave_ISR_IT+0x1ea>
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	f003 0320 	and.w	r3, r3, #32
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d009      	beq.n	8007bb0 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d004      	beq.n	8007bb0 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007ba6:	6939      	ldr	r1, [r7, #16]
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f000 f9b5 	bl	8007f18 <I2C_ITSlaveCplt>
 8007bae:	e0ca      	b.n	8007d46 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	f003 0310 	and.w	r3, r3, #16
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d04b      	beq.n	8007c52 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d046      	beq.n	8007c52 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d128      	bne.n	8007c20 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	2b28      	cmp	r3, #40	@ 0x28
 8007bd8:	d108      	bne.n	8007bec <I2C_Slave_ISR_IT+0x86>
 8007bda:	697b      	ldr	r3, [r7, #20]
 8007bdc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007be0:	d104      	bne.n	8007bec <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007be2:	6939      	ldr	r1, [r7, #16]
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f000 fafb 	bl	80081e0 <I2C_ITListenCplt>
 8007bea:	e031      	b.n	8007c50 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	2b29      	cmp	r3, #41	@ 0x29
 8007bf6:	d10e      	bne.n	8007c16 <I2C_Slave_ISR_IT+0xb0>
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007bfe:	d00a      	beq.n	8007c16 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2210      	movs	r2, #16
 8007c06:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007c08:	68f8      	ldr	r0, [r7, #12]
 8007c0a:	f000 fc54 	bl	80084b6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007c0e:	68f8      	ldr	r0, [r7, #12]
 8007c10:	f000 f926 	bl	8007e60 <I2C_ITSlaveSeqCplt>
 8007c14:	e01c      	b.n	8007c50 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2210      	movs	r2, #16
 8007c1c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007c1e:	e08f      	b.n	8007d40 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	2210      	movs	r2, #16
 8007c26:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c2c:	f043 0204 	orr.w	r2, r3, #4
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d003      	beq.n	8007c42 <I2C_Slave_ISR_IT+0xdc>
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007c40:	d17e      	bne.n	8007d40 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c46:	4619      	mov	r1, r3
 8007c48:	68f8      	ldr	r0, [r7, #12]
 8007c4a:	f000 fb1d 	bl	8008288 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007c4e:	e077      	b.n	8007d40 <I2C_Slave_ISR_IT+0x1da>
 8007c50:	e076      	b.n	8007d40 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	f003 0304 	and.w	r3, r3, #4
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d02f      	beq.n	8007cbc <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d02a      	beq.n	8007cbc <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c6a:	b29b      	uxth	r3, r3
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d018      	beq.n	8007ca2 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c7a:	b2d2      	uxtb	r2, r2
 8007c7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c82:	1c5a      	adds	r2, r3, #1
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c8c:	3b01      	subs	r3, #1
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c98:	b29b      	uxth	r3, r3
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	b29a      	uxth	r2, r3
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ca6:	b29b      	uxth	r3, r3
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d14b      	bne.n	8007d44 <I2C_Slave_ISR_IT+0x1de>
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007cb2:	d047      	beq.n	8007d44 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007cb4:	68f8      	ldr	r0, [r7, #12]
 8007cb6:	f000 f8d3 	bl	8007e60 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007cba:	e043      	b.n	8007d44 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	f003 0308 	and.w	r3, r3, #8
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d009      	beq.n	8007cda <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d004      	beq.n	8007cda <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007cd0:	6939      	ldr	r1, [r7, #16]
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	f000 f840 	bl	8007d58 <I2C_ITAddrCplt>
 8007cd8:	e035      	b.n	8007d46 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	f003 0302 	and.w	r3, r3, #2
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d030      	beq.n	8007d46 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d02b      	beq.n	8007d46 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d018      	beq.n	8007d2a <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cfc:	781a      	ldrb	r2, [r3, #0]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d08:	1c5a      	adds	r2, r3, #1
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	3b01      	subs	r3, #1
 8007d16:	b29a      	uxth	r2, r3
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007d20:	3b01      	subs	r3, #1
 8007d22:	b29a      	uxth	r2, r3
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007d28:	e00d      	b.n	8007d46 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007d30:	d002      	beq.n	8007d38 <I2C_Slave_ISR_IT+0x1d2>
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d106      	bne.n	8007d46 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007d38:	68f8      	ldr	r0, [r7, #12]
 8007d3a:	f000 f891 	bl	8007e60 <I2C_ITSlaveSeqCplt>
 8007d3e:	e002      	b.n	8007d46 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8007d40:	bf00      	nop
 8007d42:	e000      	b.n	8007d46 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8007d44:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3718      	adds	r7, #24
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007d6e:	2b28      	cmp	r3, #40	@ 0x28
 8007d70:	d16a      	bne.n	8007e48 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	699b      	ldr	r3, [r3, #24]
 8007d78:	0c1b      	lsrs	r3, r3, #16
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	f003 0301 	and.w	r3, r3, #1
 8007d80:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	699b      	ldr	r3, [r3, #24]
 8007d88:	0c1b      	lsrs	r3, r3, #16
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007d90:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	b29b      	uxth	r3, r3
 8007d9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d9e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8007dac:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	2b02      	cmp	r3, #2
 8007db4:	d138      	bne.n	8007e28 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007db6:	897b      	ldrh	r3, [r7, #10]
 8007db8:	09db      	lsrs	r3, r3, #7
 8007dba:	b29a      	uxth	r2, r3
 8007dbc:	89bb      	ldrh	r3, [r7, #12]
 8007dbe:	4053      	eors	r3, r2
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	f003 0306 	and.w	r3, r3, #6
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d11c      	bne.n	8007e04 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8007dca:	897b      	ldrh	r3, [r7, #10]
 8007dcc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007dd2:	1c5a      	adds	r2, r3, #1
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ddc:	2b02      	cmp	r3, #2
 8007dde:	d13b      	bne.n	8007e58 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2208      	movs	r2, #8
 8007dec:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007df6:	89ba      	ldrh	r2, [r7, #12]
 8007df8:	7bfb      	ldrb	r3, [r7, #15]
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f7ff fe86 	bl	8007b0e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007e02:	e029      	b.n	8007e58 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8007e04:	893b      	ldrh	r3, [r7, #8]
 8007e06:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007e08:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 fe15 	bl	8008a3c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007e1a:	89ba      	ldrh	r2, [r7, #12]
 8007e1c:	7bfb      	ldrb	r3, [r7, #15]
 8007e1e:	4619      	mov	r1, r3
 8007e20:	6878      	ldr	r0, [r7, #4]
 8007e22:	f7ff fe74 	bl	8007b0e <HAL_I2C_AddrCallback>
}
 8007e26:	e017      	b.n	8007e58 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007e28:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 fe05 	bl	8008a3c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007e3a:	89ba      	ldrh	r2, [r7, #12]
 8007e3c:	7bfb      	ldrb	r3, [r7, #15]
 8007e3e:	4619      	mov	r1, r3
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f7ff fe64 	bl	8007b0e <HAL_I2C_AddrCallback>
}
 8007e46:	e007      	b.n	8007e58 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2208      	movs	r2, #8
 8007e4e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8007e58:	bf00      	nop
 8007e5a:	3710      	adds	r7, #16
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d008      	beq.n	8007e94 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007e90:	601a      	str	r2, [r3, #0]
 8007e92:	e00c      	b.n	8007eae <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d007      	beq.n	8007eae <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007eac:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	2b29      	cmp	r3, #41	@ 0x29
 8007eb8:	d112      	bne.n	8007ee0 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2228      	movs	r2, #40	@ 0x28
 8007ebe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2221      	movs	r2, #33	@ 0x21
 8007ec6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007ec8:	2101      	movs	r1, #1
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f000 fdb6 	bl	8008a3c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f7ff fe04 	bl	8007ae6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007ede:	e017      	b.n	8007f10 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	2b2a      	cmp	r3, #42	@ 0x2a
 8007eea:	d111      	bne.n	8007f10 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2228      	movs	r2, #40	@ 0x28
 8007ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2222      	movs	r2, #34	@ 0x22
 8007ef8:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007efa:	2102      	movs	r1, #2
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 fd9d 	bl	8008a3c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f7ff fdf5 	bl	8007afa <HAL_I2C_SlaveRxCpltCallback>
}
 8007f10:	bf00      	nop
 8007f12:	3710      	adds	r7, #16
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}

08007f18 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b086      	sub	sp, #24
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
 8007f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f32:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f3a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	2220      	movs	r2, #32
 8007f42:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007f44:	7afb      	ldrb	r3, [r7, #11]
 8007f46:	2b21      	cmp	r3, #33	@ 0x21
 8007f48:	d002      	beq.n	8007f50 <I2C_ITSlaveCplt+0x38>
 8007f4a:	7afb      	ldrb	r3, [r7, #11]
 8007f4c:	2b29      	cmp	r3, #41	@ 0x29
 8007f4e:	d108      	bne.n	8007f62 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007f50:	f248 0101 	movw	r1, #32769	@ 0x8001
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 fd71 	bl	8008a3c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	2221      	movs	r2, #33	@ 0x21
 8007f5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007f60:	e019      	b.n	8007f96 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007f62:	7afb      	ldrb	r3, [r7, #11]
 8007f64:	2b22      	cmp	r3, #34	@ 0x22
 8007f66:	d002      	beq.n	8007f6e <I2C_ITSlaveCplt+0x56>
 8007f68:	7afb      	ldrb	r3, [r7, #11]
 8007f6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f6c:	d108      	bne.n	8007f80 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007f6e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 fd62 	bl	8008a3c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2222      	movs	r2, #34	@ 0x22
 8007f7c:	631a      	str	r2, [r3, #48]	@ 0x30
 8007f7e:	e00a      	b.n	8007f96 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8007f80:	7afb      	ldrb	r3, [r7, #11]
 8007f82:	2b28      	cmp	r3, #40	@ 0x28
 8007f84:	d107      	bne.n	8007f96 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8007f86:	f248 0103 	movw	r1, #32771	@ 0x8003
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 fd56 	bl	8008a3c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	685a      	ldr	r2, [r3, #4]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007fa4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	6859      	ldr	r1, [r3, #4]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	4b89      	ldr	r3, [pc, #548]	@ (80081d8 <I2C_ITSlaveCplt+0x2c0>)
 8007fb2:	400b      	ands	r3, r1
 8007fb4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 fa7d 	bl	80084b6 <I2C_Flush_TXDR>

#if defined(HAL_DMA_MODULE_ENABLED)
  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d013      	beq.n	8007fee <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007fd4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d01f      	beq.n	800801e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	b29a      	uxth	r2, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007fec:	e017      	b.n	800801e <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d012      	beq.n	800801e <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008006:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800800c:	2b00      	cmp	r3, #0
 800800e:	d006      	beq.n	800801e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	b29a      	uxth	r2, r3
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    /* Do nothing */
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	f003 0304 	and.w	r3, r3, #4
 8008024:	2b00      	cmp	r3, #0
 8008026:	d020      	beq.n	800806a <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	f023 0304 	bic.w	r3, r3, #4
 800802e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800803a:	b2d2      	uxtb	r2, r2
 800803c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008042:	1c5a      	adds	r2, r3, #1
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800804c:	2b00      	cmp	r3, #0
 800804e:	d00c      	beq.n	800806a <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008054:	3b01      	subs	r3, #1
 8008056:	b29a      	uxth	r2, r3
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008060:	b29b      	uxth	r3, r3
 8008062:	3b01      	subs	r3, #1
 8008064:	b29a      	uxth	r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800806e:	b29b      	uxth	r3, r3
 8008070:	2b00      	cmp	r3, #0
 8008072:	d005      	beq.n	8008080 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008078:	f043 0204 	orr.w	r2, r3, #4
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	f003 0310 	and.w	r3, r3, #16
 8008086:	2b00      	cmp	r3, #0
 8008088:	d049      	beq.n	800811e <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008090:	2b00      	cmp	r3, #0
 8008092:	d044      	beq.n	800811e <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008098:	b29b      	uxth	r3, r3
 800809a:	2b00      	cmp	r3, #0
 800809c:	d128      	bne.n	80080f0 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080a4:	b2db      	uxtb	r3, r3
 80080a6:	2b28      	cmp	r3, #40	@ 0x28
 80080a8:	d108      	bne.n	80080bc <I2C_ITSlaveCplt+0x1a4>
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80080b0:	d104      	bne.n	80080bc <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80080b2:	6979      	ldr	r1, [r7, #20]
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f893 	bl	80081e0 <I2C_ITListenCplt>
 80080ba:	e030      	b.n	800811e <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80080c2:	b2db      	uxtb	r3, r3
 80080c4:	2b29      	cmp	r3, #41	@ 0x29
 80080c6:	d10e      	bne.n	80080e6 <I2C_ITSlaveCplt+0x1ce>
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80080ce:	d00a      	beq.n	80080e6 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2210      	movs	r2, #16
 80080d6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 f9ec 	bl	80084b6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f7ff febe 	bl	8007e60 <I2C_ITSlaveSeqCplt>
 80080e4:	e01b      	b.n	800811e <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2210      	movs	r2, #16
 80080ec:	61da      	str	r2, [r3, #28]
 80080ee:	e016      	b.n	800811e <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2210      	movs	r2, #16
 80080f6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080fc:	f043 0204 	orr.w	r2, r3, #4
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d003      	beq.n	8008112 <I2C_ITSlaveCplt+0x1fa>
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008110:	d105      	bne.n	800811e <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008116:	4619      	mov	r1, r3
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f000 f8b5 	bl	8008288 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2200      	movs	r2, #0
 8008122:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2200      	movs	r2, #0
 800812a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008130:	2b00      	cmp	r3, #0
 8008132:	d010      	beq.n	8008156 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008138:	4619      	mov	r1, r3
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f000 f8a4 	bl	8008288 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008146:	b2db      	uxtb	r3, r3
 8008148:	2b28      	cmp	r3, #40	@ 0x28
 800814a:	d141      	bne.n	80081d0 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800814c:	6979      	ldr	r1, [r7, #20]
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 f846 	bl	80081e0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008154:	e03c      	b.n	80081d0 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800815a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800815e:	d014      	beq.n	800818a <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f7ff fe7d 	bl	8007e60 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	4a1c      	ldr	r2, [pc, #112]	@ (80081dc <I2C_ITSlaveCplt+0x2c4>)
 800816a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2220      	movs	r2, #32
 8008170:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f7ff fcd1 	bl	8007b2a <HAL_I2C_ListenCpltCallback>
}
 8008188:	e022      	b.n	80081d0 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008190:	b2db      	uxtb	r3, r3
 8008192:	2b22      	cmp	r3, #34	@ 0x22
 8008194:	d10e      	bne.n	80081b4 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2220      	movs	r2, #32
 800819a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f7ff fca4 	bl	8007afa <HAL_I2C_SlaveRxCpltCallback>
}
 80081b2:	e00d      	b.n	80081d0 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2220      	movs	r2, #32
 80081b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2200      	movs	r2, #0
 80081c0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f7ff fc8b 	bl	8007ae6 <HAL_I2C_SlaveTxCpltCallback>
}
 80081d0:	bf00      	nop
 80081d2:	3718      	adds	r7, #24
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	fe00e800 	.word	0xfe00e800
 80081dc:	ffff0000 	.word	0xffff0000

080081e0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a25      	ldr	r2, [pc, #148]	@ (8008284 <I2C_ITListenCplt+0xa4>)
 80081ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2220      	movs	r2, #32
 80081fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	f003 0304 	and.w	r3, r3, #4
 8008212:	2b00      	cmp	r3, #0
 8008214:	d022      	beq.n	800825c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008220:	b2d2      	uxtb	r2, r2
 8008222:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008228:	1c5a      	adds	r2, r3, #1
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008232:	2b00      	cmp	r3, #0
 8008234:	d012      	beq.n	800825c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800823a:	3b01      	subs	r3, #1
 800823c:	b29a      	uxth	r2, r3
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008246:	b29b      	uxth	r3, r3
 8008248:	3b01      	subs	r3, #1
 800824a:	b29a      	uxth	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008254:	f043 0204 	orr.w	r2, r3, #4
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800825c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 fbeb 	bl	8008a3c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2210      	movs	r2, #16
 800826c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2200      	movs	r2, #0
 8008272:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f7ff fc57 	bl	8007b2a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800827c:	bf00      	nop
 800827e:	3708      	adds	r7, #8
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}
 8008284:	ffff0000 	.word	0xffff0000

08008288 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
 8008290:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008298:	73fb      	strb	r3, [r7, #15]
#if defined(HAL_DMA_MODULE_ENABLED)
  uint32_t tmppreviousstate;
#endif /* HAL_DMA_MODULE_ENABLED */

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	4a6d      	ldr	r2, [pc, #436]	@ (800845c <I2C_ITError+0x1d4>)
 80082a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	431a      	orrs	r2, r3
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80082ba:	7bfb      	ldrb	r3, [r7, #15]
 80082bc:	2b28      	cmp	r3, #40	@ 0x28
 80082be:	d005      	beq.n	80082cc <I2C_ITError+0x44>
 80082c0:	7bfb      	ldrb	r3, [r7, #15]
 80082c2:	2b29      	cmp	r3, #41	@ 0x29
 80082c4:	d002      	beq.n	80082cc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80082c6:	7bfb      	ldrb	r3, [r7, #15]
 80082c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80082ca:	d10b      	bne.n	80082e4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80082cc:	2103      	movs	r1, #3
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 fbb4 	bl	8008a3c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2228      	movs	r2, #40	@ 0x28
 80082d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	4a60      	ldr	r2, [pc, #384]	@ (8008460 <I2C_ITError+0x1d8>)
 80082e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80082e2:	e030      	b.n	8008346 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80082e4:	f248 0103 	movw	r1, #32771	@ 0x8003
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 fba7 	bl	8008a3c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 f8e1 	bl	80084b6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	2b60      	cmp	r3, #96	@ 0x60
 80082fe:	d01f      	beq.n	8008340 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2220      	movs	r2, #32
 8008304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	699b      	ldr	r3, [r3, #24]
 800830e:	f003 0320 	and.w	r3, r3, #32
 8008312:	2b20      	cmp	r3, #32
 8008314:	d114      	bne.n	8008340 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	699b      	ldr	r3, [r3, #24]
 800831c:	f003 0310 	and.w	r3, r3, #16
 8008320:	2b10      	cmp	r3, #16
 8008322:	d109      	bne.n	8008338 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	2210      	movs	r2, #16
 800832a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008330:	f043 0204 	orr.w	r2, r3, #4
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	2220      	movs	r2, #32
 800833e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	635a      	str	r2, [r3, #52]	@ 0x34
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800834a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008350:	2b00      	cmp	r3, #0
 8008352:	d039      	beq.n	80083c8 <I2C_ITError+0x140>
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	2b11      	cmp	r3, #17
 8008358:	d002      	beq.n	8008360 <I2C_ITError+0xd8>
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	2b21      	cmp	r3, #33	@ 0x21
 800835e:	d133      	bne.n	80083c8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800836a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800836e:	d107      	bne.n	8008380 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	681a      	ldr	r2, [r3, #0]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800837e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008384:	4618      	mov	r0, r3
 8008386:	f7fe fe1a 	bl	8006fbe <HAL_DMA_GetState>
 800838a:	4603      	mov	r3, r0
 800838c:	2b01      	cmp	r3, #1
 800838e:	d017      	beq.n	80083c0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008394:	4a33      	ldr	r2, [pc, #204]	@ (8008464 <I2C_ITError+0x1dc>)
 8008396:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7fe fcfc 	bl	8006da2 <HAL_DMA_Abort_IT>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d04d      	beq.n	800844c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80083ba:	4610      	mov	r0, r2
 80083bc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80083be:	e045      	b.n	800844c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 f851 	bl	8008468 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80083c6:	e041      	b.n	800844c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d039      	beq.n	8008444 <I2C_ITError+0x1bc>
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	2b12      	cmp	r3, #18
 80083d4:	d002      	beq.n	80083dc <I2C_ITError+0x154>
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	2b22      	cmp	r3, #34	@ 0x22
 80083da:	d133      	bne.n	8008444 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80083e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80083ea:	d107      	bne.n	80083fc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	681a      	ldr	r2, [r3, #0]
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80083fa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008400:	4618      	mov	r0, r3
 8008402:	f7fe fddc 	bl	8006fbe <HAL_DMA_GetState>
 8008406:	4603      	mov	r3, r0
 8008408:	2b01      	cmp	r3, #1
 800840a:	d017      	beq.n	800843c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008410:	4a14      	ldr	r2, [pc, #80]	@ (8008464 <I2C_ITError+0x1dc>)
 8008412:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2200      	movs	r2, #0
 8008418:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008420:	4618      	mov	r0, r3
 8008422:	f7fe fcbe 	bl	8006da2 <HAL_DMA_Abort_IT>
 8008426:	4603      	mov	r3, r0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d011      	beq.n	8008450 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008436:	4610      	mov	r0, r2
 8008438:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800843a:	e009      	b.n	8008450 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 f813 	bl	8008468 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008442:	e005      	b.n	8008450 <I2C_ITError+0x1c8>
    }
  }
  else
#endif /* HAL_DMA_MODULE_ENABLED */
  {
    I2C_TreatErrorCallback(hi2c);
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 f80f 	bl	8008468 <I2C_TreatErrorCallback>
  }
}
 800844a:	e002      	b.n	8008452 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800844c:	bf00      	nop
 800844e:	e000      	b.n	8008452 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008450:	bf00      	nop
}
 8008452:	bf00      	nop
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	ffff0000 	.word	0xffff0000
 8008460:	08007b67 	.word	0x08007b67
 8008464:	080084ff 	.word	0x080084ff

08008468 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008476:	b2db      	uxtb	r3, r3
 8008478:	2b60      	cmp	r3, #96	@ 0x60
 800847a:	d10e      	bne.n	800849a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2220      	movs	r2, #32
 8008480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2200      	movs	r2, #0
 800848e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f7ff fb5d 	bl	8007b52 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008498:	e009      	b.n	80084ae <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f7ff fb48 	bl	8007b3e <HAL_I2C_ErrorCallback>
}
 80084ae:	bf00      	nop
 80084b0:	3708      	adds	r7, #8
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80084b6:	b480      	push	{r7}
 80084b8:	b083      	sub	sp, #12
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	699b      	ldr	r3, [r3, #24]
 80084c4:	f003 0302 	and.w	r3, r3, #2
 80084c8:	2b02      	cmp	r3, #2
 80084ca:	d103      	bne.n	80084d4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	2200      	movs	r2, #0
 80084d2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	699b      	ldr	r3, [r3, #24]
 80084da:	f003 0301 	and.w	r3, r3, #1
 80084de:	2b01      	cmp	r3, #1
 80084e0:	d007      	beq.n	80084f2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	699a      	ldr	r2, [r3, #24]
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f042 0201 	orr.w	r2, r2, #1
 80084f0:	619a      	str	r2, [r3, #24]
  }
}
 80084f2:	bf00      	nop
 80084f4:	370c      	adds	r7, #12
 80084f6:	46bd      	mov	sp, r7
 80084f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fc:	4770      	bx	lr

080084fe <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80084fe:	b580      	push	{r7, lr}
 8008500:	b084      	sub	sp, #16
 8008502:	af00      	add	r7, sp, #0
 8008504:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800850a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008510:	2b00      	cmp	r3, #0
 8008512:	d003      	beq.n	800851c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008518:	2200      	movs	r2, #0
 800851a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008520:	2b00      	cmp	r3, #0
 8008522:	d003      	beq.n	800852c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008528:	2200      	movs	r2, #0
 800852a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f7ff ff9b 	bl	8008468 <I2C_TreatErrorCallback>
}
 8008532:	bf00      	nop
 8008534:	3710      	adds	r7, #16
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b084      	sub	sp, #16
 800853e:	af00      	add	r7, sp, #0
 8008540:	60f8      	str	r0, [r7, #12]
 8008542:	60b9      	str	r1, [r7, #8]
 8008544:	603b      	str	r3, [r7, #0]
 8008546:	4613      	mov	r3, r2
 8008548:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800854a:	e03b      	b.n	80085c4 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800854c:	69ba      	ldr	r2, [r7, #24]
 800854e:	6839      	ldr	r1, [r7, #0]
 8008550:	68f8      	ldr	r0, [r7, #12]
 8008552:	f000 f961 	bl	8008818 <I2C_IsErrorOccurred>
 8008556:	4603      	mov	r3, r0
 8008558:	2b00      	cmp	r3, #0
 800855a:	d001      	beq.n	8008560 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800855c:	2301      	movs	r3, #1
 800855e:	e041      	b.n	80085e4 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008566:	d02d      	beq.n	80085c4 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008568:	f7fc ff10 	bl	800538c <HAL_GetTick>
 800856c:	4602      	mov	r2, r0
 800856e:	69bb      	ldr	r3, [r7, #24]
 8008570:	1ad3      	subs	r3, r2, r3
 8008572:	683a      	ldr	r2, [r7, #0]
 8008574:	429a      	cmp	r2, r3
 8008576:	d302      	bcc.n	800857e <I2C_WaitOnFlagUntilTimeout+0x44>
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d122      	bne.n	80085c4 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	699a      	ldr	r2, [r3, #24]
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	4013      	ands	r3, r2
 8008588:	68ba      	ldr	r2, [r7, #8]
 800858a:	429a      	cmp	r2, r3
 800858c:	bf0c      	ite	eq
 800858e:	2301      	moveq	r3, #1
 8008590:	2300      	movne	r3, #0
 8008592:	b2db      	uxtb	r3, r3
 8008594:	461a      	mov	r2, r3
 8008596:	79fb      	ldrb	r3, [r7, #7]
 8008598:	429a      	cmp	r2, r3
 800859a:	d113      	bne.n	80085c4 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085a0:	f043 0220 	orr.w	r2, r3, #32
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2220      	movs	r2, #32
 80085ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2200      	movs	r2, #0
 80085b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2200      	movs	r2, #0
 80085bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80085c0:	2301      	movs	r3, #1
 80085c2:	e00f      	b.n	80085e4 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	699a      	ldr	r2, [r3, #24]
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	4013      	ands	r3, r2
 80085ce:	68ba      	ldr	r2, [r7, #8]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	bf0c      	ite	eq
 80085d4:	2301      	moveq	r3, #1
 80085d6:	2300      	movne	r3, #0
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	461a      	mov	r2, r3
 80085dc:	79fb      	ldrb	r3, [r7, #7]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d0b4      	beq.n	800854c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3710      	adds	r7, #16
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80085f8:	e033      	b.n	8008662 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	68b9      	ldr	r1, [r7, #8]
 80085fe:	68f8      	ldr	r0, [r7, #12]
 8008600:	f000 f90a 	bl	8008818 <I2C_IsErrorOccurred>
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d001      	beq.n	800860e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	e031      	b.n	8008672 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008614:	d025      	beq.n	8008662 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008616:	f7fc feb9 	bl	800538c <HAL_GetTick>
 800861a:	4602      	mov	r2, r0
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	1ad3      	subs	r3, r2, r3
 8008620:	68ba      	ldr	r2, [r7, #8]
 8008622:	429a      	cmp	r2, r3
 8008624:	d302      	bcc.n	800862c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d11a      	bne.n	8008662 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	699b      	ldr	r3, [r3, #24]
 8008632:	f003 0302 	and.w	r3, r3, #2
 8008636:	2b02      	cmp	r3, #2
 8008638:	d013      	beq.n	8008662 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800863e:	f043 0220 	orr.w	r2, r3, #32
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2220      	movs	r2, #32
 800864a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	2200      	movs	r2, #0
 8008652:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2200      	movs	r2, #0
 800865a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	e007      	b.n	8008672 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	699b      	ldr	r3, [r3, #24]
 8008668:	f003 0302 	and.w	r3, r3, #2
 800866c:	2b02      	cmp	r3, #2
 800866e:	d1c4      	bne.n	80085fa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008670:	2300      	movs	r3, #0
}
 8008672:	4618      	mov	r0, r3
 8008674:	3710      	adds	r7, #16
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800867a:	b580      	push	{r7, lr}
 800867c:	b084      	sub	sp, #16
 800867e:	af00      	add	r7, sp, #0
 8008680:	60f8      	str	r0, [r7, #12]
 8008682:	60b9      	str	r1, [r7, #8]
 8008684:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008686:	e02f      	b.n	80086e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	68b9      	ldr	r1, [r7, #8]
 800868c:	68f8      	ldr	r0, [r7, #12]
 800868e:	f000 f8c3 	bl	8008818 <I2C_IsErrorOccurred>
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	d001      	beq.n	800869c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008698:	2301      	movs	r3, #1
 800869a:	e02d      	b.n	80086f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800869c:	f7fc fe76 	bl	800538c <HAL_GetTick>
 80086a0:	4602      	mov	r2, r0
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	68ba      	ldr	r2, [r7, #8]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d302      	bcc.n	80086b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d11a      	bne.n	80086e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	699b      	ldr	r3, [r3, #24]
 80086b8:	f003 0320 	and.w	r3, r3, #32
 80086bc:	2b20      	cmp	r3, #32
 80086be:	d013      	beq.n	80086e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086c4:	f043 0220 	orr.w	r2, r3, #32
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2220      	movs	r2, #32
 80086d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2200      	movs	r2, #0
 80086e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	e007      	b.n	80086f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	699b      	ldr	r3, [r3, #24]
 80086ee:	f003 0320 	and.w	r3, r3, #32
 80086f2:	2b20      	cmp	r3, #32
 80086f4:	d1c8      	bne.n	8008688 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80086f6:	2300      	movs	r3, #0
}
 80086f8:	4618      	mov	r0, r3
 80086fa:	3710      	adds	r7, #16
 80086fc:	46bd      	mov	sp, r7
 80086fe:	bd80      	pop	{r7, pc}

08008700 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b086      	sub	sp, #24
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800870c:	2300      	movs	r3, #0
 800870e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008710:	e071      	b.n	80087f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	68b9      	ldr	r1, [r7, #8]
 8008716:	68f8      	ldr	r0, [r7, #12]
 8008718:	f000 f87e 	bl	8008818 <I2C_IsErrorOccurred>
 800871c:	4603      	mov	r3, r0
 800871e:	2b00      	cmp	r3, #0
 8008720:	d001      	beq.n	8008726 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8008722:	2301      	movs	r3, #1
 8008724:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	699b      	ldr	r3, [r3, #24]
 800872c:	f003 0320 	and.w	r3, r3, #32
 8008730:	2b20      	cmp	r3, #32
 8008732:	d13b      	bne.n	80087ac <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8008734:	7dfb      	ldrb	r3, [r7, #23]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d138      	bne.n	80087ac <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	699b      	ldr	r3, [r3, #24]
 8008740:	f003 0304 	and.w	r3, r3, #4
 8008744:	2b04      	cmp	r3, #4
 8008746:	d105      	bne.n	8008754 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800874c:	2b00      	cmp	r3, #0
 800874e:	d001      	beq.n	8008754 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8008750:	2300      	movs	r3, #0
 8008752:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	699b      	ldr	r3, [r3, #24]
 800875a:	f003 0310 	and.w	r3, r3, #16
 800875e:	2b10      	cmp	r3, #16
 8008760:	d121      	bne.n	80087a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2210      	movs	r2, #16
 8008768:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2204      	movs	r2, #4
 800876e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2220      	movs	r2, #32
 8008776:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	6859      	ldr	r1, [r3, #4]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	4b24      	ldr	r3, [pc, #144]	@ (8008814 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8008784:	400b      	ands	r3, r1
 8008786:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2220      	movs	r2, #32
 800878c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2200      	movs	r2, #0
 800879c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80087a0:	2301      	movs	r3, #1
 80087a2:	75fb      	strb	r3, [r7, #23]
 80087a4:	e002      	b.n	80087ac <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2200      	movs	r2, #0
 80087aa:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80087ac:	f7fc fdee 	bl	800538c <HAL_GetTick>
 80087b0:	4602      	mov	r2, r0
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	1ad3      	subs	r3, r2, r3
 80087b6:	68ba      	ldr	r2, [r7, #8]
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d302      	bcc.n	80087c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d119      	bne.n	80087f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80087c2:	7dfb      	ldrb	r3, [r7, #23]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d116      	bne.n	80087f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	699b      	ldr	r3, [r3, #24]
 80087ce:	f003 0304 	and.w	r3, r3, #4
 80087d2:	2b04      	cmp	r3, #4
 80087d4:	d00f      	beq.n	80087f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087da:	f043 0220 	orr.w	r2, r3, #32
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2220      	movs	r2, #32
 80087e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80087f2:	2301      	movs	r3, #1
 80087f4:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	699b      	ldr	r3, [r3, #24]
 80087fc:	f003 0304 	and.w	r3, r3, #4
 8008800:	2b04      	cmp	r3, #4
 8008802:	d002      	beq.n	800880a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8008804:	7dfb      	ldrb	r3, [r7, #23]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d083      	beq.n	8008712 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800880a:	7dfb      	ldrb	r3, [r7, #23]
}
 800880c:	4618      	mov	r0, r3
 800880e:	3718      	adds	r7, #24
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}
 8008814:	fe00e800 	.word	0xfe00e800

08008818 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b08a      	sub	sp, #40	@ 0x28
 800881c:	af00      	add	r7, sp, #0
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008824:	2300      	movs	r3, #0
 8008826:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	699b      	ldr	r3, [r3, #24]
 8008830:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008832:	2300      	movs	r3, #0
 8008834:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	f003 0310 	and.w	r3, r3, #16
 8008840:	2b00      	cmp	r3, #0
 8008842:	d068      	beq.n	8008916 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2210      	movs	r2, #16
 800884a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800884c:	e049      	b.n	80088e2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008854:	d045      	beq.n	80088e2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008856:	f7fc fd99 	bl	800538c <HAL_GetTick>
 800885a:	4602      	mov	r2, r0
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	1ad3      	subs	r3, r2, r3
 8008860:	68ba      	ldr	r2, [r7, #8]
 8008862:	429a      	cmp	r2, r3
 8008864:	d302      	bcc.n	800886c <I2C_IsErrorOccurred+0x54>
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d13a      	bne.n	80088e2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008876:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800887e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	699b      	ldr	r3, [r3, #24]
 8008886:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800888a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800888e:	d121      	bne.n	80088d4 <I2C_IsErrorOccurred+0xbc>
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008896:	d01d      	beq.n	80088d4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008898:	7cfb      	ldrb	r3, [r7, #19]
 800889a:	2b20      	cmp	r3, #32
 800889c:	d01a      	beq.n	80088d4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	685a      	ldr	r2, [r3, #4]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80088ac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80088ae:	f7fc fd6d 	bl	800538c <HAL_GetTick>
 80088b2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80088b4:	e00e      	b.n	80088d4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80088b6:	f7fc fd69 	bl	800538c <HAL_GetTick>
 80088ba:	4602      	mov	r2, r0
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	1ad3      	subs	r3, r2, r3
 80088c0:	2b19      	cmp	r3, #25
 80088c2:	d907      	bls.n	80088d4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80088c4:	6a3b      	ldr	r3, [r7, #32]
 80088c6:	f043 0320 	orr.w	r3, r3, #32
 80088ca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80088d2:	e006      	b.n	80088e2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	699b      	ldr	r3, [r3, #24]
 80088da:	f003 0320 	and.w	r3, r3, #32
 80088de:	2b20      	cmp	r3, #32
 80088e0:	d1e9      	bne.n	80088b6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	699b      	ldr	r3, [r3, #24]
 80088e8:	f003 0320 	and.w	r3, r3, #32
 80088ec:	2b20      	cmp	r3, #32
 80088ee:	d003      	beq.n	80088f8 <I2C_IsErrorOccurred+0xe0>
 80088f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d0aa      	beq.n	800884e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80088f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d103      	bne.n	8008908 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	2220      	movs	r2, #32
 8008906:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008908:	6a3b      	ldr	r3, [r7, #32]
 800890a:	f043 0304 	orr.w	r3, r3, #4
 800890e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	699b      	ldr	r3, [r3, #24]
 800891c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800891e:	69bb      	ldr	r3, [r7, #24]
 8008920:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008924:	2b00      	cmp	r3, #0
 8008926:	d00b      	beq.n	8008940 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008928:	6a3b      	ldr	r3, [r7, #32]
 800892a:	f043 0301 	orr.w	r3, r3, #1
 800892e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008938:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008940:	69bb      	ldr	r3, [r7, #24]
 8008942:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008946:	2b00      	cmp	r3, #0
 8008948:	d00b      	beq.n	8008962 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800894a:	6a3b      	ldr	r3, [r7, #32]
 800894c:	f043 0308 	orr.w	r3, r3, #8
 8008950:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800895a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800895c:	2301      	movs	r3, #1
 800895e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008962:	69bb      	ldr	r3, [r7, #24]
 8008964:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008968:	2b00      	cmp	r3, #0
 800896a:	d00b      	beq.n	8008984 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800896c:	6a3b      	ldr	r3, [r7, #32]
 800896e:	f043 0302 	orr.w	r3, r3, #2
 8008972:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800897c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800897e:	2301      	movs	r3, #1
 8008980:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008984:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008988:	2b00      	cmp	r3, #0
 800898a:	d01c      	beq.n	80089c6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800898c:	68f8      	ldr	r0, [r7, #12]
 800898e:	f7ff fd92 	bl	80084b6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	6859      	ldr	r1, [r3, #4]
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681a      	ldr	r2, [r3, #0]
 800899c:	4b0d      	ldr	r3, [pc, #52]	@ (80089d4 <I2C_IsErrorOccurred+0x1bc>)
 800899e:	400b      	ands	r3, r1
 80089a0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80089a6:	6a3b      	ldr	r3, [r7, #32]
 80089a8:	431a      	orrs	r2, r3
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2220      	movs	r2, #32
 80089b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2200      	movs	r2, #0
 80089ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80089c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3728      	adds	r7, #40	@ 0x28
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	fe00e800 	.word	0xfe00e800

080089d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80089d8:	b480      	push	{r7}
 80089da:	b087      	sub	sp, #28
 80089dc:	af00      	add	r7, sp, #0
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	607b      	str	r3, [r7, #4]
 80089e2:	460b      	mov	r3, r1
 80089e4:	817b      	strh	r3, [r7, #10]
 80089e6:	4613      	mov	r3, r2
 80089e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80089ea:	897b      	ldrh	r3, [r7, #10]
 80089ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80089f0:	7a7b      	ldrb	r3, [r7, #9]
 80089f2:	041b      	lsls	r3, r3, #16
 80089f4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80089f8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80089fe:	6a3b      	ldr	r3, [r7, #32]
 8008a00:	4313      	orrs	r3, r2
 8008a02:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008a06:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	685a      	ldr	r2, [r3, #4]
 8008a0e:	6a3b      	ldr	r3, [r7, #32]
 8008a10:	0d5b      	lsrs	r3, r3, #21
 8008a12:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008a16:	4b08      	ldr	r3, [pc, #32]	@ (8008a38 <I2C_TransferConfig+0x60>)
 8008a18:	430b      	orrs	r3, r1
 8008a1a:	43db      	mvns	r3, r3
 8008a1c:	ea02 0103 	and.w	r1, r2, r3
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	697a      	ldr	r2, [r7, #20]
 8008a26:	430a      	orrs	r2, r1
 8008a28:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008a2a:	bf00      	nop
 8008a2c:	371c      	adds	r7, #28
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr
 8008a36:	bf00      	nop
 8008a38:	03ff63ff 	.word	0x03ff63ff

08008a3c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b085      	sub	sp, #20
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	460b      	mov	r3, r1
 8008a46:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008a4c:	887b      	ldrh	r3, [r7, #2]
 8008a4e:	f003 0301 	and.w	r3, r3, #1
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d00f      	beq.n	8008a76 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8008a5c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008a6a:	2b28      	cmp	r3, #40	@ 0x28
 8008a6c:	d003      	beq.n	8008a76 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008a74:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008a76:	887b      	ldrh	r3, [r7, #2]
 8008a78:	f003 0302 	and.w	r3, r3, #2
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d00f      	beq.n	8008aa0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8008a86:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008a94:	2b28      	cmp	r3, #40	@ 0x28
 8008a96:	d003      	beq.n	8008aa0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8008a9e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008aa0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	da03      	bge.n	8008ab0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8008aae:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008ab0:	887b      	ldrh	r3, [r7, #2]
 8008ab2:	2b10      	cmp	r3, #16
 8008ab4:	d103      	bne.n	8008abe <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8008abc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008abe:	887b      	ldrh	r3, [r7, #2]
 8008ac0:	2b20      	cmp	r3, #32
 8008ac2:	d103      	bne.n	8008acc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f043 0320 	orr.w	r3, r3, #32
 8008aca:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008acc:	887b      	ldrh	r3, [r7, #2]
 8008ace:	2b40      	cmp	r3, #64	@ 0x40
 8008ad0:	d103      	bne.n	8008ada <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ad8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	6819      	ldr	r1, [r3, #0]
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	43da      	mvns	r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	400a      	ands	r2, r1
 8008aea:	601a      	str	r2, [r3, #0]
}
 8008aec:	bf00      	nop
 8008aee:	3714      	adds	r7, #20
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b083      	sub	sp, #12
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	2b20      	cmp	r3, #32
 8008b0c:	d138      	bne.n	8008b80 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d101      	bne.n	8008b1c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008b18:	2302      	movs	r3, #2
 8008b1a:	e032      	b.n	8008b82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2224      	movs	r2, #36	@ 0x24
 8008b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f022 0201 	bic.w	r2, r2, #1
 8008b3a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008b4a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	6819      	ldr	r1, [r3, #0]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	683a      	ldr	r2, [r7, #0]
 8008b58:	430a      	orrs	r2, r1
 8008b5a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	681a      	ldr	r2, [r3, #0]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f042 0201 	orr.w	r2, r2, #1
 8008b6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2220      	movs	r2, #32
 8008b70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	e000      	b.n	8008b82 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008b80:	2302      	movs	r3, #2
  }
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	370c      	adds	r7, #12
 8008b86:	46bd      	mov	sp, r7
 8008b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8c:	4770      	bx	lr

08008b8e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008b8e:	b480      	push	{r7}
 8008b90:	b085      	sub	sp, #20
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
 8008b96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	2b20      	cmp	r3, #32
 8008ba2:	d139      	bne.n	8008c18 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d101      	bne.n	8008bb2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008bae:	2302      	movs	r3, #2
 8008bb0:	e033      	b.n	8008c1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	2224      	movs	r2, #36	@ 0x24
 8008bbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f022 0201 	bic.w	r2, r2, #1
 8008bd0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8008be0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	021b      	lsls	r3, r3, #8
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	4313      	orrs	r3, r2
 8008bea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	f042 0201 	orr.w	r2, r2, #1
 8008c02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2220      	movs	r2, #32
 8008c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008c14:	2300      	movs	r3, #0
 8008c16:	e000      	b.n	8008c1a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008c18:	2302      	movs	r3, #2
  }
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3714      	adds	r7, #20
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr

08008c26 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008c26:	b580      	push	{r7, lr}
 8008c28:	b084      	sub	sp, #16
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d101      	bne.n	8008c38 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	e0c0      	b.n	8008dba <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d106      	bne.n	8008c52 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f009 f9a9 	bl	8011fa4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2203      	movs	r2, #3
 8008c56:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f004 fc7e 	bl	800d560 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c64:	2300      	movs	r3, #0
 8008c66:	73fb      	strb	r3, [r7, #15]
 8008c68:	e03e      	b.n	8008ce8 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008c6a:	7bfa      	ldrb	r2, [r7, #15]
 8008c6c:	6879      	ldr	r1, [r7, #4]
 8008c6e:	4613      	mov	r3, r2
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	4413      	add	r3, r2
 8008c74:	00db      	lsls	r3, r3, #3
 8008c76:	440b      	add	r3, r1
 8008c78:	3311      	adds	r3, #17
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008c7e:	7bfa      	ldrb	r2, [r7, #15]
 8008c80:	6879      	ldr	r1, [r7, #4]
 8008c82:	4613      	mov	r3, r2
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	4413      	add	r3, r2
 8008c88:	00db      	lsls	r3, r3, #3
 8008c8a:	440b      	add	r3, r1
 8008c8c:	3310      	adds	r3, #16
 8008c8e:	7bfa      	ldrb	r2, [r7, #15]
 8008c90:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008c92:	7bfa      	ldrb	r2, [r7, #15]
 8008c94:	6879      	ldr	r1, [r7, #4]
 8008c96:	4613      	mov	r3, r2
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	4413      	add	r3, r2
 8008c9c:	00db      	lsls	r3, r3, #3
 8008c9e:	440b      	add	r3, r1
 8008ca0:	3313      	adds	r3, #19
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008ca6:	7bfa      	ldrb	r2, [r7, #15]
 8008ca8:	6879      	ldr	r1, [r7, #4]
 8008caa:	4613      	mov	r3, r2
 8008cac:	009b      	lsls	r3, r3, #2
 8008cae:	4413      	add	r3, r2
 8008cb0:	00db      	lsls	r3, r3, #3
 8008cb2:	440b      	add	r3, r1
 8008cb4:	3320      	adds	r3, #32
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008cba:	7bfa      	ldrb	r2, [r7, #15]
 8008cbc:	6879      	ldr	r1, [r7, #4]
 8008cbe:	4613      	mov	r3, r2
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	4413      	add	r3, r2
 8008cc4:	00db      	lsls	r3, r3, #3
 8008cc6:	440b      	add	r3, r1
 8008cc8:	3324      	adds	r3, #36	@ 0x24
 8008cca:	2200      	movs	r2, #0
 8008ccc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008cce:	7bfb      	ldrb	r3, [r7, #15]
 8008cd0:	6879      	ldr	r1, [r7, #4]
 8008cd2:	1c5a      	adds	r2, r3, #1
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	009b      	lsls	r3, r3, #2
 8008cd8:	4413      	add	r3, r2
 8008cda:	00db      	lsls	r3, r3, #3
 8008cdc:	440b      	add	r3, r1
 8008cde:	2200      	movs	r2, #0
 8008ce0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008ce2:	7bfb      	ldrb	r3, [r7, #15]
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	73fb      	strb	r3, [r7, #15]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	791b      	ldrb	r3, [r3, #4]
 8008cec:	7bfa      	ldrb	r2, [r7, #15]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d3bb      	bcc.n	8008c6a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	73fb      	strb	r3, [r7, #15]
 8008cf6:	e044      	b.n	8008d82 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008cf8:	7bfa      	ldrb	r2, [r7, #15]
 8008cfa:	6879      	ldr	r1, [r7, #4]
 8008cfc:	4613      	mov	r3, r2
 8008cfe:	009b      	lsls	r3, r3, #2
 8008d00:	4413      	add	r3, r2
 8008d02:	00db      	lsls	r3, r3, #3
 8008d04:	440b      	add	r3, r1
 8008d06:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008d0e:	7bfa      	ldrb	r2, [r7, #15]
 8008d10:	6879      	ldr	r1, [r7, #4]
 8008d12:	4613      	mov	r3, r2
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	4413      	add	r3, r2
 8008d18:	00db      	lsls	r3, r3, #3
 8008d1a:	440b      	add	r3, r1
 8008d1c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008d20:	7bfa      	ldrb	r2, [r7, #15]
 8008d22:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008d24:	7bfa      	ldrb	r2, [r7, #15]
 8008d26:	6879      	ldr	r1, [r7, #4]
 8008d28:	4613      	mov	r3, r2
 8008d2a:	009b      	lsls	r3, r3, #2
 8008d2c:	4413      	add	r3, r2
 8008d2e:	00db      	lsls	r3, r3, #3
 8008d30:	440b      	add	r3, r1
 8008d32:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8008d36:	2200      	movs	r2, #0
 8008d38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008d3a:	7bfa      	ldrb	r2, [r7, #15]
 8008d3c:	6879      	ldr	r1, [r7, #4]
 8008d3e:	4613      	mov	r3, r2
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	4413      	add	r3, r2
 8008d44:	00db      	lsls	r3, r3, #3
 8008d46:	440b      	add	r3, r1
 8008d48:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008d50:	7bfa      	ldrb	r2, [r7, #15]
 8008d52:	6879      	ldr	r1, [r7, #4]
 8008d54:	4613      	mov	r3, r2
 8008d56:	009b      	lsls	r3, r3, #2
 8008d58:	4413      	add	r3, r2
 8008d5a:	00db      	lsls	r3, r3, #3
 8008d5c:	440b      	add	r3, r1
 8008d5e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008d62:	2200      	movs	r2, #0
 8008d64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008d66:	7bfa      	ldrb	r2, [r7, #15]
 8008d68:	6879      	ldr	r1, [r7, #4]
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	4413      	add	r3, r2
 8008d70:	00db      	lsls	r3, r3, #3
 8008d72:	440b      	add	r3, r1
 8008d74:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8008d78:	2200      	movs	r2, #0
 8008d7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d7c:	7bfb      	ldrb	r3, [r7, #15]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	73fb      	strb	r3, [r7, #15]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	791b      	ldrb	r3, [r3, #4]
 8008d86:	7bfa      	ldrb	r2, [r7, #15]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d3b5      	bcc.n	8008cf8 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6818      	ldr	r0, [r3, #0]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	3304      	adds	r3, #4
 8008d94:	e893 0006 	ldmia.w	r3, {r1, r2}
 8008d98:	f004 fbfd 	bl	800d596 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2201      	movs	r2, #1
 8008da6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	7a9b      	ldrb	r3, [r3, #10]
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d102      	bne.n	8008db8 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f001 fc40 	bl	800a638 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b082      	sub	sp, #8
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d101      	bne.n	8008dd8 <HAL_PCD_Start+0x16>
 8008dd4:	2302      	movs	r3, #2
 8008dd6:	e012      	b.n	8008dfe <HAL_PCD_Start+0x3c>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4618      	mov	r0, r3
 8008de6:	f004 fba4 	bl	800d532 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4618      	mov	r0, r3
 8008df0:	f006 fe65 	bl	800fabe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8008dfc:	2300      	movs	r3, #0
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3708      	adds	r7, #8
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008e06:	b580      	push	{r7, lr}
 8008e08:	b084      	sub	sp, #16
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4618      	mov	r0, r3
 8008e14:	f006 fe6a 	bl	800faec <USB_ReadInterrupts>
 8008e18:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d003      	beq.n	8008e2c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f000 fb04 	bl	8009432 <PCD_EP_ISR_Handler>

    return;
 8008e2a:	e110      	b.n	800904e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d013      	beq.n	8008e5e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008e3e:	b29a      	uxth	r2, r3
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e48:	b292      	uxth	r2, r2
 8008e4a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f009 f93d 	bl	80120ce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8008e54:	2100      	movs	r1, #0
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f000 f8fc 	bl	8009054 <HAL_PCD_SetAddress>

    return;
 8008e5c:	e0f7      	b.n	800904e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d00c      	beq.n	8008e82 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008e70:	b29a      	uxth	r2, r3
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008e7a:	b292      	uxth	r2, r2
 8008e7c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8008e80:	e0e5      	b.n	800904e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d00c      	beq.n	8008ea6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008e94:	b29a      	uxth	r2, r3
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008e9e:	b292      	uxth	r2, r2
 8008ea0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8008ea4:	e0d3      	b.n	800904e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d034      	beq.n	8008f1a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008eb8:	b29a      	uxth	r2, r3
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f022 0204 	bic.w	r2, r2, #4
 8008ec2:	b292      	uxth	r2, r2
 8008ec4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008ed0:	b29a      	uxth	r2, r3
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f022 0208 	bic.w	r2, r2, #8
 8008eda:	b292      	uxth	r2, r2
 8008edc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    if (hpcd->LPM_State == LPM_L1)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8008ee6:	2b01      	cmp	r3, #1
 8008ee8:	d107      	bne.n	8008efa <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2200      	movs	r2, #0
 8008eee:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008ef2:	2100      	movs	r1, #0
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f009 fadf 	bl	80124b8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f009 f920 	bl	8012140 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008f08:	b29a      	uxth	r2, r3
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008f12:	b292      	uxth	r2, r2
 8008f14:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8008f18:	e099      	b.n	800904e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d027      	beq.n	8008f74 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008f2c:	b29a      	uxth	r2, r3
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f042 0208 	orr.w	r2, r2, #8
 8008f36:	b292      	uxth	r2, r2
 8008f38:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008f44:	b29a      	uxth	r2, r3
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008f4e:	b292      	uxth	r2, r2
 8008f50:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f042 0204 	orr.w	r2, r2, #4
 8008f66:	b292      	uxth	r2, r2
 8008f68:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	f009 f8cd 	bl	801210c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8008f72:	e06c      	b.n	800904e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d040      	beq.n	8009000 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008f86:	b29a      	uxth	r2, r3
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008f90:	b292      	uxth	r2, r2
 8008f92:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
    if (hpcd->LPM_State == LPM_L0)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d12b      	bne.n	8008ff8 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008fa8:	b29a      	uxth	r2, r3
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	f042 0204 	orr.w	r2, r2, #4
 8008fb2:	b292      	uxth	r2, r2
 8008fb4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8008fc0:	b29a      	uxth	r2, r3
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f042 0208 	orr.w	r2, r2, #8
 8008fca:	b292      	uxth	r2, r2
 8008fcc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      hpcd->LPM_State = LPM_L1;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2201      	movs	r2, #1
 8008fd4:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	089b      	lsrs	r3, r3, #2
 8008fe4:	f003 023c 	and.w	r2, r3, #60	@ 0x3c
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f8c3 22cc 	str.w	r2, [r3, #716]	@ 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008fee:	2101      	movs	r1, #1
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f009 fa61 	bl	80124b8 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8008ff6:	e02a      	b.n	800904e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f009 f887 	bl	801210c <HAL_PCD_SuspendCallback>
    return;
 8008ffe:	e026      	b.n	800904e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009006:	2b00      	cmp	r3, #0
 8009008:	d00f      	beq.n	800902a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009012:	b29a      	uxth	r2, r3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800901c:	b292      	uxth	r2, r2
 800901e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f009 f845 	bl	80120b2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8009028:	e011      	b.n	800904e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009030:	2b00      	cmp	r3, #0
 8009032:	d00c      	beq.n	800904e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800903c:	b29a      	uxth	r2, r3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009046:	b292      	uxth	r2, r2
 8009048:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800904c:	bf00      	nop
  }
}
 800904e:	3710      	adds	r7, #16
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	460b      	mov	r3, r1
 800905e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8009066:	2b01      	cmp	r3, #1
 8009068:	d101      	bne.n	800906e <HAL_PCD_SetAddress+0x1a>
 800906a:	2302      	movs	r3, #2
 800906c:	e012      	b.n	8009094 <HAL_PCD_SetAddress+0x40>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2201      	movs	r2, #1
 8009072:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	78fa      	ldrb	r2, [r7, #3]
 800907a:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	78fa      	ldrb	r2, [r7, #3]
 8009082:	4611      	mov	r1, r2
 8009084:	4618      	mov	r0, r3
 8009086:	f006 fd06 	bl	800fa96 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2200      	movs	r2, #0
 800908e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3708      	adds	r7, #8
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b084      	sub	sp, #16
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	4608      	mov	r0, r1
 80090a6:	4611      	mov	r1, r2
 80090a8:	461a      	mov	r2, r3
 80090aa:	4603      	mov	r3, r0
 80090ac:	70fb      	strb	r3, [r7, #3]
 80090ae:	460b      	mov	r3, r1
 80090b0:	803b      	strh	r3, [r7, #0]
 80090b2:	4613      	mov	r3, r2
 80090b4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80090b6:	2300      	movs	r3, #0
 80090b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80090ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	da0e      	bge.n	80090e0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80090c2:	78fb      	ldrb	r3, [r7, #3]
 80090c4:	f003 0207 	and.w	r2, r3, #7
 80090c8:	4613      	mov	r3, r2
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	4413      	add	r3, r2
 80090ce:	00db      	lsls	r3, r3, #3
 80090d0:	3310      	adds	r3, #16
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	4413      	add	r3, r2
 80090d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2201      	movs	r2, #1
 80090dc:	705a      	strb	r2, [r3, #1]
 80090de:	e00e      	b.n	80090fe <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80090e0:	78fb      	ldrb	r3, [r7, #3]
 80090e2:	f003 0207 	and.w	r2, r3, #7
 80090e6:	4613      	mov	r3, r2
 80090e8:	009b      	lsls	r3, r3, #2
 80090ea:	4413      	add	r3, r2
 80090ec:	00db      	lsls	r3, r3, #3
 80090ee:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80090f2:	687a      	ldr	r2, [r7, #4]
 80090f4:	4413      	add	r3, r2
 80090f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2200      	movs	r2, #0
 80090fc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80090fe:	78fb      	ldrb	r3, [r7, #3]
 8009100:	f003 0307 	and.w	r3, r3, #7
 8009104:	b2da      	uxtb	r2, r3
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800910a:	883a      	ldrh	r2, [r7, #0]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	78ba      	ldrb	r2, [r7, #2]
 8009114:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009116:	78bb      	ldrb	r3, [r7, #2]
 8009118:	2b02      	cmp	r3, #2
 800911a:	d102      	bne.n	8009122 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2200      	movs	r2, #0
 8009120:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8009128:	2b01      	cmp	r3, #1
 800912a:	d101      	bne.n	8009130 <HAL_PCD_EP_Open+0x94>
 800912c:	2302      	movs	r3, #2
 800912e:	e00e      	b.n	800914e <HAL_PCD_EP_Open+0xb2>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2201      	movs	r2, #1
 8009134:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	68f9      	ldr	r1, [r7, #12]
 800913e:	4618      	mov	r0, r3
 8009140:	f004 fa48 	bl	800d5d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2200      	movs	r2, #0
 8009148:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 800914c:	7afb      	ldrb	r3, [r7, #11]
}
 800914e:	4618      	mov	r0, r3
 8009150:	3710      	adds	r7, #16
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}

08009156 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009156:	b580      	push	{r7, lr}
 8009158:	b084      	sub	sp, #16
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
 800915e:	460b      	mov	r3, r1
 8009160:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009162:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009166:	2b00      	cmp	r3, #0
 8009168:	da0e      	bge.n	8009188 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800916a:	78fb      	ldrb	r3, [r7, #3]
 800916c:	f003 0207 	and.w	r2, r3, #7
 8009170:	4613      	mov	r3, r2
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	4413      	add	r3, r2
 8009176:	00db      	lsls	r3, r3, #3
 8009178:	3310      	adds	r3, #16
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	4413      	add	r3, r2
 800917e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2201      	movs	r2, #1
 8009184:	705a      	strb	r2, [r3, #1]
 8009186:	e00e      	b.n	80091a6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009188:	78fb      	ldrb	r3, [r7, #3]
 800918a:	f003 0207 	and.w	r2, r3, #7
 800918e:	4613      	mov	r3, r2
 8009190:	009b      	lsls	r3, r3, #2
 8009192:	4413      	add	r3, r2
 8009194:	00db      	lsls	r3, r3, #3
 8009196:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	4413      	add	r3, r2
 800919e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	2200      	movs	r2, #0
 80091a4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80091a6:	78fb      	ldrb	r3, [r7, #3]
 80091a8:	f003 0307 	and.w	r3, r3, #7
 80091ac:	b2da      	uxtb	r2, r3
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d101      	bne.n	80091c0 <HAL_PCD_EP_Close+0x6a>
 80091bc:	2302      	movs	r3, #2
 80091be:	e00e      	b.n	80091de <HAL_PCD_EP_Close+0x88>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2201      	movs	r2, #1
 80091c4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	68f9      	ldr	r1, [r7, #12]
 80091ce:	4618      	mov	r0, r3
 80091d0:	f004 fdc4 	bl	800dd5c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 80091dc:	2300      	movs	r3, #0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b086      	sub	sp, #24
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	60f8      	str	r0, [r7, #12]
 80091ee:	607a      	str	r2, [r7, #4]
 80091f0:	603b      	str	r3, [r7, #0]
 80091f2:	460b      	mov	r3, r1
 80091f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80091f6:	7afb      	ldrb	r3, [r7, #11]
 80091f8:	f003 0207 	and.w	r2, r3, #7
 80091fc:	4613      	mov	r3, r2
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	4413      	add	r3, r2
 8009202:	00db      	lsls	r3, r3, #3
 8009204:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009208:	68fa      	ldr	r2, [r7, #12]
 800920a:	4413      	add	r3, r2
 800920c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	683a      	ldr	r2, [r7, #0]
 8009218:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	2200      	movs	r2, #0
 800921e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	2200      	movs	r2, #0
 8009224:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009226:	7afb      	ldrb	r3, [r7, #11]
 8009228:	f003 0307 	and.w	r3, r3, #7
 800922c:	b2da      	uxtb	r2, r3
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	6979      	ldr	r1, [r7, #20]
 8009238:	4618      	mov	r0, r3
 800923a:	f004 ff7c 	bl	800e136 <USB_EPStartXfer>

  return HAL_OK;
 800923e:	2300      	movs	r3, #0
}
 8009240:	4618      	mov	r0, r3
 8009242:	3718      	adds	r7, #24
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8009248:	b480      	push	{r7}
 800924a:	b083      	sub	sp, #12
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	460b      	mov	r3, r1
 8009252:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009254:	78fb      	ldrb	r3, [r7, #3]
 8009256:	f003 0207 	and.w	r2, r3, #7
 800925a:	6879      	ldr	r1, [r7, #4]
 800925c:	4613      	mov	r3, r2
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	4413      	add	r3, r2
 8009262:	00db      	lsls	r3, r3, #3
 8009264:	440b      	add	r3, r1
 8009266:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 800926a:	681b      	ldr	r3, [r3, #0]
}
 800926c:	4618      	mov	r0, r3
 800926e:	370c      	adds	r7, #12
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b086      	sub	sp, #24
 800927c:	af00      	add	r7, sp, #0
 800927e:	60f8      	str	r0, [r7, #12]
 8009280:	607a      	str	r2, [r7, #4]
 8009282:	603b      	str	r3, [r7, #0]
 8009284:	460b      	mov	r3, r1
 8009286:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009288:	7afb      	ldrb	r3, [r7, #11]
 800928a:	f003 0207 	and.w	r2, r3, #7
 800928e:	4613      	mov	r3, r2
 8009290:	009b      	lsls	r3, r3, #2
 8009292:	4413      	add	r3, r2
 8009294:	00db      	lsls	r3, r3, #3
 8009296:	3310      	adds	r3, #16
 8009298:	68fa      	ldr	r2, [r7, #12]
 800929a:	4413      	add	r3, r2
 800929c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	687a      	ldr	r2, [r7, #4]
 80092a2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	683a      	ldr	r2, [r7, #0]
 80092a8:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	2201      	movs	r2, #1
 80092ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	683a      	ldr	r2, [r7, #0]
 80092b6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	2200      	movs	r2, #0
 80092bc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	2201      	movs	r2, #1
 80092c2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80092c4:	7afb      	ldrb	r3, [r7, #11]
 80092c6:	f003 0307 	and.w	r3, r3, #7
 80092ca:	b2da      	uxtb	r2, r3
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	6979      	ldr	r1, [r7, #20]
 80092d6:	4618      	mov	r0, r3
 80092d8:	f004 ff2d 	bl	800e136 <USB_EPStartXfer>

  return HAL_OK;
 80092dc:	2300      	movs	r3, #0
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3718      	adds	r7, #24
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}

080092e6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80092e6:	b580      	push	{r7, lr}
 80092e8:	b084      	sub	sp, #16
 80092ea:	af00      	add	r7, sp, #0
 80092ec:	6078      	str	r0, [r7, #4]
 80092ee:	460b      	mov	r3, r1
 80092f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80092f2:	78fb      	ldrb	r3, [r7, #3]
 80092f4:	f003 0307 	and.w	r3, r3, #7
 80092f8:	687a      	ldr	r2, [r7, #4]
 80092fa:	7912      	ldrb	r2, [r2, #4]
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d901      	bls.n	8009304 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009300:	2301      	movs	r3, #1
 8009302:	e03e      	b.n	8009382 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009304:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009308:	2b00      	cmp	r3, #0
 800930a:	da0e      	bge.n	800932a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800930c:	78fb      	ldrb	r3, [r7, #3]
 800930e:	f003 0207 	and.w	r2, r3, #7
 8009312:	4613      	mov	r3, r2
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	4413      	add	r3, r2
 8009318:	00db      	lsls	r3, r3, #3
 800931a:	3310      	adds	r3, #16
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	4413      	add	r3, r2
 8009320:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2201      	movs	r2, #1
 8009326:	705a      	strb	r2, [r3, #1]
 8009328:	e00c      	b.n	8009344 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800932a:	78fa      	ldrb	r2, [r7, #3]
 800932c:	4613      	mov	r3, r2
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	4413      	add	r3, r2
 8009332:	00db      	lsls	r3, r3, #3
 8009334:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009338:	687a      	ldr	r2, [r7, #4]
 800933a:	4413      	add	r3, r2
 800933c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2200      	movs	r2, #0
 8009342:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2201      	movs	r2, #1
 8009348:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800934a:	78fb      	ldrb	r3, [r7, #3]
 800934c:	f003 0307 	and.w	r3, r3, #7
 8009350:	b2da      	uxtb	r2, r3
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800935c:	2b01      	cmp	r3, #1
 800935e:	d101      	bne.n	8009364 <HAL_PCD_EP_SetStall+0x7e>
 8009360:	2302      	movs	r3, #2
 8009362:	e00e      	b.n	8009382 <HAL_PCD_EP_SetStall+0x9c>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2201      	movs	r2, #1
 8009368:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	68f9      	ldr	r1, [r7, #12]
 8009372:	4618      	mov	r0, r3
 8009374:	f006 fa90 	bl	800f898 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2200      	movs	r2, #0
 800937c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8009380:	2300      	movs	r3, #0
}
 8009382:	4618      	mov	r0, r3
 8009384:	3710      	adds	r7, #16
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}

0800938a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800938a:	b580      	push	{r7, lr}
 800938c:	b084      	sub	sp, #16
 800938e:	af00      	add	r7, sp, #0
 8009390:	6078      	str	r0, [r7, #4]
 8009392:	460b      	mov	r3, r1
 8009394:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009396:	78fb      	ldrb	r3, [r7, #3]
 8009398:	f003 030f 	and.w	r3, r3, #15
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	7912      	ldrb	r2, [r2, #4]
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d901      	bls.n	80093a8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80093a4:	2301      	movs	r3, #1
 80093a6:	e040      	b.n	800942a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80093a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	da0e      	bge.n	80093ce <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80093b0:	78fb      	ldrb	r3, [r7, #3]
 80093b2:	f003 0207 	and.w	r2, r3, #7
 80093b6:	4613      	mov	r3, r2
 80093b8:	009b      	lsls	r3, r3, #2
 80093ba:	4413      	add	r3, r2
 80093bc:	00db      	lsls	r3, r3, #3
 80093be:	3310      	adds	r3, #16
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	4413      	add	r3, r2
 80093c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2201      	movs	r2, #1
 80093ca:	705a      	strb	r2, [r3, #1]
 80093cc:	e00e      	b.n	80093ec <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80093ce:	78fb      	ldrb	r3, [r7, #3]
 80093d0:	f003 0207 	and.w	r2, r3, #7
 80093d4:	4613      	mov	r3, r2
 80093d6:	009b      	lsls	r3, r3, #2
 80093d8:	4413      	add	r3, r2
 80093da:	00db      	lsls	r3, r3, #3
 80093dc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80093e0:	687a      	ldr	r2, [r7, #4]
 80093e2:	4413      	add	r3, r2
 80093e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2200      	movs	r2, #0
 80093ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2200      	movs	r2, #0
 80093f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80093f2:	78fb      	ldrb	r3, [r7, #3]
 80093f4:	f003 0307 	and.w	r3, r3, #7
 80093f8:	b2da      	uxtb	r2, r3
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8009404:	2b01      	cmp	r3, #1
 8009406:	d101      	bne.n	800940c <HAL_PCD_EP_ClrStall+0x82>
 8009408:	2302      	movs	r3, #2
 800940a:	e00e      	b.n	800942a <HAL_PCD_EP_ClrStall+0xa0>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2201      	movs	r2, #1
 8009410:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	68f9      	ldr	r1, [r7, #12]
 800941a:	4618      	mov	r0, r3
 800941c:	f006 fa8d 	bl	800f93a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2200      	movs	r2, #0
 8009424:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8009428:	2300      	movs	r3, #0
}
 800942a:	4618      	mov	r0, r3
 800942c:	3710      	adds	r7, #16
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b096      	sub	sp, #88	@ 0x58
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800943a:	e3ad      	b.n	8009b98 <PCD_EP_ISR_Handler+0x766>
  {
    wIstr = hpcd->Instance->ISTR;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009444:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8009448:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800944c:	b2db      	uxtb	r3, r3
 800944e:	f003 030f 	and.w	r3, r3, #15
 8009452:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8009456:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800945a:	2b00      	cmp	r3, #0
 800945c:	f040 816f 	bne.w	800973e <PCD_EP_ISR_Handler+0x30c>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8009460:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8009464:	f003 0310 	and.w	r3, r3, #16
 8009468:	2b00      	cmp	r3, #0
 800946a:	d14c      	bne.n	8009506 <PCD_EP_ISR_Handler+0xd4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	881b      	ldrh	r3, [r3, #0]
 8009472:	b29b      	uxth	r3, r3
 8009474:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8009478:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800947c:	81fb      	strh	r3, [r7, #14]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	89fb      	ldrh	r3, [r7, #14]
 8009484:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009488:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800948c:	b29b      	uxth	r3, r3
 800948e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	3310      	adds	r3, #16
 8009494:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800949e:	b29b      	uxth	r3, r3
 80094a0:	461a      	mov	r2, r3
 80094a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	00db      	lsls	r3, r3, #3
 80094a8:	4413      	add	r3, r2
 80094aa:	687a      	ldr	r2, [r7, #4]
 80094ac:	6812      	ldr	r2, [r2, #0]
 80094ae:	4413      	add	r3, r2
 80094b0:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80094b4:	881b      	ldrh	r3, [r3, #0]
 80094b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80094ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094bc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80094be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094c0:	695a      	ldr	r2, [r3, #20]
 80094c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094c4:	69db      	ldr	r3, [r3, #28]
 80094c6:	441a      	add	r2, r3
 80094c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094ca:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80094cc:	2100      	movs	r1, #0
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f008 fdd5 	bl	801207e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	7b1b      	ldrb	r3, [r3, #12]
 80094d8:	b2db      	uxtb	r3, r3
 80094da:	2b00      	cmp	r3, #0
 80094dc:	f000 835c 	beq.w	8009b98 <PCD_EP_ISR_Handler+0x766>
 80094e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80094e2:	699b      	ldr	r3, [r3, #24]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	f040 8357 	bne.w	8009b98 <PCD_EP_ISR_Handler+0x766>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	7b1b      	ldrb	r3, [r3, #12]
 80094ee:	b2db      	uxtb	r3, r3
 80094f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80094f4:	b2da      	uxtb	r2, r3
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	731a      	strb	r2, [r3, #12]
 8009504:	e348      	b.n	8009b98 <PCD_EP_ISR_Handler+0x766>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800950c:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	881b      	ldrh	r3, [r3, #0]
 8009514:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8009518:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800951c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009520:	2b00      	cmp	r3, #0
 8009522:	d032      	beq.n	800958a <PCD_EP_ISR_Handler+0x158>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800952c:	b29b      	uxth	r3, r3
 800952e:	461a      	mov	r2, r3
 8009530:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009532:	781b      	ldrb	r3, [r3, #0]
 8009534:	00db      	lsls	r3, r3, #3
 8009536:	4413      	add	r3, r2
 8009538:	687a      	ldr	r2, [r7, #4]
 800953a:	6812      	ldr	r2, [r2, #0]
 800953c:	4413      	add	r3, r2
 800953e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009542:	881b      	ldrh	r3, [r3, #0]
 8009544:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009548:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800954a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6818      	ldr	r0, [r3, #0]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8009556:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009558:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800955a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800955c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800955e:	b29b      	uxth	r3, r3
 8009560:	f006 fb16 	bl	800fb90 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	881b      	ldrh	r3, [r3, #0]
 800956a:	b29a      	uxth	r2, r3
 800956c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8009570:	4013      	ands	r3, r2
 8009572:	823b      	strh	r3, [r7, #16]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	8a3a      	ldrh	r2, [r7, #16]
 800957a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800957e:	b292      	uxth	r2, r2
 8009580:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8009582:	6878      	ldr	r0, [r7, #4]
 8009584:	f008 fd4e 	bl	8012024 <HAL_PCD_SetupStageCallback>
 8009588:	e306      	b.n	8009b98 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800958a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 800958e:	2b00      	cmp	r3, #0
 8009590:	f280 8302 	bge.w	8009b98 <PCD_EP_ISR_Handler+0x766>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	881b      	ldrh	r3, [r3, #0]
 800959a:	b29a      	uxth	r2, r3
 800959c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80095a0:	4013      	ands	r3, r2
 80095a2:	83fb      	strh	r3, [r7, #30]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	8bfa      	ldrh	r2, [r7, #30]
 80095aa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80095ae:	b292      	uxth	r2, r2
 80095b0:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80095ba:	b29b      	uxth	r3, r3
 80095bc:	461a      	mov	r2, r3
 80095be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	00db      	lsls	r3, r3, #3
 80095c4:	4413      	add	r3, r2
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	6812      	ldr	r2, [r2, #0]
 80095ca:	4413      	add	r3, r2
 80095cc:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80095d0:	881b      	ldrh	r3, [r3, #0]
 80095d2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80095d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095d8:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80095da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095dc:	69db      	ldr	r3, [r3, #28]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d019      	beq.n	8009616 <PCD_EP_ISR_Handler+0x1e4>
 80095e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095e4:	695b      	ldr	r3, [r3, #20]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d015      	beq.n	8009616 <PCD_EP_ISR_Handler+0x1e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6818      	ldr	r0, [r3, #0]
 80095ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095f0:	6959      	ldr	r1, [r3, #20]
 80095f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095f4:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80095f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095f8:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	f006 fac8 	bl	800fb90 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8009600:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009602:	695a      	ldr	r2, [r3, #20]
 8009604:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009606:	69db      	ldr	r3, [r3, #28]
 8009608:	441a      	add	r2, r3
 800960a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800960c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800960e:	2100      	movs	r1, #0
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f008 fd19 	bl	8012048 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	881b      	ldrh	r3, [r3, #0]
 800961c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8009620:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009624:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009628:	2b00      	cmp	r3, #0
 800962a:	f040 82b5 	bne.w	8009b98 <PCD_EP_ISR_Handler+0x766>
 800962e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009632:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8009636:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800963a:	f000 82ad 	beq.w	8009b98 <PCD_EP_ISR_Handler+0x766>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	61bb      	str	r3, [r7, #24]
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800964c:	b29b      	uxth	r3, r3
 800964e:	461a      	mov	r2, r3
 8009650:	69bb      	ldr	r3, [r7, #24]
 8009652:	4413      	add	r3, r2
 8009654:	61bb      	str	r3, [r7, #24]
 8009656:	69bb      	ldr	r3, [r7, #24]
 8009658:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800965c:	617b      	str	r3, [r7, #20]
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	881b      	ldrh	r3, [r3, #0]
 8009662:	b29b      	uxth	r3, r3
 8009664:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009668:	b29a      	uxth	r2, r3
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	801a      	strh	r2, [r3, #0]
 800966e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009670:	691b      	ldr	r3, [r3, #16]
 8009672:	2b3e      	cmp	r3, #62	@ 0x3e
 8009674:	d91d      	bls.n	80096b2 <PCD_EP_ISR_Handler+0x280>
 8009676:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009678:	691b      	ldr	r3, [r3, #16]
 800967a:	095b      	lsrs	r3, r3, #5
 800967c:	647b      	str	r3, [r7, #68]	@ 0x44
 800967e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009680:	691b      	ldr	r3, [r3, #16]
 8009682:	f003 031f 	and.w	r3, r3, #31
 8009686:	2b00      	cmp	r3, #0
 8009688:	d102      	bne.n	8009690 <PCD_EP_ISR_Handler+0x25e>
 800968a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800968c:	3b01      	subs	r3, #1
 800968e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	881b      	ldrh	r3, [r3, #0]
 8009694:	b29a      	uxth	r2, r3
 8009696:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009698:	b29b      	uxth	r3, r3
 800969a:	029b      	lsls	r3, r3, #10
 800969c:	b29b      	uxth	r3, r3
 800969e:	4313      	orrs	r3, r2
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096aa:	b29a      	uxth	r2, r3
 80096ac:	697b      	ldr	r3, [r7, #20]
 80096ae:	801a      	strh	r2, [r3, #0]
 80096b0:	e026      	b.n	8009700 <PCD_EP_ISR_Handler+0x2ce>
 80096b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80096b4:	691b      	ldr	r3, [r3, #16]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d10a      	bne.n	80096d0 <PCD_EP_ISR_Handler+0x29e>
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	881b      	ldrh	r3, [r3, #0]
 80096be:	b29b      	uxth	r3, r3
 80096c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096c8:	b29a      	uxth	r2, r3
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	801a      	strh	r2, [r3, #0]
 80096ce:	e017      	b.n	8009700 <PCD_EP_ISR_Handler+0x2ce>
 80096d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80096d2:	691b      	ldr	r3, [r3, #16]
 80096d4:	085b      	lsrs	r3, r3, #1
 80096d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80096d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80096da:	691b      	ldr	r3, [r3, #16]
 80096dc:	f003 0301 	and.w	r3, r3, #1
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d002      	beq.n	80096ea <PCD_EP_ISR_Handler+0x2b8>
 80096e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096e6:	3301      	adds	r3, #1
 80096e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80096ea:	697b      	ldr	r3, [r7, #20]
 80096ec:	881b      	ldrh	r3, [r3, #0]
 80096ee:	b29a      	uxth	r2, r3
 80096f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80096f2:	b29b      	uxth	r3, r3
 80096f4:	029b      	lsls	r3, r3, #10
 80096f6:	b29b      	uxth	r3, r3
 80096f8:	4313      	orrs	r3, r2
 80096fa:	b29a      	uxth	r2, r3
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	881b      	ldrh	r3, [r3, #0]
 8009706:	b29b      	uxth	r3, r3
 8009708:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800970c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009710:	827b      	strh	r3, [r7, #18]
 8009712:	8a7b      	ldrh	r3, [r7, #18]
 8009714:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009718:	827b      	strh	r3, [r7, #18]
 800971a:	8a7b      	ldrh	r3, [r7, #18]
 800971c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009720:	827b      	strh	r3, [r7, #18]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	8a7b      	ldrh	r3, [r7, #18]
 8009728:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800972c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009730:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009734:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009738:	b29b      	uxth	r3, r3
 800973a:	8013      	strh	r3, [r2, #0]
 800973c:	e22c      	b.n	8009b98 <PCD_EP_ISR_Handler+0x766>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	461a      	mov	r2, r3
 8009744:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	4413      	add	r3, r2
 800974c:	881b      	ldrh	r3, [r3, #0]
 800974e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8009752:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8009756:	2b00      	cmp	r3, #0
 8009758:	f280 80f6 	bge.w	8009948 <PCD_EP_ISR_Handler+0x516>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	461a      	mov	r2, r3
 8009762:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	4413      	add	r3, r2
 800976a:	881b      	ldrh	r3, [r3, #0]
 800976c:	b29a      	uxth	r2, r3
 800976e:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8009772:	4013      	ands	r3, r2
 8009774:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	461a      	mov	r2, r3
 800977e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8009782:	009b      	lsls	r3, r3, #2
 8009784:	4413      	add	r3, r2
 8009786:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800978a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800978e:	b292      	uxth	r2, r2
 8009790:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8009792:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8009796:	4613      	mov	r3, r2
 8009798:	009b      	lsls	r3, r3, #2
 800979a:	4413      	add	r3, r2
 800979c:	00db      	lsls	r3, r3, #3
 800979e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	4413      	add	r3, r2
 80097a6:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80097a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80097aa:	7b1b      	ldrb	r3, [r3, #12]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d123      	bne.n	80097f8 <PCD_EP_ISR_Handler+0x3c6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80097b8:	b29b      	uxth	r3, r3
 80097ba:	461a      	mov	r2, r3
 80097bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	00db      	lsls	r3, r3, #3
 80097c2:	4413      	add	r3, r2
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	6812      	ldr	r2, [r2, #0]
 80097c8:	4413      	add	r3, r2
 80097ca:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80097ce:	881b      	ldrh	r3, [r3, #0]
 80097d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80097d4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80097d8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80097dc:	2b00      	cmp	r3, #0
 80097de:	f000 808e 	beq.w	80098fe <PCD_EP_ISR_Handler+0x4cc>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6818      	ldr	r0, [r3, #0]
 80097e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80097e8:	6959      	ldr	r1, [r3, #20]
 80097ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80097ec:	88da      	ldrh	r2, [r3, #6]
 80097ee:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80097f2:	f006 f9cd 	bl	800fb90 <USB_ReadPMA>
 80097f6:	e082      	b.n	80098fe <PCD_EP_ISR_Handler+0x4cc>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80097f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80097fa:	78db      	ldrb	r3, [r3, #3]
 80097fc:	2b02      	cmp	r3, #2
 80097fe:	d10a      	bne.n	8009816 <PCD_EP_ISR_Handler+0x3e4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8009800:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009804:	461a      	mov	r2, r3
 8009806:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f000 f9d3 	bl	8009bb4 <HAL_PCD_EP_DB_Receive>
 800980e:	4603      	mov	r3, r0
 8009810:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8009814:	e073      	b.n	80098fe <PCD_EP_ISR_Handler+0x4cc>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	461a      	mov	r2, r3
 800981c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800981e:	781b      	ldrb	r3, [r3, #0]
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	4413      	add	r3, r2
 8009824:	881b      	ldrh	r3, [r3, #0]
 8009826:	b29b      	uxth	r3, r3
 8009828:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800982c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009830:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	461a      	mov	r2, r3
 800983a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	441a      	add	r2, r3
 8009842:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8009846:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800984a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800984e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009852:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009856:	b29b      	uxth	r3, r3
 8009858:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	461a      	mov	r2, r3
 8009860:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	009b      	lsls	r3, r3, #2
 8009866:	4413      	add	r3, r2
 8009868:	881b      	ldrh	r3, [r3, #0]
 800986a:	b29b      	uxth	r3, r3
 800986c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009870:	2b00      	cmp	r3, #0
 8009872:	d022      	beq.n	80098ba <PCD_EP_ISR_Handler+0x488>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800987c:	b29b      	uxth	r3, r3
 800987e:	461a      	mov	r2, r3
 8009880:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009882:	781b      	ldrb	r3, [r3, #0]
 8009884:	00db      	lsls	r3, r3, #3
 8009886:	4413      	add	r3, r2
 8009888:	687a      	ldr	r2, [r7, #4]
 800988a:	6812      	ldr	r2, [r2, #0]
 800988c:	4413      	add	r3, r2
 800988e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009892:	881b      	ldrh	r3, [r3, #0]
 8009894:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009898:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800989c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d02c      	beq.n	80098fe <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6818      	ldr	r0, [r3, #0]
 80098a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098aa:	6959      	ldr	r1, [r3, #20]
 80098ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098ae:	891a      	ldrh	r2, [r3, #8]
 80098b0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80098b4:	f006 f96c 	bl	800fb90 <USB_ReadPMA>
 80098b8:	e021      	b.n	80098fe <PCD_EP_ISR_Handler+0x4cc>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80098c2:	b29b      	uxth	r3, r3
 80098c4:	461a      	mov	r2, r3
 80098c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	00db      	lsls	r3, r3, #3
 80098cc:	4413      	add	r3, r2
 80098ce:	687a      	ldr	r2, [r7, #4]
 80098d0:	6812      	ldr	r2, [r2, #0]
 80098d2:	4413      	add	r3, r2
 80098d4:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 80098d8:	881b      	ldrh	r3, [r3, #0]
 80098da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098de:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80098e2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d009      	beq.n	80098fe <PCD_EP_ISR_Handler+0x4cc>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6818      	ldr	r0, [r3, #0]
 80098ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098f0:	6959      	ldr	r1, [r3, #20]
 80098f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80098f4:	895a      	ldrh	r2, [r3, #10]
 80098f6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80098fa:	f006 f949 	bl	800fb90 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80098fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009900:	69da      	ldr	r2, [r3, #28]
 8009902:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009906:	441a      	add	r2, r3
 8009908:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800990a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800990c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800990e:	695a      	ldr	r2, [r3, #20]
 8009910:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8009914:	441a      	add	r2, r3
 8009916:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009918:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800991a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800991c:	699b      	ldr	r3, [r3, #24]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d005      	beq.n	800992e <PCD_EP_ISR_Handler+0x4fc>
 8009922:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8009926:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009928:	691b      	ldr	r3, [r3, #16]
 800992a:	429a      	cmp	r2, r3
 800992c:	d206      	bcs.n	800993c <PCD_EP_ISR_Handler+0x50a>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800992e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009930:	781b      	ldrb	r3, [r3, #0]
 8009932:	4619      	mov	r1, r3
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f008 fb87 	bl	8012048 <HAL_PCD_DataOutStageCallback>
 800993a:	e005      	b.n	8009948 <PCD_EP_ISR_Handler+0x516>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009942:	4618      	mov	r0, r3
 8009944:	f004 fbf7 	bl	800e136 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8009948:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800994c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009950:	2b00      	cmp	r3, #0
 8009952:	f000 8121 	beq.w	8009b98 <PCD_EP_ISR_Handler+0x766>
      {
        ep = &hpcd->IN_ep[epindex];
 8009956:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 800995a:	4613      	mov	r3, r2
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	4413      	add	r3, r2
 8009960:	00db      	lsls	r3, r3, #3
 8009962:	3310      	adds	r3, #16
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	4413      	add	r3, r2
 8009968:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	461a      	mov	r2, r3
 8009970:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8009974:	009b      	lsls	r3, r3, #2
 8009976:	4413      	add	r3, r2
 8009978:	881b      	ldrh	r3, [r3, #0]
 800997a:	b29b      	uxth	r3, r3
 800997c:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8009980:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009984:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	461a      	mov	r2, r3
 800998e:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8009992:	009b      	lsls	r3, r3, #2
 8009994:	441a      	add	r2, r3
 8009996:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800999a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800999e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099a2:	b29b      	uxth	r3, r3
 80099a4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80099a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099a8:	78db      	ldrb	r3, [r3, #3]
 80099aa:	2b01      	cmp	r3, #1
 80099ac:	f040 80a2 	bne.w	8009af4 <PCD_EP_ISR_Handler+0x6c2>
        {
          ep->xfer_len = 0U;
 80099b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099b2:	2200      	movs	r2, #0
 80099b4:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80099b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099b8:	7b1b      	ldrb	r3, [r3, #12]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	f000 8093 	beq.w	8009ae6 <PCD_EP_ISR_Handler+0x6b4>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80099c0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80099c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d046      	beq.n	8009a5a <PCD_EP_ISR_Handler+0x628>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80099cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099ce:	785b      	ldrb	r3, [r3, #1]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d126      	bne.n	8009a22 <PCD_EP_ISR_Handler+0x5f0>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	461a      	mov	r2, r3
 80099e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099e8:	4413      	add	r3, r2
 80099ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80099ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	00da      	lsls	r2, r3, #3
 80099f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f4:	4413      	add	r3, r2
 80099f6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 80099fa:	623b      	str	r3, [r7, #32]
 80099fc:	6a3b      	ldr	r3, [r7, #32]
 80099fe:	881b      	ldrh	r3, [r3, #0]
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a06:	b29a      	uxth	r2, r3
 8009a08:	6a3b      	ldr	r3, [r7, #32]
 8009a0a:	801a      	strh	r2, [r3, #0]
 8009a0c:	6a3b      	ldr	r3, [r7, #32]
 8009a0e:	881b      	ldrh	r3, [r3, #0]
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a1a:	b29a      	uxth	r2, r3
 8009a1c:	6a3b      	ldr	r3, [r7, #32]
 8009a1e:	801a      	strh	r2, [r3, #0]
 8009a20:	e061      	b.n	8009ae6 <PCD_EP_ISR_Handler+0x6b4>
 8009a22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a24:	785b      	ldrb	r3, [r3, #1]
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d15d      	bne.n	8009ae6 <PCD_EP_ISR_Handler+0x6b4>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a3e:	4413      	add	r3, r2
 8009a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a44:	781b      	ldrb	r3, [r3, #0]
 8009a46:	00da      	lsls	r2, r3, #3
 8009a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a4a:	4413      	add	r3, r2
 8009a4c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009a50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a54:	2200      	movs	r2, #0
 8009a56:	801a      	strh	r2, [r3, #0]
 8009a58:	e045      	b.n	8009ae6 <PCD_EP_ISR_Handler+0x6b4>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a62:	785b      	ldrb	r3, [r3, #1]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d126      	bne.n	8009ab6 <PCD_EP_ISR_Handler+0x684>
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009a76:	b29b      	uxth	r3, r3
 8009a78:	461a      	mov	r2, r3
 8009a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a7c:	4413      	add	r3, r2
 8009a7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a82:	781b      	ldrb	r3, [r3, #0]
 8009a84:	00da      	lsls	r2, r3, #3
 8009a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a88:	4413      	add	r3, r2
 8009a8a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009a8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a92:	881b      	ldrh	r3, [r3, #0]
 8009a94:	b29b      	uxth	r3, r3
 8009a96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009a9a:	b29a      	uxth	r2, r3
 8009a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a9e:	801a      	strh	r2, [r3, #0]
 8009aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009aa2:	881b      	ldrh	r3, [r3, #0]
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009aaa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009aae:	b29a      	uxth	r2, r3
 8009ab0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ab2:	801a      	strh	r2, [r3, #0]
 8009ab4:	e017      	b.n	8009ae6 <PCD_EP_ISR_Handler+0x6b4>
 8009ab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ab8:	785b      	ldrb	r3, [r3, #1]
 8009aba:	2b01      	cmp	r3, #1
 8009abc:	d113      	bne.n	8009ae6 <PCD_EP_ISR_Handler+0x6b4>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	461a      	mov	r2, r3
 8009aca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009acc:	4413      	add	r3, r2
 8009ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ad0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ad2:	781b      	ldrb	r3, [r3, #0]
 8009ad4:	00da      	lsls	r2, r3, #3
 8009ad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ad8:	4413      	add	r3, r2
 8009ada:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009ade:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009ae6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009ae8:	781b      	ldrb	r3, [r3, #0]
 8009aea:	4619      	mov	r1, r3
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f008 fac6 	bl	801207e <HAL_PCD_DataInStageCallback>
 8009af2:	e051      	b.n	8009b98 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8009af4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d144      	bne.n	8009b8a <PCD_EP_ISR_Handler+0x758>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009b08:	b29b      	uxth	r3, r3
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	00db      	lsls	r3, r3, #3
 8009b12:	4413      	add	r3, r2
 8009b14:	687a      	ldr	r2, [r7, #4]
 8009b16:	6812      	ldr	r2, [r2, #0]
 8009b18:	4413      	add	r3, r2
 8009b1a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009b1e:	881b      	ldrh	r3, [r3, #0]
 8009b20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b24:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8009b28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b2a:	699a      	ldr	r2, [r3, #24]
 8009b2c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009b30:	429a      	cmp	r2, r3
 8009b32:	d907      	bls.n	8009b44 <PCD_EP_ISR_Handler+0x712>
            {
              ep->xfer_len -= TxPctSize;
 8009b34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b36:	699a      	ldr	r2, [r3, #24]
 8009b38:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009b3c:	1ad2      	subs	r2, r2, r3
 8009b3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b40:	619a      	str	r2, [r3, #24]
 8009b42:	e002      	b.n	8009b4a <PCD_EP_ISR_Handler+0x718>
            }
            else
            {
              ep->xfer_len = 0U;
 8009b44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b46:	2200      	movs	r2, #0
 8009b48:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8009b4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b4c:	699b      	ldr	r3, [r3, #24]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d106      	bne.n	8009b60 <PCD_EP_ISR_Handler+0x72e>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009b52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	4619      	mov	r1, r3
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f008 fa90 	bl	801207e <HAL_PCD_DataInStageCallback>
 8009b5e:	e01b      	b.n	8009b98 <PCD_EP_ISR_Handler+0x766>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8009b60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b62:	695a      	ldr	r2, [r3, #20]
 8009b64:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009b68:	441a      	add	r2, r3
 8009b6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b6c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8009b6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b70:	69da      	ldr	r2, [r3, #28]
 8009b72:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8009b76:	441a      	add	r2, r3
 8009b78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009b7a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009b82:	4618      	mov	r0, r3
 8009b84:	f004 fad7 	bl	800e136 <USB_EPStartXfer>
 8009b88:	e006      	b.n	8009b98 <PCD_EP_ISR_Handler+0x766>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8009b8a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8009b8e:	461a      	mov	r2, r3
 8009b90:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 f917 	bl	8009dc6 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	b21b      	sxth	r3, r3
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	f6ff ac49 	blt.w	800943c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8009baa:	2300      	movs	r3, #0
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	3758      	adds	r7, #88	@ 0x58
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b088      	sub	sp, #32
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	4613      	mov	r3, r2
 8009bc0:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009bc2:	88fb      	ldrh	r3, [r7, #6]
 8009bc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d07c      	beq.n	8009cc6 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009bd4:	b29b      	uxth	r3, r3
 8009bd6:	461a      	mov	r2, r3
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	00db      	lsls	r3, r3, #3
 8009bde:	4413      	add	r3, r2
 8009be0:	68fa      	ldr	r2, [r7, #12]
 8009be2:	6812      	ldr	r2, [r2, #0]
 8009be4:	4413      	add	r3, r2
 8009be6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009bea:	881b      	ldrh	r3, [r3, #0]
 8009bec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009bf0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	699a      	ldr	r2, [r3, #24]
 8009bf6:	8b7b      	ldrh	r3, [r7, #26]
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d306      	bcc.n	8009c0a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	699a      	ldr	r2, [r3, #24]
 8009c00:	8b7b      	ldrh	r3, [r7, #26]
 8009c02:	1ad2      	subs	r2, r2, r3
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	619a      	str	r2, [r3, #24]
 8009c08:	e002      	b.n	8009c10 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	699b      	ldr	r3, [r3, #24]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d123      	bne.n	8009c60 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	009b      	lsls	r3, r3, #2
 8009c24:	4413      	add	r3, r2
 8009c26:	881b      	ldrh	r3, [r3, #0]
 8009c28:	b29b      	uxth	r3, r3
 8009c2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009c2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c32:	833b      	strh	r3, [r7, #24]
 8009c34:	8b3b      	ldrh	r3, [r7, #24]
 8009c36:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009c3a:	833b      	strh	r3, [r7, #24]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	461a      	mov	r2, r3
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	441a      	add	r2, r3
 8009c4a:	8b3b      	ldrh	r3, [r7, #24]
 8009c4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009c58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c5c:	b29b      	uxth	r3, r3
 8009c5e:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009c60:	88fb      	ldrh	r3, [r7, #6]
 8009c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d01f      	beq.n	8009caa <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	461a      	mov	r2, r3
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	009b      	lsls	r3, r3, #2
 8009c76:	4413      	add	r3, r2
 8009c78:	881b      	ldrh	r3, [r3, #0]
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009c80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009c84:	82fb      	strh	r3, [r7, #22]
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	461a      	mov	r2, r3
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	441a      	add	r2, r3
 8009c94:	8afb      	ldrh	r3, [r7, #22]
 8009c96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009c9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009c9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009ca2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009ca6:	b29b      	uxth	r3, r3
 8009ca8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8009caa:	8b7b      	ldrh	r3, [r7, #26]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	f000 8085 	beq.w	8009dbc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	6818      	ldr	r0, [r3, #0]
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	6959      	ldr	r1, [r3, #20]
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	891a      	ldrh	r2, [r3, #8]
 8009cbe:	8b7b      	ldrh	r3, [r7, #26]
 8009cc0:	f005 ff66 	bl	800fb90 <USB_ReadPMA>
 8009cc4:	e07a      	b.n	8009dbc <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009cce:	b29b      	uxth	r3, r3
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	781b      	ldrb	r3, [r3, #0]
 8009cd6:	00db      	lsls	r3, r3, #3
 8009cd8:	4413      	add	r3, r2
 8009cda:	68fa      	ldr	r2, [r7, #12]
 8009cdc:	6812      	ldr	r2, [r2, #0]
 8009cde:	4413      	add	r3, r2
 8009ce0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009ce4:	881b      	ldrh	r3, [r3, #0]
 8009ce6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009cea:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	699a      	ldr	r2, [r3, #24]
 8009cf0:	8b7b      	ldrh	r3, [r7, #26]
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d306      	bcc.n	8009d04 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	699a      	ldr	r2, [r3, #24]
 8009cfa:	8b7b      	ldrh	r3, [r7, #26]
 8009cfc:	1ad2      	subs	r2, r2, r3
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	619a      	str	r2, [r3, #24]
 8009d02:	e002      	b.n	8009d0a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	2200      	movs	r2, #0
 8009d08:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	699b      	ldr	r3, [r3, #24]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d123      	bne.n	8009d5a <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	461a      	mov	r2, r3
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	009b      	lsls	r3, r3, #2
 8009d1e:	4413      	add	r3, r2
 8009d20:	881b      	ldrh	r3, [r3, #0]
 8009d22:	b29b      	uxth	r3, r3
 8009d24:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009d28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d2c:	83fb      	strh	r3, [r7, #30]
 8009d2e:	8bfb      	ldrh	r3, [r7, #30]
 8009d30:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009d34:	83fb      	strh	r3, [r7, #30]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	461a      	mov	r2, r3
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	009b      	lsls	r3, r3, #2
 8009d42:	441a      	add	r2, r3
 8009d44:	8bfb      	ldrh	r3, [r7, #30]
 8009d46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8009d5a:	88fb      	ldrh	r3, [r7, #6]
 8009d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d11f      	bne.n	8009da4 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	461a      	mov	r2, r3
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	781b      	ldrb	r3, [r3, #0]
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	4413      	add	r3, r2
 8009d72:	881b      	ldrh	r3, [r3, #0]
 8009d74:	b29b      	uxth	r3, r3
 8009d76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009d7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009d7e:	83bb      	strh	r3, [r7, #28]
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	461a      	mov	r2, r3
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	441a      	add	r2, r3
 8009d8e:	8bbb      	ldrh	r3, [r7, #28]
 8009d90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009d94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009d98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d9c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8009da4:	8b7b      	ldrh	r3, [r7, #26]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d008      	beq.n	8009dbc <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	6818      	ldr	r0, [r3, #0]
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	6959      	ldr	r1, [r3, #20]
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	895a      	ldrh	r2, [r3, #10]
 8009db6:	8b7b      	ldrh	r3, [r7, #26]
 8009db8:	f005 feea 	bl	800fb90 <USB_ReadPMA>
    }
  }

  return count;
 8009dbc:	8b7b      	ldrh	r3, [r7, #26]
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3720      	adds	r7, #32
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}

08009dc6 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009dc6:	b580      	push	{r7, lr}
 8009dc8:	b0a4      	sub	sp, #144	@ 0x90
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	60f8      	str	r0, [r7, #12]
 8009dce:	60b9      	str	r1, [r7, #8]
 8009dd0:	4613      	mov	r3, r2
 8009dd2:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8009dd4:	88fb      	ldrh	r3, [r7, #6]
 8009dd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	f000 81db 	beq.w	800a196 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009de8:	b29b      	uxth	r3, r3
 8009dea:	461a      	mov	r2, r3
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	00db      	lsls	r3, r3, #3
 8009df2:	4413      	add	r3, r2
 8009df4:	68fa      	ldr	r2, [r7, #12]
 8009df6:	6812      	ldr	r2, [r2, #0]
 8009df8:	4413      	add	r3, r2
 8009dfa:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009dfe:	881b      	ldrh	r3, [r3, #0]
 8009e00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e04:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	699a      	ldr	r2, [r3, #24]
 8009e0c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d907      	bls.n	8009e24 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	699a      	ldr	r2, [r3, #24]
 8009e18:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8009e1c:	1ad2      	subs	r2, r2, r3
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	619a      	str	r2, [r3, #24]
 8009e22:	e002      	b.n	8009e2a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8009e24:	68bb      	ldr	r3, [r7, #8]
 8009e26:	2200      	movs	r2, #0
 8009e28:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	699b      	ldr	r3, [r3, #24]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	f040 80b9 	bne.w	8009fa6 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	785b      	ldrb	r3, [r3, #1]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d126      	bne.n	8009e8a <HAL_PCD_EP_DB_Transmit+0xc4>
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e50:	4413      	add	r3, r2
 8009e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	00da      	lsls	r2, r3, #3
 8009e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e5c:	4413      	add	r3, r2
 8009e5e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009e62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e66:	881b      	ldrh	r3, [r3, #0]
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e6e:	b29a      	uxth	r2, r3
 8009e70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e72:	801a      	strh	r2, [r3, #0]
 8009e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e76:	881b      	ldrh	r3, [r3, #0]
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e82:	b29a      	uxth	r2, r3
 8009e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e86:	801a      	strh	r2, [r3, #0]
 8009e88:	e01a      	b.n	8009ec0 <HAL_PCD_EP_DB_Transmit+0xfa>
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	785b      	ldrb	r3, [r3, #1]
 8009e8e:	2b01      	cmp	r3, #1
 8009e90:	d116      	bne.n	8009ec0 <HAL_PCD_EP_DB_Transmit+0xfa>
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	637b      	str	r3, [r7, #52]	@ 0x34
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ea6:	4413      	add	r3, r2
 8009ea8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	781b      	ldrb	r3, [r3, #0]
 8009eae:	00da      	lsls	r2, r3, #3
 8009eb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009eb2:	4413      	add	r3, r2
 8009eb4:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 8009eb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8009eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ec6:	68bb      	ldr	r3, [r7, #8]
 8009ec8:	785b      	ldrb	r3, [r3, #1]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d126      	bne.n	8009f1c <HAL_PCD_EP_DB_Transmit+0x156>
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	61fb      	str	r3, [r7, #28]
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	461a      	mov	r2, r3
 8009ee0:	69fb      	ldr	r3, [r7, #28]
 8009ee2:	4413      	add	r3, r2
 8009ee4:	61fb      	str	r3, [r7, #28]
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	00da      	lsls	r2, r3, #3
 8009eec:	69fb      	ldr	r3, [r7, #28]
 8009eee:	4413      	add	r3, r2
 8009ef0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009ef4:	61bb      	str	r3, [r7, #24]
 8009ef6:	69bb      	ldr	r3, [r7, #24]
 8009ef8:	881b      	ldrh	r3, [r3, #0]
 8009efa:	b29b      	uxth	r3, r3
 8009efc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f00:	b29a      	uxth	r2, r3
 8009f02:	69bb      	ldr	r3, [r7, #24]
 8009f04:	801a      	strh	r2, [r3, #0]
 8009f06:	69bb      	ldr	r3, [r7, #24]
 8009f08:	881b      	ldrh	r3, [r3, #0]
 8009f0a:	b29b      	uxth	r3, r3
 8009f0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f14:	b29a      	uxth	r2, r3
 8009f16:	69bb      	ldr	r3, [r7, #24]
 8009f18:	801a      	strh	r2, [r3, #0]
 8009f1a:	e017      	b.n	8009f4c <HAL_PCD_EP_DB_Transmit+0x186>
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	785b      	ldrb	r3, [r3, #1]
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d113      	bne.n	8009f4c <HAL_PCD_EP_DB_Transmit+0x186>
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8009f2c:	b29b      	uxth	r3, r3
 8009f2e:	461a      	mov	r2, r3
 8009f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f32:	4413      	add	r3, r2
 8009f34:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	00da      	lsls	r2, r3, #3
 8009f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f3e:	4413      	add	r3, r2
 8009f40:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 8009f44:	623b      	str	r3, [r7, #32]
 8009f46:	6a3b      	ldr	r3, [r7, #32]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	781b      	ldrb	r3, [r3, #0]
 8009f50:	4619      	mov	r1, r3
 8009f52:	68f8      	ldr	r0, [r7, #12]
 8009f54:	f008 f893 	bl	801207e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009f58:	88fb      	ldrh	r3, [r7, #6]
 8009f5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	f000 82fa 	beq.w	800a558 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	461a      	mov	r2, r3
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	009b      	lsls	r3, r3, #2
 8009f70:	4413      	add	r3, r2
 8009f72:	881b      	ldrh	r3, [r3, #0]
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009f7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009f7e:	82fb      	strh	r3, [r7, #22]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	461a      	mov	r2, r3
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	009b      	lsls	r3, r3, #2
 8009f8c:	441a      	add	r2, r3
 8009f8e:	8afb      	ldrh	r3, [r7, #22]
 8009f90:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009f94:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009f98:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009f9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fa0:	b29b      	uxth	r3, r3
 8009fa2:	8013      	strh	r3, [r2, #0]
 8009fa4:	e2d8      	b.n	800a558 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009fa6:	88fb      	ldrh	r3, [r7, #6]
 8009fa8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d021      	beq.n	8009ff4 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	781b      	ldrb	r3, [r3, #0]
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	4413      	add	r3, r2
 8009fbe:	881b      	ldrh	r3, [r3, #0]
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009fc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fca:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	009b      	lsls	r3, r3, #2
 8009fda:	441a      	add	r2, r3
 8009fdc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009fe0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009fe4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009fe8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009fec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	f040 82ac 	bne.w	800a558 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	695a      	ldr	r2, [r3, #20]
 800a004:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a008:	441a      	add	r2, r3
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	69da      	ldr	r2, [r3, #28]
 800a012:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a016:	441a      	add	r2, r3
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	6a1a      	ldr	r2, [r3, #32]
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	691b      	ldr	r3, [r3, #16]
 800a024:	429a      	cmp	r2, r3
 800a026:	d30b      	bcc.n	800a040 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	691b      	ldr	r3, [r3, #16]
 800a02c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	6a1a      	ldr	r2, [r3, #32]
 800a034:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a038:	1ad2      	subs	r2, r2, r3
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	621a      	str	r2, [r3, #32]
 800a03e:	e017      	b.n	800a070 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	6a1b      	ldr	r3, [r3, #32]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d108      	bne.n	800a05a <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800a048:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a04c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	2200      	movs	r2, #0
 800a054:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800a058:	e00a      	b.n	800a070 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800a05a:	68bb      	ldr	r3, [r7, #8]
 800a05c:	2200      	movs	r2, #0
 800a05e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	6a1b      	ldr	r3, [r3, #32]
 800a066:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	2200      	movs	r2, #0
 800a06e:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	785b      	ldrb	r3, [r3, #1]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d165      	bne.n	800a144 <HAL_PCD_EP_DB_Transmit+0x37e>
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a086:	b29b      	uxth	r3, r3
 800a088:	461a      	mov	r2, r3
 800a08a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a08c:	4413      	add	r3, r2
 800a08e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	781b      	ldrb	r3, [r3, #0]
 800a094:	00da      	lsls	r2, r3, #3
 800a096:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a098:	4413      	add	r3, r2
 800a09a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a09e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a0a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0a2:	881b      	ldrh	r3, [r3, #0]
 800a0a4:	b29b      	uxth	r3, r3
 800a0a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a0aa:	b29a      	uxth	r2, r3
 800a0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ae:	801a      	strh	r2, [r3, #0]
 800a0b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a0b4:	2b3e      	cmp	r3, #62	@ 0x3e
 800a0b6:	d91d      	bls.n	800a0f4 <HAL_PCD_EP_DB_Transmit+0x32e>
 800a0b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a0bc:	095b      	lsrs	r3, r3, #5
 800a0be:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a0c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a0c4:	f003 031f 	and.w	r3, r3, #31
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d102      	bne.n	800a0d2 <HAL_PCD_EP_DB_Transmit+0x30c>
 800a0cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0ce:	3b01      	subs	r3, #1
 800a0d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a0d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0d4:	881b      	ldrh	r3, [r3, #0]
 800a0d6:	b29a      	uxth	r2, r3
 800a0d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a0da:	b29b      	uxth	r3, r3
 800a0dc:	029b      	lsls	r3, r3, #10
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0ec:	b29a      	uxth	r2, r3
 800a0ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0f0:	801a      	strh	r2, [r3, #0]
 800a0f2:	e044      	b.n	800a17e <HAL_PCD_EP_DB_Transmit+0x3b8>
 800a0f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d10a      	bne.n	800a112 <HAL_PCD_EP_DB_Transmit+0x34c>
 800a0fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0fe:	881b      	ldrh	r3, [r3, #0]
 800a100:	b29b      	uxth	r3, r3
 800a102:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a106:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a10a:	b29a      	uxth	r2, r3
 800a10c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a10e:	801a      	strh	r2, [r3, #0]
 800a110:	e035      	b.n	800a17e <HAL_PCD_EP_DB_Transmit+0x3b8>
 800a112:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a116:	085b      	lsrs	r3, r3, #1
 800a118:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a11a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a11e:	f003 0301 	and.w	r3, r3, #1
 800a122:	2b00      	cmp	r3, #0
 800a124:	d002      	beq.n	800a12c <HAL_PCD_EP_DB_Transmit+0x366>
 800a126:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a128:	3301      	adds	r3, #1
 800a12a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a12c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a12e:	881b      	ldrh	r3, [r3, #0]
 800a130:	b29a      	uxth	r2, r3
 800a132:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a134:	b29b      	uxth	r3, r3
 800a136:	029b      	lsls	r3, r3, #10
 800a138:	b29b      	uxth	r3, r3
 800a13a:	4313      	orrs	r3, r2
 800a13c:	b29a      	uxth	r2, r3
 800a13e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a140:	801a      	strh	r2, [r3, #0]
 800a142:	e01c      	b.n	800a17e <HAL_PCD_EP_DB_Transmit+0x3b8>
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	785b      	ldrb	r3, [r3, #1]
 800a148:	2b01      	cmp	r3, #1
 800a14a:	d118      	bne.n	800a17e <HAL_PCD_EP_DB_Transmit+0x3b8>
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	647b      	str	r3, [r7, #68]	@ 0x44
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a15a:	b29b      	uxth	r3, r3
 800a15c:	461a      	mov	r2, r3
 800a15e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a160:	4413      	add	r3, r2
 800a162:	647b      	str	r3, [r7, #68]	@ 0x44
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	00da      	lsls	r2, r3, #3
 800a16a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a16c:	4413      	add	r3, r2
 800a16e:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a172:	643b      	str	r3, [r7, #64]	@ 0x40
 800a174:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a178:	b29a      	uxth	r2, r3
 800a17a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a17c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	6818      	ldr	r0, [r3, #0]
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	6959      	ldr	r1, [r3, #20]
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	891a      	ldrh	r2, [r3, #8]
 800a18a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a18e:	b29b      	uxth	r3, r3
 800a190:	f005 fcbc 	bl	800fb0c <USB_WritePMA>
 800a194:	e1e0      	b.n	800a558 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a19e:	b29b      	uxth	r3, r3
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	00db      	lsls	r3, r3, #3
 800a1a8:	4413      	add	r3, r2
 800a1aa:	68fa      	ldr	r2, [r7, #12]
 800a1ac:	6812      	ldr	r2, [r2, #0]
 800a1ae:	4413      	add	r3, r2
 800a1b0:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a1b4:	881b      	ldrh	r3, [r3, #0]
 800a1b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a1ba:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	699a      	ldr	r2, [r3, #24]
 800a1c2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d307      	bcc.n	800a1da <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	699a      	ldr	r2, [r3, #24]
 800a1ce:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a1d2:	1ad2      	subs	r2, r2, r3
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	619a      	str	r2, [r3, #24]
 800a1d8:	e002      	b.n	800a1e0 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	699b      	ldr	r3, [r3, #24]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	f040 80c0 	bne.w	800a36a <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	785b      	ldrb	r3, [r3, #1]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d126      	bne.n	800a240 <HAL_PCD_EP_DB_Transmit+0x47a>
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a200:	b29b      	uxth	r3, r3
 800a202:	461a      	mov	r2, r3
 800a204:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a206:	4413      	add	r3, r2
 800a208:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	00da      	lsls	r2, r3, #3
 800a210:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a212:	4413      	add	r3, r2
 800a214:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a218:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a21a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a21c:	881b      	ldrh	r3, [r3, #0]
 800a21e:	b29b      	uxth	r3, r3
 800a220:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a224:	b29a      	uxth	r2, r3
 800a226:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a228:	801a      	strh	r2, [r3, #0]
 800a22a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a22c:	881b      	ldrh	r3, [r3, #0]
 800a22e:	b29b      	uxth	r3, r3
 800a230:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a234:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a238:	b29a      	uxth	r2, r3
 800a23a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a23c:	801a      	strh	r2, [r3, #0]
 800a23e:	e01a      	b.n	800a276 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800a240:	68bb      	ldr	r3, [r7, #8]
 800a242:	785b      	ldrb	r3, [r3, #1]
 800a244:	2b01      	cmp	r3, #1
 800a246:	d116      	bne.n	800a276 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	667b      	str	r3, [r7, #100]	@ 0x64
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a256:	b29b      	uxth	r3, r3
 800a258:	461a      	mov	r2, r3
 800a25a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a25c:	4413      	add	r3, r2
 800a25e:	667b      	str	r3, [r7, #100]	@ 0x64
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	781b      	ldrb	r3, [r3, #0]
 800a264:	00da      	lsls	r2, r3, #3
 800a266:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a268:	4413      	add	r3, r2
 800a26a:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800a26e:	663b      	str	r3, [r7, #96]	@ 0x60
 800a270:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a272:	2200      	movs	r2, #0
 800a274:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	677b      	str	r3, [r7, #116]	@ 0x74
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	785b      	ldrb	r3, [r3, #1]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d12b      	bne.n	800a2dc <HAL_PCD_EP_DB_Transmit+0x516>
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a292:	b29b      	uxth	r3, r3
 800a294:	461a      	mov	r2, r3
 800a296:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a298:	4413      	add	r3, r2
 800a29a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	00da      	lsls	r2, r3, #3
 800a2a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2a4:	4413      	add	r3, r2
 800a2a6:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a2aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a2ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a2b2:	881b      	ldrh	r3, [r3, #0]
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a2ba:	b29a      	uxth	r2, r3
 800a2bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a2c0:	801a      	strh	r2, [r3, #0]
 800a2c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a2c6:	881b      	ldrh	r3, [r3, #0]
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a2ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a2d2:	b29a      	uxth	r2, r3
 800a2d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a2d8:	801a      	strh	r2, [r3, #0]
 800a2da:	e017      	b.n	800a30c <HAL_PCD_EP_DB_Transmit+0x546>
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	785b      	ldrb	r3, [r3, #1]
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d113      	bne.n	800a30c <HAL_PCD_EP_DB_Transmit+0x546>
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a2ec:	b29b      	uxth	r3, r3
 800a2ee:	461a      	mov	r2, r3
 800a2f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a2f2:	4413      	add	r3, r2
 800a2f4:	677b      	str	r3, [r7, #116]	@ 0x74
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	00da      	lsls	r2, r3, #3
 800a2fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a2fe:	4413      	add	r3, r2
 800a300:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a304:	673b      	str	r3, [r7, #112]	@ 0x70
 800a306:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a308:	2200      	movs	r2, #0
 800a30a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	4619      	mov	r1, r3
 800a312:	68f8      	ldr	r0, [r7, #12]
 800a314:	f007 feb3 	bl	801207e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a318:	88fb      	ldrh	r3, [r7, #6]
 800a31a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a31e:	2b00      	cmp	r3, #0
 800a320:	f040 811a 	bne.w	800a558 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	461a      	mov	r2, r3
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	781b      	ldrb	r3, [r3, #0]
 800a32e:	009b      	lsls	r3, r3, #2
 800a330:	4413      	add	r3, r2
 800a332:	881b      	ldrh	r3, [r3, #0]
 800a334:	b29b      	uxth	r3, r3
 800a336:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a33a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a33e:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	461a      	mov	r2, r3
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	781b      	ldrb	r3, [r3, #0]
 800a34c:	009b      	lsls	r3, r3, #2
 800a34e:	441a      	add	r2, r3
 800a350:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800a354:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a358:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a35c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a360:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a364:	b29b      	uxth	r3, r3
 800a366:	8013      	strh	r3, [r2, #0]
 800a368:	e0f6      	b.n	800a558 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800a36a:	88fb      	ldrh	r3, [r7, #6]
 800a36c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a370:	2b00      	cmp	r3, #0
 800a372:	d121      	bne.n	800a3b8 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	461a      	mov	r2, r3
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	781b      	ldrb	r3, [r3, #0]
 800a37e:	009b      	lsls	r3, r3, #2
 800a380:	4413      	add	r3, r2
 800a382:	881b      	ldrh	r3, [r3, #0]
 800a384:	b29b      	uxth	r3, r3
 800a386:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a38a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a38e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	461a      	mov	r2, r3
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	009b      	lsls	r3, r3, #2
 800a39e:	441a      	add	r2, r3
 800a3a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800a3a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a3a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a3ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a3b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	f040 80ca 	bne.w	800a558 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	695a      	ldr	r2, [r3, #20]
 800a3c8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a3cc:	441a      	add	r2, r3
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	69da      	ldr	r2, [r3, #28]
 800a3d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a3da:	441a      	add	r2, r3
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	6a1a      	ldr	r2, [r3, #32]
 800a3e4:	68bb      	ldr	r3, [r7, #8]
 800a3e6:	691b      	ldr	r3, [r3, #16]
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d30b      	bcc.n	800a404 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	691b      	ldr	r3, [r3, #16]
 800a3f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	6a1a      	ldr	r2, [r3, #32]
 800a3f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a3fc:	1ad2      	subs	r2, r2, r3
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	621a      	str	r2, [r3, #32]
 800a402:	e017      	b.n	800a434 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	6a1b      	ldr	r3, [r3, #32]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d108      	bne.n	800a41e <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800a40c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800a410:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	2200      	movs	r2, #0
 800a418:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800a41c:	e00a      	b.n	800a434 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	6a1b      	ldr	r3, [r3, #32]
 800a422:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	2200      	movs	r2, #0
 800a42a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	2200      	movs	r2, #0
 800a430:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	657b      	str	r3, [r7, #84]	@ 0x54
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	785b      	ldrb	r3, [r3, #1]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d165      	bne.n	800a50e <HAL_PCD_EP_DB_Transmit+0x748>
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a450:	b29b      	uxth	r3, r3
 800a452:	461a      	mov	r2, r3
 800a454:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a456:	4413      	add	r3, r2
 800a458:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	781b      	ldrb	r3, [r3, #0]
 800a45e:	00da      	lsls	r2, r3, #3
 800a460:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a462:	4413      	add	r3, r2
 800a464:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a468:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a46a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a46c:	881b      	ldrh	r3, [r3, #0]
 800a46e:	b29b      	uxth	r3, r3
 800a470:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a474:	b29a      	uxth	r2, r3
 800a476:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a478:	801a      	strh	r2, [r3, #0]
 800a47a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a47e:	2b3e      	cmp	r3, #62	@ 0x3e
 800a480:	d91d      	bls.n	800a4be <HAL_PCD_EP_DB_Transmit+0x6f8>
 800a482:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a486:	095b      	lsrs	r3, r3, #5
 800a488:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a48a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a48e:	f003 031f 	and.w	r3, r3, #31
 800a492:	2b00      	cmp	r3, #0
 800a494:	d102      	bne.n	800a49c <HAL_PCD_EP_DB_Transmit+0x6d6>
 800a496:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a498:	3b01      	subs	r3, #1
 800a49a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a49c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a49e:	881b      	ldrh	r3, [r3, #0]
 800a4a0:	b29a      	uxth	r2, r3
 800a4a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	029b      	lsls	r3, r3, #10
 800a4a8:	b29b      	uxth	r3, r3
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4b6:	b29a      	uxth	r2, r3
 800a4b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a4ba:	801a      	strh	r2, [r3, #0]
 800a4bc:	e041      	b.n	800a542 <HAL_PCD_EP_DB_Transmit+0x77c>
 800a4be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d10a      	bne.n	800a4dc <HAL_PCD_EP_DB_Transmit+0x716>
 800a4c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a4c8:	881b      	ldrh	r3, [r3, #0]
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a4d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a4d4:	b29a      	uxth	r2, r3
 800a4d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a4d8:	801a      	strh	r2, [r3, #0]
 800a4da:	e032      	b.n	800a542 <HAL_PCD_EP_DB_Transmit+0x77c>
 800a4dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a4e0:	085b      	lsrs	r3, r3, #1
 800a4e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a4e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a4e8:	f003 0301 	and.w	r3, r3, #1
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d002      	beq.n	800a4f6 <HAL_PCD_EP_DB_Transmit+0x730>
 800a4f0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a4f2:	3301      	adds	r3, #1
 800a4f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a4f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a4f8:	881b      	ldrh	r3, [r3, #0]
 800a4fa:	b29a      	uxth	r2, r3
 800a4fc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a4fe:	b29b      	uxth	r3, r3
 800a500:	029b      	lsls	r3, r3, #10
 800a502:	b29b      	uxth	r3, r3
 800a504:	4313      	orrs	r3, r2
 800a506:	b29a      	uxth	r2, r3
 800a508:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a50a:	801a      	strh	r2, [r3, #0]
 800a50c:	e019      	b.n	800a542 <HAL_PCD_EP_DB_Transmit+0x77c>
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	785b      	ldrb	r3, [r3, #1]
 800a512:	2b01      	cmp	r3, #1
 800a514:	d115      	bne.n	800a542 <HAL_PCD_EP_DB_Transmit+0x77c>
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800a51e:	b29b      	uxth	r3, r3
 800a520:	461a      	mov	r2, r3
 800a522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a524:	4413      	add	r3, r2
 800a526:	657b      	str	r3, [r7, #84]	@ 0x54
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	781b      	ldrb	r3, [r3, #0]
 800a52c:	00da      	lsls	r2, r3, #3
 800a52e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a530:	4413      	add	r3, r2
 800a532:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800a536:	653b      	str	r3, [r7, #80]	@ 0x50
 800a538:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a53c:	b29a      	uxth	r2, r3
 800a53e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a540:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	6818      	ldr	r0, [r3, #0]
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	6959      	ldr	r1, [r3, #20]
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	895a      	ldrh	r2, [r3, #10]
 800a54e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a552:	b29b      	uxth	r3, r3
 800a554:	f005 fada 	bl	800fb0c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	461a      	mov	r2, r3
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	4413      	add	r3, r2
 800a566:	881b      	ldrh	r3, [r3, #0]
 800a568:	b29b      	uxth	r3, r3
 800a56a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a56e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a572:	82bb      	strh	r3, [r7, #20]
 800a574:	8abb      	ldrh	r3, [r7, #20]
 800a576:	f083 0310 	eor.w	r3, r3, #16
 800a57a:	82bb      	strh	r3, [r7, #20]
 800a57c:	8abb      	ldrh	r3, [r7, #20]
 800a57e:	f083 0320 	eor.w	r3, r3, #32
 800a582:	82bb      	strh	r3, [r7, #20]
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	461a      	mov	r2, r3
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	781b      	ldrb	r3, [r3, #0]
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	441a      	add	r2, r3
 800a592:	8abb      	ldrh	r3, [r7, #20]
 800a594:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800a598:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800a59c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a5a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a5a4:	b29b      	uxth	r3, r3
 800a5a6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800a5a8:	2300      	movs	r3, #0
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3790      	adds	r7, #144	@ 0x90
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}

0800a5b2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800a5b2:	b480      	push	{r7}
 800a5b4:	b087      	sub	sp, #28
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	60f8      	str	r0, [r7, #12]
 800a5ba:	607b      	str	r3, [r7, #4]
 800a5bc:	460b      	mov	r3, r1
 800a5be:	817b      	strh	r3, [r7, #10]
 800a5c0:	4613      	mov	r3, r2
 800a5c2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800a5c4:	897b      	ldrh	r3, [r7, #10]
 800a5c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d00b      	beq.n	800a5e8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a5d0:	897b      	ldrh	r3, [r7, #10]
 800a5d2:	f003 0207 	and.w	r2, r3, #7
 800a5d6:	4613      	mov	r3, r2
 800a5d8:	009b      	lsls	r3, r3, #2
 800a5da:	4413      	add	r3, r2
 800a5dc:	00db      	lsls	r3, r3, #3
 800a5de:	3310      	adds	r3, #16
 800a5e0:	68fa      	ldr	r2, [r7, #12]
 800a5e2:	4413      	add	r3, r2
 800a5e4:	617b      	str	r3, [r7, #20]
 800a5e6:	e009      	b.n	800a5fc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a5e8:	897a      	ldrh	r2, [r7, #10]
 800a5ea:	4613      	mov	r3, r2
 800a5ec:	009b      	lsls	r3, r3, #2
 800a5ee:	4413      	add	r3, r2
 800a5f0:	00db      	lsls	r3, r3, #3
 800a5f2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a5f6:	68fa      	ldr	r2, [r7, #12]
 800a5f8:	4413      	add	r3, r2
 800a5fa:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800a5fc:	893b      	ldrh	r3, [r7, #8]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d107      	bne.n	800a612 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	2200      	movs	r2, #0
 800a606:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	b29a      	uxth	r2, r3
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	80da      	strh	r2, [r3, #6]
 800a610:	e00b      	b.n	800a62a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	2201      	movs	r2, #1
 800a616:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	b29a      	uxth	r2, r3
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	0c1b      	lsrs	r3, r3, #16
 800a624:	b29a      	uxth	r2, r3
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a62a:	2300      	movs	r3, #0
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	371c      	adds	r7, #28
 800a630:	46bd      	mov	sp, r7
 800a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a636:	4770      	bx	lr

0800a638 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a638:	b480      	push	{r7}
 800a63a:	b085      	sub	sp, #20
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2201      	movs	r2, #1
 800a64a:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2200      	movs	r2, #0
 800a652:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800a65c:	b29b      	uxth	r3, r3
 800a65e:	f043 0301 	orr.w	r3, r3, #1
 800a662:	b29a      	uxth	r2, r3
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800a670:	b29b      	uxth	r3, r3
 800a672:	f043 0302 	orr.w	r3, r3, #2
 800a676:	b29a      	uxth	r2, r3
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800a67e:	2300      	movs	r3, #0
}
 800a680:	4618      	mov	r0, r3
 800a682:	3714      	adds	r7, #20
 800a684:	46bd      	mov	sp, r7
 800a686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68a:	4770      	bx	lr

0800a68c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a68c:	b480      	push	{r7}
 800a68e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a690:	4b05      	ldr	r3, [pc, #20]	@ (800a6a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4a04      	ldr	r2, [pc, #16]	@ (800a6a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800a696:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a69a:	6013      	str	r3, [r2, #0]
}
 800a69c:	bf00      	nop
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a4:	4770      	bx	lr
 800a6a6:	bf00      	nop
 800a6a8:	58000400 	.word	0x58000400

0800a6ac <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800a6b0:	4b04      	ldr	r3, [pc, #16]	@ (800a6c4 <HAL_PWREx_GetVoltageRange+0x18>)
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr
 800a6c2:	bf00      	nop
 800a6c4:	58000400 	.word	0x58000400

0800a6c8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800a6c8:	b480      	push	{r7}
 800a6ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800a6cc:	4b05      	ldr	r3, [pc, #20]	@ (800a6e4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	4a04      	ldr	r2, [pc, #16]	@ (800a6e4 <HAL_PWREx_EnableVddUSB+0x1c>)
 800a6d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a6d6:	6053      	str	r3, [r2, #4]
}
 800a6d8:	bf00      	nop
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr
 800a6e2:	bf00      	nop
 800a6e4:	58000400 	.word	0x58000400

0800a6e8 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800a6ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a6f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a6fa:	d101      	bne.n	800a700 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	e000      	b.n	800a702 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800a700:	2300      	movs	r3, #0
}
 800a702:	4618      	mov	r0, r3
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr

0800a70c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800a70c:	b480      	push	{r7}
 800a70e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800a710:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a71a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a71e:	6013      	str	r3, [r2, #0]
}
 800a720:	bf00      	nop
 800a722:	46bd      	mov	sp, r7
 800a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a728:	4770      	bx	lr

0800a72a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800a72a:	b480      	push	{r7}
 800a72c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800a72e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a738:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a73c:	6013      	str	r3, [r2, #0]
}
 800a73e:	bf00      	nop
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr

0800a748 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 800a748:	b480      	push	{r7}
 800a74a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800a74c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a756:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a75a:	d101      	bne.n	800a760 <LL_RCC_HSE_IsReady+0x18>
 800a75c:	2301      	movs	r3, #1
 800a75e:	e000      	b.n	800a762 <LL_RCC_HSE_IsReady+0x1a>
 800a760:	2300      	movs	r3, #0
}
 800a762:	4618      	mov	r0, r3
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800a76c:	b480      	push	{r7}
 800a76e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800a770:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a77a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a77e:	6013      	str	r3, [r2, #0]
}
 800a780:	bf00      	nop
 800a782:	46bd      	mov	sp, r7
 800a784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a788:	4770      	bx	lr

0800a78a <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 800a78a:	b480      	push	{r7}
 800a78c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800a78e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a798:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a79c:	6013      	str	r3, [r2, #0]
}
 800a79e:	bf00      	nop
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr

0800a7a8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800a7ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a7b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a7ba:	d101      	bne.n	800a7c0 <LL_RCC_HSI_IsReady+0x18>
 800a7bc:	2301      	movs	r3, #1
 800a7be:	e000      	b.n	800a7c2 <LL_RCC_HSI_IsReady+0x1a>
 800a7c0:	2300      	movs	r3, #0
}
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr

0800a7cc <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	b083      	sub	sp, #12
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800a7d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	061b      	lsls	r3, r3, #24
 800a7e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a7e6:	4313      	orrs	r3, r2
 800a7e8:	604b      	str	r3, [r1, #4]
}
 800a7ea:	bf00      	nop
 800a7ec:	370c      	adds	r7, #12
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f4:	4770      	bx	lr

0800a7f6 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 800a7f6:	b480      	push	{r7}
 800a7f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800a7fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a7fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a802:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a806:	f043 0301 	orr.w	r3, r3, #1
 800a80a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800a80e:	bf00      	nop
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr

0800a818 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 800a818:	b480      	push	{r7}
 800a81a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800a81c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a820:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a824:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a828:	f023 0301 	bic.w	r3, r3, #1
 800a82c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800a830:	bf00      	nop
 800a832:	46bd      	mov	sp, r7
 800a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a838:	4770      	bx	lr

0800a83a <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800a83a:	b480      	push	{r7}
 800a83c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800a83e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a842:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a846:	f003 0302 	and.w	r3, r3, #2
 800a84a:	2b02      	cmp	r3, #2
 800a84c:	d101      	bne.n	800a852 <LL_RCC_HSI48_IsReady+0x18>
 800a84e:	2301      	movs	r3, #1
 800a850:	e000      	b.n	800a854 <LL_RCC_HSI48_IsReady+0x1a>
 800a852:	2300      	movs	r3, #0
}
 800a854:	4618      	mov	r0, r3
 800a856:	46bd      	mov	sp, r7
 800a858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85c:	4770      	bx	lr

0800a85e <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 800a85e:	b480      	push	{r7}
 800a860:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a862:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a86a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a86e:	f043 0301 	orr.w	r3, r3, #1
 800a872:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a876:	bf00      	nop
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr

0800a880 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 800a880:	b480      	push	{r7}
 800a882:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800a884:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a888:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a88c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a890:	f023 0301 	bic.w	r3, r3, #1
 800a894:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a898:	bf00      	nop
 800a89a:	46bd      	mov	sp, r7
 800a89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a0:	4770      	bx	lr

0800a8a2 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 800a8a2:	b480      	push	{r7}
 800a8a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a8a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a8aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a8b2:	f043 0304 	orr.w	r3, r3, #4
 800a8b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a8ba:	bf00      	nop
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr

0800a8c4 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800a8c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a8cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a8d4:	f023 0304 	bic.w	r3, r3, #4
 800a8d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800a8dc:	bf00      	nop
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr

0800a8e6 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800a8e6:	b480      	push	{r7}
 800a8e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800a8ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a8ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a8f2:	f003 0302 	and.w	r3, r3, #2
 800a8f6:	2b02      	cmp	r3, #2
 800a8f8:	d101      	bne.n	800a8fe <LL_RCC_LSE_IsReady+0x18>
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	e000      	b.n	800a900 <LL_RCC_LSE_IsReady+0x1a>
 800a8fe:	2300      	movs	r3, #0
}
 800a900:	4618      	mov	r0, r3
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr

0800a90a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800a90a:	b480      	push	{r7}
 800a90c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800a90e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a912:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a916:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a91a:	f043 0301 	orr.w	r3, r3, #1
 800a91e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800a922:	bf00      	nop
 800a924:	46bd      	mov	sp, r7
 800a926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92a:	4770      	bx	lr

0800a92c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800a92c:	b480      	push	{r7}
 800a92e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800a930:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a934:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a938:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a93c:	f023 0301 	bic.w	r3, r3, #1
 800a940:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800a944:	bf00      	nop
 800a946:	46bd      	mov	sp, r7
 800a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94c:	4770      	bx	lr

0800a94e <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 800a94e:	b480      	push	{r7}
 800a950:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800a952:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a956:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a95a:	f003 0302 	and.w	r3, r3, #2
 800a95e:	2b02      	cmp	r3, #2
 800a960:	d101      	bne.n	800a966 <LL_RCC_LSI1_IsReady+0x18>
 800a962:	2301      	movs	r3, #1
 800a964:	e000      	b.n	800a968 <LL_RCC_LSI1_IsReady+0x1a>
 800a966:	2300      	movs	r3, #0
}
 800a968:	4618      	mov	r0, r3
 800a96a:	46bd      	mov	sp, r7
 800a96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a970:	4770      	bx	lr

0800a972 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 800a972:	b480      	push	{r7}
 800a974:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800a976:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a97a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a97e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a982:	f043 0304 	orr.w	r3, r3, #4
 800a986:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800a98a:	bf00      	nop
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr

0800a994 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 800a994:	b480      	push	{r7}
 800a996:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800a998:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a99c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a9a0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800a9a4:	f023 0304 	bic.w	r3, r3, #4
 800a9a8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800a9ac:	bf00      	nop
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b4:	4770      	bx	lr

0800a9b6 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 800a9b6:	b480      	push	{r7}
 800a9b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800a9ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a9be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a9c2:	f003 0308 	and.w	r3, r3, #8
 800a9c6:	2b08      	cmp	r3, #8
 800a9c8:	d101      	bne.n	800a9ce <LL_RCC_LSI2_IsReady+0x18>
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	e000      	b.n	800a9d0 <LL_RCC_LSI2_IsReady+0x1a>
 800a9ce:	2300      	movs	r3, #0
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d8:	4770      	bx	lr

0800a9da <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800a9da:	b480      	push	{r7}
 800a9dc:	b083      	sub	sp, #12
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800a9e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a9e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800a9ea:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	021b      	lsls	r3, r3, #8
 800a9f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800a9fc:	bf00      	nop
 800a9fe:	370c      	adds	r7, #12
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800aa0c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aa16:	f043 0301 	orr.w	r3, r3, #1
 800aa1a:	6013      	str	r3, [r2, #0]
}
 800aa1c:	bf00      	nop
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa24:	4770      	bx	lr

0800aa26 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 800aa26:	b480      	push	{r7}
 800aa28:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800aa2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800aa34:	f023 0301 	bic.w	r3, r3, #1
 800aa38:	6013      	str	r3, [r2, #0]
}
 800aa3a:	bf00      	nop
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa42:	4770      	bx	lr

0800aa44 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800aa44:	b480      	push	{r7}
 800aa46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800aa48:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f003 0302 	and.w	r3, r3, #2
 800aa52:	2b02      	cmp	r3, #2
 800aa54:	d101      	bne.n	800aa5a <LL_RCC_MSI_IsReady+0x16>
 800aa56:	2301      	movs	r3, #1
 800aa58:	e000      	b.n	800aa5c <LL_RCC_MSI_IsReady+0x18>
 800aa5a:	2300      	movs	r3, #0
}
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa64:	4770      	bx	lr

0800aa66 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 800aa66:	b480      	push	{r7}
 800aa68:	b083      	sub	sp, #12
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800aa6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800aa78:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	600b      	str	r3, [r1, #0]
}
 800aa82:	bf00      	nop
 800aa84:	370c      	adds	r7, #12
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr

0800aa8e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800aa8e:	b480      	push	{r7}
 800aa90:	b083      	sub	sp, #12
 800aa92:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800aa94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800aa9e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2bb0      	cmp	r3, #176	@ 0xb0
 800aaa4:	d901      	bls.n	800aaaa <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 800aaa6:	23b0      	movs	r3, #176	@ 0xb0
 800aaa8:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800aaaa:	687b      	ldr	r3, [r7, #4]
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	370c      	adds	r7, #12
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr

0800aab8 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b083      	sub	sp, #12
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800aac0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	021b      	lsls	r3, r3, #8
 800aace:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800aad2:	4313      	orrs	r3, r2
 800aad4:	604b      	str	r3, [r1, #4]
}
 800aad6:	bf00      	nop
 800aad8:	370c      	adds	r7, #12
 800aada:	46bd      	mov	sp, r7
 800aadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae0:	4770      	bx	lr

0800aae2 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800aae2:	b480      	push	{r7}
 800aae4:	b083      	sub	sp, #12
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800aaea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800aaee:	689b      	ldr	r3, [r3, #8]
 800aaf0:	f023 0203 	bic.w	r2, r3, #3
 800aaf4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	4313      	orrs	r3, r2
 800aafc:	608b      	str	r3, [r1, #8]
}
 800aafe:	bf00      	nop
 800ab00:	370c      	adds	r7, #12
 800ab02:	46bd      	mov	sp, r7
 800ab04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab08:	4770      	bx	lr

0800ab0a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800ab0a:	b480      	push	{r7}
 800ab0c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800ab0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab12:	689b      	ldr	r3, [r3, #8]
 800ab14:	f003 030c 	and.w	r3, r3, #12
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab20:	4770      	bx	lr

0800ab22 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800ab22:	b480      	push	{r7}
 800ab24:	b083      	sub	sp, #12
 800ab26:	af00      	add	r7, sp, #0
 800ab28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800ab2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab2e:	689b      	ldr	r3, [r3, #8]
 800ab30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ab34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	608b      	str	r3, [r1, #8]
}
 800ab3e:	bf00      	nop
 800ab40:	370c      	adds	r7, #12
 800ab42:	46bd      	mov	sp, r7
 800ab44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab48:	4770      	bx	lr

0800ab4a <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800ab4a:	b480      	push	{r7}
 800ab4c:	b083      	sub	sp, #12
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800ab52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab56:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800ab5a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ab5e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	4313      	orrs	r3, r2
 800ab66:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800ab6a:	bf00      	nop
 800ab6c:	370c      	adds	r7, #12
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab74:	4770      	bx	lr

0800ab76 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 800ab76:	b480      	push	{r7}
 800ab78:	b083      	sub	sp, #12
 800ab7a:	af00      	add	r7, sp, #0
 800ab7c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800ab7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab82:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800ab86:	f023 020f 	bic.w	r2, r3, #15
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	091b      	lsrs	r3, r3, #4
 800ab8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ab92:	4313      	orrs	r3, r2
 800ab94:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800ab98:	bf00      	nop
 800ab9a:	370c      	adds	r7, #12
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr

0800aba4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b083      	sub	sp, #12
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800abac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800abb0:	689b      	ldr	r3, [r3, #8]
 800abb2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800abb6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	4313      	orrs	r3, r2
 800abbe:	608b      	str	r3, [r1, #8]
}
 800abc0:	bf00      	nop
 800abc2:	370c      	adds	r7, #12
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr

0800abcc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800abcc:	b480      	push	{r7}
 800abce:	b083      	sub	sp, #12
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800abd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800abd8:	689b      	ldr	r3, [r3, #8]
 800abda:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800abde:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	4313      	orrs	r3, r2
 800abe6:	608b      	str	r3, [r1, #8]
}
 800abe8:	bf00      	nop
 800abea:	370c      	adds	r7, #12
 800abec:	46bd      	mov	sp, r7
 800abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf2:	4770      	bx	lr

0800abf4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 800abf4:	b480      	push	{r7}
 800abf6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800abf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr

0800ac0c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800ac10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac14:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800ac18:	011b      	lsls	r3, r3, #4
 800ac1a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr

0800ac28 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800ac2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac30:	689b      	ldr	r3, [r3, #8]
 800ac32:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr

0800ac40 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800ac40:	b480      	push	{r7}
 800ac42:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800ac44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac48:	689b      	ldr	r3, [r3, #8]
 800ac4a:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr

0800ac58 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800ac5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ac66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ac6a:	6013      	str	r3, [r2, #0]
}
 800ac6c:	bf00      	nop
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac74:	4770      	bx	lr

0800ac76 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800ac76:	b480      	push	{r7}
 800ac78:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800ac7a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ac84:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ac88:	6013      	str	r3, [r2, #0]
}
 800ac8a:	bf00      	nop
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac92:	4770      	bx	lr

0800ac94 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800ac94:	b480      	push	{r7}
 800ac96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800ac98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800aca2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800aca6:	d101      	bne.n	800acac <LL_RCC_PLL_IsReady+0x18>
 800aca8:	2301      	movs	r3, #1
 800acaa:	e000      	b.n	800acae <LL_RCC_PLL_IsReady+0x1a>
 800acac:	2300      	movs	r3, #0
}
 800acae:	4618      	mov	r0, r3
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr

0800acb8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800acb8:	b480      	push	{r7}
 800acba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800acbc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800acc0:	68db      	ldr	r3, [r3, #12]
 800acc2:	0a1b      	lsrs	r3, r3, #8
 800acc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800acc8:	4618      	mov	r0, r3
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr

0800acd2 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800acd2:	b480      	push	{r7}
 800acd4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800acd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800acda:	68db      	ldr	r3, [r3, #12]
 800acdc:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800ace0:	4618      	mov	r0, r3
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr

0800acea <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800acea:	b480      	push	{r7}
 800acec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800acee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800acf2:	68db      	ldr	r3, [r3, #12]
 800acf4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	46bd      	mov	sp, r7
 800acfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad00:	4770      	bx	lr

0800ad02 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800ad02:	b480      	push	{r7}
 800ad04:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800ad06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad0a:	68db      	ldr	r3, [r3, #12]
 800ad0c:	f003 0303 	and.w	r3, r3, #3
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	46bd      	mov	sp, r7
 800ad14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad18:	4770      	bx	lr

0800ad1a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800ad1a:	b480      	push	{r7}
 800ad1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800ad1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad22:	689b      	ldr	r3, [r3, #8]
 800ad24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ad28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad2c:	d101      	bne.n	800ad32 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800ad2e:	2301      	movs	r3, #1
 800ad30:	e000      	b.n	800ad34 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800ad32:	2300      	movs	r3, #0
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	46bd      	mov	sp, r7
 800ad38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3c:	4770      	bx	lr

0800ad3e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800ad3e:	b480      	push	{r7}
 800ad40:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800ad42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad46:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800ad4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad52:	d101      	bne.n	800ad58 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800ad54:	2301      	movs	r3, #1
 800ad56:	e000      	b.n	800ad5a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800ad58:	2300      	movs	r3, #0
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad62:	4770      	bx	lr

0800ad64 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800ad64:	b480      	push	{r7}
 800ad66:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800ad68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad6c:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800ad70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ad74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad78:	d101      	bne.n	800ad7e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800ad7a:	2301      	movs	r3, #1
 800ad7c:	e000      	b.n	800ad80 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800ad7e:	2300      	movs	r3, #0
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	46bd      	mov	sp, r7
 800ad84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad88:	4770      	bx	lr

0800ad8a <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800ad8a:	b480      	push	{r7}
 800ad8c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800ad8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ad92:	689b      	ldr	r3, [r3, #8]
 800ad94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad9c:	d101      	bne.n	800ada2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800ad9e:	2301      	movs	r3, #1
 800ada0:	e000      	b.n	800ada4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800ada2:	2300      	movs	r3, #0
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	46bd      	mov	sp, r7
 800ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adac:	4770      	bx	lr

0800adae <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800adae:	b480      	push	{r7}
 800adb0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800adb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800adb6:	689b      	ldr	r3, [r3, #8]
 800adb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800adbc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800adc0:	d101      	bne.n	800adc6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800adc2:	2301      	movs	r3, #1
 800adc4:	e000      	b.n	800adc8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800adc6:	2300      	movs	r3, #0
}
 800adc8:	4618      	mov	r0, r3
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr
	...

0800add4 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800add4:	b590      	push	{r4, r7, lr}
 800add6:	b08d      	sub	sp, #52	@ 0x34
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d101      	bne.n	800ade6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ade2:	2301      	movs	r3, #1
 800ade4:	e363      	b.n	800b4ae <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f003 0320 	and.w	r3, r3, #32
 800adee:	2b00      	cmp	r3, #0
 800adf0:	f000 808d 	beq.w	800af0e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800adf4:	f7ff fe89 	bl	800ab0a <LL_RCC_GetSysClkSource>
 800adf8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800adfa:	f7ff ff82 	bl	800ad02 <LL_RCC_PLL_GetMainSource>
 800adfe:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800ae00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d005      	beq.n	800ae12 <HAL_RCC_OscConfig+0x3e>
 800ae06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae08:	2b0c      	cmp	r3, #12
 800ae0a:	d147      	bne.n	800ae9c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800ae0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d144      	bne.n	800ae9c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	69db      	ldr	r3, [r3, #28]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d101      	bne.n	800ae1e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	e347      	b.n	800b4ae <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800ae22:	f7ff fe34 	bl	800aa8e <LL_RCC_MSI_GetRange>
 800ae26:	4603      	mov	r3, r0
 800ae28:	429c      	cmp	r4, r3
 800ae2a:	d914      	bls.n	800ae56 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae30:	4618      	mov	r0, r3
 800ae32:	f000 fd2f 	bl	800b894 <RCC_SetFlashLatencyFromMSIRange>
 800ae36:	4603      	mov	r3, r0
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d001      	beq.n	800ae40 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	e336      	b.n	800b4ae <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae44:	4618      	mov	r0, r3
 800ae46:	f7ff fe0e 	bl	800aa66 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6a1b      	ldr	r3, [r3, #32]
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f7ff fe32 	bl	800aab8 <LL_RCC_MSI_SetCalibTrimming>
 800ae54:	e013      	b.n	800ae7e <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	f7ff fe03 	bl	800aa66 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6a1b      	ldr	r3, [r3, #32]
 800ae64:	4618      	mov	r0, r3
 800ae66:	f7ff fe27 	bl	800aab8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f000 fd10 	bl	800b894 <RCC_SetFlashLatencyFromMSIRange>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d001      	beq.n	800ae7e <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800ae7a:	2301      	movs	r3, #1
 800ae7c:	e317      	b.n	800b4ae <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800ae7e:	f000 fcc9 	bl	800b814 <HAL_RCC_GetHCLKFreq>
 800ae82:	4603      	mov	r3, r0
 800ae84:	4aa4      	ldr	r2, [pc, #656]	@ (800b118 <HAL_RCC_OscConfig+0x344>)
 800ae86:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800ae88:	4ba4      	ldr	r3, [pc, #656]	@ (800b11c <HAL_RCC_OscConfig+0x348>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	f7fa fa2f 	bl	80052f0 <HAL_InitTick>
 800ae92:	4603      	mov	r3, r0
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d039      	beq.n	800af0c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800ae98:	2301      	movs	r3, #1
 800ae9a:	e308      	b.n	800b4ae <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	69db      	ldr	r3, [r3, #28]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d01e      	beq.n	800aee2 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800aea4:	f7ff fdb0 	bl	800aa08 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800aea8:	f7fa fa70 	bl	800538c <HAL_GetTick>
 800aeac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800aeae:	e008      	b.n	800aec2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800aeb0:	f7fa fa6c 	bl	800538c <HAL_GetTick>
 800aeb4:	4602      	mov	r2, r0
 800aeb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeb8:	1ad3      	subs	r3, r2, r3
 800aeba:	2b02      	cmp	r3, #2
 800aebc:	d901      	bls.n	800aec2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800aebe:	2303      	movs	r3, #3
 800aec0:	e2f5      	b.n	800b4ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800aec2:	f7ff fdbf 	bl	800aa44 <LL_RCC_MSI_IsReady>
 800aec6:	4603      	mov	r3, r0
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d0f1      	beq.n	800aeb0 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aed0:	4618      	mov	r0, r3
 800aed2:	f7ff fdc8 	bl	800aa66 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6a1b      	ldr	r3, [r3, #32]
 800aeda:	4618      	mov	r0, r3
 800aedc:	f7ff fdec 	bl	800aab8 <LL_RCC_MSI_SetCalibTrimming>
 800aee0:	e015      	b.n	800af0e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800aee2:	f7ff fda0 	bl	800aa26 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800aee6:	f7fa fa51 	bl	800538c <HAL_GetTick>
 800aeea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800aeec:	e008      	b.n	800af00 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800aeee:	f7fa fa4d 	bl	800538c <HAL_GetTick>
 800aef2:	4602      	mov	r2, r0
 800aef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aef6:	1ad3      	subs	r3, r2, r3
 800aef8:	2b02      	cmp	r3, #2
 800aefa:	d901      	bls.n	800af00 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800aefc:	2303      	movs	r3, #3
 800aefe:	e2d6      	b.n	800b4ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800af00:	f7ff fda0 	bl	800aa44 <LL_RCC_MSI_IsReady>
 800af04:	4603      	mov	r3, r0
 800af06:	2b00      	cmp	r3, #0
 800af08:	d1f1      	bne.n	800aeee <HAL_RCC_OscConfig+0x11a>
 800af0a:	e000      	b.n	800af0e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800af0c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f003 0301 	and.w	r3, r3, #1
 800af16:	2b00      	cmp	r3, #0
 800af18:	d047      	beq.n	800afaa <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800af1a:	f7ff fdf6 	bl	800ab0a <LL_RCC_GetSysClkSource>
 800af1e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800af20:	f7ff feef 	bl	800ad02 <LL_RCC_PLL_GetMainSource>
 800af24:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800af26:	6a3b      	ldr	r3, [r7, #32]
 800af28:	2b08      	cmp	r3, #8
 800af2a:	d005      	beq.n	800af38 <HAL_RCC_OscConfig+0x164>
 800af2c:	6a3b      	ldr	r3, [r7, #32]
 800af2e:	2b0c      	cmp	r3, #12
 800af30:	d108      	bne.n	800af44 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800af32:	69fb      	ldr	r3, [r7, #28]
 800af34:	2b03      	cmp	r3, #3
 800af36:	d105      	bne.n	800af44 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d134      	bne.n	800afaa <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800af40:	2301      	movs	r3, #1
 800af42:	e2b4      	b.n	800b4ae <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	685b      	ldr	r3, [r3, #4]
 800af48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af4c:	d102      	bne.n	800af54 <HAL_RCC_OscConfig+0x180>
 800af4e:	f7ff fbdd 	bl	800a70c <LL_RCC_HSE_Enable>
 800af52:	e001      	b.n	800af58 <HAL_RCC_OscConfig+0x184>
 800af54:	f7ff fbe9 	bl	800a72a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d012      	beq.n	800af86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af60:	f7fa fa14 	bl	800538c <HAL_GetTick>
 800af64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800af66:	e008      	b.n	800af7a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800af68:	f7fa fa10 	bl	800538c <HAL_GetTick>
 800af6c:	4602      	mov	r2, r0
 800af6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af70:	1ad3      	subs	r3, r2, r3
 800af72:	2b64      	cmp	r3, #100	@ 0x64
 800af74:	d901      	bls.n	800af7a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800af76:	2303      	movs	r3, #3
 800af78:	e299      	b.n	800b4ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800af7a:	f7ff fbe5 	bl	800a748 <LL_RCC_HSE_IsReady>
 800af7e:	4603      	mov	r3, r0
 800af80:	2b00      	cmp	r3, #0
 800af82:	d0f1      	beq.n	800af68 <HAL_RCC_OscConfig+0x194>
 800af84:	e011      	b.n	800afaa <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af86:	f7fa fa01 	bl	800538c <HAL_GetTick>
 800af8a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800af8c:	e008      	b.n	800afa0 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800af8e:	f7fa f9fd 	bl	800538c <HAL_GetTick>
 800af92:	4602      	mov	r2, r0
 800af94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af96:	1ad3      	subs	r3, r2, r3
 800af98:	2b64      	cmp	r3, #100	@ 0x64
 800af9a:	d901      	bls.n	800afa0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800af9c:	2303      	movs	r3, #3
 800af9e:	e286      	b.n	800b4ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800afa0:	f7ff fbd2 	bl	800a748 <LL_RCC_HSE_IsReady>
 800afa4:	4603      	mov	r3, r0
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d1f1      	bne.n	800af8e <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f003 0302 	and.w	r3, r3, #2
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d04c      	beq.n	800b050 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800afb6:	f7ff fda8 	bl	800ab0a <LL_RCC_GetSysClkSource>
 800afba:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800afbc:	f7ff fea1 	bl	800ad02 <LL_RCC_PLL_GetMainSource>
 800afc0:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800afc2:	69bb      	ldr	r3, [r7, #24]
 800afc4:	2b04      	cmp	r3, #4
 800afc6:	d005      	beq.n	800afd4 <HAL_RCC_OscConfig+0x200>
 800afc8:	69bb      	ldr	r3, [r7, #24]
 800afca:	2b0c      	cmp	r3, #12
 800afcc:	d10e      	bne.n	800afec <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800afce:	697b      	ldr	r3, [r7, #20]
 800afd0:	2b02      	cmp	r3, #2
 800afd2:	d10b      	bne.n	800afec <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	68db      	ldr	r3, [r3, #12]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d101      	bne.n	800afe0 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800afdc:	2301      	movs	r3, #1
 800afde:	e266      	b.n	800b4ae <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	691b      	ldr	r3, [r3, #16]
 800afe4:	4618      	mov	r0, r3
 800afe6:	f7ff fbf1 	bl	800a7cc <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800afea:	e031      	b.n	800b050 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	68db      	ldr	r3, [r3, #12]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d019      	beq.n	800b028 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aff4:	f7ff fbba 	bl	800a76c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aff8:	f7fa f9c8 	bl	800538c <HAL_GetTick>
 800affc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800affe:	e008      	b.n	800b012 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b000:	f7fa f9c4 	bl	800538c <HAL_GetTick>
 800b004:	4602      	mov	r2, r0
 800b006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b008:	1ad3      	subs	r3, r2, r3
 800b00a:	2b02      	cmp	r3, #2
 800b00c:	d901      	bls.n	800b012 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800b00e:	2303      	movs	r3, #3
 800b010:	e24d      	b.n	800b4ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800b012:	f7ff fbc9 	bl	800a7a8 <LL_RCC_HSI_IsReady>
 800b016:	4603      	mov	r3, r0
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d0f1      	beq.n	800b000 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	691b      	ldr	r3, [r3, #16]
 800b020:	4618      	mov	r0, r3
 800b022:	f7ff fbd3 	bl	800a7cc <LL_RCC_HSI_SetCalibTrimming>
 800b026:	e013      	b.n	800b050 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b028:	f7ff fbaf 	bl	800a78a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b02c:	f7fa f9ae 	bl	800538c <HAL_GetTick>
 800b030:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800b032:	e008      	b.n	800b046 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b034:	f7fa f9aa 	bl	800538c <HAL_GetTick>
 800b038:	4602      	mov	r2, r0
 800b03a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b03c:	1ad3      	subs	r3, r2, r3
 800b03e:	2b02      	cmp	r3, #2
 800b040:	d901      	bls.n	800b046 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800b042:	2303      	movs	r3, #3
 800b044:	e233      	b.n	800b4ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800b046:	f7ff fbaf 	bl	800a7a8 <LL_RCC_HSI_IsReady>
 800b04a:	4603      	mov	r3, r0
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d1f1      	bne.n	800b034 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f003 0308 	and.w	r3, r3, #8
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d106      	bne.n	800b06a <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800b064:	2b00      	cmp	r3, #0
 800b066:	f000 80a3 	beq.w	800b1b0 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	695b      	ldr	r3, [r3, #20]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d076      	beq.n	800b160 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f003 0310 	and.w	r3, r3, #16
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d046      	beq.n	800b10c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800b07e:	f7ff fc66 	bl	800a94e <LL_RCC_LSI1_IsReady>
 800b082:	4603      	mov	r3, r0
 800b084:	2b00      	cmp	r3, #0
 800b086:	d113      	bne.n	800b0b0 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800b088:	f7ff fc3f 	bl	800a90a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b08c:	f7fa f97e 	bl	800538c <HAL_GetTick>
 800b090:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800b092:	e008      	b.n	800b0a6 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b094:	f7fa f97a 	bl	800538c <HAL_GetTick>
 800b098:	4602      	mov	r2, r0
 800b09a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b09c:	1ad3      	subs	r3, r2, r3
 800b09e:	2b02      	cmp	r3, #2
 800b0a0:	d901      	bls.n	800b0a6 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800b0a2:	2303      	movs	r3, #3
 800b0a4:	e203      	b.n	800b4ae <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800b0a6:	f7ff fc52 	bl	800a94e <LL_RCC_LSI1_IsReady>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d0f1      	beq.n	800b094 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800b0b0:	f7ff fc5f 	bl	800a972 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0b4:	f7fa f96a 	bl	800538c <HAL_GetTick>
 800b0b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800b0ba:	e008      	b.n	800b0ce <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b0bc:	f7fa f966 	bl	800538c <HAL_GetTick>
 800b0c0:	4602      	mov	r2, r0
 800b0c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0c4:	1ad3      	subs	r3, r2, r3
 800b0c6:	2b03      	cmp	r3, #3
 800b0c8:	d901      	bls.n	800b0ce <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800b0ca:	2303      	movs	r3, #3
 800b0cc:	e1ef      	b.n	800b4ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800b0ce:	f7ff fc72 	bl	800a9b6 <LL_RCC_LSI2_IsReady>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d0f1      	beq.n	800b0bc <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	699b      	ldr	r3, [r3, #24]
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f7ff fc7c 	bl	800a9da <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800b0e2:	f7ff fc23 	bl	800a92c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0e6:	f7fa f951 	bl	800538c <HAL_GetTick>
 800b0ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800b0ec:	e008      	b.n	800b100 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b0ee:	f7fa f94d 	bl	800538c <HAL_GetTick>
 800b0f2:	4602      	mov	r2, r0
 800b0f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0f6:	1ad3      	subs	r3, r2, r3
 800b0f8:	2b02      	cmp	r3, #2
 800b0fa:	d901      	bls.n	800b100 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800b0fc:	2303      	movs	r3, #3
 800b0fe:	e1d6      	b.n	800b4ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800b100:	f7ff fc25 	bl	800a94e <LL_RCC_LSI1_IsReady>
 800b104:	4603      	mov	r3, r0
 800b106:	2b00      	cmp	r3, #0
 800b108:	d1f1      	bne.n	800b0ee <HAL_RCC_OscConfig+0x31a>
 800b10a:	e051      	b.n	800b1b0 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800b10c:	f7ff fbfd 	bl	800a90a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b110:	f7fa f93c 	bl	800538c <HAL_GetTick>
 800b114:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800b116:	e00c      	b.n	800b132 <HAL_RCC_OscConfig+0x35e>
 800b118:	20000010 	.word	0x20000010
 800b11c:	20000030 	.word	0x20000030
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b120:	f7fa f934 	bl	800538c <HAL_GetTick>
 800b124:	4602      	mov	r2, r0
 800b126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b128:	1ad3      	subs	r3, r2, r3
 800b12a:	2b02      	cmp	r3, #2
 800b12c:	d901      	bls.n	800b132 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800b12e:	2303      	movs	r3, #3
 800b130:	e1bd      	b.n	800b4ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800b132:	f7ff fc0c 	bl	800a94e <LL_RCC_LSI1_IsReady>
 800b136:	4603      	mov	r3, r0
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d0f1      	beq.n	800b120 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800b13c:	f7ff fc2a 	bl	800a994 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800b140:	e008      	b.n	800b154 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b142:	f7fa f923 	bl	800538c <HAL_GetTick>
 800b146:	4602      	mov	r2, r0
 800b148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b14a:	1ad3      	subs	r3, r2, r3
 800b14c:	2b03      	cmp	r3, #3
 800b14e:	d901      	bls.n	800b154 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800b150:	2303      	movs	r3, #3
 800b152:	e1ac      	b.n	800b4ae <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800b154:	f7ff fc2f 	bl	800a9b6 <LL_RCC_LSI2_IsReady>
 800b158:	4603      	mov	r3, r0
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d1f1      	bne.n	800b142 <HAL_RCC_OscConfig+0x36e>
 800b15e:	e027      	b.n	800b1b0 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800b160:	f7ff fc18 	bl	800a994 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b164:	f7fa f912 	bl	800538c <HAL_GetTick>
 800b168:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800b16a:	e008      	b.n	800b17e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800b16c:	f7fa f90e 	bl	800538c <HAL_GetTick>
 800b170:	4602      	mov	r2, r0
 800b172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b174:	1ad3      	subs	r3, r2, r3
 800b176:	2b03      	cmp	r3, #3
 800b178:	d901      	bls.n	800b17e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800b17a:	2303      	movs	r3, #3
 800b17c:	e197      	b.n	800b4ae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800b17e:	f7ff fc1a 	bl	800a9b6 <LL_RCC_LSI2_IsReady>
 800b182:	4603      	mov	r3, r0
 800b184:	2b00      	cmp	r3, #0
 800b186:	d1f1      	bne.n	800b16c <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800b188:	f7ff fbd0 	bl	800a92c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b18c:	f7fa f8fe 	bl	800538c <HAL_GetTick>
 800b190:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800b192:	e008      	b.n	800b1a6 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800b194:	f7fa f8fa 	bl	800538c <HAL_GetTick>
 800b198:	4602      	mov	r2, r0
 800b19a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b19c:	1ad3      	subs	r3, r2, r3
 800b19e:	2b02      	cmp	r3, #2
 800b1a0:	d901      	bls.n	800b1a6 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800b1a2:	2303      	movs	r3, #3
 800b1a4:	e183      	b.n	800b4ae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800b1a6:	f7ff fbd2 	bl	800a94e <LL_RCC_LSI1_IsReady>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d1f1      	bne.n	800b194 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f003 0304 	and.w	r3, r3, #4
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d05b      	beq.n	800b274 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b1bc:	4ba7      	ldr	r3, [pc, #668]	@ (800b45c <HAL_RCC_OscConfig+0x688>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d114      	bne.n	800b1f2 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800b1c8:	f7ff fa60 	bl	800a68c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b1cc:	f7fa f8de 	bl	800538c <HAL_GetTick>
 800b1d0:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b1d2:	e008      	b.n	800b1e6 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b1d4:	f7fa f8da 	bl	800538c <HAL_GetTick>
 800b1d8:	4602      	mov	r2, r0
 800b1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1dc:	1ad3      	subs	r3, r2, r3
 800b1de:	2b02      	cmp	r3, #2
 800b1e0:	d901      	bls.n	800b1e6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800b1e2:	2303      	movs	r3, #3
 800b1e4:	e163      	b.n	800b4ae <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b1e6:	4b9d      	ldr	r3, [pc, #628]	@ (800b45c <HAL_RCC_OscConfig+0x688>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d0f0      	beq.n	800b1d4 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	689b      	ldr	r3, [r3, #8]
 800b1f6:	2b01      	cmp	r3, #1
 800b1f8:	d102      	bne.n	800b200 <HAL_RCC_OscConfig+0x42c>
 800b1fa:	f7ff fb30 	bl	800a85e <LL_RCC_LSE_Enable>
 800b1fe:	e00c      	b.n	800b21a <HAL_RCC_OscConfig+0x446>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	689b      	ldr	r3, [r3, #8]
 800b204:	2b05      	cmp	r3, #5
 800b206:	d104      	bne.n	800b212 <HAL_RCC_OscConfig+0x43e>
 800b208:	f7ff fb4b 	bl	800a8a2 <LL_RCC_LSE_EnableBypass>
 800b20c:	f7ff fb27 	bl	800a85e <LL_RCC_LSE_Enable>
 800b210:	e003      	b.n	800b21a <HAL_RCC_OscConfig+0x446>
 800b212:	f7ff fb35 	bl	800a880 <LL_RCC_LSE_Disable>
 800b216:	f7ff fb55 	bl	800a8c4 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	689b      	ldr	r3, [r3, #8]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d014      	beq.n	800b24c <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b222:	f7fa f8b3 	bl	800538c <HAL_GetTick>
 800b226:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800b228:	e00a      	b.n	800b240 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b22a:	f7fa f8af 	bl	800538c <HAL_GetTick>
 800b22e:	4602      	mov	r2, r0
 800b230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b232:	1ad3      	subs	r3, r2, r3
 800b234:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b238:	4293      	cmp	r3, r2
 800b23a:	d901      	bls.n	800b240 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800b23c:	2303      	movs	r3, #3
 800b23e:	e136      	b.n	800b4ae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800b240:	f7ff fb51 	bl	800a8e6 <LL_RCC_LSE_IsReady>
 800b244:	4603      	mov	r3, r0
 800b246:	2b00      	cmp	r3, #0
 800b248:	d0ef      	beq.n	800b22a <HAL_RCC_OscConfig+0x456>
 800b24a:	e013      	b.n	800b274 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b24c:	f7fa f89e 	bl	800538c <HAL_GetTick>
 800b250:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800b252:	e00a      	b.n	800b26a <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b254:	f7fa f89a 	bl	800538c <HAL_GetTick>
 800b258:	4602      	mov	r2, r0
 800b25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b25c:	1ad3      	subs	r3, r2, r3
 800b25e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b262:	4293      	cmp	r3, r2
 800b264:	d901      	bls.n	800b26a <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800b266:	2303      	movs	r3, #3
 800b268:	e121      	b.n	800b4ae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800b26a:	f7ff fb3c 	bl	800a8e6 <LL_RCC_LSE_IsReady>
 800b26e:	4603      	mov	r3, r0
 800b270:	2b00      	cmp	r3, #0
 800b272:	d1ef      	bne.n	800b254 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d02c      	beq.n	800b2da <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b284:	2b00      	cmp	r3, #0
 800b286:	d014      	beq.n	800b2b2 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b288:	f7ff fab5 	bl	800a7f6 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b28c:	f7fa f87e 	bl	800538c <HAL_GetTick>
 800b290:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800b292:	e008      	b.n	800b2a6 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b294:	f7fa f87a 	bl	800538c <HAL_GetTick>
 800b298:	4602      	mov	r2, r0
 800b29a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b29c:	1ad3      	subs	r3, r2, r3
 800b29e:	2b02      	cmp	r3, #2
 800b2a0:	d901      	bls.n	800b2a6 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800b2a2:	2303      	movs	r3, #3
 800b2a4:	e103      	b.n	800b4ae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800b2a6:	f7ff fac8 	bl	800a83a <LL_RCC_HSI48_IsReady>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d0f1      	beq.n	800b294 <HAL_RCC_OscConfig+0x4c0>
 800b2b0:	e013      	b.n	800b2da <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b2b2:	f7ff fab1 	bl	800a818 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b2b6:	f7fa f869 	bl	800538c <HAL_GetTick>
 800b2ba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800b2bc:	e008      	b.n	800b2d0 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b2be:	f7fa f865 	bl	800538c <HAL_GetTick>
 800b2c2:	4602      	mov	r2, r0
 800b2c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2c6:	1ad3      	subs	r3, r2, r3
 800b2c8:	2b02      	cmp	r3, #2
 800b2ca:	d901      	bls.n	800b2d0 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800b2cc:	2303      	movs	r3, #3
 800b2ce:	e0ee      	b.n	800b4ae <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800b2d0:	f7ff fab3 	bl	800a83a <LL_RCC_HSI48_IsReady>
 800b2d4:	4603      	mov	r3, r0
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d1f1      	bne.n	800b2be <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	f000 80e4 	beq.w	800b4ac <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b2e4:	f7ff fc11 	bl	800ab0a <LL_RCC_GetSysClkSource>
 800b2e8:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800b2ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b2ee:	68db      	ldr	r3, [r3, #12]
 800b2f0:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2f6:	2b02      	cmp	r3, #2
 800b2f8:	f040 80b4 	bne.w	800b464 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	f003 0203 	and.w	r2, r3, #3
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b306:	429a      	cmp	r2, r3
 800b308:	d123      	bne.n	800b352 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b314:	429a      	cmp	r2, r3
 800b316:	d11c      	bne.n	800b352 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	0a1b      	lsrs	r3, r3, #8
 800b31c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800b324:	429a      	cmp	r2, r3
 800b326:	d114      	bne.n	800b352 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800b332:	429a      	cmp	r2, r3
 800b334:	d10d      	bne.n	800b352 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800b340:	429a      	cmp	r2, r3
 800b342:	d106      	bne.n	800b352 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800b34e:	429a      	cmp	r2, r3
 800b350:	d05d      	beq.n	800b40e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	2b0c      	cmp	r3, #12
 800b356:	d058      	beq.n	800b40a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800b358:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b362:	2b00      	cmp	r3, #0
 800b364:	d001      	beq.n	800b36a <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800b366:	2301      	movs	r3, #1
 800b368:	e0a1      	b.n	800b4ae <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800b36a:	f7ff fc84 	bl	800ac76 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b36e:	f7fa f80d 	bl	800538c <HAL_GetTick>
 800b372:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b374:	e008      	b.n	800b388 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b376:	f7fa f809 	bl	800538c <HAL_GetTick>
 800b37a:	4602      	mov	r2, r0
 800b37c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b37e:	1ad3      	subs	r3, r2, r3
 800b380:	2b02      	cmp	r3, #2
 800b382:	d901      	bls.n	800b388 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800b384:	2303      	movs	r3, #3
 800b386:	e092      	b.n	800b4ae <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b388:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b392:	2b00      	cmp	r3, #0
 800b394:	d1ef      	bne.n	800b376 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b396:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b39a:	68da      	ldr	r2, [r3, #12]
 800b39c:	4b30      	ldr	r3, [pc, #192]	@ (800b460 <HAL_RCC_OscConfig+0x68c>)
 800b39e:	4013      	ands	r3, r2
 800b3a0:	687a      	ldr	r2, [r7, #4]
 800b3a2:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800b3a8:	4311      	orrs	r1, r2
 800b3aa:	687a      	ldr	r2, [r7, #4]
 800b3ac:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800b3ae:	0212      	lsls	r2, r2, #8
 800b3b0:	4311      	orrs	r1, r2
 800b3b2:	687a      	ldr	r2, [r7, #4]
 800b3b4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800b3b6:	4311      	orrs	r1, r2
 800b3b8:	687a      	ldr	r2, [r7, #4]
 800b3ba:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800b3bc:	4311      	orrs	r1, r2
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800b3c2:	430a      	orrs	r2, r1
 800b3c4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b3c8:	4313      	orrs	r3, r2
 800b3ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800b3cc:	f7ff fc44 	bl	800ac58 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b3d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b3d4:	68db      	ldr	r3, [r3, #12]
 800b3d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b3da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b3de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800b3e0:	f7f9 ffd4 	bl	800538c <HAL_GetTick>
 800b3e4:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b3e6:	e008      	b.n	800b3fa <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b3e8:	f7f9 ffd0 	bl	800538c <HAL_GetTick>
 800b3ec:	4602      	mov	r2, r0
 800b3ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3f0:	1ad3      	subs	r3, r2, r3
 800b3f2:	2b02      	cmp	r3, #2
 800b3f4:	d901      	bls.n	800b3fa <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800b3f6:	2303      	movs	r3, #3
 800b3f8:	e059      	b.n	800b4ae <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b3fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b404:	2b00      	cmp	r3, #0
 800b406:	d0ef      	beq.n	800b3e8 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b408:	e050      	b.n	800b4ac <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800b40a:	2301      	movs	r3, #1
 800b40c:	e04f      	b.n	800b4ae <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b40e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d147      	bne.n	800b4ac <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800b41c:	f7ff fc1c 	bl	800ac58 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b420:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b424:	68db      	ldr	r3, [r3, #12]
 800b426:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800b42a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b42e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b430:	f7f9 ffac 	bl	800538c <HAL_GetTick>
 800b434:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b436:	e008      	b.n	800b44a <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b438:	f7f9 ffa8 	bl	800538c <HAL_GetTick>
 800b43c:	4602      	mov	r2, r0
 800b43e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b440:	1ad3      	subs	r3, r2, r3
 800b442:	2b02      	cmp	r3, #2
 800b444:	d901      	bls.n	800b44a <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800b446:	2303      	movs	r3, #3
 800b448:	e031      	b.n	800b4ae <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b44a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b454:	2b00      	cmp	r3, #0
 800b456:	d0ef      	beq.n	800b438 <HAL_RCC_OscConfig+0x664>
 800b458:	e028      	b.n	800b4ac <HAL_RCC_OscConfig+0x6d8>
 800b45a:	bf00      	nop
 800b45c:	58000400 	.word	0x58000400
 800b460:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b464:	693b      	ldr	r3, [r7, #16]
 800b466:	2b0c      	cmp	r3, #12
 800b468:	d01e      	beq.n	800b4a8 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b46a:	f7ff fc04 	bl	800ac76 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b46e:	f7f9 ff8d 	bl	800538c <HAL_GetTick>
 800b472:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b474:	e008      	b.n	800b488 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b476:	f7f9 ff89 	bl	800538c <HAL_GetTick>
 800b47a:	4602      	mov	r2, r0
 800b47c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b47e:	1ad3      	subs	r3, r2, r3
 800b480:	2b02      	cmp	r3, #2
 800b482:	d901      	bls.n	800b488 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800b484:	2303      	movs	r3, #3
 800b486:	e012      	b.n	800b4ae <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b488:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b492:	2b00      	cmp	r3, #0
 800b494:	d1ef      	bne.n	800b476 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800b496:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b49a:	68da      	ldr	r2, [r3, #12]
 800b49c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b4a0:	4b05      	ldr	r3, [pc, #20]	@ (800b4b8 <HAL_RCC_OscConfig+0x6e4>)
 800b4a2:	4013      	ands	r3, r2
 800b4a4:	60cb      	str	r3, [r1, #12]
 800b4a6:	e001      	b.n	800b4ac <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	e000      	b.n	800b4ae <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800b4ac:	2300      	movs	r3, #0
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3734      	adds	r7, #52	@ 0x34
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	bd90      	pop	{r4, r7, pc}
 800b4b6:	bf00      	nop
 800b4b8:	eefefffc 	.word	0xeefefffc

0800b4bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b4bc:	b580      	push	{r7, lr}
 800b4be:	b084      	sub	sp, #16
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d101      	bne.n	800b4d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	e12d      	b.n	800b72c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b4d0:	4b98      	ldr	r3, [pc, #608]	@ (800b734 <HAL_RCC_ClockConfig+0x278>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f003 0307 	and.w	r3, r3, #7
 800b4d8:	683a      	ldr	r2, [r7, #0]
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d91b      	bls.n	800b516 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b4de:	4b95      	ldr	r3, [pc, #596]	@ (800b734 <HAL_RCC_ClockConfig+0x278>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f023 0207 	bic.w	r2, r3, #7
 800b4e6:	4993      	ldr	r1, [pc, #588]	@ (800b734 <HAL_RCC_ClockConfig+0x278>)
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b4ee:	f7f9 ff4d 	bl	800538c <HAL_GetTick>
 800b4f2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b4f4:	e008      	b.n	800b508 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b4f6:	f7f9 ff49 	bl	800538c <HAL_GetTick>
 800b4fa:	4602      	mov	r2, r0
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	1ad3      	subs	r3, r2, r3
 800b500:	2b02      	cmp	r3, #2
 800b502:	d901      	bls.n	800b508 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800b504:	2303      	movs	r3, #3
 800b506:	e111      	b.n	800b72c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b508:	4b8a      	ldr	r3, [pc, #552]	@ (800b734 <HAL_RCC_ClockConfig+0x278>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f003 0307 	and.w	r3, r3, #7
 800b510:	683a      	ldr	r2, [r7, #0]
 800b512:	429a      	cmp	r2, r3
 800b514:	d1ef      	bne.n	800b4f6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	f003 0302 	and.w	r3, r3, #2
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d016      	beq.n	800b550 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	689b      	ldr	r3, [r3, #8]
 800b526:	4618      	mov	r0, r3
 800b528:	f7ff fafb 	bl	800ab22 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b52c:	f7f9 ff2e 	bl	800538c <HAL_GetTick>
 800b530:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800b532:	e008      	b.n	800b546 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b534:	f7f9 ff2a 	bl	800538c <HAL_GetTick>
 800b538:	4602      	mov	r2, r0
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	1ad3      	subs	r3, r2, r3
 800b53e:	2b02      	cmp	r3, #2
 800b540:	d901      	bls.n	800b546 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800b542:	2303      	movs	r3, #3
 800b544:	e0f2      	b.n	800b72c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800b546:	f7ff fbe8 	bl	800ad1a <LL_RCC_IsActiveFlag_HPRE>
 800b54a:	4603      	mov	r3, r0
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d0f1      	beq.n	800b534 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f003 0320 	and.w	r3, r3, #32
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d016      	beq.n	800b58a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	695b      	ldr	r3, [r3, #20]
 800b560:	4618      	mov	r0, r3
 800b562:	f7ff faf2 	bl	800ab4a <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b566:	f7f9 ff11 	bl	800538c <HAL_GetTick>
 800b56a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800b56c:	e008      	b.n	800b580 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b56e:	f7f9 ff0d 	bl	800538c <HAL_GetTick>
 800b572:	4602      	mov	r2, r0
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	1ad3      	subs	r3, r2, r3
 800b578:	2b02      	cmp	r3, #2
 800b57a:	d901      	bls.n	800b580 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800b57c:	2303      	movs	r3, #3
 800b57e:	e0d5      	b.n	800b72c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800b580:	f7ff fbdd 	bl	800ad3e <LL_RCC_IsActiveFlag_C2HPRE>
 800b584:	4603      	mov	r3, r0
 800b586:	2b00      	cmp	r3, #0
 800b588:	d0f1      	beq.n	800b56e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b592:	2b00      	cmp	r3, #0
 800b594:	d016      	beq.n	800b5c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	699b      	ldr	r3, [r3, #24]
 800b59a:	4618      	mov	r0, r3
 800b59c:	f7ff faeb 	bl	800ab76 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b5a0:	f7f9 fef4 	bl	800538c <HAL_GetTick>
 800b5a4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800b5a6:	e008      	b.n	800b5ba <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b5a8:	f7f9 fef0 	bl	800538c <HAL_GetTick>
 800b5ac:	4602      	mov	r2, r0
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	1ad3      	subs	r3, r2, r3
 800b5b2:	2b02      	cmp	r3, #2
 800b5b4:	d901      	bls.n	800b5ba <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800b5b6:	2303      	movs	r3, #3
 800b5b8:	e0b8      	b.n	800b72c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800b5ba:	f7ff fbd3 	bl	800ad64 <LL_RCC_IsActiveFlag_SHDHPRE>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d0f1      	beq.n	800b5a8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	f003 0304 	and.w	r3, r3, #4
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d016      	beq.n	800b5fe <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	68db      	ldr	r3, [r3, #12]
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	f7ff fae5 	bl	800aba4 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b5da:	f7f9 fed7 	bl	800538c <HAL_GetTick>
 800b5de:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800b5e0:	e008      	b.n	800b5f4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b5e2:	f7f9 fed3 	bl	800538c <HAL_GetTick>
 800b5e6:	4602      	mov	r2, r0
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	1ad3      	subs	r3, r2, r3
 800b5ec:	2b02      	cmp	r3, #2
 800b5ee:	d901      	bls.n	800b5f4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800b5f0:	2303      	movs	r3, #3
 800b5f2:	e09b      	b.n	800b72c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800b5f4:	f7ff fbc9 	bl	800ad8a <LL_RCC_IsActiveFlag_PPRE1>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d0f1      	beq.n	800b5e2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f003 0308 	and.w	r3, r3, #8
 800b606:	2b00      	cmp	r3, #0
 800b608:	d017      	beq.n	800b63a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	691b      	ldr	r3, [r3, #16]
 800b60e:	00db      	lsls	r3, r3, #3
 800b610:	4618      	mov	r0, r3
 800b612:	f7ff fadb 	bl	800abcc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800b616:	f7f9 feb9 	bl	800538c <HAL_GetTick>
 800b61a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800b61c:	e008      	b.n	800b630 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800b61e:	f7f9 feb5 	bl	800538c <HAL_GetTick>
 800b622:	4602      	mov	r2, r0
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	1ad3      	subs	r3, r2, r3
 800b628:	2b02      	cmp	r3, #2
 800b62a:	d901      	bls.n	800b630 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800b62c:	2303      	movs	r3, #3
 800b62e:	e07d      	b.n	800b72c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800b630:	f7ff fbbd 	bl	800adae <LL_RCC_IsActiveFlag_PPRE2>
 800b634:	4603      	mov	r3, r0
 800b636:	2b00      	cmp	r3, #0
 800b638:	d0f1      	beq.n	800b61e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f003 0301 	and.w	r3, r3, #1
 800b642:	2b00      	cmp	r3, #0
 800b644:	d043      	beq.n	800b6ce <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	2b02      	cmp	r3, #2
 800b64c:	d106      	bne.n	800b65c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800b64e:	f7ff f87b 	bl	800a748 <LL_RCC_HSE_IsReady>
 800b652:	4603      	mov	r3, r0
 800b654:	2b00      	cmp	r3, #0
 800b656:	d11e      	bne.n	800b696 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b658:	2301      	movs	r3, #1
 800b65a:	e067      	b.n	800b72c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	685b      	ldr	r3, [r3, #4]
 800b660:	2b03      	cmp	r3, #3
 800b662:	d106      	bne.n	800b672 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800b664:	f7ff fb16 	bl	800ac94 <LL_RCC_PLL_IsReady>
 800b668:	4603      	mov	r3, r0
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d113      	bne.n	800b696 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b66e:	2301      	movs	r3, #1
 800b670:	e05c      	b.n	800b72c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d106      	bne.n	800b688 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800b67a:	f7ff f9e3 	bl	800aa44 <LL_RCC_MSI_IsReady>
 800b67e:	4603      	mov	r3, r0
 800b680:	2b00      	cmp	r3, #0
 800b682:	d108      	bne.n	800b696 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b684:	2301      	movs	r3, #1
 800b686:	e051      	b.n	800b72c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800b688:	f7ff f88e 	bl	800a7a8 <LL_RCC_HSI_IsReady>
 800b68c:	4603      	mov	r3, r0
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d101      	bne.n	800b696 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800b692:	2301      	movs	r3, #1
 800b694:	e04a      	b.n	800b72c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	685b      	ldr	r3, [r3, #4]
 800b69a:	4618      	mov	r0, r3
 800b69c:	f7ff fa21 	bl	800aae2 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6a0:	f7f9 fe74 	bl	800538c <HAL_GetTick>
 800b6a4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b6a6:	e00a      	b.n	800b6be <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b6a8:	f7f9 fe70 	bl	800538c <HAL_GetTick>
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	1ad3      	subs	r3, r2, r3
 800b6b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d901      	bls.n	800b6be <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800b6ba:	2303      	movs	r3, #3
 800b6bc:	e036      	b.n	800b72c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b6be:	f7ff fa24 	bl	800ab0a <LL_RCC_GetSysClkSource>
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	685b      	ldr	r3, [r3, #4]
 800b6c8:	009b      	lsls	r3, r3, #2
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d1ec      	bne.n	800b6a8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b6ce:	4b19      	ldr	r3, [pc, #100]	@ (800b734 <HAL_RCC_ClockConfig+0x278>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f003 0307 	and.w	r3, r3, #7
 800b6d6:	683a      	ldr	r2, [r7, #0]
 800b6d8:	429a      	cmp	r2, r3
 800b6da:	d21b      	bcs.n	800b714 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b6dc:	4b15      	ldr	r3, [pc, #84]	@ (800b734 <HAL_RCC_ClockConfig+0x278>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	f023 0207 	bic.w	r2, r3, #7
 800b6e4:	4913      	ldr	r1, [pc, #76]	@ (800b734 <HAL_RCC_ClockConfig+0x278>)
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b6ec:	f7f9 fe4e 	bl	800538c <HAL_GetTick>
 800b6f0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b6f2:	e008      	b.n	800b706 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b6f4:	f7f9 fe4a 	bl	800538c <HAL_GetTick>
 800b6f8:	4602      	mov	r2, r0
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	1ad3      	subs	r3, r2, r3
 800b6fe:	2b02      	cmp	r3, #2
 800b700:	d901      	bls.n	800b706 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800b702:	2303      	movs	r3, #3
 800b704:	e012      	b.n	800b72c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b706:	4b0b      	ldr	r3, [pc, #44]	@ (800b734 <HAL_RCC_ClockConfig+0x278>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	f003 0307 	and.w	r3, r3, #7
 800b70e:	683a      	ldr	r2, [r7, #0]
 800b710:	429a      	cmp	r2, r3
 800b712:	d1ef      	bne.n	800b6f4 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800b714:	f000 f87e 	bl	800b814 <HAL_RCC_GetHCLKFreq>
 800b718:	4603      	mov	r3, r0
 800b71a:	4a07      	ldr	r2, [pc, #28]	@ (800b738 <HAL_RCC_ClockConfig+0x27c>)
 800b71c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800b71e:	f7f9 fe41 	bl	80053a4 <HAL_GetTickPrio>
 800b722:	4603      	mov	r3, r0
 800b724:	4618      	mov	r0, r3
 800b726:	f7f9 fde3 	bl	80052f0 <HAL_InitTick>
 800b72a:	4603      	mov	r3, r0
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3710      	adds	r7, #16
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}
 800b734:	58004000 	.word	0x58004000
 800b738:	20000010 	.word	0x20000010

0800b73c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b73c:	b590      	push	{r4, r7, lr}
 800b73e:	b085      	sub	sp, #20
 800b740:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b742:	f7ff f9e2 	bl	800ab0a <LL_RCC_GetSysClkSource>
 800b746:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d10a      	bne.n	800b764 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800b74e:	f7ff f99e 	bl	800aa8e <LL_RCC_MSI_GetRange>
 800b752:	4603      	mov	r3, r0
 800b754:	091b      	lsrs	r3, r3, #4
 800b756:	f003 030f 	and.w	r3, r3, #15
 800b75a:	4a2b      	ldr	r2, [pc, #172]	@ (800b808 <HAL_RCC_GetSysClockFreq+0xcc>)
 800b75c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b760:	60fb      	str	r3, [r7, #12]
 800b762:	e04b      	b.n	800b7fc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	2b04      	cmp	r3, #4
 800b768:	d102      	bne.n	800b770 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b76a:	4b28      	ldr	r3, [pc, #160]	@ (800b80c <HAL_RCC_GetSysClockFreq+0xd0>)
 800b76c:	60fb      	str	r3, [r7, #12]
 800b76e:	e045      	b.n	800b7fc <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2b08      	cmp	r3, #8
 800b774:	d10a      	bne.n	800b78c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800b776:	f7fe ffb7 	bl	800a6e8 <LL_RCC_HSE_IsEnabledDiv2>
 800b77a:	4603      	mov	r3, r0
 800b77c:	2b01      	cmp	r3, #1
 800b77e:	d102      	bne.n	800b786 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800b780:	4b22      	ldr	r3, [pc, #136]	@ (800b80c <HAL_RCC_GetSysClockFreq+0xd0>)
 800b782:	60fb      	str	r3, [r7, #12]
 800b784:	e03a      	b.n	800b7fc <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800b786:	4b22      	ldr	r3, [pc, #136]	@ (800b810 <HAL_RCC_GetSysClockFreq+0xd4>)
 800b788:	60fb      	str	r3, [r7, #12]
 800b78a:	e037      	b.n	800b7fc <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800b78c:	f7ff fab9 	bl	800ad02 <LL_RCC_PLL_GetMainSource>
 800b790:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	2b02      	cmp	r3, #2
 800b796:	d003      	beq.n	800b7a0 <HAL_RCC_GetSysClockFreq+0x64>
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	2b03      	cmp	r3, #3
 800b79c:	d003      	beq.n	800b7a6 <HAL_RCC_GetSysClockFreq+0x6a>
 800b79e:	e00d      	b.n	800b7bc <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800b7a0:	4b1a      	ldr	r3, [pc, #104]	@ (800b80c <HAL_RCC_GetSysClockFreq+0xd0>)
 800b7a2:	60bb      	str	r3, [r7, #8]
        break;
 800b7a4:	e015      	b.n	800b7d2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800b7a6:	f7fe ff9f 	bl	800a6e8 <LL_RCC_HSE_IsEnabledDiv2>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	2b01      	cmp	r3, #1
 800b7ae:	d102      	bne.n	800b7b6 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800b7b0:	4b16      	ldr	r3, [pc, #88]	@ (800b80c <HAL_RCC_GetSysClockFreq+0xd0>)
 800b7b2:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800b7b4:	e00d      	b.n	800b7d2 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800b7b6:	4b16      	ldr	r3, [pc, #88]	@ (800b810 <HAL_RCC_GetSysClockFreq+0xd4>)
 800b7b8:	60bb      	str	r3, [r7, #8]
        break;
 800b7ba:	e00a      	b.n	800b7d2 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800b7bc:	f7ff f967 	bl	800aa8e <LL_RCC_MSI_GetRange>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	091b      	lsrs	r3, r3, #4
 800b7c4:	f003 030f 	and.w	r3, r3, #15
 800b7c8:	4a0f      	ldr	r2, [pc, #60]	@ (800b808 <HAL_RCC_GetSysClockFreq+0xcc>)
 800b7ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7ce:	60bb      	str	r3, [r7, #8]
        break;
 800b7d0:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800b7d2:	f7ff fa71 	bl	800acb8 <LL_RCC_PLL_GetN>
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	68bb      	ldr	r3, [r7, #8]
 800b7da:	fb03 f402 	mul.w	r4, r3, r2
 800b7de:	f7ff fa84 	bl	800acea <LL_RCC_PLL_GetDivider>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	091b      	lsrs	r3, r3, #4
 800b7e6:	3301      	adds	r3, #1
 800b7e8:	fbb4 f4f3 	udiv	r4, r4, r3
 800b7ec:	f7ff fa71 	bl	800acd2 <LL_RCC_PLL_GetR>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	0f5b      	lsrs	r3, r3, #29
 800b7f4:	3301      	adds	r3, #1
 800b7f6:	fbb4 f3f3 	udiv	r3, r4, r3
 800b7fa:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3714      	adds	r7, #20
 800b802:	46bd      	mov	sp, r7
 800b804:	bd90      	pop	{r4, r7, pc}
 800b806:	bf00      	nop
 800b808:	080135e4 	.word	0x080135e4
 800b80c:	00f42400 	.word	0x00f42400
 800b810:	01e84800 	.word	0x01e84800

0800b814 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b814:	b598      	push	{r3, r4, r7, lr}
 800b816:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800b818:	f7ff ff90 	bl	800b73c <HAL_RCC_GetSysClockFreq>
 800b81c:	4604      	mov	r4, r0
 800b81e:	f7ff f9e9 	bl	800abf4 <LL_RCC_GetAHBPrescaler>
 800b822:	4603      	mov	r3, r0
 800b824:	091b      	lsrs	r3, r3, #4
 800b826:	f003 030f 	and.w	r3, r3, #15
 800b82a:	4a03      	ldr	r2, [pc, #12]	@ (800b838 <HAL_RCC_GetHCLKFreq+0x24>)
 800b82c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b830:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800b834:	4618      	mov	r0, r3
 800b836:	bd98      	pop	{r3, r4, r7, pc}
 800b838:	08013584 	.word	0x08013584

0800b83c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b83c:	b598      	push	{r3, r4, r7, lr}
 800b83e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800b840:	f7ff ffe8 	bl	800b814 <HAL_RCC_GetHCLKFreq>
 800b844:	4604      	mov	r4, r0
 800b846:	f7ff f9ef 	bl	800ac28 <LL_RCC_GetAPB1Prescaler>
 800b84a:	4603      	mov	r3, r0
 800b84c:	0a1b      	lsrs	r3, r3, #8
 800b84e:	f003 0307 	and.w	r3, r3, #7
 800b852:	4a04      	ldr	r2, [pc, #16]	@ (800b864 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b858:	f003 031f 	and.w	r3, r3, #31
 800b85c:	fa24 f303 	lsr.w	r3, r4, r3
}
 800b860:	4618      	mov	r0, r3
 800b862:	bd98      	pop	{r3, r4, r7, pc}
 800b864:	080135c4 	.word	0x080135c4

0800b868 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b868:	b598      	push	{r3, r4, r7, lr}
 800b86a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800b86c:	f7ff ffd2 	bl	800b814 <HAL_RCC_GetHCLKFreq>
 800b870:	4604      	mov	r4, r0
 800b872:	f7ff f9e5 	bl	800ac40 <LL_RCC_GetAPB2Prescaler>
 800b876:	4603      	mov	r3, r0
 800b878:	0adb      	lsrs	r3, r3, #11
 800b87a:	f003 0307 	and.w	r3, r3, #7
 800b87e:	4a04      	ldr	r2, [pc, #16]	@ (800b890 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b884:	f003 031f 	and.w	r3, r3, #31
 800b888:	fa24 f303 	lsr.w	r3, r4, r3
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	bd98      	pop	{r3, r4, r7, pc}
 800b890:	080135c4 	.word	0x080135c4

0800b894 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800b894:	b590      	push	{r4, r7, lr}
 800b896:	b085      	sub	sp, #20
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2bb0      	cmp	r3, #176	@ 0xb0
 800b8a0:	d903      	bls.n	800b8aa <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800b8a2:	4b15      	ldr	r3, [pc, #84]	@ (800b8f8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800b8a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8a6:	60fb      	str	r3, [r7, #12]
 800b8a8:	e007      	b.n	800b8ba <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	091b      	lsrs	r3, r3, #4
 800b8ae:	f003 030f 	and.w	r3, r3, #15
 800b8b2:	4a11      	ldr	r2, [pc, #68]	@ (800b8f8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800b8b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8b8:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800b8ba:	f7ff f9a7 	bl	800ac0c <LL_RCC_GetAHB4Prescaler>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	091b      	lsrs	r3, r3, #4
 800b8c2:	f003 030f 	and.w	r3, r3, #15
 800b8c6:	4a0d      	ldr	r2, [pc, #52]	@ (800b8fc <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800b8c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8cc:	68fa      	ldr	r2, [r7, #12]
 800b8ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8d2:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	4a0a      	ldr	r2, [pc, #40]	@ (800b900 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800b8d8:	fba2 2303 	umull	r2, r3, r2, r3
 800b8dc:	0c9c      	lsrs	r4, r3, #18
 800b8de:	f7fe fee5 	bl	800a6ac <HAL_PWREx_GetVoltageRange>
 800b8e2:	4603      	mov	r3, r0
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	f000 f80c 	bl	800b904 <RCC_SetFlashLatency>
 800b8ec:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3714      	adds	r7, #20
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd90      	pop	{r4, r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	080135e4 	.word	0x080135e4
 800b8fc:	08013584 	.word	0x08013584
 800b900:	431bde83 	.word	0x431bde83

0800b904 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800b904:	b590      	push	{r4, r7, lr}
 800b906:	b093      	sub	sp, #76	@ 0x4c
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800b90e:	4b37      	ldr	r3, [pc, #220]	@ (800b9ec <RCC_SetFlashLatency+0xe8>)
 800b910:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800b914:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b916:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800b91a:	4a35      	ldr	r2, [pc, #212]	@ (800b9f0 <RCC_SetFlashLatency+0xec>)
 800b91c:	f107 031c 	add.w	r3, r7, #28
 800b920:	ca07      	ldmia	r2, {r0, r1, r2}
 800b922:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800b926:	4b33      	ldr	r3, [pc, #204]	@ (800b9f4 <RCC_SetFlashLatency+0xf0>)
 800b928:	f107 040c 	add.w	r4, r7, #12
 800b92c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b92e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800b932:	2300      	movs	r3, #0
 800b934:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b93c:	d11a      	bne.n	800b974 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800b93e:	2300      	movs	r3, #0
 800b940:	643b      	str	r3, [r7, #64]	@ 0x40
 800b942:	e013      	b.n	800b96c <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800b944:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b946:	009b      	lsls	r3, r3, #2
 800b948:	3348      	adds	r3, #72	@ 0x48
 800b94a:	443b      	add	r3, r7
 800b94c:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800b950:	687a      	ldr	r2, [r7, #4]
 800b952:	429a      	cmp	r2, r3
 800b954:	d807      	bhi.n	800b966 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800b956:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b958:	009b      	lsls	r3, r3, #2
 800b95a:	3348      	adds	r3, #72	@ 0x48
 800b95c:	443b      	add	r3, r7
 800b95e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800b962:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800b964:	e020      	b.n	800b9a8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800b966:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b968:	3301      	adds	r3, #1
 800b96a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b96c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b96e:	2b03      	cmp	r3, #3
 800b970:	d9e8      	bls.n	800b944 <RCC_SetFlashLatency+0x40>
 800b972:	e019      	b.n	800b9a8 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800b974:	2300      	movs	r3, #0
 800b976:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b978:	e013      	b.n	800b9a2 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800b97a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b97c:	009b      	lsls	r3, r3, #2
 800b97e:	3348      	adds	r3, #72	@ 0x48
 800b980:	443b      	add	r3, r7
 800b982:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800b986:	687a      	ldr	r2, [r7, #4]
 800b988:	429a      	cmp	r2, r3
 800b98a:	d807      	bhi.n	800b99c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800b98c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b98e:	009b      	lsls	r3, r3, #2
 800b990:	3348      	adds	r3, #72	@ 0x48
 800b992:	443b      	add	r3, r7
 800b994:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800b998:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800b99a:	e005      	b.n	800b9a8 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800b99c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b99e:	3301      	adds	r3, #1
 800b9a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b9a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9a4:	2b02      	cmp	r3, #2
 800b9a6:	d9e8      	bls.n	800b97a <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800b9a8:	4b13      	ldr	r3, [pc, #76]	@ (800b9f8 <RCC_SetFlashLatency+0xf4>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	f023 0207 	bic.w	r2, r3, #7
 800b9b0:	4911      	ldr	r1, [pc, #68]	@ (800b9f8 <RCC_SetFlashLatency+0xf4>)
 800b9b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b9b4:	4313      	orrs	r3, r2
 800b9b6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800b9b8:	f7f9 fce8 	bl	800538c <HAL_GetTick>
 800b9bc:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800b9be:	e008      	b.n	800b9d2 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800b9c0:	f7f9 fce4 	bl	800538c <HAL_GetTick>
 800b9c4:	4602      	mov	r2, r0
 800b9c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9c8:	1ad3      	subs	r3, r2, r3
 800b9ca:	2b02      	cmp	r3, #2
 800b9cc:	d901      	bls.n	800b9d2 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800b9ce:	2303      	movs	r3, #3
 800b9d0:	e007      	b.n	800b9e2 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800b9d2:	4b09      	ldr	r3, [pc, #36]	@ (800b9f8 <RCC_SetFlashLatency+0xf4>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f003 0307 	and.w	r3, r3, #7
 800b9da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d1ef      	bne.n	800b9c0 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800b9e0:	2300      	movs	r3, #0
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	374c      	adds	r7, #76	@ 0x4c
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd90      	pop	{r4, r7, pc}
 800b9ea:	bf00      	nop
 800b9ec:	080134c8 	.word	0x080134c8
 800b9f0:	080134d8 	.word	0x080134d8
 800b9f4:	080134e4 	.word	0x080134e4
 800b9f8:	58004000 	.word	0x58004000

0800b9fc <LL_RCC_LSE_IsEnabled>:
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800ba00:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba08:	f003 0301 	and.w	r3, r3, #1
 800ba0c:	2b01      	cmp	r3, #1
 800ba0e:	d101      	bne.n	800ba14 <LL_RCC_LSE_IsEnabled+0x18>
 800ba10:	2301      	movs	r3, #1
 800ba12:	e000      	b.n	800ba16 <LL_RCC_LSE_IsEnabled+0x1a>
 800ba14:	2300      	movs	r3, #0
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1e:	4770      	bx	lr

0800ba20 <LL_RCC_LSE_IsReady>:
{
 800ba20:	b480      	push	{r7}
 800ba22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800ba24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ba2c:	f003 0302 	and.w	r3, r3, #2
 800ba30:	2b02      	cmp	r3, #2
 800ba32:	d101      	bne.n	800ba38 <LL_RCC_LSE_IsReady+0x18>
 800ba34:	2301      	movs	r3, #1
 800ba36:	e000      	b.n	800ba3a <LL_RCC_LSE_IsReady+0x1a>
 800ba38:	2300      	movs	r3, #0
}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba42:	4770      	bx	lr

0800ba44 <LL_RCC_SetRFWKPClockSource>:
{
 800ba44:	b480      	push	{r7}
 800ba46:	b083      	sub	sp, #12
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800ba4c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ba54:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800ba58:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800ba64:	bf00      	nop
 800ba66:	370c      	adds	r7, #12
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6e:	4770      	bx	lr

0800ba70 <LL_RCC_SetSMPSClockSource>:
{
 800ba70:	b480      	push	{r7}
 800ba72:	b083      	sub	sp, #12
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800ba78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ba7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba7e:	f023 0203 	bic.w	r2, r3, #3
 800ba82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	4313      	orrs	r3, r2
 800ba8a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800ba8c:	bf00      	nop
 800ba8e:	370c      	adds	r7, #12
 800ba90:	46bd      	mov	sp, r7
 800ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba96:	4770      	bx	lr

0800ba98 <LL_RCC_SetSMPSPrescaler>:
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b083      	sub	sp, #12
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800baa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800baa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800baa6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800baaa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	4313      	orrs	r3, r2
 800bab2:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800bab4:	bf00      	nop
 800bab6:	370c      	adds	r7, #12
 800bab8:	46bd      	mov	sp, r7
 800baba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babe:	4770      	bx	lr

0800bac0 <LL_RCC_SetUSARTClockSource>:
{
 800bac0:	b480      	push	{r7}
 800bac2:	b083      	sub	sp, #12
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800bac8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bacc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bad0:	f023 0203 	bic.w	r2, r3, #3
 800bad4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	4313      	orrs	r3, r2
 800badc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bae0:	bf00      	nop
 800bae2:	370c      	adds	r7, #12
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr

0800baec <LL_RCC_SetLPUARTClockSource>:
{
 800baec:	b480      	push	{r7}
 800baee:	b083      	sub	sp, #12
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800baf4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800baf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bafc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800bb00:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	4313      	orrs	r3, r2
 800bb08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bb0c:	bf00      	nop
 800bb0e:	370c      	adds	r7, #12
 800bb10:	46bd      	mov	sp, r7
 800bb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb16:	4770      	bx	lr

0800bb18 <LL_RCC_SetI2CClockSource>:
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b083      	sub	sp, #12
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800bb20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb24:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	091b      	lsrs	r3, r3, #4
 800bb2c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800bb30:	43db      	mvns	r3, r3
 800bb32:	401a      	ands	r2, r3
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	011b      	lsls	r3, r3, #4
 800bb38:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800bb3c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb40:	4313      	orrs	r3, r2
 800bb42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bb46:	bf00      	nop
 800bb48:	370c      	adds	r7, #12
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb50:	4770      	bx	lr

0800bb52 <LL_RCC_SetLPTIMClockSource>:
{
 800bb52:	b480      	push	{r7}
 800bb54:	b083      	sub	sp, #12
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800bb5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb5e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	0c1b      	lsrs	r3, r3, #16
 800bb66:	041b      	lsls	r3, r3, #16
 800bb68:	43db      	mvns	r3, r3
 800bb6a:	401a      	ands	r2, r3
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	041b      	lsls	r3, r3, #16
 800bb70:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb74:	4313      	orrs	r3, r2
 800bb76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bb7a:	bf00      	nop
 800bb7c:	370c      	adds	r7, #12
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb84:	4770      	bx	lr

0800bb86 <LL_RCC_SetSAIClockSource>:
{
 800bb86:	b480      	push	{r7}
 800bb88:	b083      	sub	sp, #12
 800bb8a:	af00      	add	r7, sp, #0
 800bb8c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800bb8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bb92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bb96:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800bb9a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	4313      	orrs	r3, r2
 800bba2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bba6:	bf00      	nop
 800bba8:	370c      	adds	r7, #12
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb0:	4770      	bx	lr

0800bbb2 <LL_RCC_SetRNGClockSource>:
{
 800bbb2:	b480      	push	{r7}
 800bbb4:	b083      	sub	sp, #12
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800bbba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bbc2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800bbc6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	4313      	orrs	r3, r2
 800bbce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bbd2:	bf00      	nop
 800bbd4:	370c      	adds	r7, #12
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbdc:	4770      	bx	lr

0800bbde <LL_RCC_SetCLK48ClockSource>:
{
 800bbde:	b480      	push	{r7}
 800bbe0:	b083      	sub	sp, #12
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800bbe6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bbea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bbee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800bbf2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	4313      	orrs	r3, r2
 800bbfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bbfe:	bf00      	nop
 800bc00:	370c      	adds	r7, #12
 800bc02:	46bd      	mov	sp, r7
 800bc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc08:	4770      	bx	lr

0800bc0a <LL_RCC_SetUSBClockSource>:
{
 800bc0a:	b580      	push	{r7, lr}
 800bc0c:	b082      	sub	sp, #8
 800bc0e:	af00      	add	r7, sp, #0
 800bc10:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800bc12:	6878      	ldr	r0, [r7, #4]
 800bc14:	f7ff ffe3 	bl	800bbde <LL_RCC_SetCLK48ClockSource>
}
 800bc18:	bf00      	nop
 800bc1a:	3708      	adds	r7, #8
 800bc1c:	46bd      	mov	sp, r7
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <LL_RCC_SetADCClockSource>:
{
 800bc20:	b480      	push	{r7}
 800bc22:	b083      	sub	sp, #12
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800bc28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc30:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800bc34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800bc40:	bf00      	nop
 800bc42:	370c      	adds	r7, #12
 800bc44:	46bd      	mov	sp, r7
 800bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4a:	4770      	bx	lr

0800bc4c <LL_RCC_SetRTCClockSource>:
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	b083      	sub	sp, #12
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800bc54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bc60:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	4313      	orrs	r3, r2
 800bc68:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800bc6c:	bf00      	nop
 800bc6e:	370c      	adds	r7, #12
 800bc70:	46bd      	mov	sp, r7
 800bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc76:	4770      	bx	lr

0800bc78 <LL_RCC_GetRTCClockSource>:
{
 800bc78:	b480      	push	{r7}
 800bc7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800bc7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800bc88:	4618      	mov	r0, r3
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc90:	4770      	bx	lr

0800bc92 <LL_RCC_ForceBackupDomainReset>:
{
 800bc92:	b480      	push	{r7}
 800bc94:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800bc96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bca2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bca6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800bcaa:	bf00      	nop
 800bcac:	46bd      	mov	sp, r7
 800bcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb2:	4770      	bx	lr

0800bcb4 <LL_RCC_ReleaseBackupDomainReset>:
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800bcb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bcc0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bcc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bcc8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800bccc:	bf00      	nop
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd4:	4770      	bx	lr

0800bcd6 <LL_RCC_PLLSAI1_Enable>:
{
 800bcd6:	b480      	push	{r7}
 800bcd8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800bcda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bce4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800bce8:	6013      	str	r3, [r2, #0]
}
 800bcea:	bf00      	nop
 800bcec:	46bd      	mov	sp, r7
 800bcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf2:	4770      	bx	lr

0800bcf4 <LL_RCC_PLLSAI1_Disable>:
{
 800bcf4:	b480      	push	{r7}
 800bcf6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800bcf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bd02:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800bd06:	6013      	str	r3, [r2, #0]
}
 800bd08:	bf00      	nop
 800bd0a:	46bd      	mov	sp, r7
 800bd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd10:	4770      	bx	lr

0800bd12 <LL_RCC_PLLSAI1_IsReady>:
{
 800bd12:	b480      	push	{r7}
 800bd14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800bd16:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800bd20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bd24:	d101      	bne.n	800bd2a <LL_RCC_PLLSAI1_IsReady+0x18>
 800bd26:	2301      	movs	r3, #1
 800bd28:	e000      	b.n	800bd2c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800bd2a:	2300      	movs	r3, #0
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd34:	4770      	bx	lr

0800bd36 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bd36:	b580      	push	{r7, lr}
 800bd38:	b088      	sub	sp, #32
 800bd3a:	af00      	add	r7, sp, #0
 800bd3c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800bd3e:	2300      	movs	r3, #0
 800bd40:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800bd42:	2300      	movs	r3, #0
 800bd44:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d034      	beq.n	800bdbc <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd56:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800bd5a:	d021      	beq.n	800bda0 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800bd5c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800bd60:	d81b      	bhi.n	800bd9a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800bd62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bd66:	d01d      	beq.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800bd68:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bd6c:	d815      	bhi.n	800bd9a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d00b      	beq.n	800bd8a <HAL_RCCEx_PeriphCLKConfig+0x54>
 800bd72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bd76:	d110      	bne.n	800bd9a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800bd78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd7c:	68db      	ldr	r3, [r3, #12]
 800bd7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bd82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bd86:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800bd88:	e00d      	b.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	3304      	adds	r3, #4
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f000 f947 	bl	800c022 <RCCEx_PLLSAI1_ConfigNP>
 800bd94:	4603      	mov	r3, r0
 800bd96:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800bd98:	e005      	b.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800bd9a:	2301      	movs	r3, #1
 800bd9c:	77fb      	strb	r3, [r7, #31]
        break;
 800bd9e:	e002      	b.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800bda0:	bf00      	nop
 800bda2:	e000      	b.n	800bda6 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800bda4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bda6:	7ffb      	ldrb	r3, [r7, #31]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d105      	bne.n	800bdb8 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f7ff fee8 	bl	800bb86 <LL_RCC_SetSAIClockSource>
 800bdb6:	e001      	b.n	800bdbc <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdb8:	7ffb      	ldrb	r3, [r7, #31]
 800bdba:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d046      	beq.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800bdc8:	f7ff ff56 	bl	800bc78 <LL_RCC_GetRTCClockSource>
 800bdcc:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdd2:	69ba      	ldr	r2, [r7, #24]
 800bdd4:	429a      	cmp	r2, r3
 800bdd6:	d03c      	beq.n	800be52 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800bdd8:	f7fe fc58 	bl	800a68c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800bddc:	69bb      	ldr	r3, [r7, #24]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d105      	bne.n	800bdee <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bde6:	4618      	mov	r0, r3
 800bde8:	f7ff ff30 	bl	800bc4c <LL_RCC_SetRTCClockSource>
 800bdec:	e02e      	b.n	800be4c <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800bdee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bdf6:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800bdf8:	f7ff ff4b 	bl	800bc92 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800bdfc:	f7ff ff5a 	bl	800bcb4 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be0a:	4313      	orrs	r3, r2
 800be0c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800be0e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800be18:	f7ff fdf0 	bl	800b9fc <LL_RCC_LSE_IsEnabled>
 800be1c:	4603      	mov	r3, r0
 800be1e:	2b01      	cmp	r3, #1
 800be20:	d114      	bne.n	800be4c <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800be22:	f7f9 fab3 	bl	800538c <HAL_GetTick>
 800be26:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800be28:	e00b      	b.n	800be42 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800be2a:	f7f9 faaf 	bl	800538c <HAL_GetTick>
 800be2e:	4602      	mov	r2, r0
 800be30:	693b      	ldr	r3, [r7, #16]
 800be32:	1ad3      	subs	r3, r2, r3
 800be34:	f241 3288 	movw	r2, #5000	@ 0x1388
 800be38:	4293      	cmp	r3, r2
 800be3a:	d902      	bls.n	800be42 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800be3c:	2303      	movs	r3, #3
 800be3e:	77fb      	strb	r3, [r7, #31]
              break;
 800be40:	e004      	b.n	800be4c <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800be42:	f7ff fded 	bl	800ba20 <LL_RCC_LSE_IsReady>
 800be46:	4603      	mov	r3, r0
 800be48:	2b01      	cmp	r3, #1
 800be4a:	d1ee      	bne.n	800be2a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800be4c:	7ffb      	ldrb	r3, [r7, #31]
 800be4e:	77bb      	strb	r3, [r7, #30]
 800be50:	e001      	b.n	800be56 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be52:	7ffb      	ldrb	r3, [r7, #31]
 800be54:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f003 0301 	and.w	r3, r3, #1
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d004      	beq.n	800be6c <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	699b      	ldr	r3, [r3, #24]
 800be66:	4618      	mov	r0, r3
 800be68:	f7ff fe2a 	bl	800bac0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f003 0302 	and.w	r3, r3, #2
 800be74:	2b00      	cmp	r3, #0
 800be76:	d004      	beq.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	69db      	ldr	r3, [r3, #28]
 800be7c:	4618      	mov	r0, r3
 800be7e:	f7ff fe35 	bl	800baec <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	f003 0310 	and.w	r3, r3, #16
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d004      	beq.n	800be98 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be92:	4618      	mov	r0, r3
 800be94:	f7ff fe5d 	bl	800bb52 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f003 0320 	and.w	r3, r3, #32
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d004      	beq.n	800beae <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bea8:	4618      	mov	r0, r3
 800beaa:	f7ff fe52 	bl	800bb52 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f003 0304 	and.w	r3, r3, #4
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d004      	beq.n	800bec4 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	6a1b      	ldr	r3, [r3, #32]
 800bebe:	4618      	mov	r0, r3
 800bec0:	f7ff fe2a 	bl	800bb18 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f003 0308 	and.w	r3, r3, #8
 800becc:	2b00      	cmp	r3, #0
 800bece:	d004      	beq.n	800beda <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bed4:	4618      	mov	r0, r3
 800bed6:	f7ff fe1f 	bl	800bb18 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d022      	beq.n	800bf2c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800beea:	4618      	mov	r0, r3
 800beec:	f7ff fe8d 	bl	800bc0a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bef4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800bef8:	d107      	bne.n	800bf0a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800befa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800befe:	68db      	ldr	r3, [r3, #12]
 800bf00:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bf04:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bf08:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf0e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bf12:	d10b      	bne.n	800bf2c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	3304      	adds	r3, #4
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f000 f8dd 	bl	800c0d8 <RCCEx_PLLSAI1_ConfigNQ>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800bf22:	7ffb      	ldrb	r3, [r7, #31]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d001      	beq.n	800bf2c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800bf28:	7ffb      	ldrb	r3, [r7, #31]
 800bf2a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d02b      	beq.n	800bf90 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bf40:	d008      	beq.n	800bf54 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bf4a:	d003      	beq.n	800bf54 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d105      	bne.n	800bf60 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f7ff fe2a 	bl	800bbb2 <LL_RCC_SetRNGClockSource>
 800bf5e:	e00a      	b.n	800bf76 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bf68:	60fb      	str	r3, [r7, #12]
 800bf6a:	2000      	movs	r0, #0
 800bf6c:	f7ff fe21 	bl	800bbb2 <LL_RCC_SetRNGClockSource>
 800bf70:	68f8      	ldr	r0, [r7, #12]
 800bf72:	f7ff fe34 	bl	800bbde <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf7a:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800bf7e:	d107      	bne.n	800bf90 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800bf80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bf84:	68db      	ldr	r3, [r3, #12]
 800bf86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bf8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bf8e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d022      	beq.n	800bfe2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f7ff fe3d 	bl	800bc20 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bfae:	d107      	bne.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bfb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bfb4:	68db      	ldr	r3, [r3, #12]
 800bfb6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bfba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bfbe:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bfc8:	d10b      	bne.n	800bfe2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	3304      	adds	r3, #4
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f000 f8dd 	bl	800c18e <RCCEx_PLLSAI1_ConfigNR>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800bfd8:	7ffb      	ldrb	r3, [r7, #31]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d001      	beq.n	800bfe2 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800bfde:	7ffb      	ldrb	r3, [r7, #31]
 800bfe0:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d004      	beq.n	800bff8 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bff2:	4618      	mov	r0, r3
 800bff4:	f7ff fd26 	bl	800ba44 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c000:	2b00      	cmp	r3, #0
 800c002:	d009      	beq.n	800c018 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c008:	4618      	mov	r0, r3
 800c00a:	f7ff fd45 	bl	800ba98 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c012:	4618      	mov	r0, r3
 800c014:	f7ff fd2c 	bl	800ba70 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800c018:	7fbb      	ldrb	r3, [r7, #30]
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3720      	adds	r7, #32
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}

0800c022 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800c022:	b580      	push	{r7, lr}
 800c024:	b084      	sub	sp, #16
 800c026:	af00      	add	r7, sp, #0
 800c028:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c02a:	2300      	movs	r3, #0
 800c02c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c02e:	f7ff fe61 	bl	800bcf4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c032:	f7f9 f9ab 	bl	800538c <HAL_GetTick>
 800c036:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c038:	e009      	b.n	800c04e <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c03a:	f7f9 f9a7 	bl	800538c <HAL_GetTick>
 800c03e:	4602      	mov	r2, r0
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	1ad3      	subs	r3, r2, r3
 800c044:	2b02      	cmp	r3, #2
 800c046:	d902      	bls.n	800c04e <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800c048:	2303      	movs	r3, #3
 800c04a:	73fb      	strb	r3, [r7, #15]
      break;
 800c04c:	e004      	b.n	800c058 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c04e:	f7ff fe60 	bl	800bd12 <LL_RCC_PLLSAI1_IsReady>
 800c052:	4603      	mov	r3, r0
 800c054:	2b00      	cmp	r3, #0
 800c056:	d1f0      	bne.n	800c03a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800c058:	7bfb      	ldrb	r3, [r7, #15]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d137      	bne.n	800c0ce <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800c05e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c062:	691b      	ldr	r3, [r3, #16]
 800c064:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	021b      	lsls	r3, r3, #8
 800c06e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c072:	4313      	orrs	r3, r2
 800c074:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800c076:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c07a:	691b      	ldr	r3, [r3, #16]
 800c07c:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	685b      	ldr	r3, [r3, #4]
 800c084:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c088:	4313      	orrs	r3, r2
 800c08a:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800c08c:	f7ff fe23 	bl	800bcd6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c090:	f7f9 f97c 	bl	800538c <HAL_GetTick>
 800c094:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c096:	e009      	b.n	800c0ac <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c098:	f7f9 f978 	bl	800538c <HAL_GetTick>
 800c09c:	4602      	mov	r2, r0
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	1ad3      	subs	r3, r2, r3
 800c0a2:	2b02      	cmp	r3, #2
 800c0a4:	d902      	bls.n	800c0ac <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800c0a6:	2303      	movs	r3, #3
 800c0a8:	73fb      	strb	r3, [r7, #15]
        break;
 800c0aa:	e004      	b.n	800c0b6 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c0ac:	f7ff fe31 	bl	800bd12 <LL_RCC_PLLSAI1_IsReady>
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	2b01      	cmp	r3, #1
 800c0b4:	d1f0      	bne.n	800c098 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800c0b6:	7bfb      	ldrb	r3, [r7, #15]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d108      	bne.n	800c0ce <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800c0bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c0c0:	691a      	ldr	r2, [r3, #16]
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	691b      	ldr	r3, [r3, #16]
 800c0c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c0ca:	4313      	orrs	r3, r2
 800c0cc:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800c0ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	3710      	adds	r7, #16
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}

0800c0d8 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b084      	sub	sp, #16
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c0e4:	f7ff fe06 	bl	800bcf4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c0e8:	f7f9 f950 	bl	800538c <HAL_GetTick>
 800c0ec:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c0ee:	e009      	b.n	800c104 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c0f0:	f7f9 f94c 	bl	800538c <HAL_GetTick>
 800c0f4:	4602      	mov	r2, r0
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	1ad3      	subs	r3, r2, r3
 800c0fa:	2b02      	cmp	r3, #2
 800c0fc:	d902      	bls.n	800c104 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800c0fe:	2303      	movs	r3, #3
 800c100:	73fb      	strb	r3, [r7, #15]
      break;
 800c102:	e004      	b.n	800c10e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c104:	f7ff fe05 	bl	800bd12 <LL_RCC_PLLSAI1_IsReady>
 800c108:	4603      	mov	r3, r0
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d1f0      	bne.n	800c0f0 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800c10e:	7bfb      	ldrb	r3, [r7, #15]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d137      	bne.n	800c184 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800c114:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c118:	691b      	ldr	r3, [r3, #16]
 800c11a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	021b      	lsls	r3, r3, #8
 800c124:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c128:	4313      	orrs	r3, r2
 800c12a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800c12c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c130:	691b      	ldr	r3, [r3, #16]
 800c132:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	689b      	ldr	r3, [r3, #8]
 800c13a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c13e:	4313      	orrs	r3, r2
 800c140:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800c142:	f7ff fdc8 	bl	800bcd6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c146:	f7f9 f921 	bl	800538c <HAL_GetTick>
 800c14a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c14c:	e009      	b.n	800c162 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c14e:	f7f9 f91d 	bl	800538c <HAL_GetTick>
 800c152:	4602      	mov	r2, r0
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	1ad3      	subs	r3, r2, r3
 800c158:	2b02      	cmp	r3, #2
 800c15a:	d902      	bls.n	800c162 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800c15c:	2303      	movs	r3, #3
 800c15e:	73fb      	strb	r3, [r7, #15]
        break;
 800c160:	e004      	b.n	800c16c <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c162:	f7ff fdd6 	bl	800bd12 <LL_RCC_PLLSAI1_IsReady>
 800c166:	4603      	mov	r3, r0
 800c168:	2b01      	cmp	r3, #1
 800c16a:	d1f0      	bne.n	800c14e <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800c16c:	7bfb      	ldrb	r3, [r7, #15]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d108      	bne.n	800c184 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800c172:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c176:	691a      	ldr	r2, [r3, #16]
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	691b      	ldr	r3, [r3, #16]
 800c17c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c180:	4313      	orrs	r3, r2
 800c182:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800c184:	7bfb      	ldrb	r3, [r7, #15]
}
 800c186:	4618      	mov	r0, r3
 800c188:	3710      	adds	r7, #16
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}

0800c18e <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800c18e:	b580      	push	{r7, lr}
 800c190:	b084      	sub	sp, #16
 800c192:	af00      	add	r7, sp, #0
 800c194:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c196:	2300      	movs	r3, #0
 800c198:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800c19a:	f7ff fdab 	bl	800bcf4 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800c19e:	f7f9 f8f5 	bl	800538c <HAL_GetTick>
 800c1a2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c1a4:	e009      	b.n	800c1ba <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c1a6:	f7f9 f8f1 	bl	800538c <HAL_GetTick>
 800c1aa:	4602      	mov	r2, r0
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	1ad3      	subs	r3, r2, r3
 800c1b0:	2b02      	cmp	r3, #2
 800c1b2:	d902      	bls.n	800c1ba <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800c1b4:	2303      	movs	r3, #3
 800c1b6:	73fb      	strb	r3, [r7, #15]
      break;
 800c1b8:	e004      	b.n	800c1c4 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800c1ba:	f7ff fdaa 	bl	800bd12 <LL_RCC_PLLSAI1_IsReady>
 800c1be:	4603      	mov	r3, r0
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d1f0      	bne.n	800c1a6 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800c1c4:	7bfb      	ldrb	r3, [r7, #15]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d137      	bne.n	800c23a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800c1ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c1ce:	691b      	ldr	r3, [r3, #16]
 800c1d0:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	021b      	lsls	r3, r3, #8
 800c1da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c1de:	4313      	orrs	r3, r2
 800c1e0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800c1e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c1e6:	691b      	ldr	r3, [r3, #16]
 800c1e8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	68db      	ldr	r3, [r3, #12]
 800c1f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c1f4:	4313      	orrs	r3, r2
 800c1f6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800c1f8:	f7ff fd6d 	bl	800bcd6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c1fc:	f7f9 f8c6 	bl	800538c <HAL_GetTick>
 800c200:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c202:	e009      	b.n	800c218 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c204:	f7f9 f8c2 	bl	800538c <HAL_GetTick>
 800c208:	4602      	mov	r2, r0
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	1ad3      	subs	r3, r2, r3
 800c20e:	2b02      	cmp	r3, #2
 800c210:	d902      	bls.n	800c218 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800c212:	2303      	movs	r3, #3
 800c214:	73fb      	strb	r3, [r7, #15]
        break;
 800c216:	e004      	b.n	800c222 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800c218:	f7ff fd7b 	bl	800bd12 <LL_RCC_PLLSAI1_IsReady>
 800c21c:	4603      	mov	r3, r0
 800c21e:	2b01      	cmp	r3, #1
 800c220:	d1f0      	bne.n	800c204 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800c222:	7bfb      	ldrb	r3, [r7, #15]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d108      	bne.n	800c23a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800c228:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800c22c:	691a      	ldr	r2, [r3, #16]
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	691b      	ldr	r3, [r3, #16]
 800c232:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800c236:	4313      	orrs	r3, r2
 800c238:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800c23a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3710      	adds	r7, #16
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}

0800c244 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b082      	sub	sp, #8
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d101      	bne.n	800c256 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c252:	2301      	movs	r3, #1
 800c254:	e049      	b.n	800c2ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c25c:	b2db      	uxtb	r3, r3
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d106      	bne.n	800c270 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	2200      	movs	r2, #0
 800c266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f7f8 fcc4 	bl	8004bf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2202      	movs	r2, #2
 800c274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681a      	ldr	r2, [r3, #0]
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	3304      	adds	r3, #4
 800c280:	4619      	mov	r1, r3
 800c282:	4610      	mov	r0, r2
 800c284:	f000 fa7c 	bl	800c780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	2201      	movs	r2, #1
 800c28c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2201      	movs	r2, #1
 800c294:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2201      	movs	r2, #1
 800c29c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2201      	movs	r2, #1
 800c2ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	2201      	movs	r2, #1
 800c2b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	2201      	movs	r2, #1
 800c2c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2201      	movs	r2, #1
 800c2d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	2201      	movs	r2, #1
 800c2dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2201      	movs	r2, #1
 800c2e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c2e8:	2300      	movs	r3, #0
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3708      	adds	r7, #8
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
	...

0800c2f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b085      	sub	sp, #20
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c302:	b2db      	uxtb	r3, r3
 800c304:	2b01      	cmp	r3, #1
 800c306:	d001      	beq.n	800c30c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c308:	2301      	movs	r3, #1
 800c30a:	e036      	b.n	800c37a <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2202      	movs	r2, #2
 800c310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	68da      	ldr	r2, [r3, #12]
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f042 0201 	orr.w	r2, r2, #1
 800c322:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	4a17      	ldr	r2, [pc, #92]	@ (800c388 <HAL_TIM_Base_Start_IT+0x94>)
 800c32a:	4293      	cmp	r3, r2
 800c32c:	d004      	beq.n	800c338 <HAL_TIM_Base_Start_IT+0x44>
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c336:	d115      	bne.n	800c364 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	689a      	ldr	r2, [r3, #8]
 800c33e:	4b13      	ldr	r3, [pc, #76]	@ (800c38c <HAL_TIM_Base_Start_IT+0x98>)
 800c340:	4013      	ands	r3, r2
 800c342:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	2b06      	cmp	r3, #6
 800c348:	d015      	beq.n	800c376 <HAL_TIM_Base_Start_IT+0x82>
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c350:	d011      	beq.n	800c376 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	681a      	ldr	r2, [r3, #0]
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	f042 0201 	orr.w	r2, r2, #1
 800c360:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c362:	e008      	b.n	800c376 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	681a      	ldr	r2, [r3, #0]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f042 0201 	orr.w	r2, r2, #1
 800c372:	601a      	str	r2, [r3, #0]
 800c374:	e000      	b.n	800c378 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c376:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c378:	2300      	movs	r3, #0
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3714      	adds	r7, #20
 800c37e:	46bd      	mov	sp, r7
 800c380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c384:	4770      	bx	lr
 800c386:	bf00      	nop
 800c388:	40012c00 	.word	0x40012c00
 800c38c:	00010007 	.word	0x00010007

0800c390 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b084      	sub	sp, #16
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	68db      	ldr	r3, [r3, #12]
 800c39e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	691b      	ldr	r3, [r3, #16]
 800c3a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	f003 0302 	and.w	r3, r3, #2
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d020      	beq.n	800c3f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	f003 0302 	and.w	r3, r3, #2
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d01b      	beq.n	800c3f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f06f 0202 	mvn.w	r2, #2
 800c3c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2201      	movs	r2, #1
 800c3ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	699b      	ldr	r3, [r3, #24]
 800c3d2:	f003 0303 	and.w	r3, r3, #3
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d003      	beq.n	800c3e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c3da:	6878      	ldr	r0, [r7, #4]
 800c3dc:	f000 f9b2 	bl	800c744 <HAL_TIM_IC_CaptureCallback>
 800c3e0:	e005      	b.n	800c3ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c3e2:	6878      	ldr	r0, [r7, #4]
 800c3e4:	f000 f9a4 	bl	800c730 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f000 f9b5 	bl	800c758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	f003 0304 	and.w	r3, r3, #4
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d020      	beq.n	800c440 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	f003 0304 	and.w	r3, r3, #4
 800c404:	2b00      	cmp	r3, #0
 800c406:	d01b      	beq.n	800c440 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f06f 0204 	mvn.w	r2, #4
 800c410:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	2202      	movs	r2, #2
 800c416:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	699b      	ldr	r3, [r3, #24]
 800c41e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c422:	2b00      	cmp	r3, #0
 800c424:	d003      	beq.n	800c42e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f000 f98c 	bl	800c744 <HAL_TIM_IC_CaptureCallback>
 800c42c:	e005      	b.n	800c43a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f000 f97e 	bl	800c730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f000 f98f 	bl	800c758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2200      	movs	r2, #0
 800c43e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	f003 0308 	and.w	r3, r3, #8
 800c446:	2b00      	cmp	r3, #0
 800c448:	d020      	beq.n	800c48c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	f003 0308 	and.w	r3, r3, #8
 800c450:	2b00      	cmp	r3, #0
 800c452:	d01b      	beq.n	800c48c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f06f 0208 	mvn.w	r2, #8
 800c45c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2204      	movs	r2, #4
 800c462:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	69db      	ldr	r3, [r3, #28]
 800c46a:	f003 0303 	and.w	r3, r3, #3
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d003      	beq.n	800c47a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f000 f966 	bl	800c744 <HAL_TIM_IC_CaptureCallback>
 800c478:	e005      	b.n	800c486 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f000 f958 	bl	800c730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f000 f969 	bl	800c758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2200      	movs	r2, #0
 800c48a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	f003 0310 	and.w	r3, r3, #16
 800c492:	2b00      	cmp	r3, #0
 800c494:	d020      	beq.n	800c4d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	f003 0310 	and.w	r3, r3, #16
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d01b      	beq.n	800c4d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	f06f 0210 	mvn.w	r2, #16
 800c4a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2208      	movs	r2, #8
 800c4ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	69db      	ldr	r3, [r3, #28]
 800c4b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d003      	beq.n	800c4c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	f000 f940 	bl	800c744 <HAL_TIM_IC_CaptureCallback>
 800c4c4:	e005      	b.n	800c4d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f000 f932 	bl	800c730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f000 f943 	bl	800c758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	f003 0301 	and.w	r3, r3, #1
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d00c      	beq.n	800c4fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	f003 0301 	and.w	r3, r3, #1
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d007      	beq.n	800c4fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f06f 0201 	mvn.w	r2, #1
 800c4f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f7f7 ff48 	bl	800438c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c502:	2b00      	cmp	r3, #0
 800c504:	d104      	bne.n	800c510 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d00c      	beq.n	800c52a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c516:	2b00      	cmp	r3, #0
 800c518:	d007      	beq.n	800c52a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c524:	6878      	ldr	r0, [r7, #4]
 800c526:	f000 faa1 	bl	800ca6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c530:	2b00      	cmp	r3, #0
 800c532:	d00c      	beq.n	800c54e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d007      	beq.n	800c54e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c548:	6878      	ldr	r0, [r7, #4]
 800c54a:	f000 fa99 	bl	800ca80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c554:	2b00      	cmp	r3, #0
 800c556:	d00c      	beq.n	800c572 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d007      	beq.n	800c572 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c56a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f000 f8fd 	bl	800c76c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	f003 0320 	and.w	r3, r3, #32
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d00c      	beq.n	800c596 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	f003 0320 	and.w	r3, r3, #32
 800c582:	2b00      	cmp	r3, #0
 800c584:	d007      	beq.n	800c596 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f06f 0220 	mvn.w	r2, #32
 800c58e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f000 fa61 	bl	800ca58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c596:	bf00      	nop
 800c598:	3710      	adds	r7, #16
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}

0800c59e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c59e:	b580      	push	{r7, lr}
 800c5a0:	b084      	sub	sp, #16
 800c5a2:	af00      	add	r7, sp, #0
 800c5a4:	6078      	str	r0, [r7, #4]
 800c5a6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c5b2:	2b01      	cmp	r3, #1
 800c5b4:	d101      	bne.n	800c5ba <HAL_TIM_ConfigClockSource+0x1c>
 800c5b6:	2302      	movs	r3, #2
 800c5b8:	e0b6      	b.n	800c728 <HAL_TIM_ConfigClockSource+0x18a>
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2201      	movs	r2, #1
 800c5be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2202      	movs	r2, #2
 800c5c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	689b      	ldr	r3, [r3, #8]
 800c5d0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800c5d8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800c5dc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c5e4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	68ba      	ldr	r2, [r7, #8]
 800c5ec:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c5f6:	d03e      	beq.n	800c676 <HAL_TIM_ConfigClockSource+0xd8>
 800c5f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c5fc:	f200 8087 	bhi.w	800c70e <HAL_TIM_ConfigClockSource+0x170>
 800c600:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c604:	f000 8086 	beq.w	800c714 <HAL_TIM_ConfigClockSource+0x176>
 800c608:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c60c:	d87f      	bhi.n	800c70e <HAL_TIM_ConfigClockSource+0x170>
 800c60e:	2b70      	cmp	r3, #112	@ 0x70
 800c610:	d01a      	beq.n	800c648 <HAL_TIM_ConfigClockSource+0xaa>
 800c612:	2b70      	cmp	r3, #112	@ 0x70
 800c614:	d87b      	bhi.n	800c70e <HAL_TIM_ConfigClockSource+0x170>
 800c616:	2b60      	cmp	r3, #96	@ 0x60
 800c618:	d050      	beq.n	800c6bc <HAL_TIM_ConfigClockSource+0x11e>
 800c61a:	2b60      	cmp	r3, #96	@ 0x60
 800c61c:	d877      	bhi.n	800c70e <HAL_TIM_ConfigClockSource+0x170>
 800c61e:	2b50      	cmp	r3, #80	@ 0x50
 800c620:	d03c      	beq.n	800c69c <HAL_TIM_ConfigClockSource+0xfe>
 800c622:	2b50      	cmp	r3, #80	@ 0x50
 800c624:	d873      	bhi.n	800c70e <HAL_TIM_ConfigClockSource+0x170>
 800c626:	2b40      	cmp	r3, #64	@ 0x40
 800c628:	d058      	beq.n	800c6dc <HAL_TIM_ConfigClockSource+0x13e>
 800c62a:	2b40      	cmp	r3, #64	@ 0x40
 800c62c:	d86f      	bhi.n	800c70e <HAL_TIM_ConfigClockSource+0x170>
 800c62e:	2b30      	cmp	r3, #48	@ 0x30
 800c630:	d064      	beq.n	800c6fc <HAL_TIM_ConfigClockSource+0x15e>
 800c632:	2b30      	cmp	r3, #48	@ 0x30
 800c634:	d86b      	bhi.n	800c70e <HAL_TIM_ConfigClockSource+0x170>
 800c636:	2b20      	cmp	r3, #32
 800c638:	d060      	beq.n	800c6fc <HAL_TIM_ConfigClockSource+0x15e>
 800c63a:	2b20      	cmp	r3, #32
 800c63c:	d867      	bhi.n	800c70e <HAL_TIM_ConfigClockSource+0x170>
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d05c      	beq.n	800c6fc <HAL_TIM_ConfigClockSource+0x15e>
 800c642:	2b10      	cmp	r3, #16
 800c644:	d05a      	beq.n	800c6fc <HAL_TIM_ConfigClockSource+0x15e>
 800c646:	e062      	b.n	800c70e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c658:	f000 f97e 	bl	800c958 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	689b      	ldr	r3, [r3, #8]
 800c662:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c66a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	68ba      	ldr	r2, [r7, #8]
 800c672:	609a      	str	r2, [r3, #8]
      break;
 800c674:	e04f      	b.n	800c716 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c686:	f000 f967 	bl	800c958 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	689a      	ldr	r2, [r3, #8]
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c698:	609a      	str	r2, [r3, #8]
      break;
 800c69a:	e03c      	b.n	800c716 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c6a4:	683b      	ldr	r3, [r7, #0]
 800c6a6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c6a8:	461a      	mov	r2, r3
 800c6aa:	f000 f8d9 	bl	800c860 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	2150      	movs	r1, #80	@ 0x50
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f000 f932 	bl	800c91e <TIM_ITRx_SetConfig>
      break;
 800c6ba:	e02c      	b.n	800c716 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c6c4:	683b      	ldr	r3, [r7, #0]
 800c6c6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c6c8:	461a      	mov	r2, r3
 800c6ca:	f000 f8f8 	bl	800c8be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	2160      	movs	r1, #96	@ 0x60
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f000 f922 	bl	800c91e <TIM_ITRx_SetConfig>
      break;
 800c6da:	e01c      	b.n	800c716 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c6e8:	461a      	mov	r2, r3
 800c6ea:	f000 f8b9 	bl	800c860 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	2140      	movs	r1, #64	@ 0x40
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f000 f912 	bl	800c91e <TIM_ITRx_SetConfig>
      break;
 800c6fa:	e00c      	b.n	800c716 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681a      	ldr	r2, [r3, #0]
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	4619      	mov	r1, r3
 800c706:	4610      	mov	r0, r2
 800c708:	f000 f909 	bl	800c91e <TIM_ITRx_SetConfig>
      break;
 800c70c:	e003      	b.n	800c716 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800c70e:	2301      	movs	r3, #1
 800c710:	73fb      	strb	r3, [r7, #15]
      break;
 800c712:	e000      	b.n	800c716 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800c714:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	2201      	movs	r2, #1
 800c71a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	2200      	movs	r2, #0
 800c722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c726:	7bfb      	ldrb	r3, [r7, #15]
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3710      	adds	r7, #16
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}

0800c730 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c730:	b480      	push	{r7}
 800c732:	b083      	sub	sp, #12
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c738:	bf00      	nop
 800c73a:	370c      	adds	r7, #12
 800c73c:	46bd      	mov	sp, r7
 800c73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c742:	4770      	bx	lr

0800c744 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c744:	b480      	push	{r7}
 800c746:	b083      	sub	sp, #12
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c74c:	bf00      	nop
 800c74e:	370c      	adds	r7, #12
 800c750:	46bd      	mov	sp, r7
 800c752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c756:	4770      	bx	lr

0800c758 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c758:	b480      	push	{r7}
 800c75a:	b083      	sub	sp, #12
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c760:	bf00      	nop
 800c762:	370c      	adds	r7, #12
 800c764:	46bd      	mov	sp, r7
 800c766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76a:	4770      	bx	lr

0800c76c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c76c:	b480      	push	{r7}
 800c76e:	b083      	sub	sp, #12
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c774:	bf00      	nop
 800c776:	370c      	adds	r7, #12
 800c778:	46bd      	mov	sp, r7
 800c77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77e:	4770      	bx	lr

0800c780 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c780:	b480      	push	{r7}
 800c782:	b085      	sub	sp, #20
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
 800c788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	4a30      	ldr	r2, [pc, #192]	@ (800c854 <TIM_Base_SetConfig+0xd4>)
 800c794:	4293      	cmp	r3, r2
 800c796:	d003      	beq.n	800c7a0 <TIM_Base_SetConfig+0x20>
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c79e:	d108      	bne.n	800c7b2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c7a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	685b      	ldr	r3, [r3, #4]
 800c7ac:	68fa      	ldr	r2, [r7, #12]
 800c7ae:	4313      	orrs	r3, r2
 800c7b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	4a27      	ldr	r2, [pc, #156]	@ (800c854 <TIM_Base_SetConfig+0xd4>)
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d00b      	beq.n	800c7d2 <TIM_Base_SetConfig+0x52>
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c7c0:	d007      	beq.n	800c7d2 <TIM_Base_SetConfig+0x52>
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	4a24      	ldr	r2, [pc, #144]	@ (800c858 <TIM_Base_SetConfig+0xd8>)
 800c7c6:	4293      	cmp	r3, r2
 800c7c8:	d003      	beq.n	800c7d2 <TIM_Base_SetConfig+0x52>
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	4a23      	ldr	r2, [pc, #140]	@ (800c85c <TIM_Base_SetConfig+0xdc>)
 800c7ce:	4293      	cmp	r3, r2
 800c7d0:	d108      	bne.n	800c7e4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c7d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	68db      	ldr	r3, [r3, #12]
 800c7de:	68fa      	ldr	r2, [r7, #12]
 800c7e0:	4313      	orrs	r3, r2
 800c7e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	695b      	ldr	r3, [r3, #20]
 800c7ee:	4313      	orrs	r3, r2
 800c7f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	68fa      	ldr	r2, [r7, #12]
 800c7f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	689a      	ldr	r2, [r3, #8]
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	681a      	ldr	r2, [r3, #0]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	4a12      	ldr	r2, [pc, #72]	@ (800c854 <TIM_Base_SetConfig+0xd4>)
 800c80c:	4293      	cmp	r3, r2
 800c80e:	d007      	beq.n	800c820 <TIM_Base_SetConfig+0xa0>
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	4a11      	ldr	r2, [pc, #68]	@ (800c858 <TIM_Base_SetConfig+0xd8>)
 800c814:	4293      	cmp	r3, r2
 800c816:	d003      	beq.n	800c820 <TIM_Base_SetConfig+0xa0>
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	4a10      	ldr	r2, [pc, #64]	@ (800c85c <TIM_Base_SetConfig+0xdc>)
 800c81c:	4293      	cmp	r3, r2
 800c81e:	d103      	bne.n	800c828 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	691a      	ldr	r2, [r3, #16]
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2201      	movs	r2, #1
 800c82c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	691b      	ldr	r3, [r3, #16]
 800c832:	f003 0301 	and.w	r3, r3, #1
 800c836:	2b01      	cmp	r3, #1
 800c838:	d105      	bne.n	800c846 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	691b      	ldr	r3, [r3, #16]
 800c83e:	f023 0201 	bic.w	r2, r3, #1
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	611a      	str	r2, [r3, #16]
  }
}
 800c846:	bf00      	nop
 800c848:	3714      	adds	r7, #20
 800c84a:	46bd      	mov	sp, r7
 800c84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c850:	4770      	bx	lr
 800c852:	bf00      	nop
 800c854:	40012c00 	.word	0x40012c00
 800c858:	40014400 	.word	0x40014400
 800c85c:	40014800 	.word	0x40014800

0800c860 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c860:	b480      	push	{r7}
 800c862:	b087      	sub	sp, #28
 800c864:	af00      	add	r7, sp, #0
 800c866:	60f8      	str	r0, [r7, #12]
 800c868:	60b9      	str	r1, [r7, #8]
 800c86a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	6a1b      	ldr	r3, [r3, #32]
 800c870:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	6a1b      	ldr	r3, [r3, #32]
 800c876:	f023 0201 	bic.w	r2, r3, #1
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c87e:	68fb      	ldr	r3, [r7, #12]
 800c880:	699b      	ldr	r3, [r3, #24]
 800c882:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c884:	693b      	ldr	r3, [r7, #16]
 800c886:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c88a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	011b      	lsls	r3, r3, #4
 800c890:	693a      	ldr	r2, [r7, #16]
 800c892:	4313      	orrs	r3, r2
 800c894:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	f023 030a 	bic.w	r3, r3, #10
 800c89c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c89e:	697a      	ldr	r2, [r7, #20]
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	4313      	orrs	r3, r2
 800c8a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	693a      	ldr	r2, [r7, #16]
 800c8aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	697a      	ldr	r2, [r7, #20]
 800c8b0:	621a      	str	r2, [r3, #32]
}
 800c8b2:	bf00      	nop
 800c8b4:	371c      	adds	r7, #28
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8bc:	4770      	bx	lr

0800c8be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c8be:	b480      	push	{r7}
 800c8c0:	b087      	sub	sp, #28
 800c8c2:	af00      	add	r7, sp, #0
 800c8c4:	60f8      	str	r0, [r7, #12]
 800c8c6:	60b9      	str	r1, [r7, #8]
 800c8c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	6a1b      	ldr	r3, [r3, #32]
 800c8ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	6a1b      	ldr	r3, [r3, #32]
 800c8d4:	f023 0210 	bic.w	r2, r3, #16
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	699b      	ldr	r3, [r3, #24]
 800c8e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c8e2:	693b      	ldr	r3, [r7, #16]
 800c8e4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c8e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	031b      	lsls	r3, r3, #12
 800c8ee:	693a      	ldr	r2, [r7, #16]
 800c8f0:	4313      	orrs	r3, r2
 800c8f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c8fa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	011b      	lsls	r3, r3, #4
 800c900:	697a      	ldr	r2, [r7, #20]
 800c902:	4313      	orrs	r3, r2
 800c904:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c906:	68fb      	ldr	r3, [r7, #12]
 800c908:	693a      	ldr	r2, [r7, #16]
 800c90a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	697a      	ldr	r2, [r7, #20]
 800c910:	621a      	str	r2, [r3, #32]
}
 800c912:	bf00      	nop
 800c914:	371c      	adds	r7, #28
 800c916:	46bd      	mov	sp, r7
 800c918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91c:	4770      	bx	lr

0800c91e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c91e:	b480      	push	{r7}
 800c920:	b085      	sub	sp, #20
 800c922:	af00      	add	r7, sp, #0
 800c924:	6078      	str	r0, [r7, #4]
 800c926:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	689b      	ldr	r3, [r3, #8]
 800c92c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800c934:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c938:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c93a:	683a      	ldr	r2, [r7, #0]
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	4313      	orrs	r3, r2
 800c940:	f043 0307 	orr.w	r3, r3, #7
 800c944:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	68fa      	ldr	r2, [r7, #12]
 800c94a:	609a      	str	r2, [r3, #8]
}
 800c94c:	bf00      	nop
 800c94e:	3714      	adds	r7, #20
 800c950:	46bd      	mov	sp, r7
 800c952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c956:	4770      	bx	lr

0800c958 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c958:	b480      	push	{r7}
 800c95a:	b087      	sub	sp, #28
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	60f8      	str	r0, [r7, #12]
 800c960:	60b9      	str	r1, [r7, #8]
 800c962:	607a      	str	r2, [r7, #4]
 800c964:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	689b      	ldr	r3, [r3, #8]
 800c96a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c96c:	697b      	ldr	r3, [r7, #20]
 800c96e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c972:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	021a      	lsls	r2, r3, #8
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	431a      	orrs	r2, r3
 800c97c:	68bb      	ldr	r3, [r7, #8]
 800c97e:	4313      	orrs	r3, r2
 800c980:	697a      	ldr	r2, [r7, #20]
 800c982:	4313      	orrs	r3, r2
 800c984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	697a      	ldr	r2, [r7, #20]
 800c98a:	609a      	str	r2, [r3, #8]
}
 800c98c:	bf00      	nop
 800c98e:	371c      	adds	r7, #28
 800c990:	46bd      	mov	sp, r7
 800c992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c996:	4770      	bx	lr

0800c998 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c998:	b480      	push	{r7}
 800c99a:	b085      	sub	sp, #20
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c9a8:	2b01      	cmp	r3, #1
 800c9aa:	d101      	bne.n	800c9b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c9ac:	2302      	movs	r3, #2
 800c9ae:	e04a      	b.n	800ca46 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2201      	movs	r2, #1
 800c9b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2202      	movs	r2, #2
 800c9bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	685b      	ldr	r3, [r3, #4]
 800c9c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	689b      	ldr	r3, [r3, #8]
 800c9ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	4a1f      	ldr	r2, [pc, #124]	@ (800ca54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d108      	bne.n	800c9ec <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c9e0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c9e2:	683b      	ldr	r3, [r7, #0]
 800c9e4:	685b      	ldr	r3, [r3, #4]
 800c9e6:	68fa      	ldr	r2, [r7, #12]
 800c9e8:	4313      	orrs	r3, r2
 800c9ea:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c9f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	68fa      	ldr	r2, [r7, #12]
 800c9fa:	4313      	orrs	r3, r2
 800c9fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	68fa      	ldr	r2, [r7, #12]
 800ca04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	4a12      	ldr	r2, [pc, #72]	@ (800ca54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	d004      	beq.n	800ca1a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ca18:	d10c      	bne.n	800ca34 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ca20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	689b      	ldr	r3, [r3, #8]
 800ca26:	68ba      	ldr	r2, [r7, #8]
 800ca28:	4313      	orrs	r3, r2
 800ca2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	68ba      	ldr	r2, [r7, #8]
 800ca32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2201      	movs	r2, #1
 800ca38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2200      	movs	r2, #0
 800ca40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ca44:	2300      	movs	r3, #0
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	3714      	adds	r7, #20
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca50:	4770      	bx	lr
 800ca52:	bf00      	nop
 800ca54:	40012c00 	.word	0x40012c00

0800ca58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b083      	sub	sp, #12
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ca60:	bf00      	nop
 800ca62:	370c      	adds	r7, #12
 800ca64:	46bd      	mov	sp, r7
 800ca66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6a:	4770      	bx	lr

0800ca6c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b083      	sub	sp, #12
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ca74:	bf00      	nop
 800ca76:	370c      	adds	r7, #12
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7e:	4770      	bx	lr

0800ca80 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ca80:	b480      	push	{r7}
 800ca82:	b083      	sub	sp, #12
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ca88:	bf00      	nop
 800ca8a:	370c      	adds	r7, #12
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca92:	4770      	bx	lr

0800ca94 <LL_RCC_GetUSARTClockSource>:
{
 800ca94:	b480      	push	{r7}
 800ca96:	b083      	sub	sp, #12
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800ca9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800caa0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	4013      	ands	r3, r2
}
 800caa8:	4618      	mov	r0, r3
 800caaa:	370c      	adds	r7, #12
 800caac:	46bd      	mov	sp, r7
 800caae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab2:	4770      	bx	lr

0800cab4 <LL_RCC_GetLPUARTClockSource>:
{
 800cab4:	b480      	push	{r7}
 800cab6:	b083      	sub	sp, #12
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800cabc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800cac0:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	4013      	ands	r3, r2
}
 800cac8:	4618      	mov	r0, r3
 800caca:	370c      	adds	r7, #12
 800cacc:	46bd      	mov	sp, r7
 800cace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad2:	4770      	bx	lr

0800cad4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b082      	sub	sp, #8
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d101      	bne.n	800cae6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cae2:	2301      	movs	r3, #1
 800cae4:	e042      	b.n	800cb6c <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800caec:	2b00      	cmp	r3, #0
 800caee:	d106      	bne.n	800cafe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	2200      	movs	r2, #0
 800caf4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f000 f83b 	bl	800cb74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2224      	movs	r2, #36	@ 0x24
 800cb02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	681a      	ldr	r2, [r3, #0]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	f022 0201 	bic.w	r2, r2, #1
 800cb14:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d002      	beq.n	800cb24 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f000 fae8 	bl	800d0f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f000 f8bd 	bl	800cca4 <UART_SetConfig>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	2b01      	cmp	r3, #1
 800cb2e:	d101      	bne.n	800cb34 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800cb30:	2301      	movs	r3, #1
 800cb32:	e01b      	b.n	800cb6c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	685a      	ldr	r2, [r3, #4]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cb42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	689a      	ldr	r2, [r3, #8]
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cb52:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	681a      	ldr	r2, [r3, #0]
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	f042 0201 	orr.w	r2, r2, #1
 800cb62:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f000 fb67 	bl	800d238 <UART_CheckIdleState>
 800cb6a:	4603      	mov	r3, r0
}
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	3708      	adds	r7, #8
 800cb70:	46bd      	mov	sp, r7
 800cb72:	bd80      	pop	{r7, pc}

0800cb74 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800cb74:	b480      	push	{r7}
 800cb76:	b083      	sub	sp, #12
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800cb7c:	bf00      	nop
 800cb7e:	370c      	adds	r7, #12
 800cb80:	46bd      	mov	sp, r7
 800cb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb86:	4770      	bx	lr

0800cb88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b08a      	sub	sp, #40	@ 0x28
 800cb8c:	af02      	add	r7, sp, #8
 800cb8e:	60f8      	str	r0, [r7, #12]
 800cb90:	60b9      	str	r1, [r7, #8]
 800cb92:	603b      	str	r3, [r7, #0]
 800cb94:	4613      	mov	r3, r2
 800cb96:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cb9e:	2b20      	cmp	r3, #32
 800cba0:	d17b      	bne.n	800cc9a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800cba2:	68bb      	ldr	r3, [r7, #8]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d002      	beq.n	800cbae <HAL_UART_Transmit+0x26>
 800cba8:	88fb      	ldrh	r3, [r7, #6]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d101      	bne.n	800cbb2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800cbae:	2301      	movs	r3, #1
 800cbb0:	e074      	b.n	800cc9c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	2221      	movs	r2, #33	@ 0x21
 800cbbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cbc2:	f7f8 fbe3 	bl	800538c <HAL_GetTick>
 800cbc6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	88fa      	ldrh	r2, [r7, #6]
 800cbcc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	88fa      	ldrh	r2, [r7, #6]
 800cbd4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	689b      	ldr	r3, [r3, #8]
 800cbdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cbe0:	d108      	bne.n	800cbf4 <HAL_UART_Transmit+0x6c>
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	691b      	ldr	r3, [r3, #16]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d104      	bne.n	800cbf4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cbea:	2300      	movs	r3, #0
 800cbec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	61bb      	str	r3, [r7, #24]
 800cbf2:	e003      	b.n	800cbfc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cbf4:	68bb      	ldr	r3, [r7, #8]
 800cbf6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cbfc:	e030      	b.n	800cc60 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	9300      	str	r3, [sp, #0]
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	2200      	movs	r2, #0
 800cc06:	2180      	movs	r1, #128	@ 0x80
 800cc08:	68f8      	ldr	r0, [r7, #12]
 800cc0a:	f000 fbbf 	bl	800d38c <UART_WaitOnFlagUntilTimeout>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d005      	beq.n	800cc20 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	2220      	movs	r2, #32
 800cc18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800cc1c:	2303      	movs	r3, #3
 800cc1e:	e03d      	b.n	800cc9c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800cc20:	69fb      	ldr	r3, [r7, #28]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d10b      	bne.n	800cc3e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cc26:	69bb      	ldr	r3, [r7, #24]
 800cc28:	881b      	ldrh	r3, [r3, #0]
 800cc2a:	461a      	mov	r2, r3
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cc34:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800cc36:	69bb      	ldr	r3, [r7, #24]
 800cc38:	3302      	adds	r3, #2
 800cc3a:	61bb      	str	r3, [r7, #24]
 800cc3c:	e007      	b.n	800cc4e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cc3e:	69fb      	ldr	r3, [r7, #28]
 800cc40:	781a      	ldrb	r2, [r3, #0]
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800cc48:	69fb      	ldr	r3, [r7, #28]
 800cc4a:	3301      	adds	r3, #1
 800cc4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cc54:	b29b      	uxth	r3, r3
 800cc56:	3b01      	subs	r3, #1
 800cc58:	b29a      	uxth	r2, r3
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cc66:	b29b      	uxth	r3, r3
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d1c8      	bne.n	800cbfe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	9300      	str	r3, [sp, #0]
 800cc70:	697b      	ldr	r3, [r7, #20]
 800cc72:	2200      	movs	r2, #0
 800cc74:	2140      	movs	r1, #64	@ 0x40
 800cc76:	68f8      	ldr	r0, [r7, #12]
 800cc78:	f000 fb88 	bl	800d38c <UART_WaitOnFlagUntilTimeout>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d005      	beq.n	800cc8e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	2220      	movs	r2, #32
 800cc86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800cc8a:	2303      	movs	r3, #3
 800cc8c:	e006      	b.n	800cc9c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	2220      	movs	r2, #32
 800cc92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800cc96:	2300      	movs	r3, #0
 800cc98:	e000      	b.n	800cc9c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800cc9a:	2302      	movs	r3, #2
  }
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3720      	adds	r7, #32
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cca8:	b08c      	sub	sp, #48	@ 0x30
 800ccaa:	af00      	add	r7, sp, #0
 800ccac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ccae:	2300      	movs	r3, #0
 800ccb0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	689a      	ldr	r2, [r3, #8]
 800ccb8:	697b      	ldr	r3, [r7, #20]
 800ccba:	691b      	ldr	r3, [r3, #16]
 800ccbc:	431a      	orrs	r2, r3
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	695b      	ldr	r3, [r3, #20]
 800ccc2:	431a      	orrs	r2, r3
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	69db      	ldr	r3, [r3, #28]
 800ccc8:	4313      	orrs	r3, r2
 800ccca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cccc:	697b      	ldr	r3, [r7, #20]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	681a      	ldr	r2, [r3, #0]
 800ccd2:	4baf      	ldr	r3, [pc, #700]	@ (800cf90 <UART_SetConfig+0x2ec>)
 800ccd4:	4013      	ands	r3, r2
 800ccd6:	697a      	ldr	r2, [r7, #20]
 800ccd8:	6812      	ldr	r2, [r2, #0]
 800ccda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ccdc:	430b      	orrs	r3, r1
 800ccde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	685b      	ldr	r3, [r3, #4]
 800cce6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ccea:	697b      	ldr	r3, [r7, #20]
 800ccec:	68da      	ldr	r2, [r3, #12]
 800ccee:	697b      	ldr	r3, [r7, #20]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	430a      	orrs	r2, r1
 800ccf4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ccf6:	697b      	ldr	r3, [r7, #20]
 800ccf8:	699b      	ldr	r3, [r3, #24]
 800ccfa:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ccfc:	697b      	ldr	r3, [r7, #20]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	4aa4      	ldr	r2, [pc, #656]	@ (800cf94 <UART_SetConfig+0x2f0>)
 800cd02:	4293      	cmp	r3, r2
 800cd04:	d004      	beq.n	800cd10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cd06:	697b      	ldr	r3, [r7, #20]
 800cd08:	6a1b      	ldr	r3, [r3, #32]
 800cd0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd0c:	4313      	orrs	r3, r2
 800cd0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cd10:	697b      	ldr	r3, [r7, #20]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	689b      	ldr	r3, [r3, #8]
 800cd16:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800cd1a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800cd1e:	697a      	ldr	r2, [r7, #20]
 800cd20:	6812      	ldr	r2, [r2, #0]
 800cd22:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd24:	430b      	orrs	r3, r1
 800cd26:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cd28:	697b      	ldr	r3, [r7, #20]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd2e:	f023 010f 	bic.w	r1, r3, #15
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	430a      	orrs	r2, r1
 800cd3c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cd3e:	697b      	ldr	r3, [r7, #20]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	4a95      	ldr	r2, [pc, #596]	@ (800cf98 <UART_SetConfig+0x2f4>)
 800cd44:	4293      	cmp	r3, r2
 800cd46:	d125      	bne.n	800cd94 <UART_SetConfig+0xf0>
 800cd48:	2003      	movs	r0, #3
 800cd4a:	f7ff fea3 	bl	800ca94 <LL_RCC_GetUSARTClockSource>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	2b03      	cmp	r3, #3
 800cd52:	d81b      	bhi.n	800cd8c <UART_SetConfig+0xe8>
 800cd54:	a201      	add	r2, pc, #4	@ (adr r2, 800cd5c <UART_SetConfig+0xb8>)
 800cd56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd5a:	bf00      	nop
 800cd5c:	0800cd6d 	.word	0x0800cd6d
 800cd60:	0800cd7d 	.word	0x0800cd7d
 800cd64:	0800cd75 	.word	0x0800cd75
 800cd68:	0800cd85 	.word	0x0800cd85
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd72:	e042      	b.n	800cdfa <UART_SetConfig+0x156>
 800cd74:	2302      	movs	r3, #2
 800cd76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd7a:	e03e      	b.n	800cdfa <UART_SetConfig+0x156>
 800cd7c:	2304      	movs	r3, #4
 800cd7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd82:	e03a      	b.n	800cdfa <UART_SetConfig+0x156>
 800cd84:	2308      	movs	r3, #8
 800cd86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd8a:	e036      	b.n	800cdfa <UART_SetConfig+0x156>
 800cd8c:	2310      	movs	r3, #16
 800cd8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cd92:	e032      	b.n	800cdfa <UART_SetConfig+0x156>
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	4a7e      	ldr	r2, [pc, #504]	@ (800cf94 <UART_SetConfig+0x2f0>)
 800cd9a:	4293      	cmp	r3, r2
 800cd9c:	d12a      	bne.n	800cdf4 <UART_SetConfig+0x150>
 800cd9e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800cda2:	f7ff fe87 	bl	800cab4 <LL_RCC_GetLPUARTClockSource>
 800cda6:	4603      	mov	r3, r0
 800cda8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cdac:	d01a      	beq.n	800cde4 <UART_SetConfig+0x140>
 800cdae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800cdb2:	d81b      	bhi.n	800cdec <UART_SetConfig+0x148>
 800cdb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cdb8:	d00c      	beq.n	800cdd4 <UART_SetConfig+0x130>
 800cdba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cdbe:	d815      	bhi.n	800cdec <UART_SetConfig+0x148>
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d003      	beq.n	800cdcc <UART_SetConfig+0x128>
 800cdc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cdc8:	d008      	beq.n	800cddc <UART_SetConfig+0x138>
 800cdca:	e00f      	b.n	800cdec <UART_SetConfig+0x148>
 800cdcc:	2300      	movs	r3, #0
 800cdce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cdd2:	e012      	b.n	800cdfa <UART_SetConfig+0x156>
 800cdd4:	2302      	movs	r3, #2
 800cdd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cdda:	e00e      	b.n	800cdfa <UART_SetConfig+0x156>
 800cddc:	2304      	movs	r3, #4
 800cdde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cde2:	e00a      	b.n	800cdfa <UART_SetConfig+0x156>
 800cde4:	2308      	movs	r3, #8
 800cde6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cdea:	e006      	b.n	800cdfa <UART_SetConfig+0x156>
 800cdec:	2310      	movs	r3, #16
 800cdee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800cdf2:	e002      	b.n	800cdfa <UART_SetConfig+0x156>
 800cdf4:	2310      	movs	r3, #16
 800cdf6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cdfa:	697b      	ldr	r3, [r7, #20]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	4a65      	ldr	r2, [pc, #404]	@ (800cf94 <UART_SetConfig+0x2f0>)
 800ce00:	4293      	cmp	r3, r2
 800ce02:	f040 8097 	bne.w	800cf34 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ce06:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ce0a:	2b08      	cmp	r3, #8
 800ce0c:	d823      	bhi.n	800ce56 <UART_SetConfig+0x1b2>
 800ce0e:	a201      	add	r2, pc, #4	@ (adr r2, 800ce14 <UART_SetConfig+0x170>)
 800ce10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce14:	0800ce39 	.word	0x0800ce39
 800ce18:	0800ce57 	.word	0x0800ce57
 800ce1c:	0800ce41 	.word	0x0800ce41
 800ce20:	0800ce57 	.word	0x0800ce57
 800ce24:	0800ce47 	.word	0x0800ce47
 800ce28:	0800ce57 	.word	0x0800ce57
 800ce2c:	0800ce57 	.word	0x0800ce57
 800ce30:	0800ce57 	.word	0x0800ce57
 800ce34:	0800ce4f 	.word	0x0800ce4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ce38:	f7fe fd00 	bl	800b83c <HAL_RCC_GetPCLK1Freq>
 800ce3c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ce3e:	e010      	b.n	800ce62 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ce40:	4b56      	ldr	r3, [pc, #344]	@ (800cf9c <UART_SetConfig+0x2f8>)
 800ce42:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ce44:	e00d      	b.n	800ce62 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ce46:	f7fe fc79 	bl	800b73c <HAL_RCC_GetSysClockFreq>
 800ce4a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ce4c:	e009      	b.n	800ce62 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ce4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ce52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ce54:	e005      	b.n	800ce62 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800ce56:	2300      	movs	r3, #0
 800ce58:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ce60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ce62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	f000 812b 	beq.w	800d0c0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ce6a:	697b      	ldr	r3, [r7, #20]
 800ce6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce6e:	4a4c      	ldr	r2, [pc, #304]	@ (800cfa0 <UART_SetConfig+0x2fc>)
 800ce70:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ce74:	461a      	mov	r2, r3
 800ce76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce78:	fbb3 f3f2 	udiv	r3, r3, r2
 800ce7c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	685a      	ldr	r2, [r3, #4]
 800ce82:	4613      	mov	r3, r2
 800ce84:	005b      	lsls	r3, r3, #1
 800ce86:	4413      	add	r3, r2
 800ce88:	69ba      	ldr	r2, [r7, #24]
 800ce8a:	429a      	cmp	r2, r3
 800ce8c:	d305      	bcc.n	800ce9a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ce8e:	697b      	ldr	r3, [r7, #20]
 800ce90:	685b      	ldr	r3, [r3, #4]
 800ce92:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ce94:	69ba      	ldr	r2, [r7, #24]
 800ce96:	429a      	cmp	r2, r3
 800ce98:	d903      	bls.n	800cea2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800cea0:	e10e      	b.n	800d0c0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cea4:	2200      	movs	r2, #0
 800cea6:	60bb      	str	r3, [r7, #8]
 800cea8:	60fa      	str	r2, [r7, #12]
 800ceaa:	697b      	ldr	r3, [r7, #20]
 800ceac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ceae:	4a3c      	ldr	r2, [pc, #240]	@ (800cfa0 <UART_SetConfig+0x2fc>)
 800ceb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ceb4:	b29b      	uxth	r3, r3
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	603b      	str	r3, [r7, #0]
 800ceba:	607a      	str	r2, [r7, #4]
 800cebc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cec0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cec4:	f7f3 fce2 	bl	800088c <__aeabi_uldivmod>
 800cec8:	4602      	mov	r2, r0
 800ceca:	460b      	mov	r3, r1
 800cecc:	4610      	mov	r0, r2
 800cece:	4619      	mov	r1, r3
 800ced0:	f04f 0200 	mov.w	r2, #0
 800ced4:	f04f 0300 	mov.w	r3, #0
 800ced8:	020b      	lsls	r3, r1, #8
 800ceda:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cede:	0202      	lsls	r2, r0, #8
 800cee0:	6979      	ldr	r1, [r7, #20]
 800cee2:	6849      	ldr	r1, [r1, #4]
 800cee4:	0849      	lsrs	r1, r1, #1
 800cee6:	2000      	movs	r0, #0
 800cee8:	460c      	mov	r4, r1
 800ceea:	4605      	mov	r5, r0
 800ceec:	eb12 0804 	adds.w	r8, r2, r4
 800cef0:	eb43 0905 	adc.w	r9, r3, r5
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	685b      	ldr	r3, [r3, #4]
 800cef8:	2200      	movs	r2, #0
 800cefa:	469a      	mov	sl, r3
 800cefc:	4693      	mov	fp, r2
 800cefe:	4652      	mov	r2, sl
 800cf00:	465b      	mov	r3, fp
 800cf02:	4640      	mov	r0, r8
 800cf04:	4649      	mov	r1, r9
 800cf06:	f7f3 fcc1 	bl	800088c <__aeabi_uldivmod>
 800cf0a:	4602      	mov	r2, r0
 800cf0c:	460b      	mov	r3, r1
 800cf0e:	4613      	mov	r3, r2
 800cf10:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cf12:	6a3b      	ldr	r3, [r7, #32]
 800cf14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800cf18:	d308      	bcc.n	800cf2c <UART_SetConfig+0x288>
 800cf1a:	6a3b      	ldr	r3, [r7, #32]
 800cf1c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cf20:	d204      	bcs.n	800cf2c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	6a3a      	ldr	r2, [r7, #32]
 800cf28:	60da      	str	r2, [r3, #12]
 800cf2a:	e0c9      	b.n	800d0c0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800cf32:	e0c5      	b.n	800d0c0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	69db      	ldr	r3, [r3, #28]
 800cf38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cf3c:	d16d      	bne.n	800d01a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800cf3e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800cf42:	3b01      	subs	r3, #1
 800cf44:	2b07      	cmp	r3, #7
 800cf46:	d82d      	bhi.n	800cfa4 <UART_SetConfig+0x300>
 800cf48:	a201      	add	r2, pc, #4	@ (adr r2, 800cf50 <UART_SetConfig+0x2ac>)
 800cf4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf4e:	bf00      	nop
 800cf50:	0800cf71 	.word	0x0800cf71
 800cf54:	0800cf79 	.word	0x0800cf79
 800cf58:	0800cfa5 	.word	0x0800cfa5
 800cf5c:	0800cf7f 	.word	0x0800cf7f
 800cf60:	0800cfa5 	.word	0x0800cfa5
 800cf64:	0800cfa5 	.word	0x0800cfa5
 800cf68:	0800cfa5 	.word	0x0800cfa5
 800cf6c:	0800cf87 	.word	0x0800cf87
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cf70:	f7fe fc7a 	bl	800b868 <HAL_RCC_GetPCLK2Freq>
 800cf74:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800cf76:	e01b      	b.n	800cfb0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cf78:	4b08      	ldr	r3, [pc, #32]	@ (800cf9c <UART_SetConfig+0x2f8>)
 800cf7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800cf7c:	e018      	b.n	800cfb0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cf7e:	f7fe fbdd 	bl	800b73c <HAL_RCC_GetSysClockFreq>
 800cf82:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800cf84:	e014      	b.n	800cfb0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cf86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cf8a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800cf8c:	e010      	b.n	800cfb0 <UART_SetConfig+0x30c>
 800cf8e:	bf00      	nop
 800cf90:	cfff69f3 	.word	0xcfff69f3
 800cf94:	40008000 	.word	0x40008000
 800cf98:	40013800 	.word	0x40013800
 800cf9c:	00f42400 	.word	0x00f42400
 800cfa0:	08013638 	.word	0x08013638
      default:
        pclk = 0U;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800cfae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cfb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	f000 8084 	beq.w	800d0c0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cfbc:	4a4b      	ldr	r2, [pc, #300]	@ (800d0ec <UART_SetConfig+0x448>)
 800cfbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cfc2:	461a      	mov	r2, r3
 800cfc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfc6:	fbb3 f3f2 	udiv	r3, r3, r2
 800cfca:	005a      	lsls	r2, r3, #1
 800cfcc:	697b      	ldr	r3, [r7, #20]
 800cfce:	685b      	ldr	r3, [r3, #4]
 800cfd0:	085b      	lsrs	r3, r3, #1
 800cfd2:	441a      	add	r2, r3
 800cfd4:	697b      	ldr	r3, [r7, #20]
 800cfd6:	685b      	ldr	r3, [r3, #4]
 800cfd8:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfdc:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cfde:	6a3b      	ldr	r3, [r7, #32]
 800cfe0:	2b0f      	cmp	r3, #15
 800cfe2:	d916      	bls.n	800d012 <UART_SetConfig+0x36e>
 800cfe4:	6a3b      	ldr	r3, [r7, #32]
 800cfe6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cfea:	d212      	bcs.n	800d012 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cfec:	6a3b      	ldr	r3, [r7, #32]
 800cfee:	b29b      	uxth	r3, r3
 800cff0:	f023 030f 	bic.w	r3, r3, #15
 800cff4:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cff6:	6a3b      	ldr	r3, [r7, #32]
 800cff8:	085b      	lsrs	r3, r3, #1
 800cffa:	b29b      	uxth	r3, r3
 800cffc:	f003 0307 	and.w	r3, r3, #7
 800d000:	b29a      	uxth	r2, r3
 800d002:	8bfb      	ldrh	r3, [r7, #30]
 800d004:	4313      	orrs	r3, r2
 800d006:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800d008:	697b      	ldr	r3, [r7, #20]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	8bfa      	ldrh	r2, [r7, #30]
 800d00e:	60da      	str	r2, [r3, #12]
 800d010:	e056      	b.n	800d0c0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800d012:	2301      	movs	r3, #1
 800d014:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800d018:	e052      	b.n	800d0c0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d01a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800d01e:	3b01      	subs	r3, #1
 800d020:	2b07      	cmp	r3, #7
 800d022:	d822      	bhi.n	800d06a <UART_SetConfig+0x3c6>
 800d024:	a201      	add	r2, pc, #4	@ (adr r2, 800d02c <UART_SetConfig+0x388>)
 800d026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d02a:	bf00      	nop
 800d02c:	0800d04d 	.word	0x0800d04d
 800d030:	0800d055 	.word	0x0800d055
 800d034:	0800d06b 	.word	0x0800d06b
 800d038:	0800d05b 	.word	0x0800d05b
 800d03c:	0800d06b 	.word	0x0800d06b
 800d040:	0800d06b 	.word	0x0800d06b
 800d044:	0800d06b 	.word	0x0800d06b
 800d048:	0800d063 	.word	0x0800d063
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d04c:	f7fe fc0c 	bl	800b868 <HAL_RCC_GetPCLK2Freq>
 800d050:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d052:	e010      	b.n	800d076 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d054:	4b26      	ldr	r3, [pc, #152]	@ (800d0f0 <UART_SetConfig+0x44c>)
 800d056:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d058:	e00d      	b.n	800d076 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d05a:	f7fe fb6f 	bl	800b73c <HAL_RCC_GetSysClockFreq>
 800d05e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800d060:	e009      	b.n	800d076 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d062:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d066:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800d068:	e005      	b.n	800d076 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800d06a:	2300      	movs	r3, #0
 800d06c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800d06e:	2301      	movs	r3, #1
 800d070:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800d074:	bf00      	nop
    }

    if (pclk != 0U)
 800d076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d021      	beq.n	800d0c0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d07c:	697b      	ldr	r3, [r7, #20]
 800d07e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d080:	4a1a      	ldr	r2, [pc, #104]	@ (800d0ec <UART_SetConfig+0x448>)
 800d082:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d086:	461a      	mov	r2, r3
 800d088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d08a:	fbb3 f2f2 	udiv	r2, r3, r2
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	685b      	ldr	r3, [r3, #4]
 800d092:	085b      	lsrs	r3, r3, #1
 800d094:	441a      	add	r2, r3
 800d096:	697b      	ldr	r3, [r7, #20]
 800d098:	685b      	ldr	r3, [r3, #4]
 800d09a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d09e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d0a0:	6a3b      	ldr	r3, [r7, #32]
 800d0a2:	2b0f      	cmp	r3, #15
 800d0a4:	d909      	bls.n	800d0ba <UART_SetConfig+0x416>
 800d0a6:	6a3b      	ldr	r3, [r7, #32]
 800d0a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d0ac:	d205      	bcs.n	800d0ba <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d0ae:	6a3b      	ldr	r3, [r7, #32]
 800d0b0:	b29a      	uxth	r2, r3
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	60da      	str	r2, [r3, #12]
 800d0b8:	e002      	b.n	800d0c0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d0c0:	697b      	ldr	r3, [r7, #20]
 800d0c2:	2201      	movs	r2, #1
 800d0c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d0c8:	697b      	ldr	r3, [r7, #20]
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d0d0:	697b      	ldr	r3, [r7, #20]
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d0d6:	697b      	ldr	r3, [r7, #20]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d0dc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3730      	adds	r7, #48	@ 0x30
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d0ea:	bf00      	nop
 800d0ec:	08013638 	.word	0x08013638
 800d0f0:	00f42400 	.word	0x00f42400

0800d0f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b083      	sub	sp, #12
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d100:	f003 0308 	and.w	r3, r3, #8
 800d104:	2b00      	cmp	r3, #0
 800d106:	d00a      	beq.n	800d11e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	685b      	ldr	r3, [r3, #4]
 800d10e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	430a      	orrs	r2, r1
 800d11c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d122:	f003 0301 	and.w	r3, r3, #1
 800d126:	2b00      	cmp	r3, #0
 800d128:	d00a      	beq.n	800d140 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	685b      	ldr	r3, [r3, #4]
 800d130:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	430a      	orrs	r2, r1
 800d13e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d144:	f003 0302 	and.w	r3, r3, #2
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d00a      	beq.n	800d162 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	685b      	ldr	r3, [r3, #4]
 800d152:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	430a      	orrs	r2, r1
 800d160:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d166:	f003 0304 	and.w	r3, r3, #4
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d00a      	beq.n	800d184 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	685b      	ldr	r3, [r3, #4]
 800d174:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	430a      	orrs	r2, r1
 800d182:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d188:	f003 0310 	and.w	r3, r3, #16
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d00a      	beq.n	800d1a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	689b      	ldr	r3, [r3, #8]
 800d196:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	430a      	orrs	r2, r1
 800d1a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1aa:	f003 0320 	and.w	r3, r3, #32
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d00a      	beq.n	800d1c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	689b      	ldr	r3, [r3, #8]
 800d1b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	430a      	orrs	r2, r1
 800d1c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d01a      	beq.n	800d20a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	685b      	ldr	r3, [r3, #4]
 800d1da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	430a      	orrs	r2, r1
 800d1e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d1ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d1f2:	d10a      	bne.n	800d20a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	685b      	ldr	r3, [r3, #4]
 800d1fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	430a      	orrs	r2, r1
 800d208:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d20e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d212:	2b00      	cmp	r3, #0
 800d214:	d00a      	beq.n	800d22c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	685b      	ldr	r3, [r3, #4]
 800d21c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	430a      	orrs	r2, r1
 800d22a:	605a      	str	r2, [r3, #4]
  }
}
 800d22c:	bf00      	nop
 800d22e:	370c      	adds	r7, #12
 800d230:	46bd      	mov	sp, r7
 800d232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d236:	4770      	bx	lr

0800d238 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b098      	sub	sp, #96	@ 0x60
 800d23c:	af02      	add	r7, sp, #8
 800d23e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2200      	movs	r2, #0
 800d244:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d248:	f7f8 f8a0 	bl	800538c <HAL_GetTick>
 800d24c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	f003 0308 	and.w	r3, r3, #8
 800d258:	2b08      	cmp	r3, #8
 800d25a:	d12f      	bne.n	800d2bc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d25c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d260:	9300      	str	r3, [sp, #0]
 800d262:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d264:	2200      	movs	r2, #0
 800d266:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f000 f88e 	bl	800d38c <UART_WaitOnFlagUntilTimeout>
 800d270:	4603      	mov	r3, r0
 800d272:	2b00      	cmp	r3, #0
 800d274:	d022      	beq.n	800d2bc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d27c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d27e:	e853 3f00 	ldrex	r3, [r3]
 800d282:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d286:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d28a:	653b      	str	r3, [r7, #80]	@ 0x50
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	461a      	mov	r2, r3
 800d292:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d294:	647b      	str	r3, [r7, #68]	@ 0x44
 800d296:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d298:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d29a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d29c:	e841 2300 	strex	r3, r2, [r1]
 800d2a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d2a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d1e6      	bne.n	800d276 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2220      	movs	r2, #32
 800d2ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d2b8:	2303      	movs	r3, #3
 800d2ba:	e063      	b.n	800d384 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	f003 0304 	and.w	r3, r3, #4
 800d2c6:	2b04      	cmp	r3, #4
 800d2c8:	d149      	bne.n	800d35e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d2ca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d2ce:	9300      	str	r3, [sp, #0]
 800d2d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d2d8:	6878      	ldr	r0, [r7, #4]
 800d2da:	f000 f857 	bl	800d38c <UART_WaitOnFlagUntilTimeout>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d03c      	beq.n	800d35e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ec:	e853 3f00 	ldrex	r3, [r3]
 800d2f0:	623b      	str	r3, [r7, #32]
   return(result);
 800d2f2:	6a3b      	ldr	r3, [r7, #32]
 800d2f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d2f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	461a      	mov	r2, r3
 800d300:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d302:	633b      	str	r3, [r7, #48]	@ 0x30
 800d304:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d306:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d308:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d30a:	e841 2300 	strex	r3, r2, [r1]
 800d30e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800d310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d312:	2b00      	cmp	r3, #0
 800d314:	d1e6      	bne.n	800d2e4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	3308      	adds	r3, #8
 800d31c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d31e:	693b      	ldr	r3, [r7, #16]
 800d320:	e853 3f00 	ldrex	r3, [r3]
 800d324:	60fb      	str	r3, [r7, #12]
   return(result);
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	f023 0301 	bic.w	r3, r3, #1
 800d32c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	3308      	adds	r3, #8
 800d334:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d336:	61fa      	str	r2, [r7, #28]
 800d338:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d33a:	69b9      	ldr	r1, [r7, #24]
 800d33c:	69fa      	ldr	r2, [r7, #28]
 800d33e:	e841 2300 	strex	r3, r2, [r1]
 800d342:	617b      	str	r3, [r7, #20]
   return(result);
 800d344:	697b      	ldr	r3, [r7, #20]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d1e5      	bne.n	800d316 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	2220      	movs	r2, #32
 800d34e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	2200      	movs	r2, #0
 800d356:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d35a:	2303      	movs	r3, #3
 800d35c:	e012      	b.n	800d384 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2220      	movs	r2, #32
 800d362:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	2220      	movs	r2, #32
 800d36a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2200      	movs	r2, #0
 800d372:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2200      	movs	r2, #0
 800d378:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2200      	movs	r2, #0
 800d37e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d382:	2300      	movs	r3, #0
}
 800d384:	4618      	mov	r0, r3
 800d386:	3758      	adds	r7, #88	@ 0x58
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}

0800d38c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b084      	sub	sp, #16
 800d390:	af00      	add	r7, sp, #0
 800d392:	60f8      	str	r0, [r7, #12]
 800d394:	60b9      	str	r1, [r7, #8]
 800d396:	603b      	str	r3, [r7, #0]
 800d398:	4613      	mov	r3, r2
 800d39a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d39c:	e04f      	b.n	800d43e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d39e:	69bb      	ldr	r3, [r7, #24]
 800d3a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3a4:	d04b      	beq.n	800d43e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d3a6:	f7f7 fff1 	bl	800538c <HAL_GetTick>
 800d3aa:	4602      	mov	r2, r0
 800d3ac:	683b      	ldr	r3, [r7, #0]
 800d3ae:	1ad3      	subs	r3, r2, r3
 800d3b0:	69ba      	ldr	r2, [r7, #24]
 800d3b2:	429a      	cmp	r2, r3
 800d3b4:	d302      	bcc.n	800d3bc <UART_WaitOnFlagUntilTimeout+0x30>
 800d3b6:	69bb      	ldr	r3, [r7, #24]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d101      	bne.n	800d3c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d3bc:	2303      	movs	r3, #3
 800d3be:	e04e      	b.n	800d45e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	f003 0304 	and.w	r3, r3, #4
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d037      	beq.n	800d43e <UART_WaitOnFlagUntilTimeout+0xb2>
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	2b80      	cmp	r3, #128	@ 0x80
 800d3d2:	d034      	beq.n	800d43e <UART_WaitOnFlagUntilTimeout+0xb2>
 800d3d4:	68bb      	ldr	r3, [r7, #8]
 800d3d6:	2b40      	cmp	r3, #64	@ 0x40
 800d3d8:	d031      	beq.n	800d43e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	69db      	ldr	r3, [r3, #28]
 800d3e0:	f003 0308 	and.w	r3, r3, #8
 800d3e4:	2b08      	cmp	r3, #8
 800d3e6:	d110      	bne.n	800d40a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	2208      	movs	r2, #8
 800d3ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d3f0:	68f8      	ldr	r0, [r7, #12]
 800d3f2:	f000 f838 	bl	800d466 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	2208      	movs	r2, #8
 800d3fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	2200      	movs	r2, #0
 800d402:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800d406:	2301      	movs	r3, #1
 800d408:	e029      	b.n	800d45e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	69db      	ldr	r3, [r3, #28]
 800d410:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d414:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d418:	d111      	bne.n	800d43e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d422:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d424:	68f8      	ldr	r0, [r7, #12]
 800d426:	f000 f81e 	bl	800d466 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	2220      	movs	r2, #32
 800d42e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	2200      	movs	r2, #0
 800d436:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800d43a:	2303      	movs	r3, #3
 800d43c:	e00f      	b.n	800d45e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	69da      	ldr	r2, [r3, #28]
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	4013      	ands	r3, r2
 800d448:	68ba      	ldr	r2, [r7, #8]
 800d44a:	429a      	cmp	r2, r3
 800d44c:	bf0c      	ite	eq
 800d44e:	2301      	moveq	r3, #1
 800d450:	2300      	movne	r3, #0
 800d452:	b2db      	uxtb	r3, r3
 800d454:	461a      	mov	r2, r3
 800d456:	79fb      	ldrb	r3, [r7, #7]
 800d458:	429a      	cmp	r2, r3
 800d45a:	d0a0      	beq.n	800d39e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d45c:	2300      	movs	r3, #0
}
 800d45e:	4618      	mov	r0, r3
 800d460:	3710      	adds	r7, #16
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}

0800d466 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d466:	b480      	push	{r7}
 800d468:	b095      	sub	sp, #84	@ 0x54
 800d46a:	af00      	add	r7, sp, #0
 800d46c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d474:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d476:	e853 3f00 	ldrex	r3, [r3]
 800d47a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800d47c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d47e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800d482:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	461a      	mov	r2, r3
 800d48a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d48c:	643b      	str	r3, [r7, #64]	@ 0x40
 800d48e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d490:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800d492:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d494:	e841 2300 	strex	r3, r2, [r1]
 800d498:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800d49a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d1e6      	bne.n	800d46e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	3308      	adds	r3, #8
 800d4a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4a8:	6a3b      	ldr	r3, [r7, #32]
 800d4aa:	e853 3f00 	ldrex	r3, [r3]
 800d4ae:	61fb      	str	r3, [r7, #28]
   return(result);
 800d4b0:	69fb      	ldr	r3, [r7, #28]
 800d4b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d4b6:	f023 0301 	bic.w	r3, r3, #1
 800d4ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	3308      	adds	r3, #8
 800d4c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d4c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d4c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d4ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d4cc:	e841 2300 	strex	r3, r2, [r1]
 800d4d0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800d4d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d1e3      	bne.n	800d4a0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d4dc:	2b01      	cmp	r3, #1
 800d4de:	d118      	bne.n	800d512 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	e853 3f00 	ldrex	r3, [r3]
 800d4ec:	60bb      	str	r3, [r7, #8]
   return(result);
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	f023 0310 	bic.w	r3, r3, #16
 800d4f4:	647b      	str	r3, [r7, #68]	@ 0x44
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	461a      	mov	r2, r3
 800d4fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d4fe:	61bb      	str	r3, [r7, #24]
 800d500:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d502:	6979      	ldr	r1, [r7, #20]
 800d504:	69ba      	ldr	r2, [r7, #24]
 800d506:	e841 2300 	strex	r3, r2, [r1]
 800d50a:	613b      	str	r3, [r7, #16]
   return(result);
 800d50c:	693b      	ldr	r3, [r7, #16]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d1e6      	bne.n	800d4e0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2220      	movs	r2, #32
 800d516:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2200      	movs	r2, #0
 800d51e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2200      	movs	r2, #0
 800d524:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800d526:	bf00      	nop
 800d528:	3754      	adds	r7, #84	@ 0x54
 800d52a:	46bd      	mov	sp, r7
 800d52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d530:	4770      	bx	lr

0800d532 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800d532:	b480      	push	{r7}
 800d534:	b085      	sub	sp, #20
 800d536:	af00      	add	r7, sp, #0
 800d538:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2200      	movs	r2, #0
 800d53e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d542:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800d546:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	b29a      	uxth	r2, r3
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800d552:	2300      	movs	r3, #0
}
 800d554:	4618      	mov	r0, r3
 800d556:	3714      	adds	r7, #20
 800d558:	46bd      	mov	sp, r7
 800d55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55e:	4770      	bx	lr

0800d560 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800d560:	b480      	push	{r7}
 800d562:	b085      	sub	sp, #20
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800d568:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800d56c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800d574:	b29a      	uxth	r2, r3
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	b29b      	uxth	r3, r3
 800d57a:	43db      	mvns	r3, r3
 800d57c:	b29b      	uxth	r3, r3
 800d57e:	4013      	ands	r3, r2
 800d580:	b29a      	uxth	r2, r3
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800d588:	2300      	movs	r3, #0
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	3714      	adds	r7, #20
 800d58e:	46bd      	mov	sp, r7
 800d590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d594:	4770      	bx	lr

0800d596 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800d596:	b480      	push	{r7}
 800d598:	b085      	sub	sp, #20
 800d59a:	af00      	add	r7, sp, #0
 800d59c:	60f8      	str	r0, [r7, #12]
 800d59e:	1d3b      	adds	r3, r7, #4
 800d5a0:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	2201      	movs	r2, #1
 800d5a8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	2200      	movs	r2, #0
 800d5c0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800d5c4:	2300      	movs	r3, #0
}
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	3714      	adds	r7, #20
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d0:	4770      	bx	lr
	...

0800d5d4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d5d4:	b480      	push	{r7}
 800d5d6:	b09d      	sub	sp, #116	@ 0x74
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
 800d5dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800d5de:	2300      	movs	r3, #0
 800d5e0:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800d5e4:	687a      	ldr	r2, [r7, #4]
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	781b      	ldrb	r3, [r3, #0]
 800d5ea:	009b      	lsls	r3, r3, #2
 800d5ec:	4413      	add	r3, r2
 800d5ee:	881b      	ldrh	r3, [r3, #0]
 800d5f0:	b29b      	uxth	r3, r3
 800d5f2:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 800d5f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d5fa:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	78db      	ldrb	r3, [r3, #3]
 800d602:	2b03      	cmp	r3, #3
 800d604:	d81f      	bhi.n	800d646 <USB_ActivateEndpoint+0x72>
 800d606:	a201      	add	r2, pc, #4	@ (adr r2, 800d60c <USB_ActivateEndpoint+0x38>)
 800d608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d60c:	0800d61d 	.word	0x0800d61d
 800d610:	0800d639 	.word	0x0800d639
 800d614:	0800d64f 	.word	0x0800d64f
 800d618:	0800d62b 	.word	0x0800d62b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800d61c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d620:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800d624:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800d628:	e012      	b.n	800d650 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800d62a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d62e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 800d632:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800d636:	e00b      	b.n	800d650 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800d638:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d63c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800d640:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 800d644:	e004      	b.n	800d650 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800d646:	2301      	movs	r3, #1
 800d648:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 800d64c:	e000      	b.n	800d650 <USB_ActivateEndpoint+0x7c>
      break;
 800d64e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800d650:	687a      	ldr	r2, [r7, #4]
 800d652:	683b      	ldr	r3, [r7, #0]
 800d654:	781b      	ldrb	r3, [r3, #0]
 800d656:	009b      	lsls	r3, r3, #2
 800d658:	441a      	add	r2, r3
 800d65a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800d65e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d662:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d666:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d66a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d66e:	b29b      	uxth	r3, r3
 800d670:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800d672:	687a      	ldr	r2, [r7, #4]
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	781b      	ldrb	r3, [r3, #0]
 800d678:	009b      	lsls	r3, r3, #2
 800d67a:	4413      	add	r3, r2
 800d67c:	881b      	ldrh	r3, [r3, #0]
 800d67e:	b29b      	uxth	r3, r3
 800d680:	b21b      	sxth	r3, r3
 800d682:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d686:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d68a:	b21a      	sxth	r2, r3
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	781b      	ldrb	r3, [r3, #0]
 800d690:	b21b      	sxth	r3, r3
 800d692:	4313      	orrs	r3, r2
 800d694:	b21b      	sxth	r3, r3
 800d696:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 800d69a:	687a      	ldr	r2, [r7, #4]
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	781b      	ldrb	r3, [r3, #0]
 800d6a0:	009b      	lsls	r3, r3, #2
 800d6a2:	441a      	add	r2, r3
 800d6a4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 800d6a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d6ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d6b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d6b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d6b8:	b29b      	uxth	r3, r3
 800d6ba:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	7b1b      	ldrb	r3, [r3, #12]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	f040 8178 	bne.w	800d9b6 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	785b      	ldrb	r3, [r3, #1]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	f000 8084 	beq.w	800d7d8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	61bb      	str	r3, [r7, #24]
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d6da:	b29b      	uxth	r3, r3
 800d6dc:	461a      	mov	r2, r3
 800d6de:	69bb      	ldr	r3, [r7, #24]
 800d6e0:	4413      	add	r3, r2
 800d6e2:	61bb      	str	r3, [r7, #24]
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	781b      	ldrb	r3, [r3, #0]
 800d6e8:	00da      	lsls	r2, r3, #3
 800d6ea:	69bb      	ldr	r3, [r7, #24]
 800d6ec:	4413      	add	r3, r2
 800d6ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d6f2:	617b      	str	r3, [r7, #20]
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	88db      	ldrh	r3, [r3, #6]
 800d6f8:	085b      	lsrs	r3, r3, #1
 800d6fa:	b29b      	uxth	r3, r3
 800d6fc:	005b      	lsls	r3, r3, #1
 800d6fe:	b29a      	uxth	r2, r3
 800d700:	697b      	ldr	r3, [r7, #20]
 800d702:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d704:	687a      	ldr	r2, [r7, #4]
 800d706:	683b      	ldr	r3, [r7, #0]
 800d708:	781b      	ldrb	r3, [r3, #0]
 800d70a:	009b      	lsls	r3, r3, #2
 800d70c:	4413      	add	r3, r2
 800d70e:	881b      	ldrh	r3, [r3, #0]
 800d710:	827b      	strh	r3, [r7, #18]
 800d712:	8a7b      	ldrh	r3, [r7, #18]
 800d714:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d01b      	beq.n	800d754 <USB_ActivateEndpoint+0x180>
 800d71c:	687a      	ldr	r2, [r7, #4]
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	781b      	ldrb	r3, [r3, #0]
 800d722:	009b      	lsls	r3, r3, #2
 800d724:	4413      	add	r3, r2
 800d726:	881b      	ldrh	r3, [r3, #0]
 800d728:	b29b      	uxth	r3, r3
 800d72a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d72e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d732:	823b      	strh	r3, [r7, #16]
 800d734:	687a      	ldr	r2, [r7, #4]
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	781b      	ldrb	r3, [r3, #0]
 800d73a:	009b      	lsls	r3, r3, #2
 800d73c:	441a      	add	r2, r3
 800d73e:	8a3b      	ldrh	r3, [r7, #16]
 800d740:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d744:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d748:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d74c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800d750:	b29b      	uxth	r3, r3
 800d752:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d754:	683b      	ldr	r3, [r7, #0]
 800d756:	78db      	ldrb	r3, [r3, #3]
 800d758:	2b01      	cmp	r3, #1
 800d75a:	d020      	beq.n	800d79e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d75c:	687a      	ldr	r2, [r7, #4]
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	781b      	ldrb	r3, [r3, #0]
 800d762:	009b      	lsls	r3, r3, #2
 800d764:	4413      	add	r3, r2
 800d766:	881b      	ldrh	r3, [r3, #0]
 800d768:	b29b      	uxth	r3, r3
 800d76a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d76e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d772:	81bb      	strh	r3, [r7, #12]
 800d774:	89bb      	ldrh	r3, [r7, #12]
 800d776:	f083 0320 	eor.w	r3, r3, #32
 800d77a:	81bb      	strh	r3, [r7, #12]
 800d77c:	687a      	ldr	r2, [r7, #4]
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	781b      	ldrb	r3, [r3, #0]
 800d782:	009b      	lsls	r3, r3, #2
 800d784:	441a      	add	r2, r3
 800d786:	89bb      	ldrh	r3, [r7, #12]
 800d788:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d78c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d790:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d794:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d798:	b29b      	uxth	r3, r3
 800d79a:	8013      	strh	r3, [r2, #0]
 800d79c:	e2d5      	b.n	800dd4a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800d79e:	687a      	ldr	r2, [r7, #4]
 800d7a0:	683b      	ldr	r3, [r7, #0]
 800d7a2:	781b      	ldrb	r3, [r3, #0]
 800d7a4:	009b      	lsls	r3, r3, #2
 800d7a6:	4413      	add	r3, r2
 800d7a8:	881b      	ldrh	r3, [r3, #0]
 800d7aa:	b29b      	uxth	r3, r3
 800d7ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d7b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d7b4:	81fb      	strh	r3, [r7, #14]
 800d7b6:	687a      	ldr	r2, [r7, #4]
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	781b      	ldrb	r3, [r3, #0]
 800d7bc:	009b      	lsls	r3, r3, #2
 800d7be:	441a      	add	r2, r3
 800d7c0:	89fb      	ldrh	r3, [r7, #14]
 800d7c2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d7c6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d7ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d7ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7d2:	b29b      	uxth	r3, r3
 800d7d4:	8013      	strh	r3, [r2, #0]
 800d7d6:	e2b8      	b.n	800dd4a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	633b      	str	r3, [r7, #48]	@ 0x30
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d7e2:	b29b      	uxth	r3, r3
 800d7e4:	461a      	mov	r2, r3
 800d7e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7e8:	4413      	add	r3, r2
 800d7ea:	633b      	str	r3, [r7, #48]	@ 0x30
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	781b      	ldrb	r3, [r3, #0]
 800d7f0:	00da      	lsls	r2, r3, #3
 800d7f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7f4:	4413      	add	r3, r2
 800d7f6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800d7fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	88db      	ldrh	r3, [r3, #6]
 800d800:	085b      	lsrs	r3, r3, #1
 800d802:	b29b      	uxth	r3, r3
 800d804:	005b      	lsls	r3, r3, #1
 800d806:	b29a      	uxth	r2, r3
 800d808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d80a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800d816:	b29b      	uxth	r3, r3
 800d818:	461a      	mov	r2, r3
 800d81a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d81c:	4413      	add	r3, r2
 800d81e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d820:	683b      	ldr	r3, [r7, #0]
 800d822:	781b      	ldrb	r3, [r3, #0]
 800d824:	00da      	lsls	r2, r3, #3
 800d826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d828:	4413      	add	r3, r2
 800d82a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800d82e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d832:	881b      	ldrh	r3, [r3, #0]
 800d834:	b29b      	uxth	r3, r3
 800d836:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d83a:	b29a      	uxth	r2, r3
 800d83c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d83e:	801a      	strh	r2, [r3, #0]
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	691b      	ldr	r3, [r3, #16]
 800d844:	2b3e      	cmp	r3, #62	@ 0x3e
 800d846:	d91d      	bls.n	800d884 <USB_ActivateEndpoint+0x2b0>
 800d848:	683b      	ldr	r3, [r7, #0]
 800d84a:	691b      	ldr	r3, [r3, #16]
 800d84c:	095b      	lsrs	r3, r3, #5
 800d84e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	691b      	ldr	r3, [r3, #16]
 800d854:	f003 031f 	and.w	r3, r3, #31
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d102      	bne.n	800d862 <USB_ActivateEndpoint+0x28e>
 800d85c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d85e:	3b01      	subs	r3, #1
 800d860:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d864:	881b      	ldrh	r3, [r3, #0]
 800d866:	b29a      	uxth	r2, r3
 800d868:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d86a:	b29b      	uxth	r3, r3
 800d86c:	029b      	lsls	r3, r3, #10
 800d86e:	b29b      	uxth	r3, r3
 800d870:	4313      	orrs	r3, r2
 800d872:	b29b      	uxth	r3, r3
 800d874:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d878:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d87c:	b29a      	uxth	r2, r3
 800d87e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d880:	801a      	strh	r2, [r3, #0]
 800d882:	e026      	b.n	800d8d2 <USB_ActivateEndpoint+0x2fe>
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	691b      	ldr	r3, [r3, #16]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d10a      	bne.n	800d8a2 <USB_ActivateEndpoint+0x2ce>
 800d88c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d88e:	881b      	ldrh	r3, [r3, #0]
 800d890:	b29b      	uxth	r3, r3
 800d892:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800d896:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800d89a:	b29a      	uxth	r2, r3
 800d89c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d89e:	801a      	strh	r2, [r3, #0]
 800d8a0:	e017      	b.n	800d8d2 <USB_ActivateEndpoint+0x2fe>
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	691b      	ldr	r3, [r3, #16]
 800d8a6:	085b      	lsrs	r3, r3, #1
 800d8a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	691b      	ldr	r3, [r3, #16]
 800d8ae:	f003 0301 	and.w	r3, r3, #1
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d002      	beq.n	800d8bc <USB_ActivateEndpoint+0x2e8>
 800d8b6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d8b8:	3301      	adds	r3, #1
 800d8ba:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d8bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8be:	881b      	ldrh	r3, [r3, #0]
 800d8c0:	b29a      	uxth	r2, r3
 800d8c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d8c4:	b29b      	uxth	r3, r3
 800d8c6:	029b      	lsls	r3, r3, #10
 800d8c8:	b29b      	uxth	r3, r3
 800d8ca:	4313      	orrs	r3, r2
 800d8cc:	b29a      	uxth	r2, r3
 800d8ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8d0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d8d2:	687a      	ldr	r2, [r7, #4]
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	781b      	ldrb	r3, [r3, #0]
 800d8d8:	009b      	lsls	r3, r3, #2
 800d8da:	4413      	add	r3, r2
 800d8dc:	881b      	ldrh	r3, [r3, #0]
 800d8de:	847b      	strh	r3, [r7, #34]	@ 0x22
 800d8e0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800d8e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d01b      	beq.n	800d922 <USB_ActivateEndpoint+0x34e>
 800d8ea:	687a      	ldr	r2, [r7, #4]
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	781b      	ldrb	r3, [r3, #0]
 800d8f0:	009b      	lsls	r3, r3, #2
 800d8f2:	4413      	add	r3, r2
 800d8f4:	881b      	ldrh	r3, [r3, #0]
 800d8f6:	b29b      	uxth	r3, r3
 800d8f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d8fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d900:	843b      	strh	r3, [r7, #32]
 800d902:	687a      	ldr	r2, [r7, #4]
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	781b      	ldrb	r3, [r3, #0]
 800d908:	009b      	lsls	r3, r3, #2
 800d90a:	441a      	add	r2, r3
 800d90c:	8c3b      	ldrh	r3, [r7, #32]
 800d90e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d912:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d916:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800d91a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d91e:	b29b      	uxth	r3, r3
 800d920:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	781b      	ldrb	r3, [r3, #0]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d124      	bne.n	800d974 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d92a:	687a      	ldr	r2, [r7, #4]
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	781b      	ldrb	r3, [r3, #0]
 800d930:	009b      	lsls	r3, r3, #2
 800d932:	4413      	add	r3, r2
 800d934:	881b      	ldrh	r3, [r3, #0]
 800d936:	b29b      	uxth	r3, r3
 800d938:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d93c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d940:	83bb      	strh	r3, [r7, #28]
 800d942:	8bbb      	ldrh	r3, [r7, #28]
 800d944:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800d948:	83bb      	strh	r3, [r7, #28]
 800d94a:	8bbb      	ldrh	r3, [r7, #28]
 800d94c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d950:	83bb      	strh	r3, [r7, #28]
 800d952:	687a      	ldr	r2, [r7, #4]
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	781b      	ldrb	r3, [r3, #0]
 800d958:	009b      	lsls	r3, r3, #2
 800d95a:	441a      	add	r2, r3
 800d95c:	8bbb      	ldrh	r3, [r7, #28]
 800d95e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d962:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d966:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d96a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d96e:	b29b      	uxth	r3, r3
 800d970:	8013      	strh	r3, [r2, #0]
 800d972:	e1ea      	b.n	800dd4a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800d974:	687a      	ldr	r2, [r7, #4]
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	781b      	ldrb	r3, [r3, #0]
 800d97a:	009b      	lsls	r3, r3, #2
 800d97c:	4413      	add	r3, r2
 800d97e:	881b      	ldrh	r3, [r3, #0]
 800d980:	b29b      	uxth	r3, r3
 800d982:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d986:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d98a:	83fb      	strh	r3, [r7, #30]
 800d98c:	8bfb      	ldrh	r3, [r7, #30]
 800d98e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800d992:	83fb      	strh	r3, [r7, #30]
 800d994:	687a      	ldr	r2, [r7, #4]
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	781b      	ldrb	r3, [r3, #0]
 800d99a:	009b      	lsls	r3, r3, #2
 800d99c:	441a      	add	r2, r3
 800d99e:	8bfb      	ldrh	r3, [r7, #30]
 800d9a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d9a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d9a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800d9ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d9b0:	b29b      	uxth	r3, r3
 800d9b2:	8013      	strh	r3, [r2, #0]
 800d9b4:	e1c9      	b.n	800dd4a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800d9b6:	683b      	ldr	r3, [r7, #0]
 800d9b8:	78db      	ldrb	r3, [r3, #3]
 800d9ba:	2b02      	cmp	r3, #2
 800d9bc:	d11e      	bne.n	800d9fc <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800d9be:	687a      	ldr	r2, [r7, #4]
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	781b      	ldrb	r3, [r3, #0]
 800d9c4:	009b      	lsls	r3, r3, #2
 800d9c6:	4413      	add	r3, r2
 800d9c8:	881b      	ldrh	r3, [r3, #0]
 800d9ca:	b29b      	uxth	r3, r3
 800d9cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d9d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d9d4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800d9d8:	687a      	ldr	r2, [r7, #4]
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	781b      	ldrb	r3, [r3, #0]
 800d9de:	009b      	lsls	r3, r3, #2
 800d9e0:	441a      	add	r2, r3
 800d9e2:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800d9e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800d9ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800d9ee:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800d9f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d9f6:	b29b      	uxth	r3, r3
 800d9f8:	8013      	strh	r3, [r2, #0]
 800d9fa:	e01d      	b.n	800da38 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800d9fc:	687a      	ldr	r2, [r7, #4]
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	781b      	ldrb	r3, [r3, #0]
 800da02:	009b      	lsls	r3, r3, #2
 800da04:	4413      	add	r3, r2
 800da06:	881b      	ldrh	r3, [r3, #0]
 800da08:	b29b      	uxth	r3, r3
 800da0a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800da0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800da12:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 800da16:	687a      	ldr	r2, [r7, #4]
 800da18:	683b      	ldr	r3, [r7, #0]
 800da1a:	781b      	ldrb	r3, [r3, #0]
 800da1c:	009b      	lsls	r3, r3, #2
 800da1e:	441a      	add	r2, r3
 800da20:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 800da24:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800da28:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800da2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800da30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800da34:	b29b      	uxth	r3, r3
 800da36:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800da42:	b29b      	uxth	r3, r3
 800da44:	461a      	mov	r2, r3
 800da46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800da48:	4413      	add	r3, r2
 800da4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	781b      	ldrb	r3, [r3, #0]
 800da50:	00da      	lsls	r2, r3, #3
 800da52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800da54:	4413      	add	r3, r2
 800da56:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800da5a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	891b      	ldrh	r3, [r3, #8]
 800da60:	085b      	lsrs	r3, r3, #1
 800da62:	b29b      	uxth	r3, r3
 800da64:	005b      	lsls	r3, r3, #1
 800da66:	b29a      	uxth	r2, r3
 800da68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800da6a:	801a      	strh	r2, [r3, #0]
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	657b      	str	r3, [r7, #84]	@ 0x54
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800da76:	b29b      	uxth	r3, r3
 800da78:	461a      	mov	r2, r3
 800da7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da7c:	4413      	add	r3, r2
 800da7e:	657b      	str	r3, [r7, #84]	@ 0x54
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	781b      	ldrb	r3, [r3, #0]
 800da84:	00da      	lsls	r2, r3, #3
 800da86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da88:	4413      	add	r3, r2
 800da8a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800da8e:	653b      	str	r3, [r7, #80]	@ 0x50
 800da90:	683b      	ldr	r3, [r7, #0]
 800da92:	895b      	ldrh	r3, [r3, #10]
 800da94:	085b      	lsrs	r3, r3, #1
 800da96:	b29b      	uxth	r3, r3
 800da98:	005b      	lsls	r3, r3, #1
 800da9a:	b29a      	uxth	r2, r3
 800da9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da9e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	785b      	ldrb	r3, [r3, #1]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	f040 8093 	bne.w	800dbd0 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800daaa:	687a      	ldr	r2, [r7, #4]
 800daac:	683b      	ldr	r3, [r7, #0]
 800daae:	781b      	ldrb	r3, [r3, #0]
 800dab0:	009b      	lsls	r3, r3, #2
 800dab2:	4413      	add	r3, r2
 800dab4:	881b      	ldrh	r3, [r3, #0]
 800dab6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 800daba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800dabe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d01b      	beq.n	800dafe <USB_ActivateEndpoint+0x52a>
 800dac6:	687a      	ldr	r2, [r7, #4]
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	781b      	ldrb	r3, [r3, #0]
 800dacc:	009b      	lsls	r3, r3, #2
 800dace:	4413      	add	r3, r2
 800dad0:	881b      	ldrh	r3, [r3, #0]
 800dad2:	b29b      	uxth	r3, r3
 800dad4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dad8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dadc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800dade:	687a      	ldr	r2, [r7, #4]
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	781b      	ldrb	r3, [r3, #0]
 800dae4:	009b      	lsls	r3, r3, #2
 800dae6:	441a      	add	r2, r3
 800dae8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800daea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800daee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800daf2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800daf6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dafa:	b29b      	uxth	r3, r3
 800dafc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800dafe:	687a      	ldr	r2, [r7, #4]
 800db00:	683b      	ldr	r3, [r7, #0]
 800db02:	781b      	ldrb	r3, [r3, #0]
 800db04:	009b      	lsls	r3, r3, #2
 800db06:	4413      	add	r3, r2
 800db08:	881b      	ldrh	r3, [r3, #0]
 800db0a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800db0c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800db0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db12:	2b00      	cmp	r3, #0
 800db14:	d01b      	beq.n	800db4e <USB_ActivateEndpoint+0x57a>
 800db16:	687a      	ldr	r2, [r7, #4]
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	781b      	ldrb	r3, [r3, #0]
 800db1c:	009b      	lsls	r3, r3, #2
 800db1e:	4413      	add	r3, r2
 800db20:	881b      	ldrh	r3, [r3, #0]
 800db22:	b29b      	uxth	r3, r3
 800db24:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800db28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800db2c:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800db2e:	687a      	ldr	r2, [r7, #4]
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	781b      	ldrb	r3, [r3, #0]
 800db34:	009b      	lsls	r3, r3, #2
 800db36:	441a      	add	r2, r3
 800db38:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800db3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800db3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800db42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800db46:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800db4a:	b29b      	uxth	r3, r3
 800db4c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800db4e:	687a      	ldr	r2, [r7, #4]
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	781b      	ldrb	r3, [r3, #0]
 800db54:	009b      	lsls	r3, r3, #2
 800db56:	4413      	add	r3, r2
 800db58:	881b      	ldrh	r3, [r3, #0]
 800db5a:	b29b      	uxth	r3, r3
 800db5c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800db60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800db64:	873b      	strh	r3, [r7, #56]	@ 0x38
 800db66:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800db68:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800db6c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800db6e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800db70:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800db74:	873b      	strh	r3, [r7, #56]	@ 0x38
 800db76:	687a      	ldr	r2, [r7, #4]
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	781b      	ldrb	r3, [r3, #0]
 800db7c:	009b      	lsls	r3, r3, #2
 800db7e:	441a      	add	r2, r3
 800db80:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800db82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800db86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800db8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800db8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db92:	b29b      	uxth	r3, r3
 800db94:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800db96:	687a      	ldr	r2, [r7, #4]
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	781b      	ldrb	r3, [r3, #0]
 800db9c:	009b      	lsls	r3, r3, #2
 800db9e:	4413      	add	r3, r2
 800dba0:	881b      	ldrh	r3, [r3, #0]
 800dba2:	b29b      	uxth	r3, r3
 800dba4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dba8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dbac:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800dbae:	687a      	ldr	r2, [r7, #4]
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	781b      	ldrb	r3, [r3, #0]
 800dbb4:	009b      	lsls	r3, r3, #2
 800dbb6:	441a      	add	r2, r3
 800dbb8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800dbba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dbbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dbc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dbc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dbca:	b29b      	uxth	r3, r3
 800dbcc:	8013      	strh	r3, [r2, #0]
 800dbce:	e0bc      	b.n	800dd4a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dbd0:	687a      	ldr	r2, [r7, #4]
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	781b      	ldrb	r3, [r3, #0]
 800dbd6:	009b      	lsls	r3, r3, #2
 800dbd8:	4413      	add	r3, r2
 800dbda:	881b      	ldrh	r3, [r3, #0]
 800dbdc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800dbe0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800dbe4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d01d      	beq.n	800dc28 <USB_ActivateEndpoint+0x654>
 800dbec:	687a      	ldr	r2, [r7, #4]
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	781b      	ldrb	r3, [r3, #0]
 800dbf2:	009b      	lsls	r3, r3, #2
 800dbf4:	4413      	add	r3, r2
 800dbf6:	881b      	ldrh	r3, [r3, #0]
 800dbf8:	b29b      	uxth	r3, r3
 800dbfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dbfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dc02:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800dc06:	687a      	ldr	r2, [r7, #4]
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	781b      	ldrb	r3, [r3, #0]
 800dc0c:	009b      	lsls	r3, r3, #2
 800dc0e:	441a      	add	r2, r3
 800dc10:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800dc14:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dc18:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dc1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800dc20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dc24:	b29b      	uxth	r3, r3
 800dc26:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800dc28:	687a      	ldr	r2, [r7, #4]
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	781b      	ldrb	r3, [r3, #0]
 800dc2e:	009b      	lsls	r3, r3, #2
 800dc30:	4413      	add	r3, r2
 800dc32:	881b      	ldrh	r3, [r3, #0]
 800dc34:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800dc38:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800dc3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d01d      	beq.n	800dc80 <USB_ActivateEndpoint+0x6ac>
 800dc44:	687a      	ldr	r2, [r7, #4]
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	781b      	ldrb	r3, [r3, #0]
 800dc4a:	009b      	lsls	r3, r3, #2
 800dc4c:	4413      	add	r3, r2
 800dc4e:	881b      	ldrh	r3, [r3, #0]
 800dc50:	b29b      	uxth	r3, r3
 800dc52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dc56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dc5a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800dc5e:	687a      	ldr	r2, [r7, #4]
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	781b      	ldrb	r3, [r3, #0]
 800dc64:	009b      	lsls	r3, r3, #2
 800dc66:	441a      	add	r2, r3
 800dc68:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800dc6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dc70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dc74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dc78:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800dc7c:	b29b      	uxth	r3, r3
 800dc7e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	78db      	ldrb	r3, [r3, #3]
 800dc84:	2b01      	cmp	r3, #1
 800dc86:	d024      	beq.n	800dcd2 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800dc88:	687a      	ldr	r2, [r7, #4]
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	781b      	ldrb	r3, [r3, #0]
 800dc8e:	009b      	lsls	r3, r3, #2
 800dc90:	4413      	add	r3, r2
 800dc92:	881b      	ldrh	r3, [r3, #0]
 800dc94:	b29b      	uxth	r3, r3
 800dc96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dc9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dc9e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800dca2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800dca6:	f083 0320 	eor.w	r3, r3, #32
 800dcaa:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800dcae:	687a      	ldr	r2, [r7, #4]
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	781b      	ldrb	r3, [r3, #0]
 800dcb4:	009b      	lsls	r3, r3, #2
 800dcb6:	441a      	add	r2, r3
 800dcb8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800dcbc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dcc0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dcc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dcc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dccc:	b29b      	uxth	r3, r3
 800dcce:	8013      	strh	r3, [r2, #0]
 800dcd0:	e01d      	b.n	800dd0e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800dcd2:	687a      	ldr	r2, [r7, #4]
 800dcd4:	683b      	ldr	r3, [r7, #0]
 800dcd6:	781b      	ldrb	r3, [r3, #0]
 800dcd8:	009b      	lsls	r3, r3, #2
 800dcda:	4413      	add	r3, r2
 800dcdc:	881b      	ldrh	r3, [r3, #0]
 800dcde:	b29b      	uxth	r3, r3
 800dce0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dce4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dce8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800dcec:	687a      	ldr	r2, [r7, #4]
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	781b      	ldrb	r3, [r3, #0]
 800dcf2:	009b      	lsls	r3, r3, #2
 800dcf4:	441a      	add	r2, r3
 800dcf6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800dcfa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dcfe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dd02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dd06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd0a:	b29b      	uxth	r3, r3
 800dd0c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800dd0e:	687a      	ldr	r2, [r7, #4]
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	781b      	ldrb	r3, [r3, #0]
 800dd14:	009b      	lsls	r3, r3, #2
 800dd16:	4413      	add	r3, r2
 800dd18:	881b      	ldrh	r3, [r3, #0]
 800dd1a:	b29b      	uxth	r3, r3
 800dd1c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800dd20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dd24:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800dd28:	687a      	ldr	r2, [r7, #4]
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	781b      	ldrb	r3, [r3, #0]
 800dd2e:	009b      	lsls	r3, r3, #2
 800dd30:	441a      	add	r2, r3
 800dd32:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800dd36:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dd3a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dd3e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dd42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dd46:	b29b      	uxth	r3, r3
 800dd48:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800dd4a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800dd4e:	4618      	mov	r0, r3
 800dd50:	3774      	adds	r7, #116	@ 0x74
 800dd52:	46bd      	mov	sp, r7
 800dd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd58:	4770      	bx	lr
 800dd5a:	bf00      	nop

0800dd5c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800dd5c:	b480      	push	{r7}
 800dd5e:	b08d      	sub	sp, #52	@ 0x34
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
 800dd64:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	7b1b      	ldrb	r3, [r3, #12]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	f040 808e 	bne.w	800de8c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800dd70:	683b      	ldr	r3, [r7, #0]
 800dd72:	785b      	ldrb	r3, [r3, #1]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d044      	beq.n	800de02 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800dd78:	687a      	ldr	r2, [r7, #4]
 800dd7a:	683b      	ldr	r3, [r7, #0]
 800dd7c:	781b      	ldrb	r3, [r3, #0]
 800dd7e:	009b      	lsls	r3, r3, #2
 800dd80:	4413      	add	r3, r2
 800dd82:	881b      	ldrh	r3, [r3, #0]
 800dd84:	81bb      	strh	r3, [r7, #12]
 800dd86:	89bb      	ldrh	r3, [r7, #12]
 800dd88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d01b      	beq.n	800ddc8 <USB_DeactivateEndpoint+0x6c>
 800dd90:	687a      	ldr	r2, [r7, #4]
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	781b      	ldrb	r3, [r3, #0]
 800dd96:	009b      	lsls	r3, r3, #2
 800dd98:	4413      	add	r3, r2
 800dd9a:	881b      	ldrh	r3, [r3, #0]
 800dd9c:	b29b      	uxth	r3, r3
 800dd9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dda2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dda6:	817b      	strh	r3, [r7, #10]
 800dda8:	687a      	ldr	r2, [r7, #4]
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	781b      	ldrb	r3, [r3, #0]
 800ddae:	009b      	lsls	r3, r3, #2
 800ddb0:	441a      	add	r2, r3
 800ddb2:	897b      	ldrh	r3, [r7, #10]
 800ddb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ddb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ddbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ddc0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800ddc4:	b29b      	uxth	r3, r3
 800ddc6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ddc8:	687a      	ldr	r2, [r7, #4]
 800ddca:	683b      	ldr	r3, [r7, #0]
 800ddcc:	781b      	ldrb	r3, [r3, #0]
 800ddce:	009b      	lsls	r3, r3, #2
 800ddd0:	4413      	add	r3, r2
 800ddd2:	881b      	ldrh	r3, [r3, #0]
 800ddd4:	b29b      	uxth	r3, r3
 800ddd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ddda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ddde:	813b      	strh	r3, [r7, #8]
 800dde0:	687a      	ldr	r2, [r7, #4]
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	781b      	ldrb	r3, [r3, #0]
 800dde6:	009b      	lsls	r3, r3, #2
 800dde8:	441a      	add	r2, r3
 800ddea:	893b      	ldrh	r3, [r7, #8]
 800ddec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ddf0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ddf4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ddf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ddfc:	b29b      	uxth	r3, r3
 800ddfe:	8013      	strh	r3, [r2, #0]
 800de00:	e192      	b.n	800e128 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800de02:	687a      	ldr	r2, [r7, #4]
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	781b      	ldrb	r3, [r3, #0]
 800de08:	009b      	lsls	r3, r3, #2
 800de0a:	4413      	add	r3, r2
 800de0c:	881b      	ldrh	r3, [r3, #0]
 800de0e:	827b      	strh	r3, [r7, #18]
 800de10:	8a7b      	ldrh	r3, [r7, #18]
 800de12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800de16:	2b00      	cmp	r3, #0
 800de18:	d01b      	beq.n	800de52 <USB_DeactivateEndpoint+0xf6>
 800de1a:	687a      	ldr	r2, [r7, #4]
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	781b      	ldrb	r3, [r3, #0]
 800de20:	009b      	lsls	r3, r3, #2
 800de22:	4413      	add	r3, r2
 800de24:	881b      	ldrh	r3, [r3, #0]
 800de26:	b29b      	uxth	r3, r3
 800de28:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800de2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800de30:	823b      	strh	r3, [r7, #16]
 800de32:	687a      	ldr	r2, [r7, #4]
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	781b      	ldrb	r3, [r3, #0]
 800de38:	009b      	lsls	r3, r3, #2
 800de3a:	441a      	add	r2, r3
 800de3c:	8a3b      	ldrh	r3, [r7, #16]
 800de3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800de42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800de46:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800de4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de4e:	b29b      	uxth	r3, r3
 800de50:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800de52:	687a      	ldr	r2, [r7, #4]
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	781b      	ldrb	r3, [r3, #0]
 800de58:	009b      	lsls	r3, r3, #2
 800de5a:	4413      	add	r3, r2
 800de5c:	881b      	ldrh	r3, [r3, #0]
 800de5e:	b29b      	uxth	r3, r3
 800de60:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800de64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800de68:	81fb      	strh	r3, [r7, #14]
 800de6a:	687a      	ldr	r2, [r7, #4]
 800de6c:	683b      	ldr	r3, [r7, #0]
 800de6e:	781b      	ldrb	r3, [r3, #0]
 800de70:	009b      	lsls	r3, r3, #2
 800de72:	441a      	add	r2, r3
 800de74:	89fb      	ldrh	r3, [r7, #14]
 800de76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800de7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800de7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800de82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de86:	b29b      	uxth	r3, r3
 800de88:	8013      	strh	r3, [r2, #0]
 800de8a:	e14d      	b.n	800e128 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	785b      	ldrb	r3, [r3, #1]
 800de90:	2b00      	cmp	r3, #0
 800de92:	f040 80a5 	bne.w	800dfe0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800de96:	687a      	ldr	r2, [r7, #4]
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	781b      	ldrb	r3, [r3, #0]
 800de9c:	009b      	lsls	r3, r3, #2
 800de9e:	4413      	add	r3, r2
 800dea0:	881b      	ldrh	r3, [r3, #0]
 800dea2:	843b      	strh	r3, [r7, #32]
 800dea4:	8c3b      	ldrh	r3, [r7, #32]
 800dea6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d01b      	beq.n	800dee6 <USB_DeactivateEndpoint+0x18a>
 800deae:	687a      	ldr	r2, [r7, #4]
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	781b      	ldrb	r3, [r3, #0]
 800deb4:	009b      	lsls	r3, r3, #2
 800deb6:	4413      	add	r3, r2
 800deb8:	881b      	ldrh	r3, [r3, #0]
 800deba:	b29b      	uxth	r3, r3
 800debc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dec0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800dec4:	83fb      	strh	r3, [r7, #30]
 800dec6:	687a      	ldr	r2, [r7, #4]
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	781b      	ldrb	r3, [r3, #0]
 800decc:	009b      	lsls	r3, r3, #2
 800dece:	441a      	add	r2, r3
 800ded0:	8bfb      	ldrh	r3, [r7, #30]
 800ded2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ded6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800deda:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800dede:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dee2:	b29b      	uxth	r3, r3
 800dee4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800dee6:	687a      	ldr	r2, [r7, #4]
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	781b      	ldrb	r3, [r3, #0]
 800deec:	009b      	lsls	r3, r3, #2
 800deee:	4413      	add	r3, r2
 800def0:	881b      	ldrh	r3, [r3, #0]
 800def2:	83bb      	strh	r3, [r7, #28]
 800def4:	8bbb      	ldrh	r3, [r7, #28]
 800def6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800defa:	2b00      	cmp	r3, #0
 800defc:	d01b      	beq.n	800df36 <USB_DeactivateEndpoint+0x1da>
 800defe:	687a      	ldr	r2, [r7, #4]
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	781b      	ldrb	r3, [r3, #0]
 800df04:	009b      	lsls	r3, r3, #2
 800df06:	4413      	add	r3, r2
 800df08:	881b      	ldrh	r3, [r3, #0]
 800df0a:	b29b      	uxth	r3, r3
 800df0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800df10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800df14:	837b      	strh	r3, [r7, #26]
 800df16:	687a      	ldr	r2, [r7, #4]
 800df18:	683b      	ldr	r3, [r7, #0]
 800df1a:	781b      	ldrb	r3, [r3, #0]
 800df1c:	009b      	lsls	r3, r3, #2
 800df1e:	441a      	add	r2, r3
 800df20:	8b7b      	ldrh	r3, [r7, #26]
 800df22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800df26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800df2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800df2e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800df32:	b29b      	uxth	r3, r3
 800df34:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800df36:	687a      	ldr	r2, [r7, #4]
 800df38:	683b      	ldr	r3, [r7, #0]
 800df3a:	781b      	ldrb	r3, [r3, #0]
 800df3c:	009b      	lsls	r3, r3, #2
 800df3e:	4413      	add	r3, r2
 800df40:	881b      	ldrh	r3, [r3, #0]
 800df42:	b29b      	uxth	r3, r3
 800df44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800df48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800df4c:	833b      	strh	r3, [r7, #24]
 800df4e:	687a      	ldr	r2, [r7, #4]
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	781b      	ldrb	r3, [r3, #0]
 800df54:	009b      	lsls	r3, r3, #2
 800df56:	441a      	add	r2, r3
 800df58:	8b3b      	ldrh	r3, [r7, #24]
 800df5a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800df5e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800df62:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800df66:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800df6a:	b29b      	uxth	r3, r3
 800df6c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800df6e:	687a      	ldr	r2, [r7, #4]
 800df70:	683b      	ldr	r3, [r7, #0]
 800df72:	781b      	ldrb	r3, [r3, #0]
 800df74:	009b      	lsls	r3, r3, #2
 800df76:	4413      	add	r3, r2
 800df78:	881b      	ldrh	r3, [r3, #0]
 800df7a:	b29b      	uxth	r3, r3
 800df7c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800df80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800df84:	82fb      	strh	r3, [r7, #22]
 800df86:	687a      	ldr	r2, [r7, #4]
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	781b      	ldrb	r3, [r3, #0]
 800df8c:	009b      	lsls	r3, r3, #2
 800df8e:	441a      	add	r2, r3
 800df90:	8afb      	ldrh	r3, [r7, #22]
 800df92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800df96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800df9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800df9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dfa2:	b29b      	uxth	r3, r3
 800dfa4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800dfa6:	687a      	ldr	r2, [r7, #4]
 800dfa8:	683b      	ldr	r3, [r7, #0]
 800dfaa:	781b      	ldrb	r3, [r3, #0]
 800dfac:	009b      	lsls	r3, r3, #2
 800dfae:	4413      	add	r3, r2
 800dfb0:	881b      	ldrh	r3, [r3, #0]
 800dfb2:	b29b      	uxth	r3, r3
 800dfb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800dfb8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dfbc:	82bb      	strh	r3, [r7, #20]
 800dfbe:	687a      	ldr	r2, [r7, #4]
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	781b      	ldrb	r3, [r3, #0]
 800dfc4:	009b      	lsls	r3, r3, #2
 800dfc6:	441a      	add	r2, r3
 800dfc8:	8abb      	ldrh	r3, [r7, #20]
 800dfca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800dfce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800dfd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800dfd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dfda:	b29b      	uxth	r3, r3
 800dfdc:	8013      	strh	r3, [r2, #0]
 800dfde:	e0a3      	b.n	800e128 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800dfe0:	687a      	ldr	r2, [r7, #4]
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	781b      	ldrb	r3, [r3, #0]
 800dfe6:	009b      	lsls	r3, r3, #2
 800dfe8:	4413      	add	r3, r2
 800dfea:	881b      	ldrh	r3, [r3, #0]
 800dfec:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800dfee:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800dff0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d01b      	beq.n	800e030 <USB_DeactivateEndpoint+0x2d4>
 800dff8:	687a      	ldr	r2, [r7, #4]
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	781b      	ldrb	r3, [r3, #0]
 800dffe:	009b      	lsls	r3, r3, #2
 800e000:	4413      	add	r3, r2
 800e002:	881b      	ldrh	r3, [r3, #0]
 800e004:	b29b      	uxth	r3, r3
 800e006:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e00a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e00e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800e010:	687a      	ldr	r2, [r7, #4]
 800e012:	683b      	ldr	r3, [r7, #0]
 800e014:	781b      	ldrb	r3, [r3, #0]
 800e016:	009b      	lsls	r3, r3, #2
 800e018:	441a      	add	r2, r3
 800e01a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800e01c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e020:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e024:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e028:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e02c:	b29b      	uxth	r3, r3
 800e02e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800e030:	687a      	ldr	r2, [r7, #4]
 800e032:	683b      	ldr	r3, [r7, #0]
 800e034:	781b      	ldrb	r3, [r3, #0]
 800e036:	009b      	lsls	r3, r3, #2
 800e038:	4413      	add	r3, r2
 800e03a:	881b      	ldrh	r3, [r3, #0]
 800e03c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800e03e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e044:	2b00      	cmp	r3, #0
 800e046:	d01b      	beq.n	800e080 <USB_DeactivateEndpoint+0x324>
 800e048:	687a      	ldr	r2, [r7, #4]
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	781b      	ldrb	r3, [r3, #0]
 800e04e:	009b      	lsls	r3, r3, #2
 800e050:	4413      	add	r3, r2
 800e052:	881b      	ldrh	r3, [r3, #0]
 800e054:	b29b      	uxth	r3, r3
 800e056:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e05a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e05e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e060:	687a      	ldr	r2, [r7, #4]
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	781b      	ldrb	r3, [r3, #0]
 800e066:	009b      	lsls	r3, r3, #2
 800e068:	441a      	add	r2, r3
 800e06a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e06c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e070:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e074:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e078:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800e07c:	b29b      	uxth	r3, r3
 800e07e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800e080:	687a      	ldr	r2, [r7, #4]
 800e082:	683b      	ldr	r3, [r7, #0]
 800e084:	781b      	ldrb	r3, [r3, #0]
 800e086:	009b      	lsls	r3, r3, #2
 800e088:	4413      	add	r3, r2
 800e08a:	881b      	ldrh	r3, [r3, #0]
 800e08c:	b29b      	uxth	r3, r3
 800e08e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e096:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800e098:	687a      	ldr	r2, [r7, #4]
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	781b      	ldrb	r3, [r3, #0]
 800e09e:	009b      	lsls	r3, r3, #2
 800e0a0:	441a      	add	r2, r3
 800e0a2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800e0a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e0a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e0ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e0b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0b4:	b29b      	uxth	r3, r3
 800e0b6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800e0b8:	687a      	ldr	r2, [r7, #4]
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	781b      	ldrb	r3, [r3, #0]
 800e0be:	009b      	lsls	r3, r3, #2
 800e0c0:	4413      	add	r3, r2
 800e0c2:	881b      	ldrh	r3, [r3, #0]
 800e0c4:	b29b      	uxth	r3, r3
 800e0c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e0ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e0ce:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800e0d0:	687a      	ldr	r2, [r7, #4]
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	781b      	ldrb	r3, [r3, #0]
 800e0d6:	009b      	lsls	r3, r3, #2
 800e0d8:	441a      	add	r2, r3
 800e0da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e0dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e0e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e0e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e0e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0ec:	b29b      	uxth	r3, r3
 800e0ee:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800e0f0:	687a      	ldr	r2, [r7, #4]
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	781b      	ldrb	r3, [r3, #0]
 800e0f6:	009b      	lsls	r3, r3, #2
 800e0f8:	4413      	add	r3, r2
 800e0fa:	881b      	ldrh	r3, [r3, #0]
 800e0fc:	b29b      	uxth	r3, r3
 800e0fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800e102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e106:	847b      	strh	r3, [r7, #34]	@ 0x22
 800e108:	687a      	ldr	r2, [r7, #4]
 800e10a:	683b      	ldr	r3, [r7, #0]
 800e10c:	781b      	ldrb	r3, [r3, #0]
 800e10e:	009b      	lsls	r3, r3, #2
 800e110:	441a      	add	r2, r3
 800e112:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e114:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e118:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e11c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e120:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e124:	b29b      	uxth	r3, r3
 800e126:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800e128:	2300      	movs	r3, #0
}
 800e12a:	4618      	mov	r0, r3
 800e12c:	3734      	adds	r7, #52	@ 0x34
 800e12e:	46bd      	mov	sp, r7
 800e130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e134:	4770      	bx	lr

0800e136 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800e136:	b580      	push	{r7, lr}
 800e138:	b0c2      	sub	sp, #264	@ 0x108
 800e13a:	af00      	add	r7, sp, #0
 800e13c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e140:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e144:	6018      	str	r0, [r3, #0]
 800e146:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e14a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e14e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e150:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e154:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	785b      	ldrb	r3, [r3, #1]
 800e15c:	2b01      	cmp	r3, #1
 800e15e:	f040 86b7 	bne.w	800eed0 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800e162:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e166:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	699a      	ldr	r2, [r3, #24]
 800e16e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e172:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	691b      	ldr	r3, [r3, #16]
 800e17a:	429a      	cmp	r2, r3
 800e17c:	d908      	bls.n	800e190 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800e17e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e182:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	691b      	ldr	r3, [r3, #16]
 800e18a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800e18e:	e007      	b.n	800e1a0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800e190:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e194:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	699b      	ldr	r3, [r3, #24]
 800e19c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800e1a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	7b1b      	ldrb	r3, [r3, #12]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d13a      	bne.n	800e226 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800e1b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	6959      	ldr	r1, [r3, #20]
 800e1bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	88da      	ldrh	r2, [r3, #6]
 800e1c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e1cc:	b29b      	uxth	r3, r3
 800e1ce:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800e1d2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800e1d6:	6800      	ldr	r0, [r0, #0]
 800e1d8:	f001 fc98 	bl	800fb0c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800e1dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1e0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	613b      	str	r3, [r7, #16]
 800e1e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e1ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e1f6:	b29b      	uxth	r3, r3
 800e1f8:	461a      	mov	r2, r3
 800e1fa:	693b      	ldr	r3, [r7, #16]
 800e1fc:	4413      	add	r3, r2
 800e1fe:	613b      	str	r3, [r7, #16]
 800e200:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e204:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	781b      	ldrb	r3, [r3, #0]
 800e20c:	00da      	lsls	r2, r3, #3
 800e20e:	693b      	ldr	r3, [r7, #16]
 800e210:	4413      	add	r3, r2
 800e212:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e216:	60fb      	str	r3, [r7, #12]
 800e218:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e21c:	b29a      	uxth	r2, r3
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	801a      	strh	r2, [r3, #0]
 800e222:	f000 be1f 	b.w	800ee64 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800e226:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e22a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	78db      	ldrb	r3, [r3, #3]
 800e232:	2b02      	cmp	r3, #2
 800e234:	f040 8462 	bne.w	800eafc <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800e238:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e23c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	6a1a      	ldr	r2, [r3, #32]
 800e244:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e248:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	691b      	ldr	r3, [r3, #16]
 800e250:	429a      	cmp	r2, r3
 800e252:	f240 83df 	bls.w	800ea14 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800e256:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e25a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e25e:	681a      	ldr	r2, [r3, #0]
 800e260:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e264:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	781b      	ldrb	r3, [r3, #0]
 800e26c:	009b      	lsls	r3, r3, #2
 800e26e:	4413      	add	r3, r2
 800e270:	881b      	ldrh	r3, [r3, #0]
 800e272:	b29b      	uxth	r3, r3
 800e274:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800e278:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e27c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800e280:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e284:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e288:	681a      	ldr	r2, [r3, #0]
 800e28a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e28e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	781b      	ldrb	r3, [r3, #0]
 800e296:	009b      	lsls	r3, r3, #2
 800e298:	441a      	add	r2, r3
 800e29a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800e29e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800e2a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800e2a6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800e2aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e2ae:	b29b      	uxth	r3, r3
 800e2b0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800e2b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	6a1a      	ldr	r2, [r3, #32]
 800e2be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e2c2:	1ad2      	subs	r2, r2, r3
 800e2c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800e2d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e2d8:	681a      	ldr	r2, [r3, #0]
 800e2da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	781b      	ldrb	r3, [r3, #0]
 800e2e6:	009b      	lsls	r3, r3, #2
 800e2e8:	4413      	add	r3, r2
 800e2ea:	881b      	ldrh	r3, [r3, #0]
 800e2ec:	b29b      	uxth	r3, r3
 800e2ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	f000 81c7 	beq.w	800e686 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e2f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e2fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	633b      	str	r3, [r7, #48]	@ 0x30
 800e304:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e308:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	785b      	ldrb	r3, [r3, #1]
 800e310:	2b00      	cmp	r3, #0
 800e312:	d177      	bne.n	800e404 <USB_EPStartXfer+0x2ce>
 800e314:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e318:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e320:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e324:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e32e:	b29b      	uxth	r3, r3
 800e330:	461a      	mov	r2, r3
 800e332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e334:	4413      	add	r3, r2
 800e336:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e338:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e33c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	781b      	ldrb	r3, [r3, #0]
 800e344:	00da      	lsls	r2, r3, #3
 800e346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e348:	4413      	add	r3, r2
 800e34a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e34e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e352:	881b      	ldrh	r3, [r3, #0]
 800e354:	b29b      	uxth	r3, r3
 800e356:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e35a:	b29a      	uxth	r2, r3
 800e35c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e35e:	801a      	strh	r2, [r3, #0]
 800e360:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e364:	2b3e      	cmp	r3, #62	@ 0x3e
 800e366:	d921      	bls.n	800e3ac <USB_EPStartXfer+0x276>
 800e368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e36c:	095b      	lsrs	r3, r3, #5
 800e36e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800e372:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e376:	f003 031f 	and.w	r3, r3, #31
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d104      	bne.n	800e388 <USB_EPStartXfer+0x252>
 800e37e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800e382:	3b01      	subs	r3, #1
 800e384:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800e388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e38a:	881b      	ldrh	r3, [r3, #0]
 800e38c:	b29a      	uxth	r2, r3
 800e38e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800e392:	b29b      	uxth	r3, r3
 800e394:	029b      	lsls	r3, r3, #10
 800e396:	b29b      	uxth	r3, r3
 800e398:	4313      	orrs	r3, r2
 800e39a:	b29b      	uxth	r3, r3
 800e39c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e3a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e3a4:	b29a      	uxth	r2, r3
 800e3a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3a8:	801a      	strh	r2, [r3, #0]
 800e3aa:	e050      	b.n	800e44e <USB_EPStartXfer+0x318>
 800e3ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d10a      	bne.n	800e3ca <USB_EPStartXfer+0x294>
 800e3b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3b6:	881b      	ldrh	r3, [r3, #0]
 800e3b8:	b29b      	uxth	r3, r3
 800e3ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e3be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e3c2:	b29a      	uxth	r2, r3
 800e3c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3c6:	801a      	strh	r2, [r3, #0]
 800e3c8:	e041      	b.n	800e44e <USB_EPStartXfer+0x318>
 800e3ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3ce:	085b      	lsrs	r3, r3, #1
 800e3d0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800e3d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e3d8:	f003 0301 	and.w	r3, r3, #1
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d004      	beq.n	800e3ea <USB_EPStartXfer+0x2b4>
 800e3e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800e3e4:	3301      	adds	r3, #1
 800e3e6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800e3ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3ec:	881b      	ldrh	r3, [r3, #0]
 800e3ee:	b29a      	uxth	r2, r3
 800e3f0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800e3f4:	b29b      	uxth	r3, r3
 800e3f6:	029b      	lsls	r3, r3, #10
 800e3f8:	b29b      	uxth	r3, r3
 800e3fa:	4313      	orrs	r3, r2
 800e3fc:	b29a      	uxth	r2, r3
 800e3fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e400:	801a      	strh	r2, [r3, #0]
 800e402:	e024      	b.n	800e44e <USB_EPStartXfer+0x318>
 800e404:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e408:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	785b      	ldrb	r3, [r3, #1]
 800e410:	2b01      	cmp	r3, #1
 800e412:	d11c      	bne.n	800e44e <USB_EPStartXfer+0x318>
 800e414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e418:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e422:	b29b      	uxth	r3, r3
 800e424:	461a      	mov	r2, r3
 800e426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e428:	4413      	add	r3, r2
 800e42a:	633b      	str	r3, [r7, #48]	@ 0x30
 800e42c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e430:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	781b      	ldrb	r3, [r3, #0]
 800e438:	00da      	lsls	r2, r3, #3
 800e43a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e43c:	4413      	add	r3, r2
 800e43e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e442:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e444:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e448:	b29a      	uxth	r2, r3
 800e44a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e44c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800e44e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e452:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	895b      	ldrh	r3, [r3, #10]
 800e45a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e45e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e462:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	6959      	ldr	r1, [r3, #20]
 800e46a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e46e:	b29b      	uxth	r3, r3
 800e470:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e474:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800e478:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800e47c:	6800      	ldr	r0, [r0, #0]
 800e47e:	f001 fb45 	bl	800fb0c <USB_WritePMA>
            ep->xfer_buff += len;
 800e482:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e486:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	695a      	ldr	r2, [r3, #20]
 800e48e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e492:	441a      	add	r2, r3
 800e494:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e498:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e4a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	6a1a      	ldr	r2, [r3, #32]
 800e4ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	691b      	ldr	r3, [r3, #16]
 800e4b8:	429a      	cmp	r2, r3
 800e4ba:	d90f      	bls.n	800e4dc <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800e4bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	6a1a      	ldr	r2, [r3, #32]
 800e4c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e4cc:	1ad2      	subs	r2, r2, r3
 800e4ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	621a      	str	r2, [r3, #32]
 800e4da:	e00e      	b.n	800e4fa <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800e4dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	6a1b      	ldr	r3, [r3, #32]
 800e4e8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800e4ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	2200      	movs	r2, #0
 800e4f8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e4fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e4fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	785b      	ldrb	r3, [r3, #1]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d177      	bne.n	800e5fa <USB_EPStartXfer+0x4c4>
 800e50a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e50e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	61bb      	str	r3, [r7, #24]
 800e516:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e51a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e524:	b29b      	uxth	r3, r3
 800e526:	461a      	mov	r2, r3
 800e528:	69bb      	ldr	r3, [r7, #24]
 800e52a:	4413      	add	r3, r2
 800e52c:	61bb      	str	r3, [r7, #24]
 800e52e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e532:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	781b      	ldrb	r3, [r3, #0]
 800e53a:	00da      	lsls	r2, r3, #3
 800e53c:	69bb      	ldr	r3, [r7, #24]
 800e53e:	4413      	add	r3, r2
 800e540:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e544:	617b      	str	r3, [r7, #20]
 800e546:	697b      	ldr	r3, [r7, #20]
 800e548:	881b      	ldrh	r3, [r3, #0]
 800e54a:	b29b      	uxth	r3, r3
 800e54c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e550:	b29a      	uxth	r2, r3
 800e552:	697b      	ldr	r3, [r7, #20]
 800e554:	801a      	strh	r2, [r3, #0]
 800e556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e55a:	2b3e      	cmp	r3, #62	@ 0x3e
 800e55c:	d921      	bls.n	800e5a2 <USB_EPStartXfer+0x46c>
 800e55e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e562:	095b      	lsrs	r3, r3, #5
 800e564:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800e568:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e56c:	f003 031f 	and.w	r3, r3, #31
 800e570:	2b00      	cmp	r3, #0
 800e572:	d104      	bne.n	800e57e <USB_EPStartXfer+0x448>
 800e574:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e578:	3b01      	subs	r3, #1
 800e57a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800e57e:	697b      	ldr	r3, [r7, #20]
 800e580:	881b      	ldrh	r3, [r3, #0]
 800e582:	b29a      	uxth	r2, r3
 800e584:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e588:	b29b      	uxth	r3, r3
 800e58a:	029b      	lsls	r3, r3, #10
 800e58c:	b29b      	uxth	r3, r3
 800e58e:	4313      	orrs	r3, r2
 800e590:	b29b      	uxth	r3, r3
 800e592:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e596:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e59a:	b29a      	uxth	r2, r3
 800e59c:	697b      	ldr	r3, [r7, #20]
 800e59e:	801a      	strh	r2, [r3, #0]
 800e5a0:	e056      	b.n	800e650 <USB_EPStartXfer+0x51a>
 800e5a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d10a      	bne.n	800e5c0 <USB_EPStartXfer+0x48a>
 800e5aa:	697b      	ldr	r3, [r7, #20]
 800e5ac:	881b      	ldrh	r3, [r3, #0]
 800e5ae:	b29b      	uxth	r3, r3
 800e5b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e5b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e5b8:	b29a      	uxth	r2, r3
 800e5ba:	697b      	ldr	r3, [r7, #20]
 800e5bc:	801a      	strh	r2, [r3, #0]
 800e5be:	e047      	b.n	800e650 <USB_EPStartXfer+0x51a>
 800e5c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5c4:	085b      	lsrs	r3, r3, #1
 800e5c6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800e5ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e5ce:	f003 0301 	and.w	r3, r3, #1
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d004      	beq.n	800e5e0 <USB_EPStartXfer+0x4aa>
 800e5d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e5da:	3301      	adds	r3, #1
 800e5dc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800e5e0:	697b      	ldr	r3, [r7, #20]
 800e5e2:	881b      	ldrh	r3, [r3, #0]
 800e5e4:	b29a      	uxth	r2, r3
 800e5e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800e5ea:	b29b      	uxth	r3, r3
 800e5ec:	029b      	lsls	r3, r3, #10
 800e5ee:	b29b      	uxth	r3, r3
 800e5f0:	4313      	orrs	r3, r2
 800e5f2:	b29a      	uxth	r2, r3
 800e5f4:	697b      	ldr	r3, [r7, #20]
 800e5f6:	801a      	strh	r2, [r3, #0]
 800e5f8:	e02a      	b.n	800e650 <USB_EPStartXfer+0x51a>
 800e5fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e5fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	785b      	ldrb	r3, [r3, #1]
 800e606:	2b01      	cmp	r3, #1
 800e608:	d122      	bne.n	800e650 <USB_EPStartXfer+0x51a>
 800e60a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e60e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	623b      	str	r3, [r7, #32]
 800e616:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e61a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e624:	b29b      	uxth	r3, r3
 800e626:	461a      	mov	r2, r3
 800e628:	6a3b      	ldr	r3, [r7, #32]
 800e62a:	4413      	add	r3, r2
 800e62c:	623b      	str	r3, [r7, #32]
 800e62e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e632:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	781b      	ldrb	r3, [r3, #0]
 800e63a:	00da      	lsls	r2, r3, #3
 800e63c:	6a3b      	ldr	r3, [r7, #32]
 800e63e:	4413      	add	r3, r2
 800e640:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e644:	61fb      	str	r3, [r7, #28]
 800e646:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e64a:	b29a      	uxth	r2, r3
 800e64c:	69fb      	ldr	r3, [r7, #28]
 800e64e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e650:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e654:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	891b      	ldrh	r3, [r3, #8]
 800e65c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e660:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e664:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	6959      	ldr	r1, [r3, #20]
 800e66c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e670:	b29b      	uxth	r3, r3
 800e672:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e676:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800e67a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800e67e:	6800      	ldr	r0, [r0, #0]
 800e680:	f001 fa44 	bl	800fb0c <USB_WritePMA>
 800e684:	e3ee      	b.n	800ee64 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800e686:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e68a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	785b      	ldrb	r3, [r3, #1]
 800e692:	2b00      	cmp	r3, #0
 800e694:	d177      	bne.n	800e786 <USB_EPStartXfer+0x650>
 800e696:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e69a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e6a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e6a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e6b0:	b29b      	uxth	r3, r3
 800e6b2:	461a      	mov	r2, r3
 800e6b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e6b6:	4413      	add	r3, r2
 800e6b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e6ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e6be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	781b      	ldrb	r3, [r3, #0]
 800e6c6:	00da      	lsls	r2, r3, #3
 800e6c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e6ca:	4413      	add	r3, r2
 800e6cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e6d0:	647b      	str	r3, [r7, #68]	@ 0x44
 800e6d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e6d4:	881b      	ldrh	r3, [r3, #0]
 800e6d6:	b29b      	uxth	r3, r3
 800e6d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e6dc:	b29a      	uxth	r2, r3
 800e6de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e6e0:	801a      	strh	r2, [r3, #0]
 800e6e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6e6:	2b3e      	cmp	r3, #62	@ 0x3e
 800e6e8:	d921      	bls.n	800e72e <USB_EPStartXfer+0x5f8>
 800e6ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6ee:	095b      	lsrs	r3, r3, #5
 800e6f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800e6f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e6f8:	f003 031f 	and.w	r3, r3, #31
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d104      	bne.n	800e70a <USB_EPStartXfer+0x5d4>
 800e700:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800e704:	3b01      	subs	r3, #1
 800e706:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800e70a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e70c:	881b      	ldrh	r3, [r3, #0]
 800e70e:	b29a      	uxth	r2, r3
 800e710:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800e714:	b29b      	uxth	r3, r3
 800e716:	029b      	lsls	r3, r3, #10
 800e718:	b29b      	uxth	r3, r3
 800e71a:	4313      	orrs	r3, r2
 800e71c:	b29b      	uxth	r3, r3
 800e71e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e722:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e726:	b29a      	uxth	r2, r3
 800e728:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e72a:	801a      	strh	r2, [r3, #0]
 800e72c:	e056      	b.n	800e7dc <USB_EPStartXfer+0x6a6>
 800e72e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e732:	2b00      	cmp	r3, #0
 800e734:	d10a      	bne.n	800e74c <USB_EPStartXfer+0x616>
 800e736:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e738:	881b      	ldrh	r3, [r3, #0]
 800e73a:	b29b      	uxth	r3, r3
 800e73c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e740:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e744:	b29a      	uxth	r2, r3
 800e746:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e748:	801a      	strh	r2, [r3, #0]
 800e74a:	e047      	b.n	800e7dc <USB_EPStartXfer+0x6a6>
 800e74c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e750:	085b      	lsrs	r3, r3, #1
 800e752:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800e756:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e75a:	f003 0301 	and.w	r3, r3, #1
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d004      	beq.n	800e76c <USB_EPStartXfer+0x636>
 800e762:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800e766:	3301      	adds	r3, #1
 800e768:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800e76c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e76e:	881b      	ldrh	r3, [r3, #0]
 800e770:	b29a      	uxth	r2, r3
 800e772:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800e776:	b29b      	uxth	r3, r3
 800e778:	029b      	lsls	r3, r3, #10
 800e77a:	b29b      	uxth	r3, r3
 800e77c:	4313      	orrs	r3, r2
 800e77e:	b29a      	uxth	r2, r3
 800e780:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e782:	801a      	strh	r2, [r3, #0]
 800e784:	e02a      	b.n	800e7dc <USB_EPStartXfer+0x6a6>
 800e786:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e78a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	785b      	ldrb	r3, [r3, #1]
 800e792:	2b01      	cmp	r3, #1
 800e794:	d122      	bne.n	800e7dc <USB_EPStartXfer+0x6a6>
 800e796:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e79a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	653b      	str	r3, [r7, #80]	@ 0x50
 800e7a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e7a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e7b0:	b29b      	uxth	r3, r3
 800e7b2:	461a      	mov	r2, r3
 800e7b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e7b6:	4413      	add	r3, r2
 800e7b8:	653b      	str	r3, [r7, #80]	@ 0x50
 800e7ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e7be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	781b      	ldrb	r3, [r3, #0]
 800e7c6:	00da      	lsls	r2, r3, #3
 800e7c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e7ca:	4413      	add	r3, r2
 800e7cc:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800e7d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e7d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7d6:	b29a      	uxth	r2, r3
 800e7d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e7da:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800e7dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e7e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	891b      	ldrh	r3, [r3, #8]
 800e7e8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e7ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e7f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	6959      	ldr	r1, [r3, #20]
 800e7f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e7fc:	b29b      	uxth	r3, r3
 800e7fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800e802:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800e806:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800e80a:	6800      	ldr	r0, [r0, #0]
 800e80c:	f001 f97e 	bl	800fb0c <USB_WritePMA>
            ep->xfer_buff += len;
 800e810:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e814:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	695a      	ldr	r2, [r3, #20]
 800e81c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e820:	441a      	add	r2, r3
 800e822:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e826:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800e82e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e832:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	6a1a      	ldr	r2, [r3, #32]
 800e83a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e83e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	691b      	ldr	r3, [r3, #16]
 800e846:	429a      	cmp	r2, r3
 800e848:	d90f      	bls.n	800e86a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800e84a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e84e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	6a1a      	ldr	r2, [r3, #32]
 800e856:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e85a:	1ad2      	subs	r2, r2, r3
 800e85c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e860:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	621a      	str	r2, [r3, #32]
 800e868:	e00e      	b.n	800e888 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800e86a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e86e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	6a1b      	ldr	r3, [r3, #32]
 800e876:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 800e87a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e87e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	2200      	movs	r2, #0
 800e886:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800e888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e88c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	643b      	str	r3, [r7, #64]	@ 0x40
 800e894:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e898:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	785b      	ldrb	r3, [r3, #1]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d177      	bne.n	800e994 <USB_EPStartXfer+0x85e>
 800e8a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e8a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e8b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e8b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e8be:	b29b      	uxth	r3, r3
 800e8c0:	461a      	mov	r2, r3
 800e8c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8c4:	4413      	add	r3, r2
 800e8c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e8c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e8cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	781b      	ldrb	r3, [r3, #0]
 800e8d4:	00da      	lsls	r2, r3, #3
 800e8d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e8d8:	4413      	add	r3, r2
 800e8da:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e8de:	637b      	str	r3, [r7, #52]	@ 0x34
 800e8e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8e2:	881b      	ldrh	r3, [r3, #0]
 800e8e4:	b29b      	uxth	r3, r3
 800e8e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e8ea:	b29a      	uxth	r2, r3
 800e8ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8ee:	801a      	strh	r2, [r3, #0]
 800e8f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8f4:	2b3e      	cmp	r3, #62	@ 0x3e
 800e8f6:	d921      	bls.n	800e93c <USB_EPStartXfer+0x806>
 800e8f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e8fc:	095b      	lsrs	r3, r3, #5
 800e8fe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800e902:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e906:	f003 031f 	and.w	r3, r3, #31
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d104      	bne.n	800e918 <USB_EPStartXfer+0x7e2>
 800e90e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e912:	3b01      	subs	r3, #1
 800e914:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800e918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e91a:	881b      	ldrh	r3, [r3, #0]
 800e91c:	b29a      	uxth	r2, r3
 800e91e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e922:	b29b      	uxth	r3, r3
 800e924:	029b      	lsls	r3, r3, #10
 800e926:	b29b      	uxth	r3, r3
 800e928:	4313      	orrs	r3, r2
 800e92a:	b29b      	uxth	r3, r3
 800e92c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e930:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e934:	b29a      	uxth	r2, r3
 800e936:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e938:	801a      	strh	r2, [r3, #0]
 800e93a:	e050      	b.n	800e9de <USB_EPStartXfer+0x8a8>
 800e93c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e940:	2b00      	cmp	r3, #0
 800e942:	d10a      	bne.n	800e95a <USB_EPStartXfer+0x824>
 800e944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e946:	881b      	ldrh	r3, [r3, #0]
 800e948:	b29b      	uxth	r3, r3
 800e94a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800e94e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800e952:	b29a      	uxth	r2, r3
 800e954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e956:	801a      	strh	r2, [r3, #0]
 800e958:	e041      	b.n	800e9de <USB_EPStartXfer+0x8a8>
 800e95a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e95e:	085b      	lsrs	r3, r3, #1
 800e960:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800e964:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e968:	f003 0301 	and.w	r3, r3, #1
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d004      	beq.n	800e97a <USB_EPStartXfer+0x844>
 800e970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e974:	3301      	adds	r3, #1
 800e976:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800e97a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e97c:	881b      	ldrh	r3, [r3, #0]
 800e97e:	b29a      	uxth	r2, r3
 800e980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800e984:	b29b      	uxth	r3, r3
 800e986:	029b      	lsls	r3, r3, #10
 800e988:	b29b      	uxth	r3, r3
 800e98a:	4313      	orrs	r3, r2
 800e98c:	b29a      	uxth	r2, r3
 800e98e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e990:	801a      	strh	r2, [r3, #0]
 800e992:	e024      	b.n	800e9de <USB_EPStartXfer+0x8a8>
 800e994:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e998:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	785b      	ldrb	r3, [r3, #1]
 800e9a0:	2b01      	cmp	r3, #1
 800e9a2:	d11c      	bne.n	800e9de <USB_EPStartXfer+0x8a8>
 800e9a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e9a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800e9b2:	b29b      	uxth	r3, r3
 800e9b4:	461a      	mov	r2, r3
 800e9b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e9b8:	4413      	add	r3, r2
 800e9ba:	643b      	str	r3, [r7, #64]	@ 0x40
 800e9bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e9c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	781b      	ldrb	r3, [r3, #0]
 800e9c8:	00da      	lsls	r2, r3, #3
 800e9ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e9cc:	4413      	add	r3, r2
 800e9ce:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800e9d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e9d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9d8:	b29a      	uxth	r2, r3
 800e9da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e9dc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800e9de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e9e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	895b      	ldrh	r3, [r3, #10]
 800e9ea:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800e9ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800e9f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	6959      	ldr	r1, [r3, #20]
 800e9fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800e9fe:	b29b      	uxth	r3, r3
 800ea00:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ea04:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ea08:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ea0c:	6800      	ldr	r0, [r0, #0]
 800ea0e:	f001 f87d 	bl	800fb0c <USB_WritePMA>
 800ea12:	e227      	b.n	800ee64 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800ea14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ea18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	6a1b      	ldr	r3, [r3, #32]
 800ea20:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800ea24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ea28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ea2c:	681a      	ldr	r2, [r3, #0]
 800ea2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ea32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	781b      	ldrb	r3, [r3, #0]
 800ea3a:	009b      	lsls	r3, r3, #2
 800ea3c:	4413      	add	r3, r2
 800ea3e:	881b      	ldrh	r3, [r3, #0]
 800ea40:	b29b      	uxth	r3, r3
 800ea42:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 800ea46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ea4a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800ea4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ea52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ea56:	681a      	ldr	r2, [r3, #0]
 800ea58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ea5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	781b      	ldrb	r3, [r3, #0]
 800ea64:	009b      	lsls	r3, r3, #2
 800ea66:	441a      	add	r2, r3
 800ea68:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800ea6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800ea70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800ea74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ea78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ea7c:	b29b      	uxth	r3, r3
 800ea7e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ea80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ea84:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ea8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ea90:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ea9a:	b29b      	uxth	r3, r3
 800ea9c:	461a      	mov	r2, r3
 800ea9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eaa0:	4413      	add	r3, r2
 800eaa2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800eaa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eaa8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	781b      	ldrb	r3, [r3, #0]
 800eab0:	00da      	lsls	r2, r3, #3
 800eab2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800eab4:	4413      	add	r3, r2
 800eab6:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800eaba:	65bb      	str	r3, [r7, #88]	@ 0x58
 800eabc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eac0:	b29a      	uxth	r2, r3
 800eac2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800eac4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800eac6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eaca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	891b      	ldrh	r3, [r3, #8]
 800ead2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ead6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eada:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	6959      	ldr	r1, [r3, #20]
 800eae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eae6:	b29b      	uxth	r3, r3
 800eae8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800eaec:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800eaf0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800eaf4:	6800      	ldr	r0, [r0, #0]
 800eaf6:	f001 f809 	bl	800fb0c <USB_WritePMA>
 800eafa:	e1b3      	b.n	800ee64 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800eafc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eb00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	6a1a      	ldr	r2, [r3, #32]
 800eb08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eb0c:	1ad2      	subs	r2, r2, r3
 800eb0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eb12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800eb1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eb1e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800eb22:	681a      	ldr	r2, [r3, #0]
 800eb24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eb28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	781b      	ldrb	r3, [r3, #0]
 800eb30:	009b      	lsls	r3, r3, #2
 800eb32:	4413      	add	r3, r2
 800eb34:	881b      	ldrh	r3, [r3, #0]
 800eb36:	b29b      	uxth	r3, r3
 800eb38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	f000 80c6 	beq.w	800ecce <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800eb42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eb46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	673b      	str	r3, [r7, #112]	@ 0x70
 800eb4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eb52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	785b      	ldrb	r3, [r3, #1]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d177      	bne.n	800ec4e <USB_EPStartXfer+0xb18>
 800eb5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eb62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	66bb      	str	r3, [r7, #104]	@ 0x68
 800eb6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eb6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800eb78:	b29b      	uxth	r3, r3
 800eb7a:	461a      	mov	r2, r3
 800eb7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800eb7e:	4413      	add	r3, r2
 800eb80:	66bb      	str	r3, [r7, #104]	@ 0x68
 800eb82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eb86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	781b      	ldrb	r3, [r3, #0]
 800eb8e:	00da      	lsls	r2, r3, #3
 800eb90:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800eb92:	4413      	add	r3, r2
 800eb94:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800eb98:	667b      	str	r3, [r7, #100]	@ 0x64
 800eb9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eb9c:	881b      	ldrh	r3, [r3, #0]
 800eb9e:	b29b      	uxth	r3, r3
 800eba0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800eba4:	b29a      	uxth	r2, r3
 800eba6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800eba8:	801a      	strh	r2, [r3, #0]
 800ebaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebae:	2b3e      	cmp	r3, #62	@ 0x3e
 800ebb0:	d921      	bls.n	800ebf6 <USB_EPStartXfer+0xac0>
 800ebb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebb6:	095b      	lsrs	r3, r3, #5
 800ebb8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ebbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebc0:	f003 031f 	and.w	r3, r3, #31
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d104      	bne.n	800ebd2 <USB_EPStartXfer+0xa9c>
 800ebc8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ebcc:	3b01      	subs	r3, #1
 800ebce:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ebd2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ebd4:	881b      	ldrh	r3, [r3, #0]
 800ebd6:	b29a      	uxth	r2, r3
 800ebd8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ebdc:	b29b      	uxth	r3, r3
 800ebde:	029b      	lsls	r3, r3, #10
 800ebe0:	b29b      	uxth	r3, r3
 800ebe2:	4313      	orrs	r3, r2
 800ebe4:	b29b      	uxth	r3, r3
 800ebe6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ebea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ebee:	b29a      	uxth	r2, r3
 800ebf0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ebf2:	801a      	strh	r2, [r3, #0]
 800ebf4:	e050      	b.n	800ec98 <USB_EPStartXfer+0xb62>
 800ebf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d10a      	bne.n	800ec14 <USB_EPStartXfer+0xade>
 800ebfe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ec00:	881b      	ldrh	r3, [r3, #0]
 800ec02:	b29b      	uxth	r3, r3
 800ec04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ec08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ec0c:	b29a      	uxth	r2, r3
 800ec0e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ec10:	801a      	strh	r2, [r3, #0]
 800ec12:	e041      	b.n	800ec98 <USB_EPStartXfer+0xb62>
 800ec14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec18:	085b      	lsrs	r3, r3, #1
 800ec1a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ec1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec22:	f003 0301 	and.w	r3, r3, #1
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d004      	beq.n	800ec34 <USB_EPStartXfer+0xafe>
 800ec2a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ec2e:	3301      	adds	r3, #1
 800ec30:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ec34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ec36:	881b      	ldrh	r3, [r3, #0]
 800ec38:	b29a      	uxth	r2, r3
 800ec3a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ec3e:	b29b      	uxth	r3, r3
 800ec40:	029b      	lsls	r3, r3, #10
 800ec42:	b29b      	uxth	r3, r3
 800ec44:	4313      	orrs	r3, r2
 800ec46:	b29a      	uxth	r2, r3
 800ec48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ec4a:	801a      	strh	r2, [r3, #0]
 800ec4c:	e024      	b.n	800ec98 <USB_EPStartXfer+0xb62>
 800ec4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	785b      	ldrb	r3, [r3, #1]
 800ec5a:	2b01      	cmp	r3, #1
 800ec5c:	d11c      	bne.n	800ec98 <USB_EPStartXfer+0xb62>
 800ec5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ec6c:	b29b      	uxth	r3, r3
 800ec6e:	461a      	mov	r2, r3
 800ec70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ec72:	4413      	add	r3, r2
 800ec74:	673b      	str	r3, [r7, #112]	@ 0x70
 800ec76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	781b      	ldrb	r3, [r3, #0]
 800ec82:	00da      	lsls	r2, r3, #3
 800ec84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ec86:	4413      	add	r3, r2
 800ec88:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ec8c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800ec8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ec92:	b29a      	uxth	r2, r3
 800ec94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ec96:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800ec98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ec9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	895b      	ldrh	r3, [r3, #10]
 800eca4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800eca8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ecac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	6959      	ldr	r1, [r3, #20]
 800ecb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ecb8:	b29b      	uxth	r3, r3
 800ecba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ecbe:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ecc2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ecc6:	6800      	ldr	r0, [r0, #0]
 800ecc8:	f000 ff20 	bl	800fb0c <USB_WritePMA>
 800eccc:	e0ca      	b.n	800ee64 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ecce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ecd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	785b      	ldrb	r3, [r3, #1]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d177      	bne.n	800edce <USB_EPStartXfer+0xc98>
 800ecde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ece2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ecea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ecee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ecf8:	b29b      	uxth	r3, r3
 800ecfa:	461a      	mov	r2, r3
 800ecfc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ecfe:	4413      	add	r3, r2
 800ed00:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800ed02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ed06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	781b      	ldrb	r3, [r3, #0]
 800ed0e:	00da      	lsls	r2, r3, #3
 800ed10:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800ed12:	4413      	add	r3, r2
 800ed14:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ed18:	67bb      	str	r3, [r7, #120]	@ 0x78
 800ed1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ed1c:	881b      	ldrh	r3, [r3, #0]
 800ed1e:	b29b      	uxth	r3, r3
 800ed20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ed24:	b29a      	uxth	r2, r3
 800ed26:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ed28:	801a      	strh	r2, [r3, #0]
 800ed2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed2e:	2b3e      	cmp	r3, #62	@ 0x3e
 800ed30:	d921      	bls.n	800ed76 <USB_EPStartXfer+0xc40>
 800ed32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed36:	095b      	lsrs	r3, r3, #5
 800ed38:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800ed3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed40:	f003 031f 	and.w	r3, r3, #31
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d104      	bne.n	800ed52 <USB_EPStartXfer+0xc1c>
 800ed48:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ed4c:	3b01      	subs	r3, #1
 800ed4e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800ed52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ed54:	881b      	ldrh	r3, [r3, #0]
 800ed56:	b29a      	uxth	r2, r3
 800ed58:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800ed5c:	b29b      	uxth	r3, r3
 800ed5e:	029b      	lsls	r3, r3, #10
 800ed60:	b29b      	uxth	r3, r3
 800ed62:	4313      	orrs	r3, r2
 800ed64:	b29b      	uxth	r3, r3
 800ed66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ed6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ed6e:	b29a      	uxth	r2, r3
 800ed70:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ed72:	801a      	strh	r2, [r3, #0]
 800ed74:	e05c      	b.n	800ee30 <USB_EPStartXfer+0xcfa>
 800ed76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d10a      	bne.n	800ed94 <USB_EPStartXfer+0xc5e>
 800ed7e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ed80:	881b      	ldrh	r3, [r3, #0]
 800ed82:	b29b      	uxth	r3, r3
 800ed84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ed88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ed8c:	b29a      	uxth	r2, r3
 800ed8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ed90:	801a      	strh	r2, [r3, #0]
 800ed92:	e04d      	b.n	800ee30 <USB_EPStartXfer+0xcfa>
 800ed94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ed98:	085b      	lsrs	r3, r3, #1
 800ed9a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800ed9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800eda2:	f003 0301 	and.w	r3, r3, #1
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d004      	beq.n	800edb4 <USB_EPStartXfer+0xc7e>
 800edaa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800edae:	3301      	adds	r3, #1
 800edb0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800edb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800edb6:	881b      	ldrh	r3, [r3, #0]
 800edb8:	b29a      	uxth	r2, r3
 800edba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800edbe:	b29b      	uxth	r3, r3
 800edc0:	029b      	lsls	r3, r3, #10
 800edc2:	b29b      	uxth	r3, r3
 800edc4:	4313      	orrs	r3, r2
 800edc6:	b29a      	uxth	r2, r3
 800edc8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800edca:	801a      	strh	r2, [r3, #0]
 800edcc:	e030      	b.n	800ee30 <USB_EPStartXfer+0xcfa>
 800edce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800edd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	785b      	ldrb	r3, [r3, #1]
 800edda:	2b01      	cmp	r3, #1
 800eddc:	d128      	bne.n	800ee30 <USB_EPStartXfer+0xcfa>
 800edde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ede2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800edec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800edf0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800edfa:	b29b      	uxth	r3, r3
 800edfc:	461a      	mov	r2, r3
 800edfe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ee02:	4413      	add	r3, r2
 800ee04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ee08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	781b      	ldrb	r3, [r3, #0]
 800ee14:	00da      	lsls	r2, r3, #3
 800ee16:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800ee1a:	4413      	add	r3, r2
 800ee1c:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800ee20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ee24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee28:	b29a      	uxth	r2, r3
 800ee2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800ee2e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ee30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	891b      	ldrh	r3, [r3, #8]
 800ee3c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ee40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	6959      	ldr	r1, [r3, #20]
 800ee4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee50:	b29b      	uxth	r3, r3
 800ee52:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800ee56:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800ee5a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800ee5e:	6800      	ldr	r0, [r0, #0]
 800ee60:	f000 fe54 	bl	800fb0c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800ee64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ee6c:	681a      	ldr	r2, [r3, #0]
 800ee6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ee72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	781b      	ldrb	r3, [r3, #0]
 800ee7a:	009b      	lsls	r3, r3, #2
 800ee7c:	4413      	add	r3, r2
 800ee7e:	881b      	ldrh	r3, [r3, #0]
 800ee80:	b29b      	uxth	r3, r3
 800ee82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ee86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ee8a:	817b      	strh	r3, [r7, #10]
 800ee8c:	897b      	ldrh	r3, [r7, #10]
 800ee8e:	f083 0310 	eor.w	r3, r3, #16
 800ee92:	817b      	strh	r3, [r7, #10]
 800ee94:	897b      	ldrh	r3, [r7, #10]
 800ee96:	f083 0320 	eor.w	r3, r3, #32
 800ee9a:	817b      	strh	r3, [r7, #10]
 800ee9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eea0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800eea4:	681a      	ldr	r2, [r3, #0]
 800eea6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eeaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	781b      	ldrb	r3, [r3, #0]
 800eeb2:	009b      	lsls	r3, r3, #2
 800eeb4:	441a      	add	r2, r3
 800eeb6:	897b      	ldrh	r3, [r7, #10]
 800eeb8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800eebc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800eec0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800eec4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eec8:	b29b      	uxth	r3, r3
 800eeca:	8013      	strh	r3, [r2, #0]
 800eecc:	f000 bcde 	b.w	800f88c <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800eed0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eed4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	7b1b      	ldrb	r3, [r3, #12]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	f040 80bb 	bne.w	800f058 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800eee2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eee6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	699a      	ldr	r2, [r3, #24]
 800eeee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800eef2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	691b      	ldr	r3, [r3, #16]
 800eefa:	429a      	cmp	r2, r3
 800eefc:	d917      	bls.n	800ef2e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800eefe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	691b      	ldr	r3, [r3, #16]
 800ef0a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800ef0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	699a      	ldr	r2, [r3, #24]
 800ef1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ef1e:	1ad2      	subs	r2, r2, r3
 800ef20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	619a      	str	r2, [r3, #24]
 800ef2c:	e00e      	b.n	800ef4c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800ef2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	699b      	ldr	r3, [r3, #24]
 800ef3a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800ef3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	2200      	movs	r2, #0
 800ef4a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800ef4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ef5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800ef68:	b29b      	uxth	r3, r3
 800ef6a:	461a      	mov	r2, r3
 800ef6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ef70:	4413      	add	r3, r2
 800ef72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800ef76:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800ef7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	781b      	ldrb	r3, [r3, #0]
 800ef82:	00da      	lsls	r2, r3, #3
 800ef84:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ef88:	4413      	add	r3, r2
 800ef8a:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800ef8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800ef92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ef96:	881b      	ldrh	r3, [r3, #0]
 800ef98:	b29b      	uxth	r3, r3
 800ef9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ef9e:	b29a      	uxth	r2, r3
 800efa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800efa4:	801a      	strh	r2, [r3, #0]
 800efa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800efaa:	2b3e      	cmp	r3, #62	@ 0x3e
 800efac:	d924      	bls.n	800eff8 <USB_EPStartXfer+0xec2>
 800efae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800efb2:	095b      	lsrs	r3, r3, #5
 800efb4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800efb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800efbc:	f003 031f 	and.w	r3, r3, #31
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d104      	bne.n	800efce <USB_EPStartXfer+0xe98>
 800efc4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800efc8:	3b01      	subs	r3, #1
 800efca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800efce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800efd2:	881b      	ldrh	r3, [r3, #0]
 800efd4:	b29a      	uxth	r2, r3
 800efd6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800efda:	b29b      	uxth	r3, r3
 800efdc:	029b      	lsls	r3, r3, #10
 800efde:	b29b      	uxth	r3, r3
 800efe0:	4313      	orrs	r3, r2
 800efe2:	b29b      	uxth	r3, r3
 800efe4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800efe8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800efec:	b29a      	uxth	r2, r3
 800efee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800eff2:	801a      	strh	r2, [r3, #0]
 800eff4:	f000 bc10 	b.w	800f818 <USB_EPStartXfer+0x16e2>
 800eff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800effc:	2b00      	cmp	r3, #0
 800effe:	d10c      	bne.n	800f01a <USB_EPStartXfer+0xee4>
 800f000:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f004:	881b      	ldrh	r3, [r3, #0]
 800f006:	b29b      	uxth	r3, r3
 800f008:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f00c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f010:	b29a      	uxth	r2, r3
 800f012:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f016:	801a      	strh	r2, [r3, #0]
 800f018:	e3fe      	b.n	800f818 <USB_EPStartXfer+0x16e2>
 800f01a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f01e:	085b      	lsrs	r3, r3, #1
 800f020:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800f024:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f028:	f003 0301 	and.w	r3, r3, #1
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d004      	beq.n	800f03a <USB_EPStartXfer+0xf04>
 800f030:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800f034:	3301      	adds	r3, #1
 800f036:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800f03a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f03e:	881b      	ldrh	r3, [r3, #0]
 800f040:	b29a      	uxth	r2, r3
 800f042:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800f046:	b29b      	uxth	r3, r3
 800f048:	029b      	lsls	r3, r3, #10
 800f04a:	b29b      	uxth	r3, r3
 800f04c:	4313      	orrs	r3, r2
 800f04e:	b29a      	uxth	r2, r3
 800f050:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f054:	801a      	strh	r2, [r3, #0]
 800f056:	e3df      	b.n	800f818 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800f058:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f05c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	78db      	ldrb	r3, [r3, #3]
 800f064:	2b02      	cmp	r3, #2
 800f066:	f040 8218 	bne.w	800f49a <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800f06a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f06e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	785b      	ldrb	r3, [r3, #1]
 800f076:	2b00      	cmp	r3, #0
 800f078:	f040 809d 	bne.w	800f1b6 <USB_EPStartXfer+0x1080>
 800f07c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f080:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f08a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f08e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f098:	b29b      	uxth	r3, r3
 800f09a:	461a      	mov	r2, r3
 800f09c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f0a0:	4413      	add	r3, r2
 800f0a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f0a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f0aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	781b      	ldrb	r3, [r3, #0]
 800f0b2:	00da      	lsls	r2, r3, #3
 800f0b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800f0b8:	4413      	add	r3, r2
 800f0ba:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f0be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800f0c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f0c6:	881b      	ldrh	r3, [r3, #0]
 800f0c8:	b29b      	uxth	r3, r3
 800f0ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f0ce:	b29a      	uxth	r2, r3
 800f0d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f0d4:	801a      	strh	r2, [r3, #0]
 800f0d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f0da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	691b      	ldr	r3, [r3, #16]
 800f0e2:	2b3e      	cmp	r3, #62	@ 0x3e
 800f0e4:	d92b      	bls.n	800f13e <USB_EPStartXfer+0x1008>
 800f0e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f0ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	691b      	ldr	r3, [r3, #16]
 800f0f2:	095b      	lsrs	r3, r3, #5
 800f0f4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800f0f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f0fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	691b      	ldr	r3, [r3, #16]
 800f104:	f003 031f 	and.w	r3, r3, #31
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d104      	bne.n	800f116 <USB_EPStartXfer+0xfe0>
 800f10c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f110:	3b01      	subs	r3, #1
 800f112:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800f116:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f11a:	881b      	ldrh	r3, [r3, #0]
 800f11c:	b29a      	uxth	r2, r3
 800f11e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f122:	b29b      	uxth	r3, r3
 800f124:	029b      	lsls	r3, r3, #10
 800f126:	b29b      	uxth	r3, r3
 800f128:	4313      	orrs	r3, r2
 800f12a:	b29b      	uxth	r3, r3
 800f12c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f130:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f134:	b29a      	uxth	r2, r3
 800f136:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f13a:	801a      	strh	r2, [r3, #0]
 800f13c:	e070      	b.n	800f220 <USB_EPStartXfer+0x10ea>
 800f13e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f142:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	691b      	ldr	r3, [r3, #16]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d10c      	bne.n	800f168 <USB_EPStartXfer+0x1032>
 800f14e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f152:	881b      	ldrh	r3, [r3, #0]
 800f154:	b29b      	uxth	r3, r3
 800f156:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f15a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f15e:	b29a      	uxth	r2, r3
 800f160:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f164:	801a      	strh	r2, [r3, #0]
 800f166:	e05b      	b.n	800f220 <USB_EPStartXfer+0x10ea>
 800f168:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f16c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	691b      	ldr	r3, [r3, #16]
 800f174:	085b      	lsrs	r3, r3, #1
 800f176:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800f17a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f17e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	691b      	ldr	r3, [r3, #16]
 800f186:	f003 0301 	and.w	r3, r3, #1
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d004      	beq.n	800f198 <USB_EPStartXfer+0x1062>
 800f18e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f192:	3301      	adds	r3, #1
 800f194:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800f198:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f19c:	881b      	ldrh	r3, [r3, #0]
 800f19e:	b29a      	uxth	r2, r3
 800f1a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f1a4:	b29b      	uxth	r3, r3
 800f1a6:	029b      	lsls	r3, r3, #10
 800f1a8:	b29b      	uxth	r3, r3
 800f1aa:	4313      	orrs	r3, r2
 800f1ac:	b29a      	uxth	r2, r3
 800f1ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800f1b2:	801a      	strh	r2, [r3, #0]
 800f1b4:	e034      	b.n	800f220 <USB_EPStartXfer+0x10ea>
 800f1b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f1ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	785b      	ldrb	r3, [r3, #1]
 800f1c2:	2b01      	cmp	r3, #1
 800f1c4:	d12c      	bne.n	800f220 <USB_EPStartXfer+0x10ea>
 800f1c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f1ca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f1d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f1d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f1e2:	b29b      	uxth	r3, r3
 800f1e4:	461a      	mov	r2, r3
 800f1e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f1ea:	4413      	add	r3, r2
 800f1ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f1f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f1f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	781b      	ldrb	r3, [r3, #0]
 800f1fc:	00da      	lsls	r2, r3, #3
 800f1fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800f202:	4413      	add	r3, r2
 800f204:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f208:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f20c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f210:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	691b      	ldr	r3, [r3, #16]
 800f218:	b29a      	uxth	r2, r3
 800f21a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800f21e:	801a      	strh	r2, [r3, #0]
 800f220:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f224:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800f22e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f232:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	785b      	ldrb	r3, [r3, #1]
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	f040 809d 	bne.w	800f37a <USB_EPStartXfer+0x1244>
 800f240:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f244:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f24e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f252:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f25c:	b29b      	uxth	r3, r3
 800f25e:	461a      	mov	r2, r3
 800f260:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f264:	4413      	add	r3, r2
 800f266:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800f26a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f26e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	781b      	ldrb	r3, [r3, #0]
 800f276:	00da      	lsls	r2, r3, #3
 800f278:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f27c:	4413      	add	r3, r2
 800f27e:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f282:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800f286:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f28a:	881b      	ldrh	r3, [r3, #0]
 800f28c:	b29b      	uxth	r3, r3
 800f28e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f292:	b29a      	uxth	r2, r3
 800f294:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f298:	801a      	strh	r2, [r3, #0]
 800f29a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f29e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	691b      	ldr	r3, [r3, #16]
 800f2a6:	2b3e      	cmp	r3, #62	@ 0x3e
 800f2a8:	d92b      	bls.n	800f302 <USB_EPStartXfer+0x11cc>
 800f2aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f2ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	691b      	ldr	r3, [r3, #16]
 800f2b6:	095b      	lsrs	r3, r3, #5
 800f2b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800f2bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f2c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	691b      	ldr	r3, [r3, #16]
 800f2c8:	f003 031f 	and.w	r3, r3, #31
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d104      	bne.n	800f2da <USB_EPStartXfer+0x11a4>
 800f2d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f2d4:	3b01      	subs	r3, #1
 800f2d6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800f2da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f2de:	881b      	ldrh	r3, [r3, #0]
 800f2e0:	b29a      	uxth	r2, r3
 800f2e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f2e6:	b29b      	uxth	r3, r3
 800f2e8:	029b      	lsls	r3, r3, #10
 800f2ea:	b29b      	uxth	r3, r3
 800f2ec:	4313      	orrs	r3, r2
 800f2ee:	b29b      	uxth	r3, r3
 800f2f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f2f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f2f8:	b29a      	uxth	r2, r3
 800f2fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f2fe:	801a      	strh	r2, [r3, #0]
 800f300:	e069      	b.n	800f3d6 <USB_EPStartXfer+0x12a0>
 800f302:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f306:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	691b      	ldr	r3, [r3, #16]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d10c      	bne.n	800f32c <USB_EPStartXfer+0x11f6>
 800f312:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f316:	881b      	ldrh	r3, [r3, #0]
 800f318:	b29b      	uxth	r3, r3
 800f31a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f31e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f322:	b29a      	uxth	r2, r3
 800f324:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f328:	801a      	strh	r2, [r3, #0]
 800f32a:	e054      	b.n	800f3d6 <USB_EPStartXfer+0x12a0>
 800f32c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f330:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	691b      	ldr	r3, [r3, #16]
 800f338:	085b      	lsrs	r3, r3, #1
 800f33a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800f33e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f342:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	691b      	ldr	r3, [r3, #16]
 800f34a:	f003 0301 	and.w	r3, r3, #1
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d004      	beq.n	800f35c <USB_EPStartXfer+0x1226>
 800f352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f356:	3301      	adds	r3, #1
 800f358:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800f35c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f360:	881b      	ldrh	r3, [r3, #0]
 800f362:	b29a      	uxth	r2, r3
 800f364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f368:	b29b      	uxth	r3, r3
 800f36a:	029b      	lsls	r3, r3, #10
 800f36c:	b29b      	uxth	r3, r3
 800f36e:	4313      	orrs	r3, r2
 800f370:	b29a      	uxth	r2, r3
 800f372:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f376:	801a      	strh	r2, [r3, #0]
 800f378:	e02d      	b.n	800f3d6 <USB_EPStartXfer+0x12a0>
 800f37a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f37e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	785b      	ldrb	r3, [r3, #1]
 800f386:	2b01      	cmp	r3, #1
 800f388:	d125      	bne.n	800f3d6 <USB_EPStartXfer+0x12a0>
 800f38a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f38e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f398:	b29b      	uxth	r3, r3
 800f39a:	461a      	mov	r2, r3
 800f39c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f3a0:	4413      	add	r3, r2
 800f3a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800f3a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f3aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	781b      	ldrb	r3, [r3, #0]
 800f3b2:	00da      	lsls	r2, r3, #3
 800f3b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800f3b8:	4413      	add	r3, r2
 800f3ba:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f3be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800f3c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f3c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	691b      	ldr	r3, [r3, #16]
 800f3ce:	b29a      	uxth	r2, r3
 800f3d0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f3d4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800f3d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f3da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	69db      	ldr	r3, [r3, #28]
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	f000 8218 	beq.w	800f818 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800f3e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f3ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f3f0:	681a      	ldr	r2, [r3, #0]
 800f3f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f3f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	781b      	ldrb	r3, [r3, #0]
 800f3fe:	009b      	lsls	r3, r3, #2
 800f400:	4413      	add	r3, r2
 800f402:	881b      	ldrh	r3, [r3, #0]
 800f404:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f408:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800f40c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f410:	2b00      	cmp	r3, #0
 800f412:	d005      	beq.n	800f420 <USB_EPStartXfer+0x12ea>
 800f414:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800f418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d10d      	bne.n	800f43c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f420:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800f424:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800f428:	2b00      	cmp	r3, #0
 800f42a:	f040 81f5 	bne.w	800f818 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800f42e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800f432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f436:	2b00      	cmp	r3, #0
 800f438:	f040 81ee 	bne.w	800f818 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800f43c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f440:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f444:	681a      	ldr	r2, [r3, #0]
 800f446:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f44a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	781b      	ldrb	r3, [r3, #0]
 800f452:	009b      	lsls	r3, r3, #2
 800f454:	4413      	add	r3, r2
 800f456:	881b      	ldrh	r3, [r3, #0]
 800f458:	b29b      	uxth	r3, r3
 800f45a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f45e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f462:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800f466:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f46a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f46e:	681a      	ldr	r2, [r3, #0]
 800f470:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f474:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	781b      	ldrb	r3, [r3, #0]
 800f47c:	009b      	lsls	r3, r3, #2
 800f47e:	441a      	add	r2, r3
 800f480:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800f484:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f488:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f48c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f490:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f494:	b29b      	uxth	r3, r3
 800f496:	8013      	strh	r3, [r2, #0]
 800f498:	e1be      	b.n	800f818 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800f49a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f49e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	78db      	ldrb	r3, [r3, #3]
 800f4a6:	2b01      	cmp	r3, #1
 800f4a8:	f040 81b4 	bne.w	800f814 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800f4ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f4b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	699a      	ldr	r2, [r3, #24]
 800f4b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f4bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	691b      	ldr	r3, [r3, #16]
 800f4c4:	429a      	cmp	r2, r3
 800f4c6:	d917      	bls.n	800f4f8 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800f4c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f4cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	691b      	ldr	r3, [r3, #16]
 800f4d4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800f4d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f4dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	699a      	ldr	r2, [r3, #24]
 800f4e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f4e8:	1ad2      	subs	r2, r2, r3
 800f4ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f4ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	619a      	str	r2, [r3, #24]
 800f4f6:	e00e      	b.n	800f516 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800f4f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f4fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	699b      	ldr	r3, [r3, #24]
 800f504:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800f508:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f50c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	2200      	movs	r2, #0
 800f514:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800f516:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f51a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	785b      	ldrb	r3, [r3, #1]
 800f522:	2b00      	cmp	r3, #0
 800f524:	f040 8085 	bne.w	800f632 <USB_EPStartXfer+0x14fc>
 800f528:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f52c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800f536:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f53a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f544:	b29b      	uxth	r3, r3
 800f546:	461a      	mov	r2, r3
 800f548:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f54c:	4413      	add	r3, r2
 800f54e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800f552:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f556:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	781b      	ldrb	r3, [r3, #0]
 800f55e:	00da      	lsls	r2, r3, #3
 800f560:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800f564:	4413      	add	r3, r2
 800f566:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f56a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f56e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f572:	881b      	ldrh	r3, [r3, #0]
 800f574:	b29b      	uxth	r3, r3
 800f576:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f57a:	b29a      	uxth	r2, r3
 800f57c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f580:	801a      	strh	r2, [r3, #0]
 800f582:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f586:	2b3e      	cmp	r3, #62	@ 0x3e
 800f588:	d923      	bls.n	800f5d2 <USB_EPStartXfer+0x149c>
 800f58a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f58e:	095b      	lsrs	r3, r3, #5
 800f590:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800f594:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f598:	f003 031f 	and.w	r3, r3, #31
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d104      	bne.n	800f5aa <USB_EPStartXfer+0x1474>
 800f5a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f5a4:	3b01      	subs	r3, #1
 800f5a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800f5aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f5ae:	881b      	ldrh	r3, [r3, #0]
 800f5b0:	b29a      	uxth	r2, r3
 800f5b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f5b6:	b29b      	uxth	r3, r3
 800f5b8:	029b      	lsls	r3, r3, #10
 800f5ba:	b29b      	uxth	r3, r3
 800f5bc:	4313      	orrs	r3, r2
 800f5be:	b29b      	uxth	r3, r3
 800f5c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f5c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f5c8:	b29a      	uxth	r2, r3
 800f5ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f5ce:	801a      	strh	r2, [r3, #0]
 800f5d0:	e060      	b.n	800f694 <USB_EPStartXfer+0x155e>
 800f5d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d10c      	bne.n	800f5f4 <USB_EPStartXfer+0x14be>
 800f5da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f5de:	881b      	ldrh	r3, [r3, #0]
 800f5e0:	b29b      	uxth	r3, r3
 800f5e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f5e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f5ea:	b29a      	uxth	r2, r3
 800f5ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f5f0:	801a      	strh	r2, [r3, #0]
 800f5f2:	e04f      	b.n	800f694 <USB_EPStartXfer+0x155e>
 800f5f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f5f8:	085b      	lsrs	r3, r3, #1
 800f5fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800f5fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f602:	f003 0301 	and.w	r3, r3, #1
 800f606:	2b00      	cmp	r3, #0
 800f608:	d004      	beq.n	800f614 <USB_EPStartXfer+0x14de>
 800f60a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f60e:	3301      	adds	r3, #1
 800f610:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800f614:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f618:	881b      	ldrh	r3, [r3, #0]
 800f61a:	b29a      	uxth	r2, r3
 800f61c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f620:	b29b      	uxth	r3, r3
 800f622:	029b      	lsls	r3, r3, #10
 800f624:	b29b      	uxth	r3, r3
 800f626:	4313      	orrs	r3, r2
 800f628:	b29a      	uxth	r2, r3
 800f62a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800f62e:	801a      	strh	r2, [r3, #0]
 800f630:	e030      	b.n	800f694 <USB_EPStartXfer+0x155e>
 800f632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f636:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	785b      	ldrb	r3, [r3, #1]
 800f63e:	2b01      	cmp	r3, #1
 800f640:	d128      	bne.n	800f694 <USB_EPStartXfer+0x155e>
 800f642:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f646:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800f650:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f654:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f65e:	b29b      	uxth	r3, r3
 800f660:	461a      	mov	r2, r3
 800f662:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f666:	4413      	add	r3, r2
 800f668:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800f66c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f670:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	781b      	ldrb	r3, [r3, #0]
 800f678:	00da      	lsls	r2, r3, #3
 800f67a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f67e:	4413      	add	r3, r2
 800f680:	f203 4302 	addw	r3, r3, #1026	@ 0x402
 800f684:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f68c:	b29a      	uxth	r2, r3
 800f68e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800f692:	801a      	strh	r2, [r3, #0]
 800f694:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f698:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f6a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f6a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	785b      	ldrb	r3, [r3, #1]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	f040 8085 	bne.w	800f7be <USB_EPStartXfer+0x1688>
 800f6b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f6b8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f6bc:	681b      	ldr	r3, [r3, #0]
 800f6be:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800f6c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f6c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f6d0:	b29b      	uxth	r3, r3
 800f6d2:	461a      	mov	r2, r3
 800f6d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800f6d8:	4413      	add	r3, r2
 800f6da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800f6de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f6e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	781b      	ldrb	r3, [r3, #0]
 800f6ea:	00da      	lsls	r2, r3, #3
 800f6ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800f6f0:	4413      	add	r3, r2
 800f6f2:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f6f6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f6fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f6fe:	881b      	ldrh	r3, [r3, #0]
 800f700:	b29b      	uxth	r3, r3
 800f702:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f706:	b29a      	uxth	r2, r3
 800f708:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f70c:	801a      	strh	r2, [r3, #0]
 800f70e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f712:	2b3e      	cmp	r3, #62	@ 0x3e
 800f714:	d923      	bls.n	800f75e <USB_EPStartXfer+0x1628>
 800f716:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f71a:	095b      	lsrs	r3, r3, #5
 800f71c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800f720:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f724:	f003 031f 	and.w	r3, r3, #31
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d104      	bne.n	800f736 <USB_EPStartXfer+0x1600>
 800f72c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f730:	3b01      	subs	r3, #1
 800f732:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800f736:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f73a:	881b      	ldrh	r3, [r3, #0]
 800f73c:	b29a      	uxth	r2, r3
 800f73e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f742:	b29b      	uxth	r3, r3
 800f744:	029b      	lsls	r3, r3, #10
 800f746:	b29b      	uxth	r3, r3
 800f748:	4313      	orrs	r3, r2
 800f74a:	b29b      	uxth	r3, r3
 800f74c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f750:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f754:	b29a      	uxth	r2, r3
 800f756:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f75a:	801a      	strh	r2, [r3, #0]
 800f75c:	e05c      	b.n	800f818 <USB_EPStartXfer+0x16e2>
 800f75e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f762:	2b00      	cmp	r3, #0
 800f764:	d10c      	bne.n	800f780 <USB_EPStartXfer+0x164a>
 800f766:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f76a:	881b      	ldrh	r3, [r3, #0]
 800f76c:	b29b      	uxth	r3, r3
 800f76e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800f772:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800f776:	b29a      	uxth	r2, r3
 800f778:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f77c:	801a      	strh	r2, [r3, #0]
 800f77e:	e04b      	b.n	800f818 <USB_EPStartXfer+0x16e2>
 800f780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f784:	085b      	lsrs	r3, r3, #1
 800f786:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800f78a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f78e:	f003 0301 	and.w	r3, r3, #1
 800f792:	2b00      	cmp	r3, #0
 800f794:	d004      	beq.n	800f7a0 <USB_EPStartXfer+0x166a>
 800f796:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f79a:	3301      	adds	r3, #1
 800f79c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800f7a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f7a4:	881b      	ldrh	r3, [r3, #0]
 800f7a6:	b29a      	uxth	r2, r3
 800f7a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f7ac:	b29b      	uxth	r3, r3
 800f7ae:	029b      	lsls	r3, r3, #10
 800f7b0:	b29b      	uxth	r3, r3
 800f7b2:	4313      	orrs	r3, r2
 800f7b4:	b29a      	uxth	r2, r3
 800f7b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800f7ba:	801a      	strh	r2, [r3, #0]
 800f7bc:	e02c      	b.n	800f818 <USB_EPStartXfer+0x16e2>
 800f7be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f7c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	785b      	ldrb	r3, [r3, #1]
 800f7ca:	2b01      	cmp	r3, #1
 800f7cc:	d124      	bne.n	800f818 <USB_EPStartXfer+0x16e2>
 800f7ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f7d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800f7dc:	b29b      	uxth	r3, r3
 800f7de:	461a      	mov	r2, r3
 800f7e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f7e4:	4413      	add	r3, r2
 800f7e6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f7ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f7ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	781b      	ldrb	r3, [r3, #0]
 800f7f6:	00da      	lsls	r2, r3, #3
 800f7f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800f7fc:	4413      	add	r3, r2
 800f7fe:	f203 4306 	addw	r3, r3, #1030	@ 0x406
 800f802:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f806:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800f80a:	b29a      	uxth	r2, r3
 800f80c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800f810:	801a      	strh	r2, [r3, #0]
 800f812:	e001      	b.n	800f818 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800f814:	2301      	movs	r3, #1
 800f816:	e03a      	b.n	800f88e <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800f818:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f81c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f820:	681a      	ldr	r2, [r3, #0]
 800f822:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f826:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	781b      	ldrb	r3, [r3, #0]
 800f82e:	009b      	lsls	r3, r3, #2
 800f830:	4413      	add	r3, r2
 800f832:	881b      	ldrh	r3, [r3, #0]
 800f834:	b29b      	uxth	r3, r3
 800f836:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f83a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f83e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800f842:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f846:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f84a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800f84e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f852:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800f856:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800f85a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f85e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800f862:	681a      	ldr	r2, [r3, #0]
 800f864:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800f868:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	781b      	ldrb	r3, [r3, #0]
 800f870:	009b      	lsls	r3, r3, #2
 800f872:	441a      	add	r2, r3
 800f874:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800f878:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f87c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f880:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f884:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f888:	b29b      	uxth	r3, r3
 800f88a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f88c:	2300      	movs	r3, #0
}
 800f88e:	4618      	mov	r0, r3
 800f890:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800f894:	46bd      	mov	sp, r7
 800f896:	bd80      	pop	{r7, pc}

0800f898 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f898:	b480      	push	{r7}
 800f89a:	b085      	sub	sp, #20
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
 800f8a0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	785b      	ldrb	r3, [r3, #1]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d020      	beq.n	800f8ec <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800f8aa:	687a      	ldr	r2, [r7, #4]
 800f8ac:	683b      	ldr	r3, [r7, #0]
 800f8ae:	781b      	ldrb	r3, [r3, #0]
 800f8b0:	009b      	lsls	r3, r3, #2
 800f8b2:	4413      	add	r3, r2
 800f8b4:	881b      	ldrh	r3, [r3, #0]
 800f8b6:	b29b      	uxth	r3, r3
 800f8b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f8bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f8c0:	81bb      	strh	r3, [r7, #12]
 800f8c2:	89bb      	ldrh	r3, [r7, #12]
 800f8c4:	f083 0310 	eor.w	r3, r3, #16
 800f8c8:	81bb      	strh	r3, [r7, #12]
 800f8ca:	687a      	ldr	r2, [r7, #4]
 800f8cc:	683b      	ldr	r3, [r7, #0]
 800f8ce:	781b      	ldrb	r3, [r3, #0]
 800f8d0:	009b      	lsls	r3, r3, #2
 800f8d2:	441a      	add	r2, r3
 800f8d4:	89bb      	ldrh	r3, [r7, #12]
 800f8d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f8da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f8de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f8e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f8e6:	b29b      	uxth	r3, r3
 800f8e8:	8013      	strh	r3, [r2, #0]
 800f8ea:	e01f      	b.n	800f92c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800f8ec:	687a      	ldr	r2, [r7, #4]
 800f8ee:	683b      	ldr	r3, [r7, #0]
 800f8f0:	781b      	ldrb	r3, [r3, #0]
 800f8f2:	009b      	lsls	r3, r3, #2
 800f8f4:	4413      	add	r3, r2
 800f8f6:	881b      	ldrh	r3, [r3, #0]
 800f8f8:	b29b      	uxth	r3, r3
 800f8fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f8fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f902:	81fb      	strh	r3, [r7, #14]
 800f904:	89fb      	ldrh	r3, [r7, #14]
 800f906:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800f90a:	81fb      	strh	r3, [r7, #14]
 800f90c:	687a      	ldr	r2, [r7, #4]
 800f90e:	683b      	ldr	r3, [r7, #0]
 800f910:	781b      	ldrb	r3, [r3, #0]
 800f912:	009b      	lsls	r3, r3, #2
 800f914:	441a      	add	r2, r3
 800f916:	89fb      	ldrh	r3, [r7, #14]
 800f918:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f91c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f920:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f924:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f928:	b29b      	uxth	r3, r3
 800f92a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800f92c:	2300      	movs	r3, #0
}
 800f92e:	4618      	mov	r0, r3
 800f930:	3714      	adds	r7, #20
 800f932:	46bd      	mov	sp, r7
 800f934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f938:	4770      	bx	lr

0800f93a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f93a:	b480      	push	{r7}
 800f93c:	b087      	sub	sp, #28
 800f93e:	af00      	add	r7, sp, #0
 800f940:	6078      	str	r0, [r7, #4]
 800f942:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800f944:	683b      	ldr	r3, [r7, #0]
 800f946:	7b1b      	ldrb	r3, [r3, #12]
 800f948:	2b00      	cmp	r3, #0
 800f94a:	f040 809d 	bne.w	800fa88 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800f94e:	683b      	ldr	r3, [r7, #0]
 800f950:	785b      	ldrb	r3, [r3, #1]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d04c      	beq.n	800f9f0 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800f956:	687a      	ldr	r2, [r7, #4]
 800f958:	683b      	ldr	r3, [r7, #0]
 800f95a:	781b      	ldrb	r3, [r3, #0]
 800f95c:	009b      	lsls	r3, r3, #2
 800f95e:	4413      	add	r3, r2
 800f960:	881b      	ldrh	r3, [r3, #0]
 800f962:	823b      	strh	r3, [r7, #16]
 800f964:	8a3b      	ldrh	r3, [r7, #16]
 800f966:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d01b      	beq.n	800f9a6 <USB_EPClearStall+0x6c>
 800f96e:	687a      	ldr	r2, [r7, #4]
 800f970:	683b      	ldr	r3, [r7, #0]
 800f972:	781b      	ldrb	r3, [r3, #0]
 800f974:	009b      	lsls	r3, r3, #2
 800f976:	4413      	add	r3, r2
 800f978:	881b      	ldrh	r3, [r3, #0]
 800f97a:	b29b      	uxth	r3, r3
 800f97c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f980:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f984:	81fb      	strh	r3, [r7, #14]
 800f986:	687a      	ldr	r2, [r7, #4]
 800f988:	683b      	ldr	r3, [r7, #0]
 800f98a:	781b      	ldrb	r3, [r3, #0]
 800f98c:	009b      	lsls	r3, r3, #2
 800f98e:	441a      	add	r2, r3
 800f990:	89fb      	ldrh	r3, [r7, #14]
 800f992:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f996:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f99a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f99e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800f9a2:	b29b      	uxth	r3, r3
 800f9a4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f9a6:	683b      	ldr	r3, [r7, #0]
 800f9a8:	78db      	ldrb	r3, [r3, #3]
 800f9aa:	2b01      	cmp	r3, #1
 800f9ac:	d06c      	beq.n	800fa88 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800f9ae:	687a      	ldr	r2, [r7, #4]
 800f9b0:	683b      	ldr	r3, [r7, #0]
 800f9b2:	781b      	ldrb	r3, [r3, #0]
 800f9b4:	009b      	lsls	r3, r3, #2
 800f9b6:	4413      	add	r3, r2
 800f9b8:	881b      	ldrh	r3, [r3, #0]
 800f9ba:	b29b      	uxth	r3, r3
 800f9bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f9c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f9c4:	81bb      	strh	r3, [r7, #12]
 800f9c6:	89bb      	ldrh	r3, [r7, #12]
 800f9c8:	f083 0320 	eor.w	r3, r3, #32
 800f9cc:	81bb      	strh	r3, [r7, #12]
 800f9ce:	687a      	ldr	r2, [r7, #4]
 800f9d0:	683b      	ldr	r3, [r7, #0]
 800f9d2:	781b      	ldrb	r3, [r3, #0]
 800f9d4:	009b      	lsls	r3, r3, #2
 800f9d6:	441a      	add	r2, r3
 800f9d8:	89bb      	ldrh	r3, [r7, #12]
 800f9da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800f9de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800f9e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f9e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f9ea:	b29b      	uxth	r3, r3
 800f9ec:	8013      	strh	r3, [r2, #0]
 800f9ee:	e04b      	b.n	800fa88 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800f9f0:	687a      	ldr	r2, [r7, #4]
 800f9f2:	683b      	ldr	r3, [r7, #0]
 800f9f4:	781b      	ldrb	r3, [r3, #0]
 800f9f6:	009b      	lsls	r3, r3, #2
 800f9f8:	4413      	add	r3, r2
 800f9fa:	881b      	ldrh	r3, [r3, #0]
 800f9fc:	82fb      	strh	r3, [r7, #22]
 800f9fe:	8afb      	ldrh	r3, [r7, #22]
 800fa00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d01b      	beq.n	800fa40 <USB_EPClearStall+0x106>
 800fa08:	687a      	ldr	r2, [r7, #4]
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	781b      	ldrb	r3, [r3, #0]
 800fa0e:	009b      	lsls	r3, r3, #2
 800fa10:	4413      	add	r3, r2
 800fa12:	881b      	ldrh	r3, [r3, #0]
 800fa14:	b29b      	uxth	r3, r3
 800fa16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800fa1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fa1e:	82bb      	strh	r3, [r7, #20]
 800fa20:	687a      	ldr	r2, [r7, #4]
 800fa22:	683b      	ldr	r3, [r7, #0]
 800fa24:	781b      	ldrb	r3, [r3, #0]
 800fa26:	009b      	lsls	r3, r3, #2
 800fa28:	441a      	add	r2, r3
 800fa2a:	8abb      	ldrh	r3, [r7, #20]
 800fa2c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fa30:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fa34:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800fa38:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fa3c:	b29b      	uxth	r3, r3
 800fa3e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800fa40:	687a      	ldr	r2, [r7, #4]
 800fa42:	683b      	ldr	r3, [r7, #0]
 800fa44:	781b      	ldrb	r3, [r3, #0]
 800fa46:	009b      	lsls	r3, r3, #2
 800fa48:	4413      	add	r3, r2
 800fa4a:	881b      	ldrh	r3, [r3, #0]
 800fa4c:	b29b      	uxth	r3, r3
 800fa4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800fa52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fa56:	827b      	strh	r3, [r7, #18]
 800fa58:	8a7b      	ldrh	r3, [r7, #18]
 800fa5a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800fa5e:	827b      	strh	r3, [r7, #18]
 800fa60:	8a7b      	ldrh	r3, [r7, #18]
 800fa62:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800fa66:	827b      	strh	r3, [r7, #18]
 800fa68:	687a      	ldr	r2, [r7, #4]
 800fa6a:	683b      	ldr	r3, [r7, #0]
 800fa6c:	781b      	ldrb	r3, [r3, #0]
 800fa6e:	009b      	lsls	r3, r3, #2
 800fa70:	441a      	add	r2, r3
 800fa72:	8a7b      	ldrh	r3, [r7, #18]
 800fa74:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800fa78:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800fa7c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800fa80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fa84:	b29b      	uxth	r3, r3
 800fa86:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800fa88:	2300      	movs	r3, #0
}
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	371c      	adds	r7, #28
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa94:	4770      	bx	lr

0800fa96 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800fa96:	b480      	push	{r7}
 800fa98:	b083      	sub	sp, #12
 800fa9a:	af00      	add	r7, sp, #0
 800fa9c:	6078      	str	r0, [r7, #4]
 800fa9e:	460b      	mov	r3, r1
 800faa0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800faa2:	78fb      	ldrb	r3, [r7, #3]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d103      	bne.n	800fab0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	2280      	movs	r2, #128	@ 0x80
 800faac:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800fab0:	2300      	movs	r3, #0
}
 800fab2:	4618      	mov	r0, r3
 800fab4:	370c      	adds	r7, #12
 800fab6:	46bd      	mov	sp, r7
 800fab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fabc:	4770      	bx	lr

0800fabe <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800fabe:	b480      	push	{r7}
 800fac0:	b083      	sub	sp, #12
 800fac2:	af00      	add	r7, sp, #0
 800fac4:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800facc:	b29b      	uxth	r3, r3
 800face:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fad2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fad6:	b29a      	uxth	r2, r3
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  return HAL_OK;
 800fade:	2300      	movs	r3, #0
}
 800fae0:	4618      	mov	r0, r3
 800fae2:	370c      	adds	r7, #12
 800fae4:	46bd      	mov	sp, r7
 800fae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faea:	4770      	bx	lr

0800faec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800faec:	b480      	push	{r7}
 800faee:	b085      	sub	sp, #20
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800fafa:	b29b      	uxth	r3, r3
 800fafc:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800fafe:	68fb      	ldr	r3, [r7, #12]
}
 800fb00:	4618      	mov	r0, r3
 800fb02:	3714      	adds	r7, #20
 800fb04:	46bd      	mov	sp, r7
 800fb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0a:	4770      	bx	lr

0800fb0c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800fb0c:	b480      	push	{r7}
 800fb0e:	b08b      	sub	sp, #44	@ 0x2c
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	60f8      	str	r0, [r7, #12]
 800fb14:	60b9      	str	r1, [r7, #8]
 800fb16:	4611      	mov	r1, r2
 800fb18:	461a      	mov	r2, r3
 800fb1a:	460b      	mov	r3, r1
 800fb1c:	80fb      	strh	r3, [r7, #6]
 800fb1e:	4613      	mov	r3, r2
 800fb20:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800fb22:	88bb      	ldrh	r3, [r7, #4]
 800fb24:	3301      	adds	r3, #1
 800fb26:	085b      	lsrs	r3, r3, #1
 800fb28:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800fb2e:	68bb      	ldr	r3, [r7, #8]
 800fb30:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800fb32:	88fa      	ldrh	r2, [r7, #6]
 800fb34:	697b      	ldr	r3, [r7, #20]
 800fb36:	4413      	add	r3, r2
 800fb38:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800fb3c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800fb3e:	69bb      	ldr	r3, [r7, #24]
 800fb40:	627b      	str	r3, [r7, #36]	@ 0x24
 800fb42:	e01b      	b.n	800fb7c <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800fb44:	69fb      	ldr	r3, [r7, #28]
 800fb46:	781b      	ldrb	r3, [r3, #0]
 800fb48:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800fb4a:	69fb      	ldr	r3, [r7, #28]
 800fb4c:	3301      	adds	r3, #1
 800fb4e:	781b      	ldrb	r3, [r3, #0]
 800fb50:	021b      	lsls	r3, r3, #8
 800fb52:	b21a      	sxth	r2, r3
 800fb54:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fb58:	4313      	orrs	r3, r2
 800fb5a:	b21b      	sxth	r3, r3
 800fb5c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800fb5e:	6a3b      	ldr	r3, [r7, #32]
 800fb60:	8a7a      	ldrh	r2, [r7, #18]
 800fb62:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800fb64:	6a3b      	ldr	r3, [r7, #32]
 800fb66:	3302      	adds	r3, #2
 800fb68:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800fb6a:	69fb      	ldr	r3, [r7, #28]
 800fb6c:	3301      	adds	r3, #1
 800fb6e:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800fb70:	69fb      	ldr	r3, [r7, #28]
 800fb72:	3301      	adds	r3, #1
 800fb74:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800fb76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb78:	3b01      	subs	r3, #1
 800fb7a:	627b      	str	r3, [r7, #36]	@ 0x24
 800fb7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d1e0      	bne.n	800fb44 <USB_WritePMA+0x38>
  }
}
 800fb82:	bf00      	nop
 800fb84:	bf00      	nop
 800fb86:	372c      	adds	r7, #44	@ 0x2c
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8e:	4770      	bx	lr

0800fb90 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800fb90:	b480      	push	{r7}
 800fb92:	b08b      	sub	sp, #44	@ 0x2c
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	60f8      	str	r0, [r7, #12]
 800fb98:	60b9      	str	r1, [r7, #8]
 800fb9a:	4611      	mov	r1, r2
 800fb9c:	461a      	mov	r2, r3
 800fb9e:	460b      	mov	r3, r1
 800fba0:	80fb      	strh	r3, [r7, #6]
 800fba2:	4613      	mov	r3, r2
 800fba4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800fba6:	88bb      	ldrh	r3, [r7, #4]
 800fba8:	085b      	lsrs	r3, r3, #1
 800fbaa:	b29b      	uxth	r3, r3
 800fbac:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800fbb2:	68bb      	ldr	r3, [r7, #8]
 800fbb4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800fbb6:	88fa      	ldrh	r2, [r7, #6]
 800fbb8:	697b      	ldr	r3, [r7, #20]
 800fbba:	4413      	add	r3, r2
 800fbbc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800fbc0:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800fbc2:	69bb      	ldr	r3, [r7, #24]
 800fbc4:	627b      	str	r3, [r7, #36]	@ 0x24
 800fbc6:	e018      	b.n	800fbfa <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800fbc8:	6a3b      	ldr	r3, [r7, #32]
 800fbca:	881b      	ldrh	r3, [r3, #0]
 800fbcc:	b29b      	uxth	r3, r3
 800fbce:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800fbd0:	6a3b      	ldr	r3, [r7, #32]
 800fbd2:	3302      	adds	r3, #2
 800fbd4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800fbd6:	693b      	ldr	r3, [r7, #16]
 800fbd8:	b2da      	uxtb	r2, r3
 800fbda:	69fb      	ldr	r3, [r7, #28]
 800fbdc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800fbde:	69fb      	ldr	r3, [r7, #28]
 800fbe0:	3301      	adds	r3, #1
 800fbe2:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800fbe4:	693b      	ldr	r3, [r7, #16]
 800fbe6:	0a1b      	lsrs	r3, r3, #8
 800fbe8:	b2da      	uxtb	r2, r3
 800fbea:	69fb      	ldr	r3, [r7, #28]
 800fbec:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800fbee:	69fb      	ldr	r3, [r7, #28]
 800fbf0:	3301      	adds	r3, #1
 800fbf2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800fbf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbf6:	3b01      	subs	r3, #1
 800fbf8:	627b      	str	r3, [r7, #36]	@ 0x24
 800fbfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d1e3      	bne.n	800fbc8 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800fc00:	88bb      	ldrh	r3, [r7, #4]
 800fc02:	f003 0301 	and.w	r3, r3, #1
 800fc06:	b29b      	uxth	r3, r3
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d007      	beq.n	800fc1c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800fc0c:	6a3b      	ldr	r3, [r7, #32]
 800fc0e:	881b      	ldrh	r3, [r3, #0]
 800fc10:	b29b      	uxth	r3, r3
 800fc12:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800fc14:	693b      	ldr	r3, [r7, #16]
 800fc16:	b2da      	uxtb	r2, r3
 800fc18:	69fb      	ldr	r3, [r7, #28]
 800fc1a:	701a      	strb	r2, [r3, #0]
  }
}
 800fc1c:	bf00      	nop
 800fc1e:	372c      	adds	r7, #44	@ 0x2c
 800fc20:	46bd      	mov	sp, r7
 800fc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc26:	4770      	bx	lr

0800fc28 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b084      	sub	sp, #16
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
 800fc30:	460b      	mov	r3, r1
 800fc32:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800fc34:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800fc38:	f002 fc74 	bl	8012524 <USBD_static_malloc>
 800fc3c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d109      	bne.n	800fc58 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	32b0      	adds	r2, #176	@ 0xb0
 800fc4e:	2100      	movs	r1, #0
 800fc50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800fc54:	2302      	movs	r3, #2
 800fc56:	e0d4      	b.n	800fe02 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800fc58:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800fc5c:	2100      	movs	r1, #0
 800fc5e:	68f8      	ldr	r0, [r7, #12]
 800fc60:	f002 fdc9 	bl	80127f6 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	32b0      	adds	r2, #176	@ 0xb0
 800fc6e:	68f9      	ldr	r1, [r7, #12]
 800fc70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	32b0      	adds	r2, #176	@ 0xb0
 800fc7e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	7c1b      	ldrb	r3, [r3, #16]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d138      	bne.n	800fd02 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800fc90:	4b5e      	ldr	r3, [pc, #376]	@ (800fe0c <USBD_CDC_Init+0x1e4>)
 800fc92:	7819      	ldrb	r1, [r3, #0]
 800fc94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fc98:	2202      	movs	r2, #2
 800fc9a:	6878      	ldr	r0, [r7, #4]
 800fc9c:	f002 fae9 	bl	8012272 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800fca0:	4b5a      	ldr	r3, [pc, #360]	@ (800fe0c <USBD_CDC_Init+0x1e4>)
 800fca2:	781b      	ldrb	r3, [r3, #0]
 800fca4:	f003 020f 	and.w	r2, r3, #15
 800fca8:	6879      	ldr	r1, [r7, #4]
 800fcaa:	4613      	mov	r3, r2
 800fcac:	009b      	lsls	r3, r3, #2
 800fcae:	4413      	add	r3, r2
 800fcb0:	009b      	lsls	r3, r3, #2
 800fcb2:	440b      	add	r3, r1
 800fcb4:	3324      	adds	r3, #36	@ 0x24
 800fcb6:	2201      	movs	r2, #1
 800fcb8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800fcba:	4b55      	ldr	r3, [pc, #340]	@ (800fe10 <USBD_CDC_Init+0x1e8>)
 800fcbc:	7819      	ldrb	r1, [r3, #0]
 800fcbe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fcc2:	2202      	movs	r2, #2
 800fcc4:	6878      	ldr	r0, [r7, #4]
 800fcc6:	f002 fad4 	bl	8012272 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800fcca:	4b51      	ldr	r3, [pc, #324]	@ (800fe10 <USBD_CDC_Init+0x1e8>)
 800fccc:	781b      	ldrb	r3, [r3, #0]
 800fcce:	f003 020f 	and.w	r2, r3, #15
 800fcd2:	6879      	ldr	r1, [r7, #4]
 800fcd4:	4613      	mov	r3, r2
 800fcd6:	009b      	lsls	r3, r3, #2
 800fcd8:	4413      	add	r3, r2
 800fcda:	009b      	lsls	r3, r3, #2
 800fcdc:	440b      	add	r3, r1
 800fcde:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fce2:	2201      	movs	r2, #1
 800fce4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800fce6:	4b4b      	ldr	r3, [pc, #300]	@ (800fe14 <USBD_CDC_Init+0x1ec>)
 800fce8:	781b      	ldrb	r3, [r3, #0]
 800fcea:	f003 020f 	and.w	r2, r3, #15
 800fcee:	6879      	ldr	r1, [r7, #4]
 800fcf0:	4613      	mov	r3, r2
 800fcf2:	009b      	lsls	r3, r3, #2
 800fcf4:	4413      	add	r3, r2
 800fcf6:	009b      	lsls	r3, r3, #2
 800fcf8:	440b      	add	r3, r1
 800fcfa:	3326      	adds	r3, #38	@ 0x26
 800fcfc:	2210      	movs	r2, #16
 800fcfe:	801a      	strh	r2, [r3, #0]
 800fd00:	e035      	b.n	800fd6e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800fd02:	4b42      	ldr	r3, [pc, #264]	@ (800fe0c <USBD_CDC_Init+0x1e4>)
 800fd04:	7819      	ldrb	r1, [r3, #0]
 800fd06:	2340      	movs	r3, #64	@ 0x40
 800fd08:	2202      	movs	r2, #2
 800fd0a:	6878      	ldr	r0, [r7, #4]
 800fd0c:	f002 fab1 	bl	8012272 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800fd10:	4b3e      	ldr	r3, [pc, #248]	@ (800fe0c <USBD_CDC_Init+0x1e4>)
 800fd12:	781b      	ldrb	r3, [r3, #0]
 800fd14:	f003 020f 	and.w	r2, r3, #15
 800fd18:	6879      	ldr	r1, [r7, #4]
 800fd1a:	4613      	mov	r3, r2
 800fd1c:	009b      	lsls	r3, r3, #2
 800fd1e:	4413      	add	r3, r2
 800fd20:	009b      	lsls	r3, r3, #2
 800fd22:	440b      	add	r3, r1
 800fd24:	3324      	adds	r3, #36	@ 0x24
 800fd26:	2201      	movs	r2, #1
 800fd28:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800fd2a:	4b39      	ldr	r3, [pc, #228]	@ (800fe10 <USBD_CDC_Init+0x1e8>)
 800fd2c:	7819      	ldrb	r1, [r3, #0]
 800fd2e:	2340      	movs	r3, #64	@ 0x40
 800fd30:	2202      	movs	r2, #2
 800fd32:	6878      	ldr	r0, [r7, #4]
 800fd34:	f002 fa9d 	bl	8012272 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800fd38:	4b35      	ldr	r3, [pc, #212]	@ (800fe10 <USBD_CDC_Init+0x1e8>)
 800fd3a:	781b      	ldrb	r3, [r3, #0]
 800fd3c:	f003 020f 	and.w	r2, r3, #15
 800fd40:	6879      	ldr	r1, [r7, #4]
 800fd42:	4613      	mov	r3, r2
 800fd44:	009b      	lsls	r3, r3, #2
 800fd46:	4413      	add	r3, r2
 800fd48:	009b      	lsls	r3, r3, #2
 800fd4a:	440b      	add	r3, r1
 800fd4c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fd50:	2201      	movs	r2, #1
 800fd52:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800fd54:	4b2f      	ldr	r3, [pc, #188]	@ (800fe14 <USBD_CDC_Init+0x1ec>)
 800fd56:	781b      	ldrb	r3, [r3, #0]
 800fd58:	f003 020f 	and.w	r2, r3, #15
 800fd5c:	6879      	ldr	r1, [r7, #4]
 800fd5e:	4613      	mov	r3, r2
 800fd60:	009b      	lsls	r3, r3, #2
 800fd62:	4413      	add	r3, r2
 800fd64:	009b      	lsls	r3, r3, #2
 800fd66:	440b      	add	r3, r1
 800fd68:	3326      	adds	r3, #38	@ 0x26
 800fd6a:	2210      	movs	r2, #16
 800fd6c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800fd6e:	4b29      	ldr	r3, [pc, #164]	@ (800fe14 <USBD_CDC_Init+0x1ec>)
 800fd70:	7819      	ldrb	r1, [r3, #0]
 800fd72:	2308      	movs	r3, #8
 800fd74:	2203      	movs	r2, #3
 800fd76:	6878      	ldr	r0, [r7, #4]
 800fd78:	f002 fa7b 	bl	8012272 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800fd7c:	4b25      	ldr	r3, [pc, #148]	@ (800fe14 <USBD_CDC_Init+0x1ec>)
 800fd7e:	781b      	ldrb	r3, [r3, #0]
 800fd80:	f003 020f 	and.w	r2, r3, #15
 800fd84:	6879      	ldr	r1, [r7, #4]
 800fd86:	4613      	mov	r3, r2
 800fd88:	009b      	lsls	r3, r3, #2
 800fd8a:	4413      	add	r3, r2
 800fd8c:	009b      	lsls	r3, r3, #2
 800fd8e:	440b      	add	r3, r1
 800fd90:	3324      	adds	r3, #36	@ 0x24
 800fd92:	2201      	movs	r2, #1
 800fd94:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	2200      	movs	r2, #0
 800fd9a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fda4:	687a      	ldr	r2, [r7, #4]
 800fda6:	33b0      	adds	r3, #176	@ 0xb0
 800fda8:	009b      	lsls	r3, r3, #2
 800fdaa:	4413      	add	r3, r2
 800fdac:	685b      	ldr	r3, [r3, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	2200      	movs	r2, #0
 800fdb6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800fdba:	68fb      	ldr	r3, [r7, #12]
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d101      	bne.n	800fdd0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800fdcc:	2302      	movs	r3, #2
 800fdce:	e018      	b.n	800fe02 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	7c1b      	ldrb	r3, [r3, #16]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d10a      	bne.n	800fdee <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fdd8:	4b0d      	ldr	r3, [pc, #52]	@ (800fe10 <USBD_CDC_Init+0x1e8>)
 800fdda:	7819      	ldrb	r1, [r3, #0]
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fde2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fde6:	6878      	ldr	r0, [r7, #4]
 800fde8:	f002 fb32 	bl	8012450 <USBD_LL_PrepareReceive>
 800fdec:	e008      	b.n	800fe00 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fdee:	4b08      	ldr	r3, [pc, #32]	@ (800fe10 <USBD_CDC_Init+0x1e8>)
 800fdf0:	7819      	ldrb	r1, [r3, #0]
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fdf8:	2340      	movs	r3, #64	@ 0x40
 800fdfa:	6878      	ldr	r0, [r7, #4]
 800fdfc:	f002 fb28 	bl	8012450 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800fe00:	2300      	movs	r3, #0
}
 800fe02:	4618      	mov	r0, r3
 800fe04:	3710      	adds	r7, #16
 800fe06:	46bd      	mov	sp, r7
 800fe08:	bd80      	pop	{r7, pc}
 800fe0a:	bf00      	nop
 800fe0c:	200000bf 	.word	0x200000bf
 800fe10:	200000c0 	.word	0x200000c0
 800fe14:	200000c1 	.word	0x200000c1

0800fe18 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b082      	sub	sp, #8
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
 800fe20:	460b      	mov	r3, r1
 800fe22:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800fe24:	4b3a      	ldr	r3, [pc, #232]	@ (800ff10 <USBD_CDC_DeInit+0xf8>)
 800fe26:	781b      	ldrb	r3, [r3, #0]
 800fe28:	4619      	mov	r1, r3
 800fe2a:	6878      	ldr	r0, [r7, #4]
 800fe2c:	f002 fa47 	bl	80122be <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800fe30:	4b37      	ldr	r3, [pc, #220]	@ (800ff10 <USBD_CDC_DeInit+0xf8>)
 800fe32:	781b      	ldrb	r3, [r3, #0]
 800fe34:	f003 020f 	and.w	r2, r3, #15
 800fe38:	6879      	ldr	r1, [r7, #4]
 800fe3a:	4613      	mov	r3, r2
 800fe3c:	009b      	lsls	r3, r3, #2
 800fe3e:	4413      	add	r3, r2
 800fe40:	009b      	lsls	r3, r3, #2
 800fe42:	440b      	add	r3, r1
 800fe44:	3324      	adds	r3, #36	@ 0x24
 800fe46:	2200      	movs	r2, #0
 800fe48:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800fe4a:	4b32      	ldr	r3, [pc, #200]	@ (800ff14 <USBD_CDC_DeInit+0xfc>)
 800fe4c:	781b      	ldrb	r3, [r3, #0]
 800fe4e:	4619      	mov	r1, r3
 800fe50:	6878      	ldr	r0, [r7, #4]
 800fe52:	f002 fa34 	bl	80122be <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800fe56:	4b2f      	ldr	r3, [pc, #188]	@ (800ff14 <USBD_CDC_DeInit+0xfc>)
 800fe58:	781b      	ldrb	r3, [r3, #0]
 800fe5a:	f003 020f 	and.w	r2, r3, #15
 800fe5e:	6879      	ldr	r1, [r7, #4]
 800fe60:	4613      	mov	r3, r2
 800fe62:	009b      	lsls	r3, r3, #2
 800fe64:	4413      	add	r3, r2
 800fe66:	009b      	lsls	r3, r3, #2
 800fe68:	440b      	add	r3, r1
 800fe6a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fe6e:	2200      	movs	r2, #0
 800fe70:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800fe72:	4b29      	ldr	r3, [pc, #164]	@ (800ff18 <USBD_CDC_DeInit+0x100>)
 800fe74:	781b      	ldrb	r3, [r3, #0]
 800fe76:	4619      	mov	r1, r3
 800fe78:	6878      	ldr	r0, [r7, #4]
 800fe7a:	f002 fa20 	bl	80122be <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800fe7e:	4b26      	ldr	r3, [pc, #152]	@ (800ff18 <USBD_CDC_DeInit+0x100>)
 800fe80:	781b      	ldrb	r3, [r3, #0]
 800fe82:	f003 020f 	and.w	r2, r3, #15
 800fe86:	6879      	ldr	r1, [r7, #4]
 800fe88:	4613      	mov	r3, r2
 800fe8a:	009b      	lsls	r3, r3, #2
 800fe8c:	4413      	add	r3, r2
 800fe8e:	009b      	lsls	r3, r3, #2
 800fe90:	440b      	add	r3, r1
 800fe92:	3324      	adds	r3, #36	@ 0x24
 800fe94:	2200      	movs	r2, #0
 800fe96:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800fe98:	4b1f      	ldr	r3, [pc, #124]	@ (800ff18 <USBD_CDC_DeInit+0x100>)
 800fe9a:	781b      	ldrb	r3, [r3, #0]
 800fe9c:	f003 020f 	and.w	r2, r3, #15
 800fea0:	6879      	ldr	r1, [r7, #4]
 800fea2:	4613      	mov	r3, r2
 800fea4:	009b      	lsls	r3, r3, #2
 800fea6:	4413      	add	r3, r2
 800fea8:	009b      	lsls	r3, r3, #2
 800feaa:	440b      	add	r3, r1
 800feac:	3326      	adds	r3, #38	@ 0x26
 800feae:	2200      	movs	r2, #0
 800feb0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	32b0      	adds	r2, #176	@ 0xb0
 800febc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d01f      	beq.n	800ff04 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800feca:	687a      	ldr	r2, [r7, #4]
 800fecc:	33b0      	adds	r3, #176	@ 0xb0
 800fece:	009b      	lsls	r3, r3, #2
 800fed0:	4413      	add	r3, r2
 800fed2:	685b      	ldr	r3, [r3, #4]
 800fed4:	685b      	ldr	r3, [r3, #4]
 800fed6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	32b0      	adds	r2, #176	@ 0xb0
 800fee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fee6:	4618      	mov	r0, r3
 800fee8:	f002 fb2a 	bl	8012540 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	32b0      	adds	r2, #176	@ 0xb0
 800fef6:	2100      	movs	r1, #0
 800fef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	2200      	movs	r2, #0
 800ff00:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ff04:	2300      	movs	r3, #0
}
 800ff06:	4618      	mov	r0, r3
 800ff08:	3708      	adds	r7, #8
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bd80      	pop	{r7, pc}
 800ff0e:	bf00      	nop
 800ff10:	200000bf 	.word	0x200000bf
 800ff14:	200000c0 	.word	0x200000c0
 800ff18:	200000c1 	.word	0x200000c1

0800ff1c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ff1c:	b580      	push	{r7, lr}
 800ff1e:	b086      	sub	sp, #24
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
 800ff24:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	32b0      	adds	r2, #176	@ 0xb0
 800ff30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff34:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ff36:	2300      	movs	r3, #0
 800ff38:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ff3e:	2300      	movs	r3, #0
 800ff40:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ff42:	693b      	ldr	r3, [r7, #16]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d101      	bne.n	800ff4c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ff48:	2303      	movs	r3, #3
 800ff4a:	e0bf      	b.n	80100cc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ff4c:	683b      	ldr	r3, [r7, #0]
 800ff4e:	781b      	ldrb	r3, [r3, #0]
 800ff50:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d050      	beq.n	800fffa <USBD_CDC_Setup+0xde>
 800ff58:	2b20      	cmp	r3, #32
 800ff5a:	f040 80af 	bne.w	80100bc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ff5e:	683b      	ldr	r3, [r7, #0]
 800ff60:	88db      	ldrh	r3, [r3, #6]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d03a      	beq.n	800ffdc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ff66:	683b      	ldr	r3, [r7, #0]
 800ff68:	781b      	ldrb	r3, [r3, #0]
 800ff6a:	b25b      	sxtb	r3, r3
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	da1b      	bge.n	800ffa8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ff76:	687a      	ldr	r2, [r7, #4]
 800ff78:	33b0      	adds	r3, #176	@ 0xb0
 800ff7a:	009b      	lsls	r3, r3, #2
 800ff7c:	4413      	add	r3, r2
 800ff7e:	685b      	ldr	r3, [r3, #4]
 800ff80:	689b      	ldr	r3, [r3, #8]
 800ff82:	683a      	ldr	r2, [r7, #0]
 800ff84:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ff86:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ff88:	683a      	ldr	r2, [r7, #0]
 800ff8a:	88d2      	ldrh	r2, [r2, #6]
 800ff8c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ff8e:	683b      	ldr	r3, [r7, #0]
 800ff90:	88db      	ldrh	r3, [r3, #6]
 800ff92:	2b07      	cmp	r3, #7
 800ff94:	bf28      	it	cs
 800ff96:	2307      	movcs	r3, #7
 800ff98:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ff9a:	693b      	ldr	r3, [r7, #16]
 800ff9c:	89fa      	ldrh	r2, [r7, #14]
 800ff9e:	4619      	mov	r1, r3
 800ffa0:	6878      	ldr	r0, [r7, #4]
 800ffa2:	f001 fd47 	bl	8011a34 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ffa6:	e090      	b.n	80100ca <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ffa8:	683b      	ldr	r3, [r7, #0]
 800ffaa:	785a      	ldrb	r2, [r3, #1]
 800ffac:	693b      	ldr	r3, [r7, #16]
 800ffae:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ffb2:	683b      	ldr	r3, [r7, #0]
 800ffb4:	88db      	ldrh	r3, [r3, #6]
 800ffb6:	2b3f      	cmp	r3, #63	@ 0x3f
 800ffb8:	d803      	bhi.n	800ffc2 <USBD_CDC_Setup+0xa6>
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	88db      	ldrh	r3, [r3, #6]
 800ffbe:	b2da      	uxtb	r2, r3
 800ffc0:	e000      	b.n	800ffc4 <USBD_CDC_Setup+0xa8>
 800ffc2:	2240      	movs	r2, #64	@ 0x40
 800ffc4:	693b      	ldr	r3, [r7, #16]
 800ffc6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ffca:	6939      	ldr	r1, [r7, #16]
 800ffcc:	693b      	ldr	r3, [r7, #16]
 800ffce:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800ffd2:	461a      	mov	r2, r3
 800ffd4:	6878      	ldr	r0, [r7, #4]
 800ffd6:	f001 fd59 	bl	8011a8c <USBD_CtlPrepareRx>
      break;
 800ffda:	e076      	b.n	80100ca <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ffe2:	687a      	ldr	r2, [r7, #4]
 800ffe4:	33b0      	adds	r3, #176	@ 0xb0
 800ffe6:	009b      	lsls	r3, r3, #2
 800ffe8:	4413      	add	r3, r2
 800ffea:	685b      	ldr	r3, [r3, #4]
 800ffec:	689b      	ldr	r3, [r3, #8]
 800ffee:	683a      	ldr	r2, [r7, #0]
 800fff0:	7850      	ldrb	r0, [r2, #1]
 800fff2:	2200      	movs	r2, #0
 800fff4:	6839      	ldr	r1, [r7, #0]
 800fff6:	4798      	blx	r3
      break;
 800fff8:	e067      	b.n	80100ca <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	785b      	ldrb	r3, [r3, #1]
 800fffe:	2b0b      	cmp	r3, #11
 8010000:	d851      	bhi.n	80100a6 <USBD_CDC_Setup+0x18a>
 8010002:	a201      	add	r2, pc, #4	@ (adr r2, 8010008 <USBD_CDC_Setup+0xec>)
 8010004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010008:	08010039 	.word	0x08010039
 801000c:	080100b5 	.word	0x080100b5
 8010010:	080100a7 	.word	0x080100a7
 8010014:	080100a7 	.word	0x080100a7
 8010018:	080100a7 	.word	0x080100a7
 801001c:	080100a7 	.word	0x080100a7
 8010020:	080100a7 	.word	0x080100a7
 8010024:	080100a7 	.word	0x080100a7
 8010028:	080100a7 	.word	0x080100a7
 801002c:	080100a7 	.word	0x080100a7
 8010030:	08010063 	.word	0x08010063
 8010034:	0801008d 	.word	0x0801008d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801003e:	b2db      	uxtb	r3, r3
 8010040:	2b03      	cmp	r3, #3
 8010042:	d107      	bne.n	8010054 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010044:	f107 030a 	add.w	r3, r7, #10
 8010048:	2202      	movs	r2, #2
 801004a:	4619      	mov	r1, r3
 801004c:	6878      	ldr	r0, [r7, #4]
 801004e:	f001 fcf1 	bl	8011a34 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010052:	e032      	b.n	80100ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010054:	6839      	ldr	r1, [r7, #0]
 8010056:	6878      	ldr	r0, [r7, #4]
 8010058:	f001 fc6f 	bl	801193a <USBD_CtlError>
            ret = USBD_FAIL;
 801005c:	2303      	movs	r3, #3
 801005e:	75fb      	strb	r3, [r7, #23]
          break;
 8010060:	e02b      	b.n	80100ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010068:	b2db      	uxtb	r3, r3
 801006a:	2b03      	cmp	r3, #3
 801006c:	d107      	bne.n	801007e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801006e:	f107 030d 	add.w	r3, r7, #13
 8010072:	2201      	movs	r2, #1
 8010074:	4619      	mov	r1, r3
 8010076:	6878      	ldr	r0, [r7, #4]
 8010078:	f001 fcdc 	bl	8011a34 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801007c:	e01d      	b.n	80100ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801007e:	6839      	ldr	r1, [r7, #0]
 8010080:	6878      	ldr	r0, [r7, #4]
 8010082:	f001 fc5a 	bl	801193a <USBD_CtlError>
            ret = USBD_FAIL;
 8010086:	2303      	movs	r3, #3
 8010088:	75fb      	strb	r3, [r7, #23]
          break;
 801008a:	e016      	b.n	80100ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010092:	b2db      	uxtb	r3, r3
 8010094:	2b03      	cmp	r3, #3
 8010096:	d00f      	beq.n	80100b8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8010098:	6839      	ldr	r1, [r7, #0]
 801009a:	6878      	ldr	r0, [r7, #4]
 801009c:	f001 fc4d 	bl	801193a <USBD_CtlError>
            ret = USBD_FAIL;
 80100a0:	2303      	movs	r3, #3
 80100a2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80100a4:	e008      	b.n	80100b8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80100a6:	6839      	ldr	r1, [r7, #0]
 80100a8:	6878      	ldr	r0, [r7, #4]
 80100aa:	f001 fc46 	bl	801193a <USBD_CtlError>
          ret = USBD_FAIL;
 80100ae:	2303      	movs	r3, #3
 80100b0:	75fb      	strb	r3, [r7, #23]
          break;
 80100b2:	e002      	b.n	80100ba <USBD_CDC_Setup+0x19e>
          break;
 80100b4:	bf00      	nop
 80100b6:	e008      	b.n	80100ca <USBD_CDC_Setup+0x1ae>
          break;
 80100b8:	bf00      	nop
      }
      break;
 80100ba:	e006      	b.n	80100ca <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80100bc:	6839      	ldr	r1, [r7, #0]
 80100be:	6878      	ldr	r0, [r7, #4]
 80100c0:	f001 fc3b 	bl	801193a <USBD_CtlError>
      ret = USBD_FAIL;
 80100c4:	2303      	movs	r3, #3
 80100c6:	75fb      	strb	r3, [r7, #23]
      break;
 80100c8:	bf00      	nop
  }

  return (uint8_t)ret;
 80100ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80100cc:	4618      	mov	r0, r3
 80100ce:	3718      	adds	r7, #24
 80100d0:	46bd      	mov	sp, r7
 80100d2:	bd80      	pop	{r7, pc}

080100d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80100d4:	b580      	push	{r7, lr}
 80100d6:	b084      	sub	sp, #16
 80100d8:	af00      	add	r7, sp, #0
 80100da:	6078      	str	r0, [r7, #4]
 80100dc:	460b      	mov	r3, r1
 80100de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80100e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	32b0      	adds	r2, #176	@ 0xb0
 80100f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d101      	bne.n	80100fe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80100fa:	2303      	movs	r3, #3
 80100fc:	e065      	b.n	80101ca <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	32b0      	adds	r2, #176	@ 0xb0
 8010108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801010c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801010e:	78fb      	ldrb	r3, [r7, #3]
 8010110:	f003 020f 	and.w	r2, r3, #15
 8010114:	6879      	ldr	r1, [r7, #4]
 8010116:	4613      	mov	r3, r2
 8010118:	009b      	lsls	r3, r3, #2
 801011a:	4413      	add	r3, r2
 801011c:	009b      	lsls	r3, r3, #2
 801011e:	440b      	add	r3, r1
 8010120:	3318      	adds	r3, #24
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d02f      	beq.n	8010188 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8010128:	78fb      	ldrb	r3, [r7, #3]
 801012a:	f003 020f 	and.w	r2, r3, #15
 801012e:	6879      	ldr	r1, [r7, #4]
 8010130:	4613      	mov	r3, r2
 8010132:	009b      	lsls	r3, r3, #2
 8010134:	4413      	add	r3, r2
 8010136:	009b      	lsls	r3, r3, #2
 8010138:	440b      	add	r3, r1
 801013a:	3318      	adds	r3, #24
 801013c:	681a      	ldr	r2, [r3, #0]
 801013e:	78fb      	ldrb	r3, [r7, #3]
 8010140:	f003 010f 	and.w	r1, r3, #15
 8010144:	68f8      	ldr	r0, [r7, #12]
 8010146:	460b      	mov	r3, r1
 8010148:	009b      	lsls	r3, r3, #2
 801014a:	440b      	add	r3, r1
 801014c:	00db      	lsls	r3, r3, #3
 801014e:	4403      	add	r3, r0
 8010150:	3320      	adds	r3, #32
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	fbb2 f1f3 	udiv	r1, r2, r3
 8010158:	fb01 f303 	mul.w	r3, r1, r3
 801015c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801015e:	2b00      	cmp	r3, #0
 8010160:	d112      	bne.n	8010188 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8010162:	78fb      	ldrb	r3, [r7, #3]
 8010164:	f003 020f 	and.w	r2, r3, #15
 8010168:	6879      	ldr	r1, [r7, #4]
 801016a:	4613      	mov	r3, r2
 801016c:	009b      	lsls	r3, r3, #2
 801016e:	4413      	add	r3, r2
 8010170:	009b      	lsls	r3, r3, #2
 8010172:	440b      	add	r3, r1
 8010174:	3318      	adds	r3, #24
 8010176:	2200      	movs	r2, #0
 8010178:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801017a:	78f9      	ldrb	r1, [r7, #3]
 801017c:	2300      	movs	r3, #0
 801017e:	2200      	movs	r2, #0
 8010180:	6878      	ldr	r0, [r7, #4]
 8010182:	f002 f944 	bl	801240e <USBD_LL_Transmit>
 8010186:	e01f      	b.n	80101c8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8010188:	68bb      	ldr	r3, [r7, #8]
 801018a:	2200      	movs	r2, #0
 801018c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010196:	687a      	ldr	r2, [r7, #4]
 8010198:	33b0      	adds	r3, #176	@ 0xb0
 801019a:	009b      	lsls	r3, r3, #2
 801019c:	4413      	add	r3, r2
 801019e:	685b      	ldr	r3, [r3, #4]
 80101a0:	691b      	ldr	r3, [r3, #16]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d010      	beq.n	80101c8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80101ac:	687a      	ldr	r2, [r7, #4]
 80101ae:	33b0      	adds	r3, #176	@ 0xb0
 80101b0:	009b      	lsls	r3, r3, #2
 80101b2:	4413      	add	r3, r2
 80101b4:	685b      	ldr	r3, [r3, #4]
 80101b6:	691b      	ldr	r3, [r3, #16]
 80101b8:	68ba      	ldr	r2, [r7, #8]
 80101ba:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80101be:	68ba      	ldr	r2, [r7, #8]
 80101c0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80101c4:	78fa      	ldrb	r2, [r7, #3]
 80101c6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80101c8:	2300      	movs	r3, #0
}
 80101ca:	4618      	mov	r0, r3
 80101cc:	3710      	adds	r7, #16
 80101ce:	46bd      	mov	sp, r7
 80101d0:	bd80      	pop	{r7, pc}

080101d2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80101d2:	b580      	push	{r7, lr}
 80101d4:	b084      	sub	sp, #16
 80101d6:	af00      	add	r7, sp, #0
 80101d8:	6078      	str	r0, [r7, #4]
 80101da:	460b      	mov	r3, r1
 80101dc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	32b0      	adds	r2, #176	@ 0xb0
 80101e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101ec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	32b0      	adds	r2, #176	@ 0xb0
 80101f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d101      	bne.n	8010204 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8010200:	2303      	movs	r3, #3
 8010202:	e01a      	b.n	801023a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010204:	78fb      	ldrb	r3, [r7, #3]
 8010206:	4619      	mov	r1, r3
 8010208:	6878      	ldr	r0, [r7, #4]
 801020a:	f002 f942 	bl	8012492 <USBD_LL_GetRxDataSize>
 801020e:	4602      	mov	r2, r0
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801021c:	687a      	ldr	r2, [r7, #4]
 801021e:	33b0      	adds	r3, #176	@ 0xb0
 8010220:	009b      	lsls	r3, r3, #2
 8010222:	4413      	add	r3, r2
 8010224:	685b      	ldr	r3, [r3, #4]
 8010226:	68db      	ldr	r3, [r3, #12]
 8010228:	68fa      	ldr	r2, [r7, #12]
 801022a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 801022e:	68fa      	ldr	r2, [r7, #12]
 8010230:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8010234:	4611      	mov	r1, r2
 8010236:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010238:	2300      	movs	r3, #0
}
 801023a:	4618      	mov	r0, r3
 801023c:	3710      	adds	r7, #16
 801023e:	46bd      	mov	sp, r7
 8010240:	bd80      	pop	{r7, pc}

08010242 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010242:	b580      	push	{r7, lr}
 8010244:	b084      	sub	sp, #16
 8010246:	af00      	add	r7, sp, #0
 8010248:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	32b0      	adds	r2, #176	@ 0xb0
 8010254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010258:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801025a:	68fb      	ldr	r3, [r7, #12]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d101      	bne.n	8010264 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010260:	2303      	movs	r3, #3
 8010262:	e024      	b.n	80102ae <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801026a:	687a      	ldr	r2, [r7, #4]
 801026c:	33b0      	adds	r3, #176	@ 0xb0
 801026e:	009b      	lsls	r3, r3, #2
 8010270:	4413      	add	r3, r2
 8010272:	685b      	ldr	r3, [r3, #4]
 8010274:	2b00      	cmp	r3, #0
 8010276:	d019      	beq.n	80102ac <USBD_CDC_EP0_RxReady+0x6a>
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801027e:	2bff      	cmp	r3, #255	@ 0xff
 8010280:	d014      	beq.n	80102ac <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010288:	687a      	ldr	r2, [r7, #4]
 801028a:	33b0      	adds	r3, #176	@ 0xb0
 801028c:	009b      	lsls	r3, r3, #2
 801028e:	4413      	add	r3, r2
 8010290:	685b      	ldr	r3, [r3, #4]
 8010292:	689b      	ldr	r3, [r3, #8]
 8010294:	68fa      	ldr	r2, [r7, #12]
 8010296:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 801029a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 801029c:	68fa      	ldr	r2, [r7, #12]
 801029e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80102a2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80102a4:	68fb      	ldr	r3, [r7, #12]
 80102a6:	22ff      	movs	r2, #255	@ 0xff
 80102a8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80102ac:	2300      	movs	r3, #0
}
 80102ae:	4618      	mov	r0, r3
 80102b0:	3710      	adds	r7, #16
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}
	...

080102b8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b086      	sub	sp, #24
 80102bc:	af00      	add	r7, sp, #0
 80102be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80102c0:	2182      	movs	r1, #130	@ 0x82
 80102c2:	4818      	ldr	r0, [pc, #96]	@ (8010324 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80102c4:	f000 fcd9 	bl	8010c7a <USBD_GetEpDesc>
 80102c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80102ca:	2101      	movs	r1, #1
 80102cc:	4815      	ldr	r0, [pc, #84]	@ (8010324 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80102ce:	f000 fcd4 	bl	8010c7a <USBD_GetEpDesc>
 80102d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80102d4:	2181      	movs	r1, #129	@ 0x81
 80102d6:	4813      	ldr	r0, [pc, #76]	@ (8010324 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80102d8:	f000 fccf 	bl	8010c7a <USBD_GetEpDesc>
 80102dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80102de:	697b      	ldr	r3, [r7, #20]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d002      	beq.n	80102ea <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80102e4:	697b      	ldr	r3, [r7, #20]
 80102e6:	2210      	movs	r2, #16
 80102e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80102ea:	693b      	ldr	r3, [r7, #16]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d006      	beq.n	80102fe <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80102f0:	693b      	ldr	r3, [r7, #16]
 80102f2:	2200      	movs	r2, #0
 80102f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80102f8:	711a      	strb	r2, [r3, #4]
 80102fa:	2200      	movs	r2, #0
 80102fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d006      	beq.n	8010312 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	2200      	movs	r2, #0
 8010308:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801030c:	711a      	strb	r2, [r3, #4]
 801030e:	2200      	movs	r2, #0
 8010310:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	2243      	movs	r2, #67	@ 0x43
 8010316:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010318:	4b02      	ldr	r3, [pc, #8]	@ (8010324 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801031a:	4618      	mov	r0, r3
 801031c:	3718      	adds	r7, #24
 801031e:	46bd      	mov	sp, r7
 8010320:	bd80      	pop	{r7, pc}
 8010322:	bf00      	nop
 8010324:	2000007c 	.word	0x2000007c

08010328 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010328:	b580      	push	{r7, lr}
 801032a:	b086      	sub	sp, #24
 801032c:	af00      	add	r7, sp, #0
 801032e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010330:	2182      	movs	r1, #130	@ 0x82
 8010332:	4818      	ldr	r0, [pc, #96]	@ (8010394 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010334:	f000 fca1 	bl	8010c7a <USBD_GetEpDesc>
 8010338:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801033a:	2101      	movs	r1, #1
 801033c:	4815      	ldr	r0, [pc, #84]	@ (8010394 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801033e:	f000 fc9c 	bl	8010c7a <USBD_GetEpDesc>
 8010342:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010344:	2181      	movs	r1, #129	@ 0x81
 8010346:	4813      	ldr	r0, [pc, #76]	@ (8010394 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010348:	f000 fc97 	bl	8010c7a <USBD_GetEpDesc>
 801034c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801034e:	697b      	ldr	r3, [r7, #20]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d002      	beq.n	801035a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8010354:	697b      	ldr	r3, [r7, #20]
 8010356:	2210      	movs	r2, #16
 8010358:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801035a:	693b      	ldr	r3, [r7, #16]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d006      	beq.n	801036e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010360:	693b      	ldr	r3, [r7, #16]
 8010362:	2200      	movs	r2, #0
 8010364:	711a      	strb	r2, [r3, #4]
 8010366:	2200      	movs	r2, #0
 8010368:	f042 0202 	orr.w	r2, r2, #2
 801036c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d006      	beq.n	8010382 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	2200      	movs	r2, #0
 8010378:	711a      	strb	r2, [r3, #4]
 801037a:	2200      	movs	r2, #0
 801037c:	f042 0202 	orr.w	r2, r2, #2
 8010380:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	2243      	movs	r2, #67	@ 0x43
 8010386:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010388:	4b02      	ldr	r3, [pc, #8]	@ (8010394 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801038a:	4618      	mov	r0, r3
 801038c:	3718      	adds	r7, #24
 801038e:	46bd      	mov	sp, r7
 8010390:	bd80      	pop	{r7, pc}
 8010392:	bf00      	nop
 8010394:	2000007c 	.word	0x2000007c

08010398 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b086      	sub	sp, #24
 801039c:	af00      	add	r7, sp, #0
 801039e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80103a0:	2182      	movs	r1, #130	@ 0x82
 80103a2:	4818      	ldr	r0, [pc, #96]	@ (8010404 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80103a4:	f000 fc69 	bl	8010c7a <USBD_GetEpDesc>
 80103a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80103aa:	2101      	movs	r1, #1
 80103ac:	4815      	ldr	r0, [pc, #84]	@ (8010404 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80103ae:	f000 fc64 	bl	8010c7a <USBD_GetEpDesc>
 80103b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80103b4:	2181      	movs	r1, #129	@ 0x81
 80103b6:	4813      	ldr	r0, [pc, #76]	@ (8010404 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80103b8:	f000 fc5f 	bl	8010c7a <USBD_GetEpDesc>
 80103bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80103be:	697b      	ldr	r3, [r7, #20]
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d002      	beq.n	80103ca <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80103c4:	697b      	ldr	r3, [r7, #20]
 80103c6:	2210      	movs	r2, #16
 80103c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80103ca:	693b      	ldr	r3, [r7, #16]
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d006      	beq.n	80103de <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80103d0:	693b      	ldr	r3, [r7, #16]
 80103d2:	2200      	movs	r2, #0
 80103d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80103d8:	711a      	strb	r2, [r3, #4]
 80103da:	2200      	movs	r2, #0
 80103dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d006      	beq.n	80103f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	2200      	movs	r2, #0
 80103e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80103ec:	711a      	strb	r2, [r3, #4]
 80103ee:	2200      	movs	r2, #0
 80103f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	2243      	movs	r2, #67	@ 0x43
 80103f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80103f8:	4b02      	ldr	r3, [pc, #8]	@ (8010404 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80103fa:	4618      	mov	r0, r3
 80103fc:	3718      	adds	r7, #24
 80103fe:	46bd      	mov	sp, r7
 8010400:	bd80      	pop	{r7, pc}
 8010402:	bf00      	nop
 8010404:	2000007c 	.word	0x2000007c

08010408 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010408:	b480      	push	{r7}
 801040a:	b083      	sub	sp, #12
 801040c:	af00      	add	r7, sp, #0
 801040e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	220a      	movs	r2, #10
 8010414:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8010416:	4b03      	ldr	r3, [pc, #12]	@ (8010424 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8010418:	4618      	mov	r0, r3
 801041a:	370c      	adds	r7, #12
 801041c:	46bd      	mov	sp, r7
 801041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010422:	4770      	bx	lr
 8010424:	20000038 	.word	0x20000038

08010428 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8010428:	b480      	push	{r7}
 801042a:	b083      	sub	sp, #12
 801042c:	af00      	add	r7, sp, #0
 801042e:	6078      	str	r0, [r7, #4]
 8010430:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010432:	683b      	ldr	r3, [r7, #0]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d101      	bne.n	801043c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8010438:	2303      	movs	r3, #3
 801043a:	e009      	b.n	8010450 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010442:	687a      	ldr	r2, [r7, #4]
 8010444:	33b0      	adds	r3, #176	@ 0xb0
 8010446:	009b      	lsls	r3, r3, #2
 8010448:	4413      	add	r3, r2
 801044a:	683a      	ldr	r2, [r7, #0]
 801044c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801044e:	2300      	movs	r3, #0
}
 8010450:	4618      	mov	r0, r3
 8010452:	370c      	adds	r7, #12
 8010454:	46bd      	mov	sp, r7
 8010456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801045a:	4770      	bx	lr

0801045c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801045c:	b480      	push	{r7}
 801045e:	b087      	sub	sp, #28
 8010460:	af00      	add	r7, sp, #0
 8010462:	60f8      	str	r0, [r7, #12]
 8010464:	60b9      	str	r1, [r7, #8]
 8010466:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	32b0      	adds	r2, #176	@ 0xb0
 8010472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010476:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8010478:	697b      	ldr	r3, [r7, #20]
 801047a:	2b00      	cmp	r3, #0
 801047c:	d101      	bne.n	8010482 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801047e:	2303      	movs	r3, #3
 8010480:	e008      	b.n	8010494 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8010482:	697b      	ldr	r3, [r7, #20]
 8010484:	68ba      	ldr	r2, [r7, #8]
 8010486:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 801048a:	697b      	ldr	r3, [r7, #20]
 801048c:	687a      	ldr	r2, [r7, #4]
 801048e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8010492:	2300      	movs	r3, #0
}
 8010494:	4618      	mov	r0, r3
 8010496:	371c      	adds	r7, #28
 8010498:	46bd      	mov	sp, r7
 801049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049e:	4770      	bx	lr

080104a0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80104a0:	b480      	push	{r7}
 80104a2:	b085      	sub	sp, #20
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
 80104a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	32b0      	adds	r2, #176	@ 0xb0
 80104b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80104b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d101      	bne.n	80104c4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80104c0:	2303      	movs	r3, #3
 80104c2:	e004      	b.n	80104ce <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	683a      	ldr	r2, [r7, #0]
 80104c8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80104cc:	2300      	movs	r3, #0
}
 80104ce:	4618      	mov	r0, r3
 80104d0:	3714      	adds	r7, #20
 80104d2:	46bd      	mov	sp, r7
 80104d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d8:	4770      	bx	lr
	...

080104dc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b084      	sub	sp, #16
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	32b0      	adds	r2, #176	@ 0xb0
 80104ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80104f2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80104f4:	2301      	movs	r3, #1
 80104f6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80104f8:	68bb      	ldr	r3, [r7, #8]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d101      	bne.n	8010502 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80104fe:	2303      	movs	r3, #3
 8010500:	e025      	b.n	801054e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8010502:	68bb      	ldr	r3, [r7, #8]
 8010504:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8010508:	2b00      	cmp	r3, #0
 801050a:	d11f      	bne.n	801054c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801050c:	68bb      	ldr	r3, [r7, #8]
 801050e:	2201      	movs	r2, #1
 8010510:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8010514:	4b10      	ldr	r3, [pc, #64]	@ (8010558 <USBD_CDC_TransmitPacket+0x7c>)
 8010516:	781b      	ldrb	r3, [r3, #0]
 8010518:	f003 020f 	and.w	r2, r3, #15
 801051c:	68bb      	ldr	r3, [r7, #8]
 801051e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8010522:	6878      	ldr	r0, [r7, #4]
 8010524:	4613      	mov	r3, r2
 8010526:	009b      	lsls	r3, r3, #2
 8010528:	4413      	add	r3, r2
 801052a:	009b      	lsls	r3, r3, #2
 801052c:	4403      	add	r3, r0
 801052e:	3318      	adds	r3, #24
 8010530:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8010532:	4b09      	ldr	r3, [pc, #36]	@ (8010558 <USBD_CDC_TransmitPacket+0x7c>)
 8010534:	7819      	ldrb	r1, [r3, #0]
 8010536:	68bb      	ldr	r3, [r7, #8]
 8010538:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 801053c:	68bb      	ldr	r3, [r7, #8]
 801053e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8010542:	6878      	ldr	r0, [r7, #4]
 8010544:	f001 ff63 	bl	801240e <USBD_LL_Transmit>

    ret = USBD_OK;
 8010548:	2300      	movs	r3, #0
 801054a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801054c:	7bfb      	ldrb	r3, [r7, #15]
}
 801054e:	4618      	mov	r0, r3
 8010550:	3710      	adds	r7, #16
 8010552:	46bd      	mov	sp, r7
 8010554:	bd80      	pop	{r7, pc}
 8010556:	bf00      	nop
 8010558:	200000bf 	.word	0x200000bf

0801055c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801055c:	b580      	push	{r7, lr}
 801055e:	b084      	sub	sp, #16
 8010560:	af00      	add	r7, sp, #0
 8010562:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	32b0      	adds	r2, #176	@ 0xb0
 801056e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010572:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	32b0      	adds	r2, #176	@ 0xb0
 801057e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d101      	bne.n	801058a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8010586:	2303      	movs	r3, #3
 8010588:	e018      	b.n	80105bc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	7c1b      	ldrb	r3, [r3, #16]
 801058e:	2b00      	cmp	r3, #0
 8010590:	d10a      	bne.n	80105a8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010592:	4b0c      	ldr	r3, [pc, #48]	@ (80105c4 <USBD_CDC_ReceivePacket+0x68>)
 8010594:	7819      	ldrb	r1, [r3, #0]
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801059c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80105a0:	6878      	ldr	r0, [r7, #4]
 80105a2:	f001 ff55 	bl	8012450 <USBD_LL_PrepareReceive>
 80105a6:	e008      	b.n	80105ba <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80105a8:	4b06      	ldr	r3, [pc, #24]	@ (80105c4 <USBD_CDC_ReceivePacket+0x68>)
 80105aa:	7819      	ldrb	r1, [r3, #0]
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80105b2:	2340      	movs	r3, #64	@ 0x40
 80105b4:	6878      	ldr	r0, [r7, #4]
 80105b6:	f001 ff4b 	bl	8012450 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80105ba:	2300      	movs	r3, #0
}
 80105bc:	4618      	mov	r0, r3
 80105be:	3710      	adds	r7, #16
 80105c0:	46bd      	mov	sp, r7
 80105c2:	bd80      	pop	{r7, pc}
 80105c4:	200000c0 	.word	0x200000c0

080105c8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b086      	sub	sp, #24
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	60f8      	str	r0, [r7, #12]
 80105d0:	60b9      	str	r1, [r7, #8]
 80105d2:	4613      	mov	r3, r2
 80105d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d10a      	bne.n	80105f2 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 80105dc:	4817      	ldr	r0, [pc, #92]	@ (801063c <USBD_Init+0x74>)
 80105de:	f002 f8ad 	bl	801273c <iprintf>
 80105e2:	4817      	ldr	r0, [pc, #92]	@ (8010640 <USBD_Init+0x78>)
 80105e4:	f002 f8aa 	bl	801273c <iprintf>
 80105e8:	200a      	movs	r0, #10
 80105ea:	f002 f8b9 	bl	8012760 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80105ee:	2303      	movs	r3, #3
 80105f0:	e01f      	b.n	8010632 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	2200      	movs	r2, #0
 80105f6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	2200      	movs	r2, #0
 80105fe:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	2200      	movs	r2, #0
 8010606:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801060a:	68bb      	ldr	r3, [r7, #8]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d003      	beq.n	8010618 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	68ba      	ldr	r2, [r7, #8]
 8010614:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	2201      	movs	r2, #1
 801061c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	79fa      	ldrb	r2, [r7, #7]
 8010624:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010626:	68f8      	ldr	r0, [r7, #12]
 8010628:	f001 fda6 	bl	8012178 <USBD_LL_Init>
 801062c:	4603      	mov	r3, r0
 801062e:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010630:	7dfb      	ldrb	r3, [r7, #23]
}
 8010632:	4618      	mov	r0, r3
 8010634:	3718      	adds	r7, #24
 8010636:	46bd      	mov	sp, r7
 8010638:	bd80      	pop	{r7, pc}
 801063a:	bf00      	nop
 801063c:	080134f4 	.word	0x080134f4
 8010640:	080134fc 	.word	0x080134fc

08010644 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8010644:	b580      	push	{r7, lr}
 8010646:	b084      	sub	sp, #16
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
 801064c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801064e:	2300      	movs	r3, #0
 8010650:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8010652:	683b      	ldr	r3, [r7, #0]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d10a      	bne.n	801066e <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 8010658:	481a      	ldr	r0, [pc, #104]	@ (80106c4 <USBD_RegisterClass+0x80>)
 801065a:	f002 f86f 	bl	801273c <iprintf>
 801065e:	481a      	ldr	r0, [pc, #104]	@ (80106c8 <USBD_RegisterClass+0x84>)
 8010660:	f002 f86c 	bl	801273c <iprintf>
 8010664:	200a      	movs	r0, #10
 8010666:	f002 f87b 	bl	8012760 <putchar>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801066a:	2303      	movs	r3, #3
 801066c:	e025      	b.n	80106ba <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	683a      	ldr	r2, [r7, #0]
 8010672:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	32ae      	adds	r2, #174	@ 0xae
 8010680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010686:	2b00      	cmp	r3, #0
 8010688:	d00f      	beq.n	80106aa <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	32ae      	adds	r2, #174	@ 0xae
 8010694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801069a:	f107 020e 	add.w	r2, r7, #14
 801069e:	4610      	mov	r0, r2
 80106a0:	4798      	blx	r3
 80106a2:	4602      	mov	r2, r0
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80106b0:	1c5a      	adds	r2, r3, #1
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80106b8:	2300      	movs	r3, #0
}
 80106ba:	4618      	mov	r0, r3
 80106bc:	3710      	adds	r7, #16
 80106be:	46bd      	mov	sp, r7
 80106c0:	bd80      	pop	{r7, pc}
 80106c2:	bf00      	nop
 80106c4:	080134f4 	.word	0x080134f4
 80106c8:	08013514 	.word	0x08013514

080106cc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b082      	sub	sp, #8
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80106d4:	6878      	ldr	r0, [r7, #4]
 80106d6:	f001 fdb1 	bl	801223c <USBD_LL_Start>
 80106da:	4603      	mov	r3, r0
}
 80106dc:	4618      	mov	r0, r3
 80106de:	3708      	adds	r7, #8
 80106e0:	46bd      	mov	sp, r7
 80106e2:	bd80      	pop	{r7, pc}

080106e4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80106e4:	b480      	push	{r7}
 80106e6:	b083      	sub	sp, #12
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80106ec:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80106ee:	4618      	mov	r0, r3
 80106f0:	370c      	adds	r7, #12
 80106f2:	46bd      	mov	sp, r7
 80106f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f8:	4770      	bx	lr

080106fa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80106fa:	b580      	push	{r7, lr}
 80106fc:	b084      	sub	sp, #16
 80106fe:	af00      	add	r7, sp, #0
 8010700:	6078      	str	r0, [r7, #4]
 8010702:	460b      	mov	r3, r1
 8010704:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010706:	2300      	movs	r3, #0
 8010708:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010710:	2b00      	cmp	r3, #0
 8010712:	d009      	beq.n	8010728 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801071a:	681b      	ldr	r3, [r3, #0]
 801071c:	78fa      	ldrb	r2, [r7, #3]
 801071e:	4611      	mov	r1, r2
 8010720:	6878      	ldr	r0, [r7, #4]
 8010722:	4798      	blx	r3
 8010724:	4603      	mov	r3, r0
 8010726:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010728:	7bfb      	ldrb	r3, [r7, #15]
}
 801072a:	4618      	mov	r0, r3
 801072c:	3710      	adds	r7, #16
 801072e:	46bd      	mov	sp, r7
 8010730:	bd80      	pop	{r7, pc}

08010732 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010732:	b580      	push	{r7, lr}
 8010734:	b084      	sub	sp, #16
 8010736:	af00      	add	r7, sp, #0
 8010738:	6078      	str	r0, [r7, #4]
 801073a:	460b      	mov	r3, r1
 801073c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801073e:	2300      	movs	r3, #0
 8010740:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010748:	685b      	ldr	r3, [r3, #4]
 801074a:	78fa      	ldrb	r2, [r7, #3]
 801074c:	4611      	mov	r1, r2
 801074e:	6878      	ldr	r0, [r7, #4]
 8010750:	4798      	blx	r3
 8010752:	4603      	mov	r3, r0
 8010754:	2b00      	cmp	r3, #0
 8010756:	d001      	beq.n	801075c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8010758:	2303      	movs	r3, #3
 801075a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801075c:	7bfb      	ldrb	r3, [r7, #15]
}
 801075e:	4618      	mov	r0, r3
 8010760:	3710      	adds	r7, #16
 8010762:	46bd      	mov	sp, r7
 8010764:	bd80      	pop	{r7, pc}

08010766 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010766:	b580      	push	{r7, lr}
 8010768:	b084      	sub	sp, #16
 801076a:	af00      	add	r7, sp, #0
 801076c:	6078      	str	r0, [r7, #4]
 801076e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010776:	6839      	ldr	r1, [r7, #0]
 8010778:	4618      	mov	r0, r3
 801077a:	f001 f8a4 	bl	80118c6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	2201      	movs	r2, #1
 8010782:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 801078c:	461a      	mov	r2, r3
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801079a:	f003 031f 	and.w	r3, r3, #31
 801079e:	2b02      	cmp	r3, #2
 80107a0:	d01a      	beq.n	80107d8 <USBD_LL_SetupStage+0x72>
 80107a2:	2b02      	cmp	r3, #2
 80107a4:	d822      	bhi.n	80107ec <USBD_LL_SetupStage+0x86>
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d002      	beq.n	80107b0 <USBD_LL_SetupStage+0x4a>
 80107aa:	2b01      	cmp	r3, #1
 80107ac:	d00a      	beq.n	80107c4 <USBD_LL_SetupStage+0x5e>
 80107ae:	e01d      	b.n	80107ec <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80107b6:	4619      	mov	r1, r3
 80107b8:	6878      	ldr	r0, [r7, #4]
 80107ba:	f000 fad1 	bl	8010d60 <USBD_StdDevReq>
 80107be:	4603      	mov	r3, r0
 80107c0:	73fb      	strb	r3, [r7, #15]
      break;
 80107c2:	e020      	b.n	8010806 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80107ca:	4619      	mov	r1, r3
 80107cc:	6878      	ldr	r0, [r7, #4]
 80107ce:	f000 fb39 	bl	8010e44 <USBD_StdItfReq>
 80107d2:	4603      	mov	r3, r0
 80107d4:	73fb      	strb	r3, [r7, #15]
      break;
 80107d6:	e016      	b.n	8010806 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80107de:	4619      	mov	r1, r3
 80107e0:	6878      	ldr	r0, [r7, #4]
 80107e2:	f000 fb9b 	bl	8010f1c <USBD_StdEPReq>
 80107e6:	4603      	mov	r3, r0
 80107e8:	73fb      	strb	r3, [r7, #15]
      break;
 80107ea:	e00c      	b.n	8010806 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80107f2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80107f6:	b2db      	uxtb	r3, r3
 80107f8:	4619      	mov	r1, r3
 80107fa:	6878      	ldr	r0, [r7, #4]
 80107fc:	f001 fd7e 	bl	80122fc <USBD_LL_StallEP>
 8010800:	4603      	mov	r3, r0
 8010802:	73fb      	strb	r3, [r7, #15]
      break;
 8010804:	bf00      	nop
  }

  return ret;
 8010806:	7bfb      	ldrb	r3, [r7, #15]
}
 8010808:	4618      	mov	r0, r3
 801080a:	3710      	adds	r7, #16
 801080c:	46bd      	mov	sp, r7
 801080e:	bd80      	pop	{r7, pc}

08010810 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8010810:	b580      	push	{r7, lr}
 8010812:	b086      	sub	sp, #24
 8010814:	af00      	add	r7, sp, #0
 8010816:	60f8      	str	r0, [r7, #12]
 8010818:	460b      	mov	r3, r1
 801081a:	607a      	str	r2, [r7, #4]
 801081c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801081e:	2300      	movs	r3, #0
 8010820:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8010822:	7afb      	ldrb	r3, [r7, #11]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d16e      	bne.n	8010906 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 801082e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8010836:	2b03      	cmp	r3, #3
 8010838:	f040 8098 	bne.w	801096c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 801083c:	693b      	ldr	r3, [r7, #16]
 801083e:	689a      	ldr	r2, [r3, #8]
 8010840:	693b      	ldr	r3, [r7, #16]
 8010842:	68db      	ldr	r3, [r3, #12]
 8010844:	429a      	cmp	r2, r3
 8010846:	d913      	bls.n	8010870 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8010848:	693b      	ldr	r3, [r7, #16]
 801084a:	689a      	ldr	r2, [r3, #8]
 801084c:	693b      	ldr	r3, [r7, #16]
 801084e:	68db      	ldr	r3, [r3, #12]
 8010850:	1ad2      	subs	r2, r2, r3
 8010852:	693b      	ldr	r3, [r7, #16]
 8010854:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010856:	693b      	ldr	r3, [r7, #16]
 8010858:	68da      	ldr	r2, [r3, #12]
 801085a:	693b      	ldr	r3, [r7, #16]
 801085c:	689b      	ldr	r3, [r3, #8]
 801085e:	4293      	cmp	r3, r2
 8010860:	bf28      	it	cs
 8010862:	4613      	movcs	r3, r2
 8010864:	461a      	mov	r2, r3
 8010866:	6879      	ldr	r1, [r7, #4]
 8010868:	68f8      	ldr	r0, [r7, #12]
 801086a:	f001 f92c 	bl	8011ac6 <USBD_CtlContinueRx>
 801086e:	e07d      	b.n	801096c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010876:	f003 031f 	and.w	r3, r3, #31
 801087a:	2b02      	cmp	r3, #2
 801087c:	d014      	beq.n	80108a8 <USBD_LL_DataOutStage+0x98>
 801087e:	2b02      	cmp	r3, #2
 8010880:	d81d      	bhi.n	80108be <USBD_LL_DataOutStage+0xae>
 8010882:	2b00      	cmp	r3, #0
 8010884:	d002      	beq.n	801088c <USBD_LL_DataOutStage+0x7c>
 8010886:	2b01      	cmp	r3, #1
 8010888:	d003      	beq.n	8010892 <USBD_LL_DataOutStage+0x82>
 801088a:	e018      	b.n	80108be <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 801088c:	2300      	movs	r3, #0
 801088e:	75bb      	strb	r3, [r7, #22]
            break;
 8010890:	e018      	b.n	80108c4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8010898:	b2db      	uxtb	r3, r3
 801089a:	4619      	mov	r1, r3
 801089c:	68f8      	ldr	r0, [r7, #12]
 801089e:	f000 f9d2 	bl	8010c46 <USBD_CoreFindIF>
 80108a2:	4603      	mov	r3, r0
 80108a4:	75bb      	strb	r3, [r7, #22]
            break;
 80108a6:	e00d      	b.n	80108c4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80108ae:	b2db      	uxtb	r3, r3
 80108b0:	4619      	mov	r1, r3
 80108b2:	68f8      	ldr	r0, [r7, #12]
 80108b4:	f000 f9d4 	bl	8010c60 <USBD_CoreFindEP>
 80108b8:	4603      	mov	r3, r0
 80108ba:	75bb      	strb	r3, [r7, #22]
            break;
 80108bc:	e002      	b.n	80108c4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80108be:	2300      	movs	r3, #0
 80108c0:	75bb      	strb	r3, [r7, #22]
            break;
 80108c2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80108c4:	7dbb      	ldrb	r3, [r7, #22]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d119      	bne.n	80108fe <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80108ca:	68fb      	ldr	r3, [r7, #12]
 80108cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80108d0:	b2db      	uxtb	r3, r3
 80108d2:	2b03      	cmp	r3, #3
 80108d4:	d113      	bne.n	80108fe <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80108d6:	7dba      	ldrb	r2, [r7, #22]
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	32ae      	adds	r2, #174	@ 0xae
 80108dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108e0:	691b      	ldr	r3, [r3, #16]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d00b      	beq.n	80108fe <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80108e6:	7dba      	ldrb	r2, [r7, #22]
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80108ee:	7dba      	ldrb	r2, [r7, #22]
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	32ae      	adds	r2, #174	@ 0xae
 80108f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108f8:	691b      	ldr	r3, [r3, #16]
 80108fa:	68f8      	ldr	r0, [r7, #12]
 80108fc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80108fe:	68f8      	ldr	r0, [r7, #12]
 8010900:	f001 f8f2 	bl	8011ae8 <USBD_CtlSendStatus>
 8010904:	e032      	b.n	801096c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8010906:	7afb      	ldrb	r3, [r7, #11]
 8010908:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801090c:	b2db      	uxtb	r3, r3
 801090e:	4619      	mov	r1, r3
 8010910:	68f8      	ldr	r0, [r7, #12]
 8010912:	f000 f9a5 	bl	8010c60 <USBD_CoreFindEP>
 8010916:	4603      	mov	r3, r0
 8010918:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801091a:	7dbb      	ldrb	r3, [r7, #22]
 801091c:	2bff      	cmp	r3, #255	@ 0xff
 801091e:	d025      	beq.n	801096c <USBD_LL_DataOutStage+0x15c>
 8010920:	7dbb      	ldrb	r3, [r7, #22]
 8010922:	2b00      	cmp	r3, #0
 8010924:	d122      	bne.n	801096c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801092c:	b2db      	uxtb	r3, r3
 801092e:	2b03      	cmp	r3, #3
 8010930:	d117      	bne.n	8010962 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8010932:	7dba      	ldrb	r2, [r7, #22]
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	32ae      	adds	r2, #174	@ 0xae
 8010938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801093c:	699b      	ldr	r3, [r3, #24]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d00f      	beq.n	8010962 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8010942:	7dba      	ldrb	r2, [r7, #22]
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801094a:	7dba      	ldrb	r2, [r7, #22]
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	32ae      	adds	r2, #174	@ 0xae
 8010950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010954:	699b      	ldr	r3, [r3, #24]
 8010956:	7afa      	ldrb	r2, [r7, #11]
 8010958:	4611      	mov	r1, r2
 801095a:	68f8      	ldr	r0, [r7, #12]
 801095c:	4798      	blx	r3
 801095e:	4603      	mov	r3, r0
 8010960:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8010962:	7dfb      	ldrb	r3, [r7, #23]
 8010964:	2b00      	cmp	r3, #0
 8010966:	d001      	beq.n	801096c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8010968:	7dfb      	ldrb	r3, [r7, #23]
 801096a:	e000      	b.n	801096e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 801096c:	2300      	movs	r3, #0
}
 801096e:	4618      	mov	r0, r3
 8010970:	3718      	adds	r7, #24
 8010972:	46bd      	mov	sp, r7
 8010974:	bd80      	pop	{r7, pc}

08010976 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010976:	b580      	push	{r7, lr}
 8010978:	b086      	sub	sp, #24
 801097a:	af00      	add	r7, sp, #0
 801097c:	60f8      	str	r0, [r7, #12]
 801097e:	460b      	mov	r3, r1
 8010980:	607a      	str	r2, [r7, #4]
 8010982:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8010984:	7afb      	ldrb	r3, [r7, #11]
 8010986:	2b00      	cmp	r3, #0
 8010988:	d16f      	bne.n	8010a6a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	3314      	adds	r3, #20
 801098e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8010996:	2b02      	cmp	r3, #2
 8010998:	d15a      	bne.n	8010a50 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801099a:	693b      	ldr	r3, [r7, #16]
 801099c:	689a      	ldr	r2, [r3, #8]
 801099e:	693b      	ldr	r3, [r7, #16]
 80109a0:	68db      	ldr	r3, [r3, #12]
 80109a2:	429a      	cmp	r2, r3
 80109a4:	d914      	bls.n	80109d0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80109a6:	693b      	ldr	r3, [r7, #16]
 80109a8:	689a      	ldr	r2, [r3, #8]
 80109aa:	693b      	ldr	r3, [r7, #16]
 80109ac:	68db      	ldr	r3, [r3, #12]
 80109ae:	1ad2      	subs	r2, r2, r3
 80109b0:	693b      	ldr	r3, [r7, #16]
 80109b2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80109b4:	693b      	ldr	r3, [r7, #16]
 80109b6:	689b      	ldr	r3, [r3, #8]
 80109b8:	461a      	mov	r2, r3
 80109ba:	6879      	ldr	r1, [r7, #4]
 80109bc:	68f8      	ldr	r0, [r7, #12]
 80109be:	f001 f854 	bl	8011a6a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80109c2:	2300      	movs	r3, #0
 80109c4:	2200      	movs	r2, #0
 80109c6:	2100      	movs	r1, #0
 80109c8:	68f8      	ldr	r0, [r7, #12]
 80109ca:	f001 fd41 	bl	8012450 <USBD_LL_PrepareReceive>
 80109ce:	e03f      	b.n	8010a50 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80109d0:	693b      	ldr	r3, [r7, #16]
 80109d2:	68da      	ldr	r2, [r3, #12]
 80109d4:	693b      	ldr	r3, [r7, #16]
 80109d6:	689b      	ldr	r3, [r3, #8]
 80109d8:	429a      	cmp	r2, r3
 80109da:	d11c      	bne.n	8010a16 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80109dc:	693b      	ldr	r3, [r7, #16]
 80109de:	685a      	ldr	r2, [r3, #4]
 80109e0:	693b      	ldr	r3, [r7, #16]
 80109e2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80109e4:	429a      	cmp	r2, r3
 80109e6:	d316      	bcc.n	8010a16 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80109e8:	693b      	ldr	r3, [r7, #16]
 80109ea:	685a      	ldr	r2, [r3, #4]
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80109f2:	429a      	cmp	r2, r3
 80109f4:	d20f      	bcs.n	8010a16 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80109f6:	2200      	movs	r2, #0
 80109f8:	2100      	movs	r1, #0
 80109fa:	68f8      	ldr	r0, [r7, #12]
 80109fc:	f001 f835 	bl	8011a6a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	2200      	movs	r2, #0
 8010a04:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010a08:	2300      	movs	r3, #0
 8010a0a:	2200      	movs	r2, #0
 8010a0c:	2100      	movs	r1, #0
 8010a0e:	68f8      	ldr	r0, [r7, #12]
 8010a10:	f001 fd1e 	bl	8012450 <USBD_LL_PrepareReceive>
 8010a14:	e01c      	b.n	8010a50 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010a1c:	b2db      	uxtb	r3, r3
 8010a1e:	2b03      	cmp	r3, #3
 8010a20:	d10f      	bne.n	8010a42 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8010a22:	68fb      	ldr	r3, [r7, #12]
 8010a24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010a28:	68db      	ldr	r3, [r3, #12]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d009      	beq.n	8010a42 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	2200      	movs	r2, #0
 8010a32:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010a3c:	68db      	ldr	r3, [r3, #12]
 8010a3e:	68f8      	ldr	r0, [r7, #12]
 8010a40:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8010a42:	2180      	movs	r1, #128	@ 0x80
 8010a44:	68f8      	ldr	r0, [r7, #12]
 8010a46:	f001 fc59 	bl	80122fc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010a4a:	68f8      	ldr	r0, [r7, #12]
 8010a4c:	f001 f85f 	bl	8011b0e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d03a      	beq.n	8010ad0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8010a5a:	68f8      	ldr	r0, [r7, #12]
 8010a5c:	f7ff fe42 	bl	80106e4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010a60:	68fb      	ldr	r3, [r7, #12]
 8010a62:	2200      	movs	r2, #0
 8010a64:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8010a68:	e032      	b.n	8010ad0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8010a6a:	7afb      	ldrb	r3, [r7, #11]
 8010a6c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010a70:	b2db      	uxtb	r3, r3
 8010a72:	4619      	mov	r1, r3
 8010a74:	68f8      	ldr	r0, [r7, #12]
 8010a76:	f000 f8f3 	bl	8010c60 <USBD_CoreFindEP>
 8010a7a:	4603      	mov	r3, r0
 8010a7c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010a7e:	7dfb      	ldrb	r3, [r7, #23]
 8010a80:	2bff      	cmp	r3, #255	@ 0xff
 8010a82:	d025      	beq.n	8010ad0 <USBD_LL_DataInStage+0x15a>
 8010a84:	7dfb      	ldrb	r3, [r7, #23]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d122      	bne.n	8010ad0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010a90:	b2db      	uxtb	r3, r3
 8010a92:	2b03      	cmp	r3, #3
 8010a94:	d11c      	bne.n	8010ad0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8010a96:	7dfa      	ldrb	r2, [r7, #23]
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	32ae      	adds	r2, #174	@ 0xae
 8010a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010aa0:	695b      	ldr	r3, [r3, #20]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d014      	beq.n	8010ad0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8010aa6:	7dfa      	ldrb	r2, [r7, #23]
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8010aae:	7dfa      	ldrb	r2, [r7, #23]
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	32ae      	adds	r2, #174	@ 0xae
 8010ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ab8:	695b      	ldr	r3, [r3, #20]
 8010aba:	7afa      	ldrb	r2, [r7, #11]
 8010abc:	4611      	mov	r1, r2
 8010abe:	68f8      	ldr	r0, [r7, #12]
 8010ac0:	4798      	blx	r3
 8010ac2:	4603      	mov	r3, r0
 8010ac4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8010ac6:	7dbb      	ldrb	r3, [r7, #22]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d001      	beq.n	8010ad0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8010acc:	7dbb      	ldrb	r3, [r7, #22]
 8010ace:	e000      	b.n	8010ad2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8010ad0:	2300      	movs	r3, #0
}
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	3718      	adds	r7, #24
 8010ad6:	46bd      	mov	sp, r7
 8010ad8:	bd80      	pop	{r7, pc}

08010ada <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010ada:	b580      	push	{r7, lr}
 8010adc:	b084      	sub	sp, #16
 8010ade:	af00      	add	r7, sp, #0
 8010ae0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	2201      	movs	r2, #1
 8010aea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	2200      	movs	r2, #0
 8010af2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	2200      	movs	r2, #0
 8010afa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	2200      	movs	r2, #0
 8010b00:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	2200      	movs	r2, #0
 8010b08:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d014      	beq.n	8010b40 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010b1c:	685b      	ldr	r3, [r3, #4]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d00e      	beq.n	8010b40 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010b28:	685b      	ldr	r3, [r3, #4]
 8010b2a:	687a      	ldr	r2, [r7, #4]
 8010b2c:	6852      	ldr	r2, [r2, #4]
 8010b2e:	b2d2      	uxtb	r2, r2
 8010b30:	4611      	mov	r1, r2
 8010b32:	6878      	ldr	r0, [r7, #4]
 8010b34:	4798      	blx	r3
 8010b36:	4603      	mov	r3, r0
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d001      	beq.n	8010b40 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8010b3c:	2303      	movs	r3, #3
 8010b3e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010b40:	2340      	movs	r3, #64	@ 0x40
 8010b42:	2200      	movs	r2, #0
 8010b44:	2100      	movs	r1, #0
 8010b46:	6878      	ldr	r0, [r7, #4]
 8010b48:	f001 fb93 	bl	8012272 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	2201      	movs	r2, #1
 8010b50:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	2240      	movs	r2, #64	@ 0x40
 8010b58:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010b5c:	2340      	movs	r3, #64	@ 0x40
 8010b5e:	2200      	movs	r2, #0
 8010b60:	2180      	movs	r1, #128	@ 0x80
 8010b62:	6878      	ldr	r0, [r7, #4]
 8010b64:	f001 fb85 	bl	8012272 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	2201      	movs	r2, #1
 8010b6c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	2240      	movs	r2, #64	@ 0x40
 8010b72:	621a      	str	r2, [r3, #32]

  return ret;
 8010b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b76:	4618      	mov	r0, r3
 8010b78:	3710      	adds	r7, #16
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	bd80      	pop	{r7, pc}

08010b7e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010b7e:	b480      	push	{r7}
 8010b80:	b083      	sub	sp, #12
 8010b82:	af00      	add	r7, sp, #0
 8010b84:	6078      	str	r0, [r7, #4]
 8010b86:	460b      	mov	r3, r1
 8010b88:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	78fa      	ldrb	r2, [r7, #3]
 8010b8e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010b90:	2300      	movs	r3, #0
}
 8010b92:	4618      	mov	r0, r3
 8010b94:	370c      	adds	r7, #12
 8010b96:	46bd      	mov	sp, r7
 8010b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9c:	4770      	bx	lr

08010b9e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010b9e:	b480      	push	{r7}
 8010ba0:	b083      	sub	sp, #12
 8010ba2:	af00      	add	r7, sp, #0
 8010ba4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010bac:	b2db      	uxtb	r3, r3
 8010bae:	2b04      	cmp	r3, #4
 8010bb0:	d006      	beq.n	8010bc0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010bb8:	b2da      	uxtb	r2, r3
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	2204      	movs	r2, #4
 8010bc4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8010bc8:	2300      	movs	r3, #0
}
 8010bca:	4618      	mov	r0, r3
 8010bcc:	370c      	adds	r7, #12
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bd4:	4770      	bx	lr

08010bd6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010bd6:	b480      	push	{r7}
 8010bd8:	b083      	sub	sp, #12
 8010bda:	af00      	add	r7, sp, #0
 8010bdc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010be4:	b2db      	uxtb	r3, r3
 8010be6:	2b04      	cmp	r3, #4
 8010be8:	d106      	bne.n	8010bf8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8010bf0:	b2da      	uxtb	r2, r3
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8010bf8:	2300      	movs	r3, #0
}
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	370c      	adds	r7, #12
 8010bfe:	46bd      	mov	sp, r7
 8010c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c04:	4770      	bx	lr

08010c06 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010c06:	b580      	push	{r7, lr}
 8010c08:	b082      	sub	sp, #8
 8010c0a:	af00      	add	r7, sp, #0
 8010c0c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010c14:	b2db      	uxtb	r3, r3
 8010c16:	2b03      	cmp	r3, #3
 8010c18:	d110      	bne.n	8010c3c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d00b      	beq.n	8010c3c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010c2a:	69db      	ldr	r3, [r3, #28]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d005      	beq.n	8010c3c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010c36:	69db      	ldr	r3, [r3, #28]
 8010c38:	6878      	ldr	r0, [r7, #4]
 8010c3a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8010c3c:	2300      	movs	r3, #0
}
 8010c3e:	4618      	mov	r0, r3
 8010c40:	3708      	adds	r7, #8
 8010c42:	46bd      	mov	sp, r7
 8010c44:	bd80      	pop	{r7, pc}

08010c46 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010c46:	b480      	push	{r7}
 8010c48:	b083      	sub	sp, #12
 8010c4a:	af00      	add	r7, sp, #0
 8010c4c:	6078      	str	r0, [r7, #4]
 8010c4e:	460b      	mov	r3, r1
 8010c50:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010c52:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010c54:	4618      	mov	r0, r3
 8010c56:	370c      	adds	r7, #12
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5e:	4770      	bx	lr

08010c60 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010c60:	b480      	push	{r7}
 8010c62:	b083      	sub	sp, #12
 8010c64:	af00      	add	r7, sp, #0
 8010c66:	6078      	str	r0, [r7, #4]
 8010c68:	460b      	mov	r3, r1
 8010c6a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010c6c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010c6e:	4618      	mov	r0, r3
 8010c70:	370c      	adds	r7, #12
 8010c72:	46bd      	mov	sp, r7
 8010c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c78:	4770      	bx	lr

08010c7a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8010c7a:	b580      	push	{r7, lr}
 8010c7c:	b086      	sub	sp, #24
 8010c7e:	af00      	add	r7, sp, #0
 8010c80:	6078      	str	r0, [r7, #4]
 8010c82:	460b      	mov	r3, r1
 8010c84:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8010c8e:	2300      	movs	r3, #0
 8010c90:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	885b      	ldrh	r3, [r3, #2]
 8010c96:	b29b      	uxth	r3, r3
 8010c98:	68fa      	ldr	r2, [r7, #12]
 8010c9a:	7812      	ldrb	r2, [r2, #0]
 8010c9c:	4293      	cmp	r3, r2
 8010c9e:	d91f      	bls.n	8010ce0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	781b      	ldrb	r3, [r3, #0]
 8010ca4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8010ca6:	e013      	b.n	8010cd0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8010ca8:	f107 030a 	add.w	r3, r7, #10
 8010cac:	4619      	mov	r1, r3
 8010cae:	6978      	ldr	r0, [r7, #20]
 8010cb0:	f000 f81b 	bl	8010cea <USBD_GetNextDesc>
 8010cb4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8010cb6:	697b      	ldr	r3, [r7, #20]
 8010cb8:	785b      	ldrb	r3, [r3, #1]
 8010cba:	2b05      	cmp	r3, #5
 8010cbc:	d108      	bne.n	8010cd0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8010cbe:	697b      	ldr	r3, [r7, #20]
 8010cc0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8010cc2:	693b      	ldr	r3, [r7, #16]
 8010cc4:	789b      	ldrb	r3, [r3, #2]
 8010cc6:	78fa      	ldrb	r2, [r7, #3]
 8010cc8:	429a      	cmp	r2, r3
 8010cca:	d008      	beq.n	8010cde <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8010ccc:	2300      	movs	r3, #0
 8010cce:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	885b      	ldrh	r3, [r3, #2]
 8010cd4:	b29a      	uxth	r2, r3
 8010cd6:	897b      	ldrh	r3, [r7, #10]
 8010cd8:	429a      	cmp	r2, r3
 8010cda:	d8e5      	bhi.n	8010ca8 <USBD_GetEpDesc+0x2e>
 8010cdc:	e000      	b.n	8010ce0 <USBD_GetEpDesc+0x66>
          break;
 8010cde:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8010ce0:	693b      	ldr	r3, [r7, #16]
}
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	3718      	adds	r7, #24
 8010ce6:	46bd      	mov	sp, r7
 8010ce8:	bd80      	pop	{r7, pc}

08010cea <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8010cea:	b480      	push	{r7}
 8010cec:	b085      	sub	sp, #20
 8010cee:	af00      	add	r7, sp, #0
 8010cf0:	6078      	str	r0, [r7, #4]
 8010cf2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8010cf8:	683b      	ldr	r3, [r7, #0]
 8010cfa:	881b      	ldrh	r3, [r3, #0]
 8010cfc:	68fa      	ldr	r2, [r7, #12]
 8010cfe:	7812      	ldrb	r2, [r2, #0]
 8010d00:	4413      	add	r3, r2
 8010d02:	b29a      	uxth	r2, r3
 8010d04:	683b      	ldr	r3, [r7, #0]
 8010d06:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	781b      	ldrb	r3, [r3, #0]
 8010d0c:	461a      	mov	r2, r3
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	4413      	add	r3, r2
 8010d12:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010d14:	68fb      	ldr	r3, [r7, #12]
}
 8010d16:	4618      	mov	r0, r3
 8010d18:	3714      	adds	r7, #20
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d20:	4770      	bx	lr

08010d22 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010d22:	b480      	push	{r7}
 8010d24:	b087      	sub	sp, #28
 8010d26:	af00      	add	r7, sp, #0
 8010d28:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8010d2e:	697b      	ldr	r3, [r7, #20]
 8010d30:	781b      	ldrb	r3, [r3, #0]
 8010d32:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010d34:	697b      	ldr	r3, [r7, #20]
 8010d36:	3301      	adds	r3, #1
 8010d38:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010d3a:	697b      	ldr	r3, [r7, #20]
 8010d3c:	781b      	ldrb	r3, [r3, #0]
 8010d3e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010d40:	8a3b      	ldrh	r3, [r7, #16]
 8010d42:	021b      	lsls	r3, r3, #8
 8010d44:	b21a      	sxth	r2, r3
 8010d46:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010d4a:	4313      	orrs	r3, r2
 8010d4c:	b21b      	sxth	r3, r3
 8010d4e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010d50:	89fb      	ldrh	r3, [r7, #14]
}
 8010d52:	4618      	mov	r0, r3
 8010d54:	371c      	adds	r7, #28
 8010d56:	46bd      	mov	sp, r7
 8010d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d5c:	4770      	bx	lr
	...

08010d60 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010d60:	b580      	push	{r7, lr}
 8010d62:	b084      	sub	sp, #16
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	6078      	str	r0, [r7, #4]
 8010d68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010d6a:	2300      	movs	r3, #0
 8010d6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010d6e:	683b      	ldr	r3, [r7, #0]
 8010d70:	781b      	ldrb	r3, [r3, #0]
 8010d72:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010d76:	2b40      	cmp	r3, #64	@ 0x40
 8010d78:	d005      	beq.n	8010d86 <USBD_StdDevReq+0x26>
 8010d7a:	2b40      	cmp	r3, #64	@ 0x40
 8010d7c:	d857      	bhi.n	8010e2e <USBD_StdDevReq+0xce>
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d00f      	beq.n	8010da2 <USBD_StdDevReq+0x42>
 8010d82:	2b20      	cmp	r3, #32
 8010d84:	d153      	bne.n	8010e2e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	32ae      	adds	r2, #174	@ 0xae
 8010d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d94:	689b      	ldr	r3, [r3, #8]
 8010d96:	6839      	ldr	r1, [r7, #0]
 8010d98:	6878      	ldr	r0, [r7, #4]
 8010d9a:	4798      	blx	r3
 8010d9c:	4603      	mov	r3, r0
 8010d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8010da0:	e04a      	b.n	8010e38 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010da2:	683b      	ldr	r3, [r7, #0]
 8010da4:	785b      	ldrb	r3, [r3, #1]
 8010da6:	2b09      	cmp	r3, #9
 8010da8:	d83b      	bhi.n	8010e22 <USBD_StdDevReq+0xc2>
 8010daa:	a201      	add	r2, pc, #4	@ (adr r2, 8010db0 <USBD_StdDevReq+0x50>)
 8010dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010db0:	08010e05 	.word	0x08010e05
 8010db4:	08010e19 	.word	0x08010e19
 8010db8:	08010e23 	.word	0x08010e23
 8010dbc:	08010e0f 	.word	0x08010e0f
 8010dc0:	08010e23 	.word	0x08010e23
 8010dc4:	08010de3 	.word	0x08010de3
 8010dc8:	08010dd9 	.word	0x08010dd9
 8010dcc:	08010e23 	.word	0x08010e23
 8010dd0:	08010dfb 	.word	0x08010dfb
 8010dd4:	08010ded 	.word	0x08010ded
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010dd8:	6839      	ldr	r1, [r7, #0]
 8010dda:	6878      	ldr	r0, [r7, #4]
 8010ddc:	f000 fa3c 	bl	8011258 <USBD_GetDescriptor>
          break;
 8010de0:	e024      	b.n	8010e2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010de2:	6839      	ldr	r1, [r7, #0]
 8010de4:	6878      	ldr	r0, [r7, #4]
 8010de6:	f000 fbcb 	bl	8011580 <USBD_SetAddress>
          break;
 8010dea:	e01f      	b.n	8010e2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010dec:	6839      	ldr	r1, [r7, #0]
 8010dee:	6878      	ldr	r0, [r7, #4]
 8010df0:	f000 fc0a 	bl	8011608 <USBD_SetConfig>
 8010df4:	4603      	mov	r3, r0
 8010df6:	73fb      	strb	r3, [r7, #15]
          break;
 8010df8:	e018      	b.n	8010e2c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8010dfa:	6839      	ldr	r1, [r7, #0]
 8010dfc:	6878      	ldr	r0, [r7, #4]
 8010dfe:	f000 fcad 	bl	801175c <USBD_GetConfig>
          break;
 8010e02:	e013      	b.n	8010e2c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010e04:	6839      	ldr	r1, [r7, #0]
 8010e06:	6878      	ldr	r0, [r7, #4]
 8010e08:	f000 fcde 	bl	80117c8 <USBD_GetStatus>
          break;
 8010e0c:	e00e      	b.n	8010e2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8010e0e:	6839      	ldr	r1, [r7, #0]
 8010e10:	6878      	ldr	r0, [r7, #4]
 8010e12:	f000 fd0d 	bl	8011830 <USBD_SetFeature>
          break;
 8010e16:	e009      	b.n	8010e2c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010e18:	6839      	ldr	r1, [r7, #0]
 8010e1a:	6878      	ldr	r0, [r7, #4]
 8010e1c:	f000 fd31 	bl	8011882 <USBD_ClrFeature>
          break;
 8010e20:	e004      	b.n	8010e2c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8010e22:	6839      	ldr	r1, [r7, #0]
 8010e24:	6878      	ldr	r0, [r7, #4]
 8010e26:	f000 fd88 	bl	801193a <USBD_CtlError>
          break;
 8010e2a:	bf00      	nop
      }
      break;
 8010e2c:	e004      	b.n	8010e38 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8010e2e:	6839      	ldr	r1, [r7, #0]
 8010e30:	6878      	ldr	r0, [r7, #4]
 8010e32:	f000 fd82 	bl	801193a <USBD_CtlError>
      break;
 8010e36:	bf00      	nop
  }

  return ret;
 8010e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	3710      	adds	r7, #16
 8010e3e:	46bd      	mov	sp, r7
 8010e40:	bd80      	pop	{r7, pc}
 8010e42:	bf00      	nop

08010e44 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010e44:	b580      	push	{r7, lr}
 8010e46:	b084      	sub	sp, #16
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	6078      	str	r0, [r7, #4]
 8010e4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010e4e:	2300      	movs	r3, #0
 8010e50:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010e52:	683b      	ldr	r3, [r7, #0]
 8010e54:	781b      	ldrb	r3, [r3, #0]
 8010e56:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010e5a:	2b40      	cmp	r3, #64	@ 0x40
 8010e5c:	d005      	beq.n	8010e6a <USBD_StdItfReq+0x26>
 8010e5e:	2b40      	cmp	r3, #64	@ 0x40
 8010e60:	d852      	bhi.n	8010f08 <USBD_StdItfReq+0xc4>
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d001      	beq.n	8010e6a <USBD_StdItfReq+0x26>
 8010e66:	2b20      	cmp	r3, #32
 8010e68:	d14e      	bne.n	8010f08 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010e70:	b2db      	uxtb	r3, r3
 8010e72:	3b01      	subs	r3, #1
 8010e74:	2b02      	cmp	r3, #2
 8010e76:	d840      	bhi.n	8010efa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010e78:	683b      	ldr	r3, [r7, #0]
 8010e7a:	889b      	ldrh	r3, [r3, #4]
 8010e7c:	b2db      	uxtb	r3, r3
 8010e7e:	2b01      	cmp	r3, #1
 8010e80:	d836      	bhi.n	8010ef0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8010e82:	683b      	ldr	r3, [r7, #0]
 8010e84:	889b      	ldrh	r3, [r3, #4]
 8010e86:	b2db      	uxtb	r3, r3
 8010e88:	4619      	mov	r1, r3
 8010e8a:	6878      	ldr	r0, [r7, #4]
 8010e8c:	f7ff fedb 	bl	8010c46 <USBD_CoreFindIF>
 8010e90:	4603      	mov	r3, r0
 8010e92:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010e94:	7bbb      	ldrb	r3, [r7, #14]
 8010e96:	2bff      	cmp	r3, #255	@ 0xff
 8010e98:	d01d      	beq.n	8010ed6 <USBD_StdItfReq+0x92>
 8010e9a:	7bbb      	ldrb	r3, [r7, #14]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d11a      	bne.n	8010ed6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8010ea0:	7bba      	ldrb	r2, [r7, #14]
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	32ae      	adds	r2, #174	@ 0xae
 8010ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010eaa:	689b      	ldr	r3, [r3, #8]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d00f      	beq.n	8010ed0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8010eb0:	7bba      	ldrb	r2, [r7, #14]
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010eb8:	7bba      	ldrb	r2, [r7, #14]
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	32ae      	adds	r2, #174	@ 0xae
 8010ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ec2:	689b      	ldr	r3, [r3, #8]
 8010ec4:	6839      	ldr	r1, [r7, #0]
 8010ec6:	6878      	ldr	r0, [r7, #4]
 8010ec8:	4798      	blx	r3
 8010eca:	4603      	mov	r3, r0
 8010ecc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010ece:	e004      	b.n	8010eda <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8010ed0:	2303      	movs	r3, #3
 8010ed2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010ed4:	e001      	b.n	8010eda <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8010ed6:	2303      	movs	r3, #3
 8010ed8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010eda:	683b      	ldr	r3, [r7, #0]
 8010edc:	88db      	ldrh	r3, [r3, #6]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d110      	bne.n	8010f04 <USBD_StdItfReq+0xc0>
 8010ee2:	7bfb      	ldrb	r3, [r7, #15]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d10d      	bne.n	8010f04 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8010ee8:	6878      	ldr	r0, [r7, #4]
 8010eea:	f000 fdfd 	bl	8011ae8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010eee:	e009      	b.n	8010f04 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8010ef0:	6839      	ldr	r1, [r7, #0]
 8010ef2:	6878      	ldr	r0, [r7, #4]
 8010ef4:	f000 fd21 	bl	801193a <USBD_CtlError>
          break;
 8010ef8:	e004      	b.n	8010f04 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8010efa:	6839      	ldr	r1, [r7, #0]
 8010efc:	6878      	ldr	r0, [r7, #4]
 8010efe:	f000 fd1c 	bl	801193a <USBD_CtlError>
          break;
 8010f02:	e000      	b.n	8010f06 <USBD_StdItfReq+0xc2>
          break;
 8010f04:	bf00      	nop
      }
      break;
 8010f06:	e004      	b.n	8010f12 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8010f08:	6839      	ldr	r1, [r7, #0]
 8010f0a:	6878      	ldr	r0, [r7, #4]
 8010f0c:	f000 fd15 	bl	801193a <USBD_CtlError>
      break;
 8010f10:	bf00      	nop
  }

  return ret;
 8010f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f14:	4618      	mov	r0, r3
 8010f16:	3710      	adds	r7, #16
 8010f18:	46bd      	mov	sp, r7
 8010f1a:	bd80      	pop	{r7, pc}

08010f1c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b084      	sub	sp, #16
 8010f20:	af00      	add	r7, sp, #0
 8010f22:	6078      	str	r0, [r7, #4]
 8010f24:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8010f26:	2300      	movs	r3, #0
 8010f28:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8010f2a:	683b      	ldr	r3, [r7, #0]
 8010f2c:	889b      	ldrh	r3, [r3, #4]
 8010f2e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010f30:	683b      	ldr	r3, [r7, #0]
 8010f32:	781b      	ldrb	r3, [r3, #0]
 8010f34:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010f38:	2b40      	cmp	r3, #64	@ 0x40
 8010f3a:	d007      	beq.n	8010f4c <USBD_StdEPReq+0x30>
 8010f3c:	2b40      	cmp	r3, #64	@ 0x40
 8010f3e:	f200 817f 	bhi.w	8011240 <USBD_StdEPReq+0x324>
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d02a      	beq.n	8010f9c <USBD_StdEPReq+0x80>
 8010f46:	2b20      	cmp	r3, #32
 8010f48:	f040 817a 	bne.w	8011240 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8010f4c:	7bbb      	ldrb	r3, [r7, #14]
 8010f4e:	4619      	mov	r1, r3
 8010f50:	6878      	ldr	r0, [r7, #4]
 8010f52:	f7ff fe85 	bl	8010c60 <USBD_CoreFindEP>
 8010f56:	4603      	mov	r3, r0
 8010f58:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010f5a:	7b7b      	ldrb	r3, [r7, #13]
 8010f5c:	2bff      	cmp	r3, #255	@ 0xff
 8010f5e:	f000 8174 	beq.w	801124a <USBD_StdEPReq+0x32e>
 8010f62:	7b7b      	ldrb	r3, [r7, #13]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	f040 8170 	bne.w	801124a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8010f6a:	7b7a      	ldrb	r2, [r7, #13]
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8010f72:	7b7a      	ldrb	r2, [r7, #13]
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	32ae      	adds	r2, #174	@ 0xae
 8010f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f7c:	689b      	ldr	r3, [r3, #8]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	f000 8163 	beq.w	801124a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8010f84:	7b7a      	ldrb	r2, [r7, #13]
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	32ae      	adds	r2, #174	@ 0xae
 8010f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f8e:	689b      	ldr	r3, [r3, #8]
 8010f90:	6839      	ldr	r1, [r7, #0]
 8010f92:	6878      	ldr	r0, [r7, #4]
 8010f94:	4798      	blx	r3
 8010f96:	4603      	mov	r3, r0
 8010f98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8010f9a:	e156      	b.n	801124a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010f9c:	683b      	ldr	r3, [r7, #0]
 8010f9e:	785b      	ldrb	r3, [r3, #1]
 8010fa0:	2b03      	cmp	r3, #3
 8010fa2:	d008      	beq.n	8010fb6 <USBD_StdEPReq+0x9a>
 8010fa4:	2b03      	cmp	r3, #3
 8010fa6:	f300 8145 	bgt.w	8011234 <USBD_StdEPReq+0x318>
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	f000 809b 	beq.w	80110e6 <USBD_StdEPReq+0x1ca>
 8010fb0:	2b01      	cmp	r3, #1
 8010fb2:	d03c      	beq.n	801102e <USBD_StdEPReq+0x112>
 8010fb4:	e13e      	b.n	8011234 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010fbc:	b2db      	uxtb	r3, r3
 8010fbe:	2b02      	cmp	r3, #2
 8010fc0:	d002      	beq.n	8010fc8 <USBD_StdEPReq+0xac>
 8010fc2:	2b03      	cmp	r3, #3
 8010fc4:	d016      	beq.n	8010ff4 <USBD_StdEPReq+0xd8>
 8010fc6:	e02c      	b.n	8011022 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010fc8:	7bbb      	ldrb	r3, [r7, #14]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d00d      	beq.n	8010fea <USBD_StdEPReq+0xce>
 8010fce:	7bbb      	ldrb	r3, [r7, #14]
 8010fd0:	2b80      	cmp	r3, #128	@ 0x80
 8010fd2:	d00a      	beq.n	8010fea <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010fd4:	7bbb      	ldrb	r3, [r7, #14]
 8010fd6:	4619      	mov	r1, r3
 8010fd8:	6878      	ldr	r0, [r7, #4]
 8010fda:	f001 f98f 	bl	80122fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010fde:	2180      	movs	r1, #128	@ 0x80
 8010fe0:	6878      	ldr	r0, [r7, #4]
 8010fe2:	f001 f98b 	bl	80122fc <USBD_LL_StallEP>
 8010fe6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010fe8:	e020      	b.n	801102c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8010fea:	6839      	ldr	r1, [r7, #0]
 8010fec:	6878      	ldr	r0, [r7, #4]
 8010fee:	f000 fca4 	bl	801193a <USBD_CtlError>
              break;
 8010ff2:	e01b      	b.n	801102c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010ff4:	683b      	ldr	r3, [r7, #0]
 8010ff6:	885b      	ldrh	r3, [r3, #2]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d10e      	bne.n	801101a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010ffc:	7bbb      	ldrb	r3, [r7, #14]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d00b      	beq.n	801101a <USBD_StdEPReq+0xfe>
 8011002:	7bbb      	ldrb	r3, [r7, #14]
 8011004:	2b80      	cmp	r3, #128	@ 0x80
 8011006:	d008      	beq.n	801101a <USBD_StdEPReq+0xfe>
 8011008:	683b      	ldr	r3, [r7, #0]
 801100a:	88db      	ldrh	r3, [r3, #6]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d104      	bne.n	801101a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011010:	7bbb      	ldrb	r3, [r7, #14]
 8011012:	4619      	mov	r1, r3
 8011014:	6878      	ldr	r0, [r7, #4]
 8011016:	f001 f971 	bl	80122fc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801101a:	6878      	ldr	r0, [r7, #4]
 801101c:	f000 fd64 	bl	8011ae8 <USBD_CtlSendStatus>

              break;
 8011020:	e004      	b.n	801102c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8011022:	6839      	ldr	r1, [r7, #0]
 8011024:	6878      	ldr	r0, [r7, #4]
 8011026:	f000 fc88 	bl	801193a <USBD_CtlError>
              break;
 801102a:	bf00      	nop
          }
          break;
 801102c:	e107      	b.n	801123e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801102e:	687b      	ldr	r3, [r7, #4]
 8011030:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011034:	b2db      	uxtb	r3, r3
 8011036:	2b02      	cmp	r3, #2
 8011038:	d002      	beq.n	8011040 <USBD_StdEPReq+0x124>
 801103a:	2b03      	cmp	r3, #3
 801103c:	d016      	beq.n	801106c <USBD_StdEPReq+0x150>
 801103e:	e04b      	b.n	80110d8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011040:	7bbb      	ldrb	r3, [r7, #14]
 8011042:	2b00      	cmp	r3, #0
 8011044:	d00d      	beq.n	8011062 <USBD_StdEPReq+0x146>
 8011046:	7bbb      	ldrb	r3, [r7, #14]
 8011048:	2b80      	cmp	r3, #128	@ 0x80
 801104a:	d00a      	beq.n	8011062 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801104c:	7bbb      	ldrb	r3, [r7, #14]
 801104e:	4619      	mov	r1, r3
 8011050:	6878      	ldr	r0, [r7, #4]
 8011052:	f001 f953 	bl	80122fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011056:	2180      	movs	r1, #128	@ 0x80
 8011058:	6878      	ldr	r0, [r7, #4]
 801105a:	f001 f94f 	bl	80122fc <USBD_LL_StallEP>
 801105e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011060:	e040      	b.n	80110e4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8011062:	6839      	ldr	r1, [r7, #0]
 8011064:	6878      	ldr	r0, [r7, #4]
 8011066:	f000 fc68 	bl	801193a <USBD_CtlError>
              break;
 801106a:	e03b      	b.n	80110e4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801106c:	683b      	ldr	r3, [r7, #0]
 801106e:	885b      	ldrh	r3, [r3, #2]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d136      	bne.n	80110e2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011074:	7bbb      	ldrb	r3, [r7, #14]
 8011076:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801107a:	2b00      	cmp	r3, #0
 801107c:	d004      	beq.n	8011088 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801107e:	7bbb      	ldrb	r3, [r7, #14]
 8011080:	4619      	mov	r1, r3
 8011082:	6878      	ldr	r0, [r7, #4]
 8011084:	f001 f959 	bl	801233a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011088:	6878      	ldr	r0, [r7, #4]
 801108a:	f000 fd2d 	bl	8011ae8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801108e:	7bbb      	ldrb	r3, [r7, #14]
 8011090:	4619      	mov	r1, r3
 8011092:	6878      	ldr	r0, [r7, #4]
 8011094:	f7ff fde4 	bl	8010c60 <USBD_CoreFindEP>
 8011098:	4603      	mov	r3, r0
 801109a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801109c:	7b7b      	ldrb	r3, [r7, #13]
 801109e:	2bff      	cmp	r3, #255	@ 0xff
 80110a0:	d01f      	beq.n	80110e2 <USBD_StdEPReq+0x1c6>
 80110a2:	7b7b      	ldrb	r3, [r7, #13]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d11c      	bne.n	80110e2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80110a8:	7b7a      	ldrb	r2, [r7, #13]
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80110b0:	7b7a      	ldrb	r2, [r7, #13]
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	32ae      	adds	r2, #174	@ 0xae
 80110b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110ba:	689b      	ldr	r3, [r3, #8]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d010      	beq.n	80110e2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80110c0:	7b7a      	ldrb	r2, [r7, #13]
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	32ae      	adds	r2, #174	@ 0xae
 80110c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110ca:	689b      	ldr	r3, [r3, #8]
 80110cc:	6839      	ldr	r1, [r7, #0]
 80110ce:	6878      	ldr	r0, [r7, #4]
 80110d0:	4798      	blx	r3
 80110d2:	4603      	mov	r3, r0
 80110d4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80110d6:	e004      	b.n	80110e2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80110d8:	6839      	ldr	r1, [r7, #0]
 80110da:	6878      	ldr	r0, [r7, #4]
 80110dc:	f000 fc2d 	bl	801193a <USBD_CtlError>
              break;
 80110e0:	e000      	b.n	80110e4 <USBD_StdEPReq+0x1c8>
              break;
 80110e2:	bf00      	nop
          }
          break;
 80110e4:	e0ab      	b.n	801123e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80110ec:	b2db      	uxtb	r3, r3
 80110ee:	2b02      	cmp	r3, #2
 80110f0:	d002      	beq.n	80110f8 <USBD_StdEPReq+0x1dc>
 80110f2:	2b03      	cmp	r3, #3
 80110f4:	d032      	beq.n	801115c <USBD_StdEPReq+0x240>
 80110f6:	e097      	b.n	8011228 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80110f8:	7bbb      	ldrb	r3, [r7, #14]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d007      	beq.n	801110e <USBD_StdEPReq+0x1f2>
 80110fe:	7bbb      	ldrb	r3, [r7, #14]
 8011100:	2b80      	cmp	r3, #128	@ 0x80
 8011102:	d004      	beq.n	801110e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8011104:	6839      	ldr	r1, [r7, #0]
 8011106:	6878      	ldr	r0, [r7, #4]
 8011108:	f000 fc17 	bl	801193a <USBD_CtlError>
                break;
 801110c:	e091      	b.n	8011232 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801110e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011112:	2b00      	cmp	r3, #0
 8011114:	da0b      	bge.n	801112e <USBD_StdEPReq+0x212>
 8011116:	7bbb      	ldrb	r3, [r7, #14]
 8011118:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801111c:	4613      	mov	r3, r2
 801111e:	009b      	lsls	r3, r3, #2
 8011120:	4413      	add	r3, r2
 8011122:	009b      	lsls	r3, r3, #2
 8011124:	3310      	adds	r3, #16
 8011126:	687a      	ldr	r2, [r7, #4]
 8011128:	4413      	add	r3, r2
 801112a:	3304      	adds	r3, #4
 801112c:	e00b      	b.n	8011146 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801112e:	7bbb      	ldrb	r3, [r7, #14]
 8011130:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011134:	4613      	mov	r3, r2
 8011136:	009b      	lsls	r3, r3, #2
 8011138:	4413      	add	r3, r2
 801113a:	009b      	lsls	r3, r3, #2
 801113c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8011140:	687a      	ldr	r2, [r7, #4]
 8011142:	4413      	add	r3, r2
 8011144:	3304      	adds	r3, #4
 8011146:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011148:	68bb      	ldr	r3, [r7, #8]
 801114a:	2200      	movs	r2, #0
 801114c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801114e:	68bb      	ldr	r3, [r7, #8]
 8011150:	2202      	movs	r2, #2
 8011152:	4619      	mov	r1, r3
 8011154:	6878      	ldr	r0, [r7, #4]
 8011156:	f000 fc6d 	bl	8011a34 <USBD_CtlSendData>
              break;
 801115a:	e06a      	b.n	8011232 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801115c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011160:	2b00      	cmp	r3, #0
 8011162:	da11      	bge.n	8011188 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011164:	7bbb      	ldrb	r3, [r7, #14]
 8011166:	f003 020f 	and.w	r2, r3, #15
 801116a:	6879      	ldr	r1, [r7, #4]
 801116c:	4613      	mov	r3, r2
 801116e:	009b      	lsls	r3, r3, #2
 8011170:	4413      	add	r3, r2
 8011172:	009b      	lsls	r3, r3, #2
 8011174:	440b      	add	r3, r1
 8011176:	3324      	adds	r3, #36	@ 0x24
 8011178:	881b      	ldrh	r3, [r3, #0]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d117      	bne.n	80111ae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801117e:	6839      	ldr	r1, [r7, #0]
 8011180:	6878      	ldr	r0, [r7, #4]
 8011182:	f000 fbda 	bl	801193a <USBD_CtlError>
                  break;
 8011186:	e054      	b.n	8011232 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011188:	7bbb      	ldrb	r3, [r7, #14]
 801118a:	f003 020f 	and.w	r2, r3, #15
 801118e:	6879      	ldr	r1, [r7, #4]
 8011190:	4613      	mov	r3, r2
 8011192:	009b      	lsls	r3, r3, #2
 8011194:	4413      	add	r3, r2
 8011196:	009b      	lsls	r3, r3, #2
 8011198:	440b      	add	r3, r1
 801119a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801119e:	881b      	ldrh	r3, [r3, #0]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d104      	bne.n	80111ae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80111a4:	6839      	ldr	r1, [r7, #0]
 80111a6:	6878      	ldr	r0, [r7, #4]
 80111a8:	f000 fbc7 	bl	801193a <USBD_CtlError>
                  break;
 80111ac:	e041      	b.n	8011232 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80111ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	da0b      	bge.n	80111ce <USBD_StdEPReq+0x2b2>
 80111b6:	7bbb      	ldrb	r3, [r7, #14]
 80111b8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80111bc:	4613      	mov	r3, r2
 80111be:	009b      	lsls	r3, r3, #2
 80111c0:	4413      	add	r3, r2
 80111c2:	009b      	lsls	r3, r3, #2
 80111c4:	3310      	adds	r3, #16
 80111c6:	687a      	ldr	r2, [r7, #4]
 80111c8:	4413      	add	r3, r2
 80111ca:	3304      	adds	r3, #4
 80111cc:	e00b      	b.n	80111e6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80111ce:	7bbb      	ldrb	r3, [r7, #14]
 80111d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80111d4:	4613      	mov	r3, r2
 80111d6:	009b      	lsls	r3, r3, #2
 80111d8:	4413      	add	r3, r2
 80111da:	009b      	lsls	r3, r3, #2
 80111dc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80111e0:	687a      	ldr	r2, [r7, #4]
 80111e2:	4413      	add	r3, r2
 80111e4:	3304      	adds	r3, #4
 80111e6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80111e8:	7bbb      	ldrb	r3, [r7, #14]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d002      	beq.n	80111f4 <USBD_StdEPReq+0x2d8>
 80111ee:	7bbb      	ldrb	r3, [r7, #14]
 80111f0:	2b80      	cmp	r3, #128	@ 0x80
 80111f2:	d103      	bne.n	80111fc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80111f4:	68bb      	ldr	r3, [r7, #8]
 80111f6:	2200      	movs	r2, #0
 80111f8:	601a      	str	r2, [r3, #0]
 80111fa:	e00e      	b.n	801121a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80111fc:	7bbb      	ldrb	r3, [r7, #14]
 80111fe:	4619      	mov	r1, r3
 8011200:	6878      	ldr	r0, [r7, #4]
 8011202:	f001 f8b9 	bl	8012378 <USBD_LL_IsStallEP>
 8011206:	4603      	mov	r3, r0
 8011208:	2b00      	cmp	r3, #0
 801120a:	d003      	beq.n	8011214 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 801120c:	68bb      	ldr	r3, [r7, #8]
 801120e:	2201      	movs	r2, #1
 8011210:	601a      	str	r2, [r3, #0]
 8011212:	e002      	b.n	801121a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8011214:	68bb      	ldr	r3, [r7, #8]
 8011216:	2200      	movs	r2, #0
 8011218:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801121a:	68bb      	ldr	r3, [r7, #8]
 801121c:	2202      	movs	r2, #2
 801121e:	4619      	mov	r1, r3
 8011220:	6878      	ldr	r0, [r7, #4]
 8011222:	f000 fc07 	bl	8011a34 <USBD_CtlSendData>
              break;
 8011226:	e004      	b.n	8011232 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8011228:	6839      	ldr	r1, [r7, #0]
 801122a:	6878      	ldr	r0, [r7, #4]
 801122c:	f000 fb85 	bl	801193a <USBD_CtlError>
              break;
 8011230:	bf00      	nop
          }
          break;
 8011232:	e004      	b.n	801123e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8011234:	6839      	ldr	r1, [r7, #0]
 8011236:	6878      	ldr	r0, [r7, #4]
 8011238:	f000 fb7f 	bl	801193a <USBD_CtlError>
          break;
 801123c:	bf00      	nop
      }
      break;
 801123e:	e005      	b.n	801124c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8011240:	6839      	ldr	r1, [r7, #0]
 8011242:	6878      	ldr	r0, [r7, #4]
 8011244:	f000 fb79 	bl	801193a <USBD_CtlError>
      break;
 8011248:	e000      	b.n	801124c <USBD_StdEPReq+0x330>
      break;
 801124a:	bf00      	nop
  }

  return ret;
 801124c:	7bfb      	ldrb	r3, [r7, #15]
}
 801124e:	4618      	mov	r0, r3
 8011250:	3710      	adds	r7, #16
 8011252:	46bd      	mov	sp, r7
 8011254:	bd80      	pop	{r7, pc}
	...

08011258 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011258:	b580      	push	{r7, lr}
 801125a:	b084      	sub	sp, #16
 801125c:	af00      	add	r7, sp, #0
 801125e:	6078      	str	r0, [r7, #4]
 8011260:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011262:	2300      	movs	r3, #0
 8011264:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011266:	2300      	movs	r3, #0
 8011268:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801126a:	2300      	movs	r3, #0
 801126c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801126e:	683b      	ldr	r3, [r7, #0]
 8011270:	885b      	ldrh	r3, [r3, #2]
 8011272:	0a1b      	lsrs	r3, r3, #8
 8011274:	b29b      	uxth	r3, r3
 8011276:	3b01      	subs	r3, #1
 8011278:	2b0e      	cmp	r3, #14
 801127a:	f200 8152 	bhi.w	8011522 <USBD_GetDescriptor+0x2ca>
 801127e:	a201      	add	r2, pc, #4	@ (adr r2, 8011284 <USBD_GetDescriptor+0x2c>)
 8011280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011284:	080112f5 	.word	0x080112f5
 8011288:	0801130d 	.word	0x0801130d
 801128c:	0801134d 	.word	0x0801134d
 8011290:	08011523 	.word	0x08011523
 8011294:	08011523 	.word	0x08011523
 8011298:	080114c3 	.word	0x080114c3
 801129c:	080114ef 	.word	0x080114ef
 80112a0:	08011523 	.word	0x08011523
 80112a4:	08011523 	.word	0x08011523
 80112a8:	08011523 	.word	0x08011523
 80112ac:	08011523 	.word	0x08011523
 80112b0:	08011523 	.word	0x08011523
 80112b4:	08011523 	.word	0x08011523
 80112b8:	08011523 	.word	0x08011523
 80112bc:	080112c1 	.word	0x080112c1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80112c6:	69db      	ldr	r3, [r3, #28]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d00b      	beq.n	80112e4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80112d2:	69db      	ldr	r3, [r3, #28]
 80112d4:	687a      	ldr	r2, [r7, #4]
 80112d6:	7c12      	ldrb	r2, [r2, #16]
 80112d8:	f107 0108 	add.w	r1, r7, #8
 80112dc:	4610      	mov	r0, r2
 80112de:	4798      	blx	r3
 80112e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80112e2:	e126      	b.n	8011532 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80112e4:	6839      	ldr	r1, [r7, #0]
 80112e6:	6878      	ldr	r0, [r7, #4]
 80112e8:	f000 fb27 	bl	801193a <USBD_CtlError>
        err++;
 80112ec:	7afb      	ldrb	r3, [r7, #11]
 80112ee:	3301      	adds	r3, #1
 80112f0:	72fb      	strb	r3, [r7, #11]
      break;
 80112f2:	e11e      	b.n	8011532 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	687a      	ldr	r2, [r7, #4]
 80112fe:	7c12      	ldrb	r2, [r2, #16]
 8011300:	f107 0108 	add.w	r1, r7, #8
 8011304:	4610      	mov	r0, r2
 8011306:	4798      	blx	r3
 8011308:	60f8      	str	r0, [r7, #12]
      break;
 801130a:	e112      	b.n	8011532 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	7c1b      	ldrb	r3, [r3, #16]
 8011310:	2b00      	cmp	r3, #0
 8011312:	d10d      	bne.n	8011330 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801131a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801131c:	f107 0208 	add.w	r2, r7, #8
 8011320:	4610      	mov	r0, r2
 8011322:	4798      	blx	r3
 8011324:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	3301      	adds	r3, #1
 801132a:	2202      	movs	r2, #2
 801132c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801132e:	e100      	b.n	8011532 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011338:	f107 0208 	add.w	r2, r7, #8
 801133c:	4610      	mov	r0, r2
 801133e:	4798      	blx	r3
 8011340:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	3301      	adds	r3, #1
 8011346:	2202      	movs	r2, #2
 8011348:	701a      	strb	r2, [r3, #0]
      break;
 801134a:	e0f2      	b.n	8011532 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801134c:	683b      	ldr	r3, [r7, #0]
 801134e:	885b      	ldrh	r3, [r3, #2]
 8011350:	b2db      	uxtb	r3, r3
 8011352:	2b05      	cmp	r3, #5
 8011354:	f200 80ac 	bhi.w	80114b0 <USBD_GetDescriptor+0x258>
 8011358:	a201      	add	r2, pc, #4	@ (adr r2, 8011360 <USBD_GetDescriptor+0x108>)
 801135a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801135e:	bf00      	nop
 8011360:	08011379 	.word	0x08011379
 8011364:	080113ad 	.word	0x080113ad
 8011368:	080113e1 	.word	0x080113e1
 801136c:	08011415 	.word	0x08011415
 8011370:	08011449 	.word	0x08011449
 8011374:	0801147d 	.word	0x0801147d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801137e:	685b      	ldr	r3, [r3, #4]
 8011380:	2b00      	cmp	r3, #0
 8011382:	d00b      	beq.n	801139c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801138a:	685b      	ldr	r3, [r3, #4]
 801138c:	687a      	ldr	r2, [r7, #4]
 801138e:	7c12      	ldrb	r2, [r2, #16]
 8011390:	f107 0108 	add.w	r1, r7, #8
 8011394:	4610      	mov	r0, r2
 8011396:	4798      	blx	r3
 8011398:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801139a:	e091      	b.n	80114c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801139c:	6839      	ldr	r1, [r7, #0]
 801139e:	6878      	ldr	r0, [r7, #4]
 80113a0:	f000 facb 	bl	801193a <USBD_CtlError>
            err++;
 80113a4:	7afb      	ldrb	r3, [r7, #11]
 80113a6:	3301      	adds	r3, #1
 80113a8:	72fb      	strb	r3, [r7, #11]
          break;
 80113aa:	e089      	b.n	80114c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80113b2:	689b      	ldr	r3, [r3, #8]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d00b      	beq.n	80113d0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80113be:	689b      	ldr	r3, [r3, #8]
 80113c0:	687a      	ldr	r2, [r7, #4]
 80113c2:	7c12      	ldrb	r2, [r2, #16]
 80113c4:	f107 0108 	add.w	r1, r7, #8
 80113c8:	4610      	mov	r0, r2
 80113ca:	4798      	blx	r3
 80113cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80113ce:	e077      	b.n	80114c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80113d0:	6839      	ldr	r1, [r7, #0]
 80113d2:	6878      	ldr	r0, [r7, #4]
 80113d4:	f000 fab1 	bl	801193a <USBD_CtlError>
            err++;
 80113d8:	7afb      	ldrb	r3, [r7, #11]
 80113da:	3301      	adds	r3, #1
 80113dc:	72fb      	strb	r3, [r7, #11]
          break;
 80113de:	e06f      	b.n	80114c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80113e6:	68db      	ldr	r3, [r3, #12]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d00b      	beq.n	8011404 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80113f2:	68db      	ldr	r3, [r3, #12]
 80113f4:	687a      	ldr	r2, [r7, #4]
 80113f6:	7c12      	ldrb	r2, [r2, #16]
 80113f8:	f107 0108 	add.w	r1, r7, #8
 80113fc:	4610      	mov	r0, r2
 80113fe:	4798      	blx	r3
 8011400:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011402:	e05d      	b.n	80114c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011404:	6839      	ldr	r1, [r7, #0]
 8011406:	6878      	ldr	r0, [r7, #4]
 8011408:	f000 fa97 	bl	801193a <USBD_CtlError>
            err++;
 801140c:	7afb      	ldrb	r3, [r7, #11]
 801140e:	3301      	adds	r3, #1
 8011410:	72fb      	strb	r3, [r7, #11]
          break;
 8011412:	e055      	b.n	80114c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801141a:	691b      	ldr	r3, [r3, #16]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d00b      	beq.n	8011438 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011426:	691b      	ldr	r3, [r3, #16]
 8011428:	687a      	ldr	r2, [r7, #4]
 801142a:	7c12      	ldrb	r2, [r2, #16]
 801142c:	f107 0108 	add.w	r1, r7, #8
 8011430:	4610      	mov	r0, r2
 8011432:	4798      	blx	r3
 8011434:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011436:	e043      	b.n	80114c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011438:	6839      	ldr	r1, [r7, #0]
 801143a:	6878      	ldr	r0, [r7, #4]
 801143c:	f000 fa7d 	bl	801193a <USBD_CtlError>
            err++;
 8011440:	7afb      	ldrb	r3, [r7, #11]
 8011442:	3301      	adds	r3, #1
 8011444:	72fb      	strb	r3, [r7, #11]
          break;
 8011446:	e03b      	b.n	80114c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801144e:	695b      	ldr	r3, [r3, #20]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d00b      	beq.n	801146c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801145a:	695b      	ldr	r3, [r3, #20]
 801145c:	687a      	ldr	r2, [r7, #4]
 801145e:	7c12      	ldrb	r2, [r2, #16]
 8011460:	f107 0108 	add.w	r1, r7, #8
 8011464:	4610      	mov	r0, r2
 8011466:	4798      	blx	r3
 8011468:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801146a:	e029      	b.n	80114c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801146c:	6839      	ldr	r1, [r7, #0]
 801146e:	6878      	ldr	r0, [r7, #4]
 8011470:	f000 fa63 	bl	801193a <USBD_CtlError>
            err++;
 8011474:	7afb      	ldrb	r3, [r7, #11]
 8011476:	3301      	adds	r3, #1
 8011478:	72fb      	strb	r3, [r7, #11]
          break;
 801147a:	e021      	b.n	80114c0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011482:	699b      	ldr	r3, [r3, #24]
 8011484:	2b00      	cmp	r3, #0
 8011486:	d00b      	beq.n	80114a0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801148e:	699b      	ldr	r3, [r3, #24]
 8011490:	687a      	ldr	r2, [r7, #4]
 8011492:	7c12      	ldrb	r2, [r2, #16]
 8011494:	f107 0108 	add.w	r1, r7, #8
 8011498:	4610      	mov	r0, r2
 801149a:	4798      	blx	r3
 801149c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801149e:	e00f      	b.n	80114c0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80114a0:	6839      	ldr	r1, [r7, #0]
 80114a2:	6878      	ldr	r0, [r7, #4]
 80114a4:	f000 fa49 	bl	801193a <USBD_CtlError>
            err++;
 80114a8:	7afb      	ldrb	r3, [r7, #11]
 80114aa:	3301      	adds	r3, #1
 80114ac:	72fb      	strb	r3, [r7, #11]
          break;
 80114ae:	e007      	b.n	80114c0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80114b0:	6839      	ldr	r1, [r7, #0]
 80114b2:	6878      	ldr	r0, [r7, #4]
 80114b4:	f000 fa41 	bl	801193a <USBD_CtlError>
          err++;
 80114b8:	7afb      	ldrb	r3, [r7, #11]
 80114ba:	3301      	adds	r3, #1
 80114bc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80114be:	bf00      	nop
      }
      break;
 80114c0:	e037      	b.n	8011532 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	7c1b      	ldrb	r3, [r3, #16]
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d109      	bne.n	80114de <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80114d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80114d2:	f107 0208 	add.w	r2, r7, #8
 80114d6:	4610      	mov	r0, r2
 80114d8:	4798      	blx	r3
 80114da:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80114dc:	e029      	b.n	8011532 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80114de:	6839      	ldr	r1, [r7, #0]
 80114e0:	6878      	ldr	r0, [r7, #4]
 80114e2:	f000 fa2a 	bl	801193a <USBD_CtlError>
        err++;
 80114e6:	7afb      	ldrb	r3, [r7, #11]
 80114e8:	3301      	adds	r3, #1
 80114ea:	72fb      	strb	r3, [r7, #11]
      break;
 80114ec:	e021      	b.n	8011532 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	7c1b      	ldrb	r3, [r3, #16]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d10d      	bne.n	8011512 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80114fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80114fe:	f107 0208 	add.w	r2, r7, #8
 8011502:	4610      	mov	r0, r2
 8011504:	4798      	blx	r3
 8011506:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	3301      	adds	r3, #1
 801150c:	2207      	movs	r2, #7
 801150e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011510:	e00f      	b.n	8011532 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011512:	6839      	ldr	r1, [r7, #0]
 8011514:	6878      	ldr	r0, [r7, #4]
 8011516:	f000 fa10 	bl	801193a <USBD_CtlError>
        err++;
 801151a:	7afb      	ldrb	r3, [r7, #11]
 801151c:	3301      	adds	r3, #1
 801151e:	72fb      	strb	r3, [r7, #11]
      break;
 8011520:	e007      	b.n	8011532 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8011522:	6839      	ldr	r1, [r7, #0]
 8011524:	6878      	ldr	r0, [r7, #4]
 8011526:	f000 fa08 	bl	801193a <USBD_CtlError>
      err++;
 801152a:	7afb      	ldrb	r3, [r7, #11]
 801152c:	3301      	adds	r3, #1
 801152e:	72fb      	strb	r3, [r7, #11]
      break;
 8011530:	bf00      	nop
  }

  if (err != 0U)
 8011532:	7afb      	ldrb	r3, [r7, #11]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d11e      	bne.n	8011576 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8011538:	683b      	ldr	r3, [r7, #0]
 801153a:	88db      	ldrh	r3, [r3, #6]
 801153c:	2b00      	cmp	r3, #0
 801153e:	d016      	beq.n	801156e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8011540:	893b      	ldrh	r3, [r7, #8]
 8011542:	2b00      	cmp	r3, #0
 8011544:	d00e      	beq.n	8011564 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8011546:	683b      	ldr	r3, [r7, #0]
 8011548:	88da      	ldrh	r2, [r3, #6]
 801154a:	893b      	ldrh	r3, [r7, #8]
 801154c:	4293      	cmp	r3, r2
 801154e:	bf28      	it	cs
 8011550:	4613      	movcs	r3, r2
 8011552:	b29b      	uxth	r3, r3
 8011554:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8011556:	893b      	ldrh	r3, [r7, #8]
 8011558:	461a      	mov	r2, r3
 801155a:	68f9      	ldr	r1, [r7, #12]
 801155c:	6878      	ldr	r0, [r7, #4]
 801155e:	f000 fa69 	bl	8011a34 <USBD_CtlSendData>
 8011562:	e009      	b.n	8011578 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8011564:	6839      	ldr	r1, [r7, #0]
 8011566:	6878      	ldr	r0, [r7, #4]
 8011568:	f000 f9e7 	bl	801193a <USBD_CtlError>
 801156c:	e004      	b.n	8011578 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801156e:	6878      	ldr	r0, [r7, #4]
 8011570:	f000 faba 	bl	8011ae8 <USBD_CtlSendStatus>
 8011574:	e000      	b.n	8011578 <USBD_GetDescriptor+0x320>
    return;
 8011576:	bf00      	nop
  }
}
 8011578:	3710      	adds	r7, #16
 801157a:	46bd      	mov	sp, r7
 801157c:	bd80      	pop	{r7, pc}
 801157e:	bf00      	nop

08011580 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011580:	b580      	push	{r7, lr}
 8011582:	b084      	sub	sp, #16
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
 8011588:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801158a:	683b      	ldr	r3, [r7, #0]
 801158c:	889b      	ldrh	r3, [r3, #4]
 801158e:	2b00      	cmp	r3, #0
 8011590:	d131      	bne.n	80115f6 <USBD_SetAddress+0x76>
 8011592:	683b      	ldr	r3, [r7, #0]
 8011594:	88db      	ldrh	r3, [r3, #6]
 8011596:	2b00      	cmp	r3, #0
 8011598:	d12d      	bne.n	80115f6 <USBD_SetAddress+0x76>
 801159a:	683b      	ldr	r3, [r7, #0]
 801159c:	885b      	ldrh	r3, [r3, #2]
 801159e:	2b7f      	cmp	r3, #127	@ 0x7f
 80115a0:	d829      	bhi.n	80115f6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80115a2:	683b      	ldr	r3, [r7, #0]
 80115a4:	885b      	ldrh	r3, [r3, #2]
 80115a6:	b2db      	uxtb	r3, r3
 80115a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80115ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80115b4:	b2db      	uxtb	r3, r3
 80115b6:	2b03      	cmp	r3, #3
 80115b8:	d104      	bne.n	80115c4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80115ba:	6839      	ldr	r1, [r7, #0]
 80115bc:	6878      	ldr	r0, [r7, #4]
 80115be:	f000 f9bc 	bl	801193a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80115c2:	e01d      	b.n	8011600 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	7bfa      	ldrb	r2, [r7, #15]
 80115c8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80115cc:	7bfb      	ldrb	r3, [r7, #15]
 80115ce:	4619      	mov	r1, r3
 80115d0:	6878      	ldr	r0, [r7, #4]
 80115d2:	f000 fefd 	bl	80123d0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80115d6:	6878      	ldr	r0, [r7, #4]
 80115d8:	f000 fa86 	bl	8011ae8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80115dc:	7bfb      	ldrb	r3, [r7, #15]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d004      	beq.n	80115ec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	2202      	movs	r2, #2
 80115e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80115ea:	e009      	b.n	8011600 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	2201      	movs	r2, #1
 80115f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80115f4:	e004      	b.n	8011600 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80115f6:	6839      	ldr	r1, [r7, #0]
 80115f8:	6878      	ldr	r0, [r7, #4]
 80115fa:	f000 f99e 	bl	801193a <USBD_CtlError>
  }
}
 80115fe:	bf00      	nop
 8011600:	bf00      	nop
 8011602:	3710      	adds	r7, #16
 8011604:	46bd      	mov	sp, r7
 8011606:	bd80      	pop	{r7, pc}

08011608 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011608:	b580      	push	{r7, lr}
 801160a:	b084      	sub	sp, #16
 801160c:	af00      	add	r7, sp, #0
 801160e:	6078      	str	r0, [r7, #4]
 8011610:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011612:	2300      	movs	r3, #0
 8011614:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011616:	683b      	ldr	r3, [r7, #0]
 8011618:	885b      	ldrh	r3, [r3, #2]
 801161a:	b2da      	uxtb	r2, r3
 801161c:	4b4e      	ldr	r3, [pc, #312]	@ (8011758 <USBD_SetConfig+0x150>)
 801161e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011620:	4b4d      	ldr	r3, [pc, #308]	@ (8011758 <USBD_SetConfig+0x150>)
 8011622:	781b      	ldrb	r3, [r3, #0]
 8011624:	2b01      	cmp	r3, #1
 8011626:	d905      	bls.n	8011634 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011628:	6839      	ldr	r1, [r7, #0]
 801162a:	6878      	ldr	r0, [r7, #4]
 801162c:	f000 f985 	bl	801193a <USBD_CtlError>
    return USBD_FAIL;
 8011630:	2303      	movs	r3, #3
 8011632:	e08c      	b.n	801174e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801163a:	b2db      	uxtb	r3, r3
 801163c:	2b02      	cmp	r3, #2
 801163e:	d002      	beq.n	8011646 <USBD_SetConfig+0x3e>
 8011640:	2b03      	cmp	r3, #3
 8011642:	d029      	beq.n	8011698 <USBD_SetConfig+0x90>
 8011644:	e075      	b.n	8011732 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8011646:	4b44      	ldr	r3, [pc, #272]	@ (8011758 <USBD_SetConfig+0x150>)
 8011648:	781b      	ldrb	r3, [r3, #0]
 801164a:	2b00      	cmp	r3, #0
 801164c:	d020      	beq.n	8011690 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801164e:	4b42      	ldr	r3, [pc, #264]	@ (8011758 <USBD_SetConfig+0x150>)
 8011650:	781b      	ldrb	r3, [r3, #0]
 8011652:	461a      	mov	r2, r3
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011658:	4b3f      	ldr	r3, [pc, #252]	@ (8011758 <USBD_SetConfig+0x150>)
 801165a:	781b      	ldrb	r3, [r3, #0]
 801165c:	4619      	mov	r1, r3
 801165e:	6878      	ldr	r0, [r7, #4]
 8011660:	f7ff f84b 	bl	80106fa <USBD_SetClassConfig>
 8011664:	4603      	mov	r3, r0
 8011666:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8011668:	7bfb      	ldrb	r3, [r7, #15]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d008      	beq.n	8011680 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801166e:	6839      	ldr	r1, [r7, #0]
 8011670:	6878      	ldr	r0, [r7, #4]
 8011672:	f000 f962 	bl	801193a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	2202      	movs	r2, #2
 801167a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801167e:	e065      	b.n	801174c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011680:	6878      	ldr	r0, [r7, #4]
 8011682:	f000 fa31 	bl	8011ae8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	2203      	movs	r2, #3
 801168a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801168e:	e05d      	b.n	801174c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8011690:	6878      	ldr	r0, [r7, #4]
 8011692:	f000 fa29 	bl	8011ae8 <USBD_CtlSendStatus>
      break;
 8011696:	e059      	b.n	801174c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8011698:	4b2f      	ldr	r3, [pc, #188]	@ (8011758 <USBD_SetConfig+0x150>)
 801169a:	781b      	ldrb	r3, [r3, #0]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d112      	bne.n	80116c6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	2202      	movs	r2, #2
 80116a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80116a8:	4b2b      	ldr	r3, [pc, #172]	@ (8011758 <USBD_SetConfig+0x150>)
 80116aa:	781b      	ldrb	r3, [r3, #0]
 80116ac:	461a      	mov	r2, r3
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80116b2:	4b29      	ldr	r3, [pc, #164]	@ (8011758 <USBD_SetConfig+0x150>)
 80116b4:	781b      	ldrb	r3, [r3, #0]
 80116b6:	4619      	mov	r1, r3
 80116b8:	6878      	ldr	r0, [r7, #4]
 80116ba:	f7ff f83a 	bl	8010732 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80116be:	6878      	ldr	r0, [r7, #4]
 80116c0:	f000 fa12 	bl	8011ae8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80116c4:	e042      	b.n	801174c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80116c6:	4b24      	ldr	r3, [pc, #144]	@ (8011758 <USBD_SetConfig+0x150>)
 80116c8:	781b      	ldrb	r3, [r3, #0]
 80116ca:	461a      	mov	r2, r3
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	685b      	ldr	r3, [r3, #4]
 80116d0:	429a      	cmp	r2, r3
 80116d2:	d02a      	beq.n	801172a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	685b      	ldr	r3, [r3, #4]
 80116d8:	b2db      	uxtb	r3, r3
 80116da:	4619      	mov	r1, r3
 80116dc:	6878      	ldr	r0, [r7, #4]
 80116de:	f7ff f828 	bl	8010732 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80116e2:	4b1d      	ldr	r3, [pc, #116]	@ (8011758 <USBD_SetConfig+0x150>)
 80116e4:	781b      	ldrb	r3, [r3, #0]
 80116e6:	461a      	mov	r2, r3
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80116ec:	4b1a      	ldr	r3, [pc, #104]	@ (8011758 <USBD_SetConfig+0x150>)
 80116ee:	781b      	ldrb	r3, [r3, #0]
 80116f0:	4619      	mov	r1, r3
 80116f2:	6878      	ldr	r0, [r7, #4]
 80116f4:	f7ff f801 	bl	80106fa <USBD_SetClassConfig>
 80116f8:	4603      	mov	r3, r0
 80116fa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80116fc:	7bfb      	ldrb	r3, [r7, #15]
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d00f      	beq.n	8011722 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8011702:	6839      	ldr	r1, [r7, #0]
 8011704:	6878      	ldr	r0, [r7, #4]
 8011706:	f000 f918 	bl	801193a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	685b      	ldr	r3, [r3, #4]
 801170e:	b2db      	uxtb	r3, r3
 8011710:	4619      	mov	r1, r3
 8011712:	6878      	ldr	r0, [r7, #4]
 8011714:	f7ff f80d 	bl	8010732 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	2202      	movs	r2, #2
 801171c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011720:	e014      	b.n	801174c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011722:	6878      	ldr	r0, [r7, #4]
 8011724:	f000 f9e0 	bl	8011ae8 <USBD_CtlSendStatus>
      break;
 8011728:	e010      	b.n	801174c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801172a:	6878      	ldr	r0, [r7, #4]
 801172c:	f000 f9dc 	bl	8011ae8 <USBD_CtlSendStatus>
      break;
 8011730:	e00c      	b.n	801174c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8011732:	6839      	ldr	r1, [r7, #0]
 8011734:	6878      	ldr	r0, [r7, #4]
 8011736:	f000 f900 	bl	801193a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801173a:	4b07      	ldr	r3, [pc, #28]	@ (8011758 <USBD_SetConfig+0x150>)
 801173c:	781b      	ldrb	r3, [r3, #0]
 801173e:	4619      	mov	r1, r3
 8011740:	6878      	ldr	r0, [r7, #4]
 8011742:	f7fe fff6 	bl	8010732 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8011746:	2303      	movs	r3, #3
 8011748:	73fb      	strb	r3, [r7, #15]
      break;
 801174a:	bf00      	nop
  }

  return ret;
 801174c:	7bfb      	ldrb	r3, [r7, #15]
}
 801174e:	4618      	mov	r0, r3
 8011750:	3710      	adds	r7, #16
 8011752:	46bd      	mov	sp, r7
 8011754:	bd80      	pop	{r7, pc}
 8011756:	bf00      	nop
 8011758:	20000688 	.word	0x20000688

0801175c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801175c:	b580      	push	{r7, lr}
 801175e:	b082      	sub	sp, #8
 8011760:	af00      	add	r7, sp, #0
 8011762:	6078      	str	r0, [r7, #4]
 8011764:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011766:	683b      	ldr	r3, [r7, #0]
 8011768:	88db      	ldrh	r3, [r3, #6]
 801176a:	2b01      	cmp	r3, #1
 801176c:	d004      	beq.n	8011778 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801176e:	6839      	ldr	r1, [r7, #0]
 8011770:	6878      	ldr	r0, [r7, #4]
 8011772:	f000 f8e2 	bl	801193a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8011776:	e023      	b.n	80117c0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801177e:	b2db      	uxtb	r3, r3
 8011780:	2b02      	cmp	r3, #2
 8011782:	dc02      	bgt.n	801178a <USBD_GetConfig+0x2e>
 8011784:	2b00      	cmp	r3, #0
 8011786:	dc03      	bgt.n	8011790 <USBD_GetConfig+0x34>
 8011788:	e015      	b.n	80117b6 <USBD_GetConfig+0x5a>
 801178a:	2b03      	cmp	r3, #3
 801178c:	d00b      	beq.n	80117a6 <USBD_GetConfig+0x4a>
 801178e:	e012      	b.n	80117b6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	2200      	movs	r2, #0
 8011794:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8011796:	687b      	ldr	r3, [r7, #4]
 8011798:	3308      	adds	r3, #8
 801179a:	2201      	movs	r2, #1
 801179c:	4619      	mov	r1, r3
 801179e:	6878      	ldr	r0, [r7, #4]
 80117a0:	f000 f948 	bl	8011a34 <USBD_CtlSendData>
        break;
 80117a4:	e00c      	b.n	80117c0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	3304      	adds	r3, #4
 80117aa:	2201      	movs	r2, #1
 80117ac:	4619      	mov	r1, r3
 80117ae:	6878      	ldr	r0, [r7, #4]
 80117b0:	f000 f940 	bl	8011a34 <USBD_CtlSendData>
        break;
 80117b4:	e004      	b.n	80117c0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80117b6:	6839      	ldr	r1, [r7, #0]
 80117b8:	6878      	ldr	r0, [r7, #4]
 80117ba:	f000 f8be 	bl	801193a <USBD_CtlError>
        break;
 80117be:	bf00      	nop
}
 80117c0:	bf00      	nop
 80117c2:	3708      	adds	r7, #8
 80117c4:	46bd      	mov	sp, r7
 80117c6:	bd80      	pop	{r7, pc}

080117c8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80117c8:	b580      	push	{r7, lr}
 80117ca:	b082      	sub	sp, #8
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	6078      	str	r0, [r7, #4]
 80117d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80117d8:	b2db      	uxtb	r3, r3
 80117da:	3b01      	subs	r3, #1
 80117dc:	2b02      	cmp	r3, #2
 80117de:	d81e      	bhi.n	801181e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80117e0:	683b      	ldr	r3, [r7, #0]
 80117e2:	88db      	ldrh	r3, [r3, #6]
 80117e4:	2b02      	cmp	r3, #2
 80117e6:	d004      	beq.n	80117f2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80117e8:	6839      	ldr	r1, [r7, #0]
 80117ea:	6878      	ldr	r0, [r7, #4]
 80117ec:	f000 f8a5 	bl	801193a <USBD_CtlError>
        break;
 80117f0:	e01a      	b.n	8011828 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	2201      	movs	r2, #1
 80117f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d005      	beq.n	801180e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	68db      	ldr	r3, [r3, #12]
 8011806:	f043 0202 	orr.w	r2, r3, #2
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	330c      	adds	r3, #12
 8011812:	2202      	movs	r2, #2
 8011814:	4619      	mov	r1, r3
 8011816:	6878      	ldr	r0, [r7, #4]
 8011818:	f000 f90c 	bl	8011a34 <USBD_CtlSendData>
      break;
 801181c:	e004      	b.n	8011828 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801181e:	6839      	ldr	r1, [r7, #0]
 8011820:	6878      	ldr	r0, [r7, #4]
 8011822:	f000 f88a 	bl	801193a <USBD_CtlError>
      break;
 8011826:	bf00      	nop
  }
}
 8011828:	bf00      	nop
 801182a:	3708      	adds	r7, #8
 801182c:	46bd      	mov	sp, r7
 801182e:	bd80      	pop	{r7, pc}

08011830 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011830:	b580      	push	{r7, lr}
 8011832:	b082      	sub	sp, #8
 8011834:	af00      	add	r7, sp, #0
 8011836:	6078      	str	r0, [r7, #4]
 8011838:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801183a:	683b      	ldr	r3, [r7, #0]
 801183c:	885b      	ldrh	r3, [r3, #2]
 801183e:	2b01      	cmp	r3, #1
 8011840:	d107      	bne.n	8011852 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	2201      	movs	r2, #1
 8011846:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801184a:	6878      	ldr	r0, [r7, #4]
 801184c:	f000 f94c 	bl	8011ae8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8011850:	e013      	b.n	801187a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8011852:	683b      	ldr	r3, [r7, #0]
 8011854:	885b      	ldrh	r3, [r3, #2]
 8011856:	2b02      	cmp	r3, #2
 8011858:	d10b      	bne.n	8011872 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801185a:	683b      	ldr	r3, [r7, #0]
 801185c:	889b      	ldrh	r3, [r3, #4]
 801185e:	0a1b      	lsrs	r3, r3, #8
 8011860:	b29b      	uxth	r3, r3
 8011862:	b2da      	uxtb	r2, r3
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801186a:	6878      	ldr	r0, [r7, #4]
 801186c:	f000 f93c 	bl	8011ae8 <USBD_CtlSendStatus>
}
 8011870:	e003      	b.n	801187a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8011872:	6839      	ldr	r1, [r7, #0]
 8011874:	6878      	ldr	r0, [r7, #4]
 8011876:	f000 f860 	bl	801193a <USBD_CtlError>
}
 801187a:	bf00      	nop
 801187c:	3708      	adds	r7, #8
 801187e:	46bd      	mov	sp, r7
 8011880:	bd80      	pop	{r7, pc}

08011882 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011882:	b580      	push	{r7, lr}
 8011884:	b082      	sub	sp, #8
 8011886:	af00      	add	r7, sp, #0
 8011888:	6078      	str	r0, [r7, #4]
 801188a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011892:	b2db      	uxtb	r3, r3
 8011894:	3b01      	subs	r3, #1
 8011896:	2b02      	cmp	r3, #2
 8011898:	d80b      	bhi.n	80118b2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801189a:	683b      	ldr	r3, [r7, #0]
 801189c:	885b      	ldrh	r3, [r3, #2]
 801189e:	2b01      	cmp	r3, #1
 80118a0:	d10c      	bne.n	80118bc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	2200      	movs	r2, #0
 80118a6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80118aa:	6878      	ldr	r0, [r7, #4]
 80118ac:	f000 f91c 	bl	8011ae8 <USBD_CtlSendStatus>
      }
      break;
 80118b0:	e004      	b.n	80118bc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80118b2:	6839      	ldr	r1, [r7, #0]
 80118b4:	6878      	ldr	r0, [r7, #4]
 80118b6:	f000 f840 	bl	801193a <USBD_CtlError>
      break;
 80118ba:	e000      	b.n	80118be <USBD_ClrFeature+0x3c>
      break;
 80118bc:	bf00      	nop
  }
}
 80118be:	bf00      	nop
 80118c0:	3708      	adds	r7, #8
 80118c2:	46bd      	mov	sp, r7
 80118c4:	bd80      	pop	{r7, pc}

080118c6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80118c6:	b580      	push	{r7, lr}
 80118c8:	b084      	sub	sp, #16
 80118ca:	af00      	add	r7, sp, #0
 80118cc:	6078      	str	r0, [r7, #4]
 80118ce:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80118d0:	683b      	ldr	r3, [r7, #0]
 80118d2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	781a      	ldrb	r2, [r3, #0]
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	3301      	adds	r3, #1
 80118e0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	781a      	ldrb	r2, [r3, #0]
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	3301      	adds	r3, #1
 80118ee:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80118f0:	68f8      	ldr	r0, [r7, #12]
 80118f2:	f7ff fa16 	bl	8010d22 <SWAPBYTE>
 80118f6:	4603      	mov	r3, r0
 80118f8:	461a      	mov	r2, r3
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	3301      	adds	r3, #1
 8011902:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	3301      	adds	r3, #1
 8011908:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801190a:	68f8      	ldr	r0, [r7, #12]
 801190c:	f7ff fa09 	bl	8010d22 <SWAPBYTE>
 8011910:	4603      	mov	r3, r0
 8011912:	461a      	mov	r2, r3
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011918:	68fb      	ldr	r3, [r7, #12]
 801191a:	3301      	adds	r3, #1
 801191c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	3301      	adds	r3, #1
 8011922:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011924:	68f8      	ldr	r0, [r7, #12]
 8011926:	f7ff f9fc 	bl	8010d22 <SWAPBYTE>
 801192a:	4603      	mov	r3, r0
 801192c:	461a      	mov	r2, r3
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	80da      	strh	r2, [r3, #6]
}
 8011932:	bf00      	nop
 8011934:	3710      	adds	r7, #16
 8011936:	46bd      	mov	sp, r7
 8011938:	bd80      	pop	{r7, pc}

0801193a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801193a:	b580      	push	{r7, lr}
 801193c:	b082      	sub	sp, #8
 801193e:	af00      	add	r7, sp, #0
 8011940:	6078      	str	r0, [r7, #4]
 8011942:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011944:	2180      	movs	r1, #128	@ 0x80
 8011946:	6878      	ldr	r0, [r7, #4]
 8011948:	f000 fcd8 	bl	80122fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801194c:	2100      	movs	r1, #0
 801194e:	6878      	ldr	r0, [r7, #4]
 8011950:	f000 fcd4 	bl	80122fc <USBD_LL_StallEP>
}
 8011954:	bf00      	nop
 8011956:	3708      	adds	r7, #8
 8011958:	46bd      	mov	sp, r7
 801195a:	bd80      	pop	{r7, pc}

0801195c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801195c:	b580      	push	{r7, lr}
 801195e:	b086      	sub	sp, #24
 8011960:	af00      	add	r7, sp, #0
 8011962:	60f8      	str	r0, [r7, #12]
 8011964:	60b9      	str	r1, [r7, #8]
 8011966:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011968:	2300      	movs	r3, #0
 801196a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d042      	beq.n	80119f8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8011976:	6938      	ldr	r0, [r7, #16]
 8011978:	f000 f842 	bl	8011a00 <USBD_GetLen>
 801197c:	4603      	mov	r3, r0
 801197e:	3301      	adds	r3, #1
 8011980:	005b      	lsls	r3, r3, #1
 8011982:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011986:	d808      	bhi.n	801199a <USBD_GetString+0x3e>
 8011988:	6938      	ldr	r0, [r7, #16]
 801198a:	f000 f839 	bl	8011a00 <USBD_GetLen>
 801198e:	4603      	mov	r3, r0
 8011990:	3301      	adds	r3, #1
 8011992:	b29b      	uxth	r3, r3
 8011994:	005b      	lsls	r3, r3, #1
 8011996:	b29a      	uxth	r2, r3
 8011998:	e001      	b.n	801199e <USBD_GetString+0x42>
 801199a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80119a2:	7dfb      	ldrb	r3, [r7, #23]
 80119a4:	68ba      	ldr	r2, [r7, #8]
 80119a6:	4413      	add	r3, r2
 80119a8:	687a      	ldr	r2, [r7, #4]
 80119aa:	7812      	ldrb	r2, [r2, #0]
 80119ac:	701a      	strb	r2, [r3, #0]
  idx++;
 80119ae:	7dfb      	ldrb	r3, [r7, #23]
 80119b0:	3301      	adds	r3, #1
 80119b2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80119b4:	7dfb      	ldrb	r3, [r7, #23]
 80119b6:	68ba      	ldr	r2, [r7, #8]
 80119b8:	4413      	add	r3, r2
 80119ba:	2203      	movs	r2, #3
 80119bc:	701a      	strb	r2, [r3, #0]
  idx++;
 80119be:	7dfb      	ldrb	r3, [r7, #23]
 80119c0:	3301      	adds	r3, #1
 80119c2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80119c4:	e013      	b.n	80119ee <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80119c6:	7dfb      	ldrb	r3, [r7, #23]
 80119c8:	68ba      	ldr	r2, [r7, #8]
 80119ca:	4413      	add	r3, r2
 80119cc:	693a      	ldr	r2, [r7, #16]
 80119ce:	7812      	ldrb	r2, [r2, #0]
 80119d0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80119d2:	693b      	ldr	r3, [r7, #16]
 80119d4:	3301      	adds	r3, #1
 80119d6:	613b      	str	r3, [r7, #16]
    idx++;
 80119d8:	7dfb      	ldrb	r3, [r7, #23]
 80119da:	3301      	adds	r3, #1
 80119dc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80119de:	7dfb      	ldrb	r3, [r7, #23]
 80119e0:	68ba      	ldr	r2, [r7, #8]
 80119e2:	4413      	add	r3, r2
 80119e4:	2200      	movs	r2, #0
 80119e6:	701a      	strb	r2, [r3, #0]
    idx++;
 80119e8:	7dfb      	ldrb	r3, [r7, #23]
 80119ea:	3301      	adds	r3, #1
 80119ec:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80119ee:	693b      	ldr	r3, [r7, #16]
 80119f0:	781b      	ldrb	r3, [r3, #0]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d1e7      	bne.n	80119c6 <USBD_GetString+0x6a>
 80119f6:	e000      	b.n	80119fa <USBD_GetString+0x9e>
    return;
 80119f8:	bf00      	nop
  }
}
 80119fa:	3718      	adds	r7, #24
 80119fc:	46bd      	mov	sp, r7
 80119fe:	bd80      	pop	{r7, pc}

08011a00 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011a00:	b480      	push	{r7}
 8011a02:	b085      	sub	sp, #20
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011a08:	2300      	movs	r3, #0
 8011a0a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011a10:	e005      	b.n	8011a1e <USBD_GetLen+0x1e>
  {
    len++;
 8011a12:	7bfb      	ldrb	r3, [r7, #15]
 8011a14:	3301      	adds	r3, #1
 8011a16:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011a18:	68bb      	ldr	r3, [r7, #8]
 8011a1a:	3301      	adds	r3, #1
 8011a1c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8011a1e:	68bb      	ldr	r3, [r7, #8]
 8011a20:	781b      	ldrb	r3, [r3, #0]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d1f5      	bne.n	8011a12 <USBD_GetLen+0x12>
  }

  return len;
 8011a26:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a28:	4618      	mov	r0, r3
 8011a2a:	3714      	adds	r7, #20
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a32:	4770      	bx	lr

08011a34 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011a34:	b580      	push	{r7, lr}
 8011a36:	b084      	sub	sp, #16
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	60f8      	str	r0, [r7, #12]
 8011a3c:	60b9      	str	r1, [r7, #8]
 8011a3e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	2202      	movs	r2, #2
 8011a44:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	687a      	ldr	r2, [r7, #4]
 8011a4c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	687a      	ldr	r2, [r7, #4]
 8011a52:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	68ba      	ldr	r2, [r7, #8]
 8011a58:	2100      	movs	r1, #0
 8011a5a:	68f8      	ldr	r0, [r7, #12]
 8011a5c:	f000 fcd7 	bl	801240e <USBD_LL_Transmit>

  return USBD_OK;
 8011a60:	2300      	movs	r3, #0
}
 8011a62:	4618      	mov	r0, r3
 8011a64:	3710      	adds	r7, #16
 8011a66:	46bd      	mov	sp, r7
 8011a68:	bd80      	pop	{r7, pc}

08011a6a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011a6a:	b580      	push	{r7, lr}
 8011a6c:	b084      	sub	sp, #16
 8011a6e:	af00      	add	r7, sp, #0
 8011a70:	60f8      	str	r0, [r7, #12]
 8011a72:	60b9      	str	r1, [r7, #8]
 8011a74:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	68ba      	ldr	r2, [r7, #8]
 8011a7a:	2100      	movs	r1, #0
 8011a7c:	68f8      	ldr	r0, [r7, #12]
 8011a7e:	f000 fcc6 	bl	801240e <USBD_LL_Transmit>

  return USBD_OK;
 8011a82:	2300      	movs	r3, #0
}
 8011a84:	4618      	mov	r0, r3
 8011a86:	3710      	adds	r7, #16
 8011a88:	46bd      	mov	sp, r7
 8011a8a:	bd80      	pop	{r7, pc}

08011a8c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b084      	sub	sp, #16
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	60f8      	str	r0, [r7, #12]
 8011a94:	60b9      	str	r1, [r7, #8]
 8011a96:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	2203      	movs	r2, #3
 8011a9c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	687a      	ldr	r2, [r7, #4]
 8011aa4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	687a      	ldr	r2, [r7, #4]
 8011aac:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	68ba      	ldr	r2, [r7, #8]
 8011ab4:	2100      	movs	r1, #0
 8011ab6:	68f8      	ldr	r0, [r7, #12]
 8011ab8:	f000 fcca 	bl	8012450 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011abc:	2300      	movs	r3, #0
}
 8011abe:	4618      	mov	r0, r3
 8011ac0:	3710      	adds	r7, #16
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	bd80      	pop	{r7, pc}

08011ac6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011ac6:	b580      	push	{r7, lr}
 8011ac8:	b084      	sub	sp, #16
 8011aca:	af00      	add	r7, sp, #0
 8011acc:	60f8      	str	r0, [r7, #12]
 8011ace:	60b9      	str	r1, [r7, #8]
 8011ad0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	68ba      	ldr	r2, [r7, #8]
 8011ad6:	2100      	movs	r1, #0
 8011ad8:	68f8      	ldr	r0, [r7, #12]
 8011ada:	f000 fcb9 	bl	8012450 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011ade:	2300      	movs	r3, #0
}
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	3710      	adds	r7, #16
 8011ae4:	46bd      	mov	sp, r7
 8011ae6:	bd80      	pop	{r7, pc}

08011ae8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011ae8:	b580      	push	{r7, lr}
 8011aea:	b082      	sub	sp, #8
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	2204      	movs	r2, #4
 8011af4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011af8:	2300      	movs	r3, #0
 8011afa:	2200      	movs	r2, #0
 8011afc:	2100      	movs	r1, #0
 8011afe:	6878      	ldr	r0, [r7, #4]
 8011b00:	f000 fc85 	bl	801240e <USBD_LL_Transmit>

  return USBD_OK;
 8011b04:	2300      	movs	r3, #0
}
 8011b06:	4618      	mov	r0, r3
 8011b08:	3708      	adds	r7, #8
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd80      	pop	{r7, pc}

08011b0e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8011b0e:	b580      	push	{r7, lr}
 8011b10:	b082      	sub	sp, #8
 8011b12:	af00      	add	r7, sp, #0
 8011b14:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	2205      	movs	r2, #5
 8011b1a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011b1e:	2300      	movs	r3, #0
 8011b20:	2200      	movs	r2, #0
 8011b22:	2100      	movs	r1, #0
 8011b24:	6878      	ldr	r0, [r7, #4]
 8011b26:	f000 fc93 	bl	8012450 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011b2a:	2300      	movs	r3, #0
}
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	3708      	adds	r7, #8
 8011b30:	46bd      	mov	sp, r7
 8011b32:	bd80      	pop	{r7, pc}

08011b34 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8011b34:	b580      	push	{r7, lr}
 8011b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8011b38:	2200      	movs	r2, #0
 8011b3a:	4912      	ldr	r1, [pc, #72]	@ (8011b84 <MX_USB_Device_Init+0x50>)
 8011b3c:	4812      	ldr	r0, [pc, #72]	@ (8011b88 <MX_USB_Device_Init+0x54>)
 8011b3e:	f7fe fd43 	bl	80105c8 <USBD_Init>
 8011b42:	4603      	mov	r3, r0
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d001      	beq.n	8011b4c <MX_USB_Device_Init+0x18>
    Error_Handler();
 8011b48:	f7f2 ff5b 	bl	8004a02 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8011b4c:	490f      	ldr	r1, [pc, #60]	@ (8011b8c <MX_USB_Device_Init+0x58>)
 8011b4e:	480e      	ldr	r0, [pc, #56]	@ (8011b88 <MX_USB_Device_Init+0x54>)
 8011b50:	f7fe fd78 	bl	8010644 <USBD_RegisterClass>
 8011b54:	4603      	mov	r3, r0
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d001      	beq.n	8011b5e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8011b5a:	f7f2 ff52 	bl	8004a02 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8011b5e:	490c      	ldr	r1, [pc, #48]	@ (8011b90 <MX_USB_Device_Init+0x5c>)
 8011b60:	4809      	ldr	r0, [pc, #36]	@ (8011b88 <MX_USB_Device_Init+0x54>)
 8011b62:	f7fe fc61 	bl	8010428 <USBD_CDC_RegisterInterface>
 8011b66:	4603      	mov	r3, r0
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d001      	beq.n	8011b70 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8011b6c:	f7f2 ff49 	bl	8004a02 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8011b70:	4805      	ldr	r0, [pc, #20]	@ (8011b88 <MX_USB_Device_Init+0x54>)
 8011b72:	f7fe fdab 	bl	80106cc <USBD_Start>
 8011b76:	4603      	mov	r3, r0
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d001      	beq.n	8011b80 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8011b7c:	f7f2 ff41 	bl	8004a02 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8011b80:	bf00      	nop
 8011b82:	bd80      	pop	{r7, pc}
 8011b84:	200000d8 	.word	0x200000d8
 8011b88:	2000068c 	.word	0x2000068c
 8011b8c:	20000044 	.word	0x20000044
 8011b90:	200000c4 	.word	0x200000c4

08011b94 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011b94:	b580      	push	{r7, lr}
 8011b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011b98:	2200      	movs	r2, #0
 8011b9a:	4905      	ldr	r1, [pc, #20]	@ (8011bb0 <CDC_Init_FS+0x1c>)
 8011b9c:	4805      	ldr	r0, [pc, #20]	@ (8011bb4 <CDC_Init_FS+0x20>)
 8011b9e:	f7fe fc5d 	bl	801045c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011ba2:	4905      	ldr	r1, [pc, #20]	@ (8011bb8 <CDC_Init_FS+0x24>)
 8011ba4:	4803      	ldr	r0, [pc, #12]	@ (8011bb4 <CDC_Init_FS+0x20>)
 8011ba6:	f7fe fc7b 	bl	80104a0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011baa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011bac:	4618      	mov	r0, r3
 8011bae:	bd80      	pop	{r7, pc}
 8011bb0:	20001168 	.word	0x20001168
 8011bb4:	2000068c 	.word	0x2000068c
 8011bb8:	20000968 	.word	0x20000968

08011bbc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011bbc:	b480      	push	{r7}
 8011bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011bc0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bca:	4770      	bx	lr

08011bcc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011bcc:	b480      	push	{r7}
 8011bce:	b083      	sub	sp, #12
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	4603      	mov	r3, r0
 8011bd4:	6039      	str	r1, [r7, #0]
 8011bd6:	71fb      	strb	r3, [r7, #7]
 8011bd8:	4613      	mov	r3, r2
 8011bda:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011bdc:	79fb      	ldrb	r3, [r7, #7]
 8011bde:	2b23      	cmp	r3, #35	@ 0x23
 8011be0:	d84a      	bhi.n	8011c78 <CDC_Control_FS+0xac>
 8011be2:	a201      	add	r2, pc, #4	@ (adr r2, 8011be8 <CDC_Control_FS+0x1c>)
 8011be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011be8:	08011c79 	.word	0x08011c79
 8011bec:	08011c79 	.word	0x08011c79
 8011bf0:	08011c79 	.word	0x08011c79
 8011bf4:	08011c79 	.word	0x08011c79
 8011bf8:	08011c79 	.word	0x08011c79
 8011bfc:	08011c79 	.word	0x08011c79
 8011c00:	08011c79 	.word	0x08011c79
 8011c04:	08011c79 	.word	0x08011c79
 8011c08:	08011c79 	.word	0x08011c79
 8011c0c:	08011c79 	.word	0x08011c79
 8011c10:	08011c79 	.word	0x08011c79
 8011c14:	08011c79 	.word	0x08011c79
 8011c18:	08011c79 	.word	0x08011c79
 8011c1c:	08011c79 	.word	0x08011c79
 8011c20:	08011c79 	.word	0x08011c79
 8011c24:	08011c79 	.word	0x08011c79
 8011c28:	08011c79 	.word	0x08011c79
 8011c2c:	08011c79 	.word	0x08011c79
 8011c30:	08011c79 	.word	0x08011c79
 8011c34:	08011c79 	.word	0x08011c79
 8011c38:	08011c79 	.word	0x08011c79
 8011c3c:	08011c79 	.word	0x08011c79
 8011c40:	08011c79 	.word	0x08011c79
 8011c44:	08011c79 	.word	0x08011c79
 8011c48:	08011c79 	.word	0x08011c79
 8011c4c:	08011c79 	.word	0x08011c79
 8011c50:	08011c79 	.word	0x08011c79
 8011c54:	08011c79 	.word	0x08011c79
 8011c58:	08011c79 	.word	0x08011c79
 8011c5c:	08011c79 	.word	0x08011c79
 8011c60:	08011c79 	.word	0x08011c79
 8011c64:	08011c79 	.word	0x08011c79
 8011c68:	08011c79 	.word	0x08011c79
 8011c6c:	08011c79 	.word	0x08011c79
 8011c70:	08011c79 	.word	0x08011c79
 8011c74:	08011c79 	.word	0x08011c79
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011c78:	bf00      	nop
  }

  return (USBD_OK);
 8011c7a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	370c      	adds	r7, #12
 8011c80:	46bd      	mov	sp, r7
 8011c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c86:	4770      	bx	lr

08011c88 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b082      	sub	sp, #8
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	6078      	str	r0, [r7, #4]
 8011c90:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011c92:	6879      	ldr	r1, [r7, #4]
 8011c94:	4805      	ldr	r0, [pc, #20]	@ (8011cac <CDC_Receive_FS+0x24>)
 8011c96:	f7fe fc03 	bl	80104a0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011c9a:	4804      	ldr	r0, [pc, #16]	@ (8011cac <CDC_Receive_FS+0x24>)
 8011c9c:	f7fe fc5e 	bl	801055c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011ca0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	3708      	adds	r7, #8
 8011ca6:	46bd      	mov	sp, r7
 8011ca8:	bd80      	pop	{r7, pc}
 8011caa:	bf00      	nop
 8011cac:	2000068c 	.word	0x2000068c

08011cb0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011cb0:	b580      	push	{r7, lr}
 8011cb2:	b084      	sub	sp, #16
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	6078      	str	r0, [r7, #4]
 8011cb8:	460b      	mov	r3, r1
 8011cba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8011cc0:	4b0d      	ldr	r3, [pc, #52]	@ (8011cf8 <CDC_Transmit_FS+0x48>)
 8011cc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8011cc6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8011cc8:	68bb      	ldr	r3, [r7, #8]
 8011cca:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d001      	beq.n	8011cd6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8011cd2:	2301      	movs	r3, #1
 8011cd4:	e00b      	b.n	8011cee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8011cd6:	887b      	ldrh	r3, [r7, #2]
 8011cd8:	461a      	mov	r2, r3
 8011cda:	6879      	ldr	r1, [r7, #4]
 8011cdc:	4806      	ldr	r0, [pc, #24]	@ (8011cf8 <CDC_Transmit_FS+0x48>)
 8011cde:	f7fe fbbd 	bl	801045c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8011ce2:	4805      	ldr	r0, [pc, #20]	@ (8011cf8 <CDC_Transmit_FS+0x48>)
 8011ce4:	f7fe fbfa 	bl	80104dc <USBD_CDC_TransmitPacket>
 8011ce8:	4603      	mov	r3, r0
 8011cea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8011cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cee:	4618      	mov	r0, r3
 8011cf0:	3710      	adds	r7, #16
 8011cf2:	46bd      	mov	sp, r7
 8011cf4:	bd80      	pop	{r7, pc}
 8011cf6:	bf00      	nop
 8011cf8:	2000068c 	.word	0x2000068c

08011cfc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011cfc:	b480      	push	{r7}
 8011cfe:	b087      	sub	sp, #28
 8011d00:	af00      	add	r7, sp, #0
 8011d02:	60f8      	str	r0, [r7, #12]
 8011d04:	60b9      	str	r1, [r7, #8]
 8011d06:	4613      	mov	r3, r2
 8011d08:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8011d0a:	2300      	movs	r3, #0
 8011d0c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011d0e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011d12:	4618      	mov	r0, r3
 8011d14:	371c      	adds	r7, #28
 8011d16:	46bd      	mov	sp, r7
 8011d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d1c:	4770      	bx	lr
	...

08011d20 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011d20:	b480      	push	{r7}
 8011d22:	b083      	sub	sp, #12
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	4603      	mov	r3, r0
 8011d28:	6039      	str	r1, [r7, #0]
 8011d2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8011d2c:	683b      	ldr	r3, [r7, #0]
 8011d2e:	2212      	movs	r2, #18
 8011d30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8011d32:	4b03      	ldr	r3, [pc, #12]	@ (8011d40 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8011d34:	4618      	mov	r0, r3
 8011d36:	370c      	adds	r7, #12
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3e:	4770      	bx	lr
 8011d40:	200000f8 	.word	0x200000f8

08011d44 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011d44:	b480      	push	{r7}
 8011d46:	b083      	sub	sp, #12
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	4603      	mov	r3, r0
 8011d4c:	6039      	str	r1, [r7, #0]
 8011d4e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011d50:	683b      	ldr	r3, [r7, #0]
 8011d52:	2204      	movs	r2, #4
 8011d54:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011d56:	4b03      	ldr	r3, [pc, #12]	@ (8011d64 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8011d58:	4618      	mov	r0, r3
 8011d5a:	370c      	adds	r7, #12
 8011d5c:	46bd      	mov	sp, r7
 8011d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d62:	4770      	bx	lr
 8011d64:	2000010c 	.word	0x2000010c

08011d68 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b082      	sub	sp, #8
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	4603      	mov	r3, r0
 8011d70:	6039      	str	r1, [r7, #0]
 8011d72:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011d74:	79fb      	ldrb	r3, [r7, #7]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d105      	bne.n	8011d86 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8011d7a:	683a      	ldr	r2, [r7, #0]
 8011d7c:	4907      	ldr	r1, [pc, #28]	@ (8011d9c <USBD_CDC_ProductStrDescriptor+0x34>)
 8011d7e:	4808      	ldr	r0, [pc, #32]	@ (8011da0 <USBD_CDC_ProductStrDescriptor+0x38>)
 8011d80:	f7ff fdec 	bl	801195c <USBD_GetString>
 8011d84:	e004      	b.n	8011d90 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8011d86:	683a      	ldr	r2, [r7, #0]
 8011d88:	4904      	ldr	r1, [pc, #16]	@ (8011d9c <USBD_CDC_ProductStrDescriptor+0x34>)
 8011d8a:	4805      	ldr	r0, [pc, #20]	@ (8011da0 <USBD_CDC_ProductStrDescriptor+0x38>)
 8011d8c:	f7ff fde6 	bl	801195c <USBD_GetString>
  }
  return USBD_StrDesc;
 8011d90:	4b02      	ldr	r3, [pc, #8]	@ (8011d9c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8011d92:	4618      	mov	r0, r3
 8011d94:	3708      	adds	r7, #8
 8011d96:	46bd      	mov	sp, r7
 8011d98:	bd80      	pop	{r7, pc}
 8011d9a:	bf00      	nop
 8011d9c:	20001968 	.word	0x20001968
 8011da0:	0801352c 	.word	0x0801352c

08011da4 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011da4:	b580      	push	{r7, lr}
 8011da6:	b082      	sub	sp, #8
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	4603      	mov	r3, r0
 8011dac:	6039      	str	r1, [r7, #0]
 8011dae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011db0:	683a      	ldr	r2, [r7, #0]
 8011db2:	4904      	ldr	r1, [pc, #16]	@ (8011dc4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8011db4:	4804      	ldr	r0, [pc, #16]	@ (8011dc8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8011db6:	f7ff fdd1 	bl	801195c <USBD_GetString>
  return USBD_StrDesc;
 8011dba:	4b02      	ldr	r3, [pc, #8]	@ (8011dc4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	3708      	adds	r7, #8
 8011dc0:	46bd      	mov	sp, r7
 8011dc2:	bd80      	pop	{r7, pc}
 8011dc4:	20001968 	.word	0x20001968
 8011dc8:	08013544 	.word	0x08013544

08011dcc <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011dcc:	b580      	push	{r7, lr}
 8011dce:	b082      	sub	sp, #8
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	4603      	mov	r3, r0
 8011dd4:	6039      	str	r1, [r7, #0]
 8011dd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011dd8:	683b      	ldr	r3, [r7, #0]
 8011dda:	221a      	movs	r2, #26
 8011ddc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011dde:	f000 f843 	bl	8011e68 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8011de2:	4b02      	ldr	r3, [pc, #8]	@ (8011dec <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8011de4:	4618      	mov	r0, r3
 8011de6:	3708      	adds	r7, #8
 8011de8:	46bd      	mov	sp, r7
 8011dea:	bd80      	pop	{r7, pc}
 8011dec:	20000110 	.word	0x20000110

08011df0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011df0:	b580      	push	{r7, lr}
 8011df2:	b082      	sub	sp, #8
 8011df4:	af00      	add	r7, sp, #0
 8011df6:	4603      	mov	r3, r0
 8011df8:	6039      	str	r1, [r7, #0]
 8011dfa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011dfc:	79fb      	ldrb	r3, [r7, #7]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d105      	bne.n	8011e0e <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8011e02:	683a      	ldr	r2, [r7, #0]
 8011e04:	4907      	ldr	r1, [pc, #28]	@ (8011e24 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8011e06:	4808      	ldr	r0, [pc, #32]	@ (8011e28 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8011e08:	f7ff fda8 	bl	801195c <USBD_GetString>
 8011e0c:	e004      	b.n	8011e18 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8011e0e:	683a      	ldr	r2, [r7, #0]
 8011e10:	4904      	ldr	r1, [pc, #16]	@ (8011e24 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8011e12:	4805      	ldr	r0, [pc, #20]	@ (8011e28 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8011e14:	f7ff fda2 	bl	801195c <USBD_GetString>
  }
  return USBD_StrDesc;
 8011e18:	4b02      	ldr	r3, [pc, #8]	@ (8011e24 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	3708      	adds	r7, #8
 8011e1e:	46bd      	mov	sp, r7
 8011e20:	bd80      	pop	{r7, pc}
 8011e22:	bf00      	nop
 8011e24:	20001968 	.word	0x20001968
 8011e28:	08013558 	.word	0x08013558

08011e2c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011e2c:	b580      	push	{r7, lr}
 8011e2e:	b082      	sub	sp, #8
 8011e30:	af00      	add	r7, sp, #0
 8011e32:	4603      	mov	r3, r0
 8011e34:	6039      	str	r1, [r7, #0]
 8011e36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011e38:	79fb      	ldrb	r3, [r7, #7]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d105      	bne.n	8011e4a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8011e3e:	683a      	ldr	r2, [r7, #0]
 8011e40:	4907      	ldr	r1, [pc, #28]	@ (8011e60 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8011e42:	4808      	ldr	r0, [pc, #32]	@ (8011e64 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8011e44:	f7ff fd8a 	bl	801195c <USBD_GetString>
 8011e48:	e004      	b.n	8011e54 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8011e4a:	683a      	ldr	r2, [r7, #0]
 8011e4c:	4904      	ldr	r1, [pc, #16]	@ (8011e60 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8011e4e:	4805      	ldr	r0, [pc, #20]	@ (8011e64 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8011e50:	f7ff fd84 	bl	801195c <USBD_GetString>
  }
  return USBD_StrDesc;
 8011e54:	4b02      	ldr	r3, [pc, #8]	@ (8011e60 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8011e56:	4618      	mov	r0, r3
 8011e58:	3708      	adds	r7, #8
 8011e5a:	46bd      	mov	sp, r7
 8011e5c:	bd80      	pop	{r7, pc}
 8011e5e:	bf00      	nop
 8011e60:	20001968 	.word	0x20001968
 8011e64:	08013564 	.word	0x08013564

08011e68 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011e68:	b580      	push	{r7, lr}
 8011e6a:	b084      	sub	sp, #16
 8011e6c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8011eac <Get_SerialNum+0x44>)
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011e74:	4b0e      	ldr	r3, [pc, #56]	@ (8011eb0 <Get_SerialNum+0x48>)
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8011eb4 <Get_SerialNum+0x4c>)
 8011e7c:	681b      	ldr	r3, [r3, #0]
 8011e7e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011e80:	68fa      	ldr	r2, [r7, #12]
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	4413      	add	r3, r2
 8011e86:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d009      	beq.n	8011ea2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011e8e:	2208      	movs	r2, #8
 8011e90:	4909      	ldr	r1, [pc, #36]	@ (8011eb8 <Get_SerialNum+0x50>)
 8011e92:	68f8      	ldr	r0, [r7, #12]
 8011e94:	f000 f814 	bl	8011ec0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011e98:	2204      	movs	r2, #4
 8011e9a:	4908      	ldr	r1, [pc, #32]	@ (8011ebc <Get_SerialNum+0x54>)
 8011e9c:	68b8      	ldr	r0, [r7, #8]
 8011e9e:	f000 f80f 	bl	8011ec0 <IntToUnicode>
  }
}
 8011ea2:	bf00      	nop
 8011ea4:	3710      	adds	r7, #16
 8011ea6:	46bd      	mov	sp, r7
 8011ea8:	bd80      	pop	{r7, pc}
 8011eaa:	bf00      	nop
 8011eac:	1fff7590 	.word	0x1fff7590
 8011eb0:	1fff7594 	.word	0x1fff7594
 8011eb4:	1fff7598 	.word	0x1fff7598
 8011eb8:	20000112 	.word	0x20000112
 8011ebc:	20000122 	.word	0x20000122

08011ec0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011ec0:	b480      	push	{r7}
 8011ec2:	b087      	sub	sp, #28
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	60f8      	str	r0, [r7, #12]
 8011ec8:	60b9      	str	r1, [r7, #8]
 8011eca:	4613      	mov	r3, r2
 8011ecc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011ece:	2300      	movs	r3, #0
 8011ed0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	75fb      	strb	r3, [r7, #23]
 8011ed6:	e027      	b.n	8011f28 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	0f1b      	lsrs	r3, r3, #28
 8011edc:	2b09      	cmp	r3, #9
 8011ede:	d80b      	bhi.n	8011ef8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	0f1b      	lsrs	r3, r3, #28
 8011ee4:	b2da      	uxtb	r2, r3
 8011ee6:	7dfb      	ldrb	r3, [r7, #23]
 8011ee8:	005b      	lsls	r3, r3, #1
 8011eea:	4619      	mov	r1, r3
 8011eec:	68bb      	ldr	r3, [r7, #8]
 8011eee:	440b      	add	r3, r1
 8011ef0:	3230      	adds	r2, #48	@ 0x30
 8011ef2:	b2d2      	uxtb	r2, r2
 8011ef4:	701a      	strb	r2, [r3, #0]
 8011ef6:	e00a      	b.n	8011f0e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	0f1b      	lsrs	r3, r3, #28
 8011efc:	b2da      	uxtb	r2, r3
 8011efe:	7dfb      	ldrb	r3, [r7, #23]
 8011f00:	005b      	lsls	r3, r3, #1
 8011f02:	4619      	mov	r1, r3
 8011f04:	68bb      	ldr	r3, [r7, #8]
 8011f06:	440b      	add	r3, r1
 8011f08:	3237      	adds	r2, #55	@ 0x37
 8011f0a:	b2d2      	uxtb	r2, r2
 8011f0c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	011b      	lsls	r3, r3, #4
 8011f12:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011f14:	7dfb      	ldrb	r3, [r7, #23]
 8011f16:	005b      	lsls	r3, r3, #1
 8011f18:	3301      	adds	r3, #1
 8011f1a:	68ba      	ldr	r2, [r7, #8]
 8011f1c:	4413      	add	r3, r2
 8011f1e:	2200      	movs	r2, #0
 8011f20:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011f22:	7dfb      	ldrb	r3, [r7, #23]
 8011f24:	3301      	adds	r3, #1
 8011f26:	75fb      	strb	r3, [r7, #23]
 8011f28:	7dfa      	ldrb	r2, [r7, #23]
 8011f2a:	79fb      	ldrb	r3, [r7, #7]
 8011f2c:	429a      	cmp	r2, r3
 8011f2e:	d3d3      	bcc.n	8011ed8 <IntToUnicode+0x18>
  }
}
 8011f30:	bf00      	nop
 8011f32:	bf00      	nop
 8011f34:	371c      	adds	r7, #28
 8011f36:	46bd      	mov	sp, r7
 8011f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f3c:	4770      	bx	lr

08011f3e <LL_AHB2_GRP1_EnableClock>:
{
 8011f3e:	b480      	push	{r7}
 8011f40:	b085      	sub	sp, #20
 8011f42:	af00      	add	r7, sp, #0
 8011f44:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8011f46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011f4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011f4c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	4313      	orrs	r3, r2
 8011f54:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8011f56:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011f5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	4013      	ands	r3, r2
 8011f60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011f62:	68fb      	ldr	r3, [r7, #12]
}
 8011f64:	bf00      	nop
 8011f66:	3714      	adds	r7, #20
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f6e:	4770      	bx	lr

08011f70 <LL_APB1_GRP1_EnableClock>:
{
 8011f70:	b480      	push	{r7}
 8011f72:	b085      	sub	sp, #20
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8011f78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011f7c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011f7e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	4313      	orrs	r3, r2
 8011f86:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8011f88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8011f8c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	4013      	ands	r3, r2
 8011f92:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8011f94:	68fb      	ldr	r3, [r7, #12]
}
 8011f96:	bf00      	nop
 8011f98:	3714      	adds	r7, #20
 8011f9a:	46bd      	mov	sp, r7
 8011f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fa0:	4770      	bx	lr
	...

08011fa4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	b088      	sub	sp, #32
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011fac:	f107 030c 	add.w	r3, r7, #12
 8011fb0:	2200      	movs	r2, #0
 8011fb2:	601a      	str	r2, [r3, #0]
 8011fb4:	605a      	str	r2, [r3, #4]
 8011fb6:	609a      	str	r2, [r3, #8]
 8011fb8:	60da      	str	r2, [r3, #12]
 8011fba:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	4a17      	ldr	r2, [pc, #92]	@ (8012020 <HAL_PCD_MspInit+0x7c>)
 8011fc2:	4293      	cmp	r3, r2
 8011fc4:	d128      	bne.n	8012018 <HAL_PCD_MspInit+0x74>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011fc6:	2001      	movs	r0, #1
 8011fc8:	f7ff ffb9 	bl	8011f3e <LL_AHB2_GRP1_EnableClock>
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = USB_DM_Pin|USB_DP_Pin;
 8011fcc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8011fd0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011fd2:	2302      	movs	r3, #2
 8011fd4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011fd6:	2300      	movs	r3, #0
 8011fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011fda:	2300      	movs	r3, #0
 8011fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8011fde:	230a      	movs	r3, #10
 8011fe0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011fe2:	f107 030c 	add.w	r3, r7, #12
 8011fe6:	4619      	mov	r1, r3
 8011fe8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8011fec:	f7f5 f898 	bl	8007120 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8011ff0:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8011ff4:	f7ff ffbc 	bl	8011f70 <LL_APB1_GRP1_EnableClock>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 8011ff8:	2200      	movs	r2, #0
 8011ffa:	2100      	movs	r1, #0
 8011ffc:	2013      	movs	r0, #19
 8011ffe:	f7f4 fd78 	bl	8006af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 8012002:	2013      	movs	r0, #19
 8012004:	f7f4 fd8f 	bl	8006b26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8012008:	2200      	movs	r2, #0
 801200a:	2100      	movs	r1, #0
 801200c:	2014      	movs	r0, #20
 801200e:	f7f4 fd70 	bl	8006af2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8012012:	2014      	movs	r0, #20
 8012014:	f7f4 fd87 	bl	8006b26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8012018:	bf00      	nop
 801201a:	3720      	adds	r7, #32
 801201c:	46bd      	mov	sp, r7
 801201e:	bd80      	pop	{r7, pc}
 8012020:	40006800 	.word	0x40006800

08012024 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012024:	b580      	push	{r7, lr}
 8012026:	b082      	sub	sp, #8
 8012028:	af00      	add	r7, sp, #0
 801202a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	@ 0x2d8
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8012038:	4619      	mov	r1, r3
 801203a:	4610      	mov	r0, r2
 801203c:	f7fe fb93 	bl	8010766 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8012040:	bf00      	nop
 8012042:	3708      	adds	r7, #8
 8012044:	46bd      	mov	sp, r7
 8012046:	bd80      	pop	{r7, pc}

08012048 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012048:	b580      	push	{r7, lr}
 801204a:	b082      	sub	sp, #8
 801204c:	af00      	add	r7, sp, #0
 801204e:	6078      	str	r0, [r7, #4]
 8012050:	460b      	mov	r3, r1
 8012052:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 801205a:	78fa      	ldrb	r2, [r7, #3]
 801205c:	6879      	ldr	r1, [r7, #4]
 801205e:	4613      	mov	r3, r2
 8012060:	009b      	lsls	r3, r3, #2
 8012062:	4413      	add	r3, r2
 8012064:	00db      	lsls	r3, r3, #3
 8012066:	440b      	add	r3, r1
 8012068:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801206c:	681a      	ldr	r2, [r3, #0]
 801206e:	78fb      	ldrb	r3, [r7, #3]
 8012070:	4619      	mov	r1, r3
 8012072:	f7fe fbcd 	bl	8010810 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8012076:	bf00      	nop
 8012078:	3708      	adds	r7, #8
 801207a:	46bd      	mov	sp, r7
 801207c:	bd80      	pop	{r7, pc}

0801207e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801207e:	b580      	push	{r7, lr}
 8012080:	b082      	sub	sp, #8
 8012082:	af00      	add	r7, sp, #0
 8012084:	6078      	str	r0, [r7, #4]
 8012086:	460b      	mov	r3, r1
 8012088:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	f8d3 02d8 	ldr.w	r0, [r3, #728]	@ 0x2d8
 8012090:	78fa      	ldrb	r2, [r7, #3]
 8012092:	6879      	ldr	r1, [r7, #4]
 8012094:	4613      	mov	r3, r2
 8012096:	009b      	lsls	r3, r3, #2
 8012098:	4413      	add	r3, r2
 801209a:	00db      	lsls	r3, r3, #3
 801209c:	440b      	add	r3, r1
 801209e:	3324      	adds	r3, #36	@ 0x24
 80120a0:	681a      	ldr	r2, [r3, #0]
 80120a2:	78fb      	ldrb	r3, [r7, #3]
 80120a4:	4619      	mov	r1, r3
 80120a6:	f7fe fc66 	bl	8010976 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80120aa:	bf00      	nop
 80120ac:	3708      	adds	r7, #8
 80120ae:	46bd      	mov	sp, r7
 80120b0:	bd80      	pop	{r7, pc}

080120b2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80120b2:	b580      	push	{r7, lr}
 80120b4:	b082      	sub	sp, #8
 80120b6:	af00      	add	r7, sp, #0
 80120b8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80120c0:	4618      	mov	r0, r3
 80120c2:	f7fe fda0 	bl	8010c06 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80120c6:	bf00      	nop
 80120c8:	3708      	adds	r7, #8
 80120ca:	46bd      	mov	sp, r7
 80120cc:	bd80      	pop	{r7, pc}

080120ce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80120ce:	b580      	push	{r7, lr}
 80120d0:	b084      	sub	sp, #16
 80120d2:	af00      	add	r7, sp, #0
 80120d4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80120d6:	2301      	movs	r3, #1
 80120d8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	795b      	ldrb	r3, [r3, #5]
 80120de:	2b02      	cmp	r3, #2
 80120e0:	d001      	beq.n	80120e6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80120e2:	f7f2 fc8e 	bl	8004a02 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80120ec:	7bfa      	ldrb	r2, [r7, #15]
 80120ee:	4611      	mov	r1, r2
 80120f0:	4618      	mov	r0, r3
 80120f2:	f7fe fd44 	bl	8010b7e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80120fc:	4618      	mov	r0, r3
 80120fe:	f7fe fcec 	bl	8010ada <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8012102:	bf00      	nop
 8012104:	3710      	adds	r7, #16
 8012106:	46bd      	mov	sp, r7
 8012108:	bd80      	pop	{r7, pc}
	...

0801210c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801210c:	b580      	push	{r7, lr}
 801210e:	b082      	sub	sp, #8
 8012110:	af00      	add	r7, sp, #0
 8012112:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801211a:	4618      	mov	r0, r3
 801211c:	f7fe fd3f 	bl	8010b9e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	7a5b      	ldrb	r3, [r3, #9]
 8012124:	2b00      	cmp	r3, #0
 8012126:	d005      	beq.n	8012134 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012128:	4b04      	ldr	r3, [pc, #16]	@ (801213c <HAL_PCD_SuspendCallback+0x30>)
 801212a:	691b      	ldr	r3, [r3, #16]
 801212c:	4a03      	ldr	r2, [pc, #12]	@ (801213c <HAL_PCD_SuspendCallback+0x30>)
 801212e:	f043 0306 	orr.w	r3, r3, #6
 8012132:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8012134:	bf00      	nop
 8012136:	3708      	adds	r7, #8
 8012138:	46bd      	mov	sp, r7
 801213a:	bd80      	pop	{r7, pc}
 801213c:	e000ed00 	.word	0xe000ed00

08012140 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012140:	b580      	push	{r7, lr}
 8012142:	b082      	sub	sp, #8
 8012144:	af00      	add	r7, sp, #0
 8012146:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	7a5b      	ldrb	r3, [r3, #9]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d007      	beq.n	8012160 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012150:	4b08      	ldr	r3, [pc, #32]	@ (8012174 <HAL_PCD_ResumeCallback+0x34>)
 8012152:	691b      	ldr	r3, [r3, #16]
 8012154:	4a07      	ldr	r2, [pc, #28]	@ (8012174 <HAL_PCD_ResumeCallback+0x34>)
 8012156:	f023 0306 	bic.w	r3, r3, #6
 801215a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 801215c:	f000 f9fa 	bl	8012554 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012166:	4618      	mov	r0, r3
 8012168:	f7fe fd35 	bl	8010bd6 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 801216c:	bf00      	nop
 801216e:	3708      	adds	r7, #8
 8012170:	46bd      	mov	sp, r7
 8012172:	bd80      	pop	{r7, pc}
 8012174:	e000ed00 	.word	0xe000ed00

08012178 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012178:	b580      	push	{r7, lr}
 801217a:	b082      	sub	sp, #8
 801217c:	af00      	add	r7, sp, #0
 801217e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8012180:	4a2c      	ldr	r2, [pc, #176]	@ (8012234 <USBD_LL_Init+0xbc>)
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	f8c2 32d8 	str.w	r3, [r2, #728]	@ 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	4a2a      	ldr	r2, [pc, #168]	@ (8012234 <USBD_LL_Init+0xbc>)
 801218c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8
/* Enable USB power on Pwrctrl CR2 register. */
  HAL_PWREx_EnableVddUSB();
 8012190:	f7f8 fa9a 	bl	800a6c8 <HAL_PWREx_EnableVddUSB>

  hpcd_USB_FS.Instance = USB;
 8012194:	4b27      	ldr	r3, [pc, #156]	@ (8012234 <USBD_LL_Init+0xbc>)
 8012196:	4a28      	ldr	r2, [pc, #160]	@ (8012238 <USBD_LL_Init+0xc0>)
 8012198:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801219a:	4b26      	ldr	r3, [pc, #152]	@ (8012234 <USBD_LL_Init+0xbc>)
 801219c:	2208      	movs	r2, #8
 801219e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80121a0:	4b24      	ldr	r3, [pc, #144]	@ (8012234 <USBD_LL_Init+0xbc>)
 80121a2:	2202      	movs	r2, #2
 80121a4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80121a6:	4b23      	ldr	r3, [pc, #140]	@ (8012234 <USBD_LL_Init+0xbc>)
 80121a8:	2202      	movs	r2, #2
 80121aa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80121ac:	4b21      	ldr	r3, [pc, #132]	@ (8012234 <USBD_LL_Init+0xbc>)
 80121ae:	2200      	movs	r2, #0
 80121b0:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80121b2:	4b20      	ldr	r3, [pc, #128]	@ (8012234 <USBD_LL_Init+0xbc>)
 80121b4:	2200      	movs	r2, #0
 80121b6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80121b8:	4b1e      	ldr	r3, [pc, #120]	@ (8012234 <USBD_LL_Init+0xbc>)
 80121ba:	2200      	movs	r2, #0
 80121bc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80121be:	4b1d      	ldr	r3, [pc, #116]	@ (8012234 <USBD_LL_Init+0xbc>)
 80121c0:	2200      	movs	r2, #0
 80121c2:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80121c4:	481b      	ldr	r0, [pc, #108]	@ (8012234 <USBD_LL_Init+0xbc>)
 80121c6:	f7f6 fd2e 	bl	8008c26 <HAL_PCD_Init>
 80121ca:	4603      	mov	r3, r0
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d001      	beq.n	80121d4 <USBD_LL_Init+0x5c>
  {
    Error_Handler( );
 80121d0:	f7f2 fc17 	bl	8004a02 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80121da:	2318      	movs	r3, #24
 80121dc:	2200      	movs	r2, #0
 80121de:	2100      	movs	r1, #0
 80121e0:	f7f8 f9e7 	bl	800a5b2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80121ea:	2358      	movs	r3, #88	@ 0x58
 80121ec:	2200      	movs	r2, #0
 80121ee:	2180      	movs	r1, #128	@ 0x80
 80121f0:	f7f8 f9df 	bl	800a5b2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80121fa:	23c0      	movs	r3, #192	@ 0xc0
 80121fc:	2200      	movs	r2, #0
 80121fe:	2181      	movs	r1, #129	@ 0x81
 8012200:	f7f8 f9d7 	bl	800a5b2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801220a:	f44f 7388 	mov.w	r3, #272	@ 0x110
 801220e:	2200      	movs	r2, #0
 8012210:	2101      	movs	r1, #1
 8012212:	f7f8 f9ce 	bl	800a5b2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801221c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012220:	2200      	movs	r2, #0
 8012222:	2182      	movs	r1, #130	@ 0x82
 8012224:	f7f8 f9c5 	bl	800a5b2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8012228:	2300      	movs	r3, #0
}
 801222a:	4618      	mov	r0, r3
 801222c:	3708      	adds	r7, #8
 801222e:	46bd      	mov	sp, r7
 8012230:	bd80      	pop	{r7, pc}
 8012232:	bf00      	nop
 8012234:	20001b68 	.word	0x20001b68
 8012238:	40006800 	.word	0x40006800

0801223c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801223c:	b580      	push	{r7, lr}
 801223e:	b084      	sub	sp, #16
 8012240:	af00      	add	r7, sp, #0
 8012242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012244:	2300      	movs	r3, #0
 8012246:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012248:	2300      	movs	r3, #0
 801224a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012252:	4618      	mov	r0, r3
 8012254:	f7f6 fdb5 	bl	8008dc2 <HAL_PCD_Start>
 8012258:	4603      	mov	r3, r0
 801225a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801225c:	7bfb      	ldrb	r3, [r7, #15]
 801225e:	4618      	mov	r0, r3
 8012260:	f000 f97e 	bl	8012560 <USBD_Get_USB_Status>
 8012264:	4603      	mov	r3, r0
 8012266:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012268:	7bbb      	ldrb	r3, [r7, #14]
}
 801226a:	4618      	mov	r0, r3
 801226c:	3710      	adds	r7, #16
 801226e:	46bd      	mov	sp, r7
 8012270:	bd80      	pop	{r7, pc}

08012272 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012272:	b580      	push	{r7, lr}
 8012274:	b084      	sub	sp, #16
 8012276:	af00      	add	r7, sp, #0
 8012278:	6078      	str	r0, [r7, #4]
 801227a:	4608      	mov	r0, r1
 801227c:	4611      	mov	r1, r2
 801227e:	461a      	mov	r2, r3
 8012280:	4603      	mov	r3, r0
 8012282:	70fb      	strb	r3, [r7, #3]
 8012284:	460b      	mov	r3, r1
 8012286:	70bb      	strb	r3, [r7, #2]
 8012288:	4613      	mov	r3, r2
 801228a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801228c:	2300      	movs	r3, #0
 801228e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012290:	2300      	movs	r3, #0
 8012292:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801229a:	78bb      	ldrb	r3, [r7, #2]
 801229c:	883a      	ldrh	r2, [r7, #0]
 801229e:	78f9      	ldrb	r1, [r7, #3]
 80122a0:	f7f6 fefc 	bl	800909c <HAL_PCD_EP_Open>
 80122a4:	4603      	mov	r3, r0
 80122a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80122a8:	7bfb      	ldrb	r3, [r7, #15]
 80122aa:	4618      	mov	r0, r3
 80122ac:	f000 f958 	bl	8012560 <USBD_Get_USB_Status>
 80122b0:	4603      	mov	r3, r0
 80122b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80122b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80122b6:	4618      	mov	r0, r3
 80122b8:	3710      	adds	r7, #16
 80122ba:	46bd      	mov	sp, r7
 80122bc:	bd80      	pop	{r7, pc}

080122be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80122be:	b580      	push	{r7, lr}
 80122c0:	b084      	sub	sp, #16
 80122c2:	af00      	add	r7, sp, #0
 80122c4:	6078      	str	r0, [r7, #4]
 80122c6:	460b      	mov	r3, r1
 80122c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80122ca:	2300      	movs	r3, #0
 80122cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80122ce:	2300      	movs	r3, #0
 80122d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80122d8:	78fa      	ldrb	r2, [r7, #3]
 80122da:	4611      	mov	r1, r2
 80122dc:	4618      	mov	r0, r3
 80122de:	f7f6 ff3a 	bl	8009156 <HAL_PCD_EP_Close>
 80122e2:	4603      	mov	r3, r0
 80122e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80122e6:	7bfb      	ldrb	r3, [r7, #15]
 80122e8:	4618      	mov	r0, r3
 80122ea:	f000 f939 	bl	8012560 <USBD_Get_USB_Status>
 80122ee:	4603      	mov	r3, r0
 80122f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80122f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80122f4:	4618      	mov	r0, r3
 80122f6:	3710      	adds	r7, #16
 80122f8:	46bd      	mov	sp, r7
 80122fa:	bd80      	pop	{r7, pc}

080122fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80122fc:	b580      	push	{r7, lr}
 80122fe:	b084      	sub	sp, #16
 8012300:	af00      	add	r7, sp, #0
 8012302:	6078      	str	r0, [r7, #4]
 8012304:	460b      	mov	r3, r1
 8012306:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012308:	2300      	movs	r3, #0
 801230a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801230c:	2300      	movs	r3, #0
 801230e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012316:	78fa      	ldrb	r2, [r7, #3]
 8012318:	4611      	mov	r1, r2
 801231a:	4618      	mov	r0, r3
 801231c:	f7f6 ffe3 	bl	80092e6 <HAL_PCD_EP_SetStall>
 8012320:	4603      	mov	r3, r0
 8012322:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012324:	7bfb      	ldrb	r3, [r7, #15]
 8012326:	4618      	mov	r0, r3
 8012328:	f000 f91a 	bl	8012560 <USBD_Get_USB_Status>
 801232c:	4603      	mov	r3, r0
 801232e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012330:	7bbb      	ldrb	r3, [r7, #14]
}
 8012332:	4618      	mov	r0, r3
 8012334:	3710      	adds	r7, #16
 8012336:	46bd      	mov	sp, r7
 8012338:	bd80      	pop	{r7, pc}

0801233a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801233a:	b580      	push	{r7, lr}
 801233c:	b084      	sub	sp, #16
 801233e:	af00      	add	r7, sp, #0
 8012340:	6078      	str	r0, [r7, #4]
 8012342:	460b      	mov	r3, r1
 8012344:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012346:	2300      	movs	r3, #0
 8012348:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801234a:	2300      	movs	r3, #0
 801234c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012354:	78fa      	ldrb	r2, [r7, #3]
 8012356:	4611      	mov	r1, r2
 8012358:	4618      	mov	r0, r3
 801235a:	f7f7 f816 	bl	800938a <HAL_PCD_EP_ClrStall>
 801235e:	4603      	mov	r3, r0
 8012360:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012362:	7bfb      	ldrb	r3, [r7, #15]
 8012364:	4618      	mov	r0, r3
 8012366:	f000 f8fb 	bl	8012560 <USBD_Get_USB_Status>
 801236a:	4603      	mov	r3, r0
 801236c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801236e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012370:	4618      	mov	r0, r3
 8012372:	3710      	adds	r7, #16
 8012374:	46bd      	mov	sp, r7
 8012376:	bd80      	pop	{r7, pc}

08012378 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012378:	b480      	push	{r7}
 801237a:	b085      	sub	sp, #20
 801237c:	af00      	add	r7, sp, #0
 801237e:	6078      	str	r0, [r7, #4]
 8012380:	460b      	mov	r3, r1
 8012382:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801238a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801238c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012390:	2b00      	cmp	r3, #0
 8012392:	da0b      	bge.n	80123ac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8012394:	78fb      	ldrb	r3, [r7, #3]
 8012396:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801239a:	68f9      	ldr	r1, [r7, #12]
 801239c:	4613      	mov	r3, r2
 801239e:	009b      	lsls	r3, r3, #2
 80123a0:	4413      	add	r3, r2
 80123a2:	00db      	lsls	r3, r3, #3
 80123a4:	440b      	add	r3, r1
 80123a6:	3312      	adds	r3, #18
 80123a8:	781b      	ldrb	r3, [r3, #0]
 80123aa:	e00b      	b.n	80123c4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80123ac:	78fb      	ldrb	r3, [r7, #3]
 80123ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80123b2:	68f9      	ldr	r1, [r7, #12]
 80123b4:	4613      	mov	r3, r2
 80123b6:	009b      	lsls	r3, r3, #2
 80123b8:	4413      	add	r3, r2
 80123ba:	00db      	lsls	r3, r3, #3
 80123bc:	440b      	add	r3, r1
 80123be:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 80123c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80123c4:	4618      	mov	r0, r3
 80123c6:	3714      	adds	r7, #20
 80123c8:	46bd      	mov	sp, r7
 80123ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ce:	4770      	bx	lr

080123d0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b084      	sub	sp, #16
 80123d4:	af00      	add	r7, sp, #0
 80123d6:	6078      	str	r0, [r7, #4]
 80123d8:	460b      	mov	r3, r1
 80123da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80123dc:	2300      	movs	r3, #0
 80123de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80123e0:	2300      	movs	r3, #0
 80123e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80123ea:	78fa      	ldrb	r2, [r7, #3]
 80123ec:	4611      	mov	r1, r2
 80123ee:	4618      	mov	r0, r3
 80123f0:	f7f6 fe30 	bl	8009054 <HAL_PCD_SetAddress>
 80123f4:	4603      	mov	r3, r0
 80123f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80123f8:	7bfb      	ldrb	r3, [r7, #15]
 80123fa:	4618      	mov	r0, r3
 80123fc:	f000 f8b0 	bl	8012560 <USBD_Get_USB_Status>
 8012400:	4603      	mov	r3, r0
 8012402:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012404:	7bbb      	ldrb	r3, [r7, #14]
}
 8012406:	4618      	mov	r0, r3
 8012408:	3710      	adds	r7, #16
 801240a:	46bd      	mov	sp, r7
 801240c:	bd80      	pop	{r7, pc}

0801240e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801240e:	b580      	push	{r7, lr}
 8012410:	b086      	sub	sp, #24
 8012412:	af00      	add	r7, sp, #0
 8012414:	60f8      	str	r0, [r7, #12]
 8012416:	607a      	str	r2, [r7, #4]
 8012418:	603b      	str	r3, [r7, #0]
 801241a:	460b      	mov	r3, r1
 801241c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801241e:	2300      	movs	r3, #0
 8012420:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012422:	2300      	movs	r3, #0
 8012424:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8012426:	68fb      	ldr	r3, [r7, #12]
 8012428:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801242c:	7af9      	ldrb	r1, [r7, #11]
 801242e:	683b      	ldr	r3, [r7, #0]
 8012430:	687a      	ldr	r2, [r7, #4]
 8012432:	f7f6 ff21 	bl	8009278 <HAL_PCD_EP_Transmit>
 8012436:	4603      	mov	r3, r0
 8012438:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801243a:	7dfb      	ldrb	r3, [r7, #23]
 801243c:	4618      	mov	r0, r3
 801243e:	f000 f88f 	bl	8012560 <USBD_Get_USB_Status>
 8012442:	4603      	mov	r3, r0
 8012444:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012446:	7dbb      	ldrb	r3, [r7, #22]
}
 8012448:	4618      	mov	r0, r3
 801244a:	3718      	adds	r7, #24
 801244c:	46bd      	mov	sp, r7
 801244e:	bd80      	pop	{r7, pc}

08012450 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012450:	b580      	push	{r7, lr}
 8012452:	b086      	sub	sp, #24
 8012454:	af00      	add	r7, sp, #0
 8012456:	60f8      	str	r0, [r7, #12]
 8012458:	607a      	str	r2, [r7, #4]
 801245a:	603b      	str	r3, [r7, #0]
 801245c:	460b      	mov	r3, r1
 801245e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012460:	2300      	movs	r3, #0
 8012462:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012464:	2300      	movs	r3, #0
 8012466:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801246e:	7af9      	ldrb	r1, [r7, #11]
 8012470:	683b      	ldr	r3, [r7, #0]
 8012472:	687a      	ldr	r2, [r7, #4]
 8012474:	f7f6 feb7 	bl	80091e6 <HAL_PCD_EP_Receive>
 8012478:	4603      	mov	r3, r0
 801247a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801247c:	7dfb      	ldrb	r3, [r7, #23]
 801247e:	4618      	mov	r0, r3
 8012480:	f000 f86e 	bl	8012560 <USBD_Get_USB_Status>
 8012484:	4603      	mov	r3, r0
 8012486:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012488:	7dbb      	ldrb	r3, [r7, #22]
}
 801248a:	4618      	mov	r0, r3
 801248c:	3718      	adds	r7, #24
 801248e:	46bd      	mov	sp, r7
 8012490:	bd80      	pop	{r7, pc}

08012492 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012492:	b580      	push	{r7, lr}
 8012494:	b082      	sub	sp, #8
 8012496:	af00      	add	r7, sp, #0
 8012498:	6078      	str	r0, [r7, #4]
 801249a:	460b      	mov	r3, r1
 801249c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80124a4:	78fa      	ldrb	r2, [r7, #3]
 80124a6:	4611      	mov	r1, r2
 80124a8:	4618      	mov	r0, r3
 80124aa:	f7f6 fecd 	bl	8009248 <HAL_PCD_EP_GetRxCount>
 80124ae:	4603      	mov	r3, r0
}
 80124b0:	4618      	mov	r0, r3
 80124b2:	3708      	adds	r7, #8
 80124b4:	46bd      	mov	sp, r7
 80124b6:	bd80      	pop	{r7, pc}

080124b8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80124b8:	b580      	push	{r7, lr}
 80124ba:	b082      	sub	sp, #8
 80124bc:	af00      	add	r7, sp, #0
 80124be:	6078      	str	r0, [r7, #4]
 80124c0:	460b      	mov	r3, r1
 80124c2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 80124c4:	78fb      	ldrb	r3, [r7, #3]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d002      	beq.n	80124d0 <HAL_PCDEx_LPM_Callback+0x18>
 80124ca:	2b01      	cmp	r3, #1
 80124cc:	d013      	beq.n	80124f6 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 80124ce:	e023      	b.n	8012518 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	7a5b      	ldrb	r3, [r3, #9]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d007      	beq.n	80124e8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80124d8:	f000 f83c 	bl	8012554 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80124dc:	4b10      	ldr	r3, [pc, #64]	@ (8012520 <HAL_PCDEx_LPM_Callback+0x68>)
 80124de:	691b      	ldr	r3, [r3, #16]
 80124e0:	4a0f      	ldr	r2, [pc, #60]	@ (8012520 <HAL_PCDEx_LPM_Callback+0x68>)
 80124e2:	f023 0306 	bic.w	r3, r3, #6
 80124e6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80124ee:	4618      	mov	r0, r3
 80124f0:	f7fe fb71 	bl	8010bd6 <USBD_LL_Resume>
    break;
 80124f4:	e010      	b.n	8012518 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80124f6:	687b      	ldr	r3, [r7, #4]
 80124f8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80124fc:	4618      	mov	r0, r3
 80124fe:	f7fe fb4e 	bl	8010b9e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	7a5b      	ldrb	r3, [r3, #9]
 8012506:	2b00      	cmp	r3, #0
 8012508:	d005      	beq.n	8012516 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801250a:	4b05      	ldr	r3, [pc, #20]	@ (8012520 <HAL_PCDEx_LPM_Callback+0x68>)
 801250c:	691b      	ldr	r3, [r3, #16]
 801250e:	4a04      	ldr	r2, [pc, #16]	@ (8012520 <HAL_PCDEx_LPM_Callback+0x68>)
 8012510:	f043 0306 	orr.w	r3, r3, #6
 8012514:	6113      	str	r3, [r2, #16]
    break;
 8012516:	bf00      	nop
}
 8012518:	bf00      	nop
 801251a:	3708      	adds	r7, #8
 801251c:	46bd      	mov	sp, r7
 801251e:	bd80      	pop	{r7, pc}
 8012520:	e000ed00 	.word	0xe000ed00

08012524 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012524:	b480      	push	{r7}
 8012526:	b083      	sub	sp, #12
 8012528:	af00      	add	r7, sp, #0
 801252a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801252c:	4b03      	ldr	r3, [pc, #12]	@ (801253c <USBD_static_malloc+0x18>)
}
 801252e:	4618      	mov	r0, r3
 8012530:	370c      	adds	r7, #12
 8012532:	46bd      	mov	sp, r7
 8012534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012538:	4770      	bx	lr
 801253a:	bf00      	nop
 801253c:	20001e44 	.word	0x20001e44

08012540 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8012540:	b480      	push	{r7}
 8012542:	b083      	sub	sp, #12
 8012544:	af00      	add	r7, sp, #0
 8012546:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8012548:	bf00      	nop
 801254a:	370c      	adds	r7, #12
 801254c:	46bd      	mov	sp, r7
 801254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012552:	4770      	bx	lr

08012554 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8012554:	b580      	push	{r7, lr}
 8012556:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8012558:	f7f2 f852 	bl	8004600 <SystemClock_Config>
}
 801255c:	bf00      	nop
 801255e:	bd80      	pop	{r7, pc}

08012560 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012560:	b480      	push	{r7}
 8012562:	b085      	sub	sp, #20
 8012564:	af00      	add	r7, sp, #0
 8012566:	4603      	mov	r3, r0
 8012568:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801256a:	2300      	movs	r3, #0
 801256c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801256e:	79fb      	ldrb	r3, [r7, #7]
 8012570:	2b03      	cmp	r3, #3
 8012572:	d817      	bhi.n	80125a4 <USBD_Get_USB_Status+0x44>
 8012574:	a201      	add	r2, pc, #4	@ (adr r2, 801257c <USBD_Get_USB_Status+0x1c>)
 8012576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801257a:	bf00      	nop
 801257c:	0801258d 	.word	0x0801258d
 8012580:	08012593 	.word	0x08012593
 8012584:	08012599 	.word	0x08012599
 8012588:	0801259f 	.word	0x0801259f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801258c:	2300      	movs	r3, #0
 801258e:	73fb      	strb	r3, [r7, #15]
    break;
 8012590:	e00b      	b.n	80125aa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012592:	2303      	movs	r3, #3
 8012594:	73fb      	strb	r3, [r7, #15]
    break;
 8012596:	e008      	b.n	80125aa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012598:	2301      	movs	r3, #1
 801259a:	73fb      	strb	r3, [r7, #15]
    break;
 801259c:	e005      	b.n	80125aa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801259e:	2303      	movs	r3, #3
 80125a0:	73fb      	strb	r3, [r7, #15]
    break;
 80125a2:	e002      	b.n	80125aa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80125a4:	2303      	movs	r3, #3
 80125a6:	73fb      	strb	r3, [r7, #15]
    break;
 80125a8:	bf00      	nop
  }
  return usb_status;
 80125aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80125ac:	4618      	mov	r0, r3
 80125ae:	3714      	adds	r7, #20
 80125b0:	46bd      	mov	sp, r7
 80125b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b6:	4770      	bx	lr

080125b8 <std>:
 80125b8:	2300      	movs	r3, #0
 80125ba:	b510      	push	{r4, lr}
 80125bc:	4604      	mov	r4, r0
 80125be:	e9c0 3300 	strd	r3, r3, [r0]
 80125c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80125c6:	6083      	str	r3, [r0, #8]
 80125c8:	8181      	strh	r1, [r0, #12]
 80125ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80125cc:	81c2      	strh	r2, [r0, #14]
 80125ce:	6183      	str	r3, [r0, #24]
 80125d0:	4619      	mov	r1, r3
 80125d2:	2208      	movs	r2, #8
 80125d4:	305c      	adds	r0, #92	@ 0x5c
 80125d6:	f000 f90e 	bl	80127f6 <memset>
 80125da:	4b0d      	ldr	r3, [pc, #52]	@ (8012610 <std+0x58>)
 80125dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80125de:	4b0d      	ldr	r3, [pc, #52]	@ (8012614 <std+0x5c>)
 80125e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80125e2:	4b0d      	ldr	r3, [pc, #52]	@ (8012618 <std+0x60>)
 80125e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80125e6:	4b0d      	ldr	r3, [pc, #52]	@ (801261c <std+0x64>)
 80125e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80125ea:	4b0d      	ldr	r3, [pc, #52]	@ (8012620 <std+0x68>)
 80125ec:	6224      	str	r4, [r4, #32]
 80125ee:	429c      	cmp	r4, r3
 80125f0:	d006      	beq.n	8012600 <std+0x48>
 80125f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80125f6:	4294      	cmp	r4, r2
 80125f8:	d002      	beq.n	8012600 <std+0x48>
 80125fa:	33d0      	adds	r3, #208	@ 0xd0
 80125fc:	429c      	cmp	r4, r3
 80125fe:	d105      	bne.n	801260c <std+0x54>
 8012600:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012608:	f000 b96e 	b.w	80128e8 <__retarget_lock_init_recursive>
 801260c:	bd10      	pop	{r4, pc}
 801260e:	bf00      	nop
 8012610:	08012771 	.word	0x08012771
 8012614:	08012793 	.word	0x08012793
 8012618:	080127cb 	.word	0x080127cb
 801261c:	080127ef 	.word	0x080127ef
 8012620:	20002064 	.word	0x20002064

08012624 <stdio_exit_handler>:
 8012624:	4a02      	ldr	r2, [pc, #8]	@ (8012630 <stdio_exit_handler+0xc>)
 8012626:	4903      	ldr	r1, [pc, #12]	@ (8012634 <stdio_exit_handler+0x10>)
 8012628:	4803      	ldr	r0, [pc, #12]	@ (8012638 <stdio_exit_handler+0x14>)
 801262a:	f000 b869 	b.w	8012700 <_fwalk_sglue>
 801262e:	bf00      	nop
 8012630:	2000012c 	.word	0x2000012c
 8012634:	080131a5 	.word	0x080131a5
 8012638:	2000013c 	.word	0x2000013c

0801263c <cleanup_stdio>:
 801263c:	6841      	ldr	r1, [r0, #4]
 801263e:	4b0c      	ldr	r3, [pc, #48]	@ (8012670 <cleanup_stdio+0x34>)
 8012640:	4299      	cmp	r1, r3
 8012642:	b510      	push	{r4, lr}
 8012644:	4604      	mov	r4, r0
 8012646:	d001      	beq.n	801264c <cleanup_stdio+0x10>
 8012648:	f000 fdac 	bl	80131a4 <_fflush_r>
 801264c:	68a1      	ldr	r1, [r4, #8]
 801264e:	4b09      	ldr	r3, [pc, #36]	@ (8012674 <cleanup_stdio+0x38>)
 8012650:	4299      	cmp	r1, r3
 8012652:	d002      	beq.n	801265a <cleanup_stdio+0x1e>
 8012654:	4620      	mov	r0, r4
 8012656:	f000 fda5 	bl	80131a4 <_fflush_r>
 801265a:	68e1      	ldr	r1, [r4, #12]
 801265c:	4b06      	ldr	r3, [pc, #24]	@ (8012678 <cleanup_stdio+0x3c>)
 801265e:	4299      	cmp	r1, r3
 8012660:	d004      	beq.n	801266c <cleanup_stdio+0x30>
 8012662:	4620      	mov	r0, r4
 8012664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012668:	f000 bd9c 	b.w	80131a4 <_fflush_r>
 801266c:	bd10      	pop	{r4, pc}
 801266e:	bf00      	nop
 8012670:	20002064 	.word	0x20002064
 8012674:	200020cc 	.word	0x200020cc
 8012678:	20002134 	.word	0x20002134

0801267c <global_stdio_init.part.0>:
 801267c:	b510      	push	{r4, lr}
 801267e:	4b0b      	ldr	r3, [pc, #44]	@ (80126ac <global_stdio_init.part.0+0x30>)
 8012680:	4c0b      	ldr	r4, [pc, #44]	@ (80126b0 <global_stdio_init.part.0+0x34>)
 8012682:	4a0c      	ldr	r2, [pc, #48]	@ (80126b4 <global_stdio_init.part.0+0x38>)
 8012684:	601a      	str	r2, [r3, #0]
 8012686:	4620      	mov	r0, r4
 8012688:	2200      	movs	r2, #0
 801268a:	2104      	movs	r1, #4
 801268c:	f7ff ff94 	bl	80125b8 <std>
 8012690:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012694:	2201      	movs	r2, #1
 8012696:	2109      	movs	r1, #9
 8012698:	f7ff ff8e 	bl	80125b8 <std>
 801269c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80126a0:	2202      	movs	r2, #2
 80126a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80126a6:	2112      	movs	r1, #18
 80126a8:	f7ff bf86 	b.w	80125b8 <std>
 80126ac:	2000219c 	.word	0x2000219c
 80126b0:	20002064 	.word	0x20002064
 80126b4:	08012625 	.word	0x08012625

080126b8 <__sfp_lock_acquire>:
 80126b8:	4801      	ldr	r0, [pc, #4]	@ (80126c0 <__sfp_lock_acquire+0x8>)
 80126ba:	f000 b916 	b.w	80128ea <__retarget_lock_acquire_recursive>
 80126be:	bf00      	nop
 80126c0:	200021a5 	.word	0x200021a5

080126c4 <__sfp_lock_release>:
 80126c4:	4801      	ldr	r0, [pc, #4]	@ (80126cc <__sfp_lock_release+0x8>)
 80126c6:	f000 b911 	b.w	80128ec <__retarget_lock_release_recursive>
 80126ca:	bf00      	nop
 80126cc:	200021a5 	.word	0x200021a5

080126d0 <__sinit>:
 80126d0:	b510      	push	{r4, lr}
 80126d2:	4604      	mov	r4, r0
 80126d4:	f7ff fff0 	bl	80126b8 <__sfp_lock_acquire>
 80126d8:	6a23      	ldr	r3, [r4, #32]
 80126da:	b11b      	cbz	r3, 80126e4 <__sinit+0x14>
 80126dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80126e0:	f7ff bff0 	b.w	80126c4 <__sfp_lock_release>
 80126e4:	4b04      	ldr	r3, [pc, #16]	@ (80126f8 <__sinit+0x28>)
 80126e6:	6223      	str	r3, [r4, #32]
 80126e8:	4b04      	ldr	r3, [pc, #16]	@ (80126fc <__sinit+0x2c>)
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d1f5      	bne.n	80126dc <__sinit+0xc>
 80126f0:	f7ff ffc4 	bl	801267c <global_stdio_init.part.0>
 80126f4:	e7f2      	b.n	80126dc <__sinit+0xc>
 80126f6:	bf00      	nop
 80126f8:	0801263d 	.word	0x0801263d
 80126fc:	2000219c 	.word	0x2000219c

08012700 <_fwalk_sglue>:
 8012700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012704:	4607      	mov	r7, r0
 8012706:	4688      	mov	r8, r1
 8012708:	4614      	mov	r4, r2
 801270a:	2600      	movs	r6, #0
 801270c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012710:	f1b9 0901 	subs.w	r9, r9, #1
 8012714:	d505      	bpl.n	8012722 <_fwalk_sglue+0x22>
 8012716:	6824      	ldr	r4, [r4, #0]
 8012718:	2c00      	cmp	r4, #0
 801271a:	d1f7      	bne.n	801270c <_fwalk_sglue+0xc>
 801271c:	4630      	mov	r0, r6
 801271e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012722:	89ab      	ldrh	r3, [r5, #12]
 8012724:	2b01      	cmp	r3, #1
 8012726:	d907      	bls.n	8012738 <_fwalk_sglue+0x38>
 8012728:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801272c:	3301      	adds	r3, #1
 801272e:	d003      	beq.n	8012738 <_fwalk_sglue+0x38>
 8012730:	4629      	mov	r1, r5
 8012732:	4638      	mov	r0, r7
 8012734:	47c0      	blx	r8
 8012736:	4306      	orrs	r6, r0
 8012738:	3568      	adds	r5, #104	@ 0x68
 801273a:	e7e9      	b.n	8012710 <_fwalk_sglue+0x10>

0801273c <iprintf>:
 801273c:	b40f      	push	{r0, r1, r2, r3}
 801273e:	b507      	push	{r0, r1, r2, lr}
 8012740:	4906      	ldr	r1, [pc, #24]	@ (801275c <iprintf+0x20>)
 8012742:	ab04      	add	r3, sp, #16
 8012744:	6808      	ldr	r0, [r1, #0]
 8012746:	f853 2b04 	ldr.w	r2, [r3], #4
 801274a:	6881      	ldr	r1, [r0, #8]
 801274c:	9301      	str	r3, [sp, #4]
 801274e:	f000 f9ff 	bl	8012b50 <_vfiprintf_r>
 8012752:	b003      	add	sp, #12
 8012754:	f85d eb04 	ldr.w	lr, [sp], #4
 8012758:	b004      	add	sp, #16
 801275a:	4770      	bx	lr
 801275c:	20000138 	.word	0x20000138

08012760 <putchar>:
 8012760:	4b02      	ldr	r3, [pc, #8]	@ (801276c <putchar+0xc>)
 8012762:	4601      	mov	r1, r0
 8012764:	6818      	ldr	r0, [r3, #0]
 8012766:	6882      	ldr	r2, [r0, #8]
 8012768:	f000 bd44 	b.w	80131f4 <_putc_r>
 801276c:	20000138 	.word	0x20000138

08012770 <__sread>:
 8012770:	b510      	push	{r4, lr}
 8012772:	460c      	mov	r4, r1
 8012774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012778:	f000 f868 	bl	801284c <_read_r>
 801277c:	2800      	cmp	r0, #0
 801277e:	bfab      	itete	ge
 8012780:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012782:	89a3      	ldrhlt	r3, [r4, #12]
 8012784:	181b      	addge	r3, r3, r0
 8012786:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801278a:	bfac      	ite	ge
 801278c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801278e:	81a3      	strhlt	r3, [r4, #12]
 8012790:	bd10      	pop	{r4, pc}

08012792 <__swrite>:
 8012792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012796:	461f      	mov	r7, r3
 8012798:	898b      	ldrh	r3, [r1, #12]
 801279a:	05db      	lsls	r3, r3, #23
 801279c:	4605      	mov	r5, r0
 801279e:	460c      	mov	r4, r1
 80127a0:	4616      	mov	r6, r2
 80127a2:	d505      	bpl.n	80127b0 <__swrite+0x1e>
 80127a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127a8:	2302      	movs	r3, #2
 80127aa:	2200      	movs	r2, #0
 80127ac:	f000 f83c 	bl	8012828 <_lseek_r>
 80127b0:	89a3      	ldrh	r3, [r4, #12]
 80127b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80127b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80127ba:	81a3      	strh	r3, [r4, #12]
 80127bc:	4632      	mov	r2, r6
 80127be:	463b      	mov	r3, r7
 80127c0:	4628      	mov	r0, r5
 80127c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80127c6:	f000 b853 	b.w	8012870 <_write_r>

080127ca <__sseek>:
 80127ca:	b510      	push	{r4, lr}
 80127cc:	460c      	mov	r4, r1
 80127ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127d2:	f000 f829 	bl	8012828 <_lseek_r>
 80127d6:	1c43      	adds	r3, r0, #1
 80127d8:	89a3      	ldrh	r3, [r4, #12]
 80127da:	bf15      	itete	ne
 80127dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80127de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80127e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80127e6:	81a3      	strheq	r3, [r4, #12]
 80127e8:	bf18      	it	ne
 80127ea:	81a3      	strhne	r3, [r4, #12]
 80127ec:	bd10      	pop	{r4, pc}

080127ee <__sclose>:
 80127ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127f2:	f000 b809 	b.w	8012808 <_close_r>

080127f6 <memset>:
 80127f6:	4402      	add	r2, r0
 80127f8:	4603      	mov	r3, r0
 80127fa:	4293      	cmp	r3, r2
 80127fc:	d100      	bne.n	8012800 <memset+0xa>
 80127fe:	4770      	bx	lr
 8012800:	f803 1b01 	strb.w	r1, [r3], #1
 8012804:	e7f9      	b.n	80127fa <memset+0x4>
	...

08012808 <_close_r>:
 8012808:	b538      	push	{r3, r4, r5, lr}
 801280a:	4d06      	ldr	r5, [pc, #24]	@ (8012824 <_close_r+0x1c>)
 801280c:	2300      	movs	r3, #0
 801280e:	4604      	mov	r4, r0
 8012810:	4608      	mov	r0, r1
 8012812:	602b      	str	r3, [r5, #0]
 8012814:	f7f2 facb 	bl	8004dae <_close>
 8012818:	1c43      	adds	r3, r0, #1
 801281a:	d102      	bne.n	8012822 <_close_r+0x1a>
 801281c:	682b      	ldr	r3, [r5, #0]
 801281e:	b103      	cbz	r3, 8012822 <_close_r+0x1a>
 8012820:	6023      	str	r3, [r4, #0]
 8012822:	bd38      	pop	{r3, r4, r5, pc}
 8012824:	200021a0 	.word	0x200021a0

08012828 <_lseek_r>:
 8012828:	b538      	push	{r3, r4, r5, lr}
 801282a:	4d07      	ldr	r5, [pc, #28]	@ (8012848 <_lseek_r+0x20>)
 801282c:	4604      	mov	r4, r0
 801282e:	4608      	mov	r0, r1
 8012830:	4611      	mov	r1, r2
 8012832:	2200      	movs	r2, #0
 8012834:	602a      	str	r2, [r5, #0]
 8012836:	461a      	mov	r2, r3
 8012838:	f7f2 fae0 	bl	8004dfc <_lseek>
 801283c:	1c43      	adds	r3, r0, #1
 801283e:	d102      	bne.n	8012846 <_lseek_r+0x1e>
 8012840:	682b      	ldr	r3, [r5, #0]
 8012842:	b103      	cbz	r3, 8012846 <_lseek_r+0x1e>
 8012844:	6023      	str	r3, [r4, #0]
 8012846:	bd38      	pop	{r3, r4, r5, pc}
 8012848:	200021a0 	.word	0x200021a0

0801284c <_read_r>:
 801284c:	b538      	push	{r3, r4, r5, lr}
 801284e:	4d07      	ldr	r5, [pc, #28]	@ (801286c <_read_r+0x20>)
 8012850:	4604      	mov	r4, r0
 8012852:	4608      	mov	r0, r1
 8012854:	4611      	mov	r1, r2
 8012856:	2200      	movs	r2, #0
 8012858:	602a      	str	r2, [r5, #0]
 801285a:	461a      	mov	r2, r3
 801285c:	f7f2 fa6e 	bl	8004d3c <_read>
 8012860:	1c43      	adds	r3, r0, #1
 8012862:	d102      	bne.n	801286a <_read_r+0x1e>
 8012864:	682b      	ldr	r3, [r5, #0]
 8012866:	b103      	cbz	r3, 801286a <_read_r+0x1e>
 8012868:	6023      	str	r3, [r4, #0]
 801286a:	bd38      	pop	{r3, r4, r5, pc}
 801286c:	200021a0 	.word	0x200021a0

08012870 <_write_r>:
 8012870:	b538      	push	{r3, r4, r5, lr}
 8012872:	4d07      	ldr	r5, [pc, #28]	@ (8012890 <_write_r+0x20>)
 8012874:	4604      	mov	r4, r0
 8012876:	4608      	mov	r0, r1
 8012878:	4611      	mov	r1, r2
 801287a:	2200      	movs	r2, #0
 801287c:	602a      	str	r2, [r5, #0]
 801287e:	461a      	mov	r2, r3
 8012880:	f7f2 fa79 	bl	8004d76 <_write>
 8012884:	1c43      	adds	r3, r0, #1
 8012886:	d102      	bne.n	801288e <_write_r+0x1e>
 8012888:	682b      	ldr	r3, [r5, #0]
 801288a:	b103      	cbz	r3, 801288e <_write_r+0x1e>
 801288c:	6023      	str	r3, [r4, #0]
 801288e:	bd38      	pop	{r3, r4, r5, pc}
 8012890:	200021a0 	.word	0x200021a0

08012894 <__errno>:
 8012894:	4b01      	ldr	r3, [pc, #4]	@ (801289c <__errno+0x8>)
 8012896:	6818      	ldr	r0, [r3, #0]
 8012898:	4770      	bx	lr
 801289a:	bf00      	nop
 801289c:	20000138 	.word	0x20000138

080128a0 <__libc_init_array>:
 80128a0:	b570      	push	{r4, r5, r6, lr}
 80128a2:	4d0d      	ldr	r5, [pc, #52]	@ (80128d8 <__libc_init_array+0x38>)
 80128a4:	4c0d      	ldr	r4, [pc, #52]	@ (80128dc <__libc_init_array+0x3c>)
 80128a6:	1b64      	subs	r4, r4, r5
 80128a8:	10a4      	asrs	r4, r4, #2
 80128aa:	2600      	movs	r6, #0
 80128ac:	42a6      	cmp	r6, r4
 80128ae:	d109      	bne.n	80128c4 <__libc_init_array+0x24>
 80128b0:	4d0b      	ldr	r5, [pc, #44]	@ (80128e0 <__libc_init_array+0x40>)
 80128b2:	4c0c      	ldr	r4, [pc, #48]	@ (80128e4 <__libc_init_array+0x44>)
 80128b4:	f000 fdfa 	bl	80134ac <_init>
 80128b8:	1b64      	subs	r4, r4, r5
 80128ba:	10a4      	asrs	r4, r4, #2
 80128bc:	2600      	movs	r6, #0
 80128be:	42a6      	cmp	r6, r4
 80128c0:	d105      	bne.n	80128ce <__libc_init_array+0x2e>
 80128c2:	bd70      	pop	{r4, r5, r6, pc}
 80128c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80128c8:	4798      	blx	r3
 80128ca:	3601      	adds	r6, #1
 80128cc:	e7ee      	b.n	80128ac <__libc_init_array+0xc>
 80128ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80128d2:	4798      	blx	r3
 80128d4:	3601      	adds	r6, #1
 80128d6:	e7f2      	b.n	80128be <__libc_init_array+0x1e>
 80128d8:	0801368c 	.word	0x0801368c
 80128dc:	0801368c 	.word	0x0801368c
 80128e0:	0801368c 	.word	0x0801368c
 80128e4:	08013690 	.word	0x08013690

080128e8 <__retarget_lock_init_recursive>:
 80128e8:	4770      	bx	lr

080128ea <__retarget_lock_acquire_recursive>:
 80128ea:	4770      	bx	lr

080128ec <__retarget_lock_release_recursive>:
 80128ec:	4770      	bx	lr

080128ee <memcpy>:
 80128ee:	440a      	add	r2, r1
 80128f0:	4291      	cmp	r1, r2
 80128f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80128f6:	d100      	bne.n	80128fa <memcpy+0xc>
 80128f8:	4770      	bx	lr
 80128fa:	b510      	push	{r4, lr}
 80128fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012900:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012904:	4291      	cmp	r1, r2
 8012906:	d1f9      	bne.n	80128fc <memcpy+0xe>
 8012908:	bd10      	pop	{r4, pc}
	...

0801290c <_free_r>:
 801290c:	b538      	push	{r3, r4, r5, lr}
 801290e:	4605      	mov	r5, r0
 8012910:	2900      	cmp	r1, #0
 8012912:	d041      	beq.n	8012998 <_free_r+0x8c>
 8012914:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012918:	1f0c      	subs	r4, r1, #4
 801291a:	2b00      	cmp	r3, #0
 801291c:	bfb8      	it	lt
 801291e:	18e4      	addlt	r4, r4, r3
 8012920:	f000 f8e0 	bl	8012ae4 <__malloc_lock>
 8012924:	4a1d      	ldr	r2, [pc, #116]	@ (801299c <_free_r+0x90>)
 8012926:	6813      	ldr	r3, [r2, #0]
 8012928:	b933      	cbnz	r3, 8012938 <_free_r+0x2c>
 801292a:	6063      	str	r3, [r4, #4]
 801292c:	6014      	str	r4, [r2, #0]
 801292e:	4628      	mov	r0, r5
 8012930:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012934:	f000 b8dc 	b.w	8012af0 <__malloc_unlock>
 8012938:	42a3      	cmp	r3, r4
 801293a:	d908      	bls.n	801294e <_free_r+0x42>
 801293c:	6820      	ldr	r0, [r4, #0]
 801293e:	1821      	adds	r1, r4, r0
 8012940:	428b      	cmp	r3, r1
 8012942:	bf01      	itttt	eq
 8012944:	6819      	ldreq	r1, [r3, #0]
 8012946:	685b      	ldreq	r3, [r3, #4]
 8012948:	1809      	addeq	r1, r1, r0
 801294a:	6021      	streq	r1, [r4, #0]
 801294c:	e7ed      	b.n	801292a <_free_r+0x1e>
 801294e:	461a      	mov	r2, r3
 8012950:	685b      	ldr	r3, [r3, #4]
 8012952:	b10b      	cbz	r3, 8012958 <_free_r+0x4c>
 8012954:	42a3      	cmp	r3, r4
 8012956:	d9fa      	bls.n	801294e <_free_r+0x42>
 8012958:	6811      	ldr	r1, [r2, #0]
 801295a:	1850      	adds	r0, r2, r1
 801295c:	42a0      	cmp	r0, r4
 801295e:	d10b      	bne.n	8012978 <_free_r+0x6c>
 8012960:	6820      	ldr	r0, [r4, #0]
 8012962:	4401      	add	r1, r0
 8012964:	1850      	adds	r0, r2, r1
 8012966:	4283      	cmp	r3, r0
 8012968:	6011      	str	r1, [r2, #0]
 801296a:	d1e0      	bne.n	801292e <_free_r+0x22>
 801296c:	6818      	ldr	r0, [r3, #0]
 801296e:	685b      	ldr	r3, [r3, #4]
 8012970:	6053      	str	r3, [r2, #4]
 8012972:	4408      	add	r0, r1
 8012974:	6010      	str	r0, [r2, #0]
 8012976:	e7da      	b.n	801292e <_free_r+0x22>
 8012978:	d902      	bls.n	8012980 <_free_r+0x74>
 801297a:	230c      	movs	r3, #12
 801297c:	602b      	str	r3, [r5, #0]
 801297e:	e7d6      	b.n	801292e <_free_r+0x22>
 8012980:	6820      	ldr	r0, [r4, #0]
 8012982:	1821      	adds	r1, r4, r0
 8012984:	428b      	cmp	r3, r1
 8012986:	bf04      	itt	eq
 8012988:	6819      	ldreq	r1, [r3, #0]
 801298a:	685b      	ldreq	r3, [r3, #4]
 801298c:	6063      	str	r3, [r4, #4]
 801298e:	bf04      	itt	eq
 8012990:	1809      	addeq	r1, r1, r0
 8012992:	6021      	streq	r1, [r4, #0]
 8012994:	6054      	str	r4, [r2, #4]
 8012996:	e7ca      	b.n	801292e <_free_r+0x22>
 8012998:	bd38      	pop	{r3, r4, r5, pc}
 801299a:	bf00      	nop
 801299c:	200021ac 	.word	0x200021ac

080129a0 <sbrk_aligned>:
 80129a0:	b570      	push	{r4, r5, r6, lr}
 80129a2:	4e0f      	ldr	r6, [pc, #60]	@ (80129e0 <sbrk_aligned+0x40>)
 80129a4:	460c      	mov	r4, r1
 80129a6:	6831      	ldr	r1, [r6, #0]
 80129a8:	4605      	mov	r5, r0
 80129aa:	b911      	cbnz	r1, 80129b2 <sbrk_aligned+0x12>
 80129ac:	f000 fcea 	bl	8013384 <_sbrk_r>
 80129b0:	6030      	str	r0, [r6, #0]
 80129b2:	4621      	mov	r1, r4
 80129b4:	4628      	mov	r0, r5
 80129b6:	f000 fce5 	bl	8013384 <_sbrk_r>
 80129ba:	1c43      	adds	r3, r0, #1
 80129bc:	d103      	bne.n	80129c6 <sbrk_aligned+0x26>
 80129be:	f04f 34ff 	mov.w	r4, #4294967295
 80129c2:	4620      	mov	r0, r4
 80129c4:	bd70      	pop	{r4, r5, r6, pc}
 80129c6:	1cc4      	adds	r4, r0, #3
 80129c8:	f024 0403 	bic.w	r4, r4, #3
 80129cc:	42a0      	cmp	r0, r4
 80129ce:	d0f8      	beq.n	80129c2 <sbrk_aligned+0x22>
 80129d0:	1a21      	subs	r1, r4, r0
 80129d2:	4628      	mov	r0, r5
 80129d4:	f000 fcd6 	bl	8013384 <_sbrk_r>
 80129d8:	3001      	adds	r0, #1
 80129da:	d1f2      	bne.n	80129c2 <sbrk_aligned+0x22>
 80129dc:	e7ef      	b.n	80129be <sbrk_aligned+0x1e>
 80129de:	bf00      	nop
 80129e0:	200021a8 	.word	0x200021a8

080129e4 <_malloc_r>:
 80129e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80129e8:	1ccd      	adds	r5, r1, #3
 80129ea:	f025 0503 	bic.w	r5, r5, #3
 80129ee:	3508      	adds	r5, #8
 80129f0:	2d0c      	cmp	r5, #12
 80129f2:	bf38      	it	cc
 80129f4:	250c      	movcc	r5, #12
 80129f6:	2d00      	cmp	r5, #0
 80129f8:	4606      	mov	r6, r0
 80129fa:	db01      	blt.n	8012a00 <_malloc_r+0x1c>
 80129fc:	42a9      	cmp	r1, r5
 80129fe:	d904      	bls.n	8012a0a <_malloc_r+0x26>
 8012a00:	230c      	movs	r3, #12
 8012a02:	6033      	str	r3, [r6, #0]
 8012a04:	2000      	movs	r0, #0
 8012a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012a0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012ae0 <_malloc_r+0xfc>
 8012a0e:	f000 f869 	bl	8012ae4 <__malloc_lock>
 8012a12:	f8d8 3000 	ldr.w	r3, [r8]
 8012a16:	461c      	mov	r4, r3
 8012a18:	bb44      	cbnz	r4, 8012a6c <_malloc_r+0x88>
 8012a1a:	4629      	mov	r1, r5
 8012a1c:	4630      	mov	r0, r6
 8012a1e:	f7ff ffbf 	bl	80129a0 <sbrk_aligned>
 8012a22:	1c43      	adds	r3, r0, #1
 8012a24:	4604      	mov	r4, r0
 8012a26:	d158      	bne.n	8012ada <_malloc_r+0xf6>
 8012a28:	f8d8 4000 	ldr.w	r4, [r8]
 8012a2c:	4627      	mov	r7, r4
 8012a2e:	2f00      	cmp	r7, #0
 8012a30:	d143      	bne.n	8012aba <_malloc_r+0xd6>
 8012a32:	2c00      	cmp	r4, #0
 8012a34:	d04b      	beq.n	8012ace <_malloc_r+0xea>
 8012a36:	6823      	ldr	r3, [r4, #0]
 8012a38:	4639      	mov	r1, r7
 8012a3a:	4630      	mov	r0, r6
 8012a3c:	eb04 0903 	add.w	r9, r4, r3
 8012a40:	f000 fca0 	bl	8013384 <_sbrk_r>
 8012a44:	4581      	cmp	r9, r0
 8012a46:	d142      	bne.n	8012ace <_malloc_r+0xea>
 8012a48:	6821      	ldr	r1, [r4, #0]
 8012a4a:	1a6d      	subs	r5, r5, r1
 8012a4c:	4629      	mov	r1, r5
 8012a4e:	4630      	mov	r0, r6
 8012a50:	f7ff ffa6 	bl	80129a0 <sbrk_aligned>
 8012a54:	3001      	adds	r0, #1
 8012a56:	d03a      	beq.n	8012ace <_malloc_r+0xea>
 8012a58:	6823      	ldr	r3, [r4, #0]
 8012a5a:	442b      	add	r3, r5
 8012a5c:	6023      	str	r3, [r4, #0]
 8012a5e:	f8d8 3000 	ldr.w	r3, [r8]
 8012a62:	685a      	ldr	r2, [r3, #4]
 8012a64:	bb62      	cbnz	r2, 8012ac0 <_malloc_r+0xdc>
 8012a66:	f8c8 7000 	str.w	r7, [r8]
 8012a6a:	e00f      	b.n	8012a8c <_malloc_r+0xa8>
 8012a6c:	6822      	ldr	r2, [r4, #0]
 8012a6e:	1b52      	subs	r2, r2, r5
 8012a70:	d420      	bmi.n	8012ab4 <_malloc_r+0xd0>
 8012a72:	2a0b      	cmp	r2, #11
 8012a74:	d917      	bls.n	8012aa6 <_malloc_r+0xc2>
 8012a76:	1961      	adds	r1, r4, r5
 8012a78:	42a3      	cmp	r3, r4
 8012a7a:	6025      	str	r5, [r4, #0]
 8012a7c:	bf18      	it	ne
 8012a7e:	6059      	strne	r1, [r3, #4]
 8012a80:	6863      	ldr	r3, [r4, #4]
 8012a82:	bf08      	it	eq
 8012a84:	f8c8 1000 	streq.w	r1, [r8]
 8012a88:	5162      	str	r2, [r4, r5]
 8012a8a:	604b      	str	r3, [r1, #4]
 8012a8c:	4630      	mov	r0, r6
 8012a8e:	f000 f82f 	bl	8012af0 <__malloc_unlock>
 8012a92:	f104 000b 	add.w	r0, r4, #11
 8012a96:	1d23      	adds	r3, r4, #4
 8012a98:	f020 0007 	bic.w	r0, r0, #7
 8012a9c:	1ac2      	subs	r2, r0, r3
 8012a9e:	bf1c      	itt	ne
 8012aa0:	1a1b      	subne	r3, r3, r0
 8012aa2:	50a3      	strne	r3, [r4, r2]
 8012aa4:	e7af      	b.n	8012a06 <_malloc_r+0x22>
 8012aa6:	6862      	ldr	r2, [r4, #4]
 8012aa8:	42a3      	cmp	r3, r4
 8012aaa:	bf0c      	ite	eq
 8012aac:	f8c8 2000 	streq.w	r2, [r8]
 8012ab0:	605a      	strne	r2, [r3, #4]
 8012ab2:	e7eb      	b.n	8012a8c <_malloc_r+0xa8>
 8012ab4:	4623      	mov	r3, r4
 8012ab6:	6864      	ldr	r4, [r4, #4]
 8012ab8:	e7ae      	b.n	8012a18 <_malloc_r+0x34>
 8012aba:	463c      	mov	r4, r7
 8012abc:	687f      	ldr	r7, [r7, #4]
 8012abe:	e7b6      	b.n	8012a2e <_malloc_r+0x4a>
 8012ac0:	461a      	mov	r2, r3
 8012ac2:	685b      	ldr	r3, [r3, #4]
 8012ac4:	42a3      	cmp	r3, r4
 8012ac6:	d1fb      	bne.n	8012ac0 <_malloc_r+0xdc>
 8012ac8:	2300      	movs	r3, #0
 8012aca:	6053      	str	r3, [r2, #4]
 8012acc:	e7de      	b.n	8012a8c <_malloc_r+0xa8>
 8012ace:	230c      	movs	r3, #12
 8012ad0:	6033      	str	r3, [r6, #0]
 8012ad2:	4630      	mov	r0, r6
 8012ad4:	f000 f80c 	bl	8012af0 <__malloc_unlock>
 8012ad8:	e794      	b.n	8012a04 <_malloc_r+0x20>
 8012ada:	6005      	str	r5, [r0, #0]
 8012adc:	e7d6      	b.n	8012a8c <_malloc_r+0xa8>
 8012ade:	bf00      	nop
 8012ae0:	200021ac 	.word	0x200021ac

08012ae4 <__malloc_lock>:
 8012ae4:	4801      	ldr	r0, [pc, #4]	@ (8012aec <__malloc_lock+0x8>)
 8012ae6:	f7ff bf00 	b.w	80128ea <__retarget_lock_acquire_recursive>
 8012aea:	bf00      	nop
 8012aec:	200021a4 	.word	0x200021a4

08012af0 <__malloc_unlock>:
 8012af0:	4801      	ldr	r0, [pc, #4]	@ (8012af8 <__malloc_unlock+0x8>)
 8012af2:	f7ff befb 	b.w	80128ec <__retarget_lock_release_recursive>
 8012af6:	bf00      	nop
 8012af8:	200021a4 	.word	0x200021a4

08012afc <__sfputc_r>:
 8012afc:	6893      	ldr	r3, [r2, #8]
 8012afe:	3b01      	subs	r3, #1
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	b410      	push	{r4}
 8012b04:	6093      	str	r3, [r2, #8]
 8012b06:	da08      	bge.n	8012b1a <__sfputc_r+0x1e>
 8012b08:	6994      	ldr	r4, [r2, #24]
 8012b0a:	42a3      	cmp	r3, r4
 8012b0c:	db01      	blt.n	8012b12 <__sfputc_r+0x16>
 8012b0e:	290a      	cmp	r1, #10
 8012b10:	d103      	bne.n	8012b1a <__sfputc_r+0x1e>
 8012b12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b16:	f000 bba1 	b.w	801325c <__swbuf_r>
 8012b1a:	6813      	ldr	r3, [r2, #0]
 8012b1c:	1c58      	adds	r0, r3, #1
 8012b1e:	6010      	str	r0, [r2, #0]
 8012b20:	7019      	strb	r1, [r3, #0]
 8012b22:	4608      	mov	r0, r1
 8012b24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012b28:	4770      	bx	lr

08012b2a <__sfputs_r>:
 8012b2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b2c:	4606      	mov	r6, r0
 8012b2e:	460f      	mov	r7, r1
 8012b30:	4614      	mov	r4, r2
 8012b32:	18d5      	adds	r5, r2, r3
 8012b34:	42ac      	cmp	r4, r5
 8012b36:	d101      	bne.n	8012b3c <__sfputs_r+0x12>
 8012b38:	2000      	movs	r0, #0
 8012b3a:	e007      	b.n	8012b4c <__sfputs_r+0x22>
 8012b3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012b40:	463a      	mov	r2, r7
 8012b42:	4630      	mov	r0, r6
 8012b44:	f7ff ffda 	bl	8012afc <__sfputc_r>
 8012b48:	1c43      	adds	r3, r0, #1
 8012b4a:	d1f3      	bne.n	8012b34 <__sfputs_r+0xa>
 8012b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012b50 <_vfiprintf_r>:
 8012b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b54:	460d      	mov	r5, r1
 8012b56:	b09d      	sub	sp, #116	@ 0x74
 8012b58:	4614      	mov	r4, r2
 8012b5a:	4698      	mov	r8, r3
 8012b5c:	4606      	mov	r6, r0
 8012b5e:	b118      	cbz	r0, 8012b68 <_vfiprintf_r+0x18>
 8012b60:	6a03      	ldr	r3, [r0, #32]
 8012b62:	b90b      	cbnz	r3, 8012b68 <_vfiprintf_r+0x18>
 8012b64:	f7ff fdb4 	bl	80126d0 <__sinit>
 8012b68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012b6a:	07d9      	lsls	r1, r3, #31
 8012b6c:	d405      	bmi.n	8012b7a <_vfiprintf_r+0x2a>
 8012b6e:	89ab      	ldrh	r3, [r5, #12]
 8012b70:	059a      	lsls	r2, r3, #22
 8012b72:	d402      	bmi.n	8012b7a <_vfiprintf_r+0x2a>
 8012b74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012b76:	f7ff feb8 	bl	80128ea <__retarget_lock_acquire_recursive>
 8012b7a:	89ab      	ldrh	r3, [r5, #12]
 8012b7c:	071b      	lsls	r3, r3, #28
 8012b7e:	d501      	bpl.n	8012b84 <_vfiprintf_r+0x34>
 8012b80:	692b      	ldr	r3, [r5, #16]
 8012b82:	b99b      	cbnz	r3, 8012bac <_vfiprintf_r+0x5c>
 8012b84:	4629      	mov	r1, r5
 8012b86:	4630      	mov	r0, r6
 8012b88:	f000 fba6 	bl	80132d8 <__swsetup_r>
 8012b8c:	b170      	cbz	r0, 8012bac <_vfiprintf_r+0x5c>
 8012b8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012b90:	07dc      	lsls	r4, r3, #31
 8012b92:	d504      	bpl.n	8012b9e <_vfiprintf_r+0x4e>
 8012b94:	f04f 30ff 	mov.w	r0, #4294967295
 8012b98:	b01d      	add	sp, #116	@ 0x74
 8012b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b9e:	89ab      	ldrh	r3, [r5, #12]
 8012ba0:	0598      	lsls	r0, r3, #22
 8012ba2:	d4f7      	bmi.n	8012b94 <_vfiprintf_r+0x44>
 8012ba4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012ba6:	f7ff fea1 	bl	80128ec <__retarget_lock_release_recursive>
 8012baa:	e7f3      	b.n	8012b94 <_vfiprintf_r+0x44>
 8012bac:	2300      	movs	r3, #0
 8012bae:	9309      	str	r3, [sp, #36]	@ 0x24
 8012bb0:	2320      	movs	r3, #32
 8012bb2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012bb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8012bba:	2330      	movs	r3, #48	@ 0x30
 8012bbc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012d6c <_vfiprintf_r+0x21c>
 8012bc0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012bc4:	f04f 0901 	mov.w	r9, #1
 8012bc8:	4623      	mov	r3, r4
 8012bca:	469a      	mov	sl, r3
 8012bcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012bd0:	b10a      	cbz	r2, 8012bd6 <_vfiprintf_r+0x86>
 8012bd2:	2a25      	cmp	r2, #37	@ 0x25
 8012bd4:	d1f9      	bne.n	8012bca <_vfiprintf_r+0x7a>
 8012bd6:	ebba 0b04 	subs.w	fp, sl, r4
 8012bda:	d00b      	beq.n	8012bf4 <_vfiprintf_r+0xa4>
 8012bdc:	465b      	mov	r3, fp
 8012bde:	4622      	mov	r2, r4
 8012be0:	4629      	mov	r1, r5
 8012be2:	4630      	mov	r0, r6
 8012be4:	f7ff ffa1 	bl	8012b2a <__sfputs_r>
 8012be8:	3001      	adds	r0, #1
 8012bea:	f000 80a7 	beq.w	8012d3c <_vfiprintf_r+0x1ec>
 8012bee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012bf0:	445a      	add	r2, fp
 8012bf2:	9209      	str	r2, [sp, #36]	@ 0x24
 8012bf4:	f89a 3000 	ldrb.w	r3, [sl]
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	f000 809f 	beq.w	8012d3c <_vfiprintf_r+0x1ec>
 8012bfe:	2300      	movs	r3, #0
 8012c00:	f04f 32ff 	mov.w	r2, #4294967295
 8012c04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012c08:	f10a 0a01 	add.w	sl, sl, #1
 8012c0c:	9304      	str	r3, [sp, #16]
 8012c0e:	9307      	str	r3, [sp, #28]
 8012c10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012c14:	931a      	str	r3, [sp, #104]	@ 0x68
 8012c16:	4654      	mov	r4, sl
 8012c18:	2205      	movs	r2, #5
 8012c1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012c1e:	4853      	ldr	r0, [pc, #332]	@ (8012d6c <_vfiprintf_r+0x21c>)
 8012c20:	f7ed faae 	bl	8000180 <memchr>
 8012c24:	9a04      	ldr	r2, [sp, #16]
 8012c26:	b9d8      	cbnz	r0, 8012c60 <_vfiprintf_r+0x110>
 8012c28:	06d1      	lsls	r1, r2, #27
 8012c2a:	bf44      	itt	mi
 8012c2c:	2320      	movmi	r3, #32
 8012c2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012c32:	0713      	lsls	r3, r2, #28
 8012c34:	bf44      	itt	mi
 8012c36:	232b      	movmi	r3, #43	@ 0x2b
 8012c38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012c3c:	f89a 3000 	ldrb.w	r3, [sl]
 8012c40:	2b2a      	cmp	r3, #42	@ 0x2a
 8012c42:	d015      	beq.n	8012c70 <_vfiprintf_r+0x120>
 8012c44:	9a07      	ldr	r2, [sp, #28]
 8012c46:	4654      	mov	r4, sl
 8012c48:	2000      	movs	r0, #0
 8012c4a:	f04f 0c0a 	mov.w	ip, #10
 8012c4e:	4621      	mov	r1, r4
 8012c50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012c54:	3b30      	subs	r3, #48	@ 0x30
 8012c56:	2b09      	cmp	r3, #9
 8012c58:	d94b      	bls.n	8012cf2 <_vfiprintf_r+0x1a2>
 8012c5a:	b1b0      	cbz	r0, 8012c8a <_vfiprintf_r+0x13a>
 8012c5c:	9207      	str	r2, [sp, #28]
 8012c5e:	e014      	b.n	8012c8a <_vfiprintf_r+0x13a>
 8012c60:	eba0 0308 	sub.w	r3, r0, r8
 8012c64:	fa09 f303 	lsl.w	r3, r9, r3
 8012c68:	4313      	orrs	r3, r2
 8012c6a:	9304      	str	r3, [sp, #16]
 8012c6c:	46a2      	mov	sl, r4
 8012c6e:	e7d2      	b.n	8012c16 <_vfiprintf_r+0xc6>
 8012c70:	9b03      	ldr	r3, [sp, #12]
 8012c72:	1d19      	adds	r1, r3, #4
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	9103      	str	r1, [sp, #12]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	bfbb      	ittet	lt
 8012c7c:	425b      	neglt	r3, r3
 8012c7e:	f042 0202 	orrlt.w	r2, r2, #2
 8012c82:	9307      	strge	r3, [sp, #28]
 8012c84:	9307      	strlt	r3, [sp, #28]
 8012c86:	bfb8      	it	lt
 8012c88:	9204      	strlt	r2, [sp, #16]
 8012c8a:	7823      	ldrb	r3, [r4, #0]
 8012c8c:	2b2e      	cmp	r3, #46	@ 0x2e
 8012c8e:	d10a      	bne.n	8012ca6 <_vfiprintf_r+0x156>
 8012c90:	7863      	ldrb	r3, [r4, #1]
 8012c92:	2b2a      	cmp	r3, #42	@ 0x2a
 8012c94:	d132      	bne.n	8012cfc <_vfiprintf_r+0x1ac>
 8012c96:	9b03      	ldr	r3, [sp, #12]
 8012c98:	1d1a      	adds	r2, r3, #4
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	9203      	str	r2, [sp, #12]
 8012c9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012ca2:	3402      	adds	r4, #2
 8012ca4:	9305      	str	r3, [sp, #20]
 8012ca6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012d7c <_vfiprintf_r+0x22c>
 8012caa:	7821      	ldrb	r1, [r4, #0]
 8012cac:	2203      	movs	r2, #3
 8012cae:	4650      	mov	r0, sl
 8012cb0:	f7ed fa66 	bl	8000180 <memchr>
 8012cb4:	b138      	cbz	r0, 8012cc6 <_vfiprintf_r+0x176>
 8012cb6:	9b04      	ldr	r3, [sp, #16]
 8012cb8:	eba0 000a 	sub.w	r0, r0, sl
 8012cbc:	2240      	movs	r2, #64	@ 0x40
 8012cbe:	4082      	lsls	r2, r0
 8012cc0:	4313      	orrs	r3, r2
 8012cc2:	3401      	adds	r4, #1
 8012cc4:	9304      	str	r3, [sp, #16]
 8012cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012cca:	4829      	ldr	r0, [pc, #164]	@ (8012d70 <_vfiprintf_r+0x220>)
 8012ccc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012cd0:	2206      	movs	r2, #6
 8012cd2:	f7ed fa55 	bl	8000180 <memchr>
 8012cd6:	2800      	cmp	r0, #0
 8012cd8:	d03f      	beq.n	8012d5a <_vfiprintf_r+0x20a>
 8012cda:	4b26      	ldr	r3, [pc, #152]	@ (8012d74 <_vfiprintf_r+0x224>)
 8012cdc:	bb1b      	cbnz	r3, 8012d26 <_vfiprintf_r+0x1d6>
 8012cde:	9b03      	ldr	r3, [sp, #12]
 8012ce0:	3307      	adds	r3, #7
 8012ce2:	f023 0307 	bic.w	r3, r3, #7
 8012ce6:	3308      	adds	r3, #8
 8012ce8:	9303      	str	r3, [sp, #12]
 8012cea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012cec:	443b      	add	r3, r7
 8012cee:	9309      	str	r3, [sp, #36]	@ 0x24
 8012cf0:	e76a      	b.n	8012bc8 <_vfiprintf_r+0x78>
 8012cf2:	fb0c 3202 	mla	r2, ip, r2, r3
 8012cf6:	460c      	mov	r4, r1
 8012cf8:	2001      	movs	r0, #1
 8012cfa:	e7a8      	b.n	8012c4e <_vfiprintf_r+0xfe>
 8012cfc:	2300      	movs	r3, #0
 8012cfe:	3401      	adds	r4, #1
 8012d00:	9305      	str	r3, [sp, #20]
 8012d02:	4619      	mov	r1, r3
 8012d04:	f04f 0c0a 	mov.w	ip, #10
 8012d08:	4620      	mov	r0, r4
 8012d0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012d0e:	3a30      	subs	r2, #48	@ 0x30
 8012d10:	2a09      	cmp	r2, #9
 8012d12:	d903      	bls.n	8012d1c <_vfiprintf_r+0x1cc>
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d0c6      	beq.n	8012ca6 <_vfiprintf_r+0x156>
 8012d18:	9105      	str	r1, [sp, #20]
 8012d1a:	e7c4      	b.n	8012ca6 <_vfiprintf_r+0x156>
 8012d1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8012d20:	4604      	mov	r4, r0
 8012d22:	2301      	movs	r3, #1
 8012d24:	e7f0      	b.n	8012d08 <_vfiprintf_r+0x1b8>
 8012d26:	ab03      	add	r3, sp, #12
 8012d28:	9300      	str	r3, [sp, #0]
 8012d2a:	462a      	mov	r2, r5
 8012d2c:	4b12      	ldr	r3, [pc, #72]	@ (8012d78 <_vfiprintf_r+0x228>)
 8012d2e:	a904      	add	r1, sp, #16
 8012d30:	4630      	mov	r0, r6
 8012d32:	f3af 8000 	nop.w
 8012d36:	4607      	mov	r7, r0
 8012d38:	1c78      	adds	r0, r7, #1
 8012d3a:	d1d6      	bne.n	8012cea <_vfiprintf_r+0x19a>
 8012d3c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012d3e:	07d9      	lsls	r1, r3, #31
 8012d40:	d405      	bmi.n	8012d4e <_vfiprintf_r+0x1fe>
 8012d42:	89ab      	ldrh	r3, [r5, #12]
 8012d44:	059a      	lsls	r2, r3, #22
 8012d46:	d402      	bmi.n	8012d4e <_vfiprintf_r+0x1fe>
 8012d48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012d4a:	f7ff fdcf 	bl	80128ec <__retarget_lock_release_recursive>
 8012d4e:	89ab      	ldrh	r3, [r5, #12]
 8012d50:	065b      	lsls	r3, r3, #25
 8012d52:	f53f af1f 	bmi.w	8012b94 <_vfiprintf_r+0x44>
 8012d56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012d58:	e71e      	b.n	8012b98 <_vfiprintf_r+0x48>
 8012d5a:	ab03      	add	r3, sp, #12
 8012d5c:	9300      	str	r3, [sp, #0]
 8012d5e:	462a      	mov	r2, r5
 8012d60:	4b05      	ldr	r3, [pc, #20]	@ (8012d78 <_vfiprintf_r+0x228>)
 8012d62:	a904      	add	r1, sp, #16
 8012d64:	4630      	mov	r0, r6
 8012d66:	f000 f879 	bl	8012e5c <_printf_i>
 8012d6a:	e7e4      	b.n	8012d36 <_vfiprintf_r+0x1e6>
 8012d6c:	08013650 	.word	0x08013650
 8012d70:	0801365a 	.word	0x0801365a
 8012d74:	00000000 	.word	0x00000000
 8012d78:	08012b2b 	.word	0x08012b2b
 8012d7c:	08013656 	.word	0x08013656

08012d80 <_printf_common>:
 8012d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d84:	4616      	mov	r6, r2
 8012d86:	4698      	mov	r8, r3
 8012d88:	688a      	ldr	r2, [r1, #8]
 8012d8a:	690b      	ldr	r3, [r1, #16]
 8012d8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012d90:	4293      	cmp	r3, r2
 8012d92:	bfb8      	it	lt
 8012d94:	4613      	movlt	r3, r2
 8012d96:	6033      	str	r3, [r6, #0]
 8012d98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012d9c:	4607      	mov	r7, r0
 8012d9e:	460c      	mov	r4, r1
 8012da0:	b10a      	cbz	r2, 8012da6 <_printf_common+0x26>
 8012da2:	3301      	adds	r3, #1
 8012da4:	6033      	str	r3, [r6, #0]
 8012da6:	6823      	ldr	r3, [r4, #0]
 8012da8:	0699      	lsls	r1, r3, #26
 8012daa:	bf42      	ittt	mi
 8012dac:	6833      	ldrmi	r3, [r6, #0]
 8012dae:	3302      	addmi	r3, #2
 8012db0:	6033      	strmi	r3, [r6, #0]
 8012db2:	6825      	ldr	r5, [r4, #0]
 8012db4:	f015 0506 	ands.w	r5, r5, #6
 8012db8:	d106      	bne.n	8012dc8 <_printf_common+0x48>
 8012dba:	f104 0a19 	add.w	sl, r4, #25
 8012dbe:	68e3      	ldr	r3, [r4, #12]
 8012dc0:	6832      	ldr	r2, [r6, #0]
 8012dc2:	1a9b      	subs	r3, r3, r2
 8012dc4:	42ab      	cmp	r3, r5
 8012dc6:	dc26      	bgt.n	8012e16 <_printf_common+0x96>
 8012dc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012dcc:	6822      	ldr	r2, [r4, #0]
 8012dce:	3b00      	subs	r3, #0
 8012dd0:	bf18      	it	ne
 8012dd2:	2301      	movne	r3, #1
 8012dd4:	0692      	lsls	r2, r2, #26
 8012dd6:	d42b      	bmi.n	8012e30 <_printf_common+0xb0>
 8012dd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012ddc:	4641      	mov	r1, r8
 8012dde:	4638      	mov	r0, r7
 8012de0:	47c8      	blx	r9
 8012de2:	3001      	adds	r0, #1
 8012de4:	d01e      	beq.n	8012e24 <_printf_common+0xa4>
 8012de6:	6823      	ldr	r3, [r4, #0]
 8012de8:	6922      	ldr	r2, [r4, #16]
 8012dea:	f003 0306 	and.w	r3, r3, #6
 8012dee:	2b04      	cmp	r3, #4
 8012df0:	bf02      	ittt	eq
 8012df2:	68e5      	ldreq	r5, [r4, #12]
 8012df4:	6833      	ldreq	r3, [r6, #0]
 8012df6:	1aed      	subeq	r5, r5, r3
 8012df8:	68a3      	ldr	r3, [r4, #8]
 8012dfa:	bf0c      	ite	eq
 8012dfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012e00:	2500      	movne	r5, #0
 8012e02:	4293      	cmp	r3, r2
 8012e04:	bfc4      	itt	gt
 8012e06:	1a9b      	subgt	r3, r3, r2
 8012e08:	18ed      	addgt	r5, r5, r3
 8012e0a:	2600      	movs	r6, #0
 8012e0c:	341a      	adds	r4, #26
 8012e0e:	42b5      	cmp	r5, r6
 8012e10:	d11a      	bne.n	8012e48 <_printf_common+0xc8>
 8012e12:	2000      	movs	r0, #0
 8012e14:	e008      	b.n	8012e28 <_printf_common+0xa8>
 8012e16:	2301      	movs	r3, #1
 8012e18:	4652      	mov	r2, sl
 8012e1a:	4641      	mov	r1, r8
 8012e1c:	4638      	mov	r0, r7
 8012e1e:	47c8      	blx	r9
 8012e20:	3001      	adds	r0, #1
 8012e22:	d103      	bne.n	8012e2c <_printf_common+0xac>
 8012e24:	f04f 30ff 	mov.w	r0, #4294967295
 8012e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e2c:	3501      	adds	r5, #1
 8012e2e:	e7c6      	b.n	8012dbe <_printf_common+0x3e>
 8012e30:	18e1      	adds	r1, r4, r3
 8012e32:	1c5a      	adds	r2, r3, #1
 8012e34:	2030      	movs	r0, #48	@ 0x30
 8012e36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012e3a:	4422      	add	r2, r4
 8012e3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012e40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012e44:	3302      	adds	r3, #2
 8012e46:	e7c7      	b.n	8012dd8 <_printf_common+0x58>
 8012e48:	2301      	movs	r3, #1
 8012e4a:	4622      	mov	r2, r4
 8012e4c:	4641      	mov	r1, r8
 8012e4e:	4638      	mov	r0, r7
 8012e50:	47c8      	blx	r9
 8012e52:	3001      	adds	r0, #1
 8012e54:	d0e6      	beq.n	8012e24 <_printf_common+0xa4>
 8012e56:	3601      	adds	r6, #1
 8012e58:	e7d9      	b.n	8012e0e <_printf_common+0x8e>
	...

08012e5c <_printf_i>:
 8012e5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012e60:	7e0f      	ldrb	r7, [r1, #24]
 8012e62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012e64:	2f78      	cmp	r7, #120	@ 0x78
 8012e66:	4691      	mov	r9, r2
 8012e68:	4680      	mov	r8, r0
 8012e6a:	460c      	mov	r4, r1
 8012e6c:	469a      	mov	sl, r3
 8012e6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012e72:	d807      	bhi.n	8012e84 <_printf_i+0x28>
 8012e74:	2f62      	cmp	r7, #98	@ 0x62
 8012e76:	d80a      	bhi.n	8012e8e <_printf_i+0x32>
 8012e78:	2f00      	cmp	r7, #0
 8012e7a:	f000 80d2 	beq.w	8013022 <_printf_i+0x1c6>
 8012e7e:	2f58      	cmp	r7, #88	@ 0x58
 8012e80:	f000 80b9 	beq.w	8012ff6 <_printf_i+0x19a>
 8012e84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012e88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012e8c:	e03a      	b.n	8012f04 <_printf_i+0xa8>
 8012e8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012e92:	2b15      	cmp	r3, #21
 8012e94:	d8f6      	bhi.n	8012e84 <_printf_i+0x28>
 8012e96:	a101      	add	r1, pc, #4	@ (adr r1, 8012e9c <_printf_i+0x40>)
 8012e98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012e9c:	08012ef5 	.word	0x08012ef5
 8012ea0:	08012f09 	.word	0x08012f09
 8012ea4:	08012e85 	.word	0x08012e85
 8012ea8:	08012e85 	.word	0x08012e85
 8012eac:	08012e85 	.word	0x08012e85
 8012eb0:	08012e85 	.word	0x08012e85
 8012eb4:	08012f09 	.word	0x08012f09
 8012eb8:	08012e85 	.word	0x08012e85
 8012ebc:	08012e85 	.word	0x08012e85
 8012ec0:	08012e85 	.word	0x08012e85
 8012ec4:	08012e85 	.word	0x08012e85
 8012ec8:	08013009 	.word	0x08013009
 8012ecc:	08012f33 	.word	0x08012f33
 8012ed0:	08012fc3 	.word	0x08012fc3
 8012ed4:	08012e85 	.word	0x08012e85
 8012ed8:	08012e85 	.word	0x08012e85
 8012edc:	0801302b 	.word	0x0801302b
 8012ee0:	08012e85 	.word	0x08012e85
 8012ee4:	08012f33 	.word	0x08012f33
 8012ee8:	08012e85 	.word	0x08012e85
 8012eec:	08012e85 	.word	0x08012e85
 8012ef0:	08012fcb 	.word	0x08012fcb
 8012ef4:	6833      	ldr	r3, [r6, #0]
 8012ef6:	1d1a      	adds	r2, r3, #4
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	6032      	str	r2, [r6, #0]
 8012efc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012f00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012f04:	2301      	movs	r3, #1
 8012f06:	e09d      	b.n	8013044 <_printf_i+0x1e8>
 8012f08:	6833      	ldr	r3, [r6, #0]
 8012f0a:	6820      	ldr	r0, [r4, #0]
 8012f0c:	1d19      	adds	r1, r3, #4
 8012f0e:	6031      	str	r1, [r6, #0]
 8012f10:	0606      	lsls	r6, r0, #24
 8012f12:	d501      	bpl.n	8012f18 <_printf_i+0xbc>
 8012f14:	681d      	ldr	r5, [r3, #0]
 8012f16:	e003      	b.n	8012f20 <_printf_i+0xc4>
 8012f18:	0645      	lsls	r5, r0, #25
 8012f1a:	d5fb      	bpl.n	8012f14 <_printf_i+0xb8>
 8012f1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012f20:	2d00      	cmp	r5, #0
 8012f22:	da03      	bge.n	8012f2c <_printf_i+0xd0>
 8012f24:	232d      	movs	r3, #45	@ 0x2d
 8012f26:	426d      	negs	r5, r5
 8012f28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012f2c:	4859      	ldr	r0, [pc, #356]	@ (8013094 <_printf_i+0x238>)
 8012f2e:	230a      	movs	r3, #10
 8012f30:	e011      	b.n	8012f56 <_printf_i+0xfa>
 8012f32:	6821      	ldr	r1, [r4, #0]
 8012f34:	6833      	ldr	r3, [r6, #0]
 8012f36:	0608      	lsls	r0, r1, #24
 8012f38:	f853 5b04 	ldr.w	r5, [r3], #4
 8012f3c:	d402      	bmi.n	8012f44 <_printf_i+0xe8>
 8012f3e:	0649      	lsls	r1, r1, #25
 8012f40:	bf48      	it	mi
 8012f42:	b2ad      	uxthmi	r5, r5
 8012f44:	2f6f      	cmp	r7, #111	@ 0x6f
 8012f46:	4853      	ldr	r0, [pc, #332]	@ (8013094 <_printf_i+0x238>)
 8012f48:	6033      	str	r3, [r6, #0]
 8012f4a:	bf14      	ite	ne
 8012f4c:	230a      	movne	r3, #10
 8012f4e:	2308      	moveq	r3, #8
 8012f50:	2100      	movs	r1, #0
 8012f52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012f56:	6866      	ldr	r6, [r4, #4]
 8012f58:	60a6      	str	r6, [r4, #8]
 8012f5a:	2e00      	cmp	r6, #0
 8012f5c:	bfa2      	ittt	ge
 8012f5e:	6821      	ldrge	r1, [r4, #0]
 8012f60:	f021 0104 	bicge.w	r1, r1, #4
 8012f64:	6021      	strge	r1, [r4, #0]
 8012f66:	b90d      	cbnz	r5, 8012f6c <_printf_i+0x110>
 8012f68:	2e00      	cmp	r6, #0
 8012f6a:	d04b      	beq.n	8013004 <_printf_i+0x1a8>
 8012f6c:	4616      	mov	r6, r2
 8012f6e:	fbb5 f1f3 	udiv	r1, r5, r3
 8012f72:	fb03 5711 	mls	r7, r3, r1, r5
 8012f76:	5dc7      	ldrb	r7, [r0, r7]
 8012f78:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012f7c:	462f      	mov	r7, r5
 8012f7e:	42bb      	cmp	r3, r7
 8012f80:	460d      	mov	r5, r1
 8012f82:	d9f4      	bls.n	8012f6e <_printf_i+0x112>
 8012f84:	2b08      	cmp	r3, #8
 8012f86:	d10b      	bne.n	8012fa0 <_printf_i+0x144>
 8012f88:	6823      	ldr	r3, [r4, #0]
 8012f8a:	07df      	lsls	r7, r3, #31
 8012f8c:	d508      	bpl.n	8012fa0 <_printf_i+0x144>
 8012f8e:	6923      	ldr	r3, [r4, #16]
 8012f90:	6861      	ldr	r1, [r4, #4]
 8012f92:	4299      	cmp	r1, r3
 8012f94:	bfde      	ittt	le
 8012f96:	2330      	movle	r3, #48	@ 0x30
 8012f98:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012f9c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012fa0:	1b92      	subs	r2, r2, r6
 8012fa2:	6122      	str	r2, [r4, #16]
 8012fa4:	f8cd a000 	str.w	sl, [sp]
 8012fa8:	464b      	mov	r3, r9
 8012faa:	aa03      	add	r2, sp, #12
 8012fac:	4621      	mov	r1, r4
 8012fae:	4640      	mov	r0, r8
 8012fb0:	f7ff fee6 	bl	8012d80 <_printf_common>
 8012fb4:	3001      	adds	r0, #1
 8012fb6:	d14a      	bne.n	801304e <_printf_i+0x1f2>
 8012fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8012fbc:	b004      	add	sp, #16
 8012fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fc2:	6823      	ldr	r3, [r4, #0]
 8012fc4:	f043 0320 	orr.w	r3, r3, #32
 8012fc8:	6023      	str	r3, [r4, #0]
 8012fca:	4833      	ldr	r0, [pc, #204]	@ (8013098 <_printf_i+0x23c>)
 8012fcc:	2778      	movs	r7, #120	@ 0x78
 8012fce:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012fd2:	6823      	ldr	r3, [r4, #0]
 8012fd4:	6831      	ldr	r1, [r6, #0]
 8012fd6:	061f      	lsls	r7, r3, #24
 8012fd8:	f851 5b04 	ldr.w	r5, [r1], #4
 8012fdc:	d402      	bmi.n	8012fe4 <_printf_i+0x188>
 8012fde:	065f      	lsls	r7, r3, #25
 8012fe0:	bf48      	it	mi
 8012fe2:	b2ad      	uxthmi	r5, r5
 8012fe4:	6031      	str	r1, [r6, #0]
 8012fe6:	07d9      	lsls	r1, r3, #31
 8012fe8:	bf44      	itt	mi
 8012fea:	f043 0320 	orrmi.w	r3, r3, #32
 8012fee:	6023      	strmi	r3, [r4, #0]
 8012ff0:	b11d      	cbz	r5, 8012ffa <_printf_i+0x19e>
 8012ff2:	2310      	movs	r3, #16
 8012ff4:	e7ac      	b.n	8012f50 <_printf_i+0xf4>
 8012ff6:	4827      	ldr	r0, [pc, #156]	@ (8013094 <_printf_i+0x238>)
 8012ff8:	e7e9      	b.n	8012fce <_printf_i+0x172>
 8012ffa:	6823      	ldr	r3, [r4, #0]
 8012ffc:	f023 0320 	bic.w	r3, r3, #32
 8013000:	6023      	str	r3, [r4, #0]
 8013002:	e7f6      	b.n	8012ff2 <_printf_i+0x196>
 8013004:	4616      	mov	r6, r2
 8013006:	e7bd      	b.n	8012f84 <_printf_i+0x128>
 8013008:	6833      	ldr	r3, [r6, #0]
 801300a:	6825      	ldr	r5, [r4, #0]
 801300c:	6961      	ldr	r1, [r4, #20]
 801300e:	1d18      	adds	r0, r3, #4
 8013010:	6030      	str	r0, [r6, #0]
 8013012:	062e      	lsls	r6, r5, #24
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	d501      	bpl.n	801301c <_printf_i+0x1c0>
 8013018:	6019      	str	r1, [r3, #0]
 801301a:	e002      	b.n	8013022 <_printf_i+0x1c6>
 801301c:	0668      	lsls	r0, r5, #25
 801301e:	d5fb      	bpl.n	8013018 <_printf_i+0x1bc>
 8013020:	8019      	strh	r1, [r3, #0]
 8013022:	2300      	movs	r3, #0
 8013024:	6123      	str	r3, [r4, #16]
 8013026:	4616      	mov	r6, r2
 8013028:	e7bc      	b.n	8012fa4 <_printf_i+0x148>
 801302a:	6833      	ldr	r3, [r6, #0]
 801302c:	1d1a      	adds	r2, r3, #4
 801302e:	6032      	str	r2, [r6, #0]
 8013030:	681e      	ldr	r6, [r3, #0]
 8013032:	6862      	ldr	r2, [r4, #4]
 8013034:	2100      	movs	r1, #0
 8013036:	4630      	mov	r0, r6
 8013038:	f7ed f8a2 	bl	8000180 <memchr>
 801303c:	b108      	cbz	r0, 8013042 <_printf_i+0x1e6>
 801303e:	1b80      	subs	r0, r0, r6
 8013040:	6060      	str	r0, [r4, #4]
 8013042:	6863      	ldr	r3, [r4, #4]
 8013044:	6123      	str	r3, [r4, #16]
 8013046:	2300      	movs	r3, #0
 8013048:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801304c:	e7aa      	b.n	8012fa4 <_printf_i+0x148>
 801304e:	6923      	ldr	r3, [r4, #16]
 8013050:	4632      	mov	r2, r6
 8013052:	4649      	mov	r1, r9
 8013054:	4640      	mov	r0, r8
 8013056:	47d0      	blx	sl
 8013058:	3001      	adds	r0, #1
 801305a:	d0ad      	beq.n	8012fb8 <_printf_i+0x15c>
 801305c:	6823      	ldr	r3, [r4, #0]
 801305e:	079b      	lsls	r3, r3, #30
 8013060:	d413      	bmi.n	801308a <_printf_i+0x22e>
 8013062:	68e0      	ldr	r0, [r4, #12]
 8013064:	9b03      	ldr	r3, [sp, #12]
 8013066:	4298      	cmp	r0, r3
 8013068:	bfb8      	it	lt
 801306a:	4618      	movlt	r0, r3
 801306c:	e7a6      	b.n	8012fbc <_printf_i+0x160>
 801306e:	2301      	movs	r3, #1
 8013070:	4632      	mov	r2, r6
 8013072:	4649      	mov	r1, r9
 8013074:	4640      	mov	r0, r8
 8013076:	47d0      	blx	sl
 8013078:	3001      	adds	r0, #1
 801307a:	d09d      	beq.n	8012fb8 <_printf_i+0x15c>
 801307c:	3501      	adds	r5, #1
 801307e:	68e3      	ldr	r3, [r4, #12]
 8013080:	9903      	ldr	r1, [sp, #12]
 8013082:	1a5b      	subs	r3, r3, r1
 8013084:	42ab      	cmp	r3, r5
 8013086:	dcf2      	bgt.n	801306e <_printf_i+0x212>
 8013088:	e7eb      	b.n	8013062 <_printf_i+0x206>
 801308a:	2500      	movs	r5, #0
 801308c:	f104 0619 	add.w	r6, r4, #25
 8013090:	e7f5      	b.n	801307e <_printf_i+0x222>
 8013092:	bf00      	nop
 8013094:	08013661 	.word	0x08013661
 8013098:	08013672 	.word	0x08013672

0801309c <__sflush_r>:
 801309c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80130a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130a4:	0716      	lsls	r6, r2, #28
 80130a6:	4605      	mov	r5, r0
 80130a8:	460c      	mov	r4, r1
 80130aa:	d454      	bmi.n	8013156 <__sflush_r+0xba>
 80130ac:	684b      	ldr	r3, [r1, #4]
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	dc02      	bgt.n	80130b8 <__sflush_r+0x1c>
 80130b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	dd48      	ble.n	801314a <__sflush_r+0xae>
 80130b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80130ba:	2e00      	cmp	r6, #0
 80130bc:	d045      	beq.n	801314a <__sflush_r+0xae>
 80130be:	2300      	movs	r3, #0
 80130c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80130c4:	682f      	ldr	r7, [r5, #0]
 80130c6:	6a21      	ldr	r1, [r4, #32]
 80130c8:	602b      	str	r3, [r5, #0]
 80130ca:	d030      	beq.n	801312e <__sflush_r+0x92>
 80130cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80130ce:	89a3      	ldrh	r3, [r4, #12]
 80130d0:	0759      	lsls	r1, r3, #29
 80130d2:	d505      	bpl.n	80130e0 <__sflush_r+0x44>
 80130d4:	6863      	ldr	r3, [r4, #4]
 80130d6:	1ad2      	subs	r2, r2, r3
 80130d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80130da:	b10b      	cbz	r3, 80130e0 <__sflush_r+0x44>
 80130dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80130de:	1ad2      	subs	r2, r2, r3
 80130e0:	2300      	movs	r3, #0
 80130e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80130e4:	6a21      	ldr	r1, [r4, #32]
 80130e6:	4628      	mov	r0, r5
 80130e8:	47b0      	blx	r6
 80130ea:	1c43      	adds	r3, r0, #1
 80130ec:	89a3      	ldrh	r3, [r4, #12]
 80130ee:	d106      	bne.n	80130fe <__sflush_r+0x62>
 80130f0:	6829      	ldr	r1, [r5, #0]
 80130f2:	291d      	cmp	r1, #29
 80130f4:	d82b      	bhi.n	801314e <__sflush_r+0xb2>
 80130f6:	4a2a      	ldr	r2, [pc, #168]	@ (80131a0 <__sflush_r+0x104>)
 80130f8:	410a      	asrs	r2, r1
 80130fa:	07d6      	lsls	r6, r2, #31
 80130fc:	d427      	bmi.n	801314e <__sflush_r+0xb2>
 80130fe:	2200      	movs	r2, #0
 8013100:	6062      	str	r2, [r4, #4]
 8013102:	04d9      	lsls	r1, r3, #19
 8013104:	6922      	ldr	r2, [r4, #16]
 8013106:	6022      	str	r2, [r4, #0]
 8013108:	d504      	bpl.n	8013114 <__sflush_r+0x78>
 801310a:	1c42      	adds	r2, r0, #1
 801310c:	d101      	bne.n	8013112 <__sflush_r+0x76>
 801310e:	682b      	ldr	r3, [r5, #0]
 8013110:	b903      	cbnz	r3, 8013114 <__sflush_r+0x78>
 8013112:	6560      	str	r0, [r4, #84]	@ 0x54
 8013114:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8013116:	602f      	str	r7, [r5, #0]
 8013118:	b1b9      	cbz	r1, 801314a <__sflush_r+0xae>
 801311a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801311e:	4299      	cmp	r1, r3
 8013120:	d002      	beq.n	8013128 <__sflush_r+0x8c>
 8013122:	4628      	mov	r0, r5
 8013124:	f7ff fbf2 	bl	801290c <_free_r>
 8013128:	2300      	movs	r3, #0
 801312a:	6363      	str	r3, [r4, #52]	@ 0x34
 801312c:	e00d      	b.n	801314a <__sflush_r+0xae>
 801312e:	2301      	movs	r3, #1
 8013130:	4628      	mov	r0, r5
 8013132:	47b0      	blx	r6
 8013134:	4602      	mov	r2, r0
 8013136:	1c50      	adds	r0, r2, #1
 8013138:	d1c9      	bne.n	80130ce <__sflush_r+0x32>
 801313a:	682b      	ldr	r3, [r5, #0]
 801313c:	2b00      	cmp	r3, #0
 801313e:	d0c6      	beq.n	80130ce <__sflush_r+0x32>
 8013140:	2b1d      	cmp	r3, #29
 8013142:	d001      	beq.n	8013148 <__sflush_r+0xac>
 8013144:	2b16      	cmp	r3, #22
 8013146:	d11e      	bne.n	8013186 <__sflush_r+0xea>
 8013148:	602f      	str	r7, [r5, #0]
 801314a:	2000      	movs	r0, #0
 801314c:	e022      	b.n	8013194 <__sflush_r+0xf8>
 801314e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013152:	b21b      	sxth	r3, r3
 8013154:	e01b      	b.n	801318e <__sflush_r+0xf2>
 8013156:	690f      	ldr	r7, [r1, #16]
 8013158:	2f00      	cmp	r7, #0
 801315a:	d0f6      	beq.n	801314a <__sflush_r+0xae>
 801315c:	0793      	lsls	r3, r2, #30
 801315e:	680e      	ldr	r6, [r1, #0]
 8013160:	bf08      	it	eq
 8013162:	694b      	ldreq	r3, [r1, #20]
 8013164:	600f      	str	r7, [r1, #0]
 8013166:	bf18      	it	ne
 8013168:	2300      	movne	r3, #0
 801316a:	eba6 0807 	sub.w	r8, r6, r7
 801316e:	608b      	str	r3, [r1, #8]
 8013170:	f1b8 0f00 	cmp.w	r8, #0
 8013174:	dde9      	ble.n	801314a <__sflush_r+0xae>
 8013176:	6a21      	ldr	r1, [r4, #32]
 8013178:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801317a:	4643      	mov	r3, r8
 801317c:	463a      	mov	r2, r7
 801317e:	4628      	mov	r0, r5
 8013180:	47b0      	blx	r6
 8013182:	2800      	cmp	r0, #0
 8013184:	dc08      	bgt.n	8013198 <__sflush_r+0xfc>
 8013186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801318a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801318e:	81a3      	strh	r3, [r4, #12]
 8013190:	f04f 30ff 	mov.w	r0, #4294967295
 8013194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013198:	4407      	add	r7, r0
 801319a:	eba8 0800 	sub.w	r8, r8, r0
 801319e:	e7e7      	b.n	8013170 <__sflush_r+0xd4>
 80131a0:	dfbffffe 	.word	0xdfbffffe

080131a4 <_fflush_r>:
 80131a4:	b538      	push	{r3, r4, r5, lr}
 80131a6:	690b      	ldr	r3, [r1, #16]
 80131a8:	4605      	mov	r5, r0
 80131aa:	460c      	mov	r4, r1
 80131ac:	b913      	cbnz	r3, 80131b4 <_fflush_r+0x10>
 80131ae:	2500      	movs	r5, #0
 80131b0:	4628      	mov	r0, r5
 80131b2:	bd38      	pop	{r3, r4, r5, pc}
 80131b4:	b118      	cbz	r0, 80131be <_fflush_r+0x1a>
 80131b6:	6a03      	ldr	r3, [r0, #32]
 80131b8:	b90b      	cbnz	r3, 80131be <_fflush_r+0x1a>
 80131ba:	f7ff fa89 	bl	80126d0 <__sinit>
 80131be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d0f3      	beq.n	80131ae <_fflush_r+0xa>
 80131c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80131c8:	07d0      	lsls	r0, r2, #31
 80131ca:	d404      	bmi.n	80131d6 <_fflush_r+0x32>
 80131cc:	0599      	lsls	r1, r3, #22
 80131ce:	d402      	bmi.n	80131d6 <_fflush_r+0x32>
 80131d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80131d2:	f7ff fb8a 	bl	80128ea <__retarget_lock_acquire_recursive>
 80131d6:	4628      	mov	r0, r5
 80131d8:	4621      	mov	r1, r4
 80131da:	f7ff ff5f 	bl	801309c <__sflush_r>
 80131de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80131e0:	07da      	lsls	r2, r3, #31
 80131e2:	4605      	mov	r5, r0
 80131e4:	d4e4      	bmi.n	80131b0 <_fflush_r+0xc>
 80131e6:	89a3      	ldrh	r3, [r4, #12]
 80131e8:	059b      	lsls	r3, r3, #22
 80131ea:	d4e1      	bmi.n	80131b0 <_fflush_r+0xc>
 80131ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80131ee:	f7ff fb7d 	bl	80128ec <__retarget_lock_release_recursive>
 80131f2:	e7dd      	b.n	80131b0 <_fflush_r+0xc>

080131f4 <_putc_r>:
 80131f4:	b570      	push	{r4, r5, r6, lr}
 80131f6:	460d      	mov	r5, r1
 80131f8:	4614      	mov	r4, r2
 80131fa:	4606      	mov	r6, r0
 80131fc:	b118      	cbz	r0, 8013206 <_putc_r+0x12>
 80131fe:	6a03      	ldr	r3, [r0, #32]
 8013200:	b90b      	cbnz	r3, 8013206 <_putc_r+0x12>
 8013202:	f7ff fa65 	bl	80126d0 <__sinit>
 8013206:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8013208:	07d8      	lsls	r0, r3, #31
 801320a:	d405      	bmi.n	8013218 <_putc_r+0x24>
 801320c:	89a3      	ldrh	r3, [r4, #12]
 801320e:	0599      	lsls	r1, r3, #22
 8013210:	d402      	bmi.n	8013218 <_putc_r+0x24>
 8013212:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013214:	f7ff fb69 	bl	80128ea <__retarget_lock_acquire_recursive>
 8013218:	68a3      	ldr	r3, [r4, #8]
 801321a:	3b01      	subs	r3, #1
 801321c:	2b00      	cmp	r3, #0
 801321e:	60a3      	str	r3, [r4, #8]
 8013220:	da05      	bge.n	801322e <_putc_r+0x3a>
 8013222:	69a2      	ldr	r2, [r4, #24]
 8013224:	4293      	cmp	r3, r2
 8013226:	db12      	blt.n	801324e <_putc_r+0x5a>
 8013228:	b2eb      	uxtb	r3, r5
 801322a:	2b0a      	cmp	r3, #10
 801322c:	d00f      	beq.n	801324e <_putc_r+0x5a>
 801322e:	6823      	ldr	r3, [r4, #0]
 8013230:	1c5a      	adds	r2, r3, #1
 8013232:	6022      	str	r2, [r4, #0]
 8013234:	701d      	strb	r5, [r3, #0]
 8013236:	b2ed      	uxtb	r5, r5
 8013238:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801323a:	07da      	lsls	r2, r3, #31
 801323c:	d405      	bmi.n	801324a <_putc_r+0x56>
 801323e:	89a3      	ldrh	r3, [r4, #12]
 8013240:	059b      	lsls	r3, r3, #22
 8013242:	d402      	bmi.n	801324a <_putc_r+0x56>
 8013244:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8013246:	f7ff fb51 	bl	80128ec <__retarget_lock_release_recursive>
 801324a:	4628      	mov	r0, r5
 801324c:	bd70      	pop	{r4, r5, r6, pc}
 801324e:	4629      	mov	r1, r5
 8013250:	4622      	mov	r2, r4
 8013252:	4630      	mov	r0, r6
 8013254:	f000 f802 	bl	801325c <__swbuf_r>
 8013258:	4605      	mov	r5, r0
 801325a:	e7ed      	b.n	8013238 <_putc_r+0x44>

0801325c <__swbuf_r>:
 801325c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801325e:	460e      	mov	r6, r1
 8013260:	4614      	mov	r4, r2
 8013262:	4605      	mov	r5, r0
 8013264:	b118      	cbz	r0, 801326e <__swbuf_r+0x12>
 8013266:	6a03      	ldr	r3, [r0, #32]
 8013268:	b90b      	cbnz	r3, 801326e <__swbuf_r+0x12>
 801326a:	f7ff fa31 	bl	80126d0 <__sinit>
 801326e:	69a3      	ldr	r3, [r4, #24]
 8013270:	60a3      	str	r3, [r4, #8]
 8013272:	89a3      	ldrh	r3, [r4, #12]
 8013274:	071a      	lsls	r2, r3, #28
 8013276:	d501      	bpl.n	801327c <__swbuf_r+0x20>
 8013278:	6923      	ldr	r3, [r4, #16]
 801327a:	b943      	cbnz	r3, 801328e <__swbuf_r+0x32>
 801327c:	4621      	mov	r1, r4
 801327e:	4628      	mov	r0, r5
 8013280:	f000 f82a 	bl	80132d8 <__swsetup_r>
 8013284:	b118      	cbz	r0, 801328e <__swbuf_r+0x32>
 8013286:	f04f 37ff 	mov.w	r7, #4294967295
 801328a:	4638      	mov	r0, r7
 801328c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801328e:	6823      	ldr	r3, [r4, #0]
 8013290:	6922      	ldr	r2, [r4, #16]
 8013292:	1a98      	subs	r0, r3, r2
 8013294:	6963      	ldr	r3, [r4, #20]
 8013296:	b2f6      	uxtb	r6, r6
 8013298:	4283      	cmp	r3, r0
 801329a:	4637      	mov	r7, r6
 801329c:	dc05      	bgt.n	80132aa <__swbuf_r+0x4e>
 801329e:	4621      	mov	r1, r4
 80132a0:	4628      	mov	r0, r5
 80132a2:	f7ff ff7f 	bl	80131a4 <_fflush_r>
 80132a6:	2800      	cmp	r0, #0
 80132a8:	d1ed      	bne.n	8013286 <__swbuf_r+0x2a>
 80132aa:	68a3      	ldr	r3, [r4, #8]
 80132ac:	3b01      	subs	r3, #1
 80132ae:	60a3      	str	r3, [r4, #8]
 80132b0:	6823      	ldr	r3, [r4, #0]
 80132b2:	1c5a      	adds	r2, r3, #1
 80132b4:	6022      	str	r2, [r4, #0]
 80132b6:	701e      	strb	r6, [r3, #0]
 80132b8:	6962      	ldr	r2, [r4, #20]
 80132ba:	1c43      	adds	r3, r0, #1
 80132bc:	429a      	cmp	r2, r3
 80132be:	d004      	beq.n	80132ca <__swbuf_r+0x6e>
 80132c0:	89a3      	ldrh	r3, [r4, #12]
 80132c2:	07db      	lsls	r3, r3, #31
 80132c4:	d5e1      	bpl.n	801328a <__swbuf_r+0x2e>
 80132c6:	2e0a      	cmp	r6, #10
 80132c8:	d1df      	bne.n	801328a <__swbuf_r+0x2e>
 80132ca:	4621      	mov	r1, r4
 80132cc:	4628      	mov	r0, r5
 80132ce:	f7ff ff69 	bl	80131a4 <_fflush_r>
 80132d2:	2800      	cmp	r0, #0
 80132d4:	d0d9      	beq.n	801328a <__swbuf_r+0x2e>
 80132d6:	e7d6      	b.n	8013286 <__swbuf_r+0x2a>

080132d8 <__swsetup_r>:
 80132d8:	b538      	push	{r3, r4, r5, lr}
 80132da:	4b29      	ldr	r3, [pc, #164]	@ (8013380 <__swsetup_r+0xa8>)
 80132dc:	4605      	mov	r5, r0
 80132de:	6818      	ldr	r0, [r3, #0]
 80132e0:	460c      	mov	r4, r1
 80132e2:	b118      	cbz	r0, 80132ec <__swsetup_r+0x14>
 80132e4:	6a03      	ldr	r3, [r0, #32]
 80132e6:	b90b      	cbnz	r3, 80132ec <__swsetup_r+0x14>
 80132e8:	f7ff f9f2 	bl	80126d0 <__sinit>
 80132ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80132f0:	0719      	lsls	r1, r3, #28
 80132f2:	d422      	bmi.n	801333a <__swsetup_r+0x62>
 80132f4:	06da      	lsls	r2, r3, #27
 80132f6:	d407      	bmi.n	8013308 <__swsetup_r+0x30>
 80132f8:	2209      	movs	r2, #9
 80132fa:	602a      	str	r2, [r5, #0]
 80132fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013300:	81a3      	strh	r3, [r4, #12]
 8013302:	f04f 30ff 	mov.w	r0, #4294967295
 8013306:	e033      	b.n	8013370 <__swsetup_r+0x98>
 8013308:	0758      	lsls	r0, r3, #29
 801330a:	d512      	bpl.n	8013332 <__swsetup_r+0x5a>
 801330c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801330e:	b141      	cbz	r1, 8013322 <__swsetup_r+0x4a>
 8013310:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013314:	4299      	cmp	r1, r3
 8013316:	d002      	beq.n	801331e <__swsetup_r+0x46>
 8013318:	4628      	mov	r0, r5
 801331a:	f7ff faf7 	bl	801290c <_free_r>
 801331e:	2300      	movs	r3, #0
 8013320:	6363      	str	r3, [r4, #52]	@ 0x34
 8013322:	89a3      	ldrh	r3, [r4, #12]
 8013324:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8013328:	81a3      	strh	r3, [r4, #12]
 801332a:	2300      	movs	r3, #0
 801332c:	6063      	str	r3, [r4, #4]
 801332e:	6923      	ldr	r3, [r4, #16]
 8013330:	6023      	str	r3, [r4, #0]
 8013332:	89a3      	ldrh	r3, [r4, #12]
 8013334:	f043 0308 	orr.w	r3, r3, #8
 8013338:	81a3      	strh	r3, [r4, #12]
 801333a:	6923      	ldr	r3, [r4, #16]
 801333c:	b94b      	cbnz	r3, 8013352 <__swsetup_r+0x7a>
 801333e:	89a3      	ldrh	r3, [r4, #12]
 8013340:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8013344:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013348:	d003      	beq.n	8013352 <__swsetup_r+0x7a>
 801334a:	4621      	mov	r1, r4
 801334c:	4628      	mov	r0, r5
 801334e:	f000 f84f 	bl	80133f0 <__smakebuf_r>
 8013352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013356:	f013 0201 	ands.w	r2, r3, #1
 801335a:	d00a      	beq.n	8013372 <__swsetup_r+0x9a>
 801335c:	2200      	movs	r2, #0
 801335e:	60a2      	str	r2, [r4, #8]
 8013360:	6962      	ldr	r2, [r4, #20]
 8013362:	4252      	negs	r2, r2
 8013364:	61a2      	str	r2, [r4, #24]
 8013366:	6922      	ldr	r2, [r4, #16]
 8013368:	b942      	cbnz	r2, 801337c <__swsetup_r+0xa4>
 801336a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801336e:	d1c5      	bne.n	80132fc <__swsetup_r+0x24>
 8013370:	bd38      	pop	{r3, r4, r5, pc}
 8013372:	0799      	lsls	r1, r3, #30
 8013374:	bf58      	it	pl
 8013376:	6962      	ldrpl	r2, [r4, #20]
 8013378:	60a2      	str	r2, [r4, #8]
 801337a:	e7f4      	b.n	8013366 <__swsetup_r+0x8e>
 801337c:	2000      	movs	r0, #0
 801337e:	e7f7      	b.n	8013370 <__swsetup_r+0x98>
 8013380:	20000138 	.word	0x20000138

08013384 <_sbrk_r>:
 8013384:	b538      	push	{r3, r4, r5, lr}
 8013386:	4d06      	ldr	r5, [pc, #24]	@ (80133a0 <_sbrk_r+0x1c>)
 8013388:	2300      	movs	r3, #0
 801338a:	4604      	mov	r4, r0
 801338c:	4608      	mov	r0, r1
 801338e:	602b      	str	r3, [r5, #0]
 8013390:	f7f1 fd42 	bl	8004e18 <_sbrk>
 8013394:	1c43      	adds	r3, r0, #1
 8013396:	d102      	bne.n	801339e <_sbrk_r+0x1a>
 8013398:	682b      	ldr	r3, [r5, #0]
 801339a:	b103      	cbz	r3, 801339e <_sbrk_r+0x1a>
 801339c:	6023      	str	r3, [r4, #0]
 801339e:	bd38      	pop	{r3, r4, r5, pc}
 80133a0:	200021a0 	.word	0x200021a0

080133a4 <__swhatbuf_r>:
 80133a4:	b570      	push	{r4, r5, r6, lr}
 80133a6:	460c      	mov	r4, r1
 80133a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133ac:	2900      	cmp	r1, #0
 80133ae:	b096      	sub	sp, #88	@ 0x58
 80133b0:	4615      	mov	r5, r2
 80133b2:	461e      	mov	r6, r3
 80133b4:	da0d      	bge.n	80133d2 <__swhatbuf_r+0x2e>
 80133b6:	89a3      	ldrh	r3, [r4, #12]
 80133b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80133bc:	f04f 0100 	mov.w	r1, #0
 80133c0:	bf14      	ite	ne
 80133c2:	2340      	movne	r3, #64	@ 0x40
 80133c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80133c8:	2000      	movs	r0, #0
 80133ca:	6031      	str	r1, [r6, #0]
 80133cc:	602b      	str	r3, [r5, #0]
 80133ce:	b016      	add	sp, #88	@ 0x58
 80133d0:	bd70      	pop	{r4, r5, r6, pc}
 80133d2:	466a      	mov	r2, sp
 80133d4:	f000 f848 	bl	8013468 <_fstat_r>
 80133d8:	2800      	cmp	r0, #0
 80133da:	dbec      	blt.n	80133b6 <__swhatbuf_r+0x12>
 80133dc:	9901      	ldr	r1, [sp, #4]
 80133de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80133e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80133e6:	4259      	negs	r1, r3
 80133e8:	4159      	adcs	r1, r3
 80133ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80133ee:	e7eb      	b.n	80133c8 <__swhatbuf_r+0x24>

080133f0 <__smakebuf_r>:
 80133f0:	898b      	ldrh	r3, [r1, #12]
 80133f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80133f4:	079d      	lsls	r5, r3, #30
 80133f6:	4606      	mov	r6, r0
 80133f8:	460c      	mov	r4, r1
 80133fa:	d507      	bpl.n	801340c <__smakebuf_r+0x1c>
 80133fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8013400:	6023      	str	r3, [r4, #0]
 8013402:	6123      	str	r3, [r4, #16]
 8013404:	2301      	movs	r3, #1
 8013406:	6163      	str	r3, [r4, #20]
 8013408:	b003      	add	sp, #12
 801340a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801340c:	ab01      	add	r3, sp, #4
 801340e:	466a      	mov	r2, sp
 8013410:	f7ff ffc8 	bl	80133a4 <__swhatbuf_r>
 8013414:	9f00      	ldr	r7, [sp, #0]
 8013416:	4605      	mov	r5, r0
 8013418:	4639      	mov	r1, r7
 801341a:	4630      	mov	r0, r6
 801341c:	f7ff fae2 	bl	80129e4 <_malloc_r>
 8013420:	b948      	cbnz	r0, 8013436 <__smakebuf_r+0x46>
 8013422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013426:	059a      	lsls	r2, r3, #22
 8013428:	d4ee      	bmi.n	8013408 <__smakebuf_r+0x18>
 801342a:	f023 0303 	bic.w	r3, r3, #3
 801342e:	f043 0302 	orr.w	r3, r3, #2
 8013432:	81a3      	strh	r3, [r4, #12]
 8013434:	e7e2      	b.n	80133fc <__smakebuf_r+0xc>
 8013436:	89a3      	ldrh	r3, [r4, #12]
 8013438:	6020      	str	r0, [r4, #0]
 801343a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801343e:	81a3      	strh	r3, [r4, #12]
 8013440:	9b01      	ldr	r3, [sp, #4]
 8013442:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8013446:	b15b      	cbz	r3, 8013460 <__smakebuf_r+0x70>
 8013448:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801344c:	4630      	mov	r0, r6
 801344e:	f000 f81d 	bl	801348c <_isatty_r>
 8013452:	b128      	cbz	r0, 8013460 <__smakebuf_r+0x70>
 8013454:	89a3      	ldrh	r3, [r4, #12]
 8013456:	f023 0303 	bic.w	r3, r3, #3
 801345a:	f043 0301 	orr.w	r3, r3, #1
 801345e:	81a3      	strh	r3, [r4, #12]
 8013460:	89a3      	ldrh	r3, [r4, #12]
 8013462:	431d      	orrs	r5, r3
 8013464:	81a5      	strh	r5, [r4, #12]
 8013466:	e7cf      	b.n	8013408 <__smakebuf_r+0x18>

08013468 <_fstat_r>:
 8013468:	b538      	push	{r3, r4, r5, lr}
 801346a:	4d07      	ldr	r5, [pc, #28]	@ (8013488 <_fstat_r+0x20>)
 801346c:	2300      	movs	r3, #0
 801346e:	4604      	mov	r4, r0
 8013470:	4608      	mov	r0, r1
 8013472:	4611      	mov	r1, r2
 8013474:	602b      	str	r3, [r5, #0]
 8013476:	f7f1 fca6 	bl	8004dc6 <_fstat>
 801347a:	1c43      	adds	r3, r0, #1
 801347c:	d102      	bne.n	8013484 <_fstat_r+0x1c>
 801347e:	682b      	ldr	r3, [r5, #0]
 8013480:	b103      	cbz	r3, 8013484 <_fstat_r+0x1c>
 8013482:	6023      	str	r3, [r4, #0]
 8013484:	bd38      	pop	{r3, r4, r5, pc}
 8013486:	bf00      	nop
 8013488:	200021a0 	.word	0x200021a0

0801348c <_isatty_r>:
 801348c:	b538      	push	{r3, r4, r5, lr}
 801348e:	4d06      	ldr	r5, [pc, #24]	@ (80134a8 <_isatty_r+0x1c>)
 8013490:	2300      	movs	r3, #0
 8013492:	4604      	mov	r4, r0
 8013494:	4608      	mov	r0, r1
 8013496:	602b      	str	r3, [r5, #0]
 8013498:	f7f1 fca5 	bl	8004de6 <_isatty>
 801349c:	1c43      	adds	r3, r0, #1
 801349e:	d102      	bne.n	80134a6 <_isatty_r+0x1a>
 80134a0:	682b      	ldr	r3, [r5, #0]
 80134a2:	b103      	cbz	r3, 80134a6 <_isatty_r+0x1a>
 80134a4:	6023      	str	r3, [r4, #0]
 80134a6:	bd38      	pop	{r3, r4, r5, pc}
 80134a8:	200021a0 	.word	0x200021a0

080134ac <_init>:
 80134ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134ae:	bf00      	nop
 80134b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80134b2:	bc08      	pop	{r3}
 80134b4:	469e      	mov	lr, r3
 80134b6:	4770      	bx	lr

080134b8 <_fini>:
 80134b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134ba:	bf00      	nop
 80134bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80134be:	bc08      	pop	{r3}
 80134c0:	469e      	mov	lr, r3
 80134c2:	4770      	bx	lr
